/*
Timerek újraírva
NE a SetTimerEx-t használd!

*/
#define SAMPVER 374 //
//==================//
#define MAJOR 1     //
#define MINOR 7     //
#define PATCH 5     //
//==================//
#pragma dynamic 10000

#include <crashdetect>

#include <YSI\y_ini> // Trafinak kell
#include <YSI\y_hooks>
#include <YSI\y_timers>
#include <a_samp>

#if defined MAX_PLAYERS
	#undef MAX_PLAYERS
#endif

#define MAX_PLAYERS (250)
#define MAX_IP_CONNS (10) //1ip rõl max 10 player egyszerre.

#define	posArr{%0}		%0[0], %0[1], %0[2]
#define	posArrEx{%0}	%0[0], %0[1], %0[2], %0[3]
#define fpublic%0(%1) forward%0(%1); public%0(%1)

#define BODY_PART_TORSO (3)
#define BODY_PART_GROIN (4)
#define BODY_PART_LEFT_ARM (5)
#define BODY_PART_RIGHT_ARM (6)
#define BODY_PART_LEFT_LEG (7)
#define BODY_PART_RIGHT_LEG (8)
#define BODY_PART_HEAD (9)

#define BODY_PART_TORSO_A (1)
#define BODY_PART_GROIN_A (2)
#define BODY_PART_LEFT_ARM_A (3)
#define BODY_PART_RIGHT_ARM_A (4)
#define BODY_PART_LEFT_LEG_A (5)
#define BODY_PART_RIGHT_LEG_A (6)
#define BODY_PART_HEAD_A (7)

#define	HEX_PREFIX "#"
#define NO_YSI_VERSION_CHECK

#include <formatnumber_new>
#include <sscanf2>
#include <foreach>
#include <dfor>
#include <zcmd_new>
#include <a_mysql>
#include <md5>
#include <colors>
#include <fixchars>

#include <cstl>
#include <streamer>
#include <dns>

#include <getvehicledriver>
#include <seifader>
#include <mSelection>
#include <udate>
#include <pause>
#include <seif_walk>
#include <progress2>
#include <a_zones>
#include <strlib>
#include <physics>
#include <easydialog>

#define PREFIX			"DayRPG"
#define VERZIO			""#PREFIX " v"#MAJOR"."#MINOR"."#PATCH""

#define WEBOLDAL "DayRPG.eu"

#define TDTARTALOM_BAL 	"Web: dayrpg.eu"
#define TDTARTALOM_JOBB "Discord: dc.com/dayrpg"

#define UCPKONZOL false

#if UCPKONZOL == true
	#define KONZOLAUTH "3k4RWaj0ieItm2FQNl4jjJ2yLx2XM62"
	#include <websockets>
#endif

#define HAZI_SZERVER 0 //	FÕSZERVER(0) | LOCAL(1)
#define NPC_KELL				0 // 1 = betölti 0 = nem - (FCNPS pluginos)
#define MYSQL_HOST  	"127.0.0.1"
#define KELLDWAYNE // Fegyveres NPC

#if HAZI_SZERVER == 0
	#define MYSQL_USER  "see"			//MySQL felhasználónév
	#define MYSQL_DB    "serversql"			//MySQL adatbázis
	#define MYSQL_PW    "u5cQyvB9YefvrQvi"		//MySQL jelszó
#endif

#if HAZI_SZERVER == 1
	#define MYSQL_USER  "see"			//MySQL felhasználónév
	#define MYSQL_DB    "serversql"			//MySQL adatbázis
	#define MYSQL_PW    "u5cQyvB9YefvrQvi"  		//MySQL jelszó
#endif

#if HAZI_SZERVER == 0
new Scripter[3][3][MAX_PLAYER_NAME] =
{
    {"Lewis_Rolee",295,true},
	{"Jason_Leigh",1,true},
	{"Tamasi_Gabor",2,true}
};
#endif

#if HAZI_SZERVER == 1
new Scripter[2][3][MAX_PLAYER_NAME] =
{
	{"Asd_Fgh",1,true},
	{"Kis_Buzi",1,true}
};
#endif
new TrafiBuntetheto[MAX_PLAYERS];
new Focizik[MAX_PLAYERS];

//Szerver port alapján -> ha 7777 akkor éles | ha 7778 akkor teszt
#define tMYSQL_USER  "see"
#define tMYSQL_DB    "serversql"
#define tMYSQL_PW    "u5cQyvB9YefvrQvi"

#define MYSQL_BAN_TABLA				"ban"
#define MYSQL_HAZ_TABLA				"hazak"
#define MYSQL_JATEKOS_TABLA			"jatekosok"
#define MYSQL_JARMU_TABLA			"jarmuvek"
#define MYSQL_FRAKCIO_TABLA			"frakciok"
#define MYSQL_KAPU_TABLA            "kapuk"
#define MYSQL_TERULET_TABLA			"teruletek"
#define MYSQL_BENZINKUTAK_TABLA 	"benzinkutak"
#define MYSQL_CUCCOK_TABLA			"cuccok"
#define MYSQL_AKA_SYSTEM			"aka_sys"
#define MYSQL_BUTOR_TABLA			"butorok"
#define MYSQL_CEGEK_TABLA			"cegek"
#define MYSQL_RACE_TABLA			"race_map"
#define MYSQL_JARMUADAT_TABLA		"jarmuadat"
#define MYSQL_TELEPORT_TABLA		"teleportok"
#define MYSQL_GPS_TABLA 			"gpsek"
#define MYSQL_LOG_TABLA				"logok"
#define MYSQL_SERIAL_BAN			"gpciban"
#define MYSQL_KAMERA_TABLA			"kamerak"
#define MYSQL_SPRAY_TABLA 			"sprayek"
#define MYSQL_HIFI_TABLE			"hifik"
#define MYSQL_ACTIVITY_TABLE		"ig_activity"
#define MYSQL_DRINK_TABLE			"drink"
#define MYSQL_3DTEXT_TABLA          "labels"
#define MYSQL_IPS_TABLA          	"priv_ip"
#define MYSQL_GARAZS_TABLA          "garazs"
#define MYSQL_AJTO_TABLA          	"ajtok"
#define MYSQL_TUZEK_TABLA          	"tuzek"
#define MYSQL_KARIREGEK_TABLA       "ucp_kariregek"
/*--------------- Szerver Fõ Színei -------------*/
#define COL_RSZURKE		"{4C524D}"
#define COL_LKEK		"{1E90FF}"
#define COL_MKEK		"{1E90FF}"
#define COL_SZURKE 		"{757167}"
#define COL_FEHER 		"{FFFFFF}"
#define COL_LRED		"{FF6347}"
#define COL_RED			"{FF6347}"
#define COL_VKEK 		"{00d5ff}"
#define COL_SARG		"{FFFF00}"
#define COL_SARGA		"{FFFF00}"
#define COL_KEK		"{1E90FF}"
#define COL_RSARG		"{ffc400}"
#define COL_FASZTUDJA	"{4C524D}"

#define COLOR_PIROS 0xFF0000FF
#define RSARG 0xffc400AA
#define VKEK 0x00d5ffAA
#define LKEK 0x1E90FFFF
#define LKEK2 0x008cffAA
#define YER 0xF5DEB3AA
#define RED 0xFF6347AA
#define FEHER 0xFFFFFFFF
#define COLOR_MKEK 		0x1E90FFFF
#define COLOR_SZURKE	0x757167FF
#define COLOR_LIGHTKEK 	0x1E90FFFF

#define SQLID(%1) PlayerInfo[%1][pID]
#define HideDialog(%1) ShowPlayerDialog(%1, -1, DIALOG_STYLE_MSGBOX, " ", " ", "", "")
#define loop(%0,%1,%2) for(new %2 = %0; %2 < %1; %2++)

/*-------------- Bitmuveletek -----------------------------*/

#define GetBit(%0,%1)            ((%0) & (%1))
#define OnBit(%0,%1)             ((%0) |= (%1))
#define OffBit(%0,%1)            ((%0) &= ~(%1))
#define ToggleBit(%0,%1)         ((%0) ^= (%1))

/*-------------- MySQL & LiteSQL Definíciók --------------*/
new adatok[256];
#define mysql_get_int(%1,%2,%3) (%3 = cache_get_field_content_int(%1,%2))
#define mysql_get_float(%1,%2,%3) (%3 = cache_get_field_content_float(%1,%2))
#define mysql_get_string cache_get_field_content

//FormatQuery, ha nem akar vacakolni és nem kell paraméterezés - Martin
#define doQuery(%0,%1) mysql_tquery(sql_ID,(format(adatok, sizeof(adatok), (%0), %1), adatok),"","")

#define db_get_int(%1,%2,%3) db_get_field_assoc(%1,%2,adatok,sizeof(adatok));%3 = strval(adatok)
#define db_get_float(%1,%2,%3) db_get_field_assoc(%1,%2,adatok,sizeof(adatok));%3 = floatstr(adatok)
#define db_get_str db_get_field_assoc

//traffipax definek
#define Format(%1,%2,%3) format(%1,sizeof(%1),(%2),%3)
#define CAMERA_LIMIT 20
#define CAMERA_UPDATE_INTERVAL 750
#define CAMERA_BEVILLANAS 1000
#define CAMERA_DIALOG_RANGE 2000
#define CAMERA_USEMPH 0
#define CAMERA_SZOVEG_SZIN 0xFF000FFF
#define CAMERA_PERSPECTIVE false
//traffipax definek vége


#define SZERELES_OSSZEG_KOCSI		215	 //Ennyit von le szerelésenként a szerelõktõl
#define SZERELES_OSSZEG_MOTOR		170
#define SZERELES_OSSZEG_BICIKLI		85
#define SZERELES_OSSZEG_REPULO		2200

#define MAX_KOMPONENS 40 // Tuninghoz
new TuningSzamolo[MAX_PLAYERS];
new KomponensID[MAX_PLAYERS][MAX_KOMPONENS];
new Text3D:sign[MAX_VEHICLES];
new g_KocsiSziklaObj[MAX_VEHICLES][9];
#define SZINT_LEPES			5 //hányszor elvégzet tmunka után kapjon skill-t
#define FIZETES_IDO		90 //perc
#define MAX_ENGEDELY	5
#define WAR_VW			123456789

#define WB_MAX_X 20000.0
#define WB_MIN_X -20000.0
#define WB_MAX_Y 20000.0
#define WB_MIN_Y -20000.0

new CrashAttempts[MAX_PLAYERS];
new CrashAttemptLastCleanupTick[MAX_PLAYERS];

#define BOLT_RABOLHATO	3

#define TERULET_HASZON_IDO	7200

#define nformat(%1,%2,%3,%4) new %1[%2];format(%1,%2,%3,%4)
#define strpcmp(%1,%2) !strcmp(%1,%2,false,strlen(%2))
#define egyezik(%1) (!strcmp(%1, true))
#define StrToPos(%1,%2) %2[0] = floatstr(%1[0]); %2[1] = floatstr(%1[1]); %2[2] = floatstr(%1[2])


#define PosExt(%1) %1[0], %1[1], %1[2]
#define INVALID_3D_TEXT_ID Text3D:(0xFFFF)

#define TIZES		10
#define SZAZAS		100
#define EZRES		1000
#define TIZEZRES	10000
#define SZAZEZRES	100000

#define Kerekites(%0,%1) (((%0 % %1) >= (%1 / 2)) ? (%0 + (%1 - (%0 % %1))) : (%0 - (%0 % %1)))


#define chrtolower(%1) (((%1) > 0x40 && (%1) <= 0x5A) ? ((%1) | 0x20) : (%1))
#define Rand(%1,%2) (%1+random(%2-%1+1))//random szám megadott intervallum közt

#define Bortonben(%0) PlayerInfo[%0][pjail]

new sendfstring[256];
#define SendFormatMessageToAll(%1,%2,%3) SendClientMessageToAll((%1),(format(sendfstring,256,(%2),%3), sendfstring))
#define SendFormatMessage(%1,%2,%3,%4) SendClientMessage(%1,(%2),(format(sendfstring,256,(%3),%4), sendfstring))
#define AdminUzenet(%1,%2,%3,%4) AdminUzenetEx(%1,%2,(format(sendfstring,128,(%3),%4), sendfstring))
#define FormatTextDraw(%1,%2,%3,%4) do{format(%2,sizeof(%2),(%3),%4);strins(%1,%2,strlen(%1));}while(FALSE)
#define AdminLog(%1,%2) AdminLogEx((format(sendfstring, 128,(%1),%2), sendfstring))

#define DIALOG1_MSG "Sultan [mûszerfal]\nSultan [háztetõ]\nCheetah [mûszerfal]\nCheetah [háztetõ]\nWashington [mûszerfal]\nWashington [háztetõ]\nPremier [mûszerfal]\nPremier [háztetõ]\nHuntley [mûszerfal]\nHuntley [háztetõ]\nTöbb"
#define DIALOG2_MSG "Buffalo [mûszerfal]\nBuffalo [háztetõ]\nLSPD Cruiser[mûszerfal]\nLSPD Cruiser[háztetõ]\nSFPD Cruiser[mûszerfal]\nSFPD Cruiser[háztetõ]\nLVPD Cruiser[mûszerfal]\nLVPD Cruiser[háztetõ]\nFiretruck\nFBI Truck \nTöbb"
#define DIALOG3_MSG "Tow Truck\nStretch [mûszerfal]\nStretch [háztetõ]\nPCJ-600\nFCR-900\nWayfarer\nSuper GT\nBurrito [mûszerfal]\nBurrito [háztetõ]\nBF Injection\nPatriot\nBarracks\nRhino"


#define ELDOB_FEGYVER		1
#define ELDOB_MATERIAL		2
#define ELDOB_HEROIN		3
#define ELDOB_KOKAIN		4
#define ELDOB_MARI			5
#define ELDOB_PENZ			6
#define ELDOB_LOSZER        7 //fegyver id - 1000
//Frakció típusok
#define FK_LEGAL	1
#define FK_MAFFIA	2
#define FK_BANDA	3
#define FK_REND		4//rendvédelem

#define DROG_BAL			-1
#define DROG_KOZEP			0
#define DROG_JOBB			1

#define HAZ_MEGVEHETO_MODEL		1273
#define HAZ_MEGVETT_MODEL		1239
#define NEW_KEY(%1)				((newkeys & %1) && !(oldkeys & %1))
#define MAX_INTERIORS			15

#define MAXAFK 900


#define NINCS 				-1
#define UtkozesErzekenyseg	7

#define FSEGED_SZINT		6
#define FOADMIN_SZINT		1337
#define SZUPER_SZINT		1338
#define AC_SZINT			1339
#define FEJLESZTO_SZINT		1340
#define SCRIPTER_SZINT      5555
#define RENDSZG_SZINT 6666
#define FOSCRIPTER_SZINT 8888
#define TULAJ_SZINT	9999

//Adat_Update mûveletek
#define ADAT_MINDEN		0
#define ADAT_HAZ		1
#define ADAT_JARMU		2
#define ADAT_BUTOR		3
#define ADAT_RENDSZAM	4
#define ADAT_NEON		5
#define ADAT_CEG		6

#define ADAT_MINDEN_EX	10
#define ADAT_HAZ_EX		11
#define ADAT_JARMU_EX	12

//Timer processek
#define T_MSEGIT			1//saját magát segíti fel
#define T_SEGIT				2//mást segít fel
#define T_VAS				3
#define T_MATIKESZITES		4
#define T_FKESZITES			5
#define T_UTZAR				6
#define GT_HIRDETES			7
#define T_DROGKESZITES 		8
#define T_C4PLANT			9
#define T_HACKPANEL			10
#define T_PENZPAKOLAS		11
#define T_TUKERES			12
#define T_SISAK				13
#define T_UJJLENYOMAT       14

//Megnevezés - Tárgy ára
#define BL_PAPIR		0
#define BL_CIGI			1
#define BL_GYUJTO		2
#define BL_SZIVOSZAL	3
#define BL_MP3			4
#define BL_VONTATO		5
#define BL_TU			6
#define BL_KANAL		7
#define BL_C4			8
#define BL_PIPA			9
#define BL_BONG			10
#define BL_KEZIRADIO 	11
#define BL_GPS          12
#define BL_TELEFON      13
#define BL_KOTSZER      14
#define BL_SZENDVICS    15
#define BL_TELEFONKONYV 16
#define BL_CSIPOGO      17
#define BL_KANNA        18
#define BL_HIFI         19
#define BL_LAMPA        20
#define BL_BANKKARTYA   21
#define BL_TRAFFIPAX   	22
#define BL_GUMIKESZTYU 	23

#define MAX_BL_CUCC     50
//pProcess lehetõségek
#define PR_RENDSZAM		1
#define PR_CSERE_HAZ	2
#define PR_CSERE_JARMU	3
#define PR_NEON			4
#define PR_ELAD_HAZ		5

//Bizniszek
#define BIZ_PB			0
#define BIZ_HOTDOG		1
#define BIZ_247			2
#define BIZ_RUHA		3
#define BIZ_HIR			4
#define BIZ_FEGYVER		5
#define BIZ_SKV         6
#define BIZ_KERESKEDO   7
#define BIZ_RIO   8
#define BIZ_OMV   9
#define BIZ_JARMU   10

#define P_MAX_TK		10//Tolvajkulcs
#define P_MAX_VAS		15//kg
#define P_MAX_MATERIAL	30000
#define P_MAX_HEROIN	4000
#define P_MAX_KOKAIN	4000
#define P_MAX_MARIHUANA 2500
#define P_MAX_KOTSZER	20
#define P_MAX_C4 		2
#define P_MAX_traffipax		1
#define P_MAX_SZENDVICS 	6
#define P_MAX_BUNTETOPONT   100

#define DROG_TELEFONSZAM	89756
#define MIN_HAZ_AR 20000

//Jármûben maximum ennyi lehet egy adott cuccból
#define J_MAX_VAS		100
#define J_MAX_MATERIAL	80000
#define J_MAX_HEROIN	10000
#define J_MAX_KOKAIN	10000
#define J_MAX_MARIHUANA	10000

//CP processek
#define CP_KAMION_KEZD	1
#define CP_KAMION_CEL	2
#define CP_FAVAGO		3
#define CP_KUKA			4
#define CP_UTTISZTITO	5
#define CP_FEGYVER		6
#define CP_FARMER		7
#define CP_GPS			8
#define CP_DROG			9
#define CP_VAS			10
#define CP_VIZSGA		11
#define CP_LENYOMOZ		12
#define CP_ARU 			13
#define CP_ARU2 		14
#define CP_PILOTA   	15
#define CP_PILOTA2 		16
#define CP_ATMS 		17
#define CP_MOWER 		18

//Vizsga típusok
#define VIZSGA_KOCSI 	1
#define VIZSGA_MOTOR	2
#define VIZSGA_KAMION	3

//SetPlayerAttachedObject -- Slotjai (0 - 9)
#define SLOT_SAPKA 		0
#define SLOT_SZEMUVEG 	1
#define SLOT_BALKEZ 	2
#define SLOT_MASZK		3
#define SLOT_FEGYVER1	4
#define SLOT_FEGYVER2	5
#define SLOT_FEGYVER3	6
#define SLOT_FEGYVER4	7
#define SLOT_HATIZSAK	8
#define SLOT_JOBBKEZ	9
//Ez sajnos betelt :(

#define MAX_LABEL 300
#define DEFAULT_LABEL_DISTANCE 40.0
new Text3D:dynlabels[MAX_LABEL];


#define MAX_HP	150.0
#define MAX_ARMOR 99.0

#define SCM(%1,%2,%3) SendClientMessage(%1, COLOR_WHITE, %2""#PREFIX":"#COL_FEHER" "#%3)
#define SFM(%1,%2,%3) SendFormatMessage(%1, COLOR_WHITE, %2""#PREFIX":"#COL_FEHER" "%3)
#define NEM_HASZNALHATO	""#COL_MKEK""#PREFIX":"#COL_FEHER" Ezt a parancsot nem használhatod!"
#define NEM_MOZOGHAT "Ezt a parancsot jelenleg nem használhatod!(Jármûben/Animban/Bilincsben/Stb)"

#define KEZELESI_KOLTSEG		0.07 //beállítja a bank kezelési költségét
#define RANDOM_STRING_AJ		16 //AJ-ben reakció teszt max karakterei
#define SPECIAL_ACTION_PISSING	68
#define SPECIAL_ACTMEM_PISSING 	128
#define IDO_ELTOLODAS 			2
#define AP_VW					22071
#define LOTTOARA                20

#define AZONOSITJELSZO "roliwok"
//Scriptfiles mappák
#define FILE_PREMIUM			"Premium"
#define FILE_KAPCS				"Kapcsolodasok"
#define FILE_MYSQL				"MySQL"
#define FILE_PARANCS        	"Parancsok"
#define FILE_PARANCS_SIKERTELEN	"Parancs_Sikertelen"
#define FILE_CHEAT				"Cheat"
#define FILE_HALAL				"Halal"
#define FILE_ADMIN				"Admin"
#define FILE_HAZSZEF			"Hazszef"
#define FILE_FSZEF				"Frakcioszef"
#define FILE_BID				"Bejelentesek"
#define FILE_CHAT				"Chat"
#define FILE_ADDS				"Hirdetes"
#define FILE_NEVVALTAS			"Nevvaltas"
#define FILE_CUCCELDOBAS		"Eldobott_cuccok"
#define FILE_Sobeit				"Cheat"

#define LSQL_ADATBAZIS			"Adatbazisok/adatbazisok.db"
#define LSQL_AUTOMATA_TABLA 	"automatak"

/*----------- MAX definíciók -------------*/

#define MAX_JARMU			212//összes jármû adata -> UCP
#define MAX_BOJA			20
#define MAX_HAZ_JARMU		3
#define MAX_TELEPORT 		100
#define MAXGPS 100
#define MAX_AJTO        	150
#define MAX_BENZINKUT		150
#define MAX_AUTOMATA		200
#define MAX_HULLA			100
#define MAX_KAPU 			500
#define MAX_KAPU_HASZNALO 	10
//#define MAX_MYSQL_STRING 	2200
#define MAX_PRINT			2
#define MAX_PROBALKOZASOK   3
#define MAX_HOUSE    		700
#define MAX_DROP 			800
#define MAX_TERULET			50
#define MAX_FRAKCIO_TERULET 8
#define MAX_FA				300
#define MIN_WAR_EMBER       4
#define	MAX_CEG				20
#define MAX_ERTEK			2000000000

//tûz define
#define TUZ_MAX 		5
#define TUZ_OBJECT 		12
#define TUZ_MINTAG 		1
#define TUZ_IDO_MIN     300
#define TUZ_IDO_MAX  	900
#define TUZ_TAV 		5.0
#define TUZ_OLTO_TAV 	6.0
#define TUZ_SERULES 	15.0
#define TUZ_SERULES_TAV 6.0
#define TUZ_MUTAT_TAV 	3000.0
#define TUZ_MAX_POZ		100

#define TERULET_VARAKOZAS 			7200
#define TERULET_VARAKOZAS_FRAKCIO 	10800

#define VEDOK	0
#define TAMADOK 1

#define MAX_FRAKCIO 21
/*-------------- Frakció Definíciók --------------*/
#define FRAKCIO_LSPD		1 //Rendõrség			-van
#define FRAKCIO_LSFD		2 //Tûzoltóság			- NINCS
#define FRAKCIO_LAFD		3 //Mentõ				-van
#define FRAKCIO_GSF			4 //Los Aztecas			-van
#define FRAKCIO_KORMANY		5 //Önkormányzat		-van
#define FRAKCIO_KATONA		6 //SASD		-van
#define FRAKCIO_IMPERIALG		7 //ImperialG       -van
#define FRAKCIO_BALLAS		8 //Ballas				-nincs
#define FRAKCIO_BRATVA		9 //Bratva				-van
#define FRAKCIO_SZERELO		10 //Szerelõ			-van
#define FRAKCIO_IMPERIAL	11 //most vmi bratva	-nincs
#define FRAKCIO_RIPORTER	12 //teszt frakció		-van
#define FRAKCIO_LCN			13 //LCN				-van
#define FRAKCIO_YAKUZA		14 //yakuza				-van
#define FRAKCIO_FBI			15 // ATF (NAV)			-van
#define FRAKCIO_EPITESZ		16 //Dublin Crew		-van
//újak by broki
#define FRAKCIO_CRIMINALS	17 //Criminals			-van
#define FRAKCIO_IRA			18 //IRA				-van
#define FRAKCIO_STOCKWELL	19 //STOCKWELL			-van

new Text3D:vehicle3Dtext[MAX_VEHICLES];
#define MAXBUTOR 			50
#define MAXBUTORSZAM		MAX_HOUSE * MAXBUTOR

#define FK_SKIN_VALASZTAS	98764
#define SKIN_VALASZTAS		98765
#define FBI_SKIN_VALASZTAS		98766
#define FLOAT_INFINITY      (Float:0x7F800000)
#define AR_NEON				21000//Dollár

new SMSSzama[MAX_PLAYERS];
/*-------------- DIALOG ID-k --------------*/
#define DIALOG_NINCS				0
#define DIALOG_SMS                  7123
#define DIALOG_SMSs                 7124
#define DIALOG_LOGIN        		1048
#define DIALOG_REGISTER     		1049
#define DIALOG_INFO					1050
#define DIALOG_TELEPORTOK			1051
#define DIALOG_ELADAS				1052
#define DIALOG_ELADAS2				1053
#define DIALOG_NEM					1054
#define DIALOG_ELETKOR				1055
#define DIALOG_SZARMAZAS			1056
#define DIALOG_BENZINKUTAK			1057
#define DIALOG_KAPU_STATISZTIKA		1058
#define DIALOG_KAPU_MODEL			1059
#define DIALOG_KAPU_TAVOLSAG		1060
#define DIALOG_KAPU_FRAKCIO			1061
#define DIALOG_KAPU_SZERKESZTES		1062
#define DIALOG_KAPU_POZICIO			1063
#define DIALOG_KAPU_SEBESSEG		1064
#define DIALOG_KAPU_FRAKCIO_SZERK	1065
#define DIALOG_KAPU_NEV				1066
#define DIALOG_KAPU_NEV_SZERKESZTES	1067
#define DIALOG_KAPU_TAV_SZERKESZTES	1068
#define DIALOG_KAPU_VALASZTAS		1069
#define DIALOG_KAPU_KOD				1070
#define DIALOG_KAPU_KOD_SZERKESZTES	1071
#define DIALOG_FRAKCIO_SZEF			1072
#define DIALOG_FRAKCIO_PENZ			1073
#define DIALOG_FRAKCIO_MARI			1074
#define DIALOG_FRAKCIO_KOKO			1075
#define DIALOG_FRAKCIO_MATI			1076
#define DIALOG_FRAKCIO_HERO			1077
#define DIALOG_FRAKCIO_TRAFI		2077
#define DIALOG_FRAKCIO_PENZ_B		1078
#define DIALOG_FRAKCIO_PENZ_K		1079
#define DIALOG_FRAKCIO_MARI_B		1093
#define DIALOG_FRAKCIO_MARI_K		1094
#define DIALOG_FRAKCIO_KOKO_B		1095
#define DIALOG_FRAKCIO_KOKO_K		1096
#define DIALOG_FRAKCIO_MATI_B		1097
#define DIALOG_FRAKCIO_MATI_K		1098
#define DIALOG_FRAKCIO_HERO_B		1099
#define DIALOG_FRAKCIO_HERO_K		1100
#define DIALOG_FRAKCIO_TRAFI_B		2099
#define DIALOG_FRAKCIO_TRAFI_K		2100

#define DIALOG_FRAKCIO_FEGYVEREK	1080
#define DIALOG_FRAKCIO_SZEF_SZERK	1081
#define DIALOG_FRAKCIO_VALASZTAS	1082
#define DIALOG_LOGIN_USER_INPUT		1083
#define DIALOG_LOGIN_PW_INPUT		1084
#define DIALOG_DROG					1085
#define DIALOG_DROGMAG				1086
#define DIALOG_FEGYVERKESZITES		1087
#define DIALOG_BOLT					1088
#define DIALOG_FRAKCIO_SZEFMN		1089
#define DIALOG_DROGULT				1092

#define DIALOG_RADIO				1090
#define DIALOG_RADIO_JARMU			1091

#define DIALOG_BUTOR_PREMIUM		9877
#define DIALOG_BUTOR				9878
#define DIALOG_SZABAD_BUTOROK 		9879
#define DIALOG_BUTOR_VETEL	 		9880
#define	DIALOG_BUTOR_SZERKESZTES	9881
#define DIALOG_BUTOR_KATEGORIA		9882
#define DIALOG_BUTOR_ASZTAL			9883
#define DIALOG_SZABAD_BUTOROK_LISTA	9884
#define DIALOG_BUTOR_MEGVETEL		9885
#define DIALOG_BUTOR_TORLES			9886

#define DIALOG_HAZ_SZEF				9887
#define DIALOG_HAZ_SZEF_PENZ		9988
#define DIALOG_HAZ_SZEF_KOKO		9989
#define DIALOG_HAZ_SZEF_HERO		9990
#define DIALOG_HAZ_SZEF_MARI		9991
#define DIALOG_HAZ_SZEF_MATI		9992

#define DIALOG_HAZ_SZEF_PENZ_B		9993
#define DIALOG_HAZ_SZEF_PENZ_K		9994
#define DIALOG_HAZ_SZEF_KOKO_B		9995
#define DIALOG_HAZ_SZEF_KOKO_K		9996
#define DIALOG_HAZ_SZEF_HERO_B		9997
#define DIALOG_HAZ_SZEF_HERO_K		9998
#define DIALOG_HAZ_SZEF_MARI_B		9999
#define DIALOG_HAZ_SZEF_MARI_K		10000
#define DIALOG_HAZ_SZEF_MATI_B		10001
#define DIALOG_HAZ_SZEF_MATI_K		10002
#define DIALOG_HAZ_SZEF_FEGY		10003

#define DIALOG_ADMIN				10004
#define DIALOG_MUNKA				10005
#define DIALOG_KOROZES				10006

#define DIALOG_BOLTROB				10007
#define DIALOG_DROGKESZIT			10008
#define DIALOG_BANKROB				10009
#define DIALOG_BANKROBP1			10010
#define DIALOG_BANKROBP2			10011

#define DIALOG_RUHABOLT				10012
#define DIALOG_VIZSGA_LISTA			10013
#define DIALOG_VIZSGA_KRESZ			10014

#define DIALOG_ADMIN_MENU			10015
#define DIALOG_KATONA_ENGEDELY		10016
#define DIALOG_KATONA_FELVESZ		10017

#define DIALOG_HOTDOG_MENU			10018
#define DIALOG_RENDSZAM				10019
#define DIALOG_RENDSZAM_ELFOGAD		10020
#define DIALOG_NEON					10021
#define DIALOG_FEGYVERBOLT			10022
#define DIALOG_SHOWTEXTDRAW			10023
#define DIALOG_TEXTDRAWBE			10024
#define DIALOG_TEXTDRAWKI			10025
#define DIALOG_HRENDELES			10026
#define DIALOG_FELSZERELES			10027
#define DIALOG_SWAT					10028
#define DIALOG_GPSEK 10029
#define DIALOG_TUNING 10030
#define DIALOG_TUNING_V2 10031

#define DIALOG_DIVATBOLT_SZEMUVEG 10032
#define DIALOG_DIVATBOLT_FEJKENDO 10033
#define DIALOG_DIVATBOLT_SVAJCISAPKA 10034
#define DIALOG_DIVATBOLT_BASEBALLSAPKA 10035
#define DIALOG_DIVATBOLT_KALAP 10036
#define DIALOG_DIVATBOLT_SAPKA 10037
#define DIALOG_DIVATBOLT_VALASZTAS 10039
#define DIALOG_DIVATBOLT_EDIT 10040
#define DIALOG_DIVATBOLT_EDIT_2 10041
#define DIALOG_DIVATBOLT_HOKIMASZK 10042

#define DIALOG_KERESKEDES_ELAD 10043
#define DIALOG_KERESKEDES_VESZ 10044
#define DIALOG_KERESKEDES_ACCEPT 10045
#define DIALOG_KERESKEDES_ACCEPT2 10046
#define DIALOG_OLTOZO 			10047

#define DIALOG_FBI_ENGEDELY		10048
#define DIALOG_FBI_FELVESZ		10049
#define DIALOG_RADIO_VHifi 		10050
#define DIALOG_ITALOK			10051
#define DIALOG_CAMERA			10052

#define DIALOG_HTANUL 			10053
#define DIALOG_HVALT 			10054

#define DIALOG_NPCVASARLAS 		10058
#define DIALOG_VASARLAS 		10059

#define DIALOG_FORGALMI 		10060
#define DIALOG_LAKCIMKARTYA     10061

#define DIALOG_AZONOSITAS 10064
#define DIALOG_PDA 10065
#define DIALOG_PDA2 10066
#define DIALOG_HITMAN 10067
#define DIALOG_BOMBA 10068
#define DIALOG_ADMINNEV 10069
#define DIALOG_NYUGTA 10070
#define DIALOG_REPORTOK 10071
//traffipax Matteo
#define DIALOG_MAIN CAMERA_DIALOG_RANGE
#define DIALOG_RANGE CAMERA_DIALOG_RANGE +1
#define DIALOG_LIMIT CAMERA_DIALOG_RANGE +2
#define DIALOG_FINE CAMERA_DIALOG_RANGE +3
#define DIALOG_EDIT CAMERA_DIALOG_RANGE +4
#define DIALOG_EANGLE CAMERA_DIALOG_RANGE +5
#define DIALOG_ELIMIT CAMERA_DIALOG_RANGE +6
#define DIALOG_ERANGE CAMERA_DIALOG_RANGE +7
#define DIALOG_EFINE CAMERA_DIALOG_RANGE +8
#define DIALOG_ETYPE CAMERA_DIALOG_RANGE +9
#define DIALOG_LABEL CAMERA_DIALOG_RANGE +10

//traffipax vége


//============[ Hexa Színek ]================|
#define COL_LILA 		"{A000FA}"
#define COL_PIROS 		"{F81414}"
#define COL_VPIROS		"{FF6347}"
//#define COL_VKEK 		"{00C0FF}"
#define COL_VZOLD 		"{6EF83C}"
#define COL_NARANCS 	"{FA9600}"
#define COL_DORANGE 	"{FF8C00}"
#define COL_CITROM 		"{FAE600}"
#define COL_PINK 		"{F814E6}"
#define COL_SKEK 		"{1466F8}"
#define COL_VPINK 		"{FF3E98}"
#define COL_NZOLD 		"{22F710}"
#define COL_FEKETE		"{000000}"
#define COL_GREEN		"{33AA33}"
#define COL_TKEK		"{40E0D0}"
#define COL_ROZSA		"{FF00FF}"
#define COL_YELL		"{FFFF00}"

#define COLOR_DARKYELLOW 0xFFFF00FF
#define COLOR_ROZSA	0xFF00FFFF
#define COLOR_VZOLD	0x6EF83CAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_TKEK 0x40E0D000
#define COLOR_INVISIBLE 0xFFFFFF00
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LGREEN 0x9ACD32AA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_LBLUE 0x33CCFFAA
#define COLOR_LGREEN 0x9ACD32AA
#define COLOR_NAR 0xFF4500FF
#define COLOR_RADIO 0x8D8DFF00
#define COLOR_TERULET_GREY 0xB2B2B2C8
#define TEAM_ORANGE_COLOR 0xFF830000
#define TEAM_BALLAS_COLOR 0xD900D3C8
#define TEAM_TURKEY_COLOR 0xFF6347C8
#define TEAM_YAKUZA_COLOR 0xD900D3C8
#define COLOR_LIGHTBROWN 0x8B4513FF
#define COLOR_PMKEK 0x33CCFFAA

/* -------------- FlyMode --------------*/
#define MOVE_SPEED              100.0
#define ACCEL_RATE              0.03

#define CAMERA_MODE_NONE    	0
#define CAMERA_MODE_FLY     	1

#define MOVE_FORWARD    		1
#define MOVE_BACK       		2
#define MOVE_LEFT       		3
#define MOVE_RIGHT      		4
#define MOVE_FORWARD_LEFT       5
#define MOVE_FORWARD_RIGHT      6
#define MOVE_BACK_LEFT          7
#define MOVE_BACK_RIGHT         8

/*--------------- */
#define VEHICLE_DMG_DEFAULT			25.0
#define VEHICLE_DMG_COLT45			50.0
#define VEHICLE_DMG_SILENCED		50.0
#define VEHICLE_DMG_DEAGLE			75.0
#define VEHICLE_DMG_SHOTGUN			75.0
#define VEHICLE_DMG_SAWEDOFF		78.0
#define VEHICLE_DMG_SHOTGSPA		80.0
#define VEHICLE_DMG_UZI				35.0
#define VEHICLE_DMG_MP5				60.0
#define VEHICLE_DMG_AK47			80.0
#define VEHICLE_DMG_M4				80.0
#define VEHICLE_DMG_TEC9			40.0
#define VEHICLE_DMG_RIFLE			75.0
#define VEHICLE_DMG_ROCKETLAUNCHER	150.0
#define VEHICLE_DMG_HEATSEEKER		150.0
#define VEHICLE_DMG_MINIGUN			200.0

#define DecreaseVehHP(%1) if(vhp > %1) SetVehicleHealth(vehicleid, (vhp - %1))
/* -------------- Pénz --------------*/
#define PenzEgyenleg(%1) PlayerInfo[%1][ppenz]
#define ErtekAllitas(%1,%2,%3) PlayerInfo[%1][%2] = %3

/* -------------- GPCI, Const, stb --------------*/

native gpci(playerid, const serial[ ], maxlen);
const Float:INF_FLOAT = Float:0x7F800000;

new Iterator:Jarmuvek<MAX_VEHICLES>;
new Iterator:Adminok<MAX_PLAYERS>;
new Iterator:ASek<MAX_PLAYERS>;

forward Float:GetDistanceToPointEx(playerid,Float:x1,Float:y1,Float:z1);

//traffipax
enum _camera
{_id,Float:_x,Float:_y,Float:_z,Float:_rot,_range,_limit,_fine,_usemph,_objectid,bool:_active,bool:_activelabel,_labeltxt[128],Text3D:_label,_eddiggyujtott,_hovamenjen}

enum fEnum
{
	fNev[24],
	fMati,
	fSkill,
	fTolteny
};

enum
{
	JARMU_MHT_NYITVA		=	1,
	JARMU_MHT_SERULT		=	2,
	JARMU_MHT_LEVALT		=	4,

	JARMU_CST_NYITVA		=	256,
	JARMU_CST_SERULT		=	512,
	JARMU_CST_LEVALT		=	1024,

	JARMU_VA_NYITVA			=	65536,
	JARMU_VA_SERULT			=	131072,
	JARMU_VA_LEVALT			=	262144,

	JARMU_UA_NYITVA			=	16777216,
	JARMU_UA_SERULT			=	33554432,
	JARMU_UA_LEVALT			=	67108864
};

enum
{
    evdLights_Drivers       =   1,
    evdLights_Passengers    =   4,
    evdLights_Rear          =   64
};

enum kuka
{
	kID,
	bool:kHasznalva,
	kFazis,
	kPlayerid,
	kCP[MAX_PLAYERS]
};

enum far
{
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	fAllapot,
	bool:fKivagva
};

enum diInfo
{
	dVan,
	Float:dPosX,
	Float:dPosY,
	Float:dPosZ,
	Float:dRotX,
	Float:dRotY,
	Float:dRotZ,
	Float:dScaleX,
	Float:dScaleY,
	Float:dScaleZ,
	dmodelid
};
new DivatInfo[4][MAX_PLAYERS][diInfo];
new MitModosit[MAX_PLAYERS];
new DivatBolt_SZEMUVEG[19][5][64] = {
	{"Piros szemüveg", "Szemüveg piros lencsével", 5000, 19006, SLOT_SZEMUVEG},
	{"Narancssárga szemüveg", "Szemüveg narancs lencsével", 5000, 19007, SLOT_SZEMUVEG},
	{"Zöld szemüveg", "Szemüveg zöld lencsével", 5000, 19008, SLOT_SZEMUVEG},
	{"Kék szemüveg", "Szemüveg kék lencsével", 5000, 19009, SLOT_SZEMUVEG},
	{"RózsaSzin szemüveg", "Szemüveg rózsaSzin lencsével", 5000, 19010, SLOT_SZEMUVEG},
	{"Fekete szemüveg", "Szemüveg fekete lencsével", 5000, 19012, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Fekete retró szemüveg", 10000, 19022, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Kék retró szemüveg", 10000, 19023, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Lila retró szemüveg", 10000, 19024, SLOT_SZEMUVEG},
	{"Retró szemüveg", "RózsaSzin retró szemüveg", 10000, 19025, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Sötét rózsaSzin retró szemüveg", 10000, 19026, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Narancssárga retró szemüveg", 10000, 19027, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Citromsárga retró szemüveg", 10000, 19028, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Zöld retró szemüveg", 10000, 19029, SLOT_SZEMUVEG},
	{"Napszemüveg", "Szûrkes napszemüveg", 4000, 19030, SLOT_SZEMUVEG},
	{"Napszemüveg szemüveg", "Sárga napszemüveg", 10000, 19031, SLOT_SZEMUVEG},
	{"Napszemüveg szemüveg", "Teljesen fekete napszemüveg", 10000, 19033, SLOT_SZEMUVEG},
	{"Rendõr szemüveg", "Piros rendõrszemüveg", 20000, 19139, SLOT_SZEMUVEG},
	{"Rendõr szemüveg", "Kék rendõrszemüveg", 20000, 19140, SLOT_SZEMUVEG}
};
new DivatBolt_HOKIMASZK[13][5][64] = {
	{"Fehér HokiMaszk", "Fehér Színû hokimaszk", 25, 19036, SLOT_MASZK},
	{"Piros HokiMaszk", "Piros Színû hokimaszk", 25, 19037, SLOT_MASZK},
	{"Zöld HokiMaszk", "Zöld Színû hokimaszk", 25, 19038, SLOT_MASZK},
	{"Hálál Fejes Maszk", "Halál Fejes mintás maszk", 25, 18911, SLOT_MASZK},
	{"Fekete Mintás Maszk", "Fekete színû maszk", 25, 18912, SLOT_MASZK},
	{"Zöld Mintás Maszk", "Zöld Mintás Maszk", 25, 18913, SLOT_MASZK},
	{"Katonás Maszk", "Katona maszk", 25, 18914, SLOT_MASZK},
	{"Rózsaszín Maszk", "Rózsaszín Maszk", 25, 18915, SLOT_MASZK},
	{"Sárga Maszk", "Sárga Színû maszk", 25, 18916, SLOT_MASZK},
	{"Kék színû Maszk", "Kék színû", 25, 18917, SLOT_MASZK},
	{"Fekete Fehér Mintás Maszk", "Fekte Fehér Mintás Mintás", 25, 18918, SLOT_MASZK},
	{"Sárga Pöttyös Maszk", "Sárga Pöttyös Maszk", 25, 18919, SLOT_MASZK},
	{"Virágos Maszk", "Virágos Maszk", 25, 18920, SLOT_MASZK}
};

new DivatBolt_FEJKENDO[10][5][64] = {
	{"Fejkendõ", "Sötétkék mintás fejkendõ", 5000, 18891, SLOT_SAPKA},
	{"Fejkendõ", "Piros mintás fejkendõ", 5000, 18892, SLOT_SAPKA},
	{"Fejkendõ", "Piros fehér mintás fejkendõ", 5000, 18893, SLOT_SAPKA},
	{"Fejkendõ", "Cannabis-os fejkendõ", 5000, 18894, SLOT_SAPKA},
	{"Fejkendõ", "Halálfejes fejkendõ", 5000, 18895, SLOT_SAPKA},
	{"Fejkendõ", "Fekete fehér mintás fejkendõ", 5000, 18896, SLOT_SAPKA},
	{"Fejkendõ", "Fehér kék mintás fejkendõ", 5000, 18897, SLOT_SAPKA},
	{"Fejkendõ", "Zöld fehér mintás fejkendõ", 5000, 18898, SLOT_SAPKA},
	{"Fejkendõ", "Lila fehér mintás fejkendõ", 5000, 18899, SLOT_SAPKA},
	{"Fejkendõ", "Piros fehér mintás fejkendõ", 5000, 18893, SLOT_SAPKA}
};
new DivatBolt_SVAJCISAPKA[5][5][64] = {
	{"Svájci sapka", "Fekete svájci sapka", 5000, 18921, SLOT_SAPKA},
	{"Svájci sapka", "Piros svájci sapka", 5000, 18922, SLOT_SAPKA},
	{"Svájci sapka", "Kék svájci sapka", 5000, 18923, SLOT_SAPKA},
	{"Svájci sapka", "Terep svájci sapka", 5000, 18924, SLOT_SAPKA},
	{"Svájci sapka", "Piros fekete svájci sapka", 5000, 18925, SLOT_SAPKA}
};
new DivatBolt_BASEBALLSAPKA[12][5][64] = {
	{"Baseball sapka", "TerepSzinû baseball sapka", 5000, 18926, SLOT_SAPKA},
	{"Baseball sapka", "Sötét-világoskékSzinû baseball sapka", 5000, 18927, SLOT_SAPKA},
	{"Baseball sapka", "SokSzinû  baseball sapka", 5000, 18928, SLOT_SAPKA},
	{"Baseball sapka", "Szûrke fehér Szinû baseball sapka", 5000, 18929, SLOT_SAPKA},
	{"Baseball sapka", "Narancssárga-sárga Szinû baseball sapka", 5000, 18932, SLOT_SAPKA},
	{"Baseball sapka", "Fehér fekete Szinû mintás baseball sapka", 5000, 18933, SLOT_SAPKA},
	{"Baseball sapka", "Világospiros Szinû baseball sapka", 5000, 18934, SLOT_SAPKA},
	{"Baseball sapka", "Fekete szûrke baseball sapka", 5000, 18941, SLOT_SAPKA},
	{"Baseball sapka", "Szûrke baseball sapka", 5000, 18942, SLOT_SAPKA},
	{"Baseball sapka", "Zöld baseball sapka", 5000, 18943, SLOT_SAPKA},
	{"Baseball sapka", "Sárga fekete mintás baseball sapka", 5000, 18958, SLOT_SAPKA},
	{"Baseball sapka", "Kamionos baseball sapka", 5000, 18961, SLOT_SAPKA}
};
new DivatBolt_KALAP[15][5][64] = {
	{"Kalap", "Szûrke fehér mintás kalap", 5000, 18945, SLOT_SAPKA},
	{"Kalap", "Szûrke divatos kalap", 5000, 18946, SLOT_SAPKA},
	{"Kalap", "Fekete elegáns mintás kalap", 5000, 18947, SLOT_SAPKA},
	{"Kalap", "Kék elengáns kalap mintás kalap", 5000, 18948, SLOT_SAPKA},
	{"Kalap", "Zöld elegáns kalap", 5000, 18949, SLOT_SAPKA},
	{"Kalap", "Piros elegáns kalap", 5000, 18950, SLOT_SAPKA},
	{"Kalap", "Sárga elegáns kalap", 5000, 18951, SLOT_SAPKA},
	{"Kalap", "Fekete vestern kalap", 5000, 18962, SLOT_SAPKA},
	{"Kalap", "Parduc kalap", 5000, 18970, SLOT_SAPKA},
	{"Kalap", "Fekete fehér mintás kalap", 5000, 18971, SLOT_SAPKA},
	{"Kalap", "Barna covboy kalap", 5000, 19095, SLOT_SAPKA},
	{"Kalap", "Fekete covboy kalap", 5000, 19096, SLOT_SAPKA},
	{"Kalap", "Fekete rendõr kalap", 5000, 19099, SLOT_SAPKA},
	{"Kalap", "Barna rendõr kalap", 5000, 19100, SLOT_SAPKA},
	{"Kalap", "Fehér elegáns kalap", 5000, 19488, SLOT_SAPKA}
};
new DivatBolt_SAPKA[5][5][64] = {
	{"Sapka", "Fekete télisapka", 3000, 18953, SLOT_SAPKA},
	{"Sapka", "Szûrke télisapka", 3000, 18954, SLOT_SAPKA},
	{"Sapka", "Fekete Szinû(repper) télisapka", 3000, 18964, SLOT_SAPKA},
	{"Sapka", "Piros fekete divatos sapka", 5000, 19067, SLOT_SAPKA},
	{"sapka", "Fekete szûrke divatos sapka", 5000, 19069, SLOT_SAPKA}
};
#define KIEGESZITO_SAPKA 0
#define KIEGESZITO_SZEMUVEG 1

#define MAX_TAG 100
#define TAG_FELFESTESIDO 5
enum taInfo
{
	tID,
	tVan,
	tFestveVan,
 	Float:tPoz[3],
 	Float:tRot[3],
 	tKesz,
 	tTulaj,
 	tObject,
	tGraffitiObject,
	Text3D:tText
}
new TagInfo[MAX_TAG][taInfo];
new GraffitiObjectLerakas[MAX_PLAYERS];

enum e_s0beitCheck
{
	bool:checking,
 	stage,
	counter,
	bool:spawned,
	check_started,
	Timer:asTimer,
	vehicleId
};

new s0beitCheck[MAX_PLAYERS][e_s0beitCheck];

enum e_sTD
{
	Text:td_iPhone[26],
	Text:td_iPhone_Clock[2],
	Text:td_iPhone_Gallery,
	Text:td_iPhone_Time[3],
	Text:td_iPhone_Radio[2],
	Text:td_iPhone_Music[2],
	Text:td_iPhone_Map,
	Text:td_iPhone_GPS,
	Text:td_iPhone_Internet[2],
	Text:td_iPhone_SMS[2],
	Text:td_iPhone_Calculator[16],
	Text:td_iPhone_Call[13],
	Text:td_iPhone_CallYesNo[2],
	
	Text:td_CameraFlash,
	Text:td_Zero
}
new g_TextDraw[e_sTD]; //Globális textdrawok

#define PPHONE_SIZE 37
enum e_pTD
{
	PlayerText:ptd_iPhone_Gallery,
	PlayerText:ptd_iPhone[PPHONE_SIZE],
	PlayerText:ptd_iPhone_GPS,
	PlayerText:ptd_iPhone_Calculator,
	PlayerText:ptd_iPhone_Call,
	
	PlayerText:ptd_Info[8],
	PlayerText:ptd_JarmuInfo[7],
	PlayerText:ptd_SzamJegy[5],
	PlayerText:ptd_Hatter[3],
	PlayerText:ptd_Elerte[5],
	PlayerText:ptd_Adatok,
	PlayerText:ptd_Penz,
	PlayerText:ptd_AlsoFelso[2],
	PlayerText:ptd_Kellek[2],
	PlayerText:ptd_Gombok[10],
	PlayerText:ptd_Jelzes[2],
	PlayerText:ptd_KapuNev,
	PlayerText:ptd_Report,
	bool:ptd_Report_s
}
new g_PlayerTextDraw[MAX_PLAYERS][e_pTD]; //Globális textdrawok

#define MAX_REPORT 1000
#define MAX_CHANNEL 4
#define MAX_REPORT_STR 72
enum e_Report
{
	bool:rVan,
	rKuldo,
	rChannel,
	rStr[MAX_REPORT_STR],
	rIdo
}
new g_Reportok[MAX_REPORT][e_Report],
Iterator:Reportok<MAX_REPORT>;

new Text3D:v_chatBubble[MAX_PLAYERS][MAX_PLAYERS],
	Timer:v_chatBubbleTimer[MAX_PLAYERS][MAX_PLAYERS];
	
new var1[MAX_PLAYERS][11];
new var2[MAX_PLAYERS][11];
new called[MAX_PLAYERS][11];
new callto[MAX_PLAYERS];

new firstperson[MAX_PLAYERS];
new iPhone_CC[4][MAX_PLAYERS];
new iPhoneStatus[MAX_PLAYERS];
new iPhoneCallStatus[MAX_PLAYERS];
new bool:iPhoneHivo[MAX_PLAYERS];
new MenuX[MAX_PLAYERS];
new MenuY[MAX_PLAYERS];

new bool:TrafiElol[MAX_PLAYERS],
	TrafiMinSebesseg[MAX_PLAYERS],
	TrafiSebTolerancia[MAX_PLAYERS],
	TrafiCsekkolva[MAX_PLAYERS][MAX_PLAYERS],
	bool:TrafiTimerFut[MAX_PLAYERS];
enum butorInfo
{
	Float:butorPosX,
	Float:butorPosY,
	Float:butorPosZ,
	Float:butorPosRX,
	Float:butorPosRY,
	Float:butorPosRZ,
	butorModel,
	butorVW,
	butorInterior,
	bool:butorHasznalva,
	bool:butorMegveve,
	butorObject,
	butorTipus,
	butorListitem
}

enum Faadatok
{
	Float:faposx,
	Float:faposy,
	Float:faposz,
	faplayerid,
	Text3D:falabel,
	bool:fahasznalva
};

enum terInfo
{
	bool:tVan,
	tNev[40],
	tZone,
	tArea,
	Float:tMinPos[2],
	Float:tMaxPos[2],
	tFrakcio,
	tHaszon[5],
	tHaszonIdo,
	bool:tHarcFolyik,
	tTipus,
	tHarcolok[2],
	tVarakozasIdo,
	tFoglalasIdo
};

enum e_Hulla
{
	bool:Hvan,
	Hido,
	Hobject,
	Float:Hpos[3],
	Text3D:Htext3d,
	Hoka,
	Hkie[MAX_PLAYER_NAME],
	Hkieid,
	Hmegolte[MAX_PLAYER_NAME],
	Hmegolteid,
	Timer:Htimer,
	Hperc,
	Hallapot,
	Hvw,
	HHeroin,
	HKokain,
	HMati,
	HMariska,
	HPenz
};
new HullaInfo[MAX_HULLA][e_Hulla];

enum dropObject
{
	dTipus,
	dFegyver,
	dErtek,
	Float:dPos[3],
	dInt,
	dVirtual,
	dObject,
	Text3D:dText,
	bool:dHasznalva,
	dTorlesiAzonosito
};

enum statEnum
{
	pID[64],
	pDatum[12],
	pRIdo,
	pIdo,
	pOnduty,
	pVA,
	pPM
}
new StatInfo[MAX_PLAYERS][statEnum];
new JelenlegiDatum[12], DatumEv, DatumHonap, DatumNap, UnixTime;

#define STAT_MENTES_IDO 30

#define MAX_ROADBLOCKS 85
enum rInfo
{
    sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject
};
new Roadblocks[MAX_ROADBLOCKS][rInfo];

#define MAXHIFI 100
enum hifiInfo
{
	hID,
	hVan,
	Float:hX,
	Float:hY,
	Float:hZ,
	Float:hRx,
	Float:hRy,
	Float:hRz,
	hLerako[256],
	hObject,
	hURL[256]
}
new HifiInfo[MAXHIFI][hifiInfo];

#define MAXDRINK 100
enum drinkInfo
{
	dID,
	dVan,
	Float:dX,
	Float:dY,
	Float:dZ,
	Text3D:dText[32]
}
new DrinkInfo[MAXDRINK][drinkInfo];

#define JELZES_TOROLHETO 0
#define JELZES_SEGELYHIVO 1
#define JELZES_TAXI 2
#define JELZES_KOROZES 3
//= Tiltások =
#define TILTAS_FRAKCIO 0
#define TILTAS_FEGYVER 1
#define TILTAS_REPORT 2
#define TILTAS_AUTO 3
#define TILTAS_AS 4
#define TILTAS_TAXI 5

#define TILTAS_MAX 6

#define MG_PARANCS 0
#define MG_DIALOG 1


enum playerInfo
{
	pID,
	pNev[256],
	pUjjlenyomat[MAX_PLAYER_NAME],
	pAlnev[MAX_PLAYER_NAME + 1],
	pFilterID,
	bool:pAlnevbe,
	padmin,
	pAS,
	pMapper,
	pMunka1,
	pMunka2,
	pD_MunkaValt[2],
	pDefense[64],
	pDefensed[2],
	ppenz,
	pBsz,
	pBszPenz,
	pBszPin,
	Float:posx,
	Float:posy,
	Float:posz,
	Float:pangle,
	bool:pbelepve,
	bool:pnemitva,
	probalkozasok,
	pjatekosszint,
	pskin,
	pDutySkin,
	pvirtualworld,
	pjail,//melyik börtön
	pJailIdo,//börtön idõ másodpercben
	pJailOk[64],//Börtönbe zárás oka
	pJailAdta[MAX_PLAYER_NAME],//Aki bezárta a börtönbe
	pinterior,
	pwarnok,
	bool:pmindenthall,
	bool:psmindenthall,
	bool:pallreport,
	pregisztracio,
	bool:pobjectbetoltes,
	bool:pbemehet,
	pFrakcio,
	pLeader,
	prang,
	peladojarmu,
	peladokitol,
	bool:pmotortinditja,
	bool:pTelefonVonalban,
	bool:pHivo,
	bool:ptelefonal,
	ptelefonaloid,
	pszintlepesmperc,
	pszintlepesperc,
	pszintlepesora,
	pszintlepeskell,
	bool:pmegbotlott,
	pnem,
	peletkor,
	pszarmazas,
	bool:pVizsgal,
	bool:phazatnez,
	bool:pValtozott,
	phaz,
	pMelyikKapu,
	pKamions,
	pKamionc,
	pKCheckpointS,
	pKCheckpointC,
	pFizetesIdo,
	pFizetes,
	bool:pJarmuTDMutat,
	pJarmuben,
	pIP[16],
	pUCheckpoint,
	Float:pTavolsag,
	pFegyverek[13],
	pToltenyek[13],
	pPBFegyverek[13],//Amíg Paintball-ban van, itt tárolódik a kezében lévõ összes fegyver
	pPBToltenyek[13],//itt pedig az összes töltény
	pFegyver,
	pFegyverMuvelet,
	bool:pDesync,
	bool:pDesyncTrue,
	bool:pOOC,
	bool:pKapuKezeles,
	Float:pElet,
	Float:pUjElet,
	Float:pPancel,
	Float:pUjPancel,
	bool:pVehiclePosUpdated,
	pCarEnterTime,
	pCarFlood,
	pCarFloodTime,
	pCarTeleportFlood,
	pCarTeleportTime,
	pCarEntering,
	bool:pSokkolva,
	pBilincselve,
	pBilincsIdo,
	pSokkolt,
	pSzefFegyver,
	bool:pTeruletSzerkeszt,
	pTerulet,
	bool:pFavagoMunkazik,
	bool:pAduty,
	bool:pASduty, //as dutyhoz Jim
	pDuty[2],
	Text3D:pDutyText,
	Text3D:pASDutyText,
	Text3D:pRabText,
	pMegerosites,
	pMegerositesExtra[2],
	pHazKulcs[MAX_HAZ_JARMU],
	pJarmuKulcs[MAX_HAZ_JARMU],
	pCegKulcs,
	pSzButor,
	pPremiumPont,
	pPremiumIdo,
	pPremiumCsomag,
	pButorKategoria,
	pMotorFlood,
	pFrakcioKezeles,
	pCamera,
	pCameraE,
	bool:pSpeedBoots,
	pAJ_Randtime,
	pAJ_RandStr[RANDOM_STRING_AJ + 1],
	pReport[4],
	pTV[3],
	bool:pNevek,
	pCheatFigy,
	bool:pTuzMutat,
	bool:pTuzetOlt,
	bool:pTimerFut,
	pSpawnVedelem,
	pExp[4], //0 - hányszor (legális), 1 - tapasztalati pont(legális), 2 - hányszor (illegális), 3 - tapasztalati pont(illegális)
	pDrogMag[3],
	pDrogMit[2],
	pMatiCP,
	pVas,
	pMaterial,
	pKokain,
	pHeroin,
	pMarihuana,
	pVasCP,
	bool:pFoglalt,
	pFegyverSkill,
	pJatszottOra,
	bool:pSzunetel,
	pSegelyhivas,
	pSegelyhivasOk[128],
	pSegelyhivasInfo[128],
	pSegelyhivasOt[MAX_PLAYER_NAME],
	pBereltJarmu,
	pTelefonPenz,
	pFarmernel,
	pUsingLoopingAnim,
	pAnimLibsPreloaded,
	bool:pRadarJelzes[MAX_PLAYERS],
	pRadarJelzesCol[MAX_PLAYERS],
	pRadarJelzesTipus[MAX_PLAYERS],
	pKiertMegy,
	bool:pTog[16],//0 = rádiók, 1 = válaszok, 2 = globál ooc, 3 = admin infó, 4 = beszédanim, 5 = telefon kikapcsolva 6 = admin report, 7 = PM Block, 9 = riporter, 11 = hírdetés, 12 = togtörés, 13 = alefoglal 14 = ajtó, 15 = admin jelzések
	bool:pMP3_Megy,
	bool:pJarmuZene,
	pCP,
	pKukaIndex,
	pVisz,
	pFureszelt,
	pVizsga[3],
	pSK,//sebességkorlát
	bool:pBanFlood,
	bool:pTiltvaVan,
	pDrogAnyag[3],
	pBHackJegyek[5 + 1],
	pBHackMelyik,
	pBMennyi,
	pKresz[2],
	pEngedely[MAX_ENGEDELY],
	pBuntetoPontok,
	pHatizsak,
	pHatizsakO,
	pJarmubenUlt,
	bool:pAEnged[3],//0 = Goto, 1 = névváltás, 2 = telefonszám
	pFigyelmeztetes,
	pTryTime,
	bool:pOv,
	pMunkaFlood,
	bool:pNewSpawn,
	pBirsag[3],	//Matteo
	pLenyomoz,
	pJarmuKolcson,
	pScriptShoot[3],
	pFakeKill[2],
	pLastDeath,
	pPaintBall[2], //0 = paintballozik, 1 = ölései száma
	pMaszk,
	bool:pMaszkVisel,
	pDialogID,
	Float:pVizelet,
	Float:pEhseg,
	bool:pPisil,
	pProcess[5], //Process ID - extra - extra - extra - extra | hogy ne kelljen mindig új változó minden szarhoz - Martin
	pSzuksegletFigy,
	pAfkIdo,
	Text3D:pFelirat,
	bool:pBejelento,
	pBID,
	pFeliratIdo,
	Text3D:pAFK_text,
	pJoint[4],
	pCuccok[MAX_BL_CUCC],
	pSzemelyi,
	pDrogMuvelet[5],
	bool:pHarcol,
	pValaszok,
	pOOC_Figy,
	bool:pSisak,
	bool:pMegkotve,
	bool:pTeruletKezeles,
	pHitman,
	pHitmanDuty,
	pHitmanNev[MAX_PLAYER_NAME],
	pAdminNev[MAX_PLAYER_NAME],
	bool:pjetpack,
	pSWAT,
	pSWATRang,
	pUzemmod,
	pSokk,
	pSWATDuty,
	Float:pWPX,
	Float:pWPY,
	Float:pWPZ,
	Float:pMarkx,
	Float:pMarky,
	Float:pMarkz,
	pMarkjelolve,
	pWPjelolve,
	pSM,
	pSMrang,
	pSMkocsi,
	pKannaBenzin,
	pSKV,
	pSKVrang,
	pTaxithivott,
	
	Float:pTaxioraCounterPos[3],
	pTaxioraWait,
	Float:pTaxioraCounter,
	pTaxioraMenetdij,
	bool:pTaxioraMegy,
	
	pTaxiban,
	pTaxisid,
	pNoname,
	pAnimban[8],
	pNemolheto,
	Float:pHx,
	Float:pHy,
	Float:pHz,
	pHazasodvaVele[MAX_PLAYER_NAME+1],
	pGodmode,
	pKereskedo,
	pHal,
	pClub,
	pTiltasok[TILTAS_MAX],
	pBox,
	pGrabkick,
	pKungfu,
	pKneehead,
	pElbow,
	pMaszkID,
	pHarcstilusTanul,
	pFegyvertVasarolt[9],
	pNPCSzobaAll[9],
	pAccent[32],
	pLottounix,
	pLakcimkartya,
	pStreameltplayer,
	pStreameltvehicle,
	bool:ptraffipax,
	pMasoknakstreamelt,

	pECMD,
	pFlood,
	bool:ArmorObjFenn,
	pZarolva,
	pLehallgat,
	pTelotHallgat,
	pVerdij,
	pVerdijOk[32],
	pMergezoMod,
	pMergezoLovedekek,
	Float:pRendelesPoz[3],
	pRendelese,
	pChannel,
	pLeutve,
	pRadio,
	pGazmaszk,
	bool:pGazmaszkFenn,
	pTartozas,
	pRabolhat,
	pTolvajSkill,
	pTolvajKulcs,
	pLophat,
	pDNS[64],
	pCharLeiras[255],
	/*Timer:pTargoncaTimer,
	bool:pTargoncaTimerStart*/
};

#define VOBJ_EDIT_TAXI 1
#define VOBJ_EDIT_RENDORVILLOGO 2
enum vehicleInfo
{
	vTulajID,
	Float:vPosx,
	Float:vPosy,
	Float:vPosz,
	Float:vAngle,
	vInt,
	vVW,
	vAr,
	vModel,
	vTulaj[MAX_PLAYER_NAME],
	vMunka,
	vID,
	vSzin1,
	vSzin2,
	bool:vHasznalva,
	Float:vElet,
	vHiba,
	bool:vZarva,
	vRang,
	bool:vMotorelinditva,
	Float:vKilometer,
	Float:vUzemanyag,
	vPanels,
	vDoors,
	vLights,
	vTires,
	JobbIndex1,
	JobbIndex2,
	JobbTrailer1,
	JobbTrailer2,
	BalIndex1,
	BalIndex2,
	BalTrailer1,
	BalTrailer2,
	BalIndex,
	JobbIndex,
	Kozos,
	vKObject,
	vLastActive,
	vTLastActive,//Tulaj
	bool:vBerelt,
	vRadio,
	vVas,
	vMaterial,
	vHeroin,
	vKokain,
	vMarihuana,
	vFegyver[5],
	vTolteny[5],
	vHulla,
	Text3D:vOktato,
	bool:vAblakLetekerve,
	bool:vInsert, //Lehívott vagy megvehetõ kocsi.
	vRendszam[32],
	vNeon[5],
	vMod[14],
	vTaxi,
	vVillogo,
	vHidraulika,
	vMatrica,
	vGarazsban,
	vApben,
	vNOS,
	vNOSCounter
};

//Terheléselosztás -> Jármû rendszer - Martin
enum vehUpdate
{
	bool:vuPos,
	bool:vuAr,
	bool:vuModel,
	bool:vuTulaj,
	bool:vuMunka,
	bool:vuSzin,
	bool:vuElet,
	bool:vuHiba,
	bool:vuZarva,
	bool:vuRang,
	bool:vuVas,
	bool:vuMaterial,
	bool:vuHeroin,
	bool:vuKokain,
	bool:vuMarihuana,
	bool:vuFegyver,
	bool:vuRendszam,
	bool:vuNeon,
	bool:vuMod,
	bool:vuHidraulika,
	bool:vuPanels,
	bool:vuDoors,
	bool:vuTires,
	bool:vuLights,
	bool:vuMatrica,
	bool:vuGarazsban,
	bool:vuApben
};

//Jármû adatok => UserCP
enum jarmuAdat
{
	jNev[32],
	jUjNev[32],
	jAr,
	jLophato
};

new JarmuAdat[MAX_JARMU][jarmuAdat];

/*enum statInfo
{
	pValaszIdo[MAX_PLAYERS],
	bool:pValaszolva[MAX_PLAYERS],**
	bool:pIrte[MAX_PLAYERS],
	pPM
};*/

enum benzinkutInfo
{
	bnev[32 + 1],
	Float:bposx,
	Float:bposy,
	Float:bposz,
	bbenzinar,
	bdieselar,
	Float:bbenzinmennyiseg,
	Float:bdieselmennyiseg,
	bool:bhasznalva,
	Float:bradius,
	blistitem
};

enum serverInfo
{
	bool:sOOC,
	bool:sCsend,
	bool:sBetoltve,
	sHarcVan,
	sUpdater,
	sCounter,
	bool:sWhiteList,
	bool:sRestart,
	sIdojaras,
	sIdojarasKov,
	sIdojarasIdo,
	bool:sTuzVan,
	sTuzIdo[3],
	sTuzPenz,
	sCarResi[2],
	bool:sHirdetes,
	sRL_Time[4],
	bool:sNapszakForce,
	sFHaszon,
	sDrog[3],
	sDrogSz,
	sBoltBot,
	sBankBot,
	bool:sDMOff,
	bool:sAka,
	sPort,
	bool:sKellPB,
	sPaintBall[6],
	sZene[128],
	sBankPenz[2],
	sBankrob,
	sNPCrespawn,
	bool:sReg,
	#if UCPKONZOL == true
		ws_server:sUCPServer,
	#endif
	
};

enum e_zGep
{
	bool:zDolgozik,
	zKovekOssz,
	zBezuzva,
	zKovek[9],
	zKovekFolyamatban,
	zPlayer,
	zLezaro,
	Timer:zTimer
}
new ZuzoGepStat[e_zGep];
#define MAX_BANYAKO_HP (100.0)
#define BANYA_OBJECTEK 49
new Float:g_BanyaObjPos[BANYA_OBJECTEK][6] =
{
	{-368.85513, 2171.16309, -14.65610, 0.00000, 0.00000, 0.00000},
	{-369.53113, 2171.09863, -14.65610, 0.00000, 0.00000, 0.00000},
	{-369.36456, 2171.67432, -14.65610, 0.00000, 0.00000, 0.00000},
	{-370.38846, 2170.98120, -14.65610, 0.00000, 0.00000, 0.00000},
	{-370.98767, 2171.06177, -14.65610, 0.00000, 0.00000, 0.00000},
	{-368.02783, 2171.06909, -14.65610, 0.00000, 0.00000, 0.00000},
	{-368.53970, 2171.87695, -14.65610, 0.00000, 0.00000, 0.00000},
	{-370.09824, 2171.63623, -14.65610, 0.00000, 0.00000, 0.00000},
	{-370.74606, 2171.57300, -14.65610, 0.00000, 0.00000, 0.00000},
	{-370.58597, 2172.27612, -14.65610, 0.00000, 0.00000, 0.00000},
	{-369.26685, 2172.66748, -14.65610, 0.00000, 0.00000, -24.18000},
	{-369.86612, 2172.32056, -14.65610, 0.00000, 0.00000, -110.46001},
	{-369.09424, 2172.18237, -14.65610, 0.00000, 0.00000, -78.42001},
	{-369.30408, 2171.16089, -14.34810, 0.00000, 0.00000, -78.42000},
	{-368.63382, 2171.03101, -14.34810, 0.00000, 0.00000, -152.46001},
	{-368.63605, 2171.53125, -14.34810, 0.00000, 0.00000, -152.46001},
	{-369.27591, 2171.83936, -14.34810, 0.00000, 0.00000, -152.46001},
	{-370.72098, 2171.87988, -14.34810, 0.00000, 0.00000, -152.46001},
	{-369.97409, 2171.43750, -14.34810, 0.00000, 0.00000, -152.46001},
	{-370.25067, 2172.28687, -14.34810, 0.00000, 0.00000, -152.46001},
	{-369.86270, 2172.98486, -15.18810, 0.00000, 0.00000, -152.46001},
	{-370.27515, 2172.70801, -15.18810, 0.00000, 0.00000, -156.18001},
	{-367.97446, 2171.86719, -14.65610, 0.00000, 0.00000, 0.00000},
	{-368.72241, 2172.59644, -14.65610, 0.00000, 0.00000, -25.26000},
	{-367.28217, 2171.02222, -14.65610, 0.00000, 0.00000, 0.00000},
	{-367.28217, 2171.02222, -14.65610, 0.00000, 0.00000, 0.00000},
	{-367.35583, 2171.77417, -14.65610, 0.00000, 0.00000, -0.06000},
	{-368.23749, 2172.42920, -14.65610, 0.00000, 0.00000, -28.80000},
	{-367.47659, 2172.40234, -14.90810, 0.00000, 0.00000, -0.06000},
	{-367.04987, 2171.60669, -14.90810, 0.00000, 0.00000, -0.06000},
	{-367.21844, 2172.28516, -14.90810, 0.00000, 0.00000, 75.23999},
	{-366.84457, 2170.88306, -14.90810, 0.00000, 0.00000, 75.23999},
	{-368.06705, 2172.01050, -14.90810, 0.00000, 0.00000, 74.75999},
	{-367.84610, 2171.76074, -14.34810, 0.00000, 0.00000, -152.46001},
	{-367.97543, 2172.31055, -14.34810, 0.00000, 0.00000, -152.46001},
	{-368.68658, 2172.06738, -14.34810, 0.00000, 0.00000, -152.46001},
	{-369.05301, 2171.70435, -14.34810, 0.00000, 0.00000, -231.30003},
	{-369.54443, 2172.15356, -14.34810, 0.00000, 0.00000, -231.30003},
	{-369.04333, 2172.47290, -14.34810, 0.00000, 0.00000, -231.30003},
	{-367.58038, 2171.13818, -14.34810, 0.00000, 0.00000, -231.30003},
	{-369.53619, 2173.14893, -15.18810, 0.00000, 0.00000, -152.46001},
	{-369.29935, 2173.22070, -15.18810, 0.00000, 0.00000, -152.16002},
	{-368.67542, 2173.15063, -15.18810, 0.00000, 0.00000, -236.16010},
	{-368.30884, 2173.04321, -15.18810, 0.00000, 0.00000, -177.48001},
	{-369.53619, 2173.14893, -15.18810, 0.00000, 0.00000, -152.46001},
	{-354.12500, 2179.38354, -14.34810, 0.00000, 0.00000, -152.04002},
	{-354.23651, 2178.84155, -14.34810, 0.00000, 0.00000, -152.04002},
	{-354.18753, 2178.56982, -14.62810, 0.00000, 0.00000, -196.74008},
	{-354.18649, 2178.18896, -14.62810, 0.00000, 0.00000, -196.92007}/*,
	{-354.24530, 2177.41089, -14.62810, 0.00000, 0.00000, -255.30003}
	{-354.18649, 2178.18896, -14.62810, 0.00000, 0.00000, -196.92007},
	{-353.54990, 2177.71924, -14.62810, 0.00000, 0.00000, -255.30003},
	{-353.72476, 2177.00586, -14.62810, 0.00000, 0.00000, -255.24004},
	{-354.55673, 2176.78638, -14.62810, 0.00000, 0.00000, -255.24004},
	{-354.55673, 2176.78638, -14.62810, 0.00000, 0.00000, -255.24004},
	{-355.12744, 2176.83618, -14.62810, 0.00000, 0.00000, -255.24004},
	{-354.55673, 2176.78638, -14.62810, 0.00000, 0.00000, -255.24004},
	{-355.60504, 2176.43970, -14.62810, 0.00000, 0.00000, -255.24004},
	{-355.94568, 2175.87476, -14.62810, 0.00000, 0.00000, -255.24004},
	{-355.42905, 2175.44482, -14.62810, 0.00000, 0.00000, -255.24004},
	{-354.78912, 2175.14429, -14.62810, 0.00000, 0.00000, -255.24004},
	{-353.95828, 2175.05688, -14.62810, 0.00000, 0.00000, -255.24004},
	{-354.25684, 2175.10669, -14.62810, 0.00000, 0.00000, -255.24004},
	{-355.04150, 2175.89038, -14.62810, 0.00000, 0.00000, -255.24004},
	{-354.62076, 2175.76147, -14.62810, 0.00000, 0.00000, -255.24004},
	{-354.23138, 2176.14404, -14.62810, 0.00000, 0.00000, -255.24004},
	{-352.81567, 2176.65015, -14.62810, 0.00000, 0.00000, -280.32004},
	{-354.18866, 2175.57202, -14.62810, 0.00000, 0.00000, -280.38004},
	{-353.62985, 2175.99414, -14.62810, 0.00000, 0.00000, -255.30003},
	{-353.45001, 2178.14868, -14.62810, 0.00000, 0.00000, -255.30003},
	{-353.59216, 2178.78687, -14.62810, 0.00000, 0.00000, -255.30003},
	{-353.60919, 2179.55566, -14.62810, 0.00000, 0.00000, -255.30003},
	{-353.05396, 2179.02954, -14.62810, 0.00000, 0.00000, -255.30003},
	{-353.03525, 2177.60498, -14.62810, 0.00000, 0.00000, -282.35999},
	{-352.92972, 2178.20459, -14.62810, 0.00000, 0.00000, -282.35999},
	{-352.92972, 2178.20459, -14.62810, 0.00000, 0.00000, -282.35999},
	{-353.27570, 2178.67676, -14.29210, 0.00000, 0.00000, -280.38000},
	{-353.55896, 2179.19556, -14.29210, 0.00000, 0.00000, -280.44000},
	{-353.76471, 2178.99951, -14.29210, 0.00000, 0.00000, -280.50000},
	{-354.02496, 2178.19800, -14.29210, 0.00000, 0.00000, -280.50000},
	{-353.52850, 2177.99390, -14.29210, 0.00000, 0.00000, -280.50000},
	{-353.89722, 2177.56470, -14.29210, 0.00000, 0.00000, -280.50000},
	{-353.46539, 2177.15576, -14.29210, 0.00000, 0.00000, -280.50000},
	{-354.29453, 2176.45142, -14.29210, 0.00000, 0.00000, -280.50000},
	{-353.57034, 2176.57373, -14.62810, 0.00000, 0.00000, -280.32004},
	{-354.24454, 2177.11694, -14.29210, 0.00000, 0.00000, -280.50000},
	{-354.89435, 2176.42603, -14.29210, 0.00000, 0.00000, -280.50000},
	{-354.67725, 2175.94116, -14.29210, 0.00000, 0.00000, -280.50000},
	{-355.50687, 2176.03833, -14.29210, 0.00000, 0.00000, -280.50000},
	{-356.02148, 2175.98682, -14.40410, 0.00000, 0.00000, -280.50000},
	{-356.06119, 2176.47900, -14.48810, 0.00000, 0.00000, -280.50000},
	{-355.98367, 2177.64551, -14.62810, 0.00000, 0.00000, -255.24004},
	{-355.20377, 2179.13428, -14.62810, 0.00000, 0.00000, -255.24004},
	{-356.13205, 2176.64404, -14.62810, 0.00000, 0.00000, -255.24004},
	{-353.72476, 2177.00586, -14.62810, 0.00000, 0.00000, -255.24004},
	{-353.83997, 2176.60547, -14.29210, 0.00000, 0.00000, -280.50000},
	{-353.68668, 2179.14575, -14.06810, 0.00000, 0.00000, -280.50000},
	{-353.55960, 2178.59497, -14.06810, 0.00000, 0.00000, -280.50000},
	{-353.80014, 2178.05396, -14.06810, 0.00000, 0.00000, -280.50000},
	{-353.09384, 2178.11133, -14.06810, 0.00000, 0.00000, -280.50000},
	{-353.69907, 2177.51440, -14.06810, 0.00000, 0.00000, -280.50000},
	{-353.85355, 2177.02686, -14.06810, 0.00000, 0.00000, -280.50000},
	{-354.11859, 2176.60522, -14.06810, 0.00000, 0.00000, -280.50000},
	{-354.43970, 2176.16113, -14.06810, 0.00000, 0.00000, -280.50000},
	{-354.93198, 2175.99341, -14.06810, 0.00000, 0.00000, -280.50000},
	{-354.93198, 2175.99341, -14.06810, 0.00000, 0.00000, -280.50000},
	{-353.97852, 2175.94507, -14.06810, 0.00000, 0.00000, -280.50000},
	{-353.01758, 2177.07227, -14.62810, 0.00000, 0.00000, -282.35999},
	{-353.01758, 2177.07227, -14.62810, 0.00000, 0.00000, -282.35999},
	{-353.30923, 2176.39502, -14.29210, 0.00000, 0.00000, -280.50000},
	{-353.27380, 2176.21973, -14.62810, 0.00000, 0.00000, -280.32004},
	{-353.59805, 2175.59619, -14.62810, 0.00000, 0.00000, -280.32004},
	{-353.06189, 2179.87183, -14.62810, 0.00000, 0.00000, -255.30003},
	{-352.42606, 2179.74780, -14.62810, 0.00000, 0.00000, -255.30003},
	{-351.96555, 2179.75098, -14.62810, 0.00000, 0.00000, -255.30003},
	{-351.56805, 2179.67627, -14.62810, 0.00000, 0.00000, -255.30003},
	{-351.15213, 2179.56030, -14.62810, 0.00000, 0.00000, -255.30003},
	{-350.58737, 2179.53857, -14.62810, 0.00000, 0.00000, -255.30003},
	{-351.19754, 2179.68213, -14.12410, 0.00000, 0.00000, -255.30000},
	{-350.65079, 2179.58179, -14.12410, 0.00000, 0.00000, -255.30000},
	{-351.65576, 2179.73901, -14.12410, 0.00000, 0.00000, -255.18001},
	{-352.21317, 2179.82056, -14.12410, 0.00000, 0.00000, -272.39996},
	{-352.73587, 2179.92651, -14.12410, 0.00000, 0.00000, -205.74007},
	{-350.87408, 2179.36865, -14.62810, 0.00000, 0.00000, -255.30003},
	{-351.35760, 2179.28662, -14.62810, 0.00000, 0.00000, -262.74005},
	{-351.86221, 2179.43896, -14.62810, 0.00000, 0.00000, -229.50003},
	{-352.27094, 2179.48169, -14.62810, 0.00000, 0.00000, -288.24002},
	{-352.73355, 2179.41968, -14.62810, 0.00000, 0.00000, -255.30003},
	{-350.84607, 2178.94287, -14.93610, 0.00000, 0.00000, -255.30000},
	{-350.66745, 2178.92090, -14.93610, 0.00000, 0.00000, -255.30000},
	{-351.36700, 2178.96655, -14.93610, 0.00000, 0.00000, -254.46002},
	{-351.79639, 2179.07983, -14.93610, 0.00000, 0.00000, -255.06001},
	{-352.36462, 2179.20996, -14.93610, 0.00000, 0.00000, -255.24001},
	{-352.72919, 2179.19409, -14.93610, 0.00000, 0.00000, -255.30000},
	{-355.76218, 2177.12817, -14.62810, 0.00000, 0.00000, -255.24004},
	{-355.13208, 2177.42163, -14.62810, 0.00000, 0.00000, -255.30003},
	{-354.80661, 2178.08301, -14.62810, 0.00000, 0.00000, -254.46005},
	{-354.76834, 2178.79199, -14.62810, 0.00000, 0.00000, -255.12004},
	{-354.56430, 2179.45947, -14.62810, 0.00000, 0.00000, -255.24004},
	{-354.88632, 2179.80542, -14.62810, 0.00000, 0.00000, -255.24004},
	{-355.45282, 2177.92749, -14.62810, 0.00000, 0.00000, -255.24004},
	{-355.18283, 2179.06128, -14.62810, 0.00000, 0.00000, -255.24004},
	{-355.51059, 2178.42505, -14.62810, 0.00000, 0.00000, -255.30003},
	{-354.56430, 2179.45947, -14.62810, 0.00000, 0.00000, -255.24004},
	{-356.10019, 2176.74658, -14.62810, 0.00000, 0.00000, -352.32001},
	{-356.22354, 2176.24854, -14.62810, 0.00000, 0.00000, -283.68002},
	{-355.57474, 2176.78052, -14.29210, 0.00000, 0.00000, -280.50000},
	{-355.53366, 2178.15381, -14.29210, 0.00000, 0.00000, -280.38000},
	{-355.80841, 2176.71362, -14.29210, 0.00000, 0.00000, -280.50000},
	{-354.96051, 2177.55542, -14.29210, 0.00000, 0.00000, -280.50000},
	{-355.11172, 2179.37085, -14.29210, 0.00000, 0.00000, -280.50000},
	{-309.32587, 2160.45850, -14.85536, 0.00000, 0.00000, 0.00000},
	{-310.36572, 2160.43311, -15.02340, 0.00000, 0.00000, 0.00000},
	{-309.90143, 2160.64258, -15.02340, 0.00000, 0.00000, 0.00000},
	{-309.92719, 2160.23340, -15.02340, 0.00000, 0.00000, 0.00000},
	{-309.64487, 2159.94214, -15.02340, 0.00000, 0.00000, 0.12000},
	{-305.52863, 2167.26538, -15.02340, 0.00000, 0.00000, 0.00000},
	{-305.79187, 2167.36328, -15.02340, 0.00000, 0.00000, 0.00000},
	{-305.80988, 2166.88672, -15.02340, 0.00000, 0.00000, 0.00000},
	{-306.00211, 2167.35938, -15.02340, 0.00000, 0.00000, 0.00000},
	{-304.73795, 2168.99048, -15.02340, 0.00000, 0.00000, 0.00000},
	{-303.77896, 2168.81226, -15.02340, 0.00000, 0.00000, 0.00000},
	{-304.74237, 2170.48682, -15.02340, 0.00000, 0.00000, 0.00000},
	{-305.40851, 2170.94629, -15.02340, 0.00000, 0.00000, 0.00000},
	{-305.47845, 2167.84180, -15.02340, 0.00000, 0.00000, 0.00000},
	{-269.78061, 2164.05127, -14.93339, 0.00000, 0.00000, 0.00000},
	{-270.07083, 2164.12720, -14.93339, 0.00000, 0.00000, 0.00000},
	{-270.01489, 2163.94678, -14.93339, 0.00000, 0.00000, 0.00000},
	{-269.20926, 2163.94263, -14.93339, 0.00000, 0.00000, 0.00000},
	{-304.31992, 2160.05981, -15.02340, 0.00000, 0.00000, 0.00000},
	{-304.53101, 2160.40161, -15.02340, 0.00000, 0.00000, 0.00000},
	{-303.86734, 2160.45581, -15.02340, 0.00000, 0.00000, 0.00000},
	{-303.06021, 2158.27856, -15.02340, 0.00000, 0.00000, 0.00000},
	{-303.16953, 2158.42139, -15.02340, 0.00000, 0.00000, 0.00000},
	{-304.13977, 2158.63599, -15.02340, 0.00000, 0.00000, 0.00000},
	{-271.82394, 2163.70044, -14.93339, 0.00000, 0.00000, 0.00000},
	{-272.16293, 2164.33667, -14.93339, 0.00000, 0.00000, 0.00000},
	{-271.74478, 2164.09424, -14.93339, 0.00000, 0.00000, 0.00000},
	{-275.07919, 2159.34155, -15.12940, 0.00000, 0.00000, 0.00000},
	{-274.71094, 2159.31958, -15.12940, 0.00000, 0.00000, 0.00000},
	{-274.83633, 2158.95557, -15.12940, 0.00000, 0.00000, 63.12001},
	{-275.21347, 2159.08813, -15.12940, 0.00000, 0.00000, 63.12001},
	{-274.98438, 2162.74438, -15.12940, 0.00000, 0.00000, 63.12001},
	{-272.23172, 2156.11890, -15.12940, 0.00000, 0.00000, 63.12001},
	{-272.23172, 2156.11890, -15.12940, 0.00000, 0.00000, 63.12001},
	{-272.23172, 2156.11890, -15.12940, 0.00000, 0.00000, 63.12001},
	{-260.87949, 2159.49121, -15.12940, 0.00000, 0.00000, 0.00000},
	{-264.75714, 2160.05762, -15.12940, 0.00000, 0.00000, 0.00000},
	{-261.05859, 2159.73804, -15.12940, 0.00000, 0.00000, 0.00000},
	{-261.44925, 2159.55273, -15.12940, 0.00000, 0.00000, 0.00000},
	{-265.96729, 2152.67554, -15.12940, 0.00000, 0.00000, 3.54000},
	{-272.18060, 2159.24390, -15.12940, 0.00000, 0.00000, 0.00000},
	{-274.48529, 2156.19751, -15.12940, 0.00000, 0.00000, 61.20000},
	{-265.90295, 2157.25977, -15.12940, 0.00000, 0.00000, 63.18001},
	{-271.03568, 2161.34424, -15.12940, 0.00000, 0.00000, 63.18001},
	{-267.50656, 2161.52197, -15.12940, 0.00000, 0.00000, 63.42001},
	{-269.87976, 2160.12134, -15.12940, 0.00000, 0.00000, 68.46001},
	{-269.21262, 2158.59937, -15.12940, 0.00000, 0.00000, 63.12001},
	{-276.95355, 2158.21094, -15.12940, 0.00000, 0.00000, 61.20000},
	{-274.96350, 2157.67676, -15.12940, 0.00000, 0.00000, 61.20000},
	{-272.00909, 2157.37622, -15.12940, 0.00000, 0.00000, 61.20000},
	{-269.56903, 2157.32813, -15.12940, 0.00000, 0.00000, 61.74001},
	{-282.34720, 2158.06396, -15.12940, 0.00000, 0.00000, 61.20000},
	{-281.20529, 2157.10034, -15.12940, 0.00000, 0.00000, 59.58001},
	{-283.25333, 2155.23730, -15.12940, 0.00000, 0.00000, 62.10000},
	{-277.73926, 2155.78882, -15.12940, 0.00000, 0.00000, 61.26001},
	{-280.30835, 2162.05127, -15.12940, 0.00000, 0.00000, 61.14000},
	{-282.34720, 2158.06396, -15.12940, 0.00000, 0.00000, 61.20000},
	{-280.39154, 2162.54736, -15.12940, 0.00000, 0.00000, 61.14000},
	{-280.61890, 2162.12817, -15.12940, 0.00000, 0.00000, 61.14000},
	{-308.85962, 2164.96729, -15.02340, 0.00000, 0.00000, 0.00000},
	{-309.06519, 2163.23169, -15.02340, 0.00000, 0.00000, 0.18000},
	{-308.50586, 2164.70801, -15.02340, 0.00000, 0.00000, 0.00000},
	{-309.06143, 2164.49927, -15.02340, 0.00000, 0.00000, 0.06000},
	{-308.78339, 2163.49951, -15.02340, 0.00000, 0.00000, 0.30000},
	{-308.39725, 2163.96948, -15.02340, 0.00000, 0.00000, -0.06000},
	{-309.07602, 2163.94995, -15.02340, 0.00000, 0.00000, 0.00000},
	{-309.33939, 2168.18140, -15.21940, 0.00000, 0.00000, -112.68000},
	{-308.33356, 2163.40405, -15.02340, 0.00000, 0.00000, 0.12000},
	{-307.24594, 2165.72900, -15.02340, 0.00000, 0.00000, 0.06000},
	{-308.58453, 2164.32422, -15.02340, 0.00000, 0.00000, -114.35999},
	{-306.87311, 2165.75098, -15.02340, 0.00000, 0.00000, 0.00000},
	{-308.85962, 2164.96729, -15.02340, 0.00000, 0.00000, 0.00000},
	{-286.27240, 2156.86353, -15.12940, 0.00000, 0.00000, 61.14000},
	{-288.02618, 2159.95850, -15.12940, 0.00000, 0.00000, 47.10000},
	{-287.25049, 2158.96167, -15.12940, 0.00000, 0.00000, 61.14000},
	{-287.32236, 2157.91479, -15.12940, 0.00000, 0.00000, 61.14000},
	{-292.42346, 2165.28882, -15.12940, 0.00000, 0.00000, 61.38000},
	{-287.21790, 2158.42383, -15.12940, 0.00000, 0.00000, 61.20000},
	{-287.01541, 2158.11890, -15.12940, 0.00000, 0.00000, 60.54000},
	{-286.78928, 2158.62354, -15.12940, 0.00000, 0.00000, 61.14000},
	{-291.23685, 2159.53540, -15.12940, 0.00000, 0.00000, 61.14000},
	{-286.24878, 2156.87915, -15.12940, 0.00000, 0.00000, 61.14000},
	{-291.42862, 2162.77954, -15.12940, 0.00000, 0.00000, 61.14000},
	{-291.42862, 2162.77954, -15.12940, 0.00000, 0.00000, 61.14000},
	{-294.94476, 2159.75244, -15.12940, 0.00000, 0.00000, 61.38000},
	{-293.20831, 2160.27954, -15.12940, 0.00000, 0.00000, 61.08001},
	{-298.02997, 2161.99023, -15.12940, 0.00000, 0.00000, 61.38000},
	{-302.47473, 2158.81812, -15.12940, 0.00000, 0.00000, 61.38000},
	{-301.23227, 2159.80029, -15.12940, 0.00000, 0.00000, 61.38000},
	{-300.68698, 2168.46484, -15.12940, 0.00000, 0.00000, 61.38000},
	{-300.83203, 2163.35742, -15.12940, 0.00000, 0.00000, 61.38000},
	{-308.27771, 2163.51807, -15.12940, 0.00000, 0.00000, 61.38000},
	{-302.83630, 2164.35742, -15.12940, 0.00000, 0.00000, 61.38000},
	{-297.71069, 2167.63818, -15.12940, 0.00000, 0.00000, 61.32000},
	{-307.92963, 2154.59155, -15.12940, 0.00000, 0.00000, 61.44001},
	{-314.10007, 2166.18140, -15.13540, 0.00000, 0.00000, -112.68000},
	{-316.91269, 2163.62158, -15.13540, 0.00000, 0.00000, -112.68000},
	{-315.64044, 2164.20581, -15.13540, 0.00000, 0.00000, -112.68000},
	{-318.89966, 2167.10425, -15.13540, 0.00000, 0.00000, -112.68000},
	{-320.19226, 2164.89355, -15.13540, 0.00000, 0.00000, -112.68000},
	{-316.89459, 2165.59302, -15.13540, 0.00000, 0.00000, -112.68000},
	{-322.71490, 2171.15063, -15.13540, 0.00000, 0.00000, -112.68000},
	{-324.47607, 2167.62354, -15.13540, 0.00000, 0.00000, -112.68000},
	{-328.21765, 2167.09424, -15.13540, 0.00000, 0.00000, -112.68000},
	{-328.21765, 2167.09424, -15.13540, 0.00000, 0.00000, -112.68000},
	{-319.41446, 2166.45703, -15.13540, 0.00000, 0.00000, -112.68000},
	{-324.11478, 2165.08936, -15.13540, 0.00000, 0.00000, -112.68000},
	{-324.11478, 2165.08936, -15.13540, 0.00000, 0.00000, -112.68000},
	{-317.09366, 2172.84009, -15.13540, 0.00000, 0.00000, -112.68000},
	{-317.09366, 2172.84009, -15.13540, 0.00000, 0.00000, -112.68000},
	{-321.30615, 2168.33276, -15.13540, 0.00000, 0.00000, -112.68000},
	{-326.80313, 2170.34937, -15.13540, 0.00000, 0.00000, -112.68000},
	{-330.73767, 2167.43433, -15.13540, 0.00000, 0.00000, -112.68000},
	{-333.96054, 2164.96631, -15.13540, 0.00000, 0.00000, -112.68000},
	{-326.94565, 2166.22290, -15.13540, 0.00000, 0.00000, -112.68000},
	{-332.91766, 2173.90674, -15.13540, 0.00000, 0.00000, -112.68000},
	{-334.90884, 2171.66772, -15.13540, 0.00000, 0.00000, -112.68000},
	{-331.70386, 2169.67261, -15.13540, 0.00000, 0.00000, -112.68000},
	{-338.49130, 2168.47192, -15.13540, 0.00000, 0.00000, -112.68000},
	{-339.15463, 2174.45776, -15.13540, 0.00000, 0.00000, -112.68000},
	{-342.54099, 2170.09546, -15.13540, 0.00000, 0.00000, -112.68000},
	{-342.27737, 2171.79614, -15.13540, 0.00000, 0.00000, -112.68000},
	{-337.59042, 2170.48706, -15.13540, 0.00000, 0.00000, -112.68000},
	{-339.27637, 2169.40161, -15.13540, 0.00000, 0.00000, -112.68000},
	{-341.86417, 2167.22656, -15.13540, 0.00000, 0.00000, -112.68000},
	{-341.86417, 2167.22656, -15.13540, 0.00000, 0.00000, -112.68000},
	{-257.20016, 2067.79175, -14.73586, 0.00000, 0.00000, 0.00000},
	{-257.20016, 2067.79175, -14.73586, 0.00000, 0.00000, 0.00000},
	{-259.06290, 2065.99878, -14.95300, 0.00000, 0.00000, 0.00000},
	{-258.85620, 2067.12524, -14.95300, 0.00000, 0.00000, 0.00000},
	{-258.28189, 2069.46826, -14.95300, 0.00000, 0.00000, 0.00000},
	{-259.93246, 2068.70435, -14.95300, 0.00000, 0.00000, 0.00000},
	{-257.61279, 2068.62305, -14.95300, 0.00000, 0.00000, 0.00000},
	{-258.72723, 2068.99976, -14.95300, 0.00000, 0.00000, 0.00000},
	{-258.06073, 2067.46680, -14.95300, 0.00000, 0.00000, 0.00000},
	{-262.26236, 2067.07007, -14.95300, 0.00000, 0.00000, 0.00000},
	{-260.54529, 2063.59448, -14.95300, 0.00000, 0.00000, 0.00000},
	{-263.38037, 2063.97192, -14.95300, 0.00000, 0.00000, 0.00000},
	{-263.75891, 2065.07104, -14.95300, 0.00000, 0.00000, -1.86000},
	{-261.12875, 2061.93701, -14.95300, 0.00000, 0.00000, -7.44000},
	{-266.02228, 2060.79175, -14.95300, 0.00000, 0.00000, -4.08000},
	{-263.91370, 2059.80493, -14.95300, 0.00000, 0.00000, 0.30000},
	{-270.74463, 2058.05005, -14.95300, 0.00000, 0.00000, 0.00000},
	{-259.40295, 2059.58984, -14.95300, 0.00000, 0.00000, 0.00000},
	{-269.17316, 2061.06909, -14.95300, 0.00000, 0.00000, 0.00000},
	{-267.12860, 2067.49585, -14.95300, 0.00000, 0.00000, 0.00000},
	{-267.06079, 2048.11841, -14.95300, 0.00000, 0.00000, 0.00000},
	{-265.85797, 2056.71411, -14.95300, 0.00000, 0.00000, 0.00000},
	{-262.56772, 2058.39648, -14.95300, 0.00000, 0.00000, -0.18000},
	{-268.11813, 2057.01465, -14.95300, 0.00000, 0.00000, 0.12000},
	{-265.11035, 2057.78589, -14.95300, 0.00000, 0.00000, 0.00000},
	{-262.07458, 2070.15332, -14.95300, 0.00000, 0.00000, -0.06000},
	{-266.42349, 2050.33301, -14.95300, 0.00000, 0.00000, -0.18000},
	{-268.11490, 2061.89722, -14.95300, 0.00000, 0.00000, -0.06000},
	{-265.42239, 2051.79370, -14.95300, 0.00000, 0.00000, 0.00000},
	{-262.19016, 2055.92480, -14.95300, 0.00000, 0.00000, -0.54000},
	{-269.31943, 2044.78625, -14.95300, 0.00000, 0.00000, 0.00000},
	{-271.25281, 2050.42944, -14.95300, 0.00000, 0.00000, 0.00000},
	{-268.70245, 2051.40332, -14.95300, 0.00000, 0.00000, -0.06000},
	{-269.13330, 2036.16699, -14.95300, 0.00000, 0.00000, 0.00000},
	{-265.30814, 2041.56885, -14.95300, 0.00000, 0.00000, 0.06000},
	{-268.50412, 2053.95923, -14.95300, 0.00000, 0.00000, 0.00000},
	{-272.53204, 2054.86084, -14.95300, 0.00000, 0.00000, 1.02000},
	{-269.69348, 2056.22754, -14.95300, 0.00000, 0.00000, 1.02000},
	{-273.47458, 2049.63330, -14.95300, 0.00000, 0.00000, 1.02000},
	{-270.26331, 2047.55298, -14.95300, 0.00000, 0.00000, 1.02000},
	{-272.53204, 2054.86084, -14.95300, 0.00000, 0.00000, 1.02000},
	{-269.41891, 2045.51294, -14.95300, 0.00000, 0.00000, 0.00000},
	{-269.06973, 2044.95251, -14.95300, 0.00000, 0.00000, 0.12000},
	{-269.62445, 2045.06372, -14.95300, 0.00000, 0.00000, -0.06000},
	{-273.25522, 2039.97925, -14.95300, 0.00000, 0.00000, 0.00000},
	{-272.68893, 2035.07996, -14.95300, 0.00000, 0.00000, -25.98000},
	{-269.17084, 2041.01208, -14.95300, 0.00000, 0.00000, 0.00000},
	{-269.41891, 2045.51294, -14.95300, 0.00000, 0.00000, 0.00000},
	{-269.30411, 2036.83496, -14.95300, 0.00000, 0.00000, -0.06000},
	{-272.38931, 2036.33020, -14.95300, 0.00000, 0.00000, -0.06000},
	{-268.14114, 2036.42334, -14.95300, 0.00000, 0.00000, -5.34000},
	{-270.81943, 2036.52136, -14.95300, 0.00000, 0.00000, -0.06000},
	{-269.92383, 2036.40210, -14.95300, 0.00000, 0.00000, 1.26000},
	{-270.28061, 2036.93811, -14.95300, 0.00000, 0.00000, -0.06000},
	{-269.80780, 2037.21729, -14.95300, 0.00000, 0.00000, -0.06000},
	{-271.24518, 2033.67725, -14.95300, 0.00000, 0.00000, 0.00000},
	{-269.30411, 2036.83496, -14.95300, 0.00000, 0.00000, -0.06000},
	{-270.72037, 2029.73608, -14.95300, 0.00000, 0.00000, 0.00000},
	{-275.31213, 2030.17493, -14.95300, 0.00000, 0.00000, 0.00000},
	{-273.24649, 2031.53149, -14.95300, 0.00000, 0.00000, 0.30000},
	{-268.83533, 2024.33081, -14.95300, 0.00000, 0.00000, 0.06000},
	{-269.15671, 2033.14844, -14.95300, 0.00000, 0.00000, 0.18000},
	{-275.37454, 2027.43372, -14.95300, 0.00000, 0.00000, 0.00000},
	{-266.65207, 2026.27869, -14.95300, 0.00000, 0.00000, 0.00000},
	{-266.94156, 2030.40271, -14.95300, 0.00000, 0.00000, 0.00000},
	{-270.72037, 2029.73608, -14.95300, 0.00000, 0.00000, 0.00000},
	{-269.28860, 2030.85156, -14.95300, 0.00000, 0.00000, 0.24000},
	{-273.57962, 2027.16028, -14.95300, 0.00000, 0.00000, 0.24000},
	{-271.15274, 2025.78198, -14.95300, 0.00000, 0.00000, 0.24000},
	{-269.28860, 2030.85156, -14.95300, 0.00000, 0.00000, 0.24000},
	{-265.16211, 2029.85095, -14.95300, 0.00000, 0.00000, 0.00000},
	{-264.29871, 2031.91760, -14.95300, 0.00000, 0.00000, 0.00000},
	{-267.02383, 2033.84912, -14.95300, 0.00000, 0.00000, 0.00000},
	{-265.16211, 2029.85095, -14.95300, 0.00000, 0.00000, 0.00000},
	{-277.19443, 2025.79395, -14.95300, 0.00000, 0.00000, -0.06000},
	{-281.58127, 2026.20972, -14.95300, 0.00000, 0.00000, 0.42000},
	{-277.52206, 2030.61072, -14.95300, 0.00000, 0.00000, -0.06000},
	{-280.16257, 2025.15234, -14.95300, 0.00000, 0.00000, 0.00000},
	{-277.37277, 2019.83606, -14.95300, 0.00000, 0.00000, 0.00000},
	{-277.19443, 2025.79395, -14.95300, 0.00000, 0.00000, -0.06000},
	{-263.75891, 2065.07104, -14.95300, 0.00000, 0.00000, -1.86000},
	{-267.12128, 2080.17798, -14.95300, 0.00000, 0.00000, 0.00000},
	{-262.36401, 2082.32739, -14.95300, 0.00000, 0.00000, 0.00000},
	{-265.43030, 2075.47852, -14.95300, 0.00000, 0.00000, 1.02000},
	{-258.35648, 2078.88965, -14.95300, 0.00000, 0.00000, 0.00000},
	{-262.28848, 2075.72485, -14.95300, 0.00000, 0.00000, -0.30000},
	{-264.57962, 2068.76978, -14.95300, 0.00000, 0.00000, 0.00000},
	{-264.61075, 2067.67236, -14.95300, 0.00000, 0.00000, -0.12000},
	{-267.12128, 2080.17798, -14.95300, 0.00000, 0.00000, 0.00000},
	{-264.37598, 2067.90796, -14.95300, 0.00000, 0.00000, -0.18000},
	{-264.00137, 2068.31836, -14.95300, 0.00000, 0.00000, -0.24000},
	{-265.53522, 2068.31982, -14.95300, 0.00000, 0.00000, -1.56000},
	{-265.06161, 2068.23926, -14.95300, 0.00000, 0.00000, 3.60000},
	{-265.04892, 2068.86890, -14.95300, 0.00000, 0.00000, -0.18000},
	{-264.37598, 2067.90796, -14.95300, 0.00000, 0.00000, -0.18000}*/
};

enum e_bObjectek
{
	bObjID,
	Float:bHP,
	bTipus
};
new g_BanyaObjectek[BANYA_OBJECTEK][e_bObjectek];

#define BANYASZ_KO 0
#define BANYASZ_SZEN 1
#define BANYASZ_ARANY 2

#define MAX_GARAZS MAX_HOUSE + 100
new Float:g_GarazsInteriorok[][] =
{
	{616.4642, -124.4003, 997.5993, 90.0, 3.0}, // Kicsi
    {617.0011, -74.6962, 997.8426, 90.0, 2.0}, // Közepes
    {606.4268, -9.9375, 1000.7485, 270.0, 1.0} //Nagy

};
enum e_gInfo
{
	bool:gVan,
	gID,
	gPickup,
	Text3D:gText,
	Float:gPozBe[4],
	gTipus,
	gTulaj,
	gHaz,
	gAr,
	gZarva
};
new gInfo[MAX_GARAZS][e_gInfo],
	Iterator:Garazsok<MAX_GARAZS>;

enum houseInfo
{
    pickup,
	hazar,
	bool:hasznalatban,
	Text3D:label,
	Float:posx,
	Float:posy,
	Float:posz,
	Text3D:belsolabel,
	belsopickup,
	tulaj[32+1],
	hTulajID,
	hdbid,
	hInterior,
	butorsz,
	hazSzef[5],
	Text3D:hDrogHely[50],
	hDrogAllapot[50],
	hDrogMennyi[50],
	hDrogMi[50],
	hFegyver[15],
	hTolteny[15],
	bool:hZarva,
	hTipus,
	hPince,
	hGarazs
};

enum BelsoInteriorAdatok
{
	Float:belsox,
	Float:belsoy,
	Float:belsoz,
	Float:belsoszog,
	bInterior
};

enum TpEnum
{
	Float:tposx,
	Float:tposy,
	Float:tposz,
	Float:tangle,
	tpnev[32],
	bool:tphasznalva,
	listid,
	tinterior,
	tvw
};

enum GPSEnum
{
	Float:gposx,
	Float:gposy,
	Float:gposz,
	bool:gHasznalva,
	listid,
	gnev[MAX_PLAYER_NAME]
}
new GPSInfo[MAXGPS][GPSEnum];

new Gallery[][] =
{
        "loadsc1:loadsc1",
        "loadsc2:loadsc2",
        "loadsc3:loadsc3",
        "loadsc4:loadsc4",
        "loadsc5:loadsc5",
        "loadsc6:loadsc6",
        "loadsc7:loadsc7",
        "loadsc8:loadsc8",
        "loadsc9:loadsc9",
        "loadsc10:loadsc10",
        "loadsc11:loadsc11",
        "loadsc12:loadsc12",
        "loadsc13:loadsc13",
        "loadsc14:loadsc14"

};

new Radio[][] =
{
        "http://somafm.com/tags.pls",
		"http://bbc.co.uk/radio/listen/live/r1.asx",
		"http://www.listenlive.eu/cadenacope.m3u",
		"http://onair-ha1.krone.at/kronehit-dance.mp3.m3u",
		"http://www.m2radio.fr/pls/m2club.m3u",
		"http://mp3.kataweb.it:8000/M2O.m3u",
		"http://www.listenlive.eu/vrtklara-low.m3u",
		"http://icecast4.play.cz/evropa2-64.mp3.m3u",
		"http://broadcast.infomaniak.net/nrj-low.mp3.m3u"

};

new Music[][] =
{
        "https://dl.dropboxusercontent.com/s/nqxrnokp4zspsw5/Basto%20-%20Again%20and%20Again%20%28Original%20Mix%29.mp3",
		"https://dl.dropboxusercontent.com/s/ln10micl32ys6yj/Blasterjaxx%20%26amp%3B%20Badd%20Dimes%20-%20Titan%20%28Original%20Mix%29.mp3",
		"https://dl.dropboxusercontent.com/s/pj21s5kz5ad5k3d/DVBBS%20%26amp%3B%20Tony%20Junior%20-%20Immortal%20%28Original%20Mix%29.mp3",
		"https://dl.dropboxusercontent.com/s/g1iuqoot6z7qfn7/Martin%20Garrix%20-%20Proxy%20%28FREE%20DOWNLOAD%29.mp3",
		"https://dl.dropboxusercontent.com/s/68htnt08uzgceqr/Martin%20Garrix%20-%20Animals%20%28Original%20Mix%29.mp3",
		"https://dl.dropboxusercontent.com/s/nvzyebx9ydow2ow/Starkillers%20%26%20DJ%20BL3ND%20-%20Xception%20%28Official%20Music%20Video%29.mp3",
		"https://dl.dropboxusercontent.com/s/0iof8iei1qxdc4f/Starkillers%20%26amp%3B%20Inpetto%20-%20Game%20Over%20%28Original%20Mix%29.mp3"

};

enum zoneinfo
{
	zone_name[32],
    Float:zone_minx,
    Float:zone_miny,
    Float:zone_minz,
    Float:zone_maxx,
    Float:zone_maxy,
    Float:zone_maxz
}
new zones[][zoneinfo] = {
{ "Los Santos",                     44.60, -2892.90,  -242.90,  2997.00,  -768.00,   900.00},
{ "Las Venturas",                  869.40,   596.30,  -242.90,  2997.00,  2993.80,   900.00},
{ "Bone County",                  -480.50,   596.30,  -242.90,   869.40,  2993.80,   900.00},
{ "Tierra Robada",               -2997.40,  1659.60,  -242.90,  -480.50,  2993.80,   900.00},
{ "Tierra Robada",               -1213.90,   596.30,  -242.90,  -480.50,  1659.60,   900.00},
{ "San Fierro",                  -2997.40, -1115.50,  -242.90, -1213.90,  1659.60,   900.00},
{ "Red County",                  -1213.90,  -768.00,  -242.90,  2997.00,   596.30,   900.00},
{ "Flint County",                -1213.90, -2892.90,  -242.90,    44.60,  -768.00,   900.00},
{ "Whetstone",                   -2997.40, -2892.90,  -242.90, -1213.90, -1115.50,   900.00}
};

enum ajtoAdatok
{
	anev[32],
	Float:abepos[4],
	Float:akipos[4],
	afreeze,
	bool:anyitva,
	bool:ajarmu,
	abeinterior,
	akiinterior,
	abevw,
	akivw,
	bool:ahasznalva,
	Text3D:abelabel,
	Text3D:akilabel,
	abepickup,
	akipickup,
	abepickupk,
	akipickupk
};

enum
{
 	KOCSI_MOTOR,
	KOCSI_LAMPA,
	KOCSI_RIASZTO,
	KOCSI_AJTO,
	KOCSI_MOTORHAZTETO,
	KOCSI_CSOMAGTARTO,
	KOCSI_OBJECTIVE,
	
	JOINT_CP,
	JOINT_PIPA,
	JOINT_BONG,
	
	PTD_REPORT
};


enum noclipenum
{
	cameramode,
	flyobject,
	mode,
	lrold,
	udold,
	lastmove,
	Float:accelmul
};

enum szerverIdozitok
{
	ADAT_MENTES,
	JARMU_MENTES,
	UZEMANYAG_LEVONAS,
	TEXTDRAW_FRISSITES
};

enum e_pTimers
{
	Timer:HATTER_VALTOZTATAS,
	Timer:PBHACK,
	Timer:PT_TRAFIPAX,
	Timer:PT_FAVAGO,
	Timer:PT_TAXIORA,
	Timer:PT_OPUP,
	Timer:PT_KEY,
	Timer:PT_AFK,
 	Timer:PT_LOPAS
};

enum automataInfo
{
	Float:aupos[6],
	autipus,
	aupenz,
	bool:auhasznalva,
	auobject,
	bool:auszerkeszti,
	auVW,
	auInt,
	Text3D:autext
};

enum fkInfo
{
	bool:fVan,
	fNev[32],
	fRang1[20],
	fRang2[20],
	fRang3[20],
	fRang4[20],
	fRang5[20],
 	fRang6[20],
 	fRang7[20],
 	fRang8[20],
	fRang9[20],
	fRang10[20],
	fRang11[20],
	fRang12[20],
	fRang13[20],
	fRang14[20],
	fRang15[20],
	fRang16[20],
 	fLegalis,
 	bool:fSzefObject,
 	Float:fSzefPos[3],
	Float:fSzefPosR[3],
	fVW,
	fInterior,
	fObjectID,
 	fSzefRang,
 	fPenz,
 	fTrafi,
 	fMaterial,
	fHeroin,
	fKokain,
	fMarihuana,
	fFegyverek[50],
	fToltenyek[50],
	fUtolsoTamadas,
	fFizetes[16],
	fMaxRang,
	//bool:fKellUpdates,
	fLimit
};

//Terheléselosztás -> Frakció mentés - Martin
enum fk_Update
{
	bool:fuNev,
	bool:fuRang1,
	bool:fuRang2,
	bool:fuRang3,
	bool:fuRang4,
	bool:fuRang5,
 	bool:fuRang6,
 	bool:fuRang7,
 	bool:fuRang8,
	bool:fuRang9,
	bool:fuRang10,
	bool:fuRang11,
	bool:fuRang12,
	bool:fuRang13,
	bool:fuRang14,
	bool:fuRang15,
	bool:fuRang16,
 	bool:fuLegalis,
 	bool:fuSzefObject,
 	bool:fuSzefRang,
 	bool:fuPenz,
 	bool:fuMaterial,
	bool:fuHeroin,
	bool:fuKokain,
	bool:fuMarihuana,
	bool:fuFegyverek,
	bool:fuUtolsoTamadas,
	bool:fuFizetes,
	bool:fmaxrang,
	bool:fuLimit,
	bool:fuTrafi
};

enum kapuInfo
{
	kNev[32],
	bool:kVan,
	bool:kSzerkeszt,
	kModel,
	Float:kTav,
	Float:kSpeed,
	Float:kPos[3],
	Float:kNPos[3],
	Float:kNRPos[3],
	Float:kZPos[3],
	Float:kZRPos[3],
	kHasznalo[MAX_KAPU_HASZNALO],
	bool:kMozgo,
	bool:kNyit,
	kVW,
	kOID,
	kKod
};

enum ceginfo
{
	bool:cVan,
	cNev[32],
	cANev[20],
	cTipus,
	cTulaj[MAX_PLAYER_NAME],
	cTulajID,
	cFTulaj,
	cBelepo,
	cKassza,
	cAr,
	Float:cPosBe[4],
	Float:cPosKi[4],
	cVw[2],
	cInt[2],
	cPickup
};

enum tuzInfo
{
	bool:tuzAktiv,
	Float:tPoz[3],
	Text3D:tFelirat,
	tObject[TUZ_OBJECT],
	tMap,
	tMaxHP,
	tHP
};

enum tuzInform
{
	Float:tPoz[3],
	tMapID
};

enum enkorozes
{
	krSzint,
	krOka[128],
	krNev[MAX_PLAYER_NAME],
	krKiadta[MAX_PLAYER_NAME]
};

enum bankBot
{
	bankNPCID,
	bool:bankAnim
};

enum bankinfo
{
	bBankElocsarnok,
	bBankSzefterem[5 + 1],
	bool:bBankInditva,
	bool:bBankSZLezerK,
	bBankEErtesites,
	bBankSZErtesites,
	bAjto[2]
};

new BankInfo[bankinfo];
new DIterator:BankSZLezer<50>;
new BankBotok[bankBot];
new Korozes[MAX_PLAYERS][enkorozes];
new TuzPoz[TUZ_MAX_POZ][tuzInform];
new Tuz[TUZ_MAX][tuzInfo];
new Beirhatjahogyigen[MAX_PLAYERS];
new Hazassag[MAX_PLAYERS];
new Elso[MAX_PLAYERS];
new GPSFloodolas[MAX_PLAYERS];
new HifiObjectLerakas[MAX_PLAYERS];
new BankIdo = 0;
new Trezor[MAX_PLAYERS];
new TrezorAD[MAX_PLAYERS];
new funkcio[MAX_PLAYERS];


#if defined KELLDWAYNE
new Text3D:NPCTextLabel[64];
new VasarlosNPCK[2];
new NPCNevek[2][] = {
	"Dwayne_Harrison",
	"Nincs"
};
stock NemLehetANeve(playerid) {
    new Neve[MAX_PLAYER_NAME];
    GetPlayerName(playerid, Neve, sizeof(Neve));
    for(new i = 0; i < sizeof(NPCNevek); i++) {
        if(strcmp(Neve,NPCNevek[i],true) == 0) {
            return 1;
        }
    }
    return 0;
}
#endif

stock const
	Float:BallSpawn[3] = {2706.9944, -1802.1829, 422.8372},
	Float:Corners[4][3] = {
		{2677.1453, -1748.0548, 422.8372},
		{2736.6797, -1747.9595, 422.8372},
		{2736.7180, -1856.2570, 422.8372},
		{2677.3398, -1856.5066, 422.8372}
	};


new
	Ball = -1,
	Goal = 0,
	//LastTouch = INVALID_PLAYER_ID,
	pLastTick[MAX_PLAYERS],
	BallHolder = -1,
	PlayerText:pPowerTD[MAX_PLAYERS],
	Text:PowerTD[2];

stock CreateBall()
{
	if(Ball != -1)
	    return;

	Ball = CreateObject(2114, BallSpawn[0], BallSpawn[1], BallSpawn[2] - 0.875, 0, 0, 0, 100.0);
	SetObjectMaterial(Ball, 0, 5033, "union_las", "ws_carparkwall2", 0);
	PHY_InitObject(Ball, 2114);
	PHY_RollObject(Ball);
	PHY_SetObjectFriction(Ball, 7.0);
	PHY_SetObjectAirResistance(Ball, 0.2);
	PHY_SetObjectGravity(Ball, 10.0);
	PHY_SetObjectZBound(Ball, _, _, 0.5);
	PHY_ToggleObjectPlayerColls(Ball, 1, 0.6);
}

stock DestroyBall()
{
	PHY_DeleteObject(Ball);
	DestroyObject(Ball);
	Ball = -1;
}

stock GetBallPos(&Float:x, &Float:y, &Float:z)
{
	if(BallHolder != -1)
	{
	    new
	        Float:angle;
	    GetPlayerPos(BallHolder, x, y, z);
		GetPlayerFacingAngle(BallHolder, angle);
		x += 0.6 * floatsin(-angle, degrees);
		y += 0.6 * floatcos(-angle, degrees);
		z -= 0.875;
	}
	else
		GetObjectPos(Ball, x, y, z);
}

stock RecreateBall()
{
    DestroyBall();
	CreateBall();
	BallHolder = -1;
}

stock LoadCollisions()
{
	// Field
	PHY_CreateArea(2669.03, -1864.08, 2745.12, -1740.54, _, _, 424.5);

	// Goal
	PHY_CreateWall(2711.87, -1857.30, 2711.87, -1862.75, 0.5, _, 425.87);
	PHY_CreateWall(2711.87, -1862.75, 2701.92, -1862.75, 0.5, _, 425.87);
	PHY_CreateWall(2701.92, -1862.75, 2701.92, -1857.30, 0.5, _, 425.87);
	// Crossbar
	PHY_CreateWall(2701.92, -1857.30, 2711.87, -1857.30, _, 425.87 - 0.1, 425.87 + 0.1);
	// Pole
	PHY_CreateCylinder(2711.87, -1857.30, 0.3, _, _, 425.87);
	PHY_CreateCylinder(2701.92, -1857.30, 0.3, _, _, 425.87);

	// Goal
    PHY_CreateWall(2701.92, -1747.10, 2701.92, -1741.60, 0.5, _, 425.87);
	PHY_CreateWall(2701.92, -1741.60, 2711.89, -1741.60, 0.5, _, 425.87);
	PHY_CreateWall(2711.89, -1741.60, 2711.89, -1747.10, 0.5, _, 425.87);
	// Crossbar
	PHY_CreateWall(2711.89, -1747.10, 2701.92, -1747.10, _, 425.87 - 0.1, 425.87 + 0.1);
	// Pole
	PHY_CreateCylinder(2701.92, -1747.10, 0.3, _, _, 425.87);
	PHY_CreateCylinder(2711.89, -1747.10, 0.3, _, _, 425.87);
}

public PHY_OnObjectUpdate(objectid)
{
	if(objectid != Ball)
	    return 1;

	new
	    Float:x, Float:y, Float:z,
		goal;

	GetBallPos(x, y, z);

	if(!(2669.03 < x < 2745.12 && -1864.08 < y < -1740.54))
	{
	    RecreateBall();
	    //SendClientMessageToAll(-1, "A labda újra lett spawnolva.");
	}
	else if((2701.92 < x < 2711.87 && -1862.75 < y < -1857.30 && (goal = 1)) || (2701.92 < x < 2711.89 && -1747.10 < y < -1741.60 && (goal = 2)))
	{
	    PHY_SetObjectZBound(Ball, _, 425.6 , 0.5);

	    if(z > 425.6)
	    {
	        RecreateBall();
	        //SendClientMessageToAll(-1, "A labda újra lett spawnolva.");
	        new
	            Float:mindist = FLOAT_INFINITY,
	            Float:dist,
	            closest;
	        for(new i; i < sizeof Corners; i++)
	        {
	            dist = (x - Corners[i][0]) * (x - Corners[i][0]) + (y - Corners[i][1]) * (y - Corners[i][1]);
				if(dist < mindist)
				{
				    mindist = dist;
				    closest = i;
				}
	        }
	        SetObjectPos(Ball, Corners[closest][0], Corners[closest][1], Corners[closest][2]);
	    }
	    else if(!Goal)
	    {
	       // new
	        //    string[128],
			//	name[MAX_PLAYER_NAME];

	        Goal = 1;

	        //GetPlayerName(LastTouch, name, sizeof name);
	        //format(string, sizeof string, "%s rúgott egy gólt.", name);
	        //SendClientMessageToAll(-1, string);
	        #pragma unused goal
	    }
	}
	else if(Goal)
	{
	    Goal = 0;
	    PHY_SetObjectZBound(Ball, _, FLOAT_INFINITY, 0.5);
	}

	return 1;
}

forward PowerBar();
public PowerBar()
{
	new
	    tick = GetTickCount(),
		dif;
	foreach(Player, i)
	{
	    if(pLastTick[i] == -1)
	    {
	        PlayerTextDrawHide(i, pPowerTD[i]);
			TextDrawHideForPlayer(i, PowerTD[0]);
			TextDrawHideForPlayer(i, PowerTD[1]);
			pLastTick[i] = 0;
	    }
	    else if(pLastTick[i])
	    {
			dif = tick - pLastTick[i];
			if(dif > 2000)
			{
			    pLastTick[i] = -1;
			    continue;
			}
			else if(dif > 1000)
			    dif = 2000 - dif;

            PlayerTextDrawTextSize(i, pPowerTD[i], 507.0 + ((84.0 * dif)/1000.0), 0.0);
			PlayerTextDrawShow(i, pPowerTD[i]);
			TextDrawShowForPlayer(i, PowerTD[0]);
			TextDrawShowForPlayer(i, PowerTD[1]);
	    }
	}
	return 1;
}

stock SendClientMessageEx(playerid,color,type[],{Float,_}:...)
{
	new string[128];
	for(new i = 0;i<numargs() -2;i++)
	{
	    switch(type[i])
	    {
	        case 's':
	        {
				new result[128];
				for(new a= 0;getarg(i +3,a) != 0;a++)
				{
				    result[a] = getarg(i +3,a);
				}
				if(!strlen(string))
				{
				    format(string,sizeof string,"%s",result);
				} else format(string,sizeof string,"%s%s",string,result);
	        }

	        case 'i':
	        {
	            new result = getarg(i +3);
				if(!strlen(string))
				{
				    format(string,sizeof string,"%i",result);
				} else format(string,sizeof string,"%s%i",string,result);
	        }

	        case 'f':
	        {
				new Float:result = Float:getarg(i +3);
				if(!strlen(string))
				{
				    format(string,sizeof string,"%f",result);
				} else format(string,sizeof string,"%s%f",string,result);
	        }
	    }
	}
    SendClientMessage(playerid,color,string);
    return 1;
}
#if defined KELLDWAYNE
stock FegyveresNPCk()
{
	printf("Fegyveres NPC csatlakozása!");
	ConnectNPCEx("[NPC]Dwayne_Harrison");
	printf("Fegyveres NPC csatlakozva!");
}
#endif
new NPCBeszelgetes[MAX_PLAYERS];
#define MAX_CCTVS 100
new TotalCCTVS;
new CameraName[MAX_CCTVS][32];
new Float:CCTVLA[MAX_PLAYERS][3];
new Float:CCTVLAO[MAX_CCTVS][3];
new Float:CCTVRadius[MAX_PLAYERS];
new Float:CCTVDegree[MAX_PLAYERS] = 0.0;
new Float:CCTVCP[MAX_CCTVS][4];
new CCTVEgyeb[MAX_CCTVS][2];
new CurrentCCTV[MAX_PLAYERS] = -1;
enum LP
{
	Float:LX,
	Float:LY,
	Float:LZ,
	Float:LA,
	LInterior
}
new LastPos[MAX_PLAYERS][LP];

new VasNala[MAX_PLAYERS];
new VasPlayerID[MAX_PLAYERS];
new KocsinObject[MAX_VEHICLES] = 0;
new KocsinObject1[MAX_VEHICLES] = 0;
new KocsinObject2[MAX_VEHICLES] = 0;
new KocsinObject3[MAX_VEHICLES] = 0;
new KocsinObject4[MAX_VEHICLES] = 0;
new KocsinDarab[MAX_VEHICLES] = 0;

new Alvany[MAX_VEHICLES] = 0;
new Mosogep[MAX_VEHICLES] = 0;
new Tv[MAX_VEHICLES] = 0;
new Radiator[MAX_VEHICLES] = 0;
new Video[MAX_VEHICLES] = 0;
new KoicsraObject[14][MAX_VEHICLES];
#define MAX_VAS 50
enum vas
{
	vasVasID,
	vasVan,
	Float:Vasx,
	Float:Vasy,
	Float:Vasz,
	Float:vasrz,
	vasModelID,
	vasObject
}
new Vas[MAX_VAS][vas];
enum vasenum { Float:xx,Float:yy,Float:zz,Float:rzz }

new vasak[MAX_VAS][vasenum] = {
{762.1080,-1065.6942,24.4188,92.7342},
{691.8754,-1216.9640,16.8495,119.6811},
{649.3745,-1327.2660,13.5202,95.5542},
{620.9807,-1380.8342,13.7058,171.0683},
{818.3467,-1413.9088,13.4974,271.3359},
{1052.9647,-1416.9177,13.5433,242.1957},
{1255.8369,-1429.6613,13.5275,197.7020},
{1471.6886,-1447.8542,13.5469,243.1358},
{1626.6896,-1432.7802,13.5469,255.3559},
{1705.0315,-1434.9733,13.5469,279.4828},
{1813.2601,-1604.5002,13.5313,158.2217},
{1827.3156,-1842.0669,13.5781,192.3753},
{1883.6542,-1925.2560,13.5469,240.3158},
{1900.3248,-1925.8528,13.5469,268.2028},
{1926.3112,-1925.5354,13.5469,268.2028},
{1914.2366,-1787.7056,13.3906,257.5494},
{1924.0974,-1788.9448,13.3906,257.5494},
{2032.6669,-1678.6871,13.5469,251.9095},
{2007.5881,-1635.4664,13.5469,343.7169},
{2075.0581,-1623.7247,13.5469,112.7881},
{2075.3770,-1691.3698,13.5547,180.1555},
{2128.5259,-1732.5236,13.5533,153.5219},
{2127.7576,-1740.2650,13.5661,153.5219},
{2173.0276,-1792.4934,13.3630,99.6281},
{2155.8811,-1794.3590,13.3582,101.8214},
{2226.4983,-1784.8455,13.5646,335.2569},
{2300.2285,-1757.1959,13.5469,273.7226},
{2406.2310,-1759.6705,13.5405,251.9820},
{2457.6660,-1762.4203,13.5842,334.0036},
{2449.3135,-1666.7229,13.4760,49.8309},
{2414.7883,-1652.4539,13.5267,86.8046},
{2362.3027,-1652.9863,13.5469,88.9980},
{2292.0781,-1651.9395,14.9335,89.6246},
{2246.2273,-1649.5341,15.4784,71.7645},
{2135.0073,-1410.2930,23.9868,359.8252},
{2099.9077,-1377.2617,23.9856,51.7109},
{2080.2468,-1179.5259,23.8285,10.0372},
{2046.3400,-1127.8411,24.1866,166.4645},
{1897.5707,-1129.0134,24.4162,353.9845},
{2033.0256,-976.6140,40.6397,310.1899},
{2196.1765,-1003.5544,62.4769,247.8360},
{2275.1455,-1075.4270,47.6896,217.1290},
{2434.8438,-1190.9891,36.2344,226.8425},
{2563.4573,-1269.3918,46.1310,169.1885},
{2564.0918,-1428.5609,24.0270,163.2352},
{2678.8997,-1542.2272,25.2572,200.5222},
{2746.3401,-1648.7507,13.2666,225.2758},
{2819.1387,-1624.3934,11.0788,24.7640},
{2825.2139,-1535.2960,11.0938,345.5970},
{2823.2368,-1467.2922,16.2500,1.2638}
};


new Float:CPbe[MAX_PLAYERS][3];
new Lefagyasztva[MAX_PLAYERS],Warning[MAX_PLAYERS],AlapVWje[MAX_PLAYERS];
new Bejelzett[MAX_PLAYERS];
new Hatarozas[MAX_PLAYERS];
new Insertalta[MAX_PLAYERS];
new Fishing[MAX_PLAYERS];
new HuzzadVaze[MAX_PLAYERS];
new CsomagtartoAFK[MAX_PLAYERS];
new AFKDialogShowing[MAX_PLAYERS];
new Float:MunkaCP[MAX_PLAYERS][3];
new ZeneHallgatHifibol[MAX_PLAYERS][32];
new ZenetHallgat[MAX_PLAYERS];
new LiveBy[MAX_PLAYERS];
new LiveRequest[MAX_PLAYERS];
new Live[MAX_PLAYERS];
new LiveConference;
new AccountID[MAX_PLAYERS];
new HifiZene[MAX_PLAYERS][256];
new PenztRabol[MAX_PLAYERS];
new SweetRadio[256];
new NPCFloodVedelem[MAX_PLAYERS];
enum e_label
{
	lVan,
	lszin,
	lText[128],
	Float:lx,
	Float:ly,
	Float:lz
};

new LabelInfo[MAX_LABEL][e_label];
new smkocsiid[MAX_PLAYERS];
new dmoff = 0;
new Kezetfogna[MAX_PLAYERS];
new KezetfognaStilus[MAX_PLAYERS];
new Megmotozna[MAX_PLAYERS];

#define MAX_KERELEM 1
#define KERELEM_UJJLENYOMAT 0

new Kerelem[MAX_PLAYERS][MAX_KERELEM];

new Szondaz[MAX_PLAYERS];
new CegInfo[MAX_CEG][ceginfo];
new CsipogoIdo[MAX_PLAYERS];
new BoostTicTimer[MAX_PLAYERS];
new MaxSpeed = 200;
new bool:SzereloDuty[MAX_PLAYERS];
new bool:EpiteszDuty[MAX_PLAYERS];
new k_veh;
//new k_elado;
//new k_vesz;
new k_ar;
new k_kereskedo;
new k_uzleteles;
new TilosOlni = 0;
new Shooted[MAX_PLAYERS][MAX_PLAYERS];
new KocsiUtolsoHasznalat[MAX_VEHICLES];
new c_Ujjlenyomatok[MAX_VEHICLES];
/*------------- [ Munka pozok ] ------------------*/

new Float:KukaPos[][4] =
{
	{2493.1001000, -1684.6999500, 13.1000000, 183.4650000},
	{2506.1999500, -1679.9000200, 13.2000000, 225.4560000},
	{2040.5000000, -1681.8994100, 13.2000000, 183.4610000},
	{1992.4000200, -1704.6999500, 13.2000000, 86.7320000},
	{2510.1001000, -1665.1999500, 13.2000000, 283.4460000},
	{2504.3000500, -1656.4000200, 13.2000000, 323.4420000},
	{2494.3999000, -1653.3000500, 13.1000000, 355.4380000},
	{2488.2998000, -1653.1992200, 13.1000000, 355.4350000},
	{2473.1999500, -1653.0999800, 13.1000000, 355.4350000},
	{2449.8000500, -1653.0999800, 13.0000000, 355.4350000},
	{2411.8000500, -1653.4000200, 13.2000000, 355.4350000},
	{2392.8999000, -1653.5999800, 13.2000000, 355.4350000},
	{2360.8000500, -1653.5000000, 13.2000000, 355.4350000},
	{2363.3000500, -1664.4000200, 13.2000000, 179.4350000},
	{2383.1001000, -1664.4000200, 13.2000000, 179.4340000},
	{2406.6001000, -1664.6999500, 13.2000000, 179.4340000},
	{2471.1001000, -1678.8000500, 13.2000000, 139.4340000},
	{2336.8999000, -1683.4000200, 13.2000000, 89.4340000},
	{2409.3999000, -1726.5000000, 13.3000000, 359.4290000},
	{2312.3000500, -1726.5000000, 13.2000000, 359.4290000},
	{2291.0000000, -1726.5000000, 13.2000000, 359.4290000},
	{2226.5000000, -1726.5000000, 13.2000000, 359.4290000},
	{2374.8999000, -1754.6999500, 13.2000000, 179.4290000},
	{2339.8000500, -1754.6999500, 13.2000000, 179.4230000},
	{2302.5000000, -1754.6999500, 13.2000000, 179.4230000},
	{2265.6001000, -1754.6999500, 13.2000000, 179.4230000},
	{2221.3000500, -1783.3000500, 13.2000000, 179.4230000},
	{2239.8999000, -1648.1999500, 15.1000000, 349.4230000},
	{2259.1001000, -1653.0999800, 15.1000000, 359.4200000},
	{2283.3000500, -1653.1999500, 14.8000000, 359.4180000},
	{2307.0000000, -1653.1999500, 14.2000000, 359.4180000},
	{2186.6001000, -1662.4000200, 14.6000000, 75.4180000},
	{2180.3999000, -1702.1999500, 13.3000000, 85.4160000},
	{2179.6001000, -1766.8000500, 13.2000000, 85.4130000},
	{2176.5000000, -1811.4000200, 13.2000000, 179.4130000},
	{2155.1001000, -1794.3000500, 13.2000000, 91.4130000},
	{2179.5000000, -1728.1999500, 13.2000000, 88.1350000},
	{2108.1999500, -1786.5999800, 13.2000000, 181.4070000},
	{2076.6001000, -1790.6999500, 13.2000000, 83.1560000},
	{2076.0000000, -1727.0996100, 13.2000000, 89.1540000},
	{2113.3994100, -1746.6992200, 13.2000000, 359.4070000},
	{2076.0000000, -1707.7998000, 13.2000000, 89.1490000},
	{2229.1999500, -1478.3000500, 23.5000000, 355.4130000},
	{2260.6999500, -1478.4000200, 22.7000000, 355.4130000},
	{2323.6992200, -1726.5000000, 13.2000000, 359.4290000},
	{2379.0996100, -1726.3994100, 13.2000000, 359.4290000},
	{2206.8999000, -1485.1999500, 23.6000000, 89.4290000},
	{2546.2998000, -1058.0996100, 69.2000000, 181.1590000},
	{2206.8000500, -1449.0000000, 23.6000000, 89.4230000},
	{2218.3000500, -1438.1999500, 23.6000000, 271.5410000},
	{2218.1001000, -1428.5999800, 23.6000000, 271.5380000},
	{2206.8000500, -1399.1999500, 23.6000000, 91.2880000},
	{2226.3999000, -1389.9000200, 23.7000000, 179.0350000},
	{2253.5000000, -1389.9000200, 23.7000000, 179.0330000},
	{2265.1999500, -1334.1999500, 23.6000000, 94.7830000},
	{2251.3999000, -1295.0999800, 23.6000000, 0.7790000},
	{2213.3999000, -1295.0999800, 23.6000000, 0.7750000},
	{2181.0000000, -1295.0000000, 23.6000000, 0.7750000},
	{2146.0000000, -1306.4000200, 23.7000000, 180.7750000},
	{2100.5000000, -1306.5999800, 23.6000000, 180.7690000},
	{2092.1999500, -1295.0999800, 23.6000000, 358.7690000},
	{2129.6001000, -1295.0999800, 23.6000000, 358.7640000},
	{2156.0000000, -1226.4000200, 23.6000000, 180.7640000},
	{2110.8999000, -1226.5000000, 23.6000000, 180.7640000},
	{2077.6001000, -1205.6999500, 23.6000000, 268.7640000},
	{2077.6001000, -1169.5999800, 23.5000000, 268.7590000},
	{2077.6001000, -1129.0999800, 23.6000000, 268.7590000},
	{2061.6001000, -1079.5000000, 24.6000000, 342.7590000},
	{2092.6001000, -1093.3000500, 24.8000000, 342.7570000},
	{2035.8000500, -1067.6999500, 24.4000000, 332.7570000},
	{2015.3000500, -1059.0000000, 24.3000000, 332.7540000},
	{1963.0999800, -1053.5999800, 24.0000000, 162.7540000},
	{1918.5999800, -1046.9000200, 23.7000000, 182.7510000},
	{1887.4000200, -1130.0000000, 23.8000000, 2.7470000},
	{1920.3000500, -1130.0000000, 24.6000000, 2.7470000},
	{1950.5000000, -1130.0999800, 25.4000000, 2.7470000},
	{1880.5000000, -1266.5999800, 13.2000000, 183.4970000},
	{2019.0000000, -1266.5999800, 23.6000000, 183.4940000},
	{2040.0999800, -1335.3000500, 23.6000000, 3.4940000},
	{1990.4000200, -1335.1999500, 23.6000000, 357.4880000},
	{1857.5999800, -1313.5000000, 13.2000000, 271.4840000},
	{1841.0999800, -1391.8000500, 13.2000000, 91.4830000},
	{1835.4000200, -1455.5000000, 13.2000000, 1.4780000},
	{1712.4000200, -1446.4000200, 13.2000000, 181.4780000},
	{1628.6999500, -1446.4000200, 13.2000000, 181.4720000},
	{1574.5000000, -1446.4000200, 13.2000000, 181.4720000},
	{1514.5000000, -1446.3000500, 13.2000000, 181.4720000},
	{1449.1999500, -1426.8000500, 13.2000000, 91.4720000},
	{1441.5000000, -1497.0999800, 13.2000000, 71.4670000},
	{1423.9000200, -1574.0000000, 13.2000000, 91.4660000},
	{1455.0000000, -1586.8000500, 13.2000000, 359.4610000},
	{1535.0000000, -1617.1999500, 13.2000000, 269.4560000},
	{1535.0000000, -1688.3000500, 13.2000000, 269.4510000},
	{1717.3000500, -1737.6999500, 13.2000000, 179.4510000},
	{1797.8000500, -1726.8000500, 13.2000000, 359.4450000},
	{1705.6999500, -1598.5999800, 13.2000000, 181.4340000},
	{1859.9000200, -1606.5999800, 13.2000000, 1.4340000},
	{1905.3000500, -1606.5000000, 13.2000000, 1.4280000},
	{1947.5000000, -1628.3000500, 13.2000000, 267.4280000},
	{1947.2998000, -1684.0000000, 13.2000000, 267.4240000},
	{2191.0000000, -1378.6999500, 23.7000000, 355.4350000},
	{2135.0000000, -1405.6999500, 23.7000000, 269.4350000},
	{2135.1999500, -1440.5999800, 23.6000000, 269.4340000},
	{2135.1001000, -1480.6999500, 23.6000000, 269.4340000},
	{2077.8000500, -1389.6999500, 23.6000000, 167.4340000},
	{2090.1001000, -1378.5999800, 23.7000000, 357.4320000},
	{2133.8000500, -1378.5999800, 23.6000000, 357.4290000},
	{2198.6999500, -1226.5999800, 23.6000000, 177.4290000},
	{2228.8000500, -1226.5999800, 23.6000000, 177.4290000},
	{2220.3999000, -1215.1999500, 23.6000000, 358.4290000},
	{2231.3999000, -1142.6999500, 25.5000000, 172.1770000},
	{2169.8999000, -1150.8000500, 24.6000000, 92.1720000},
	{2197.3000500, -1108.4000200, 24.9000000, 342.1700000},
	{2145.8999000, -1088.5000000, 24.5000000, 342.1690000},
	{2104.6001000, -1074.5999800, 25.3000000, 146.4190000},
	{2527.3000500, -1058.1999500, 69.2000000, 181.1590000},
	{2505.3000500, -1057.3000500, 69.1000000, 181.1590000},
	{2483.3000500, -1053.0000000, 67.0000000, 173.2030000},
	{2008.0999800, -989.2999900, 33.0000000, 46.6650000},
	{2187.1999500, -1003.2000100, 62.5000000, 346.6640000},
	{2218.6001000, -1027.8000500, 59.9000000, 156.6630000},
	{2292.5000000, -1080.5999800, 47.1000000, 156.6600000},
	{2402.3000500, -1033.6999500, 51.1000000, 26.6600000},
	{2361.6999500, -1067.4000200, 53.3000000, 26.6600000},
	{2437.1001000, -1039.4000200, 54.8000000, 181.1580000},
	{2473.8000500, -1026.0000000, 62.8000000, 351.1540000},
	{2637.1999500, -1080.0999800, 69.3000000, 91.1510000},
	{2637.1999500, -1115.9000200, 67.2000000, 91.1480000},
	{2609.1999500, -1189.4000200, 63.3000000, 177.1480000},
	{2548.6999500, -1189.5999800, 60.3000000, 177.1440000},
	{2461.8000500, -1194.9000200, 36.3000000, 177.1440000},
	{2439.6999500, -1189.4000200, 36.1000000, 177.1440000},
	{2445.5000000, -1273.3000500, 23.7000000, 87.1440000},
	{2445.3999000, -1302.0000000, 23.7000000, 87.1440000},
	{2445.5000000, -1337.8000500, 23.7000000, 87.1440000},
	{2445.3999000, -1373.3000500, 23.7000000, 87.1440000},
	{2445.3999000, -1417.5999800, 23.7000000, 87.1440000},
	{2517.1001000, -1432.4000200, 28.2000000, 267.1440000},
	{2517.1999500, -1407.3000500, 28.2000000, 267.1440000},
	{2517.3000500, -1378.3000500, 28.2000000, 267.1440000},
	{2517.5000000, -1346.0999800, 29.7000000, 267.1440000},
	{2570.1999500, -1067.6999500, 69.0000000, 260.9220000},
	{2555.1999500, -1092.0999800, 65.1000000, 204.3800000},
	{2522.8000500, -1101.5000000, 55.7000000, 182.1950000},
	{2471.3000500, -1098.5000000, 44.4000000, 177.0430000},
	{2403.0000000, -1099.5999800, 38.5000000, 189.2600000},
	{2430.1992200, -1095.5996100, 41.9000000, 181.3290000},
	{2434.1999500, -1141.4000200, 32.4000000, 1.8370000},
	{2377.3994100, -1144.3994100, 27.3000000, 2.0210000},
	{1992.0999800, -1639.0000000, 13.2000000, 89.1490000},
	{2075.8999000, -1622.9000200, 13.2000000, 89.1490000},
	{2076.1001000, -1652.1999500, 13.2000000, 89.1490000},
	{2007.1999500, -1632.1999500, 13.2000000, 270.0000000},
	{2086.6999500, -1602.6999500, 13.2000000, 359.8670000},
	{2007.3000500, -1660.0999800, 13.2000000, 269.9950000},
	{2016.8000500, -1602.6999500, 13.2000000, 359.8630000},
	{796.2000100, -1665.8000500, 13.2000000, 2.6090000},
	{804.7000100, -1705.5999800, 13.2000000, 90.0000000},
	{804.7000100, -1690.8000500, 13.2000000, 90.0000000},
	{764.5000000, -1753.0999800, 12.5000000, 271.9420000},
	{804.7000100, -1737.3000500, 13.2000000, 90.0000000},
	{795.0000000, -1763.5999800, 13.1000000, 0.0000000},
	{760.0000000, -1687.0000000, 3.9000000, 271.9390000},
	{402.6000100, -1166.9000200, 78.3000000, 326.7000000},
	{615.3994100, -1102.8994100, 46.5000000, 34.8820000},
	{566.8994100, -1134.2998000, 50.4000000, 34.8820000},
	{656.5999800, -1071.8000500, 48.1000000, 34.8820000},
	{472.0000000, -1176.5996100, 63.4000000, 14.2710000},
	{684.0999800, -1029.9000200, 50.7000000, 60.0000000},
	{314.0000000, -1194.5000000, 75.9000000, 33.8150000},
	{720.2000100, -997.2999900, 52.0000000, 235.0000000},
	{340.5996100, -1196.5000000, 76.2000000, 221.3200000},
	{626.0999800, -1117.1999500, 46.3000000, 212.9530000},
	{688.2999900, -1055.4000200, 49.6000000, 238.3190000},
	{866.7000100, -844.5000000, 77.0000000, 26.5030000},
	{788.5996100, -864.0996100, 60.3000000, 26.4990000},
	{830.5000000, -867.1992200, 68.5000000, 26.4990000},
	{719.7999900, -997.9000200, 52.0000000, 234.9980000},
	{1013.9000200, -776.5999800, 102.4000000, 9.0560000},
	{912.5000000, -835.6992200, 92.1000000, 26.4990000},
	{1087.3000500, -765.4000200, 108.2000000, 9.0530000},
	{872.2999900, -711.2999900, 105.3000000, 155.0000000},
	{1070.1999500, -778.5000000, 106.8000000, 182.8930000},
	{1020.9000200, -794.4000200, 101.7000000, 200.3320000},
	{974.5000000, -814.7000100, 97.3000000, 200.3300000},
	{959.5000000, -823.2000100, 96.0000000, 216.1870000},
	{922.5000000, -843.7000100, 93.2000000, 216.1830000},
	{857.0999800, -896.2000100, 64.4000000, 149.4530000},
	{915.2000100, -671.0000000, 116.9000000, 49.9990000},
	{873.2998000, -867.0000000, 77.2000000, 206.6640000},
	{941.2999900, -907.5000000, 75.6000000, 63.8240000},
	{840.0000000, -932.6992200, 54.5000000, 63.8200000},
	{871.7000100, -711.0000000, 105.3000000, 154.9950000},
	{898.7000100, -769.2999900, 97.3000000, 200.0000000},
	{1246.8000500, -737.5999800, 94.6000000, 200.3320000},
	{1538.3000500, -844.2999900, 64.1000000, 263.1100000},
	{1487.0999800, -699.7999900, 94.4000000, 9.0530000},
	{1276.3994100, -616.5996100, 102.7000000, 206.6690000},
	{1522.8000500, -802.9000200, 72.5000000, 270.0000000},
	{1520.7998000, -765.6992200, 79.4000000, 312.0450000},
	{1470.6999500, -898.4000200, 54.5000000, 180.0000000},
	{1522.0000000, -887.9000200, 60.7000000, 224.8290000},
	{1419.6999500, -877.4000200, 48.9000000, 179.7740000},
	{1395.4684, -1653.9401, 13.2395, 180.0}
};

new Float:KamionUtak[][3] =
{
	//{95.4179, -153.4709, 3.1641},
	{312.9381, -229.4495, 2.1201},
	{-1860.4518, -1723.7980, 21.4542}, // k1
	{-2005.3705, -2413.9453, 30.3295}, // k2
	{1875.5302, -2298.4136, 13.2513}, // k3
	{2273.8643, -2342.3677, 13.2510}, // k4
	{586.9164, 901.6632, -44.5174}, // k5
	{-333.7087, 1528.3698, 75.0635}, // k6
	{1482.8556, 1045.0406, 10.5247} // k8
};

new Float:TisztitoUtak[][3] =
{
	{1661.9652, -1438.6840, 13.0078},
	{1444.9501, -1495.7173, 12.9992},
	{1427.4492, -1685.2312, 13.0078},
	{1386.8391, -1793.8298, 13.0078},
	{1420.7438, -1874.6931, 13.0077},
	{1648.3740, -1874.9543, 13.0075},
	{1691.7628, -1760.0233, 13.0111},
	{1748.9199, -1734.7452, 13.0147},
	{1824.2068, -1672.8546, 13.0071},
	{1894.7382, -1615.0427, 13.0072},
	{1939.3815, -1693.7683, 13.0077}
};

new Float:MowerUtak[][3] =
{
	{1946.6976,-1232.3304,19.1645},
	{1914.1251,-1229.4828,16.9163},
	{1902.2960,-1193.5631,21.4027},
	{1889.8219,-1156.6915,23.7686},
	{1969.0184,-1157.7070,20.5390},
	{1996.8793,-1164.1934,20.4492},
	{2045.7439,-1150.4449,23.3921},
	{2051.8723,-1181.8066,23.1990},
	{2035.3959,-1196.5956,22.0381},
	{2031.6428,-1237.9078,22.0770}
};

new Float:ATMPoz[][3] =
{
    {1305.4603,-1368.6622,13.5503},
	{1547.8135,-1680.2061,13.5597},
	{1929.3503,-1778.6326,13.5469},
	{566.2653,-1291.8984,17.2482},
	{768.9403,-1386.3256,13.6720}
};

//munka definek - számozást mindig 20-tól kezd!
#define MUNKA_KAMION        20
#define MUNKA_FAVAGO   		21
#define MUNKA_KUKA    		22
#define MUNKA_UTTISZTITO 	23
#define MUNKA_FEGYVER  		24
#define MUNKA_FARMER		25
#define MUNKA_DROG			26
#define MUNKA_HACK			27
#define MUNKA_ARU			28
#define MUNKA_PILOTA        29
#define MUNKA_PENZSZALLITO  30
#define MUNKA_MOWER 		31
#define MUNKA_BANYASZ 		32

#define MAX_MUNKA			13

new dolgozik[MAX_PLAYERS];
//Munka define - Név, Szükséges tehetség pont - Legális? (1 = igen | 0 = nem)   - MAX MUNKA IDÕNAPONTA
new Munkak[ MAX_MUNKA ][5][20] =
{
	{MUNKA_KAMION, 			"Kamionos", 	150, 	1, 3*(60*60)},
	{MUNKA_FAVAGO, 			"Favágó", 		100, 	1, 3*(60*60)},
	{MUNKA_KUKA, 			"Kukás", 		0, 		1, 1*(60*60)},
	{MUNKA_UTTISZTITO, 		"Úttisztító", 	0, 		1, 1*(60*60)},
	{MUNKA_FEGYVER,			"Fegyvermester",0,		0, 0},
	{MUNKA_FARMER,			"Farmer",		80,		1, 0},
	{MUNKA_DROG,			"Drog díler",	0,		0, 0},
	{MUNKA_HACK, 			"Hacker",		0,		0, 0},
	{MUNKA_ARU, 			"Árúszállító",	300,	1, 2*(60)},
	{MUNKA_PILOTA,			"Pilóta",		600,	1, 1*(60)},
	{MUNKA_PENZSZALLITO,    "Pénzszállító",	400,    1, 1*(60)},
	{MUNKA_MOWER,    		"Fûnyíró",		0,      1, 1*(60)},
 	{MUNKA_BANYASZ,         "Bányász",      750,	1, 0}
};

//Név - ID - Töltény szám - Ára
new Fegyver_Lista[7][4][32] =
{
	{"Katana", 					8,		1,		360},
	{"9mm Pisztoly",			22,		100,	440},
	{"Hangtompítós Pisztoly",	23,		70,		780},
	{"Sörétes",					25,		50,		1000},
	{"Desert Eagle",			24,		120,	1200},
	{"MP5",						29,		150,	1200},
	{"Golyóálló mellény",		NINCS,	100,	1000}
};

/*--------------- Race System by Martin ---------------*/
#define MAX_RACE_CP 50 //max ennyi cp lehet
#define MAX_RACE 25//max(slot) betöltött pálya

#define RACE_START_CP  -1
#define RACE_CEL_CP    -2
#define RACE_VEGE		4
#define RACE_INDUL 		2
#define RACE_MEGY 		3//elindult
#define RACE_EPIT		5

enum erace
{
	bool:rVan,
	rNev[32],
	rIndito[32],
	Float:rPosx[MAX_RACE_CP],
	Float:rPosy[MAX_RACE_CP],
	Float:rPosz[MAX_RACE_CP],
	Float:rCelPos[3],
	rCPdb,
	rStatusz,
	rNevezes,
	Float:rSzorzo,
	rIdo,
	rNyeremeny,
	rBentvan,
	rIdoHatra
};

enum eprace
{
	rEpites[2],
	rVersenyen,
	rVersenyCP,
	rVersenyCPKov,
	rPIdo
};

new Race[MAX_RACE][erace];
new PlayerRace[MAX_PLAYERS][eprace];

enum pDrogh
{
	Float:pDrogX,
	Float:pDrogY,
	Float:pDrogZ,
	Float:pDrogA,
	bool:pFordit,
	bool:pEnged[3]
}

enum botInfo
{
	npcID,
	npcRabolva,
	npcMikor,
	bool:npcAnim,
	bool:npcRabolas,
	bool:npcSikerult,
	bool:npcFolyamatban,
	bool:npcRabolhato,
	bool:npcHivhat,
	npcKicsoda,
	npcArea,
	npcPenz,
	Timer:npcTimer
}

/* -------------- Változók --------------*/
//Matteo Változok
// new debugmode = false;	//Boost rendszer debug

new Float:PozTowtrack[MAX_PLAYERS][4];
new SpeedCameras[CAMERA_LIMIT][_camera],loaded_cameras = 0;

new BoltRablas[30][botInfo];
new Float:PDrogHelyek[][pDrogh] =
{
	{1962.67908, -2369.00317, 12.75179, 0.00000, false, {true, true, true}}, //0 - 0, 1, 2
	{1962.65979, -2363.67749, 12.75179, 0.00000, false, {true, true, true}}, //1 - 3, 4, 5
	{1962.67017, -2366.33008, 12.75179, 0.00000, false, {true, true, true}}, //2 - 6, 7, 8
	{1961.69446, -2361.97827, 12.75180, 90.00000, false, {false, false, true}}, //3 - 9, 10, 11
	{1961.74194, -2370.64990, 12.75180, 90.00000, true, {false, false, true}}, //4 - 12, 13, 14
	{1959.01416, -2361.97168, 12.75180, 90.00000, false, {true, true, true}}, //5 - 15, 16, 17
	{1956.69128, -2361.97266, 12.75180, 90.00000, false, {true, true, true}}, //6 - 18, 19, 20
	{1959.09204, -2370.65503, 12.75180, 90.00000, true, {true, true, true}}, //7 - 21, 22, 23
	{1956.59192, -2370.64697, 12.75180, 90.00000, true, {true, true, true}}, //8 - 24, 25, 26
	{1958.89697, -2364.96899, 12.75180, 90.00000, true, {true, true, true}}, //9 - 27, 28, 29
	{1960.56262, -2365.94409, 12.75179, 0.00000, true, {true, true, true}}, //10 - 30, 31, 32
	{1958.89417, -2366.93237, 12.75180, 90.00000, false, {true, true, true}}, //11 - 33, 34, 35
	{1954.12341, -2362.83667, 12.75179, 0.00000, true, {true, true, true}}, //12 - 36, 37, 38
	{1954.12878, -2365.50488, 12.75179, 0.00000, true, {true, true, true}}, //13 - 39, 40, 41
	{1957.18030, -2365.94946, 12.75179, 0.00000, false, {true, true, true}} //14 - 42, 43, 44
};

new Float:PDrogHely[45][4];

new RandomDrogSz[][] =
{
	"Szevasz testvér, mi kellene?!",
	"Csõ, mi a szitu?!",
	"Igen?",
	"Cucc kellene?!",
	"Jóféle magjaim vannak... Kellenek?!"
};

enum boltBoto
{
	Float:bBotPosX,
	Float:bBotPosY,
	Float:bBotPosZ,
	Float:bBotA,
	bool:bBotRob
};

new BoltBot[][boltBoto] = // NPC SPAWN
{
	{-28.9787,-186.8230,1003.5469,354.8397, true}, // Déli
	{0.0, 0.0, 0.0, 0.0, true}, // Északi bolt - Banknál
	{0.0, 0.0, 0.0, 0.0, true}, // Északi benzinkút
	{948.6218, -1738.6459, 13.5546, 178.8210, true},//Bútorbolt
	{665.4298, -1708.1017, 14.6823, 81.6866, true},//Ocean store
	{1225.8446, -1018.7816, 32.6067, 358.5959, true},//Gyógyszertár
	{2775.9172, -2016.4272, 13.5547, 359.2225, true},//Tengerpart melletti bolt
	{3899.7964, -1805.9263, 6.9913, 352.8622, true},//Luxus szigeti
	{1159.5667,-1437.7651,15.7981,88.2701,true},//Pláza
	{1099.7758,-1443.4526,15.7981,87.6667,true}//Pláza ruhás npc
};
enum boltInfo
{
	Float:boltX,
	Float:boltY,
	Float:boltZ
}
#define BOLTOK 7 //Boltok, ahol a kosár rencer van érvényben
new Boltok[BOLTOK][boltInfo] = // Fizetési pozició
{
	{1315.7621,-880.5552,39.5781}, // északi bolt
	{994.4250,-926.5521,42.1797},//Északi benzinkút
	{663.6802,-1707.7595,14.6823}, //oceanstore
	{-28.7029,-185.1324,1003.5469}, // /délibenzinkút
	{3899.9551, -1804.0919, 6.9913}, // /luxusbolt
	{1157.8955,-1438.0326,15.7981}, // Pláza /vesz
	{2776.2883,-2014.7388,13.5547}//tengerparti
};
#define MAX_POLC 11
new Float:BoltKosarak[BOLTOK][3] =
{
    { 0.0, 0.0, 0.0 }, // északi bolt
    { 0.0, 0.0, 0.0 },//Északi benzinkút
    { 0.0, 0.0, 0.0 }, //oceanstore
    { -24.3652,-186.3461,1003.5469 }, // /délibenzinkút
    { 0.0, 0.0, 0.0 },
    { 0.0, 0.0, 0.0 },
    { 0.0, 0.0, 0.0 }
};
new Float:BoltPolcok[BOLTOK][MAX_POLC][3] =
{
        { // Északi
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 }
        },
        { // Északi benzinkút
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 }
        },
        { // Oceanstore
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 }
        },
        { //Déli
            { -34.2459,-183.0492,1003.5469 },
                { -34.2454,-173.0796,1003.5469 },
                { -30.2461,-176.3122,1003.5469 },
                { -26.2301,-180.5544,1003.5469 },
                { -26.2224,-174.7158,1003.5469 },
                { -19.8085,-169.4958,1003.5469 },
                { -11.4791,-169.9151,1003.5469 },
                { -9.2467,-173.7378,1003.5469 },
                { -4.3524,-175.9059,1003.5469 },
                { -4.3138,-170.0901,1003.5469 },
                { -17.8933,-182.8443,1003.5469 }
        },
        { // Oceanstore
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 }
        },
        { // Oceanstore
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 }
        },
        { // Oceanstore
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0 }
        }
};
//24 karakternél ne legyen több!
new BoltNevek[10][24] =
{
	{"Déli benzinkút"},
	{"Északi bolt"},
	{"Északi benzinkút"},
	{"Bútorbolt"},
	{"Ocean Store"},
	{"Gyógyszertár"},
	{"Tengerparti bolt"},
	{"Luxus szigeti bolt"},
	{"Pláza"},
	{"Pláza ruhabolt"}
};

new Float:RuhaBoltok[][boltInfo] =
{
	{207.0425, -129.4797, 1003.5078},
	{1098.1354,-1443.6396,15.7981} //Pláza ruhabolt
};

enum aratasInfo
{
	aratasID,
	Float:aratasX,
	Float:aratasY,
	Float:aratasZ,
	Float:aratasRX,
	Float:aratasRY,
	Float:aratasRZ,
	bool:aratasLearatva
};

new Aratas_Objectek[][aratasInfo] =
{
	//{855, -162.53, 76.32, 2.11, 0.00, 0.00, 0.00, false}
	{855, -306.64697, -1429.20374, 13.29575, 0.00000, 0.00000, 7.11789, false},
	{855, -314.86160, -1428.65430, 13.72681, 0.00000, 0.00000, 7.19348, false},
	{855, -329.37921, -1427.20239, 14.19361, 0.00000, 0.00000, 7.04468, false},
	{855, -322.24020, -1428.93469, 13.23717, 0.00000, 0.00000, 6.86697, false},
	{855, -298.25534, -1429.94641, 13.68967, 0.00000, 0.00000, 7.45258, false},
	{855, -289.19232, -1429.99805, 12.11897, 0.00000, 0.00000, 7.64987, false},
	{855, -299.19736, -1337.72266, 8.79378, 0.00000, 0.00000, 0.00000, false},
	{855, -321.95514, -1337.25110, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -314.89258, -1337.51941, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -307.92767, -1336.95471, 9.03288, 0.00000, 0.00000, 0.00000, false},
	{855, -290.82730, -1337.26721, 8.19603, 0.00000, 0.00000, 0.00000, false},
	{855, -281.73874, -1336.77869, 7.71782, 0.00000, 0.00000, 0.00000, false},
	{855, -322.37183, -1348.51331, 9.80996, 0.00000, 0.00000, 0.22194, false},
	{855, -299.65915, -1348.50427, 9.80996, 0.00000, 0.00000, 0.21973, false},
	{855, -315.16470, -1348.70740, 9.80996, 0.00000, 0.00000, 0.22413, false},
	{855, -308.46811, -1348.31226, 9.80996, 0.00000, 0.00000, 0.22634, false},
	{855, -291.30627, -1348.11255, 9.80996, 0.00000, 0.00000, 0.22875, false},
	{855, -282.25034, -1347.70667, 9.80996, 0.00000, 0.00000, 0.23097, false},
	{855, -309.08237, -1326.63440, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -323.12161, -1326.82788, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -316.07062, -1326.99133, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -300.38739, -1327.08887, 9.01296, 0.00000, 0.00000, 0.00000, false},
	{855, -292.02917, -1326.52795, 8.73401, 0.00000, 0.00000, 0.00000, false},
	{855, -282.95258, -1325.93176, 8.57461, 0.00000, 0.00000, 0.00000, false},
	{855, -283.66110, -1358.80225, 9.80996, 0.00000, 0.00000, 13.76057, false},
	{855, -292.70325, -1359.09802, 9.80996, 0.00000, 0.00000, 13.62439, false},
	{855, -301.11121, -1358.71167, 9.80996, 0.00000, 0.00000, 13.35141, false},
	{855, -309.88092, -1358.82202, 9.80996, 0.00000, 0.00000, 13.48934, false},
	{855, -323.86630, -1358.27722, 9.80996, 0.00000, 0.00000, 13.09487, false},
	{855, -316.60437, -1358.96899, 9.72965, 0.00000, 0.00000, 13.22579, false},
	{855, -284.94220, -1367.71240, 9.80996, 0.00000, 0.00000, 13.76057, false},
	{855, -294.01535, -1368.10535, 9.80996, 0.00000, 0.00000, 13.62439, false},
	{855, -302.41809, -1367.80042, 9.80996, 0.00000, 0.00000, 13.35141, false},
	{855, -311.12811, -1367.96887, 10.50874, 0.00000, 0.00000, 13.48934, false},
	{855, -318.03342, -1368.39270, 10.05089, 0.00000, 0.00000, 13.22579, false},
	{855, -325.17297, -1367.55884, 10.36142, 0.00000, 0.00000, 13.09487, false},
	{855, -219.98224, -1422.97461, 4.31611, 0.00000, 0.00000, 4.32000, false},
	{855, -230.05812, -1425.18677, 5.36864, 0.00000, 0.00000, 8.82000, false},
	{855, -207.74107, -1421.32861, 3.88116, 0.00000, 0.00000, 0.00000, false},
	{855, -323.48547, -1316.61731, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -316.29694, -1315.70178, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -309.46518, -1315.62390, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -300.61569, -1315.91907, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -292.25784, -1315.48865, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -283.21564, -1314.97656, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -274.76157, -1337.06934, 7.49140, 0.00000, 0.00000, 0.00000, false},
	{855, -277.15271, -1428.10718, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -267.34738, -1428.45862, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -256.87744, -1426.31763, 8.68096, 0.00000, 0.00000, 0.00000, false},
	{855, -248.38100, -1426.44922, 7.07950, 0.00000, 0.00000, 0.00000, false},
	{855, -239.18919, -1426.52698, 5.91344, 0.00000, 0.00000, 0.00000, false},
	{855, -185.31668, -1307.64026, 6.47402, 0.00000, 0.00000, 0.00000, false},
	{855, -177.64938, -1308.20313, 5.29068, 0.00000, 0.00000, 0.00000, false},
	{855, -169.92633, -1308.53943, 4.97395, 0.00000, 0.00000, 0.00000, false},
	{855, -162.65797, -1308.33984, 4.12490, 0.00000, 0.00000, 0.00000, false},
	{855, -161.87926, -1301.67542, 3.43576, 0.00000, 0.00000, 0.00000, false},
	{855, -170.31363, -1301.60791, 4.22832, 0.00000, 0.00000, 0.00000, false},
	{855, -194.55492, -1307.44446, 6.63625, 0.00000, 0.00000, 0.00000, false},
	{855, -275.87204, -1314.98022, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -268.45834, -1314.02173, 10.38227, 0.00000, 0.00000, 0.00000, false},
	{855, -261.36478, -1313.93359, 10.58667, 0.00000, 0.00000, 0.00000, false},
	{855, -252.29776, -1314.20752, 11.19986, 0.00000, 0.00000, 0.00000, false},
	{855, -243.70793, -1313.73328, 11.20667, 0.00000, 0.00000, 0.00000, false},
	{855, -234.42395, -1313.19556, 11.40407, 0.00000, 0.00000, 0.00000, false},
	{855, -226.99498, -1312.66272, 10.84158, 0.00000, 0.00000, 8.82000, false},
	{855, -217.02379, -1312.59253, 9.64040, 0.00000, 0.00000, 4.32000, false},
	{855, -205.02991, -1314.00403, 8.31539, 0.00000, 0.00000, 0.00000, false},
	{855, -188.12070, -1317.68274, 7.11181, 0.00000, 0.00000, 0.00000, false},
	{855, -177.70078, -1318.57935, 6.25014, 0.00000, 0.00000, 0.00000, false},
	{855, -168.07896, -1317.93835, 4.88554, 0.00000, 0.00000, 0.00000, false},
	{855, -172.37157, -1328.68323, 4.40071, 0.00000, 0.00000, 0.00000, false},
	{855, -180.86247, -1328.71448, 6.76434, 0.00000, 0.00000, 0.00000, false},
	{855, -189.70036, -1326.93994, 8.37920, 0.00000, 0.00000, 0.00000, false},
	{855, -199.47148, -1325.16846, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -209.02814, -1322.99609, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -218.11020, -1322.94324, 9.89529, 0.00000, 0.00000, 4.32000, false},
	{855, -228.26874, -1323.48181, 9.68710, 0.00000, 0.00000, 8.82000, false},
	{855, -235.67494, -1323.88501, 10.20461, 0.00000, 0.00000, 0.00000, false},
	{855, -244.93672, -1324.29236, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -253.50461, -1324.64001, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -262.54993, -1324.24146, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -269.62268, -1324.20544, 9.42351, 0.00000, 0.00000, 0.00000, false},
	{855, -277.01556, -1325.04187, 8.61375, 0.00000, 0.00000, 0.00000, false},
	{855, -170.86404, -1337.75391, 4.24007, 0.00000, 0.00000, 0.00000, false},
	{855, -179.37630, -1338.44934, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -187.72189, -1337.96301, 6.89945, 0.00000, 0.00000, 0.00000, false},
	{855, -197.46939, -1336.29895, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -207.00209, -1334.23596, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -216.05983, -1334.29248, 9.89529, 0.00000, 0.00000, 4.32000, false},
	{855, -226.19385, -1334.94141, 10.30067, 0.00000, 0.00000, 8.82000, false},
	{855, -233.57130, -1335.43848, 9.20574, 0.00000, 0.00000, 0.00000, false},
	{855, -242.80383, -1335.93835, 8.42794, 0.00000, 0.00000, 0.00000, false},
	{855, -251.34204, -1336.38037, 8.42583, 0.00000, 0.00000, 0.00000, false},
	{855, -260.35718, -1336.07666, 7.94545, 0.00000, 0.00000, 0.00000, false},
	{855, -267.15939, -1336.55591, 7.35049, 0.00000, 0.00000, 0.00000, false},
	{855, -166.80519, -1349.87866, 3.43980, 0.00000, 0.00000, 0.00000, false},
	{855, -174.80083, -1349.52075, 4.84353, 0.00000, 0.00000, 0.00000, false},
	{855, -183.23302, -1349.68665, 4.62183, 0.00000, 0.00000, 0.00000, false},
	{855, -192.00133, -1348.03662, 5.15219, 0.00000, 0.00000, 0.00000, false},
	{855, -201.70125, -1346.38745, 8.09883, 0.00000, 0.00000, 0.00000, false},
	{855, -211.18564, -1344.34094, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -220.19392, -1344.41516, 9.88057, 0.00000, 0.00000, 4.32000, false},
	{855, -230.27789, -1345.08167, 8.10200, 0.00000, 0.00000, 8.82000, false},
	{855, -237.60419, -1345.59753, 7.88965, 0.00000, 0.00000, 0.00000, false},
	{855, -246.78519, -1346.11804, 8.59287, 0.00000, 0.00000, 0.00000, false},
	{855, -255.27040, -1346.58032, 9.03969, 0.00000, 0.00000, 0.00000, false},
	{855, -264.23203, -1346.29797, 8.28297, 0.00000, 0.00000, 0.00000, false},
	{855, -273.13199, -1346.55872, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -275.61887, -1356.80676, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.14691, -1356.40417, 9.12162, 0.00000, 0.00000, 0.00000, false},
	{855, -256.74585, -1356.41809, 9.26820, 0.00000, 0.00000, 0.00000, false},
	{855, -248.24803, -1355.84851, 9.25128, 0.00000, 0.00000, 0.00000, false},
	{855, -239.05486, -1355.22278, 8.97264, 0.00000, 0.00000, 0.00000, false},
	{855, -231.71616, -1354.60229, 6.02212, 0.00000, 0.00000, 8.82000, false},
	{855, -221.63998, -1353.83301, 7.37718, 0.00000, 0.00000, 4.32000, false},
	{855, -212.59943, -1353.65625, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -203.10312, -1355.60266, 6.46525, 0.00000, 0.00000, 0.00000, false},
	{855, -193.39127, -1357.15161, 5.43760, 0.00000, 0.00000, 0.00000, false},
	{855, -183.36546, -1358.25293, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -276.05414, -1364.64648, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.58655, -1364.32178, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -257.18997, -1364.41479, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -248.69658, -1363.92566, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -239.50787, -1363.38013, 10.21516, 0.00000, 0.00000, 0.00000, false},
	{855, -232.17371, -1362.84167, 8.94159, 0.00000, 0.00000, 8.82000, false},
	{855, -222.10208, -1362.15442, 7.07751, 0.00000, 0.00000, 4.32000, false},
	{855, -213.06621, -1362.06116, 7.44995, 0.00000, 0.00000, 0.00000, false},
	{855, -203.57448, -1364.09143, 6.10022, 0.00000, 0.00000, 0.00000, false},
	{855, -193.86734, -1365.72559, 5.34799, 0.00000, 0.00000, 0.00000, false},
	{855, -183.84624, -1366.91248, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -276.00192, -1374.97461, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.53387, -1374.75269, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -257.13678, -1374.95007, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -248.64287, -1374.56653, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -239.45363, -1374.12720, 10.21516, 0.00000, 0.00000, 0.00000, false},
	{855, -232.11890, -1373.69653, 9.25093, 0.00000, 0.00000, 8.82000, false},
	{855, -222.04671, -1373.11755, 7.90977, 0.00000, 0.00000, 4.32000, false},
	{855, -213.01035, -1373.13403, 6.47204, 0.00000, 0.00000, 0.00000, false},
	{855, -203.51797, -1375.27502, 5.98526, 0.00000, 0.00000, 0.00000, false},
	{855, -193.81027, -1377.02100, 5.01530, 0.00000, 0.00000, 0.00000, false},
	{855, -183.78856, -1378.32080, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -275.95212, -1384.82776, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.48364, -1384.70398, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -257.08603, -1385.00098, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -248.59161, -1384.71802, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -239.40187, -1384.38013, 10.21516, 0.00000, 0.00000, 0.00000, false},
	{855, -232.06660, -1384.05212, 9.68710, 0.00000, 0.00000, 8.82000, false},
	{855, -221.99388, -1383.57654, 9.89529, 0.00000, 0.00000, 4.32000, false},
	{855, -212.95705, -1383.69775, 6.65804, 0.00000, 0.00000, 0.00000, false},
	{855, -203.46408, -1385.94434, 5.97616, 0.00000, 0.00000, 0.00000, false},
	{855, -193.75581, -1387.79700, 6.89945, 0.00000, 0.00000, 0.00000, false},
	{855, -183.73355, -1389.20447, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -275.89578, -1395.96692, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.42679, -1395.95386, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -257.02866, -1396.36340, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -248.53371, -1396.19458, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -239.34338, -1395.97095, 10.21516, 0.00000, 0.00000, 0.00000, false},
	{855, -232.00749, -1395.75952, 9.02375, 0.00000, 0.00000, 8.82000, false},
	{855, -221.93416, -1395.40051, 7.69654, 0.00000, 0.00000, 4.32000, false},
	{855, -212.89680, -1395.64001, 6.94282, 0.00000, 0.00000, 0.00000, false},
	{855, -203.40312, -1398.00610, 6.36567, 0.00000, 0.00000, 0.00000, false},
	{855, -193.69429, -1399.97937, 5.18662, 0.00000, 0.00000, 0.00000, false},
	{855, -183.67131, -1401.50867, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -275.84372, -1406.25586, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.37430, -1406.34509, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -256.97568, -1406.85864, 10.00597, 0.00000, 0.00000, 0.00000, false},
	{855, -248.48021, -1406.79517, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -239.28937, -1406.67700, 10.21516, 0.00000, 0.00000, 0.00000, false},
	{855, -232.23358, -1405.67322, 7.97361, 0.00000, 0.00000, 8.82000, false},
	{855, -221.87898, -1406.32190, 6.58334, 0.00000, 0.00000, 4.32000, false},
	{855, -212.84117, -1406.67078, 5.90974, 0.00000, 0.00000, 0.00000, false},
	{855, -202.76733, -1407.46106, 4.53198, 0.00000, 0.00000, 0.00000, false},
	{855, -194.48515, -1412.55237, 2.70386, 0.00000, 0.00000, 0.00000, false},
	{855, -183.61382, -1412.87354, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -275.78766, -1417.34863, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.31775, -1417.54846, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -256.91855, -1418.17407, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -248.53246, -1417.74158, 7.36729, 0.00000, 0.00000, 0.00000, false},
	{855, -239.28447, -1417.22217, 6.45978, 0.00000, 0.00000, 0.00000, false},
	{855, -231.00641, -1415.57788, 6.21420, 0.00000, 0.00000, 8.82000, false},
	{855, -221.24153, -1414.45825, 5.13103, 0.00000, 0.00000, 4.32000, false},
	{855, -209.93719, -1413.65125, 2.82021, 0.00000, 0.00000, 0.00000, false},
	{855, -193.23088, -1420.16187, 2.70516, 0.00000, 0.00000, 0.00000, false},
	{855, -325.98956, -1377.20532, 11.03120, 0.00000, 0.00000, 7.04468, false},
	{855, -318.83188, -1378.41858, 11.36426, 0.00000, 0.00000, 6.86697, false},
	{855, -311.43451, -1377.61267, 11.17249, 0.00000, 0.00000, 7.19348, false},
	{855, -303.20074, -1377.62903, 10.68227, 0.00000, 0.00000, 7.11789, false},
	{855, -294.79022, -1377.83667, 10.22281, 0.00000, 0.00000, 7.45258, false},
	{855, -285.70929, -1377.34644, 9.96774, 0.00000, 0.00000, 7.64987, false},
	{855, -327.58014, -1388.76428, 11.03120, 0.00000, 0.00000, 7.04468, false},
	{855, -320.43823, -1390.09314, 11.36426, 0.00000, 0.00000, 6.86697, false},
	{855, -313.05679, -1389.40344, 11.17249, 0.00000, 0.00000, 7.19348, false},
	{855, -304.83932, -1389.53870, 10.68227, 0.00000, 0.00000, 7.11789, false},
	{855, -296.44528, -1389.86438, 10.22281, 0.00000, 0.00000, 7.45258, false},
	{855, -287.38068, -1389.49438, 9.96774, 0.00000, 0.00000, 7.64987, false},
	{855, -325.67886, -1400.31079, 13.03334, 0.00000, 0.00000, 7.04468, false},
	{855, -318.50320, -1401.77454, 13.48958, 0.00000, 0.00000, 6.86697, false},
	{855, -311.08722, -1401.22241, 13.66135, 0.00000, 0.00000, 7.19348, false},
	{855, -302.83469, -1401.49646, 12.55591, 0.00000, 0.00000, 7.11789, false},
	{855, -294.40482, -1401.96313, 12.12101, 0.00000, 0.00000, 7.45258, false},
	{855, -285.30371, -1401.73523, 11.71527, 0.00000, 0.00000, 7.64987, false},
	{855, -326.68216, -1407.60181, 12.74285, 0.00000, 0.00000, 7.04468, false},
	{855, -319.51648, -1409.13855, 13.48866, 0.00000, 0.00000, 6.86697, false},
	{855, -312.11050, -1408.65955, 13.17549, 0.00000, 0.00000, 7.19348, false},
	{855, -303.86826, -1409.00867, 13.46220, 0.00000, 0.00000, 7.11789, false},
	{855, -295.44879, -1409.54980, 12.52929, 0.00000, 0.00000, 7.45258, false},
	{855, -286.35794, -1409.39783, 11.18046, 0.00000, 0.00000, 7.64987, false},
	{855, -327.82956, -1415.94031, 13.12721, 0.00000, 0.00000, 7.04468, false},
	{855, -320.67523, -1417.56030, 13.36278, 0.00000, 0.00000, 6.86697, false},
	{855, -313.28082, -1417.16541, 13.85344, 0.00000, 0.00000, 7.19348, false},
	{855, -305.05032, -1417.60010, 12.87199, 0.00000, 0.00000, 7.11789, false},
	{855, -296.64276, -1418.22668, 12.41253, 0.00000, 0.00000, 7.45258, false},
	{855, -287.56366, -1418.16125, 11.80858, 0.00000, 0.00000, 7.64987, false},
	{855, -174.97739, -1413.71033, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -165.43350, -1414.09155, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -176.35500, -1404.41016, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -166.05887, -1404.96411, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -175.91298, -1392.61487, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -166.33675, -1394.79797, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -174.46565, -1382.16260, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -166.85513, -1384.27625, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -175.55099, -1370.31250, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -167.85544, -1372.85107, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -328.38657, -1550.05273, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -216.94136, -1551.27942, 6.77799, 0.00000, 0.00000, 7.19348, false},
	{855, -332.00418, -1473.77026, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -215.27281, -1475.63367, 7.36859, 0.00000, 0.00000, 7.19348, false},
	{855, -216.32106, -1487.98181, 8.12531, 0.00000, 0.00000, 7.19348, false},
	{855, -331.99664, -1486.01245, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -216.68596, -1503.19202, 8.49802, 0.00000, 0.00000, 7.19348, false},
	{855, -331.59952, -1502.37415, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -217.61464, -1519.40881, 6.90084, 0.00000, 0.00000, 7.19348, false},
	{855, -331.77008, -1519.18823, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -329.46146, -1534.70081, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -318.99161, -1551.98877, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -320.04770, -1536.82263, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -321.71619, -1520.13171, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -321.82852, -1503.92273, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -322.51480, -1488.72192, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -322.52853, -1476.38147, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -309.52042, -1552.38684, 11.37566, 0.00000, 0.00000, 7.19348, false},
	{855, -310.48190, -1537.22437, 12.22299, 0.00000, 0.00000, 7.19348, false},
	{855, -312.05469, -1520.53784, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -312.07043, -1504.33289, 10.46497, 0.00000, 0.00000, 7.19348, false},
	{855, -312.65921, -1489.13623, 11.56913, 0.00000, 0.00000, 7.19348, false},
	{855, -312.57437, -1476.79956, 10.33405, 0.00000, 0.00000, 7.19348, false},
	{855, -300.60956, -1552.52698, 11.06033, 0.00000, 0.00000, 7.19348, false},
	{855, -301.48181, -1537.36719, 10.29981, 0.00000, 0.00000, 7.19348, false},
	{855, -302.96460, -1520.68140, 11.42390, 0.00000, 0.00000, 7.19348, false},
	{855, -302.88940, -1504.47729, 9.80571, 0.00000, 0.00000, 7.19348, false},
	{855, -303.38657, -1489.28137, 9.94556, 0.00000, 0.00000, 7.19348, false},
	{855, -303.20898, -1476.94641, 8.95530, 0.00000, 0.00000, 7.19348, false},
	{855, -289.95914, -1552.69470, 6.84965, 0.00000, 0.00000, 7.19348, false},
	{855, -290.72473, -1537.53748, 8.18520, 0.00000, 0.00000, 7.19348, false},
	{855, -292.10001, -1520.85254, 7.68437, 0.00000, 0.00000, 7.19348, false},
	{855, -291.91617, -1504.65027, 7.16866, 0.00000, 0.00000, 7.19348, false},
	{855, -292.30368, -1489.45508, 7.50828, 0.00000, 0.00000, 7.19348, false},
	{855, -292.01529, -1477.12183, 6.95974, 0.00000, 0.00000, 7.19348, false},
	{855, -278.68164, -1552.87195, 5.08747, 0.00000, 0.00000, 7.19348, false},
	{855, -279.33444, -1537.71643, 4.82778, 0.00000, 0.00000, 7.19348, false},
	{855, -280.59589, -1521.03320, 6.36737, 0.00000, 0.00000, 7.19348, false},
	{855, -281.38702, -1504.90698, 6.17227, 0.00000, 0.00000, 7.19348, false},
	{855, -280.56821, -1489.63977, 6.06591, 0.00000, 0.00000, 7.19348, false},
	{855, -280.16254, -1477.30786, 5.72612, 0.00000, 0.00000, 7.19348, false},
	{855, -267.85397, -1553.04236, 3.34305, 0.00000, 0.00000, 7.19348, false},
	{855, -268.39838, -1537.88940, 4.04050, 0.00000, 0.00000, 7.19348, false},
	{855, -269.55054, -1521.20715, 5.34716, 0.00000, 0.00000, 7.19348, false},
	{855, -269.14120, -1505.00940, 5.56956, 0.00000, 0.00000, 7.19348, false},
	{855, -269.30090, -1489.81641, 5.30367, 0.00000, 0.00000, 7.19348, false},
	{855, -268.78256, -1477.48621, 3.89382, 0.00000, 0.00000, 7.19348, false},
	{855, -256.32669, -1552.70996, 2.86480, 0.00000, 0.00000, 7.19348, false},
	{855, -256.75586, -1537.55396, 4.37925, 0.00000, 0.00000, 7.19348, false},
	{855, -257.79163, -1520.86816, 5.53501, 0.00000, 0.00000, 7.19348, false},
	{855, -257.26468, -1504.66675, 5.78228, 0.00000, 0.00000, 7.19348, false},
	{855, -257.30560, -1489.47095, 5.88865, 0.00000, 0.00000, 7.19348, false},
	{855, -257.40857, -1474.14575, 4.59956, 0.00000, 0.00000, 7.19348, false},
	{855, -244.82182, -1553.07751, 3.19058, 0.00000, 0.00000, 7.19348, false},
	{855, -245.13593, -1537.92542, 5.21389, 0.00000, 0.00000, 7.19348, false},
	{855, -246.05548, -1521.24316, 5.96516, 0.00000, 0.00000, 7.19348, false},
	{855, -245.41122, -1505.04517, 6.82277, 0.00000, 0.00000, 7.19348, false},
	{855, -245.33362, -1489.85364, 6.48764, 0.00000, 0.00000, 7.19348, false},
	{855, -244.71384, -1474.98706, 5.00455, 0.00000, 0.00000, 7.19348, false},
	{855, -232.71964, -1537.12451, 6.30303, 0.00000, 0.00000, 7.19348, false},
	{855, -233.51503, -1520.43433, 6.52423, 0.00000, 0.00000, 7.19348, false},
	{855, -232.74536, -1504.22803, 6.94716, 0.00000, 0.00000, 7.19348, false},
	{855, -232.54108, -1489.02832, 7.65307, 0.00000, 0.00000, 7.19348, false},
	{855, -231.24060, -1475.55835, 5.80759, 0.00000, 0.00000, 7.19348, false}

};

enum aratasEnum
{
	aratasObject,
	aratasPickup
};

new AratasInfo[568][aratasEnum];


//Neve | Mati | Skill | Töltény
new Fegyverek[16][fEnum] =
{
	{"Katana", 					50,			0,			1},
	{"Cane", 					50,			0,			1},
	{"Biliárd ütõ", 			50,			0,			1},
	{"Baseball ütõ", 			50,			0,			1},
	{"Ásó", 					50,			0,			1},
	{"9mm Pisztoly", 			900,		50,			40},
	{"Hangtompítós Pisztoly", 	2000,		100,		50},
	{"Sörétes", 				2400,		150,		30},
	{"Desert Eagle", 			3600,		200,		40},
	{"MP5", 					4800,		250,		100},
	{"Micro Uzi", 				4000,		300,		100},
	{"AK-47", 					8000,		350,		80},
	{"M4A1", 					8400,		400,		80},
	{"Távcsöves", 				10000,		450,		50},
	{"Combat", 					10000,		500,		80},
	{"Golyóálló mellény", 		7000,		550,		100}
};

new Kuka[500][kuka];

new Float:LoginCameraPos[][8] =
{
    {1569.615112, -1725.281250, 23.330926, 1388.749145, -1725.281250, 23.330926, 20000.0, 1.0},
    {1338.207519, -912.497680, 83.367454, 1446.264526, -869.062072, 82.563865, 20000.0, 1.0},
    {1711.483642, -1104.680786, 162.211242, 507.619995, -1358.241333, 44.764968, 20000.0, 1.0},
    {167.949172, -1924.088256, 14.955513, 391.168365, -1927.294433, 16.810047, 20000.0, 1.0}
};

new Float:LoginCameraPosLookAt[][8] =
{
    {1569.549194, -1729.239868, 22.760999, 1388.879272, -1729.239868, 22.760999, 20000.0, 1.0},
    {1336.177001, -909.051879, 83.427085, 1444.784912, -865.350830, 82.757537, 20000.0, 1.0},
    {1711.483032, -1108.140502, 160.203689, 505.468841, -1361.565185, 44.195041, 20000.0, 1.0},
    {167.949172, -1920.100585, 14.955513, 391.177947, -1923.294677, 16.850671, 20000.0, 1.0}
};

new RadioLista[20][2][128] =
{
	{"http://stream.musicfm.hu:8000/musicfm.mp3.m3u", 			"Music FM"},
	{"http://live.risefm.hu:8080/radio.m3u", 		"RiseFM"},
	{"http://stream-uk1.radioparadise.com/mp3-192", 		"Radio Paradise"},
	{"http://stream001.radio.hu:8080/mr1.aac.m3u", 	"Kossuth Rádió"},
	{"http://discoshit.hu/ds-radio.m3u", 		"DISCO*S HIT"},
	{"http://www.gong.hu/gong-fm.m3u", 	"Gong FM"},
	{"http://stream.radiomi.hu/radiomi.m3u", 		"RádióMI"},
	{"http://www.dioradio.hu/dioradio.m3u", 		"Dió rádió"},
	{"http://samp.gc4.hu/adat/fajl/rockvilag.pls", 		"Rock világ"},
	{"http://online.csabaradio.hu:8000/128kbps.m3u", 		"Békéscsaba rádió"},
	{"http://tunein.com/radio/Europa-2-1048-s133037/?streamid=3460738", 		"Europa2 FM"},
	{"http://www.amadeusradio.hu:8004/stream192.m3u", 		"Amadeus rádió"},
	{"http://aktivradio.hu:8000/aktiv.mp3.m3u", 		"Aktív rádió"},
	{"http://stream001.radio.hu:8080/mr7.aac.m3u", 		"Dankó rádió"},
	{"http://stream001.radio.hu:8080/mr2.aac.m3u", 		"Petõfi rádió"},
	{"http://www.listenlive.eu/juventus.m3u", 		"Juventus rádió"},
	{"http://virtualdjradio.com/listen.pls", 		"VDJ Radio Ch.1"},
	{"http://virtualdjradio.com/listen2.pls", 		"VDJ Radio Ch.2"},
	{"http://virtualdjradio.com/listen3.pls", 		"VDJ Radio Ch.3"},
	{"http://virtualdjradio.com/listen4.pls", 		"VDJ Radio Ch.4"}
	
};

//Megnevezés - jelenlegi állapot - hanyas rangtól - skin id
new Katona_Engedelyek[6][4][256] =
{
	{"Alap felszerelés", 	0,	1,	287},
	{"Kiképzõ felszerelés", 	0,	1,	287},
	{"Légi felszerelés", 	0,	1,	287},
	{"Katasztrófavédelmi felszerelés", 		0,	1,	287},
	{"Bevetési osztag", 		0,	1,	287},
	{"Hadi felszerelés", 	0,	5,	287}
};
new FBI_Engedely[4][4][32] =
{
	{"Alap felszerelés", 	0,	1,	163},
	{"Nyomozó felszerelés", 	0,	6,	164},
	{"Magasszintû felszerelés", 	0,	2,	166},
	{"Mesterlövész", 		0,	1,	285}
};

//Név - Ára - HP - Éhség - Szükséglet
new Etel_Menu[10][6][24] =
{
	{"Coca Cola",			2,	5,		-10,	5, 	BL_SZIVOSZAL},
	{"Pepsi", 				2, 	5, 		-9, 	6, 	BL_SZIVOSZAL},
	{"Fanta", 				2, 	5, 		-5, 	10, BL_SZIVOSZAL},
	{"Ice Tea", 			1, 	5, 		-7, 	15, BL_SZIVOSZAL},
	{"Hamburger", 			4, 	15, 	-30, 	15, -1},
	{"Csibeburger", 		5, 	15, 	-25, 	10, -1},
	{"Hot-Dog", 			3, 	20, 	-35, 	20, -1},
	{"Chili-Dog", 			4, 	20, 	-20, 	25, -1},
	{"Gyros(pitában)", 		5, 	25, 	-40, 	25, -1},
	{"Gyros(tálban)", 		7, 	30, 	-60, 	30, BL_KANAL}
};

//megnevezés - ára - perc string - perc integer - érvényesség órában - listázza a vizsga dialogban? (1 = igen / 0 = nem)
new VizsgaLista[MAX_ENGEDELY][6][32] =
{
	{"KRESZ viszga", 	70, 	"nincs", 	0,		200,	1},
	{"Személygépjármû (B)", 650, 	"8 perc", 	8,		72,		1},
	{"Motor (A1)",		490, 	"8 perc", 	8,		72,		1},
	{"Kamion (C, CE)", 			1136, 	"8 perc", 	8,		72,		1},
	{"Fegyverengedély", 1050, 	"",			0,		90,		0}
};

//Kérdés - A válasz - B válasz - Melyik a helyes (1/2)
new KreszKerdesek[5][4][128] =
{
	{"Mindig a menetirány szerinti...", "...jobb oldalon közlekedünk", "...bal oldalon közlekedünk", 1},
	{"Adhat-e hangjelzést kikerülési szándékának jelzésére?", "Igen", "Nem", 2},
	{"Szabad-e megfordulni kijelölt gyalogos átkelõhelyen?", "Igen", "Nem", 1},
	{"Szabad-e hátramenetet végezni villamos pályán?", "Igen", "Nem", 1},
	{"Szabad-e hátramenetet végezni autópályán?", "Igen", "Nem", 2}
};

//Név - Ár
new ItalLista[13][2][32] =
{
	{"Ásvány Víz",1},
	{"Coca Cola",2},
	{"Fanta",2},
	{"Sprite",2},
	{"Cappy Ice Fruit",2},
	{"Sör",2},
	{"Bor",3},
	{"Vodka",4},
	{"Whiskey",5},
	{"Gin",4},
	{"Tequila",5},
	{"Absinth",4},
	{"Brandy",4}
};
//Név | FegyverID | LõszerSzám | Ár
new FegyverIllegalisLista[6][4][32] =
{
	{"Boxer",1,1,100},
	{"Baseball ütõ",5,1,50},
	{"Ásó",6,1,50},
	{"Katana",8,1,10000},
	{"Bomba",NINCS,NINCS,50000},
 	{"Tolvajkulcs",-2,-2,200}
};

#define CUCC_BL 0
#define CUCC_FEGYVER 1

#define BOLT_CUCCOK 25
new TargyLista[BOLT_CUCCOK][6][32] =
{
	//név               ár      item darab  cucc tipus limit
	{"GPS", 			150, BL_GPS, 1, CUCC_BL, 1},
	{"Telefon", 		100, BL_TELEFON, 1, CUCC_BL, 0},
	{"Kötszer", 		14, BL_KOTSZER, 1, CUCC_BL, 5},
	{"Szendvics", 		3, BL_SZENDVICS, 1, CUCC_BL, P_MAX_SZENDVICS},
	{"Feltöltõkártya", 	15, -201, 15, CUCC_BL, 0},
	{"Telefonkönyv", 	25, BL_TELEFONKONYV, 1, CUCC_BL, 1},
	{"MP3 lejátszó", 	87, BL_MP3, 1, CUCC_BL, 1},
	{"Vontatókötél", 	41, BL_VONTATO, 1, CUCC_BL, 1},
	{"Cigipapír",		3, BL_PAPIR, 10, CUCC_BL, 30},
	{"Egy doboz cigi",	3, BL_CIGI, 20, CUCC_BL, 40},
	{"Öngyújtó", 		1, BL_GYUJTO, 1, CUCC_BL, 2},
	{"Csipogó",		320, BL_CSIPOGO, 1, CUCC_BL, 1},
	{"Benzines Kanna",	500, BL_KANNA, 1, CUCC_BL, 1},
	{"Spray", 250, 41, 100, CUCC_FEGYVER, 0},
//	{"Hifi Torony",1000, BL_HIFI, 1, CUCC_BL, 1},
	{"Gyenge lámpaszett", 1000, BL_LAMPA, 2, CUCC_BL, 10},
	{"Közepes lámpaszett", 1750 , BL_LAMPA, 3, CUCC_BL, 10},
	{"Erõs lámpaszett", 2500 , BL_LAMPA, 5, CUCC_BL, 10},
	{"Pipa", 200 , BL_PIPA, 1, CUCC_BL, 1},
	{"Bong", 600 , BL_BONG, 2, CUCC_BL, 1},
	{"Basseballütõ", 100, 5, 1, CUCC_FEGYVER, 0},
	{"Kézi Rádió",	50, BL_KEZIRADIO, 1, CUCC_BL, 1},
	{"Bankkártya",  40, BL_BANKKARTYA, 1, CUCC_BL, 1},
	{"Traffipax",  1500, BL_TRAFFIPAX, 1, CUCC_BL, 1},
 	{"Gumikesztyû", 1, BL_GUMIKESZTYU, 1, CUCC_BL, 1},
 	{"Szívószál", 1, BL_SZIVOSZAL, 1, CUCC_BL, 1}
};

new PremiumPontKell[5][2] =
{
	{ADAT_HAZ,		1600},
	{ADAT_JARMU, 	1600},
	{ADAT_BUTOR, 	1200},
	{ADAT_RENDSZAM, 1000},
	{ADAT_NEON, 	2000}
};

new Float:Vizsga_Alap[][3] =
{
	{2336.980, -2029.997, 13.311},
	{2321.917, -2029.950, 13.311},
	{2313.405, -2021.948, 13.291},
	{2306.780, -1990.278, 13.291},
	{2227.806, -1986.159, 13.311},
	{2232.236, -1995.453, 13.271},
	{2278.932, -2020.157, 13.311},
	{2279.869, -2055.300, 15.295},
	{2274.444, -2046.537, 13.309},
	{2299.728, -2034.734, 13.311},
	{2336.584, -2034.851, 13.311},
	{2364.317, -2011.506, 13.250},
	{2416.114, -1945.912, 13.087},
	{2416.242, -1745.659, 13.087},
	{2228.943, -1729.721, 13.088},
	{2107.162, -1749.515, 13.110},
	{1834.518, -1750.082, 13.087},
	{1819.778, -1831.415, 13.118},
	{1778.671, -1887.675, 13.092},
	{1847.524, -1934.962, 13.085},
	{2083.950, -1910.144, 13.088},
	{2190.016, -1896.783, 13.302},
	{2221.548, -1878.190, 13.087},
	{2218.148, -1763.294, 13.075},
	{2283.397, -1734.833, 13.088},
	{2400.778, -1735.190, 13.087},
	{2411.714, -1883.967, 13.088},
	{2412.171, -1996.916, 13.050},
	{2351.284, -2012.726, 13.249}
};

new Float:Vizsga_Kamion[][3] =
{
	{2345.796, -2015.733, 14.151},
	{2383.849, -2010.056, 14.159},
	{2416.234, -1948.268, 13.988},
	{2415.895, -1747.906, 13.988},
	{2482.038, -1734.746, 13.989},
	{2626.727, -1734.070, 11.690},
	{2723.155, -1659.547, 13.676},
	{2831.734, -1614.060, 11.528},
	{2791.773, -1610.839, 11.530},
	{2863.582, -1541.527, 11.528},
	{2840.983, -1068.974, 23.915},
	{2846.570, -787.478, 11.480},
	{2796.703, -520.931, 11.426},
	{2836.330, -318.881, 8.095},
	{2794.552, 46.707, 21.128},
	{2553.223, 44.041, 26.945},
	{2409.385, 43.893, 26.944},
	{2269.621, 43.836, 26.942},
	{2243.628, 27.377, 27.037},
	{2158.374, 43.635, 26.942},
	{1899.418, 25.890, 35.272},
	{1686.961, -330.473, 34.843},
	{1273.665, -381.619, 3.050},
	{1256.374, -436.280, 6.085},
	{1156.382, -927.318, 43.606},
	{1241.260, -941.620, 43.111},
	{1492.380, -960.401, 36.747},
	{1911.360, -1024.601, 35.832},
	{2183.247, -1110.973, 25.428},
	{2268.702, -1175.624, 26.321},
	{2269.055, -1370.177, 24.433},
	{2210.435, -1534.474, 24.434},
	{2182.319, -1711.303, 13.971},
	{2251.148, -1734.444, 13.989},
	{2411.508, -1817.872, 13.989},
	{2348.773, -2015.220, 14.152}
};

new Float:PaintBallPos[14][3] =
{
	{-1134.5125,1093.4597,1345.8071},
	{-1126.2377,1065.3071,1345.7264},
	{-1135.8137,1027.4368,1345.7529},
	{-1113.0562,1019.8771,1344.0173},
	{-1108.0010,1044.9817,1342.4000},
	{-1080.2546,1030.4102,1342.6031},
	{-1048.2437,1089.0992,1343.4860},
	{-1032.2373,1079.6199,1343.0629},
	{-1027.1129,1081.4862,1343.3342},
	{-991.0128,1094.5576,1342.9342},
	{-969.8690,1091.8357,1345.0082},
	{-977.6313,1073.7118,1344.9707},
	{-978.6574,1034.9257,1345.0035},
	{-971.3726,1026.4720,1345.0616}
};

new NemVontatoJarmu[] =
{
	403,406,407,408,409,410,
	411,412,413,414,415,416,417,419,423,
	424,425,427,428,429,430,431,432,433,
	434,435,437,440,441,442,443,444,446,
	447,448,449,450,451,452,453,454,455,
	456,457,459,460,461,462,463,464,465,
	466,467,468,469,471,472,473,474,476,
	477,481,482,483,484,485,486,487,488,
	493,494,495,497,498,499,501,502,503,
	504,506,508,509,510,511,512,513,513,
	514,515,519,520,521,522,523,524,528,
	530,532,537,538,539,541,544,545,548,
	552,553,556,557,563,564,568,569,570,
	571,572,573,574,577,578,581,582,583,
	584,586,587,588,590,591,592,593,594,
	595,601,603,606,607,608,609,610,611
};

new NemVontathatoJarmu[] =
{
	406,417,425,430,432,435,441,
	446,447,448,449,450,452,453,454,460,
	461,462,463,464,465,468,469,472,473,
	476,481,484,486,487,488,493,497,501,
	509,510,511,512,513,519,520,521,522,
	523,530,532,537,538,539,548,553,563,
	564,569,570,577,581,584,586,590,591,
	592,593,594,595,606,607,608,610,611
};

new PakolhatoJarmu[] =
{
	400,401,402,403,404,405,409,410,411,412,413,414,415,416,417,418,
	419,420,421,422,423,424,426,427,428,429,430, 431,433,434,436,437,
	438,439,440,442,443,444,445,446,451,451,452,453,454,455,456,458,
	459,460,466,467,469,470,471,472,473,474,475,476,477,478,479,480,
	482,483,484,487,488,489,490,491,492,493,494,495,496,497,498,499,
	500,502,503,504,505,506,507,508,511,512,513,514,515,516,517,518,
	519,520,521,525,526,527,528,529,533,534,535,536,540,541,542,543,
	545,546,547,548,549,550,551,552,552,554,555,556,557,558,559,560,
	561,562,563,565,566,567,568,573,575,576,577,578,579,580,582,585,
	587,588,589,592,593,595,596,597,598,599,600,601,602,603,604,605,
	609
};

enum eboja
{
	boObj,
	Float:boposx,
	Float:boposy,
	Float:boposz
};
new Bojak[MAX_PLAYERS][MAX_BOJA][eboja];

enum utzarInfo
{
	bool:uVan,
	uTipus,
	Float:uHely[4],
	uObject,
	uPickup[4],
	Text3D:uText
};
new Utzarak[MAX_PLAYERS][utzarInfo];

#if NPC_KELL == 1

new BallasSkins[] =
{
	102, 103, 104
};

enum botEnum
{
	botID,
	botTipus,
	botMost,
	botElozo,
	botKElozo,
	botKovetkezo
};
new BotInformacio[100][botEnum];

enum kozInfo
{
	kozTipus,
	Float:kozPosX,
	Float:kozPosY,
	Float:kozPosZ,
	kozMerre[5]
};

new GyarPoziciok[][kozInfo] =
{
	{0, 1045.5754, -1228.9409, 16.9199, {2, 4, 15, 0, 0}}, // NPC1
	{0, 1045.0146, -1312.5759, 13.5469, {1, 7, 3, 0, 0}}, // NPC2
	{0, 950.0192, -1312.7231, 13.5469, {2, 4, 5, 7, 0}}, // NPC3
	{0, 950.5178, -1228.4989, 16.9065, {1, 3, 5, 15, 0}}, // NPC4
	{0, 950.0499, -1273.4552, 15.3544, {3, 4, 6, 0, 0}}, // NPC5 (köz 0-3)
	{0, 973.6544, -1273.6064, 15.1174, {5, 7, 8, 0, 0}}, // NPC6 (5-bõl indulva)
	{0, 974.0480, -1312.5380, 13.4533, {2, 3, 6, 0, 0}}, // NPC7 (6-bõl indulva, köz 3-4)
	{0, 997.9763, -1273.5927, 15.1797, {6, 9, 0, 0, 0}}, // NPC8 (6-bõl indulva)
	{0, 997.7208, -1259.3693, 15.0313, {8, 10, 0, 0, 0}}, // NPC9 (8-bõl indulva)
	{0, 997.6831, -1251.6245, 19.3968, {9, 11, 0, 0, 0}}, // NPC10 (9-bõl indulva)
	{0, 997.7750, -1246.7592, 19.4086, {10, 12, 0, 0, 0}}, // NPC11 (10-bõl indulva)
	{0, 992.0689, -1246.8112, 19.4118, {11, 13, 0, 0, 0}}, // NPC12 (11-bõl indulva)
	{0, 992.0351, -1238.8540, 19.3941, {12, 14, 0, 0, 0}}, // NPC13 (12-bõl indulva)
	{0, 991.9806, -1234.0807, 16.9475, {13, 15, 0, 0, 0}}, // NPC14 (13-bõl indulva)
	{0, 991.9255, -1228.6942, 16.9050, {1, 4, 14, 0, 0}} // NPC15 (14-bõl indulva, köz 0-1)
};

#endif

enum butorEnum {
    butorID,
    butorNEV[48],
    butorAR
};

new Butor_Asztal[35][butorEnum] =
{
	{2357,		"Négyszögletes hosszú asztal",				55},
	{2119,		"Kerekített végû asztal",					30},
	{2762,		"Négyszögletes asztal (piros)",				25},
	{2763,		"Négyszögletes(piros)",						25},
	{2764,		"Négyszögletes asztal",						42},
	{2118,		"Ovális márvány asztal",					75},
	{2117,		"Négyszögletes asztal",						68},
	{2116,		"Négyszögletes asztal ",					50},
	{2115,		"Négyszögletes asztal",						50},
	{2110,		"Kerekített asztal",						42},
	{2109,		"Barna asztal",								42},
	{2032,		"Sötét barna asztal",						42},
	{2031,		"Ovális asztal",							42},
	{2030,		"Kerek márvány asztal",						127},
	{2029,		"Szögletes vastaglábú",						63},
	{1770,		"Kerekített talpú szögletes",				29},
	{1737,		"Szögletes asztal",							63},
	{1814,		"Szögletes TV asztal",						63},
	{1815,		"Kör alakú",								70},
	{1817,		"Üveglapos szögletes asztal",				100},
	{1818,		"Kicsi TV asztal",							35},
	{1819,		"Kerek asztal",								29},
	{1820,		"Kicsi kerek",								25},
	{1822,		"Kerek üveglapos",							55},
	{1823,		"Szögletes asztal (kicsi)",					25},
	{2126,		"Kerekített üveglapos",						34},
	{2112,		"Négyzet",									29},
	{2111,		"Kerek",									29},
	{2236,		"Szögletes",								29},
	{1433,		"Szögletes",								29},
	{1516,		"Szögletes vékony lábakkal",				29},
	{2311,		"Szögletes hosszú",							29},
	{2315,		"Szögletes hosszú",							29},
	{2321,		"Szögletes hosszú",							29},
	{2370,		"Négyzet",									42}
};

new Butor_Ulogarnitura[20][butorEnum] =
{
	{2290,		"Három személyes hosszú",					170},
	{1768,		"Hosszú",									106},
	{1766,		"Két részes",								63},
	{1764,		"Három személyes",							63},
	{1763,		"Közepes 3 személyes",						63},
	{1761,		"Három személyes",							63},
	{1760,		"Három személyes mintás",					63},
	{1757,		"Levél mintázatú",							63},
	{1756,		"Három személyes",							63},
	{1753,		"Három személyes (barna)",					220},
	{1713,		"Kettõ személyes (szürke)",					191},
	{1712,		"Kettõ személyes (világos barna)", 			148},
	{1710,		"Négy személyes (világos barna)", 			246},
	{1709,		"Kerekített hat személyes",					410},
	{1706,		"Két személyes (lila)",						82},
	{1703,		"Három személyes (fekete)",					106},
	{1702,		"Három személyes (barna)",					106},
	{1723,		"Három személyes (fekete)",					106},
	{1726,		"Három személyes (fekete)",					106},
	{1728,		"Három személyes (világos barna)",			106}
};

new Butor_Kepek[32][butorEnum] =
{
	{2255,		"Múzsa", 				63},
	{2256,		"Pálma fa", 			29},
	{2257,		"Absztrakt", 			80},
	{2258,		"Látkép", 				29},
	{2259,		"Bowling pálya", 		34},
	{2260,		"Folyó", 				34},
	{2261,		"Híd", 					30},
	{2262,		"Belváros", 			25},
	{2263,		"Dokk", 				20},
	{2264,		"Tengerpart", 			25},
	{2265,		"Sivatagi hõség", 		30},
	{2266,		"Belváros", 			48},
	{2267,		"Teherhajó", 			57},
	{2268,		"Macska", 				48},
	{2269,		"Dombok", 				20},
	{2270,		"Levelek hullása", 		61},
	{2271,		"Csendélet", 			20},
	{2272,		"Természet lágyöle",	27},
	{2273,		"Virágok Illata", 		62},
	{2274,		"Rózsa", 				62},
	{2275,		"Gyümölcstál", 			43},
	{2276,		"Lánc-híd", 			43},
	{2277,		"Macska", 				68},
	{2278,		"Kirakodás", 			53},
	{2279,		"Zord sziklák", 		43},
	{2280,		"Tengerpart", 			43},
	{2281,		"Izzó parázs", 			30},
	{2282,		"Sárga villanás", 		32},
	{2283,		"Absztrakt", 			100},
	{2284,		"Bazilika", 			70},
	{2285,		"Földrengés", 			58},
	{2286,		"Teherhajó", 			70}
};


new Butor_Lampak[7][butorEnum] =
{
	{2239,		"Kiállító termi lámpa", 54},
	{2238,		"Láva lámpa", 			15},
	{2196,		"Asztali lámpa", 		15},
	{2108,		"Nappali lámpa", 		58},
	{2106,		"Éjjeli lámpa", 		20},
	{2105,		"Éjjeli lámpa", 		30},
	{2069,		"Éjjeli lámpa", 		40}
};

new Butor_TV[23][butorEnum] =
{
	{14772,		"Kis TV", 			148},
	{14604,		"TV Videóval", 		170},
	{1429,		"Kis TV", 			148},
	{1518,		"Közepes TV", 		150},
	{1717,		"TV Álvánnyal", 	127},
	{1747,		"Kis TV", 			106},
	{1748,		"Kis TV", 			106},
	{1749,		"Közepes TV", 		85},
	{1750,		"Közepes TV", 		850},
	{1751,		"Közepes TV", 		85},
	{1752,		"Közepes TV", 		85},
	{1781,		"Kis TV", 			127},
	{1786,		"Nagy TV", 			297},
	{1791,		"Közepes TV", 		210},
	{1792,		"Nagy TV", 			212},
	{2224,		"Lámpabúrás TV", 	148},
	{2296,		"TV Szekrénnyel", 	404},
	{2297,		"TV Videóval", 		163},
	{2312,		"Nagy TV", 			295},
	{2316,		"Közepes TV", 		260},
	{2595,		"TV Videóval", 		212},
	{2596,		"Sarok TV", 		200},
	{2700,		"Sarok TV", 		200}
};

new Butor_DVDHiFi[14][butorEnum] =
{
	{1719,		"Nintendo",				82},
	{1782,		"Videó lejátszó",		148},
	{1783,		"Videó lejátszó",		148},
	{1785,		"Videó lejátszó",		148},
	{1787,		"Videó lejátszó",		148},
	{1788,		"Videó lejátszó",		148},
	{1790,		"Videó lejátszó",		148},
	{1809,		"HiFi",					325},
	{1839,		"HiFi",					325},
	{2099,		"HiFi hangfallal",		406},
	{2100,		"HiFi hangfallal",		406},
	{2227,		"HiFi álványon",		255},
	{2226,		"Magnó",				151},
	{2225,		"Két HiFi álványon",	195}
};

new Butor_Hangfal[6][butorEnum] =
{
	{2229,		"Magas Hangfal", 			180},
	{2230,		"Fakeretes hangfal", 		170},
	{2231,		"Fakeretes kis hangfal", 	119},
	{2232,		"Fekete nagy hangfal", 		196},
	{2233,		"Álványos hangfal", 		151},
	{1840,		"Kis Hangfal", 				110}
};

new Butor_Szekreny[25][butorEnum] =
{
	{936,		"Konyha Szekrény", 			385},
	{937,		"Konyha Szekrény", 			340},
	{1416,		"Fa szekrény", 				255},
	{1417,		"Kis Gardrób", 				254},
	{1741,		"Alsónemûs szekrény", 		255},
	{1743,		"Aolsónemûs szekrény", 		250},
	{2000,		"Irat Szekrény", 			127},
	{2007,		"Dupla Irat Szekrény", 		170},
	{2025,		"Gardrób", 					255},
	{2078,		"Pohár szekrény", 			217},
	{2094,		"Alsónemûs szekrény", 		127},
	{2095,		"Kis Szekrény", 			85},
	{2161,		"Könyves Szekrény", 		178},
	{2162,		"Könyves Szekrény", 		178},
	{2163,		"Dupla Szekrény", 			212},
	{2164,		"Könyves Szekrény", 		255},
	{2167,		"Gardrób", 					212},
	{2191,		"Könyves Szekrény", 		225},
	{2199,		"Szekrény", 				319},
	{2200,		"Dupla Gardrób", 			170},
	{2204,		"Szekrény", 				238},
	{2307,		"Kabát Szekrény", 			63},
	{2576,		"Gardrób alsónemûtartóval", 276},
	{2610,		"Irat Szekrény", 			127},
	{1742,		"Könyves Szekrény", 		93}
};

new Butor_Fotel[18][butorEnum] =
{
	{1754,		"Barna kis fotel", 				70},
	{1755,		"Mintás fotel", 				70},
	{1758,		"Levél mintázatú fotel", 		61},
	{1759,		"Csíkos fotel", 				55},
	{1762,		"Mintás barna fotel", 			70},
	{1765,		"Kockás fotel", 				70},
	{1767,		"Mintás fotel", 				70},
	{1769,		"Kék fa kartámlás fotel", 		70},
	{2292,		"Sarok barna fotel", 			76},
	{2295,		"Barna Puff", 					65},
	{1704,		"Fekete fa kartámlás fotel", 	112},
	{1705,		"Barna fa kartámlás fotel", 	112},
	{1708,		"Fekete fotel", 				96},
	{1711,		"Barna fotel", 					53},
	{1724,		"Fekete fa kartámlás fotel", 	112},
	{1727,		"Fekete fotel", 				110},
	{1729,		"Barna fotel", 					53},
	{1735,		"Virágmintázatú fotel", 		48}
};

new Butor_Konyhabutor[13][butorEnum] =
{
	{2128,		"Piros konyha szekrény",				148},
	{2129,		"Piros konyha asztal",					148},
	{2133,		"Fehér konyha szekrény",				119},
	{2137,		"Márványos konyha asztal",				296},
	{2138,		"Márványos konyha asztal",				296},
	{2139,		"Márványos konyha asztal",				212},
	{2140,		"Konyha szekrény", 						178},
	{2142,		"Konyha asztal",						138},
	{2145,		"Keskeny konyha szekrény",				125},
	{2157,		"Konyha asztal", 						110},
	{2158,		"Konyha szekrény",  					110},
	{2160,		"Mosdó",								200},
	{15036,		"Fa szett",								330}
};

new Butor_Huto[3][butorEnum] =
{
	{2533,		"Üdítõs",		212},
	{2534,		"Fa hûtõ",		212},
	{2452,		"Üdítõs",		382}
};

new
	Butor_Szamitogep[1][butorEnum] =
{
	{2190,		"Commondore '64",		255}
};

new Butor_Ajto[3][butorEnum] =
{
	{1491,		"Fa lengõ ajtó négyzetekkel",	170},
	{1502,		"Fa lengõ ajtó",				255},
	{1523,		"Lengõ ajtó üveggel",			297}
};

new Butor_Mosogep[1][butorEnum] =
{
	{1208,		"Forgó dobos",		225}
};

new Butor_Nyomtato[2][butorEnum] =
{
	{2186,		"Nyomtató fénymásolóval",	544},
	{2202,		"Nyomtató fénymásolóval",	544}
};

new Butor_Agy[16][butorEnum] =
{
	{1793,		"Matrac csíkokkal",						136},
	{1794,		"Két személyes barna mintával",			510},
	{1795,		"Két személyes fa alapon",				255},
	{1796,		"Egy személyes kocka mintával",			170},
	{1797,		"Két személyes csíkos mintával",		425},
	{1798,		"Két személyes csíkos mintával",		212},
	{1799,		"Két személyes barna mintás",			212},
	{1800,		"Matrac fém kerettel",					70},
	{1801,		"Két személyes fém kerettel",			127},
	{1802,		"Két személyes fa kerettel",			167},
	{1803,		"Két személyes fa kerettel",			221},
	{1812,		"Matrac",								53},
	{2090,		"Két személyes vonalas",				148},
	{2301,		"Két személyes szekrénnyel",			242},
	{2302,		"Csíkos huzatos",						106},
	{14446,		"Zebra mintás",							1106}
};

new Butor_WC[3][butorEnum] =
{
	{2514,		"Fehér kerámia", 					70},
	{2525,		"Fehér kerámia kiegészítõkkel", 	76},
	{2528,		"Fehér kerámia talppal", 			106}
};

new Butor_Zuhanyzo[6][butorEnum] =
{
	{2516,		"Zuhanytálca", 						106},
	{2517,		"Modern zuhanykabin", 				510},
	{2519,		"Fehér zuhanytálca", 				106},
	{2520,		"Fém hatású zuhanykabin", 			1106},
	{2526,		"Fa berakású kád", 					276},
	{2527,		"Függönyös csempe tálcával",		145}
};

new Butor_Mosdo[3][butorEnum] =
{
	{2515,		"Egyszerû két csapos",				63},
	{2518,		"Szifonos porcelán",				93},
	{2523,		"Talpas modern",					90}
};

new Butor_Szonyeg[9][butorEnum] =
{
	{2815,		"Lila, téglalapokkal",				106},
	{2817,		"Zöldes kék, körökkel",				106},
	{2818,		"Egyszerû kockás",					80},
	{2833,		"Díszes okker színekkel",			127},
	{2835,		"Okker szíbû kerek",				120},
	{2836,		"Okker színû pöttyös",				135},
	{2841,		"Kerek kék kockás",					83},
	{2842,		"Hangulatos lila mintás",			85},
	{2847,		"Hangulatos perzsa narancs",		137}
};

new Butor_Szek[12][butorEnum] =
{
	{1671,		"Hivatali fekete fém",				63},
	{1714,		"Elegáns fekete szövetû",			85},
	{1715,		"Fém szerkezetes bõr",				90},
	{1720,		"Kicsi fehér háttámlával",			106},
	{1805,		"Sámli piros ülõfelülettel",		29},
	{1806,		"Szögletes, forgó, kék huzallat",	70},
	{1810,		"Összecsukható",					20},
	{1811,		"Praktikus fém vázas",				63},
	{2120,		"Egyszerû bõr ülõfelülettel",		60},
	{2123,		"Elegáns fehér",					138},
	{2124,		"Piros párnás fa",					127},
	{2356,		"Kék huzat, forgószék",				70}
};

new Butor_Iroasztal[8][butorEnum] =
{
	{1963,		"Nagy, talpas, fiókkal",			153},
	{2166,		"Sarok asztal fém vázzal",			170},
	{2169,		"Fehér oldalú fa",					110},
	{2173,		"Fémvázas fa lappal",				93},
	{2180,		"Három oldalú fa",					53},
	{2205,		"Egyszerû nagy barna",				110},
	{2206,		"Egyszerû barna",					82},
	{2607,		"Fehér két lábú",					82}
};

new Butor_Fal[36][butorEnum] =
{
	{19353,		"Fehér és piros fal",				850},
	{19354,		"Rombusz fal",						850},
	{19355,		"Szürke kõ fal",					850},
	{19356,		"Fa fal",							850},
	{19357,		"Szürke fal",						850},
	{19358,		"Szürke csíkozott fal",				850},
	{19359,		"Szürke fal",						850},
	{19360,		"Fa fal",							850},
	{19361,		"Narancssárga, és barna fal",		850},
	{19362,		"Szürkés fal",						850},
	{19363,		"Barna fal",						850},
	{19364,		"Fehér tégla fal",					850},
	{19365,		"Szürke fal",						850},
	{19366,		"Fa fal",							850},
	{19367,		"Kék fal",							850},
	{19368,		"Barna fal",						850},
	{19369,		"Szürke fal",						850},
	{19370,		"Fa fal",							850},
	{19371,		"Szürke fal",						850},
	{19372,		"Barna fal",						850},
	{19373,		"Zöld fal",							850},
	{19383,		"Fehér és piros ajtós fal",			850},
	{19384,		"Rombusz ajtós fal",				850},
	{19386,		"Fa ajtós fal",						850},
	{19387,		"Szürke ajtós fal",					850},
	{19388,		"Szürke csíkozott ajtós fal",		850},
	{19389,		"Szürke ajtós fal",					850},
	{19390,		"Narancssárga és vörös ajtós fal",	850},
	{19391,		"Szürke ajtós fal",					850},
	{19392,		"Barna ajtós fal",					850},
	{19393,		"Szürke téglás ajtós fal",			850},
	{19394,		"Szürke ajtós fal",					850},
	{19395,		"Szürkés kék ajtós fal",			850},
	{19396,		"Szürkés vörös ajtós fal",			850},
	{19397,		"Világos barna ajtós fal",			850},
	{19398,		"Szürke kõ ajtós fal",				850}
};

new Butor_Szef[1][butorEnum] =
{
	{2332,		"Házszéf",			210}
};
new ButorInfo[MAXBUTORSZAM][butorInfo];

new EloToltesek[19][20] = {
	"BOMBER",
	"RAPPING",
	"SHOP",
	"BEACH",
	"SMOKING",
	"FOOD",
	"ON_LOOKERS",
	"DEALER",
	"CRACK",
	"CARRY",
	"COP_AMBIENT",
	"PARK",
	"INT_HOUSE",
	"FOOD",
	"PED",
	"ROB_BANK",
	"SWORD",
	"PAULNMAC",
	"SCRATCHING"
};

new FaAdatok[MAX_FA][Faadatok];

new FaHelyek[][far] =
{
	{1424.09998, -124.5, 20.9, 100, false},
	{1419.90002, -117.4, 20.9, 100, false},
	{1416.00000, -110.7, 20.9, 100, false},
	{1411.90002, -103.8, 20.9, 100, false},
	{1408.59998, -98.2, 20.9, 100, false},
	{1404.30005, -90.9, 23.2, 100, false},
	{1400.09998, -83.8, 25.2, 100, false},
	{1395.69995, -76.3, 26.2, 100, false},
	{1391.40002, -69.0, 27.5, 100, false},
	{1386.80005, -61.2, 28.3, 100, false},
	{1383.40002, -55.4, 28.8, 100, false},
	{1389.80005, -49.8, 28.8, 100, false},
	{1394.40002, -56.6, 28.3, 100, false},
	{1398.69995, -63.0, 27.8, 100, false},
	{1403.90002, -70.7, 26.1, 100, false},
	{1408.5, -77.5, 22.9, 100, false},
	{1413.5, -84.4, 21.9, 100, false},
	{1418.19995, -90.8, 20.2, 100, false},
	{1422.90002, -97.3, 18.5, 100, false},
	{1427.59998, -103.8, 18.8, 100, false},
	{1432.19995, -110.0, 18.8, 100, false},
	{1438.09998, -118.1, 18.8, 100, false},
	{1444.19995, -126.4, 19.5, 100, false},
	{1432.30005, -123.5, 19.5, 100, false},
	{1427.5, -115.9, 19.5, 100, false},
	{1423.80005, -108.8, 19.0, 100, false},
	{1418.69995, -103.2, 19.0, 100, false},
	{1411.40002, -90.1, 21.3, 100, false},
	{1449.09998, -121.2, 19.0, 100, false},
	{1445.5, -114.1, 18.3, 100, false},
	{1442.09998, -107.4, 18.3, 100, false},
	{1438.59998, -100.5, 18.3, 100, false},
	{1431.30005, -95.4, 17.3, 100, false},
	{1427.69995, -88.8, 18.5, 100, false},
	{1423.5, -83.1, 18.5, 100, false},
	{1417.59998, -75.8, 21.3, 100, false},
	{1413.30005, -70.0, 23.3, 100, false},
	{1408.69995, -63.8, 25.3, 100, false},
	{1403.59998, -57.0, 26.8, 100, false},
	{1398.09998, -49.6, 26.8, 100, false},
	{1394.19995, -44.4, 28.1, 100, false},
	{1399.40002, -39.0, 28.1, 100, false},
	{1405.00000, -44.4, 28.1, 100, false},
	{1410.59998, -49.8, 26.9, 100, false},
	{1414.09998, -57.3, 25.0, 100, false},
	{1419.69995, -62.7, 22.2, 100, false},
	{1422.90002, -69.5, 21.2, 100, false},
	{1429.80005, -76.1, 19.5, 100, false},
	{1435.09998, -84.6, 18.0, 100, false},
	{1441.30005, -92.9, 18.0, 100, false},
	{1445.90002, -102.5, 18.3, 100, false},
	{1451.19995, -110.3, 18.3, 100, false},
	{1456.30005, -117.4, 18.3, 100, false},
	{1462.30005, -112.9, 18.3, 100, false},
	{1457.90002, -105.6, 18.3, 100, false},
	{1453.90002, -99.0, 18.3, 100, false},
	{1449.40002, -91.5, 18.3, 100, false},
	{1444.09998, -82.7, 18.3, 100, false},
	{1440.00000, -75.8, 18.3, 100, false},
	{1434.59998, -69.8, 19.8, 100, false},
	{1429.80005, -62.2, 20.8, 100, false},
	{1424.50000, -56.5, 22.8,100, false},
	{1418.40002, -49.9, 25.5, 100, false},
	{1413.30005, -41.4, 28.5, 100, false},
	{1406.69995, -34.2, 28.8, 100, false},
	{1413.69995, -28.9, 28.8, 100, false},
	{1419.00000, -35.2, 27.8, 100, false},
	{1425.90002, -42.1, 24.8, 100, false},
	{1430.50000, -49.9, 22.0, 100, false},
	{1435.00000, -55.9, 20.5, 100, false},
	{1439.00000, -61.7, 19.5, 100, false},
	{1443.19995, -68.6, 18.8, 100, false},
	{1448.59998, -75.5, 18.5, 100, false},
	{1454.19995, -84.4, 17.5, 100, false},
	{1459.30005, -92.4, 17.5, 100, false},
	{1463.50000, -98.9, 17.5, 100, false},
	{1467.90002, -105.9, 17.5, 100, false},
	{1476.69995, -107.1, 17.5, 100, false},
	{1472.30005, -100.1, 17.5, 100, false},
	{1468.69995, -92.6, 17.5, 100, false},
	{1463.69995, -84.8, 17.5, 100, false},
	{1458.19995, -76.1, 17.5, 100, false},
	{1453.00000, -67.9, 18.8, 100, false},
	{1446.59998, -60.7, 20.0, 100, false},
	{1442.00000, -53.5, 21.3, 100, false},
	{1439.30005, -46.9, 22.5, 100, false},
	{1433.09998, -40.5, 23.5, 100, false},
	{1428.50000, -33.3, 25.5, 100, false},
	{1424.19995, -26.5, 27.5, 100, false},
	{1428.00000, -22.9, 27.5, 100, false},
	{1431.80005, -19.3, 26.0, 100, false},
	{1437.50000, -14.0, 26.0, 100, false},
	{1443.00000, -8.9, 26.0, 100, false},
	{1449.00000, -3.3, 26.0, 100, false},
	{1454.80005, 2.2, 26.0, 100, false},
	{1460.50000, 7.5, 26.0, 100, false},
	{1466.90002, 13.5, 26.0, 100, false},
	{1472.90002, 19.1, 26.0, 100, false},
	{1478.90002, 24.7, 26.0, 100, false},
	{1485.59998, 31.0, 26.0, 100, false},
	{1490.69995, 35.8, 26.0, 100, false},
	{1495.59998, 31.5, 25.0, 100, false},
	{1489.09998, 27.2, 25.0, 100, false},
	{1481.40002, 21.6, 25.0, 100, false},
	{1475.40002, 14.3, 25.0, 100, false},
	{1467.59998, 8.0, 25.0, 100, false},
	{1460.30005, 2.3, 25.0, 100, false},
	{1453.50000, -3.7, 25.0, 100, false},
	{1446.59998, -10.0, 25.0, 100, false},
	{1440.50000, -16.1, 25.0, 100, false},
	{1433.30005, -22.0, 25.0, 100, false},
	{1434.50000, -29.3, 24.0, 100, false},
	{1440.40002, -23.6, 24.0, 100, false},
	{1446.80005, -17.9, 24.0, 100, false},
	{1454.30005, -10.2, 24.0, 100, false},
	{1462.40002, -4.8, 24.0, 100, false},
	{1468.30005, 0.9, 24.0, 100, false},
	{1475.59998, 5.7, 24.0, 100, false},
	{1484.19995, 11.3, 24.0, 100, false},
	{1489.19995, 14.6, 24.0, 100, false},
	{1494.90002, 20.7, 24.0, 100, false},
	{1501.40002, 26.2, 24.0, 100, false},
	{1504.09998, 18.3, 23.0, 100, false},
	{1498.90002, 14.0, 23.3, 100, false},
	{1493.90002, 9.8, 23.3, 100, false},
	{1488.00000, 6.6, 23.3, 100, false},
	{1481.00000, 2.8, 23.3, 100, false},
	{1473.50000, -1.2, 23.3, 100, false},
	{1467.30005, -7.1, 23.3, 100, false},
	{1459.59998, -12.9, 23.3, 100, false},
	{1452.80005, -16.6, 23.3, 100, false},
	{1446.30005, -23.5, 23.3, 100, false},
	{1440.59998, -29.7, 23.3, 100, false},
	{1433.59998, -33.5, 23.3, 100, false},
	{1433.59998, -33.5, 23.3, 100, false},
	{1504.90002, 9.5, 23.0, 100, false},
	{1498.00000, 4.3, 23.0, 100, false},
	{1491.30005, 0.2, 23.0, 100, false},
	{1484.30005, -3.7, 23.0, 100, false},
	{1478.00000, -7.2, 23.0, 100, false},
	{1470.09998, -11.6, 23.0, 100, false},
	{1464.69995, -15.6, 23.0, 100, false},
	{1457.50000, -19.6, 23.0, 100, false},
	{1452.09998, -24.6, 23.0, 100, false},
	{1448.69995, -31.4, 23.0, 100, false},
	{1443.19995, -38.0, 22.3, 100, false},
	{1446.00000, -43.2, 22.3, 100, false},
	{1452.50000, -37.8, 22.3, 100, false},
	{1459.40002, -32.0, 22.3, 100, false},
	{1467.09998, -25.6, 22.3, 100, false},
	{1473.80005, -20.0, 22.3, 100, false},
	{1481.09998, -13.9, 22.3, 100, false},
	{1489.19995, -8.4, 22.3, 100, false},
	{1496.90002, -3.6, 22.3, 100, false},
	{1503.40002, 1.8, 22.3, 100, false},
	{1511.30005, -3.0, 22.3, 100, false},
	{1505.19995, -6.2, 22.3, 100, false},
	{1499.59998, -10.8, 22.3, 100, false},
	{1492.00000, -15.8, 22.3, 100, false},
	{1484.30005, -21.0, 21.8, 100, false},
	{1477.59998, -26.6, 22.3, 100, false},
	{1469.19995, -31.0, 20.8, 100, false},
	{1463.19995, -38.3, 20.8, 100, false},
	{1455.90002, -42.8, 21.0, 100, false},
	{1452.19995, -49.7, 21.0, 100, false},
	{1454.30005, -57.7, 20.3, 100, false},
	{1458.69995, -50.9, 20.3, 100, false},
	{1465.59998, -45.8, 20.3, 100, false},
	{1471.80005, -40.7, 20.3, 100, false},
	{1478.40002, -36.3, 20.3, 100, false},
	{1486.00000, -30.1, 20.3, 100, false},
	{1492.59998, -24.6, 20.3, 100, false},
	{1499.59998, -20.2, 20.3, 100, false},
	{1506.00000, -14.2, 20.3, 100, false},
	{1513.00000, -10.1, 20.3, 100, false},
	{1519.69995,  -8.5, 20.3, 100, false},
	{1525.59998, -11.4, 20.3, 100, false},
	{1530.40002, -13.6, 20.3, 100, false},
	{1523.59998, -17.1, 20.3, 100, false},
	{1513.90002, -16.1, 20.3, 100, false},
	{1519.90002, -22.5, 20.3, 100, false},
	{1514.09998, -26.8, 20.3, 100, false},
	{1507.40002, -21.2, 20.3, 100, false},
	{1501.19995, -25.9, 20.0, 100, false},
	{1505.80005, -31.0, 19.5, 100, false},
	{1499.09998, -34.8, 19.5, 100, false},
	{1494.09998, -29.0, 19.5, 100, false},
	{1486.69995, -35.8, 19.5, 100, false},
	{1492.00000, -41.7, 19.5, 100, false},
	{1478.50000, -42.7, 19.5, 100, false},
	{1474.30005, -53.1, 19.5, 100, false},
	{1485.40002, -46.8, 19.5, 100, false},
	{1480.40002, -49.6, 19.5, 100, false},
	{1467.09998, -55.1, 19.5, 100, false},
	{1458.40002, -56.9, 19.5, 100, false},
	{1461.09998, -66.3, 19.5, 100, false},
	{1469.80005, -63.4, 19.5, 100, false},
	{1479.00000, -58.8, 19.5, 100, false},
	{1488.90002, -55.5, 19.5, 100, false},
	{1496.59998, -49.4, 19.5, 100, false},
	{1505.90002, -44.1, 19.5, 100, false},
	{1513.30005, -37.9, 19.5, 100, false},
	{1520.90002, -31.6, 19.5, 100, false},
	{1528.09998, -27.5, 19.5, 100, false},
	{1535.50000, -23.3, 19.5, 100, false},
	{1537.90002, -32.0, 19.5, 100, false},
	{1530.59998, -36.4, 19.3, 100, false},
	{1524.80005, -40.4, 19.3, 100, false},
	{1517.80005, -45.2, 18.8, 100, false},
	{1511.40002, -49.6, 18.8, 100, false},
	{1504.40002, -55.7, 18.8, 100, false},
	{1497.59998, -60.4, 18.8, 100, false},
	{1490.00000, -65.7, 18.8, 100, false},
	{1479.80005, -68.2, 18.5, 100, false},
	{1471.09998, -71.5, 17.5, 100, false},
	{1464.09998, -76.3, 17.5, 100, false},
	{1468.69995, -82.9, 17.5, 100, false},
	{1475.50000, -78.2, 17.5, 100, false},
	{1483.59998, -75.0, 17.5, 100, false},
	{1493.19995, -70.5, 17.5, 100, false},
	{1500.80005, -65.2, 17.5, 100, false},
	{1511.09998, -61.1, 17.5, 100, false},
	{1518.69995, -57.1, 17.5, 100, false},
	{1527.80005, -52.6, 17.5, 100, false},
	{1534.80005, -47.8, 17.5, 100, false},
	{1541.40002, -43.2, 17.5, 100, false},
	{1543.09998, -54.3, 17.5, 100, false},
	{1541.50000, -65.9, 17.5, 100, false},
	{1538.00000, -76.6, 17.5, 100, false},
	{1532.90002, -86.7, 17.5, 100, false},
	{1523.50000, -93.3, 17.5, 100, false},
	{1512.40002, -99.3, 17.5, 100, false},
	{1502.80005, -105.2, 17.5, 100, false},
	{1491.69995, -109.0, 17.5, 100, false},
	{1482.69995, -107.1, 17.5, 100, false},
	{1478.80005, -98.9, 17.5, 100, false},
	{1476.00000, -89.5, 17.5, 100, false},
	{1485.40002, -91.4, 17.5, 100, false},
	{1491.59998, -99.6, 17.5, 100, false},
	{1501.09998, -95.0, 17.5, 100, false},
	{1496.00000, -86.7, 17.5, 100, false},
	{1485.90002, -81.7, 17.5, 100, false},
	{1495.90002, -77.0, 17.5, 100, false},
	{1503.09998, -84.9, 17.5, 100, false},
	{1509.19995, -91.4, 17.5, 100, false},
	{1519.40002, -85.1, 17.5, 100, false},
	{1511.59998, -77.6, 17.5, 100, false},
	{1504.09998, -71.6, 17.5, 100, false},
	{1515.69995, -69.5, 17.5, 100, false},
	{1524.19995, -78.1, 17.5, 100, false},
	{1525.30005, -68.0, 17.5, 100, false},
	{1532.30005, -69.0, 17.5, 100, false},
	{1534.80005, -58.7, 17.5, 100, false},
	{1525.30005, -60.4, 17.5, 100, false}
};

new FaObjectek[MAX_FA];

#define FK_SKINEK 7
new FrakcioSkinek[FK_SKINEK][] =
{
	{FRAKCIO_LSPD, 9,		280, 281, 266, 267, 265, 282, 283, 288, 284},//SCPD
	{FRAKCIO_LSFD, 3,		277,278,279},//Tûzoltóság
	{FRAKCIO_LAFD, 4, 		70, 274, 275, 276},//Mentõszolgálat
	{FRAKCIO_KORMANY, 9,	186,187,227,228,91,219,216,163,164}, //Önkormányzat
	{FRAKCIO_KATONA, 6,		287,61,71,179,191,73},//Special Force
	{FRAKCIO_SZERELO, 10,	8,268,42,50,42,8,268,42,50,42},//Szerelok
	{FRAKCIO_FBI, 8,		163, 164, 165, 166, 286, 294}
};

new FrakcioSzin[MAX_FRAKCIO] =
{
	NINCS,				//LSPD				1
	NINCS,				//Tûzoltóság		2
	NINCS,				//Mentõszolgálat	3
	COLOR_GREEN,		//GSF				4
	NINCS,				//Önkormányzat		5
	NINCS,				//Katona			6
	0xFF4500C8,			//vagos - sárga		7
	TEAM_BALLAS_COLOR,	//ballas			8
	0x8B4513C8,			//erebos -barna 	9
	NINCS,				//szerelõ			10
	0x33CCFFC8,			//surenos kék		11
	NINCS,				//riporter			12
	0xFF0000C8,			//LCN piros			13
	0xD900D3C8,			//yakuza - fekete	14
	NINCS,				//ATF				15
	0x00FFFFC8,			//Dublin Crew, aqua	16
	NINCS,
	NINCS,
	0xFF830000
	//0xFF6347C8
};

new tInfo[MAX_TERULET][terInfo];
new dInfo[MAX_DROP][dropObject];


new aWeaponModel[200] = {
   1575,  331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325, 326, 342, 343, 344, -1,  -1 , -1 ,
   346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
   368, 369, 1575
};

new aWeaponSlotok[48] = {
	0, // 0
	0, // 1
	1, // 2
	1, // 3
	1, // 4
	1, // 5
	1, // 6
	1, // 7
	1, // 8
	1, // 9
	10, // 10
	10, // 11
	10, // 12
	10, // 13
	10, // 14
	10, // 15
	8, // 16
	8, // 17
	8, // 18
	0, // 19
	0, // 20
	0, // 21
	2, // 22
	2, // 23
	2, // 24
	3, // 25
	3, // 26
	3, // 27
	4, // 28
	4, // 29
	5, // 30
	5, // 31
	4, // 32
	6, // 33
	6, // 34
	7, // 35
	7, // 36
	7, // 37
	7, // 38
	8, // 39
	12, // 40
	9, // 41
	9, // 42
	9, // 43
	11, // 44
	11, // 45
	11, // 46
	0 // 47 ???
};

new aWeaponNames[][32] = {
	{"Ököl"}, // 0
	{"Boxer"}, // 1
	{"Golf"}, // 2
	{"Stick"}, // 3
	{"Kés"}, // 4
	{"Baseball"}, // 5
	{"Shovel"}, // 6
	{"Pool"}, // 7
	{"Katana"}, // 8
	{"Láncfûrész"}, // 9
	{"PurpleDildo"}, // 10
	{"BigWhiteVibrator"}, // 11
	{"MediumWhiteVibrator"}, // 12
	{"SmallWhiteVibrator"}, // 13
	{"Virág"}, // 14
	{"Cane"}, // 15
	{"Gránát"}, // 16
	{"Teargas"}, // 17
	{"Molotov"}, // 18
	{" "}, // 19
	{" "}, // 20
	{" "}, // 21
	{"Colt45"}, // 22
	{"SilencedColt45"}, // 23
	{"Deagle"}, // 24
	{"Shotgun"}, // 25
	{"Sawnoff"}, // 26
	{"Combat"}, // 27
	{"Uzi"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4"}, // 31
	{"Tec9"}, // 32
	{"Rifle"}, // 33
	{"Sniper"}, // 34
	{"Rocket"}, // 35
	{"HRocket"}, // 36
	{"Flamethrower"}, // 37
	{"Minigun"}, // 38
	{"Satchel"}, // 39
	{"Detonator"}, // 40
	{"Spray"}, // 41
	{"Fire"}, // 42
	{"Camera"}, // 43
	{"NightVision"}, // 44
	{"InfraredVision"}, // 45
	{"Parachute"}, // 46
	{"FakePistol"} // 47
};

new Float:VehiclePos[MAX_VEHICLES][3];
new Szamok[MAX_PLAYERS][6];
new KapuID[MAX_PLAYERS];
new AutomataID[MAX_PLAYERS];
new SzerkesztesAllas[MAX_PLAYERS];
new Kapu[MAX_KAPU][kapuInfo];
new FUpdates[ MAX_FRAKCIO ][ fk_Update ];
new FInfo[ MAX_FRAKCIO ][ fkInfo ];
new sql_ID;

new TPInfo[MAX_TELEPORT][TpEnum];
#define UZENET_SIZE 256
new uzenet[UZENET_SIZE + 1];
new PlayerInfo[MAX_PLAYERS][playerInfo];
/*
#define MAX_NOTESZ 10
enum e_noEnum
{
	nSzoveg[128],
	nKinelVan
}
new PlayerNotesz[MAX_NOTESZ][e_noEnum];
*/
new vUpdates[MAX_VEHICLES][vehUpdate];
new vInfo[MAX_VEHICLES][vehicleInfo];
new vInfoID[MAX_VEHICLES];
new ServerInfo[serverInfo];
new HazInfo[MAX_HOUSE][houseInfo];
new BenzinkutInfo[MAX_BENZINKUT][benzinkutInfo];
new noclipdata[MAX_PLAYERS][noclipenum];

//ProgressBar-ok
new PlayerBar:VizeletBar[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...};
new PlayerBar:EhsegBar[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...};
new PlayerBar:BanyaBar[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...};
new Timer:BanyaBarTimer[MAX_PLAYERS],
	bool:BanyaBarTimerStat[MAX_PLAYERS],
	g_KovetVisz[MAX_PLAYERS][2];


//Bevásárlós:
#define MAX_KOSAR_CUCC 6 // = 5
#define MAX_KOSAR_SULY 5000 //gram
new BevasarloKosar[MAX_PLAYERS][4];
new BevasarloKosarCuccok[MAX_PLAYERS][MAX_KOSAR_CUCC];
new Float:BevasarloPolc[MAX_PLAYERS][3];


#define TAMOGATAS_BRONZ		0
#define TAMOGATAS_EZUST		1
#define TAMOGATAS_ARANY		2
#define TAMOGATAS_GYEMANT	3

new TamogatasInfo[4][] =
{
	//támogatás neve,		PP,			plusz fegyver,	hét (mpercben)
	{TAMOGATAS_BRONZ,		400,		0,			1 * 604800},
	{TAMOGATAS_EZUST,		800,		0,			2 * 604800},
	{TAMOGATAS_ARANY,		1600,		5,			4 * 604800},
	{TAMOGATAS_GYEMANT,		4000,		10,			6 * 604800}
};

new BelsoInterior[20][BelsoInteriorAdatok] =
{
	{2259.8435,		-1136.2699,		1050.6328,		254.2604,       10},
	{2233.4900,		-1114.4435,		1050.8828,      357.3481,       5},
	{2196.3943,		-1204.1359,     1049.0234,      78.2122,        6},
	{2318.1616,		-1026.3762,     1050.2109,      358.3114,       9},
	{421.8333,		2536.9814,      10.0000,		92.9158,        10},
	{234.6087,		1187.8195,      1080.2578,      349.4844,       3},
	{225.5707,		1240.0643,      1082.1406,      96.2852,        2},
	{223.2357,		1287.0824,      1082.1406,      359.868,        1},
	{226.7545,		1114.4180,      1080.9952,      267.4440,		5},
	{2269.9636,		-1210.3275,     1047.5625,      89.8057,        10},
	{2496.2087,		-1692.3149,     1014.7422,      181.4683,       3},
	{1299.1381,		-796.1603,      1084.0078,      0.0000,			5},
	{318.8655,		1115.1758,      1083.8828,      2.0485,         5},
	{2324.3159,		-1148.7551,     1050.7101,      2.1677,         12},
	{2365.0630,		-1135.2068,     1050.8750,      357.6382,       8},
	{2283.0852,		-1139.4916,     1050.8984,      359.7849,       11},
	{736.103, 		1671.874, 		501.085,        359.045,        0},
	{44.121, 		15.393, 		999.980,		180.176,        0},
	{5613.233, 		-487.713, 		506.968,        358.969,        0},
	{2807.771, 		-1174.800, 		1025.570,       0.0000,         8}
};


new bool:Kicked[MAX_PLAYERS];
stock _Kick(playerid, bool:lewistis = false)
{
	if(lewistis && IsLewis(playerid)) return false;

    defer Kick2[500](playerid);

    Kicked[playerid] = true;
	return true;
}
timer Kick2[500](playerid){
	return Kick(playerid);
}
#define Kick _Kick
//###########################################
//###########################################

new bool:g_Fegyverek[MAX_PLAYERS][47];
new bool:g_DrivingVehicle[MAX_PLAYERS];
new bool:g_IsPassenger[MAX_PLAYERS];
new g_DrivenVehicleID[MAX_PLAYERS];

stock _SetPlayerAmmo(playerid, weapon, ammo)
{
	if(ammo == 0)
	    g_Fegyverek[playerid][weapon] = false;
	    
	return SetPlayerAmmo(playerid, weapon, ammo);
}
#define SetPlayerAmmo _SetPlayerAmmo
stock _GivePlayerWeapon(playerid, weapon, ammo)
{
    if(ammo != 0)
		g_Fegyverek[playerid][weapon] = true;
		
    return GivePlayerWeapon(playerid, weapon, ammo);
}
#define GivePlayerWeapon _GivePlayerWeapon
stock _ResetPlayerWeapons(playerid)
{
	new i = NINCS;
	for(; ++i < 47;)
	{
	    g_Fegyverek[playerid][i] = false;
 	}
	    
	return ResetPlayerWeapons(playerid);
}
#define ResetPlayerWeapons _ResetPlayerWeapons
//###########################################
//###########################################

new g_ObjectetEditel[MAX_PLAYERS] = NINCS;
stock _EditDynamicObject(playerid, objectid){
	if(!IsValidDynamicObject(objectid)) return false;
	g_ObjectetEditel[playerid] = objectid;
    return EditDynamicObject(playerid, objectid);
}
#define EditDynamicObject _EditDynamicObject
stock _CancelEdit(playerid){
    g_ObjectetEditel[playerid] = NINCS;
	return CancelEdit(playerid);
}
#define CancelEdit _CancelEdit
//###########################################
new g_AttachedObj[MAX_PLAYERS][MAX_PLAYER_ATTACHED_OBJECTS];
stock _SetPlayerAttachedObject(playerid, slot, objectid, bone, Float:x = 0.0, Float:y = 0.0, Float:z = 0.0, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0, Float:sx = 1.0, Float:sy = 1.0, Float:sz = 1.0, materialcolor1 = 0, materialcolor2 = 0)
{
	new set = SetPlayerAttachedObject(playerid, slot, objectid, bone, x, y, z, rx, ry, rz, sx, sy, sz, materialcolor1, materialcolor2);
	if(set)
	    g_AttachedObj[playerid][slot] = objectid;

	return set;
}
#define SetPlayerAttachedObject _SetPlayerAttachedObject
stock _RemovePlayerAttachedObject(playerid, slot)
{
    g_AttachedObj[playerid][slot] = NINCS;
    return RemovePlayerAttachedObject(playerid, slot);
}
#define RemovePlayerAttachedObject _RemovePlayerAttachedObject
//###########################################

stock _DestroyVehicle(vehicleid)
{
    CallLocalFunction("OnVehicleDestroy", "i", vehicleid);
	return DestroyVehicle(vehicleid);
}
#define DestroyVehicle _DestroyVehicle
//###########################################
new v_interior[MAX_VEHICLES],
	v_virtualworld[MAX_VEHICLES];

stock _SetVehicleVirtualWorld(vehicleid, vwid)
{
    v_virtualworld[vehicleid] = vwid;
	return SetVehicleVirtualWorld(vehicleid, vwid);
}
#define SetVehicleVirtualWorld _SetVehicleVirtualWorld

stock _LinkVehicleToInterior(vehicleid, interiorid)
{
	v_interior[vehicleid] = interiorid;
	return LinkVehicleToInterior(vehicleid, interiorid);
}
stock GetVehicleInterior(vehicleid)
{
	return v_interior[vehicleid];
}
#define LinkVehicleToInterior _LinkVehicleToInterior
//###########################################
stock _SetVehicleToRespawn(kocsiid)
{
	SetVehicleToRespawn(kocsiid);
	new vid = JarmuID(kocsiid, INVALID_PLAYER_ID);
	if(vid)
	{
		LinkVehicleToInterior(vInfo[vid][vID], vInfo[vid][vInt]);
		SetVehicleVirtualWorld(vInfo[vid][vID],vInfo[vid][vVW]);
 	}

}
#define SetVehicleToRespawn _SetVehicleToRespawn


stock KomponensAra(id)
{
	switch(id)
	{
		case 1000: return 250000;
		case 1001: return 200000;
		case 1002: return 150000;
		case 1003: return 100000;
		case 1004: return 250000;
		case 1005: return 200000;
		case 1006: return 150000;
		case 1007: return 100000;
		case 1008: return 500000;
		case 1009: return 200000;
		case 1010: return 1000000;
		case 1011: return 500000;
		case 1012: return 500000;
		case 1013: return 250000;
		case 1014: return 250000;
		case 1015: return 250000;
		case 1016: return 250000;
		case 1017: return 300000;
		case 1018: return 200000;
		case 1019: return 250000;
		case 1020: return 300000;
		case 1021: return 350000;
		case 1022: return 400000;
		case 1023: return 450000;
		case 1024: return 200000;
		case 1025: return 100000;
		case 1026: return 150000;
		case 1027: return 150000;
		case 1028: return 200000;
		case 1029: return 200000;
		case 1030: return 250000;
		case 1031: return 250000;
		case 1032: return 200000;
		case 1033: return 250000;
		case 1034: return 300000;
		case 1035: return 300000;
		case 1036: return 300000;
		case 1037: return 300000;
		case 1038: return 500000;
		case 1039: return 400000;
		case 1040: return 400000;
		case 1041: return 400000;
		case 1042: return 400000;
		case 1043: return 300000;
		case 1044: return 350000;
		case 1045: return 300000;
		case 1046: return 400000;
		case 1047: return 500000;
		case 1048: return 500000;
		case 1049: return 300000;
		case 1050: return 300000;
		case 1051: return 300000;
		case 1052: return 400000;
		case 1053: return 500000;
		case 1054: return 400000;
		case 1055: return 500000;
		case 1056: return 300000;
		case 1057: return 300000;
		case 1058: return 300000;
		case 1059: return 500000;
		case 1060: return 350000;
		case 1061: return 500000;
		case 1062: return 400000;
		case 1063: return 400000;
		case 1064: return 300000;
		case 1065: return 300000;
		case 1066: return 300000;
		case 1067: return 500000;
		case 1068: return 500000;
		case 1069: return 300000;
		case 1070: return 300000;
		case 1071: return 300000;
		case 1072: return 300000;
		case 1073: return 200000;
		case 1074: return 200000;
		case 1075: return 200000;
		case 1076: return 200000;
		case 1077: return 200000;
		case 1078: return 200000;
		case 1079: return 200000;
		case 1080: return 200000;
		case 1081: return 200000;
		case 1082: return 200000;
		case 1083: return 200000;
		case 1084: return 200000;
		case 1085: return 200000;
		case 1086: return 250000;
		case 1087: return 1000000;
		case 1088: return 500000;
		case 1089: return 300000;
		case 1090: return 400000;
		case 1091: return 500000;
		case 1092: return 300000;
		case 1093: return 200000;
		case 1094: return 200000;
		case 1095: return 200000;
		case 1096: return 300000;
		case 1097: return 300000;
		case 1098: return 300000;
		case 1099: return 400000;
		case 1100: return 400000;
		case 1101: return 300000;
		case 1102: return 300000;
		case 1103: return 500000;
		case 1104: return 350000;
		case 1105: return 350000;
		case 1106: return 300000;
		case 1107: return 300000;
		case 1108: return 300000;
		case 1109: return 400000;
		case 1110: return 400000;
		case 1111: return 200000;
		case 1112: return 200000;
		case 1113: return 300000;
		case 1114: return 300000;
		case 1115: return 300000;
		case 1116: return 300000;
		case 1117: return 400000;
		case 1118: return 400000;
		case 1119: return 400000;
		case 1120: return 400000;
		case 1121: return 400000;
		case 1122: return 400000;
		case 1123: return 400000;
		case 1124: return 400000;
		case 1125: return 400000;
		case 1126: return 300000;
		case 1127: return 350000;
		case 1128: return 500000;
		case 1129: return 350000;
		case 1130: return 500000;
		case 1131: return 400000;
		case 1132: return 350000;
		case 1133: return 400000;
		case 1134: return 400000;
		case 1135: return 300000;
		case 1136: return 300000;
		case 1137: return 400000;
		case 1138: return 350000;
		case 1139: return 400000;
		case 1140: return 400000;
		case 1141: return 400000;
		case 1142: return 300000;
		case 1143: return 300000;
		case 1144: return 300000;
		case 1145: return 250000;
		case 1146: return 250000;
		case 1147: return 350000;
		case 1148: return 350000;
		case 1149: return 350000;
		case 1150: return 350000;
		case 1151: return 350000;
		case 1152: return 350000;
		case 1153: return 350000;
		case 1154: return 350000;
		case 1155: return 350000;
		case 1156: return 350000;
		case 1157: return 350000;
		case 1158: return 400000;
		case 1159: return 450000;
		case 1160: return 450000;
		case 1161: return 400000;
		case 1162: return 400000;
		case 1163: return 350000;
		case 1164: return 400000;
		case 1165: return 500000;
		case 1166: return 400000;
		case 1167: return 350000;
		case 1168: return 250000;
		case 1169: return 600000;
		case 1170: return 350000;
		case 1171: return 400000;
		case 1172: return 350000;
		case 1173: return 400000;
		case 1174: return 350000;
		case 1175: return 350000;
		case 1176: return 400000;
		case 1177: return 350000;
		case 1178: return 350000;
		case 1179: return 400000;
		case 1181: return 350000;
		case 1182: return 400000;
		case 1183: return 400000;
		case 1184: return 350000;
		case 1185: return 350000;
		case 1186: return 400000;
		case 1187: return 350000;
		case 1188: return 350000;
		case 1189: return 400000;
		case 1190: return 350000;
		case 1191: return 400000;
		case 1192: return 350000;
		case 1193: return 400000;
		default: return 1000000;
	}
	return 1000000;
}
    
static ModName[][64] = {
{"Pro Hátsószárny"},{"Gyõzelmi Hátsószárny"},{"Gyorsulási Hátsószárny"},{"Alpha Hátsószárny"},{"Bajnok légbeömlõs Motorháztetõ"},
{"Különös légbeömlõs Motorház"},{"Tetõ légbeömlõ"},{"Jobb oldali küszöb"},{"5x Nitro palack"},{"2x Nitro palack"},{"10x Nitro palack"},
{"Verseny légbeömlõs Motorháztetõ"},{"Extra légbeömlõs Motorháztetõ"},{"Kör alakú ködlámpák"},{"Bajnoki hátsószárny"},{"Verseny hátsószárny"},
{"Extra hátsószárny"},{"Bal oldali küszöb"},{"Mély Kipufogó"},{"Iker Kipufogó"},{"Nagy Kipufogó"},
{"Közepes Kipufogó"},{"Kis Kipufogó"},{"Különös hátsószárny"},{"Négyzet alakú ködlámpa"},{"Offroad felni"},
{"Jobboldali alien küszöb 'Sultan'"},{"Baloldali alien küszöb 'Sultan'"},{"Alien Kipufogó 'Sultan'"},
{"X-Flow Kipufogó 'Sultan'"},{"Baloldali X-Flow küszöb 'Sultan'"},{"Jobboldali X-Flow küszöb 'Sultan'"},
{"Alien tetõ légbeömlõ 'Sultan'"},{"X-Flow tetõ légbeömlõ 'Sultan'"},{"Alien Kipufogó 'Elegy'"},{"X-Flow légbeömlõ 'Elegy'"},
{"Jobboldali alien küszöb 'Elegy'"},{"X-Flow Kipufogó 'Elegy'"},{"Alien légbeömlõ 'Elegy'"},{"Baloldali X-Flow küszöb 'Elegy'"},
{"Baloldali alien küszöb 'Elegy'"},{"Jobboldali X-Flow küszöb 'Elegy'"},{"Jobboldali króm küszöb 'Broadway'"},
{"Slamin Kipufogó 'Broadway'"},{"Chrome Kipufogó 'Broadway'"},{"X-Flow Kipufogó 'Flash'"},{"Alien Kipufogó 'Flash'"},
{"Jobboldali alien küszöb 'Flash'"},{"Jobboldali X-Flow küszöb 'Flash'"},{"Alien hátsószárny 'Flash'"},{"X-Flow Hátsószárny 'Flash'"},
{"Baloldali alien küszöb 'Flash'"},{"Baloldali X-Flow küszöb 'Flash'"},{"X-Flow tetõ légbeömlõ 'Flash'"},{"Alien légbeömlõ 'Flash'"},
{"Alien tetõ 'Stratum'"},{"Jobboldali alien küszöb 'Stratum'"},{"Jobboldali X-Flow küszöb 'Stratum'"},{"Alien Hátsószárny 'Stratum'"},
{"X-Flow Kipufogó 'Stratum'"},{"X-Flow hátsószárny 'Stratum'"},{"X-Flow Roof 'Stratum'"},{"Baloldali Alien küszöb 'Stratum'"},
{"Baloldali X-Flow küszöb 'Stratum'"},{"Alien Kipufogó 'Stratum'"},{"Alien Kipufogó 'Jester'"},{"X-Flow Kipufogó 'Jester'"},
{"Alien Roof 'Jester'"},{"X-Flow Roof 'Jester'"},{"Jobboldali Alien küszöb 'Jester'"},{"Jobboldali X-Flow küszöb 'Jester'"},
{"Baloldali Alien küszöb 'Jester'"},{"Baloldali X-Flow küszöb 'Jester'"},{"Shadow felni"},{"Mega felni"},{"felnishine felni"},
{"Wires felni"},{"Classic felni"},{"Twist felni"},{"Cutter felni"},{"Switch felni"},{"Grove felni"},{"Import felni"},
{"Dollar felni"},{"Trance felni"},{"Atomic felni"},{"Stereo Sound"},{"Hidraulika"},{"Alien Roof 'Uranus'"},{"X-Flow Kipufogó 'Uranus'"},
{"Jobboldali Alien küszöb 'Uranus'"},{"X-Flow Roof 'Uranus'"},{"Alien Kipufogó 'Uranus'"},{"Jobboldali X-Flow küszöb 'Uranus'"},
{"Baloldali Alien küszöb 'Uranus'"},{"Jobboldali X-Flow küszöb 'Uranus'"},{"Ahab felni"},{"Virtual felni"},{"Access felni"},
{"Baloldali Chrome küszöb 'Broadway'"},{"Chrome Grill Bullbar 'Remington'"},{"Baloldali 'Chrome Flames' küszöb 'Remington'"},
{"Baloldali 'Chrome Strip' küszöb 'Savanna'"},{"Corvetible Roof 'Blade'"},{"Chrome Kipufogó 'Blade'"},{"Slamin Kipufogó 'Blade'"},
{"Jobboldali 'Chrome Arches' küszöb 'Remington'"},{"Baloldali 'Chrome Strip' küszöb 'Blade'"},{"Jobboldali 'Chrome Strip' küszöb 'Blade'"},
{"Chrome Rear Bullbars 'Slamvan'"},{"Slamin Rear Bullbars 'Slamvan'"},{"Little Front Sign? 'Slamvan'"},{"Little Front Sign? 'Slamvan'"},
{"Chrome Kipufogó 'Slamvan'"},{"Slamin Kipufogó 'Slamvan'"},{"Chrome Front Bullbars 'Slamvan'"},{"Slamin Front Bullbars 'Slamvan'"},
{"Chrome Elsõ lökhárító 'Slamvan'"},{"Jobboldali 'Chrome Tfelni' küszöb 'Slamvan'"},{"Jobboldali 'Wheelcovers' küszöb 'Slamvan'"},
{"Baloldali 'Chrome Trim' küszöb 'Slamvan'"},{"Baloldali 'Wheelcovers' küszöb 'Slamvan'"},{"Jobboldali 'Chrome Flames' küszöb 'Remington'"},
{"Bullbar Chrome galytörõ 'Remington'"},{"Baloldali 'Chrome Arches' küszöb 'Remington'"},{"Bullbar Chrome Lights 'Remongton'"},
{"Chrome Kipufogó 'Remington'"},{"Slamin Kipufogó 'Remington'"},{"Vinyl keménytetõ 'Blade'"},{"Chrome Kipufogó 'Savanna'"},
{"Keménytetõ Roof 'Savanna'"},{"Softtop Roof 'Savanna'"},{"Slamin Kipufogó 'Savanna'"},{"Jobboldali 'Chrome Strip' küszöb 'Savanna'"},
{"Jobboldali 'Chrome Strip' küszöb 'Tornado'"},{"Slamin Kipufogó 'Tornado'"},{"Chrome Kipufogó 'Tornado'"},{"Baloldali 'Chrome Strip' küszöb 'Tornado'"},
{"Alien hátsószárny 'Sultan'"},{"X-Flow hátsószárny 'Sultan'"},{"X-Flow Hátsó lökhárító 'Sultan'"},{"Alien Hátsó lökhárító 'Sultan'"},
{"Baloldali Oval díszítõelem"},{"Jobboldali Oval díszítõelem"},{"Baloldali Square díszítõelem"},{"Jobboldali Square díszítõelem"},{"X-Flow hátsószárny 'Elegy'"},
{"Alien hátsószárny 'Elegy'"},{"X-Flow Hátsó lökhárító 'Elegy'"},{"Alien Hátsó lökhárító 'Elegy'"},{"Alien Hátsó lökhárító 'Flash'"},
{"X-Flow Hátsó lökhárító 'Flash'"},{"X-Flow Elsõ lökhárító 'Flash'"},{"Alien Elsõ lökhárító 'Flash'"},{"Alien Hátsó lökhárító 'Stratum'"},
{"Alien Elsõ lökhárító 'Stratum'"},{"X-Flow Hátsó lökhárító 'Stratum'"},{"X-Flow Elsõ lökhárító 'Stratum'"},{"X-Flow hátsószárny 'Jester'"},
{"Alien Hátsó lökhárító 'Jester'"},{"Alien Elsõ lökhárító 'Jester'"},{"X-Flow Hátsó lökhárító 'Jester'"},{"Alien hátsószárny 'Jester'"},
{"X-Flow hátsószárny 'Uranus'"},{"Alien hátsószárny 'Uranus'"},{"X-Flow Elsõ lökhárító 'Uranus'"},{"Alien Elsõ lökhárító 'Uranus'"},
{"X-Flow Hátsó lökhárító 'Uranus'"},{"Alien Hátsó lökhárító 'Uranus'"},{"Alien Elsõ lökhárító 'Sultan'"},{"X-Flow Elsõ lökhárító 'Sultan'"},
{"Alien Elsõ lökhárító 'Elegy'"},{"X-Flow Elsõ lökhárító 'Elegy'"},{"X-Flow Elsõ lökhárító 'Jester'"},{"Chrome Elsõ lökhárító 'Broadway'"},
{"Slamin Elsõ lökhárító 'Broadway'"},{"Chrome Hátsó lökhárító 'Broadway'"},{"Slamin Hátsó lökhárító 'Broadway'"},{"Slamin Hátsó lökhárító 'Remington'"},
{"Chrome Elsõ lökhárító 'Remington'"},{"Chrome Hátsó lökhárító 'Remington'"},{"Slamin Elsõ lökhárító 'Blade'"},{"Chrome Elsõ lökhárító 'Blade'"},
{"Slamin Hátsó lökhárító 'Blade'"},{"Chrome Hátsó lökhárító 'Blade'"},{"Slamin Elsõ lökhárító 'Remington'"},{"Slamin Hátsó lökhárító 'Savanna'"},
{"Chrome Hátsó lökhárító 'Savanna'"},{"Slamin Elsõ lökhárító 'Savanna'"},{"Chrome Elsõ lökhárító 'Savanna'"},{"Slamin Elsõ lökhárító 'Tornado'"},
{"Chrome Elsõ lökhárító 'Tornado'"},{"Chrome Hátsó lökhárító 'Tornado'"},{"Slamin Hátsó lökhárító 'Tornado'"}};

stock GetComponentName(componentid) return ModName[componentid-1000];


new MAX_Benzin[212] = {
	60,60,60,300,60,60,60,60,60,
	60,60,60,60,60,100,60,120,60,60,60,60,60,60,60,
	60,60,60,100,100,60,60,120,120,150,60,60,60,150,
	60,60,60,60,60,80,200,60,60,60,30,60,60,60,60,60,
	60,100,100,30,60,60,60,60,30,60,60,60,60,60,40,
	60,80,30,60,60,60,60,60,60,60,60,60,60,60,60,60,
	60,60,60,60,80,80,60,60,60,60,60,60,60,60,60,60,60,
	60,60,60,60,60,60,100,60,60,60,60,60,300,300,60,60,
	60,60,60,40,40,40,60,60,60,60,80,60,60,40,60,60,
	60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
	60,60,60,60,60,60,200,200,60,60,60,60,60,60,60,
	60,60,60,60,60,60,60,15,100,40,60,60,60,100,60,
	60,60,80,60,60,60,60,60,80,60,60,60,60,60,60,60,
	60,60,60,80,60,150,60,60,60,60,60,60,60,100,60,60
};

new Uzemanyagok[212] = { //0 = Semmi, 1 = Benzin, 2 = Diesel.
	2, //Landstalker (400)
	1, //Bravura (401)
	1, //Buffalo (402)
	2, //Linerunner (403)
	2, //Perenail (404)
	1, //Sentinel (405)
	2, //Dumper (406)
	2, //Firetruck (407)
	2, //Trashmaster (408)
	1, //Stretch (409)
	1, //Manana (410)
	1, //Infernus (411)
	1, //Voodoo (412)
	2, //Pony (413)
	2, //Mule (414)
	1, //Cheetah (415)
	2, //Ambulance (416)
	0, //Leviathan (417)
	2, //Moonbeam (418)
	2, //Esperanto (419)
	1, //Taxi (420)
	1, //Washington (421)
	2, //Bobcat (422)
	2, //Mr Whoopee (423)
	1, //BF Injection (424)
	0, //Hunter (425)
	1, //Premier (426)
	2, //Enforcer (427)
	2, //Securicar (428)
	1, //Banshee (429)
	0, //Predator (430)
	2, //Bus (431)
	2, //Rhino (432)
	2, //Barracks (433)
	1, //Hotknife (434)
	0, //Artic trailer 1 (435)
	1, //Previon (436)
	2, //Coach (437)
	1, //Cabbie (438)
	1, //Stallion (439)
	2, //Rumpo (440)
	0, //RC Bandit (441)
	1, //Romero (442)
	2, //Packer (443)
	2, //Monster (444)
	1, //Admiral (445)
	0, //Squalo (446)
	0, //Seasparrow (447)
	1, //Pizza boy (448)
	0, //Tram (449)
	0, //Artic trailer 2 (450)
	1, //Turismo (451)
	0, //Speeder (452)
	0, //Reefer (453)
	0, //Tropic (454)
	2, //Flatbed (455)
	2, //Yankee (456)
	1, //Caddy (457)
	1, //Solair (458)
	2, //Top fun (459)
	0, //Skimmer (460)
	1, //PCJ 600 (461)
	1, //Faggio (462)
	1, //Freeway (463)
	0, //RC Baron (464)
	0, //RC Raider (465)
	1, //Glendale (466)
	1, //Oceanic (467)
	1, //Sanchez (468)
	0, //Sparrow (469)
	2, //Patriot (470)
	1, //Quad (471)
	0, //Coastguard (472)
	0, //Dinghy (473)
	1, //Hermes (474)
	1, //Sabre (475)
	0, //Rustler (476)
	1, //ZR 350 (477)
	1, //Walton (478)
	1, //Regina (479)
	1, //Comet (480)
	0, //BMX (481)
	1, //Burrito (482)
	2, //Camper (483)
	0, //Marquis (484)
	1, //Baggage (485)
	2, //Dozer (486)
	0, //Maverick (487)
	0, //VCN Maverick (488)
	2, //Rancher (489)
	2, //FBI Rancher (490)
	1, //Virgo (491)
	1, //Greenwood (492)
	0, //Jetmax (493)
	1, //Hotring (494)
	2, //Sandking (495)
	1, //Blista Compact (496)
	0, //Police Maverick (497)
	2, //Boxville (498)
	2, //Benson (499)
	2, //Mesa (500)
	0, //RC Goblin (501)
	1, //Hotring A (502)
	1, //Hotring B (503)
	1, //Blood ring banger (504)
	2, //Rancher(lure) (505)
	1, //Super GT (506)
	1, //Elegant (507)
	2, //Journey (508)
	0, //Bike (509)
	0, //Mountain Bike (510)
	0, //Beagle (511)
	0, //Cropduster (512)
	0, //Stuntplane (513)
	2, //Petrol (514)
	2, //Roadtrain (515)
	1, //Nebula (516)
	1, //Majestic (517)
	1, //Buccaneer (518)
	0, //Shamal (519)
	0, //Hydra (520)
	1, //FCR 900 (521)
	1, //NRG 500 (522)
	1, //HPV 1000 (523)
	2, //Cement Truck (524)
	2, //Towtruck (525)
	1, //Fortune (526)
	1, //Cadrona (527)
	2, //FBI Truck (528)
	1, //Williard (529)
	1, //Fork lift (530)
	2, //Tractor (531)
	2, //Combine (532)
	1, //Feltzer (533)
	1, //Remington (534)
	1, //Slamvan (535)
	1, //Blade (536)
	0, //Freight (537)
	0, //Streak (538)
	1, //Vortex (539)
	1, //Vincent (540)
	1, //Bullet (541)
	1, //Clover (542)
	1, //Sadler (543)
	2, //Firetruck LA (544)
	1, //Hustler (545)
	1, //Intruder (546)
	1, //Primo (547)
	0, //Cargobob (548)
	1, //Tampa (549)
	1, //Sunrise (550)
	1, //Merit (551)
	2, //Utility van (552)
	0, //Nevada (553)
	2, //Yosemite (554)
	1, //Windsor (555)
	2, //Monster A (556)
	2, //Monster B (557)
	1, //Uranus (558)
	1, //Jester (559)
	1, //Sultan (560)
	1, //Stratum (561)
	1, //Elegy (562)
	0, //Raindance (563)
	0, //RC Tiger (564)
	1, //Flash (565)
	1, //Tahoma (566)
	1, //Savanna (567)
	1, //Bandito (568)
	0, //Freight flat (569)
	0, //Streak (570)
	1, //Kart (571)
	1, //Mower (572)
	2, //Duneride (573)
	1, //Sweeper (574)
	1, //Broadway (575)
	1, //Tornado (576)
	0, //AT 400 (577)
	2, //DFT 30 (578)
	2, //Huntley (579)
	1, //Stafford (580)
	1, //BF 400 (581)
	2, //News Van (582)
	1, //Tug (583)
	0, //Petrol tanker (584)
	1, //Emperor (585)
	1, //Wayfarer (586)
	1, //Euros (587)
	2, //Hotdog (588)
	1, //Club (589)
	0, //Freight box (590)
	0, //Artic trailer 3 (591)
	0, //Andromada (592)
	0, //Dodo (593)
	0, //RC Cam (594)
	0, //Launch (595)
	1, //Cop car LS (596)
	1, //Cop car SF (597)
	1, //Cop car LV (598)
	2, //Ranger (599)
	1, //Picador (600)
	2, //SWAT Tank (601)
	1, //Alpha (602)
	1, //Phoenix (603)
	2, //Glendale(damaged) (604)
	2, //Sadler(damaged) (605)
	0, //Bag box A (606)
	0, //Bag box B (607)
	0, //Stairs (608)
	2, //Boxville (609)
	0, //Farm trailer (610)
	0 //Utility van trailer (611)
};

new VehicleNames[212][] = {
{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},
{"Firetruck"},{"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},
{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},{"Washington"},
{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Hunter"},{"Premier"},{"Enforcer"},{"Securicar"},
{"Banshee"},{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Trailer 1"},{"Previon"},
{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},
{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer 2"},{"Turismo"},
{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC Van"},
{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},
{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},
{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},
{"Baggage"},{"Dozer"},{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},
{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"},
{"Mesa"},{"RC Goblin"},{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},
{"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},
{"Tanker"}, {"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},
{"NRG-500"},{"HPV1000"},{"Cement Truck"},{"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},
{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},
{"Blade"},{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},
{"Firetruck"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},
{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},{"MonsterA"},{"MonsterB"},{"Uranus"},{"Jester"},
{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},
{"Bandito"},{"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},
{"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},
{"Tug"},{"Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"Freight Carriage"},
{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"LSPD"},{"SFPD"},
{"LVPD"},{"Police Ranger"},{"Picador"},{"SWAT Van"},{"Alpha"},{"Phoenix"},{"Glendale"},
{"Sadler"},{"Trailer A"},{"Trailer B"},{"Trailer"},{"Boxville"},{"Farm Plow"},
{"Utility Trailer"}
};
/* -------------- TextDrawok --------------------- */

new AjtoInfo[MAX_AJTO][ajtoAdatok];
new PlayerTimers[MAX_PLAYERS][e_pTimers];
new AutomataInfo[MAX_AUTOMATA][automataInfo];
new Float:vehicleh[MAX_VEHICLES];
new vehlastshot[MAX_VEHICLES];
/* -------------- Változók vége --------------*/

main()
{
	getdate(DatumEv, DatumHonap, DatumNap);
	format(JelenlegiDatum, 12, "%d-%d-%d", DatumEv, DatumHonap, DatumNap);
	
	new i = NINCS;
	ZuzoGepStat[zBezuzva] = 0;
 	ZuzoGepStat[zKovekOssz] = 0;
	ZuzoGepStat[zDolgozik] = false;
	ZuzoGepStat[zKovekFolyamatban] = 0;
	ZuzoGepStat[zPlayer] = INVALID_PLAYER_ID;
	for(; ++i < 9;)
	    ZuzoGepStat[zKovek][i] = NINCS;
}

/*---------------- Martin javítások, AntiCheat-ek ----------------*/

fpublic mAC_ShowPlayerDialog(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	//printf("mAC_ShowPlayerDialog(playerid: %d, dialogid: %d, style: %d, caption: %s, info: %s, button1: %s, button2: %s)", playerid, dialogid, style, caption, info, button1, button2);
	PlayerInfo[playerid][pDialogID] = dialogid;
	return ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2);
}

stock escape(string[])
{
	new esc_string[512];

	mysql_real_escape_string(string, esc_string, sql_ID, sizeof(esc_string));
	return esc_string;
}
stock ShowIphoneMenu(playerid, menuid)
{
	switch(menuid)
	{
	    case 1:
	    {
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Clock][0]);
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Clock][1]);
	    }
	    case 2:
	    {
	        iPhone_CC[3][playerid] = 1;
	        firstperson[playerid] = CreateObject(19300, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
	        AttachObjectToPlayer(firstperson[playerid],playerid, 0.0, 0.12, 0.7, 0.0, 0.0, 0.0);
	        AttachCameraToObject(playerid, firstperson[playerid]);
	    }
	    case 3:
	    {
	        iPhone_CC[0][playerid] = 1;
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Gallery]);
			PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery]);
	    }
	    case 4:
	    {
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Time][0]);
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Time][1]);
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Time][2]);
	    }
	    case 5:
	    {
	        SelectTextDraw(playerid, -1);
	        PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator]);
	        loop(0, sizeof(g_TextDraw[td_iPhone_Calculator]), PHONE) TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Calculator][PHONE]);
	    }
	    case 6:
	    {
	        GetPlayerZone(playerid);
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_GPS]);
	        PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_GPS]);
	    }
	    case 7:
	    {
	        iPhone_CC[1][playerid] = 1;
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Radio][0]);
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Radio][1]);
	    }
	    case 8:
	    {
	        iPhone_CC[2][playerid] = 1;
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Music][0]);
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Music][1]);
	    }
	    case 9: TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Map]);
	    case 10:
	    {
	        SelectTextDraw(playerid, -1);
	        loop(0, sizeof(g_TextDraw[td_iPhone_Call]), PHONE) TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Call][PHONE]);
	        PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call]);
	        SendClientMessage(playerid, -1,"Kilépéshez 1. ESC 2. N gomb!");
	    }
	    case 11:
	    {
	        //TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Internet][0]);
	        //TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_Internet][1]);
	        //TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_SMS][0]);
			TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_SMS][1]);
			//ShowPlayerDialog(playerid, DIALOG_SMS, DIALOG_STYLE_INPUT, "SMS Küldés", "Írd be a telefonszámot", "Mehet", "Mégse");
	    }
	    case 12:
	    {
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_SMS][0]);
			TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_SMS][1]);
			
	    }
	}
	return 1;
}

stock HideIphoneMenu(playerid)
{
	if(iPhoneCallStatus[playerid] == 1) return 1;
	else if(iPhoneCallStatus[playerid] == 2)
	{
	    iPhoneCallStatus[playerid] = 0;
	    iPhoneCallStatus[callto[playerid]] = 0;
	    
	    iPhoneHivo[playerid] = false;
	    iPhoneHivo[callto[playerid]] = false;
	    
	    iPhoneStatus[playerid] = 0;
        iPhoneStatus[callto[playerid]] = 0;

        loop(0, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][PHONE]);
	    loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);
	    PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call]);
     	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][0]);
		TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][1]);

		loop(0, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone][PHONE]);
	    loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(callto[playerid], g_PlayerTextDraw[ callto[playerid] ][ptd_iPhone][PPHONE]);
	    PlayerTextDrawHide(callto[playerid], g_PlayerTextDraw[ callto[playerid] ][ptd_iPhone_Call]);
     	TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone_CallYesNo][0]);
		TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone_CallYesNo][1]);

		SendClientMessage(callto[playerid], -1, "Nincs válasz...");
        callto[callto[playerid]] = 0;
	    callto[playerid] = 0;
	    return 1;
	}
	else if(iPhoneCallStatus[playerid] == 3)
	{
	    iPhoneCallStatus[playerid] = 0;
	    iPhoneCallStatus[callto[playerid]] = 0;
	    
	    iPhoneHivo[playerid] = false;
	    iPhoneHivo[callto[playerid]] = false;
	    
	    iPhoneStatus[playerid] = 0;
        iPhoneStatus[callto[playerid]] = 0;

        loop(0, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][PHONE]);
	    loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);
	    PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call]);
     	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][0]);
		TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][1]);

		loop(0, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone][PHONE]);
	    loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(callto[playerid], g_PlayerTextDraw[ callto[playerid] ][ptd_iPhone][PPHONE]);
	    PlayerTextDrawHide(callto[playerid], g_PlayerTextDraw[ callto[playerid] ][ptd_iPhone_Call]);
     	TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone_CallYesNo][0]);
		TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone_CallYesNo][1]);

		SendClientMessage(callto[playerid], -1, "A telefont lerakták.");
        callto[callto[playerid]] = 0;
	    callto[playerid] = 0;
	    return 1;
	}
    CancelSelectTextDraw(playerid);
	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Clock][0]);
	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Clock][1]);
	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Gallery]);
	PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery]);
	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Time][0]);
    TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Time][1]);
    TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Time][2]);
    TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_GPS]);
    PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_GPS]);
    TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Radio][0]);
	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Radio][1]);
	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Music][0]);
 	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Music][1]);
 	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Map]);
 	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Internet][0]);
  	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Internet][1]);
  	
 	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_SMS][0]);
  	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_SMS][1]);
  	PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator]);
   	loop(0, sizeof(g_TextDraw[td_iPhone_Calculator]), PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Calculator][PHONE]);
   	loop(0, sizeof(g_TextDraw[td_iPhone_Call]), PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Call][PHONE]);
    PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call]);
   	var1[playerid] = "";
    var2[playerid] = "";
    called[playerid] = "";
    TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][0]);
	TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][1]);
    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], "");
    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], "0");
    DeletePVar(playerid,"tovar");
	iPhone_CC[0][playerid] = 0;
	iPhone_CC[1][playerid] = 0;
	iPhone_CC[2][playerid] = 0;
	if(iPhone_CC[3][playerid] == 1)
	{
	    iPhone_CC[3][playerid] = 0;
		SetCameraBehindPlayer(playerid);
		DestroyObject(firstperson[playerid]);
	}
	return 1;
}

stock ReturnPlayerZone(playerid)
{
	new playerzone[256] = "Unknown";
	for(new j; j < sizeof(zones); j++) {
		if(IsPlayerInZon(playerid,j)) {
			memcpy(playerzone, zones[j][zone_name], 0, 108);
			break;
		}
	}
    return playerzone;
}
stock IsPlayerInZon(playerid, zoneid) {
	if(zoneid == -1) return false;
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
	if(x >= zones[zoneid][zone_minx] && x < zones[zoneid][zone_maxx] && y >= zones[zoneid][zone_miny] && y < zones[zoneid][zone_maxy] && z >= zones[zoneid][zone_minz] && z < zones[zoneid][zone_maxz] && z < 900.0) return true;
	return false;
}
stock GetPlayerZone(playerid)
{
	new string[256];
    format(string,sizeof(string),"%s",ReturnPlayerZone(playerid));
    PlayerTextDrawSetString(playerid,g_PlayerTextDraw[playerid][ptd_iPhone_GPS],string);
	return 1;
}

stock Megerosit(playerid, bool:nullaz, tipus, extra)
{
	if(!nullaz)
	{
		if(PlayerInfo[playerid][pMegerositesExtra][0] != tipus || PlayerInfo[playerid][pMegerositesExtra][1] != extra || PlayerInfo[playerid][pMegerosites] == NINCS)
		{
		    PlayerInfo[playerid][pMegerositesExtra][0] = tipus;
		    PlayerInfo[playerid][pMegerositesExtra][1] = extra;
		    PlayerInfo[playerid][pMegerosites] = playerid;
		   	return false;
	  	}
	  	else if(PlayerInfo[playerid][pMegerosites] != NINCS && PlayerInfo[playerid][pMegerositesExtra][0] == tipus && PlayerInfo[playerid][pMegerositesExtra][1] == extra)
	   	{
	   	    PlayerInfo[playerid][pMegerositesExtra][0] = NINCS;
	   	    PlayerInfo[playerid][pMegerositesExtra][1] = NINCS;
	   	    
		    PlayerInfo[playerid][pMegerosites] = NINCS;
	   	    return true;
	   	}
	}
	else
	{
	    PlayerInfo[playerid][pMegerositesExtra][0] = NINCS;
	    PlayerInfo[playerid][pMegerositesExtra][1] = NINCS;
	   	    
	    PlayerInfo[playerid][pMegerosites] = NINCS;
	}
   	return false;
}
stock ReportKuld(playerid, channel, szoveg[], ido = 300)
{
	if(channel < 0 || channel > MAX_CHANNEL) return -3;
	if(strlen(szoveg) >= 128) return -2;

	new i = NINCS, id = NINCS;
	for(;++i < MAX_REPORT;)
	{
	    if(g_Reportok[i][rVan]) continue;
	    id = i;
	    break;
	}
	if(id != NINCS)
	{
	    g_Reportok[id][rVan] = true;
	    strmid(g_Reportok[id][rStr], szoveg, 0, MAX_REPORT_STR);
	    g_Reportok[id][rKuldo] = playerid;
	    g_Reportok[id][rChannel] = channel;
	    g_Reportok[id][rIdo] = ido;

		Iter_Add(Reportok, id);
	}
	return id;
}


stock UpdateCoordinates(playerid, aMenuX, aMenuY)
{
	switch(aMenuX)
	{
	    case 0:
	    {
	        switch(aMenuY)
	        {
	            case 0:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "Óra");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][1], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][1]);
					return 1;
	            }
	            case 1:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "Idõjárás");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][4], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][4]);
					return 4;
	            }
	            case 2:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "Rádió");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][7], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][7]);
					return 7;
	            }
	            case 3:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "Hívás");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][10], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][10]);
					return 10;
	            }
	        }
	    }
	    case 1:
	    {
	        switch(aMenuY)
	        {
	            case 0:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "Kamera");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][2], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][2]);
					return 2;
	            }
	            case 1:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "Számológép");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][5], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][5]);
					return 5;
	            }
	            case 2:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "Zene");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][8], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][8]);
					return 8;
	            }
	            case 3:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "SMS");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][11], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][11]);
					return 11;
	            }
	        }
	    }
	    case 2:
	    {
	        switch(aMenuY)
	        {
	            case 0:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "Galéria");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][3], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][3]);
					return 3;
	            }
	            case 1:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "GPS");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][6], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][6]);
					return 6;
	            }
	            case 2:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "Térkép");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][9], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][9]);
					return 9;
	            }
	            case 3:
	            {
	                PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], "Internet");
	                loop(1, 13, i)
					{
						PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i], -256);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][i]);
					}
	                PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][12], -1);
	                PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][12]);
	                
					return 12;
	            }
	        }
	    }
	}
	return 0;
}

stock CreatePlayerIphone(playerid)
{
	g_PlayerTextDraw[playerid][ptd_iPhone][0] = CreatePlayerTextDraw(playerid, 550.133544, 233.225967, "Not selected");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], 0.276333, 1.346963);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], 255);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][0], 1);

	g_PlayerTextDraw[playerid][ptd_iPhone][1] = CreatePlayerTextDraw(playerid, 516.600280, 254.681549, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][1], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][1], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][1], -256);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][1], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][1], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][1], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][2] = CreatePlayerTextDraw(playerid, 540.866333, 254.681549, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][2], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][2], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][2], -256);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][2], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][2], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][2], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][3] = CreatePlayerTextDraw(playerid, 565.599304, 254.681549, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][3], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][3], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][3], -256);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][3], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][3], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][3], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][4] = CreatePlayerTextDraw(playerid, 516.600280, 284.445159, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][4], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][4], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][4], -256);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][4], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][4], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][4], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][5] = CreatePlayerTextDraw(playerid, 540.866333, 284.445159, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][5], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][5], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][5], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][5], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][5], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][5], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][5], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][6] = CreatePlayerTextDraw(playerid, 565.599304, 284.445159, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][6], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][6], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][6], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][6], -256);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][6], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][6], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][6], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][7] = CreatePlayerTextDraw(playerid, 516.600280, 314.208770, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][7], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][7], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][7], -256);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][7], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][7], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][7], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][8] = CreatePlayerTextDraw(playerid, 540.866333, 314.208770, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][8], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][8], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][8], -256);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][8], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][8], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][8], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][9] = CreatePlayerTextDraw(playerid, 565.599304, 314.208770, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][9], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][9], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][9], -256);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][9], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][9], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][9], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][10] = CreatePlayerTextDraw(playerid, 516.600280, 348.338378, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][10], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][10], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][10], -256);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][10], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][10], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][10], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][11] = CreatePlayerTextDraw(playerid, 540.866333, 348.338378, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][11], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][11], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][11], -256);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][11], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][11], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][11], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][12] = CreatePlayerTextDraw(playerid, 565.599304, 348.338378, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][12], 19.000009, 23.644432);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][12], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][12], -256);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][12], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][12], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][12], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][13] = CreatePlayerTextDraw(playerid, 517.000122, 255.526031, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][13], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][13], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][13], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][13], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][13], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][13], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][14] = CreatePlayerTextDraw(playerid, 541.266174, 255.526031, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][14], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][14], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][14], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][14], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][14], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][14], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][14], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][15] = CreatePlayerTextDraw(playerid, 565.999145, 255.526031, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][15], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][15], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][15], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][15], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][15], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][15], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][15], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][16] = CreatePlayerTextDraw(playerid, 517.000122, 285.289642, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][16], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][16], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][16], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][16], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][16], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][16], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][16], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][17] = CreatePlayerTextDraw(playerid, 541.266174, 285.289642, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][17], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][17], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][17], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][17], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][17], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][17], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][17], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][18] = CreatePlayerTextDraw(playerid, 565.999145, 285.289642, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][18], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][18], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][18], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][18], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][18], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][18], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][18], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][19] = CreatePlayerTextDraw(playerid, 517.000122, 315.053253, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][19], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][19], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][19], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][19], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][19], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][19], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][19], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][20] = CreatePlayerTextDraw(playerid, 541.266174, 315.053253, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][20], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][20], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][20], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][20], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][20], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][20], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][20], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][21] = CreatePlayerTextDraw(playerid, 565.999145, 315.053253, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][21], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][21], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][21], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][21], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][21], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][21], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][21], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][22] = CreatePlayerTextDraw(playerid, 517.000122, 349.182861, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][22], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][22], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][22], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][22], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][22], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][22], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][22], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][23] = CreatePlayerTextDraw(playerid, 541.266174, 349.182861, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][23], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][23], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][23], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][23], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][23], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][23], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][23], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][24] = CreatePlayerTextDraw(playerid, 565.999145, 349.182861, "ld_poke:cd1d");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][24], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][24], 18.333343, 22.399990);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][24], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][24], 255);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][24], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][24], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][24], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][25] = CreatePlayerTextDraw(playerid, 518.700134, 257.085144, "ld_grav:timer");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][25], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][25], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][25], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][25], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][25], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][25], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][25], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][26] = CreatePlayerTextDraw(playerid, 543.000000, 258.140777, "hud:radar_gym");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][26], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][26], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][26], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][26], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][26], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][26], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][26], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][27] = CreatePlayerTextDraw(playerid, 567.699951, 257.611114, "hud:radar_enemyattack");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][27], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][27], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][27], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][27], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][27], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][27], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][27], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][28] = CreatePlayerTextDraw(playerid, 518.500183, 287.118560, "hud:radar_fire");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][28], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][28], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][28], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][28], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][28], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][28], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][28], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][29] = CreatePlayerTextDraw(playerid, 542.966796, 287.288879, "hud:radar_modgarage");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][29], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][29], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][29], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][29], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][29], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][29], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][29], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][30] = CreatePlayerTextDraw(playerid, 567.633361, 287.359222, "hud:arrow");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][30], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][30], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][30], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][30], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][30], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][30], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][30], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][31] = CreatePlayerTextDraw(playerid, 518.900207, 316.781402, "hud:radar_flag");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][31], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][31], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][31], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][31], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][31], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][31], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][31], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][32] = CreatePlayerTextDraw(playerid, 542.866943, 317.151763, "hud:radar_datedisco");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][32], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][32], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][32], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][32], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][32], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][32], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][32], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][33] = CreatePlayerTextDraw(playerid, 567.500305, 317.007293, "hud:radar_light");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][33], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][33], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][33], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][33], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][33], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][33], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][33], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][34] = CreatePlayerTextDraw(playerid, 518.566955, 351.092498, "hud:radar_propertyg");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][34], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][34], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][34], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][34], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][34], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][34], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][34], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][35] = CreatePlayerTextDraw(playerid, 543.100280, 351.103698, "hud:radar_propertyr");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][35], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][35], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][35], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][35], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][35], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][35], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][35], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone][36] = CreatePlayerTextDraw(playerid, 567.566833, 351.147979, "hud:radar_locosyndicate");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][36], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][36], 14.999999, 17.422224);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][36], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][36], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][36], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][36], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][36], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone_Gallery] = CreatePlayerTextDraw(playerid, 511.266784, 249.677749, "loadsc1:loadsc1");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery], 78.666625, 70.518501);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery], 0);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery], 4);

	g_PlayerTextDraw[playerid][ptd_iPhone_GPS] = CreatePlayerTextDraw(playerid, 548.666931, 266.481384, "Los Santos");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_GPS], 0.253666, 1.322074);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_GPS], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_GPS], -5963521);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_GPS], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_GPS], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_GPS], 255);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_GPS], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_GPS], 1);

	g_PlayerTextDraw[playerid][ptd_iPhone_Calculator] = CreatePlayerTextDraw(playerid, 583.899963, 268.370300, "0");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], 0.267999, 1.599999);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], 3);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], 0);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], 2);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], 1);

	g_PlayerTextDraw[playerid][ptd_iPhone_Call] = CreatePlayerTextDraw(playerid, 586.666870, 264.651885, "_");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], 0.333332, 1.239110);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], 3);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], 0);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], 1);
	return 1;
}

stock DestroyPlayerIphone(playerid)
{
	loop(0, 37, PHONE) PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PHONE]);
	PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery]);
	PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_GPS]);
	PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator]);
	PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call]);
	DestroyObject(firstperson[playerid]);
	return 1;
}

stock injectCheck(const string[])
{
    if(strfind(string,"'") != -1) return true;
    if(strfind(string,"*") != -1) return true;
    if(strfind(string,"%") != -1) return true;
    if(strfind(string,"\\") != -1) return true;
    if(strfind(string,"/") != -1) return true;
    if(strfind(string,"=") != -1) return true;
    if(strfind(string,"--") != -1) return true;
    if(strfind(string,"\"") != -1) return true;
    return false;
}
#define ShowPlayerDialog mAC_ShowPlayerDialog
#define Info_Dialog(%1,%2,%3) ShowPlayerDialog(%1, DIALOG_INFO, DIALOG_STYLE_MSGBOX, %2, %3, "Rendben", "")

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(PlayerInfo[playerid][pDialogID] != dialogid && !IsPlayerAdmin(playerid) && !IsScripter(playerid))
	{
		nformat(string, 128, "[AC]:{1E90FF} [%d]%s - Cheat: Dialog Exploit (Kick)", playerid, JatekosNev(playerid));
		AdminUzenetEx(LKEK, 1001, string);
		Log(FILE_CHEAT, string);
		Kick(playerid);
		return false;
	}

	new db = strlen(inputtext);
	for(new i = 0; i < db; ++i)
	 	if(inputtext[i] == '%')
	  		inputtext[i] = '#';

	if(!db)
		return CallLocalFunction ("mAC_OnDialogResponse", "iiiis", playerid, dialogid, response, listitem, "\1");
 	return CallLocalFunction ("mAC_OnDialogResponse", "iiiis", playerid, dialogid, response, listitem, inputtext);
}

#if defined _ALS_OnDialogResponse
	#undef OnDialogResponse
#else
	#define _ALS_OnDialogResponse
#endif
#define OnDialogResponse mAC_OnDialogResponse
forward mAC_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);

/* Definíciók */
#define LEKERES 0
#define LEVONAS 1
#define PENZOBJECT  371

#define Szint(%1) PlayerInfo[%1][pjatekosszint]
#define KPegyenleg(%1) PlayerInfo[%1][ppenz]
#define BSZegyenleg(%1) PlayerInfo[%1][pBszPenz]
#define ErtekAllitas(%1,%2,%3) PlayerInfo[%1][%2] = %3
#define OLESIDOKORLAT 30 // másodperc
#define KORHAZIDO 600
#define AZONOSITASIDO 20
#define LEUTESIDO 300
#define ARUKARA 20
#define AUTOVERDIJ 20
#define MAX_IRC 30
#define HULLASZORZO 15
#define RABOLHAT 1800

/* Fizetés definíciók */
#define ARUMIN 50
#define ARUMAX 150

#define PILOTAMIN 120
#define PILOTAMAX 240

#define FAVAGOFIZUMIN 5
#define FAVAGOFIZUMAX 25

#define KUKAFIZUMIN 4
#define KUKAFIZUMAX 12

#define FARMFIZUMIN 5
#define FARMFIZUMAX 25

#define UTTISZTITOMIN 4
#define UTTISZTITOMAX 12

#define MOWERMIN 1
#define MOWERMAX 2 // ez így jaó?

#define BOLTROBMIN 500
#define BOLTROBMAX 1000

#define VASMIN 5
#define VASMAX 13
#define VASSZORZO 5
/* Enums */
enum DTerulet
{
	A51,
	Favago
};
new Area[DTerulet];
/* Glob Változók */
/* Változók */
const Float: Radius = 1.4;
const Float: SelfieSpeed  = 1.25;
const Float: Height = 1.0;

new Float:Degree[MAX_PLAYERS];
new Float:lX[MAX_PLAYERS];
new Float:lY[MAX_PLAYERS];
new Float:lZ[MAX_PLAYERS];

new Float:PilotaCheckpointok[6][3] = {
	{404.487, 2463.091, 16.500},
	{244.411, 2544.293, 16.804},
	{1354.192, 1713.650, 10.820},
	{1605.463, 1629.465, 10.820},
	{1618.965, 1339.875, 10.809},
	{1288.990, 1361.864, 10.820}
};

new Float:AruCheckpointok[23][3] = {
	{651.8297,-1711.3169,14.4030},
	{1344.5089,-1751.5011,13.4566},
	{1308.6764,-1478.4159,13.6714},
	{1046.9365,-1339.5125,13.6887},
	{1912.8038,-1767.5565,13.4767},
	{2155.7063,-1744.3271,13.6194},
	{2094.9502,-1813.2664,13.4522},
	{2065.391,-1917.042,13.543},
	{1833.6637,-1857.7990,13.6583},
	{1637.4469,-1166.9233,24.1697},
	{1014.7488,-1120.5077,23.9914},
	{986.8469,-926.3129,42.2197},
	{1234.6348,-1009.2536,32.6961},
	{1324.2649,-871.9782,39.6719},
	{2237.1055,-1148.0282,25.7969},
	{2414.8108,-1224.4733,24.8082},
	{2423.2573,-1508.5663,23.9922},
	{2425.3120,-1785.9307,14.0231},
	{2395.3569,-1896.1373,13.6363},
	{817.5665,-1756.3271,13.6363},
	{787.9605,-1616.4501,13.6363},
	{1293.8016,-1587.0887,13.6363},
	{1283.5469,-1666.0404,13.6363}
};

new
	Billentyu[MAX_PLAYERS],
	BillentyuHatra[MAX_PLAYERS];

new BillentyuInfo[5][2][20] =
{
	{128,   "Space"},
	{512,   "2-es"},
	{65536, "Y"},
	{64, "E"},
	{2, "H"}
};

#define MAX_BOMBA 100
#define EXPLOSION_TYPE_FUEL_CAR	(0)
#define EXPLOSION_TYPE_LARGE	(1)
#define EXPLOSION_TYPE_MEDIUM	(2)
#define EXPLOSION_TYPE_MOLOTOV	(3)
#define EXPLOSION_TYPE_SMALL	(4)
#define EXPLOSION_TYPE_TINY		(5)
enum e_Bomba
{
	bool:bVan,
	Text3D:bLabel,
	bObject,
	Float:bPos[3],
	bIdo,
	bKocsiban,
	bRobbantja,
	bLerakta
};
new g_Bomba[MAX_BOMBA][e_Bomba],
	Iterator:Bombak<MAX_BOMBA>;

stock BombaTorol(bomba)
{
	if(bomba < 0 || bomba >= MAX_BOMBA || !g_Bomba[bomba][bVan]) return false;
	
	g_Bomba[ bomba ][bVan] = false;
 	g_Bomba[ bomba ][bKocsiban] = NINCS;
 	if(IsValidDynamic3DTextLabel(g_Bomba[ bomba ][bLabel]))
 	{
 	    DestroyDynamic3DTextLabel(g_Bomba[ bomba ][bLabel]);
		g_Bomba[ bomba ][bLabel] = INVALID_3D_TEXT_ID;
	}
	if(IsValidDynamicObject(g_Bomba[ bomba ][bObject]))
 		DestroyDynamicObject(g_Bomba[ bomba ][bObject]);
	
    g_Bomba[ bomba ][bIdo] = NINCS;
    g_Bomba[ bomba ][bRobbantja] = INVALID_PLAYER_ID;
    g_Bomba[ bomba ][bLerakta] = INVALID_PLAYER_ID;
	g_Bomba[ bomba ][bPos][0] = 0.0; g_Bomba[ bomba ][bPos][1] = 0.0; g_Bomba[ bomba ][bPos][2] = 0.0;
	
	Iter_Remove(Bombak, bomba);
	
	return true;
}
stock BombaLerak(Float:x, Float:y, Float:z, kocsiban = NINCS, playerid = INVALID_PLAYER_ID)
{
	new id = NINCS, i = NINCS;
	for(; ++i < MAX_BOMBA;){
		if(g_Bomba[i][bVan]) continue;
		id = i; break;
	}
	if(id != NINCS){
	
		g_Bomba[ id ][ bVan ] = true;

        g_Bomba[ id ][ bIdo ] = NINCS;
        g_Bomba[ id ][ bPos ][0] = x; g_Bomba[ id ][ bPos ][1] = y; g_Bomba[ id ][ bPos ][2] = z;
        
		g_Bomba[ id ][ bKocsiban ] = kocsiban;
		g_Bomba[ id ][ bRobbantja ] = INVALID_PLAYER_ID;
		g_Bomba[ id ][ bLerakta ] = playerid;
		
		if(kocsiban == NINCS)
		{
		    g_Bomba[ id ][ bObject ] = CreateDynamicObject(1654, x, y, z - 0.85, 90, 90, 90);
			g_Bomba[ id ][ bLabel ] = CreateDynamic3DTextLabel("-"#COL_LKEK"Bomba"#COL_FEHER"-\nStátusz: "#COL_VZOLD"Deaktiválva", FEHER, x, y, z-0.5, 13.0);
		}
	    Iter_Add(Bombak, id);
 	}
 	return id;
}

timer t_UCPCheck[300000]()
{
    mysql_tquery(sql_ID, "SELECT id FROM "#MYSQL_KARIREGEK_TABLA"", "UCPCheck", "");
}
fpublic UCPCheck()
{
	new rows, fields;
	cache_get_data(rows, fields);
	if(rows)
	{
	    AdminUzenet(0xFF6347FF, FOADMIN_SZINT, "[UCP]Figyelem! %d karakter vár aktiválásra!", rows);
	}
	return 1;
}
task t_Bomba[1000]()
{
	foreach(Bombak, i)
	{
	    if(g_Bomba[i][bIdo] >= 0)
		{
			g_Bomba[i][bIdo] --;

			if(g_Bomba[i][bKocsiban] == NINCS)
			{
				nformat(string, 128, "-"#COL_LKEK"Bomba"#COL_FEHER"-\nStátusz: "#COL_LRED"Aktiválva\n"COL_FEHER"Robbanás:"#COL_LRED" %d "#COL_FEHER"másodperc", g_Bomba[i][bIdo]);
				UpdateDynamic3DTextLabelText(g_Bomba[i][bLabel], FEHER, string);
			}
			if(g_Bomba[i][bIdo] <= 0)
	  		{
				BombaRobbant(g_Bomba[i][bRobbantja], i);
			}
		}
	}
}
new
	BombaKezbe[MAX_PLAYERS],
	BombaLerakva[MAX_PLAYERS];

new BenzinSzallit[MAX_PLAYERS];
new MunkaFolyamatban[MAX_PLAYERS];
new AruFelpakolva[MAX_PLAYERS];
new KepetCsinal[MAX_PLAYERS];
new Erosites[MAX_PLAYERS];
new Leutve[MAX_PLAYERS];
new AntiFlood[MAX_PLAYERS];
new Fonok[MAX_PLAYERS];
new Tuningol[MAX_PLAYERS];
new Azonositas[MAX_PLAYERS];
new bool:Belepett[MAX_PLAYERS];
new Zabal[MAX_PLAYERS];
new Mergezve[MAX_PLAYERS];
new Fizetesmod[MAX_PLAYERS];
new PDAmuvelet[MAX_PLAYERS];
new PDA[7][2][32] =
{
	{5, "Felfüggesztés"},
	{1,	"Bankszámla zárolása"},
	{1,	"Bankszámla feloldása"},
	{2,	"Rádió lehallgatása"},
	{2,	"Telefon lehallgatása"},
	{0,	"Lehallgatás kikapcsolása"},
 	{2, "Személyes adat lekérése"}
};
new HitmanFegyverek[14][4][32] =
{
	{"Katana",8,1,200},
	{"Silenced Colt",23,100,300},
	{"Desert Eagle",24,100,300},
	{"Shotgun",25,100,400},
	{"Combat Shotgun",27,100,450},
	{"Uzi",28,360,250},
	{"Tec9",32,360,250},
	{"MP5",29,360,300},
	{"AK-47",30,400,350},
	{"M4",31,400,400},
	{"Rifle",33,100,270},
	{"Sniper Rifle",34,100,500},
	{"Golyóálló mellény",NINCS,100,100},
	{"Mérgezõ töltet",-2,10,20}
};
/* Függvények*/
stock SetCP(playerid, Float:X, Float:Y, Float:Z, Float:size, type)
{
	PlayerInfo[playerid][pCP] = type;
	return SetPlayerCheckpoint(playerid, X, Y, Z, size);
}
stock LegkozelebbiDrink(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x,y,z);
	new ret = -1;
	for(new labell = 0; labell < MAX_DRINK; labell++)
	{
		if(IsPlayerInRangeOfPoint(playerid,5.00,DrinkInfo[labell][lx],DrinkInfo[labell][ly],DrinkInfo[labell][lz]) && DrinkInfo[labell][lVan] == 1)
		{
		    ret = labell;
		    break;
		}
	}
	return ret;
}
stock VanIlyen(jatekos)
{
    if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos)) return false;
    return true;
}
stock AntiCrasher(Float:x)
{
    if(x >= 10.0 || x <= -10.0)return true;
	return false;
}
stock TipusToNev(munkaid)
{
	new nev[32] = "N/A";
	switch(munkaid)
	{
		case MUNKA_KAMION: nev = "Kamionos";
		case MUNKA_FAVAGO: nev = "Favágó";
		case MUNKA_KUKA: nev = "Kukás";
		case MUNKA_UTTISZTITO: nev = "Úttisztító";
		case MUNKA_FEGYVER: nev = "Fegyvermester";
		case MUNKA_FARMER: nev = "Farmer";
		case MUNKA_DROG: nev = "Drogkészítõ";
		case MUNKA_HACK: nev = "Hacker";
		case MUNKA_ARU: nev = "Árúszállító";
		case MUNKA_PILOTA: nev = "Pilóta";
		case MUNKA_MOWER: nev = "Fûnyíró";
		case MUNKA_BANYASZ: nev = "Bányász";
		case 0: nev = "Eladó";
		case 100: nev = "Bérelhetõ";
		case 101: nev = "Vizsgajármû";
		case 102: nev = "See Közlekedési Vállalat";
		case 103: nev = "Használtkereskedés";
	}
	return nev;
}
stock IsAHeli(carid)
{
    new modelid = GetVehicleModel(carid);
	if(modelid == 417 || modelid == 425 || modelid == 447 || modelid == 465 || modelid == 469 || modelid == 487 || modelid == 488 || modelid == 497 || modelid == 501 || modelid == 548 || modelid == 563)
	{
		return 1;
	}
	return 0;
}
stock IsAHajo(vmodel)
{
	new hajok[10] = {430, 446, 452, 453, 454, 472, 473, 484, 493, 595};
	for(new u = 0; u < sizeof(hajok); u++)
	{
		if(hajok[u] == vmodel)
			return true;
	}
	return false;
}

stock IsARepulo(vmodel)
{
	new repcsik[20] = {417,425,447,460,469,476,487,488,497,511,512,513,519,520,548,553,563,577,592,593};
	for(new u = 0; u < sizeof(repcsik); u++)
	{
		if(repcsik[u] == vmodel)
			return true;
	}
	return false;
}
stock bool:IsAMotor(vmodel)
{
	new motorok[11] = {448, 462, 581, 522, 461, 521, 523, 463, 586, 468, 471},
		i = -1;

	for(;++i < sizeof(motorok);)
	{
		if(motorok[i] == vmodel)
		{
			return true;
		}
	}
	return false;
}
stock IsABicikli(vmodel)
{
	new biciklik[3] = {481, 509, 510};
	for(new u = 0; u < sizeof(biciklik); u++)
	{
		if(biciklik[u] == vmodel)
			return true;
	}
	return false;
}
stock Ellophatja(playerid, jarmu)
{
   /* new	jarmuidje = JarmuID(jarmu, playerid);
	if(jarmu == 427 || jarmu == 428 || jarmu == 528 || jarmu == 425 || jarmu == 432  || jarmu == 520 || jarmu == 601) { SCM(playerid,COL_LRED,"Felejsd el.."); return false; }
	if(FrakcioJarmu(playerid, jarmuidje) || FrakcioJarmu(playerid, jarmu) && PlayerInfo[playerid][pTolvajSkill] >= 10) return true;
	if(IsAKocsi(jarmu) && !FrakcioJarmu(playerid, jarmuidje) || !FrakcioJarmu(playerid, jarmu) && PlayerInfo[playerid][pTolvajSkill] >= 0) return true;
	if(IsAMotor(jarmu) && PlayerInfo[playerid][pTolvajSkill] >= 2) return true;
	if(IsAHajo(jarmu) && PlayerInfo[playerid][pTolvajSkill] >= 5) return true;
	if(IsAHeli(jarmu) && PlayerInfo[playerid][pTolvajSkill] >= 8) return true;
	if(IsARepulo(jarmu) && PlayerInfo[playerid][pTolvajSkill] >= 9) return true;*/
	return false;
}
stock IllegalisFrakcioTag(playerid)
{
	switch(PlayerInfo[playerid][pFrakcio])
	{
		case FRAKCIO_GSF: return true;
		case FRAKCIO_IMPERIALG: return true;
		case FRAKCIO_BALLAS: return true;
		case FRAKCIO_BRATVA: return true;
		case FRAKCIO_LCN: return true;
		case FRAKCIO_YAKUZA: return true;
		case FRAKCIO_CRIMINALS: return true;
		case FRAKCIO_IRA: return true;
		case FRAKCIO_STOCKWELL: return true;
	}
	return false;
}
stock RendvedelmiFrakcioTag(playerid)
{
	switch(PlayerInfo[playerid][pFrakcio])
	{
		case FRAKCIO_LSPD: return true;
		case FRAKCIO_FBI: return true;
		case FRAKCIO_KATONA: return true;
	}
	return false;
}
stock bool:SzidasCheck(playerid, const str[])
{
	new szidas[][] =
	{
		{"fasz"},{"buzi"},{"geci"},{"g3ci"},{"cigány"},{"köcsög"},{"anyád"},{"zsidó"},{"cigó"},{"kurva"},{"f@sz"},
		{"buz1"}, {"nyomorék"}, {"szar"}, {"szarfaszú"},{"fogyatékos"},{"seggfej"},{"seggarc"}
	};
	new i = NINCS, talalt = NINCS;
	for(;++i < sizeof(szidas);)
	{
		if(strfind(str, szidas[i], true) != NINCS)
		{
			talalt = i;
			break;
		}
	}
	if(talalt != NINCS)
	{
		SFM(playerid, COL_LRED, "Ejnye,hogy beszélsz?! Szidás észlelve - Szó: %s", szidas[talalt]);
		return false;
	}
	return true;
}
stock BombaRobbant(playerid, bomba)
{
	if(bomba < 0 || bomba >= MAX_BOMBA || !g_Bomba[ bomba ][bVan])
	    return SCM(playerid, COL_LRED, "A script hibába ütközött! Jelentsd!");
	    
	if(g_Bomba[ bomba ][bKocsiban] != NINCS)
	{
		new kocsi = g_Bomba[ bomba ][bKocsiban];
		new Float:x, Float:y, Float:z;
		GetVehiclePos(kocsi, x, y, z);

		CreateExplosionEx(g_Bomba[ bomba ][bRobbantja], x, y, z, 20.0, 150.0, EXPLOSION_TYPE_LARGE, true);
	}
	else
	{
	    CreateExplosionEx(g_Bomba[ bomba ][bRobbantja],  posArr{ g_Bomba[ bomba ][bPos] }, 20.0, 150.0, EXPLOSION_TYPE_LARGE, true);
	}
	BombaTorol(bomba);
	
	if(IsPlayerConnected(playerid))
	{
	    SCM(playerid, COL_VZOLD,"Felrobbantottad a bombát!");
		Cselekves(playerid, "felrobbantott egy bombát..");
	
		BombaLerakva[playerid] = NINCS;

		if(!IsHitman(playerid))
			AdminUzenet(RED, 1, "[C4]"#COL_LKEK" %s felrobbantott egy bombát!", returnName(playerid));
	}
	return true;
}
stock Leuthetvele(fid)
{
	if(fid == 5 || fid == 6 || fid == 24)
		return true;
	return false;
}
stock returnName(playerid)
{
	new nev[MAX_PLAYER_NAME];
	GetPlayerName(playerid, nev, sizeof(nev));
	return nev;
}
stock TeloszamToJatekos(szam)
{
	new i = -1;
	foreach(Player,p)
	{
		if(PlayerInfo[p][pCuccok][BL_TELEFON] == szam)
		i = p;
	}
	return i;
}
stock KompatibilisSkin(skinid)
{
	switch(skinid)
	{
		case 29: return true;
		case 265 .. 267: return true;
		case 280 .. 284: return true;
		case 286 .. 287: return true;
		case 288: return true;
	}
	return false;
}
stock Melleny(playerid, melyik)
{
	switch(melyik)
	{
		case 0: // Levétel
		{
			PlayerInfo[playerid][ArmorObjFenn] = false;
			RemovePlayerAttachedObject(playerid, SLOT_MASZK);
		}
		case 1: // Felvétel
		{
			if(PlayerInfo[playerid][ArmorObjFenn] == false && KompatibilisSkin(GetPlayerSkin(playerid)))
			{
				PlayerInfo[playerid][ArmorObjFenn] = true;
				switch(GetPlayerSkin(playerid))
				{
					case 29: SetPlayerAttachedObject(playerid,SLOT_MASZK,19142,1,0.071999,0.037999,0.013000,1.600000,0.000000,0.000000,0.990999,1.392000,1.248000);
					default: SetPlayerAttachedObject(playerid,SLOT_MASZK,19142,1,0.089000,0.037999,0.000000,0.000000,0.000000,0.000000,1.000000,1.073000,1.154999);
				}
			}
			else {
				SCM(playerid,COL_LRED,"A mellény object nem kompatibilis ezzel a skinnel!");
				Melleny(playerid, 0);
			}
			return true;
		}
	}
	return true;
}
stock VanilyenKarakter(playerid,const nev[])//szhar
{
	new nums, fields;
	cache_get_data(nums, fields);
	if(nums)
	{
		doQuery("DELETE FROM `"#MYSQL_JATEKOS_TABLA"` WHERE nev = '%d'", jatekos);
		AdminUzenet(RED,1,"%s törölt egy játékost az adatbázisból ( %s) ",JatekosNev(playerid, false, true),nev);
		return true;
	}
	else SCM(playerid,COL_LRED,"Nincs ilyen játékos az adatbázisban!");
	return 1;
}
stock HelyesAlnev(string[])
{
	for(new n = 0; n < strlen(string); n++)
	{
		if(string[n] == ' ')
			return true;
		if(string[n] == ']' || string[n] == '[')
			return false;
	}
    return true;
}
stock Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return VectorSize( x1-x2, y1-y2, z1-z2 );
}
stock Float:GetDistanceToPoint(playerid,Float:x1,Float:y1,Float:z1)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return INF_FLOAT;
}
stock FloodEllenorzes(playerid, ido = 2)
{
	if(PlayerInfo[playerid][pECMD] != 0)
	{
		return SCM(playerid,COL_LRED,"Ne floodolj!");
	}
	else
	{
		PlayerInfo[playerid][pECMD] = ido;
		PlayerInfo[playerid][pFlood] = 0;
	}
	return 0;
}
stock IsRealAdmin(playerid)
{
	switch(PlayerInfo[playerid][padmin])
	{
		case 1.. FSEGED_SZINT: return true;
		case FOADMIN_SZINT .. AC_SZINT: return true;
		case FEJLESZTO_SZINT: return true;
		case SCRIPTER_SZINT: return true;
		case FOSCRIPTER_SZINT: return true;
		case TULAJ_SZINT: return true;
		case RENDSZG_SZINT: return true;
	}
	return false;
}
stock IsLewis(playerid)
{
	if(egyezik("Tamasi_Gabor",JatekosNev(playerid, false, true)) || egyezik("Lewis_Rolee",JatekosNev(playerid,false,true)) || egyezik("Jason_Leigh",JatekosNev(playerid,false,true)) || Fonok[playerid] == 1 && Belepett[playerid])
		return true;
	return false;
}
stock PenzHozzaad(playerid, osszeg)
{
	if(osszeg < 0)
	{
		switch(Fizetesmod[playerid])
		{
			case 0:
			{
				if(KPegyenleg(playerid) >= (osszeg * -1))
				{
					PlayerInfo[playerid][ppenz] += osszeg;
					SFM(playerid,COL_RSARG,"A készpénzben vásároltál! Levont összeg: "#COL_LKEK"%s"#COL_FEHER"$,",FN(osszeg));
					return true;
				}
			}
			case 1:
			{
				if(BSZegyenleg(playerid) >= (osszeg * -1))
				{
					PlayerInfo[playerid][pBszPenz] += osszeg;
					SFM(playerid,COL_RSARG,"A bankkártyádról vásároltál! Levont összeg: "#COL_LKEK"%s"#COL_FEHER"$,",FN(osszeg));
					return true;
				}
			}
		}
		return false;
	}
	PlayerInfo[playerid][ppenz] += osszeg;
	return true;
}
stock NincsJarmu(playerid)
{
	return SCM(playerid,COL_LRED,"Nincs ilyen jármû.");
}
stock NincsJatekos(playerid)
{
	return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
}
stock NincsItt(playerid)
{
	return SCM(playerid,COL_LRED,"Ez a játékos nincs a közeledben!");
}
stock AF(playerid)
{
	return AntiFlood[playerid] = 10;
}

stock isLottSeb(playerid)
{
	if(PlayerInfo[playerid][pAnimban][0] == 0) return false;
	new i = 0, bool:islott = false;
	for(; ++i < 8;){
	    if(PlayerInfo[playerid][pAnimban][i] == 0) continue;
	    islott = true; break;
	}
	return islott;
}
stock AnimvarIndexToBodypart(index)
{
	switch(index)
	{
	    case BODY_PART_TORSO_A: return BODY_PART_TORSO;
	    case BODY_PART_GROIN_A: return BODY_PART_GROIN;
	    case BODY_PART_LEFT_ARM_A: return BODY_PART_LEFT_ARM;
	    case BODY_PART_RIGHT_ARM_A: return BODY_PART_RIGHT_ARM;
	    case BODY_PART_LEFT_LEG_A: return BODY_PART_LEFT_LEG;
	    case BODY_PART_RIGHT_LEG_A: return BODY_PART_RIGHT_LEG;
	    case BODY_PART_HEAD_A: return BODY_PART_HEAD;
	    default: return NINCS;
	}
	return NINCS;
}
stock BodyPartName(testresz)
{
	new returnstr[32];
	if(testresz == BODY_PART_HEAD)
	    format(returnstr, 32, "Fej");
	else if(testresz == BODY_PART_GROIN)
	    format(returnstr, 32, "Ágyék");
	else if(testresz == BODY_PART_TORSO)
	    format(returnstr, 32, "Törzs");
	else if(testresz == BODY_PART_LEFT_ARM)
	    format(returnstr, 32, "Bal kéz");
	else if(testresz == BODY_PART_RIGHT_ARM)
	    format(returnstr, 32, "Jobb kéz");
	else if(testresz == BODY_PART_RIGHT_LEG)
	    format(returnstr, 32, "Jobb láb");
    else if(testresz == BODY_PART_RIGHT_LEG)
	    format(returnstr, 32, "Bal láb");

	return returnstr;
}
stock bodyPartToAnimVarIndex(testresz)
{
	switch(testresz)
	{
	    case BODY_PART_TORSO: return BODY_PART_TORSO_A;
	    case BODY_PART_GROIN: return BODY_PART_GROIN_A;
	    case BODY_PART_LEFT_ARM: return BODY_PART_LEFT_ARM_A;
	    case BODY_PART_RIGHT_ARM: return BODY_PART_RIGHT_ARM_A;
	    case BODY_PART_LEFT_LEG: return BODY_PART_LEFT_LEG_A;
	    case BODY_PART_RIGHT_LEG: return BODY_PART_RIGHT_LEG_A;
	    case BODY_PART_HEAD: return BODY_PART_HEAD_A;
	    default: return NINCS;
	}
	return NINCS;
}

stock Anim(playerid, melyik, bool:kellfreeze = true) // Animbarak
{
	if(!IsPlayerNPC(playerid) && Belepve(playerid))
	{
		switch(melyik)
		{
			case 0://Kivesz
			{
				PlayerInfo[playerid][pNemolheto]  = 0;
				new i = NINCS;
				for(; ++i < 8;)
				{
				    PlayerInfo[playerid][pAnimban][i] = 0;
				}
				SetPlayerDrunkLevel(playerid, 0);
				if(kellfreeze)
				{
					UnFreeze(playerid);
				}
				if(!IsPlayerInAnyVehicle(playerid))
					ClearAnimations(playerid);
			}
			case 1://Berak
			{
				if(PlayerInfo[playerid][pAnimban][0] == 0 && !PlayerInfo[playerid][pAduty] && !PlayerInfo[playerid][pASduty] && !PlayerInfo[playerid][pPaintBall][0] &&  !PlayerInfo[playerid][pGodmode])
				{
					if(kellfreeze)
						Freeze(playerid, 0);
						
					SetPlayerDrunkLevel(playerid, 50000);
					LoopingAnim(playerid, "CRACK", "crckidle4", 4.0, 1, 0, 0, 0, 0);
					//SCM(playerid,COL_LRED,"Súlyosan megsérültél!");
					PlayerInfo[playerid][pNemolheto]  = OLESIDOKORLAT;
					PlayerInfo[playerid][pAnimban][0] = 1;
					if(PlayerInfo[playerid][pFegyver])
					{
						Fegyver(playerid, false);
					}
				}
				return true;
			}
		}
	}
	return true;
}
fpublic Ejtoernyoresi(playerid)
{
	PlayerInfo[playerid][pFegyverek][11] = 0;
	Fegyver(playerid, false);
	return true;
}
timer Feltor[50000](playerid,kocsi)
{
	new skill = ((PlayerInfo[playerid][pTolvajSkill] < 10) ? PlayerInfo[playerid][pTolvajSkill] : 10);
	
	if(RandomSiker(skill * 10))
	{
		SCM(playerid,COL_LRED,"Nem sikerült feltörnöd a jármûvet!");
		UnFreeze(playerid);
	}
	else
	{
		SCM(playerid,COL_VZOLD,"Sikeresen feltörted a jármûvet!");
		AjtoZar(playerid,kocsi,true,true);
		UnFreeze(playerid);
	}
	return true;
}
fpublic KocsiLopas(playerid,kocsi, billentyu)
{
	if(billentyu == Billentyu[playerid])
	{
		if(BillentyuHatra[playerid] > 0)
		{
			new asd = random(sizeof(BillentyuInfo));
			Billentyu[playerid] = BillentyuInfo[asd][0][0];
			SendClientMessage(playerid, -1,"==========================================");
			SFM(playerid,COL_RSARG,"Nyomd meg a {1E90FF}- %s -{FFFFFF} gombot!", BillentyuInfo[asd][1]);
			BillentyuHatra[playerid] --;
		}
		else
		{
			if(PlayerInfo[playerid][pTolvajSkill] < 10)
			{
				if(RandomSiker(50))
				{
				    SCM(playerid,COL_RSARG,"Autólopási képességet szereztél!");
					PlayerInfo[playerid][pTolvajSkill]++;
				}
				else
				{
				    SCM(playerid,COL_LRED,"Most nem szereztél tapasztalatot,gyakorolj tovább!");
				}
			}
			new starttime = (3000-PlayerInfo[playerid][pTolvajSkill]*200);
			defer JarmuInditas[starttime](playerid, kocsi);
			
			SCM(playerid,COL_VZOLD,"Jármû indítás...");
			PlayerInfo[playerid][pmotortinditja] = true;
			Billentyu[playerid] = NINCS;
			BillentyuHatra[playerid] = NINCS;
			MunkaFolyamatban[playerid] = 0;
		}
	}
	else
	{
		MunkaFolyamatban[playerid] = 0;
		Billentyu[playerid] = NINCS;
		BillentyuHatra[playerid] = NINCS;
		PlayerInfo[playerid][pLophat] += 180;
		SCM(playerid,COL_VZOLD,"A jármû ellopása nem sikerült,rossz vezetéket próbáltál összekötni!");
		if(PlayerInfo[playerid][pTolvajSkill] > 0)
		{
			switch(Rand(0,100))
			{
			    case 95 .. 100:
			    {
			        SCM(playerid,COL_LRED,"Autólopási képességed csökkent egy ponttal!");
			        PlayerInfo[playerid][pTolvajSkill]--;
			    }
			}
		}
	}
	return 1;
}
timer Sikertelen[5000](playerid)
{
	MunkaFolyamatban[playerid] = 0;
	Billentyu[playerid] = NINCS;
	BillentyuHatra[playerid] = NINCS;
	PlayerInfo[playerid][pLophat] += 240;
	SCM(playerid,COL_VZOLD,"A jármû ellopása nem sikerült,rossz vezetéket próbáltál összekötni!");
	if(PlayerInfo[playerid][pTolvajSkill] > 1)//
	{
		switch(Rand(0,100))
		{
		    case 85 .. 100:
		    {
		        SCM(playerid,COL_LRED,"Autólopási képességed csökkent egy ponttal!");
		        PlayerInfo[playerid][pTolvajSkill]--;
		    }
		}
	}
	return 1;
}
#if defined KELLDWAYNE
fpublic FegyverNPC(playerid)
{
	if(IsPlayerNPC(playerid))
	{
		switch(random(8))
		{
			case 0:
			{
				SetPlayerSkin(playerid, 29);
				SetPlayerPos(playerid,2786.4336,-1415.7714,16.2500);
				SetPlayerFacingAngle(playerid,229.4507);
			}
			case 1:
			{
				SetPlayerSkin(playerid, 28);
				SetPlayerPos(playerid,2527.7134,-2067.8975,13.5469);
				SetPlayerFacingAngle(playerid,222.7257);
			}
			case 2:
			{
				SetPlayerSkin(playerid, 7);
				SetPlayerPos(playerid,1681.3776,-2159.0811,13.5547);
				SetPlayerFacingAngle(playerid,127.6165);
			}
			case 3:
			{
				SetPlayerSkin(playerid, 142);
				SetPlayerPos(playerid,1209.9242,-1877.9036,13.5525);
				SetPlayerFacingAngle(playerid,132.7748);
			}
			case 4:
			{
				SetPlayerSkin(playerid, 242);
				SetPlayerPos(playerid,828.8740,-1852.8046,8.3713);
				SetPlayerFacingAngle(playerid,170.8335);
			}
			case 5:
			{
				SetPlayerSkin(playerid, 29);
				SetPlayerPos(playerid,309.2697,-1337.9407,14.4851);
				SetPlayerFacingAngle(playerid,11.1045);
			}
			case 6:
			{
				SetPlayerSkin(playerid, 28);
				SetPlayerPos(playerid,478.7434,-1332.1704,15.4454);
				SetPlayerFacingAngle(playerid,38.9914);
			}
			case 7:
			{
				SetPlayerSkin(playerid, 29);
				SetPlayerPos(playerid,771.6050,-1083.8668,24.0859);
				SetPlayerFacingAngle(playerid,139.7173);
			}
		}
	}
	return true;
}
#endif
fpublic CheckpointBeallitas(playerid,munka)
{
	if(munka == MUNKA_ARU)
	{
		new rand = random(sizeof(AruCheckpointok));
		MunkaCP[playerid][0] = AruCheckpointok[rand][0];
		MunkaCP[playerid][1] = AruCheckpointok[rand][1];
		MunkaCP[playerid][2] = AruCheckpointok[rand][2];
		SetCP(playerid, MunkaCP[playerid][0],MunkaCP[playerid][1],MunkaCP[playerid][2], 5.0, CP_ARU);
	}
	if(munka == MUNKA_PILOTA)
	{
		new rand = random(sizeof(PilotaCheckpointok));
		MunkaCP[playerid][0] = PilotaCheckpointok[rand][0];
		MunkaCP[playerid][1] = PilotaCheckpointok[rand][1];
		MunkaCP[playerid][2] = PilotaCheckpointok[rand][2];
		SetCP(playerid, MunkaCP[playerid][0],MunkaCP[playerid][1],MunkaCP[playerid][2], 5.0, CP_PILOTA);
	}
	if(munka == MUNKA_UTTISZTITO)
	{
		new rand = random(sizeof(TisztitoUtak));
		while(PlayerInfo[playerid][pTavolsag] < 3.0)	PlayerInfo[playerid][pTavolsag] = GetPlayerDistanceFromPoint(playerid, PosExt(TisztitoUtak[rand = random(sizeof(TisztitoUtak))]));
		SetCP(playerid, PosExt(TisztitoUtak[rand]), 5.0, CP_UTTISZTITO);
		
		MunkaCP[playerid][0] = TisztitoUtak[rand][0];
		MunkaCP[playerid][1] = TisztitoUtak[rand][1];
		MunkaCP[playerid][2] = TisztitoUtak[rand][2];
		
	}
	if(munka == MUNKA_MOWER)
	{
		new rand = random(sizeof(MowerUtak));
		while(PlayerInfo[playerid][pTavolsag] < 3.0)	PlayerInfo[playerid][pTavolsag] = GetPlayerDistanceFromPoint(playerid, PosExt(MowerUtak[rand = random(sizeof(MowerUtak))]));
		SetCP(playerid, PosExt(MowerUtak[rand]), 5.0, CP_MOWER);

		MunkaCP[playerid][0] = MowerUtak[rand][0];
		MunkaCP[playerid][1] = MowerUtak[rand][1];
		MunkaCP[playerid][2] = MowerUtak[rand][2];

	}
	if(munka == MUNKA_KAMION)
	{
		SetCP(playerid, PosExt(KamionUtak[PlayerInfo[playerid][pKamionc]]), 5.0, CP_KAMION_CEL);
		MunkaCP[playerid][0] = KamionUtak[PlayerInfo[playerid][pKamionc]][0];
		MunkaCP[playerid][1] = KamionUtak[PlayerInfo[playerid][pKamionc]][1];
		MunkaCP[playerid][2] = KamionUtak[PlayerInfo[playerid][pKamionc]][2];
		
	}
}
timer AruFel[1000](playerid,melyik)
{
	if(melyik == MUNKA_ARU)
	{
		AruFelpakolva[playerid] = (Rand(3,8));
		SCM(playerid,COL_LKEK,"Árú felpakolva! Megkezdheted a szállítást!");
		SFM(playerid,COL_LKEK,"Az árúk {91ff00}%s{ffffff}$ba kerültek! Levonva a fizetésedbõl!",FN(ARUKARA*AruFelpakolva[playerid]));
		CheckpointBeallitas(playerid,MUNKA_ARU);
		Freeze(playerid, NINCS);
		PlayerInfo[playerid][pFizetes] -= ARUKARA*AruFelpakolva[playerid];
		Cselekves(playerid,"felpakolta az árúkat..");
	}
	if(melyik == MUNKA_PILOTA)
	{
		AruFelpakolva[playerid] = (Rand(1,5));
		SCM(playerid,COL_LKEK,"Árú felpakolva! Megkezdheted a szállítást!");
		SFM(playerid,COL_LKEK,"Az árúk {91ff00}%s{ffffff}$ba kerültek! Levonva a fizetésedbõl!",FN(ARUKARA*AruFelpakolva[playerid]));
		CheckpointBeallitas(playerid,MUNKA_PILOTA);
		Freeze(playerid, NINCS);
		PlayerInfo[playerid][pFizetes] -= ARUKARA*AruFelpakolva[playerid];
		Cselekves(playerid,"felpakolta az árúkat..");
	}
}
timer AruLe[1000](playerid,melyik)
{
	new fizu;
	if(melyik == MUNKA_ARU){ fizu = Rand(ARUMIN,ARUMAX);SFM(playerid,COL_LKEK,"Lepakoltad az árúkat! Jutalmad %s$! - Hozzáadva a fizetésedhez!",FN(fizu)); }
	else if(melyik == MUNKA_PILOTA){ fizu = Rand(PILOTAMIN,PILOTAMAX);	SFM(playerid,COL_LKEK,"Lepakoltad az árúkat! Jutalmad %s$! - Hozzáadva a fizetésedhez!",FN(fizu)); }
	PlayerInfo[playerid][pFizetes] += fizu;
	UnFreeze(playerid);
	AruFelpakolva[playerid]--;
	if(melyik == MUNKA_ARU)
	{
		if(AruFelpakolva[playerid] >= 1)
		{
			SCM(playerid,COL_VZOLD,"Szállísd az árúkat a következõ helyre!");
			SFM(playerid, COL_LKEK,"A jármûben még maradt %d szállításra elég termék!", AruFelpakolva[playerid]);
			CheckpointBeallitas(playerid,MUNKA_ARU);
			}	else	{
			SCM(playerid,COL_VZOLD,"Elfogytak az árúk a jármûbõl! Menj vissza a munkahelyedre,és pakold fel!");
			SetPlayerCheckpoint(playerid, 2338.1218,-2071.3381,13.5538, 5.0);
			PlayerInfo[playerid][pCP] = CP_ARU2;
		}
	}
	if(melyik == MUNKA_PILOTA)
	{
		if(AruFelpakolva[playerid] >= 1)
		{
			SCM(playerid,COL_VZOLD,"Szállísd az árúkat a következõ helyre!");
			SFM(playerid, COL_LKEK,"A repülõgépben még maradt %d szállításra elég termék!", AruFelpakolva[playerid]);
			CheckpointBeallitas(playerid,MUNKA_PILOTA);
			}	else	{
			SCM(playerid,COL_VZOLD,"Elfogytak az árúk a repülõgépbõl! Menj vissza a reptérre,és pakold fel!");
			SetPlayerCheckpoint(playerid, 1617.9362,-2628.5530,13.5469, 15.0);
			PlayerInfo[playerid][pCP] = CP_PILOTA2;
		}
	}
	MunkaTPAdd(playerid, melyik, true);
}
timer GazmaszkFel[3000](playerid)
{
	Cselekves(playerid, "felvette a gázmaszkját.");
	SCM(playerid, COL_VZOLD,"Felvetted a gázmaszkod!");
	PlayerInfo[playerid][pGazmaszkFenn] = true;
}
timer BombaSzerel[30000](playerid, melyik, hol)
{
	if(!Belepve(playerid)) return false;
	if(melyik != 1) { if(!IsPlayerInAnyVehicle(playerid)) { SCM(playerid, COL_LRED,"Jármûben kell lenned a bomba beszereléséhez!"); UnFreeze(playerid); MunkaFolyamatban[playerid] = 0; return false; } }
	switch(melyik)
	{
		case 1: // sima
		{
			new Float:Pos[3];	GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
			BombaLerakva[playerid] = BombaLerak(Pos[0], Pos[1], Pos[2]);
			
			SCM(playerid, COL_VZOLD,"Bomba felszerelve! Robbantás - "#COL_LKEK"/bomba robbant");
			Cselekves(playerid, "felszerelt egy bombát", 1);
			RemovePlayerAttachedObject(playerid, BombaKezbe[playerid]); BombaKezbe[playerid] = NINCS;
			MunkaFolyamatban[playerid] = 0;
			UnFreeze(playerid);
			PlayerInfo[playerid][pCuccok][BL_C4]--;
		}
		case 2: // jármû
		{
            BombaLerakva[playerid] = BombaLerak(0.0, 0.0, 0.0,  GetPlayerVehicleID(playerid));
			SCM(playerid, COL_VZOLD,"Bomba felszerelve! Robbantás - "#COL_LKEK"/bomba robbant");
			Cselekves(playerid, "felszerelt egy bombát", 1);
			RemovePlayerAttachedObject(playerid, BombaKezbe[playerid]); BombaKezbe[playerid] = NINCS;
			MunkaFolyamatban[playerid] = 0;
			UnFreeze(playerid);
			PlayerInfo[playerid][pCuccok][BL_C4]--;
		}
		case 3: // Hatástalanít
		{
		    switch(Rand(0,100))
		    {
		        case 97 .. 100:
		        {
					SCM(playerid,COL_VZOLD,"Bomba hatástalanítása sikertelen! Fuss!");
					Cselekves(playerid, "nem tudta hatástalanítani a bombát ezért az aktiválódott!");
					UnFreeze(playerid);
					
					g_Bomba[hol][bIdo] = 5;
					MunkaFolyamatban[playerid] = 0;
		        }
		        default:
		        {
		        	if(IsPlayerInRangeOfPoint(playerid,3.0, posArr{g_Bomba[hol][bPos]}))
					{
						BombaTorol(hol);
						SCM(playerid,COL_VZOLD,"Bomba hatástalanítva!");
						Cselekves(playerid, "hatástalanította a bombát.");
						UnFreeze(playerid);
						MunkaFolyamatban[playerid] = 0;
					}
					return SCM(playerid,COL_LRED,"Mivel elmentél a helyedrõl a bomba nem lett hatástalanítva!");
		        }
		    }
			MunkaFolyamatban[playerid] = 0;
		}
	}
	return true;
}
fpublic BicoMotor(carid)
{
	new model = GetVehicleModel(carid);
	new bikes[14] = {448, 461, 462, 463, 468, 471, 481, 509, 510, 521, 522, 523, 581, 586};
	for(new u = 0; u < sizeof(bikes); u++)
	{
		if(bikes[u] == model)
			return 1;
	}
	return 0;
}
fpublic IsHajo(carid)
{
	new model = GetVehicleModel(carid);
	new hajok[10] = {430, 446, 452, 453, 454, 472, 473, 484, 493, 595};
	for(new u = 0; u < sizeof(hajok); u++)
	{
		if(hajok[u] == model)
			return 1;
	}
	return 0;
}
fpublic GetPlayerFromIP(ip[])
{
    new id = -1;
	foreach(Player,i)
	{
	    if(egyezik(JatekosIP(i),ip))
	    {
	        id = i;
	        break;
	    }
	}
	return id;
}
public OnRconLoginAttempt(ip[], password[], success)
{
	new playerid = GetPlayerFromIP(ip);
    if(!IsLewis(playerid))
    {
		Kick(playerid);
    }
    return 1;
}
fpublic Leut(playerid,melyik)
{
	if(Belepve(playerid))
	{
		switch(melyik)
		{
			case 0: // Ébredés
			{
				SCM(playerid, COL_LRED,"Magadhoz tértél viszont nagyon szédülsz és nem emlékszel mi történt..");
				SetPlayerDrunkLevel(playerid, 50000);
				Freeze(playerid, NINCS);
				Cselekves(playerid,"magához tért...");
				PlayerInfo[playerid][pLeutve] = 0;
				Leutve[playerid] = NINCS;
			}
			case 1: //Leüt
			{
				Freeze(playerid, 0);
				ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,0,1);
				Fegyver(playerid, false);
				SCM(playerid, COL_LRED,"Leütöttek ezért "#LEUTESIDO" másodpercre elájultál!");
				ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,0,1);
				ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,0,1);
				Cselekves(playerid,"elájult...");
				PlayerInfo[playerid][pLeutve] = 1;
				Leutve[playerid] = LEUTESIDO;
			}
		}
	}
	return true;
}
fpublic KocsiRespawn(kocsiid)
{
	SetVehicleToRespawn(kocsiid);
	return true;
}
fpublic IRCuzenet(channel,anyad[])
{
	foreach(Player, p)
	{
	    if(PlayerInfo[p][pChannel] == -1) continue;
	    
		if(Belepve(p))
		{
			if(PlayerInfo[p][pChannel] == channel)
			{
				SendFormatMessage(p,RSARG,"IRC[%d]: "#COL_FEHER"%s",channel,anyad);
			}
		}
	}
	return true;
}
fpublic IRCDC(playerid)
{
	if(Belepve(playerid))
	{
		new str[128];
		format(str,sizeof(str),"%s elhagyta a channelt.",returnName(playerid));
		IRCuzenet(PlayerInfo[playerid][pChannel],str);
		PlayerInfo[playerid][pChannel] = NINCS;
		SCM(playerid,COL_RSARG,"Lecsatlakoztál a channelrõl!");
	}
	return true;
}
fpublic IRCC(playerid,channel)
{
	if(Belepve(playerid))
	{
		PlayerInfo[playerid][pChannel] = channel;
		new str[128];
		format(str,sizeof(str),"%s csatlakozott a channelhez.",returnName(playerid));
		IRCuzenet(PlayerInfo[playerid][pChannel],str);
		SFM(playerid,COL_RSARG,"Csatlakoztál a "#COL_RSARG"%d."#COL_FEHER" számû channelhez!",channel);
	}
	return true;
}
timer Mergezes[20000](playerid,mergezo)
{
	if(IsPlayerNPC(playerid) && !Belepve(playerid) && Mergezve[playerid] > 0) return false;
	SCM(playerid,COL_LRED,"A méreg hatása miatt meghaltál!");
	Mergezve[playerid] = 0;
	SetHealth(playerid, 0);
	OnPlayerDeath(playerid,mergezo,999);
	return true;
}
timer MunkaTimer[1000](playerid)
{
	if(funkcio[playerid] == 2) // /atm feltölt
	{
		RemovePlayerAttachedObject(playerid,4);
		new randomosszeg = Rand(20, 70);
		SCM(playerid,COL_LRED,"ATM feltöltve!");
		SendFormatMessage(playerid, COLOR_WHITE, "A fizetésedhez "#COL_MKEK"hozzáadva"#COL_FEHER" %d$", randomosszeg);
		Trezor[playerid] = 0;
		TrezorAD[playerid] = 0;
		PlayerInfo[playerid][pFizetes] += randomosszeg;
		UnFreeze(playerid);
		funkcio[playerid] = 0;

	}
	if(funkcio[playerid] == 3)// benzinszállító feltölt
	{
		new randomosszeg = Rand(70, 120);
		SCM(playerid,COL_LRED,"Tartály feltöltve!");
		SendFormatMessage(playerid, COLOR_WHITE, "fizetésedhez "#COL_MKEK"levontunk"#COL_FEHER" %d$-t", randomosszeg);
		PlayerInfo[playerid][pFizetes] -= randomosszeg;
		BenzinSzallit[playerid] = 1;
		UnFreeze(playerid);
		funkcio[playerid] = 0;
	}
	if(funkcio[playerid] == 4)
	{
	    new randomosszeg = Rand(140,240);
	    SCM(playerid,COL_LRED,"Tartály leengedve!");
	    BenzinSzallit[playerid] = 0;
		SendFormatMessage(playerid, COLOR_WHITE, "fizetésedhez "#COL_MKEK"hozzáadtunk"#COL_FEHER" %d$-t", randomosszeg);
		PlayerInfo[playerid][pFizetes] += randomosszeg;
		UnFreeze(playerid);
		funkcio[playerid] = 0;
	}
	return 1;
}
timer Kaja[4500](playerid)
{
	GiveHealth(playerid, 20.0);
	
  	PlayerInfo[playerid][pCuccok][BL_SZENDVICS]--;
	Szukseglet(playerid, -30.0, 5.0);
	if(PlayerInfo[playerid][pCuccok][BL_SZENDVICS] > 1)
	SFM(playerid, COL_VZOLD, "Megettél egy szendvicset! Maradt még nálad %d darab!",PlayerInfo[playerid][pCuccok][BL_SZENDVICS]);
		else
	SCM(playerid, COL_VZOLD, "Megettél egy szendvicset! {FF6347}Ez volt az utolsó darab nálad!");

	Cselekves(playerid, "elõvett egy szendvicset és megette.", 0);
	Zabal[playerid] = 0;
}
public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(Tuningol[playerid] == 1)
		{
			Tuningol[playerid] = 0;
		}
		else
		{
			//ServerBan(playerid, 0, "Hack [Tuning]", NINCS, true, true, true);
			RemoveVehicleComponent(vehicleid, componentid);
			SeeKick(playerid, "Hack [Tuning]");
		}
	}
	return 1;
}
timer ASKickLagger[3000](playerid)
{
	new szPlayerName[MAX_PLAYER_NAME];
	GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);
	ASCleanup(playerid);
	
	//SeeKick(playerid, "[Hack] Lag");
}
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(Tuningol[playerid] == 1)
		{
			Tuningol[playerid] = 0;
		}
		else
		{
		//	ServerBan(playerid, 0, "Hack [Festés]", NINCS, true, true, true);
			SeeKick(playerid, "Hack [Festés]");
		}
	}
	return 1;
}
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(Tuningol[playerid] == 1)
		{
			Tuningol[playerid] = 0;
		}
		else
		{
			//ServerBan(playerid, 0, "Hack [Matrica]", NINCS, true, true, true);
			SeeKick(playerid, "Hack [Matrica]");
		}
	}
	return 1;
}
fpublic IsHitman(playerid)
{
	if(PlayerInfo[playerid][pHitman] < 0)
		return true;
		
	return false;
}
fpublic IsHitmanDiri(playerid)
{
	if(PlayerInfo[playerid][pHitman] == -2)
		return true;
		
	return false;
}


//traffipax stock
stock Text3D:AttachLabelToCamera(cameraid,text[])
{
	new position,buffer[128];format(buffer,sizeof buffer,"%s",text);
	for(new i = 0;strfind(buffer,"\\n",true) != -1;i++)
	{
	    position = strfind(buffer,"\\n",true);
	    strdel(buffer,position,position +2);
	    strins(buffer,"\r\n",position,sizeof(buffer));
	}
	return CreateDynamic3DTextLabel(buffer,CAMERA_SZOVEG_SZIN,SpeedCameras[cameraid][_x],SpeedCameras[cameraid][_y],SpeedCameras[cameraid][_z] +7,100,0,0);
}
stock UpdateCameraLabel(Text3D:labelid,text[])
{
	new position,buffer[128];format(buffer,sizeof buffer,"%s",text);
	for(new i = 0;strfind(buffer,"\\n",true) != -1;i++)
	{
	    position = strfind(buffer,"\\n",true);
	    strdel(buffer,position,position +2);
	    strins(buffer,"\r\n",position,sizeof(buffer));
	}
	return	Update3DTextLabelText(labelid,CAMERA_SZOVEG_SZIN,buffer);
}
stock LoadCameras()
{
	new file[64];
	for(new i = 0;i<CAMERA_LIMIT;i++)
	{
	    format(file,sizeof file,"/Config/traffipaxOK/%i.cfg",i);
	    if(fexist(file))
	    {
	        INI_ParseFile(file,"LoadCam",.bExtra = true,.extra = i);
			SpeedCameras[i][_objectid] = CreateDynamicObject(18880,SpeedCameras[i][_x],SpeedCameras[i][_y],SpeedCameras[i][_z],0,0,SpeedCameras[i][_rot]);
			SpeedCameras[i][_active] = true;
			if(SpeedCameras[i][_activelabel] == true)
			{
				SpeedCameras[i][_label] = AttachLabelToCamera(i,SpeedCameras[i][_labeltxt]);
			}
			loaded_cameras++;
	    }
	}
	printf("%i Trafi Betöltve.",loaded_cameras);
}
stock RemoveCameras()
{
	for(new i = 0;i<loaded_cameras +1;i++)
	{
	    if(SpeedCameras[i][_active] == true)
	    {
			DestroyDynamicObject(SpeedCameras[i][_objectid]);
	        if(SpeedCameras[i][_activelabel] == true)
	        {
				DestroyDynamic3DTextLabel(SpeedCameras[i][_label]);
	        }
	    }
	}
	return 1;
}
stock generate_id()
{
	new file[64];
	for(new i = 0;i<CAMERA_LIMIT;i++)
	{
		format(file,sizeof file,"/Config/traffipaxOK/%i.cfg",i);
		if(!fexist(file)) return i;
	}
	return -1;
}
stock CreateSpeedCam(Float:x,Float:y,Float:z,Float:rot,range,limit,fine,use_mph = 0)
{
	new newid = generate_id();
	if(newid == -1)
	{
	    print("traffipaxSystem: ERROR! Cannot create speedcam, max ammount of speedcameras has been reached!");
	    return 1;
	}
	if (newid == loaded_cameras || newid > loaded_cameras)
	{
	    loaded_cameras++;
	}
	SpeedCameras[newid][_x] = x;
	SpeedCameras[newid][_y] = y;
	SpeedCameras[newid][_z] = z;
	SpeedCameras[newid][_rot] = rot;
	SpeedCameras[newid][_range] = range;
	SpeedCameras[newid][_limit] = limit;
	SpeedCameras[newid][_fine] = fine;
	SpeedCameras[newid][_usemph] = use_mph;
	SpeedCameras[newid][_objectid] = CreateDynamicObject(18880,x,y,z,0,0,rot);
	SpeedCameras[newid][_active] = true;
	SpeedCameras[newid][_activelabel] = false;
	SpeedCameras[newid][_labeltxt] = 0;
	SpeedCameras[newid][_eddiggyujtott] = 0;
	SpeedCameras[newid][_hovamenjen] = 0;
	new file[64];format(file,sizeof file,"/Config/traffipaxOK/%i.cfg",newid);
	new INI:handler = INI_Open(file);
	INI_WriteInt(handler,"_id",SpeedCameras[newid][_id]);
	INI_WriteFloat(handler,"_x",SpeedCameras[newid][_x]);
	INI_WriteFloat(handler,"_y",SpeedCameras[newid][_y]);
	INI_WriteFloat(handler,"_z",SpeedCameras[newid][_z]);
	INI_WriteFloat(handler,"_rot",SpeedCameras[newid][_rot]);
	INI_WriteInt(handler,"_range",SpeedCameras[newid][_range]);
	INI_WriteInt(handler,"_limit",SpeedCameras[newid][_limit]);
	INI_WriteInt(handler,"_fine",SpeedCameras[newid][_fine]);
	INI_WriteInt(handler,"_usemph",SpeedCameras[newid][_usemph]);
	INI_WriteBool(handler,"_activelabel",SpeedCameras[newid][_activelabel]);
	INI_WriteString(handler,"_labeltxt",SpeedCameras[newid][_labeltxt]);
	INI_WriteInt(handler,"_eddiggyujtott",SpeedCameras[newid][_eddiggyujtott]);
	INI_WriteInt(handler,"_hovamenjen",SpeedCameras[newid][_hovamenjen]);
	INI_Close(handler);
	return newid;
}
stock SaveCamera(cameraid)
{
	new file[64];format(file,sizeof file,"/Config/traffipaxOK/%i.cfg",cameraid);
	new INI:handler = INI_Open(file);
	INI_WriteInt(handler,"_id",SpeedCameras[cameraid][_id]);
	INI_WriteFloat(handler,"_x",SpeedCameras[cameraid][_x]);
	INI_WriteFloat(handler,"_y",SpeedCameras[cameraid][_y]);
	INI_WriteFloat(handler,"_z",SpeedCameras[cameraid][_z]);
	INI_WriteFloat(handler,"_rot",SpeedCameras[cameraid][_rot]);
	INI_WriteInt(handler,"_range",SpeedCameras[cameraid][_range]);
	INI_WriteInt(handler,"_limit",SpeedCameras[cameraid][_limit]);
	INI_WriteInt(handler,"_fine",SpeedCameras[cameraid][_fine]);
	INI_WriteInt(handler,"_usemph",SpeedCameras[cameraid][_usemph]);
	INI_WriteBool(handler,"_activelabel",SpeedCameras[cameraid][_activelabel]);
	INI_WriteString(handler,"_labeltxt",SpeedCameras[cameraid][_labeltxt]);
	INI_WriteInt(handler,"_eddiggyujtott",SpeedCameras[cameraid][_eddiggyujtott]);
	INI_WriteInt(handler,"_hovamenjen",SpeedCameras[cameraid][_hovamenjen]);
	INI_Close(handler);
}
stock DestroySpeedCam(cameraid)
{
    SpeedCameras[cameraid][_active] = false;
	DestroyDynamicObject(SpeedCameras[cameraid][_objectid]);
	
	if(IsValidDynamic3DTextLabel(SpeedCameras[cameraid][_label]))
	{
		DestroyDynamic3DTextLabel(SpeedCameras[cameraid][_label]);
	}
	SpeedCameras[cameraid][_activelabel] = false;
	SpeedCameras[cameraid][_labeltxt] = 0;
    new file[64];format(file,sizeof file,"/Config/traffipaxOK/%i.cfg",cameraid);
    if(fexist(file)){fremove(file);}
	return 1;
}
stock SetSpeedCamRange(cameraid,limit)
{
	SpeedCameras[cameraid][_limit] = limit;
	return 1;
}
stock SetSpeedCamFine(cameraid,fine)
{
    SpeedCameras[cameraid][_fine] = fine;
	return 1;
}
stock Float:GetDistanceBetweenPointss(Float:x,Float:y,Float:tx,Float:ty)
{
  new Float:temp1, Float:temp2;
  temp1 = x-tx;temp2 = y-ty;
  return floatsqroot(temp1*temp1+temp2*temp2);
}

stock GetClosestCamera(playerid)
{
	new Float:distance = 10,Float:temp,Float:x,Float:y,Float:z,current = -1;GetPlayerPos(playerid,x,y,z);
	for(new i = 0;i<loaded_cameras +1;i++)
	{
	    if(SpeedCameras[i][_active] == true)
	    {
			temp = GetDistanceBetweenPointss(x,y,SpeedCameras[i][_x],SpeedCameras[i][_y]);
			if(temp < distance)
			{
				distance = temp;
				current = i;
			}
		}
	}
	return current;
}
//traffipax stock vége

stock SKVkocsi(kocsi)
{
	if(vInfo[kocsi][vMunka] == 102) return true;
	else return false;
}

stock PremiumCsomag(id)
{
	new visszateres = -1, i = -1;

	for(;++i < sizeof(TamogatasInfo);)
	{
		if(TamogatasInfo[i][1] == id)
		{
			visszateres = i;
			break;
		}
	}

	return visszateres;
}

stock ConnectNPCEx(name[])
{
	new slot = -1;
	#if SAMPVER >= 371
	new poolsize = GetPlayerPoolSize();
	#else
	new poolsize = MAX_PLAYERS;
	#endif
	for (new i = 0; i < poolsize; i++) {
		if (!IsPlayerConnected(i)) {
			slot = i;
			break;
		}
	}
	ConnectNPC(name, "npcspawn");

	return slot;
}

stock SpeedBoost(playerid)
{
	BoostTicTimer[playerid] = GetTickCount();
	new Mdebug[32];
	new Keys,ud,lr;
	new carid = GetPlayerVehicleID(playerid);
	new sebesseg = GetVehicleSpeed( carid );
	new motor = GetJarmu(carid, KOCSI_MOTOR);
	new model = GetVehicleModel(carid);
	GetPlayerKeys(playerid,Keys,ud,lr);
	Mdebug = "off";

	if(Keys == KEY_LOOK_LEFT && IsScripter(playerid))
	{
		if(debugmode)
		{
			SCM(playerid,COL_MKEK,"Debugmode = false");
			debugmode = false;
		}
		else
		{
			SCM(playerid,COL_MKEK,"Debugmode = true");
			debugmode = true;
		}
	}
	if(Keys == KEY_SPRINT)
	{
		if(motor != 0)
		{
			switch(model)
			{

				case 523:
				{
					if(sebesseg >= 100 && sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 1.03, vy * 1.03, vz * 1.03);
						Mdebug = "BOOST";
					}
					else
						Mdebug = "off";
				}
				case 596:
				{
					if(sebesseg >= 150 && sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 1.03, vy * 1.03, vz * 1.03);
						Mdebug = "BOOST";
					}
					else
						Mdebug = "off";
				}
				case 597:
				{
					if(sebesseg >= 150 && sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 1.03, vy * 1.03, vz * 1.03);
						Mdebug = "BOOST";
					}
					else
						Mdebug = "off";
				}
				case 598:
				{
					if(sebesseg >= 150 && sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 1.03, vy * 1.03, vz * 1.03);
						Mdebug = "BOOST";
					}
					else
						Mdebug = "off";
				}
				case 599:
				{
					if(sebesseg >= 150 && sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 1.03, vy * 1.03, vz * 1.03);
						Mdebug = "BOOST";
					}
					else
						Mdebug = "off";
				}
			}
		}
	}
	else if(Keys == KEY_JUMP)
	{
		if(motor != 0)
		{
			switch(model)
			{
				case 523:
				{
					if(sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 0.8, vy *0.8, vz * 0.8);
						Mdebug = "BRAKE BOOST";
					}
					else
						Mdebug = "off";
				}
				case 596:
				{
					if(sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 0.8, vy *0.8, vz * 0.8);
						Mdebug = "BRAKE BOOST";
					}
					else
						Mdebug = "off";
				}
				case 597:
				{
					if(sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 0.8, vy *0.8, vz * 0.8);
						Mdebug = "BRAKE BOOST";
					}
					else
						Mdebug = "off";
				}
				case 598:
				{
					if(sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 0.8, vy *0.8, vz * 0.8);
						Mdebug = "BRAKE BOOST";
					}
					else
						Mdebug = "off";
				}
				case 599:
				{
					if(sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 0.8, vy *0.8, vz * 0.8);
						Mdebug = "BRAKE BOOST";
					}
					else
						Mdebug = "off";
				}
			}
		}
	}
	if(IsScripter(playerid) && debugmode)
	{
		SCM(playerid,COL_MKEK,"============MATTEO===============");
		SFM(playerid,COL_MKEK,"[DEBUG] (id)Car: [%d]%s", carid, VehicleNames[model - 400]);
		SFM(playerid,COL_MKEK,"[DEBUG] Speed: %d", sebesseg);
		SFM(playerid,COL_MKEK,"[DEBUG] Max speed: %d", MaxSpeed);
		SFM(playerid,COL_MKEK,"[DEBUG] Max diference: %d", MaxSpeed-sebesseg);
		SFM(playerid,COL_MKEK,"[DEBUG] Boost: %s", Mdebug);
		SFM(playerid,COL_MKEK,"[DEBUG] Key: %d", Keys);
		SCM(playerid,COL_MKEK,"=================================");
		SCM(playerid,COL_MKEK,"");
		SCM(playerid,COL_MKEK,"");
	}
	return 1;
}

stock IsValidSkin(skinid)
{
	new badSkins[] = {
		74, // N/A Skin, ne töröld a badskinsbõl
		299, // Lewis
		167, // Csirke
		252, //Alsógatyás
		//Csövesek:
		239,
		230,
		212,
		155,
	};

	if (skinid < 0 || skinid > 312)
		return false;

	for (new i = 0; i < sizeof(badSkins); i++)
		if (skinid == badSkins[i])
			return false;

	return true;
}

stock HazUltetvenySzam( id )
{
	new d = -1, db;
	for(;++d < 50;)
		if(HazInfo[id][hDrogMi][d] > 0)
			db++;

	return db;
}

stock NearestPlant(playerid)
{
	new i = -1,
		ret = -1;

	for(;++i < sizeof(PDrogHely);)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, PDrogHely[i][0], PDrogHely[i][1], PDrogHely[i][2]))
		{
			ret = i;
			break;
		}
	}

	return ret;
}

/*----------- Animáció funkciók -----------*/

stock EloToltes(playerid)
{
	for(new id = 0; id < sizeof(EloToltesek); id++)
		PreloadAnimLib(playerid, EloToltesek[id]);
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

stock bool:Esik(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerVelocity(playerid, x, y, z);

	return (z < 0);
}

stock OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if(!Esik(playerid))
		return ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);

	return true;
}

stock LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp, vsync = 1)
{
	if(!Esik(playerid))
	{
		PlayerInfo[playerid][pUsingLoopingAnim] = 1;
		ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, vsync);
		ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, vsync);
	}
	return true;
}

stock StopLoopingAnim(playerid)
{
	PlayerInfo[playerid][pUsingLoopingAnim] = 0;
	return ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

stock PreloadAnimLib(playerid, animlib[])
	return ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);

/*----------- Animáció funkciók vége -----------*/

timer TaxiOraTimer[1000](playerid, taxis)
{
	if(!Belepve(playerid) || !Belepve(taxis))
	{
	    stop PlayerTimers[playerid][PT_TAXIORA];
		PlayerInfo[playerid][pTaxioraMegy] = false;
		return 1;
	}

	if(PlayerInfo[playerid][pTaxioraWait] > 0)
		PlayerInfo[playerid][pTaxioraWait] --;
		
	if(PlayerInfo[playerid][pTaxioraWait] == 0)
	{
		new kocsi = GetPlayerVehicleID(playerid);
		new Float:utPos[3];

		GetVehiclePos(kocsi, posArr{utPos});
		new Float:tav = GetVehicleDistanceFromPoint(kocsi, posArr{utPos});
		if( tav <= 100)
		{
	 		PlayerInfo[playerid][pTaxioraCounter] += tav*0.004;
	    }
		GetVehiclePos(kocsi, posArr{PlayerInfo[playerid][pTaxioraCounterPos]});

		new sebesseg = GetVehicleSpeed( kocsi );
		PlayerInfo[playerid][pTaxioraCounter] += sebesseg * 0.004;
 	}
	new ar = floatround(PlayerInfo[playerid][pTaxioraCounter] * PlayerInfo[playerid][pTaxioraMenetdij]);
	if(ar < PlayerInfo[playerid][pTaxioraMenetdij]) ar = PlayerInfo[playerid][pTaxioraMenetdij];
	
	nformat(taxiora, 64, "~n~~n~~n~~n~~n~~n~~w~Taxióra ~r~%d$", ar);
    GameTextForPlayer(playerid, taxiora, 1000, 5);
    GameTextForPlayer(taxis, taxiora, 1000, 5);
    return 1;
}
stock TaxiOraStop(taxis,hivo)
{
	new ar = floatround(PlayerInfo[hivo][pTaxioraCounter] * PlayerInfo[hivo][pTaxioraMenetdij]);
	
	PlayerInfo[hivo][pBszPenz] -= ar;
	SFM(hivo,COL_MKEK,"Az út ára %d$ volt. Levonva a bankszámládról.",ar);
	SFM(taxis,COL_MKEK,"%d$-t fizetett az utas. Ennek a fele a tiéd.",ar);
	new efizu = ar;
	new fizuformat[16];
	format(fizuformat,16,"%.0d",efizu);
	new fizu = strval(fizuformat);
	PlayerInfo[taxis][pBszPenz] += fizu / 2;
	CegPenz(BIZ_SKV, fizu / 4);
	FInfo[ FRAKCIO_KORMANY ][fPenz] += fizu / 4;
	
	PlayerInfo[hivo][pTaxithivott] = 0;

	stop PlayerTimers[hivo][PT_TAXIORA];
	PlayerInfo[hivo][pTaxioraMegy] = false;

	new fogadva = TaxiHivasFogadva(taxis);
    if(fogadva != NINCS)
		MarkPlayer(fogadva, taxis, COLOR_INVISIBLE, true);
}

stock TaxiOraIndit(taxis, hivo, menetdij = 1, neszamoljon = 10)
{
	PlayerInfo[hivo][pTaxioraCounter] = 0.0;
	PlayerInfo[hivo][pTaxioraMenetdij] = menetdij;
	PlayerInfo[hivo][pTaxioraWait] = neszamoljon;

	PlayerTimers[hivo][PT_TAXIORA] = repeat TaxiOraTimer(hivo, taxis);
	PlayerInfo[hivo][pTaxioraMegy] = true;
	
	GetVehiclePos(GetPlayerVehicleID(hivo), posArr{PlayerInfo[hivo][pTaxioraCounterPos]});
	
	SFM(hivo,COL_MKEK,"A vezetõ elindította a taxiórát. A menetdíj %d$! A taxióra %dmásodpercig nem számol díjat", menetdij, neszamoljon);
	SCM(taxis,COL_MKEK,"Elindítottad a menetidõt.");
	return 1;
}

stock Villogo(playerid, bool:felrak, objectid, bool:checkonly = false)
{
    new kocsi = GetPlayerVehicleID(playerid),
	jarmuidje = JarmuID(kocsi, playerid);

	if(!checkonly)
	{
		if(felrak)
		{
			if(IsValidDynamicObject(vInfo[jarmuidje][vVillogo])) return -1;

	        SetPVarInt(playerid, "vObjEdit", VOBJ_EDIT_RENDORVILLOGO);
			new Float:X, Float:Y, Float:Z, Float:A;
			GetVehiclePos(vInfo[jarmuidje][vID], X, Y, Z);
			GetVehicleZAngle(vInfo[jarmuidje][vID], A);

			vInfo[jarmuidje][vVillogo] = CreateDynamicObject(objectid, X, Y, Z, 0, 0, A);
			EditDynamicObject(playerid, vInfo[jarmuidje][vVillogo]);

			SCM(playerid,COL_LRED,"A lámpát RP-sen editeld a kocsira!!");
			SCM(playerid,COL_LRED,"A rendszer logolja, hogy ki rakta a kocsira, ha nonozol vele, örök ban!");
			Freeze(playerid);
			return true;
	 	}
	 	else
	 	{
	 	    if(!IsValidDynamicObject(vInfo[jarmuidje][vVillogo])) return -2;
	 	    DestroyDynamicObject(vInfo[jarmuidje][vVillogo]);

	 	    return true;
	 	}
	}
	else
	{
	    if(IsValidDynamicObject(vInfo[jarmuidje][vVillogo])) return true;
	    else return false;
	}
}
stock TaxiLampa(playerid, bool:felrak, bool:checkonly = false)
{
    new kocsi = GetPlayerVehicleID(playerid),
	jarmuidje = JarmuID(kocsi, playerid);
	
	if(!checkonly)
	{
		if(vInfo[jarmuidje][vModel] == 420) return 0;
		if(felrak)
		{
			if(IsValidDynamicObject(vInfo[jarmuidje][vTaxi])) return -1;

	        SetPVarInt(playerid, "vObjEdit", VOBJ_EDIT_TAXI);
			new Float:X, Float:Y, Float:Z, Float:A;
			GetVehiclePos(vInfo[jarmuidje][vID], X, Y, Z);
			GetVehicleZAngle(vInfo[jarmuidje][vID], A);
			
			vInfo[jarmuidje][vTaxi] = CreateDynamicObject(19308, X, Y, Z, 0, 0, A);
			EditDynamicObject(playerid, vInfo[jarmuidje][vTaxi]);
			
			SCM(playerid,COL_LRED,"A lámpát RP-sen editeld a kocsira!!");
			SCM(playerid,COL_LRED,"A rendszer logolja, hogy ki rakta a kocsira, ha nonozol vele, örök ban!");
			Freeze(playerid);
			return true;
	 	}
	 	else
	 	{
	 	    if(!IsValidDynamicObject(vInfo[jarmuidje][vTaxi])) return -2;
	 	    DestroyDynamicObject(vInfo[jarmuidje][vTaxi]);
	 	    
	 	    return true;
	 	}
	}
	else
	{
	    if(IsValidDynamicObject(vInfo[jarmuidje][vTaxi]) || vInfo[jarmuidje][vModel] == 420) return true;
	    else return false;
	}
}
stock TaxiHivasFogadva(taxis)
{
	new id = -1;
	foreach(Player, i)
	{
	    if(!PlayerInfo[taxis][pRadarJelzes][i]) continue;
	    if(PlayerInfo[taxis][pRadarJelzesTipus][i] != JELZES_TAXI) continue;
	    id = i;
		break;
	}
	return id;
}
stock TaxiHivasFogad(taxis,hivo)
{
	SCM(hivo,COL_MKEK,"Egy taxis fogadta a hívásod.");
	MarkPlayer(hivo, taxis, COLOR_ORANGE, true, JELZES_TAXI);
		
	foreach(Player,p)
	{
	    if(PlayerInfo[p][pSKV] == 1)
	    {
	        SFM(p,COL_MKEK,"%s elfogadta %s[%d] hívását.",JatekosNev(taxis),JatekosNev(hivo),hivo);
	    }
	}
	PlayerInfo[hivo][pTaxithivott] = 0;
	return 1;
}
timer Trafibuntethet[1000](jatekos)
{
	if(TrafiBuntetheto[jatekos] == 1)
	{
	    TrafiBuntetheto[jatekos] = 0;
	    SCM(jatekos,COL_VKEK,"traffipax újra büntethet!");
	}
	return 1;
}
stock TaxiHivas(hivo)
{
	PlayerInfo[hivo][pTaxithivott] = 1;
	SCM(hivo,COL_MKEK,"Taxist hívtál, maradj ott.");
	foreach(Player,p)
	{
	    if(PlayerInfo[p][pSKV] == 1)
	    {
	        SFM(p,COL_MKEK,"%s taxit hívott, az elfogadáshoz /lst elfogad %d",JatekosNev(hivo),hivo);
	    }
	}
	return 1;
}

stock CreateCP(playerid, mapicon, Float:x, Float:y, Float:z, Float:size, worldid = -1, interiorid = -1, Float:streamdistance = 100.0)
{
	//nem
	//SetPlayerMapIcon(playerid, 0, PosExt(KamionUtak[start]), 0, -1, MAPICON_GLOBAL);
	SetPlayerMapIcon(playerid, mapicon, x, y, z, 0, -1, MAPICON_GLOBAL);
	//native CreateDynamicCPEx(Float:x, Float:y, Float:z, Float:size, Float:streamdistance = 100.0, worlds[] = { -1 }, interiors[] = { -1 }, players[] = { -1 }, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players);
	//return CreateDynamicCPEx(x, y, z, size, streamdistance, .players = { player });
	return CreateDynamicCP(x, y, z, size, worldid, interiorid, playerid, streamdistance);
	//SetPlayerMapIcon(playerid, 12, 2204.9468, 1986.2877, 16.7380, 52, 0, MAPICON_LOCAL );
}

stock Sebessegkorlat(playerid)
{
	new
		Float:seb, Float:sk, carid,
		Float:x, Float:y, Float:z,
		Float:Vx, Float:Vy, Float:Vz;

	carid = vInfo[ PlayerInfo[playerid][pJarmuben] ][vID];
	GetVehiclePos(carid, x, y, z);
	GetVehicleVelocity(carid, Vx, Vy, Vz);

	sk = float(PlayerInfo[playerid][pSK]) / 100.0 / 1.6;

	if(!IsPlayerInRangeOfPoint(playerid, sk + 0.05, x + Vx, y + Vy, z + Vz))
	{
		seb = VectorSize(Vx,Vy,Vz);

		Vx = (Vx / seb) * sk;
		Vy = (Vy / seb) * sk;
		Vz = (Vz / seb) * sk;

		SetVehicleVelocity(carid, Vx, Vy, Vz);
	}
	return true;
}

stock bool:IsJob(playerid, job)
{
	if(PlayerInfo[playerid][pMunka1] == job || PlayerInfo[playerid][pMunka2] == job)
		return true;

	return false;
}

stock LoadBoltok()
{
	CreateDynamic3DTextLabel("(( /munka ))", COLOR_MKEK, 889.4802, -0.3294, 988.2107, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	CreateDynamic3DTextLabel("(( /munka ))", COLOR_MKEK, 2474.286, -2119.997, 14.756, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	new i = -1;
	for(;++i < BOLTOK;)
	{
		if(BoltKosarak[i][0] == 0.0 && BoltKosarak[i][1] == 0.0 && BoltKosarak[i][2] == 0.0) continue;

		CreateDynamic3DTextLabel("(( /fizet ))", COLOR_MKEK, Boltok[i][boltX], Boltok[i][boltY], Boltok[i][boltZ], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
        CreateDynamic3DTextLabel("(( /kosár ))", COLOR_MKEK, BoltKosarak[i][0], BoltKosarak[i][1], BoltKosarak[i][2], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	}
	
	i = -1;
	for(;++i < sizeof(RuhaBoltok);)
		CreateDynamic3DTextLabel("(( /vesz ))", COLOR_MKEK, RuhaBoltok[i][boltX], RuhaBoltok[i][boltY], RuhaBoltok[i][boltZ], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	return true;
}

stock PaintBallMuvelet(playerid, muvelet) // by Martin
{
	switch(muvelet)
	{
		case 1: //saját fegyverek mentése és paintball kezdése
		{
			Fegyver(playerid, false);

			new fe = NINCS;
			for(;++fe < 13;)
			{
				//Meglévõ fegyvereinek mentése változóba
				PlayerInfo[playerid][pPBFegyverek][fe] = PlayerInfo[playerid][pFegyverek][fe];
				PlayerInfo[playerid][pPBToltenyek][fe] = PlayerInfo[playerid][pToltenyek][fe];

				//kezében lévõ fegyverek nullázása kezdésnél
				PlayerInfo[playerid][pFegyverek][fe] = 0;
				PlayerInfo[playerid][pToltenyek][fe] = 0;
			}

			PlayerInfo[playerid][pPaintBall][0] = 1;
			PlayerInfo[playerid][pPaintBall][1] = 0;
			if(PlayerInfo[playerid][pBejelento])
			{
				PlayerInfo[playerid][pBejelento] = false;
				FeliratMutat( playerid, false );
			}
		}
		case 2: //saját fegyverek visszaállítása
		{
			Fegyver(playerid, false);

			new fe = NINCS;
			for(;++fe < 13;)
			{
				//Mérkõzés végén fegyverek visszaálítása
				PlayerInfo[playerid][pFegyverek][fe] = PlayerInfo[playerid][pPBFegyverek][fe];
				PlayerInfo[playerid][pToltenyek][fe] = PlayerInfo[playerid][pPBToltenyek][fe];

				//Mentett fegyverek nullázása
				PlayerInfo[playerid][pPBFegyverek][fe] = 0;
				PlayerInfo[playerid][pPBToltenyek][fe] = 0;
			}

			SetPlayerAttachedWeapon(playerid);
			PlayerInfo[playerid][pPaintBall][0] = 0;
			PlayerInfo[playerid][pPaintBall][1] = 0;
		}
		case 3: //fegyver beállítás (spawnoláskor)
		{
			GiveWeapon(playerid, 24, 200, false, true);//deagle
			GiveWeapon(playerid, 29, 500, false, true);//MP5
			GiveWeapon(playerid, 25, 200, false, true);//Shotgun
			GiveWeapon(playerid, 31, 500, false, true);//M4

			SetPlayerAttachedWeapon(playerid);
			new rand = random(sizeof(PaintBallPos));
			SetPos(playerid, PosExt(PaintBallPos[rand]));
			SetVirtualWorld(playerid, 9876);
			SetInterior(playerid, 10);
		}
		case 4: //mérkõzés indítása
		{
			PaintBallMuvelet(playerid, 3);
			//if(Iter_Count(PaintBallban) > 1)
		}
	}
	return true;
}

stock LoadAratas()
{
    new i = -1;
	for(;++i < sizeof(Aratas_Objectek);)
	{
		//1007
		AratasInfo[i][aratasObject] = CreateDynamicObject(Aratas_Objectek[i][aratasID], Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ], Aratas_Objectek[i][aratasRX], Aratas_Objectek[i][aratasRY], Aratas_Objectek[i][aratasRZ]);
		AratasInfo[i][aratasPickup] = CreateDynamicPickup(1007, 14, Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ] + 0.8, 0);
		//AratasInfo[i][aratasText] = CreateDynamic3DTextLabel((Aratas_Objectek[i][aratasLearatva] ? ("Veteményes\nLearatva") : ("Veteményes\nNincs aratva")), -1, Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
	}
	printf("Szerver: %d aratás object sikeresen betöltve!", sizeof(Aratas_Objectek));
	return true;
}

stock PopPlayerTires(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid != 0)
	{
		new Float:hp;
		GetVehicleHealth(vehicleid, hp);
		if(hp >= 700.0 && hp <= 1000.0) SetVehicleHealth(vehicleid, hp - 200.0);
		new panels, doors, lights, tires;
		GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
		//KocsiGumi[vehicleid] = 100.00;
	}
}

stock GetXYInFrontOfPlayer(playerid,&Float:x,&Float:y,Float:dis)
{
	new Float:a, Float:z;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,a);
	GetXYInFrontOfPoint(x, y, a, dis);
}

stock Float:GetDistance( Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2 )
{
	return VectorSize( x1-x2, y1-y2, z1-z2 );
}

stock strtoupper( string[] )
{
	new i = -1;
	for(;++i < strlen(string);)
	{
		string[i] = toupper(string[i]);
	}
	return string;
}

fpublic OnPlayerPause(playerid, paused)
{
	if(paused)
	{
		if(PlayerInfo[playerid][pFegyver] == 43 || PlayerInfo[playerid][pFegyver] == 44 || PlayerInfo[playerid][pFegyver] == 45)
			return true;

		if(IsPlayerInRangeOfPoint(playerid,10,1659.5399,221.7910,-82.2500))
		{
			CsomagtartoAFK[playerid]++;
			return 1;
		}

		if(!PlayerInfo[playerid][pSzunetel])
		{
			PlayerInfo[playerid][pSzunetel] = true;
			PlayerInfo[playerid][pAFK_text] = CreateDynamic3DTextLabel((format(uzenet, sizeof(uzenet), "[AFK: %s]", TimeFormat( PlayerInfo[playerid][pAfkIdo], true )), uzenet), LKEK, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1);
		}

	} else {

		if(PlayerInfo[playerid][pSzunetel] || IsValidDynamic3DTextLabel( PlayerInfo[playerid][pAFK_text] ))
		{
			PlayerInfo[playerid][pSzunetel] = false;
			//if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pAFK_text] ))
			//{
			DestroyDynamic3DTextLabel( PlayerInfo[playerid][pAFK_text] );
			PlayerInfo[playerid][pAfkIdo] = 0;
			//}
			PlayerInfo[playerid][pAFK_text] = INVALID_3D_TEXT_ID;
		}
		PlayerInfo[playerid][pAfkIdo] = 0;
	}
	return true;
}

fpublic StreamUpdate(playerid, forplayerid)
{
	
    if(PlayerInfo[forplayerid][pNevek] && PlayerInfo[playerid][pNoname] == 0)
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	else
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);

	if(PlayerInfo[playerid][pNoname] == 1 && Admin(forplayerid, 1))
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	else
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);

	if((PlayerInfo[forplayerid][pNevek] && Admin(forplayerid, 1)) || (PlayerInfo[forplayerid][pNevek] && PlayerInfo[forplayerid][pFrakcio] == PlayerInfo[playerid][pFrakcio]) && !PlayerInfo[playerid][pAduty])
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	else
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);

    new bool:jelezve = false;
	if(Erosites[playerid] == 1 && RendvedelmiFrakcioTag(forplayerid)) SetPlayerMarkerForPlayer(forplayerid,playerid,0x00ff66AA), jelezve = true;
 	if(IsHitman(forplayerid) && PlayerInfo[forplayerid][pHitmanDuty] && PlayerInfo[playerid][pVerdij] > 0) SetPlayerMarkerForPlayer(forplayerid,playerid,COLOR_SZURKE), jelezve = true;
	if(PlayerInfo[forplayerid][pRadarJelzes][playerid])
	{
		SetPlayerMarkerForPlayer(forplayerid, playerid, PlayerInfo[forplayerid][pRadarJelzesCol][playerid]);
		jelezve = true;
 	}
	
    if(PlayerInfo[forplayerid][pTog][15] == false && PlayerInfo[playerid][pAduty]) SetPlayerMarkerForPlayer(forplayerid, playerid, LKEK), jelezve = true;
    
    if(!jelezve)
    {
        SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_INVISIBLE), jelezve = true;
	}
}
public OnPlayerStreamIn(playerid, forplayerid)
{
    StreamUpdate(playerid, forplayerid);
	PlayerInfo[forplayerid][pStreameltplayer]++;
	PlayerInfo[playerid][pMasoknakstreamelt]++;

	return true;
}
public OnPlayerStreamOut(playerid, forplayerid)
{
    StreamUpdate(playerid, forplayerid);
	
	PlayerInfo[forplayerid][pStreameltplayer]--;
	PlayerInfo[playerid][pMasoknakstreamelt]--;
	return 1;
}
public OnVehicleStreamOut(vehicleid, forplayerid)
{
	PlayerInfo[forplayerid][pStreameltvehicle]--;
	return 1;
}
stock NevMutatas(playerid, bool:mv)
{
	foreach(Player, x)
	{
		if(!PlayerInfo[x][pNevek]) continue;
		ShowPlayerNameTagForPlayer(x, playerid, mv);
	}
}
stock MutatNevek(playerid, bool:ext)
{
	foreach(Player, x)
	{
		if(PlayerInfo[x][pNoname]) continue;
		ShowPlayerNameTagForPlayer(playerid, x, ext);
	}
	return true;
}

stock Idojaras(playerid = NINCS, extra = NINCS)
{
	new Idojarasok[16][3][24] =
    {
		{2,		"Meleg idõ",			0},
		{3,		"Fülledt idõ",			0},
		{4,		"Felhõs idõ", 			0},
		{5,		"Enyhén napos idõ", 	1},//ez
		{6,		"Napsütéses idõ", 		1},//ez
		{7,		"Felhõs idõ", 			0},
		{8,		"Esõs idõ", 			0},
		{9,		"Ködös idõ", 			0},
		{10,	"Hõhullám", 			0},
		{12,	"Enyhén felhõs idõ",	0},
		{13,	"Tulnyomóan napos idõ", 1},//ez
		{14,	"Derûs idõ", 			1},//ez
		{15,	"Borongós idõ", 		0},
		{16,	"Jégesõ", 				0},
		{17,	"Napos, fülledt idõ", 	1},//ez
		{20,	"Erõsen felhõs idõ", 	0}
    };

	if(playerid == NINCS)
	{
		new bool:gen = false;
		if(ServerInfo[sIdojarasKov] == 9 && extra == NINCS)
		{
			gen = true;
			ServerInfo[sIdojarasKov] = 0;
			extra = 9;
		}

		if(extra == NINCS && !gen)
		{
			RE_CONFIG:
			new idx = random(sizeof(Idojarasok));
			new Hour, Minute, Second;
			gettime(Hour, Minute, Second);
			if(ServerInfo[sIdojaras] == extra)
				goto RE_CONFIG; //ugyan azt az idõjárást ne adja

			if((Hour > 18 && Hour < 5) && Idojarasok[idx][2][0] == 1)
				goto RE_CONFIG; // este ne legyen Napos idõ

			if(Idojarasok[idx][0][0] == 16 || Idojarasok[idx][0][0] == 8)
				ServerInfo[sIdojarasKov] = 9; //Vihar után köd legyen

			extra = Idojarasok[idx][0][0];
		}

		ServerInfo[sIdojaras] = extra;
		new i = NINCS, id = NINCS, str[32] = "Napos idõ";
		for(;++i < sizeof(Idojarasok);)
		{
			if(Idojarasok[i][0][0] == extra)
				id = i;
		}

		if(id != NINCS)
			format(str, sizeof(str), "%s", Idojarasok[id][1]);

		printf("Szerver: Idõjárás változás: %d | %s", extra, str);
		SendFormatMessageToAll(COLOR_YELLOW, "<< San Andreas Idõjárás jelentés: %s várható! >>", str);

		foreach(Player, p)
			if(!PlayerInfo[p][pvirtualworld] && !PlayerInfo[p][pinterior])
				SetPlayerWeather(p, extra);

	} else {

		if(extra == NINCS) extra = ServerInfo[sIdojaras];
		SetPlayerWeather(playerid, extra);
	}
	return true;
}



stock IllegalCharacter(string[])
{
	new i = NINCS;
	for(;++i < strlen(string);)
	{
		if(('a' <= string[i] <= 'z') || ('A' <= string[i] <= 'Z') || ('0' <= string[i] <= '9'))
			continue;

		if((string[i] == '.') (string[i] == '_') || (string[i] == ' ') || (string[i] == '-') || (string[i] == '(') || (string[i] == ')') || (string[i] == '+'))
			continue;

		strdel(string, i, i + 1);
		i--;
	}
	return string;
}

stock Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y) {

  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2, X));
  DY = floatabs(floatsub(y2, Y));

  if (DY == 0.0 || DX == 0.0) {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else {
    angle = atan(DX/DY);

    if(X > x2 && Y <= y2) angle += 90.0;
    else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    else if(X < x2 && Y >= y2) angle -= 90.0;
    else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  }

  return floatadd(angle, 90.0);
}

stock RandomString(len = 32)
{
	if(len > 128)
		len = 32;

	new visszater[128];

	new i = -1;
	new karakterek[65] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	for(;++i < len;)
	{
		visszater[i] = karakterek[random(strlen(karakterek))];
	}
	strdel(visszater, len, 128);
	return visszater;
}

stock UnixToTime( ido, bool:timestamp = true )
{
	new tmp[2], nap, ora, perc, str[32];
	if(ido == NINCS)
	{
		format(str, sizeof(str), "Örök");
		return str;
	}

	if(ido < gettime())
	{
		format(str, sizeof(str), "Nincs");
		return str;
	}

	if(timestamp)
		ido = (ido - gettime());
	
	if(ido < 60)
		format(str, sizeof(str), "%d mp", ido);
	else if(ido < 3600)
	{
		ido = floatround(ido / 60);
		format(str, sizeof(str), "%d perc", ido);
	}
	else if(ido < (3600 * 24))
	{
		tmp[0] = floatround(ido / 60);// - össz perc
		tmp[1] = floatround(tmp[0] / 60);// - össz óra
		perc = floatround(tmp[0] - (tmp[1] * 60)); // eredménye perc
		ora = floatround(ido / 3600); //eredménye óra
		format(str, sizeof(str), "%d óra és %d perc", ora, perc);

	} else {

		tmp[0] = floatround(ido / 60);// - össz perc
		tmp[1] = floatround(tmp[0] / 60);// - össz óra
		perc = floatround(tmp[0] - (tmp[1] * 60)); // eredménye perc
		ora = floatround(ido / 3600); //eredménye óra
		nap = floatround(ora / 24);//eredménye nap
		ora = floatround(ora - (nap * 24)); //eredménye óra
		format(str, sizeof(str), "%d nap %d óra és %d perc", nap, ora, perc);
	}
	return str;
}

stock SzerverNev()
{
        if(ServerInfo[sPort] == 7777)
        {
                ServerInfo[sCounter]++;
                szervernev_start:

                if(ServerInfo[sCounter] <= 1)
                        SendRconCommand("hostname « "#PREFIX" »");
                else if(ServerInfo[sCounter] == 5)
                        SendRconCommand("hostname « "#PREFIX" ~ Gyere és játssz MO. legismertebb szerverén! »");
                else if(ServerInfo[sCounter] == 8)
                        SendRconCommand("hostname « "#PREFIX" ~ Légy tagja te is egy dinamikusan fejlõdõ közösségnek! »");
                else if(ServerInfo[sCounter] == 12)
                        SendRconCommand("hostname « "#PREFIX" ~ Egy elpusztíthatatlan közösség! »");
                else if(ServerInfo[sCounter] == 15)
                        SendRconCommand("hostname « "#PREFIX" ~ Web: http://"#WEBOLDAL"/ »");
                else if(ServerInfo[sCounter] >= 18)
                {
                        ServerInfo[sCounter] = 1;
                        goto szervernev_start;
                }
        } else
		{
			SendRconCommand("hostname « "#PREFIX" ~ Alpha »");
        }

        return true;
}
stock GetVehiclePanelsDamageStatus(vehicleid, &FrontLeft, &FrontRight, &RearLeft, &RearRight, &WindShield, &FrontBumper, &RearBumper)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	FrontLeft = Panels & 15;
	FrontRight = Panels >> 4 & 15;
	RearLeft = Panels >> 8 & 15;
	RearRight = Panels >> 12 & 15;
	WindShield = Panels >> 16 & 15;
	FrontBumper = Panels >> 20 & 15;
	RearBumper = Panels >> 24 & 15;
	return true;
}

stock GetVehicleDoorsDamageStatus(vehicleid, &Bonnet, &Boot, &FrontLeft, &FrontRight, &RearLeft, &RearRight)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	Bonnet = Doors & 7;
	Boot = Doors >> 8 & 7;
	FrontLeft = Doors >> 16 & 7;
	FrontRight = Doors >> 24 & 7;
	RearLeft = Doors >> 32 & 7;
	RearRight = Doors >> 40 & 7;
	return true;
}

stock GetVehicleLightsDamageStatus(vehicleid, &First, &Second, &Third, &Fourth)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	First = Lights & 1;
	Second = Lights >> 1 & 1;
	Third = Lights >> 2 & 1;
	Fourth = Lights >> 3 & 1;
	return true;
}

stock GetVehicleTiresDamageStatus(vehicleid, &FrontLeft, &FrontRight, &RearLeft, &RearRight)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	if(GetVehicleType(vehicleid) == MOTORBIKE || GetVehicleType(vehicleid) == BIKE) FrontLeft = Tires >> 1 & 1, FrontRight = Tires & 1;
	else
	{
		RearRight = Tires & 1;
		FrontRight = Tires >> 1 & 1;
		RearLeft = Tires >> 2 & 1;
		FrontLeft = Tires >> 3 & 1;
	}
	return true;
}

stock UpdateVehiclePanelsDamageStatus(vehicleid, FrontLeft, FrontRight, RearLeft, RearRight, WindShield, FrontBumper, RearBumper)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	return UpdateVehicleDamageStatus(vehicleid, FrontLeft | (FrontRight << 4) | (RearLeft << 8) | (RearRight << 12) | (WindShield << 16) | (FrontBumper << 20) | (RearBumper << 24), Doors, Lights, Tires);
}

stock UpdateVehicleDoorsDamageStatus(vehicleid, Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	return UpdateVehicleDamageStatus(vehicleid, Panels, Bonnet | (Boot << 8) | (FrontLeft << 16) | (FrontRight << 24) | (RearLeft << 32) | (RearRight << 40), Lights, Tires);
}

stock UpdateVehicleLightsDamageStatus(vehicleid, First, Second, Third, Fourth)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	return UpdateVehicleDamageStatus(vehicleid, Panels, Doors, First | (Second << 1) | (Third << 2) | (Fourth << 3), Tires);
}

#define CAR 0
#define BIKE 1
#define MOTORBIKE 2
#define BOAT 3
#define PLANE 4
#define RC 5
#define TRAIN 6
#define TRAILER 7
#define HELICOPTER 8
//#include <united>

stock GetVehicleType(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 400 .. 416, 418 .. 424, 426 .. 429, 431 .. 434, 436 .. 440, 442 .. 445, 451, 455 .. 459, 466, 467, 470, 471, 474, 475, 477 .. 480, 482, 483, 485, 486, 489 .. 492, 494 .. 496, 498 .. 500, 502 .. 508, 514 .. 518, 524 .. 536, 539 .. 547, 549 .. 552, 554 .. 562, 565 .. 568, 571 .. 576, 578 .. 580, 582, 583, 585, 587 .. 589, 596 .. 605, 609: return CAR;
		case 481, 509, 510: return BIKE;
		case 448, 461 .. 463, 468, 521 .. 523, 581, 586: return MOTORBIKE;
		case 430, 446, 452 .. 454, 472, 473, 484, 493, 595: return BOAT;
		case 460, 476, 511 .. 513, 519, 520, 553, 577, 592, 593: return PLANE;
		case 441, 464, 465, 501, 564, 594: return RC;
		case 449, 537, 538, 569, 570, 590: return TRAIN;
		case 435, 450, 584, 591, 606 .. 608, 610, 611: return TRAILER;
		case 417, 425, 447, 469, 487, 488, 497, 548, 563: return HELICOPTER;
	}
	return -1;
}

stock GetVehicleMType(type)
{
	switch(type)
	{
		case 400 .. 416, 418 .. 424, 426 .. 429, 431 .. 434, 436 .. 440, 442 .. 445, 451, 455 .. 459, 466, 467, 470, 471, 474, 475, 477 .. 480, 482, 483, 485, 486, 489 .. 492, 494 .. 496, 498 .. 500, 502 .. 508, 514 .. 518, 524 .. 536, 539 .. 547, 549 .. 552, 554 .. 562, 565 .. 568, 571 .. 576, 578 .. 580, 582, 583, 585, 587 .. 589, 596 .. 605, 609: return CAR;
		case 481, 509, 510: return BIKE;
		case 448, 461 .. 463, 468, 521 .. 523, 581, 586: return MOTORBIKE;
		case 430, 446, 452 .. 454, 472, 473, 484, 493, 595: return BOAT;
		case 460, 476, 511 .. 513, 519, 520, 553, 577, 592, 593: return PLANE;
		case 441, 464, 465, 501, 564, 594: return RC;
		case 449, 537, 538, 569, 570, 590: return TRAIN;
		case 435, 450, 584, 591, 606 .. 608, 610, 611: return TRAILER;
		case 417, 425, 447, 469, 487, 488, 497, 548, 563: return HELICOPTER;
	}
	return -1;
}

stock UpdateVehicleTiresDamageStatus(vehicleid, FrontLeft, FrontRight, RearLeft, RearRight)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	if(GetVehicleType(vehicleid) == MOTORBIKE || GetVehicleType(vehicleid) == BIKE) return UpdateVehicleDamageStatus(vehicleid, Panels, Doors, Lights, FrontRight | (FrontLeft << 1));
	else return UpdateVehicleDamageStatus(vehicleid, Panels, Doors, Lights, RearRight | (FrontRight << 1) | (RearLeft << 2) | (FrontLeft << 3));
}

stock encode_tires(tire1, tire2, tire3, tire4)
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);

stock encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
	return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);

stock encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
    #pragma unused behind_driver_door
    #pragma unused behind_passenger_door
    return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
}

stock encode_lights(light1, light2, light3, light4)
	return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);

stock FrakcioID(hanyadik)
{
	new i = -1, num = 0, visszater = -1;
	for(;++i < MAX_FRAKCIO;)
	{
		if(FInfo[i][fVan])
		{
			if(hanyadik == num)
			{
				visszater = i;
				break;
			}
			num++;
		}
	}
	return visszater;
}

stock ButorObjectID(objectid)
{
	new i = NINCS, visszateres = NINCS;
	for(;++i < MAXBUTORSZAM;)
	{
		if(ButorInfo[i][butorHasznalva])
		{
			if(ButorInfo[i][butorObject] == objectid)
			{
				visszateres = i;
				break;
			}
		}
	}
	return visszateres;
}

stock Tab(text[], text2[], tabcount = 0)
{
	new tab_[16] = "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",out[128];
	if((tabcount = (((tabcount + 1) * 8) - strlen(text) - 1) / 8) < 0
	|| tabcount >= sizeof tab_) tabcount = 0;
	format(out, sizeof out, "%s%s%s", text, tab_[(sizeof(tab_) - 1) - tabcount], text2);
	return out;
}

stock TabEx(text[], dest[], size = 0)
{
	new
		pos2[32],
		out[128],
		cilkus = ((((size*8) - strlen(text)) + 8) / 8);

	if(((((size*8) - strlen(text)) + 8) % 8) == 0) cilkus -= 1;
	for(new i = 0; i < cilkus; i++) strins(pos2, "\t", 0, 128);

	strins(out, text, 0, 128);
	strins(out, pos2, strlen(out), 128);
	strins(out, dest, strlen(out), 128);
	return out;
}

stock SzabadButorID()
{
	new visszateres = NINCS,i = NINCS;
	for(;++i < MAXBUTORSZAM;)
	{
		if(!ButorInfo[i][butorHasznalva])
		{
			visszateres = i;
			break;
		}
	}
	return visszateres;
}

stock NincsHaza(playerid)
{
	new i = -1;
	for(;++i < MAX_HAZ_JARMU;)
	{
		if(PlayerInfo[playerid][pHazKulcs][i] != 0)
		{
			return true;
		}
	}

	return false;
}

stock Hazban(playerid, haz)
{
	if(
		GetPlayerVirtualWorld(playerid) == haz &&
		GetPlayerInterior(playerid) == BelsoInterior[HazInfo[haz][hInterior]][bInterior] &&
		PlayerInfo[playerid][phaz] == haz
	)
		return true;

	return false;
}

stock HazabanVan(playerid)
{
	if(!NincsHaza(playerid))
		return NINCS;

	new i = -1, visszater = -1;
	for(;++i < MAX_HAZ_JARMU;)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pHazKulcs][i]))
		{
			visszater = PlayerInfo[playerid][pHazKulcs][i];
			break;
		}
	}

	return visszater;
}

stock KozeliHazEx(playerid/*, Float:tavolsag*/) //by Razo
{
	new ciklus = -1, houseid = -1;
	for(;++ciklus < MAX_HOUSE;)
	{
		if(HazInfo[ciklus][hasznalatban])
		{
			if(IsPlayerInRangeOfPoint(playerid, 25.0, HazInfo[ciklus][posx], HazInfo[ciklus][posy], HazInfo[ciklus][posz]))
	        {
	            houseid = ciklus;
	            break;
	        }
		}
		//houseid = -1;
	}
	return houseid;
}

stock SajatHazaKozeleben(playerid) // by Razo
{
	if(!NincsHaza(playerid)) return false;
	new haz = KozeliHazEx(playerid);
	if(haz == -1) return false;
	if(PlayerInfo[playerid][pHazKulcs][haz])) return true;
	return false;
}

stock GetXButor(playerid, szam)
{
	new visszateres = NINCS,i = NINCS,
	szamlalas = 0,hazszam = HazabanVan(playerid);
	//printf("Szám: %d", szam);
	for(;++i < MAXBUTORSZAM;)
	{
		if(ButorInfo[i][butorVW] == hazszam && ButorInfo[i][butorHasznalva])
		{
			szamlalas++;
			if(szamlalas == szam)
			{
				visszateres = i;
				//printf("Visszatérés: %d", visszateres);
				break;
			}
		}
	}
	return visszateres;
}

stock HazSzef(playerid)
{
	if(!NincsHaza(playerid))
		return -2;

	if(HazabanVan(playerid) == NINCS)
		return NINCS;

	new i = NINCS,
		visszater = -3;

	for(;++i < MAXBUTORSZAM;)
	{
		if((ButorInfo[i][butorHasznalva]) && (ButorInfo[i][butorVW] == PlayerInfo[playerid][phaz]))
		{
			if(ButorInfo[i][butorModel] == 2332)
			{
				visszater = i;
				break;
			}
		}
	}
	return visszater;
}

stock ButorSzam(playerid)
{
	if(!NincsHaza(playerid))
		return -2;

	if(HazabanVan(playerid) == NINCS)
		return NINCS;

	new i = NINCS,szamlalas = 0,
	hazszam = HazabanVan(playerid);

	for(;++i < MAXBUTORSZAM;)
	{
		if((ButorInfo[i][butorHasznalva] == true) && (ButorInfo[i][butorVW] == hazszam))
		{
			szamlalas++;
		}
	}
	return szamlalas;
}

stock VanUtas( vid )
{
	foreach(Player, i)
		if(IsPlayerInVehicle(i, vid)) return true;

	return false;
}

stock IsSeatTaken(vehicleid, seatid)
{
	new id = NINCS;
	foreach(Player, i)
		if((GetPlayerVehicleID(i) == vehicleid) && (GetPlayerVehicleSeat(i) == seatid))
		{
			id = i;
			break;
		}

    return id;
}

stock ProcessSQL( )
{
	//mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_HIFI_TABLE"`", 	"HifiLoad", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_KAMERA_TABLA"`", 	"KameraLoad", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_SPRAY_TABLA"`", 	"GraffitiLoad", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_DRINK_TABLE"`", 	"DrinkLoad", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_JARMU_TABLA"`", 	"JarmuBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_HAZ_TABLA"`", 		"HazBetoltes", 			"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_GARAZS_TABLA"`", 	"GarazsBetoltes", 			"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_FRAKCIO_TABLA"`", 	"FrakcioBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_TERULET_TABLA"`", 	"TeruletBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_GPS_TABLA"`", 	"GPSBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_BENZINKUTAK_TABLA"`", 	"BenzinkutBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_CUCCOK_TABLA"`", 	"LoadEldobottCuccok", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_TELEPORT_TABLA"`", 	"TeleBetoltese", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_KAPU_TABLA"`", 	"KapuBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_BUTOR_TABLA"`", 	"ButorBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_JARMUADAT_TABLA"`", "JarmuadatBetoltes",	"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_CEGEK_TABLA"`", 	"CegMuvelet", 		"i",	1);
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_3DTEXT_TABLA"`", 	"LabelBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_AJTO_TABLA"`", 	"AjtokBetoltese", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_TUZEK_TABLA"`", 		"TuzBetoltes", 		"");
	return true;
}

stock MySQLUpdateSTR(query[], mezo[], ertek[])
{
	new myfor[256];
	format(myfor, 256, "%s='%s', ", mezo, ertek);
	strcat(query, myfor, 5000);
	return true;
}

stock MySQLUpdateINT(query[], mezo[], ertek)
{
	new myfor[256];
	format(myfor, 256, "%s='%d', ", mezo, ertek);
	strcat(query, myfor, 5000);
	return true;
}

stock MySQLUpdateFLOAT(query[], mezo[], Float:ertek)
{
	new myfor[256];
	format(myfor, 256, "%s='%f', ", mezo, ertek);
	strcat(query, myfor, 5000);
	return true;
}

stock MySQLFinalUpdate(query[], mezo[], ertek)
{
	new string[64];
	query[strlen(query) - 2] = '\0';
	format(string, 64, " WHERE %s='%d'", mezo, ertek);
	strcat(query, string, 5000);
	mysql_tquery(sql_ID, query, "", "");
	return true;
}

stock num_hash(buf[])
{
    new length=strlen(buf);
    new s1 = 1, s2 = 0, n;
    for(n=0; n<length; n++)
	{
        s1 = (s1 + buf[n]) % 65521;
        s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}
#define MAX_ALSOVONAS 2

stock HelyesNevString(name[])
{
	new alahuzasok = 0;
	if (strlen(name) >= MAX_PLAYER_NAME || strlen(name) < 6) return -8;
    if (name[0] < 'A' || name[0] > 'Z') return -1;
    for(new i = 1; i < strlen(name); i++)
    {
        if(name[i] >= '0' && name[i] <= '9') return -2;
		if(name[i] != '_' && (name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z')) return -3;
        if( (name[i] >= 'A' && name[i] <= 'Z') && (name[i - 1] != '_') ) return -4;
        if(name[i] == '_')
        {
            alahuzasok++;
            if(alahuzasok > MAX_ALSOVONAS || i == strlen(name)) return -5;
            if(name[i + 1] < 'A' || name[i + 1] > 'Z') return -6;
        }
    }
    if (alahuzasok == 0) return -7;
    
    return 1;
}

//Ha a slot egyenlõ és a fegyver id nem akkor igaz
stock SameWeaponSlot(ez, az)
{
	return ((aWeaponSlotok[ez] == aWeaponSlotok[az]) && (ez != az));
}

stock DeleteWeapon(playerid)
{
	new fegyver = -1;
	for(;++fegyver < 13;)
	{
		PlayerInfo[playerid][pFegyverek][fegyver] = 0;
		PlayerInfo[playerid][pToltenyek][fegyver] = 0;
	}
	Fegyver(playerid, false);
	return true;
}
stock GivePP(playerid, amount)
{
	new bool:returnst = false;
    if(amount > 0)
		PlayerInfo[playerid][pPremiumPont] += amount, returnst = true;
	else if(amount < 0 && (PlayerInfo[playerid][pPremiumPont] + amount) > 0)
	    PlayerInfo[playerid][pPremiumPont] += amount, returnst = true;

	return returnst;
}
stock GiveWeapon(playerid, fegyver, loszer, bool:ujratolt = false, bool:set = false)
{
    if(!ujratolt)
		loszer++;
    
	if(fegyver > 47)
		return true;

	if(PlayerInfo[playerid][pjatekosszint] < 3 || !Belepve(playerid))
		return true;

	if((35 <= fegyver <= 38 || 43 <= fegyver <= 45) && PlayerInfo[playerid][padmin] < FOADMIN_SZINT)
		return true;

	PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
	if(!IsPlayerInAnyVehicle(playerid))
		Fegyver(playerid, true, fegyver, loszer);

	if(loszer < 0)
	{
		PlayerInfo[playerid][pFegyverek][aWeaponSlotok[fegyver]] = 0;
		PlayerInfo[playerid][pToltenyek][aWeaponSlotok[fegyver]] = 0;
		return true;
	}

	if(PlayerInfo[playerid][pFegyverek][ aWeaponSlotok[fegyver] ] && (PlayerInfo[playerid][pFegyverek][aWeaponSlotok[fegyver]] == fegyver) && !set)
		PlayerInfo[playerid][pToltenyek][ aWeaponSlotok[fegyver] ] += loszer;
	else
	{
		PlayerInfo[playerid][pFegyverek][aWeaponSlotok[fegyver]] = fegyver;
		PlayerInfo[playerid][pToltenyek][aWeaponSlotok[fegyver]] = loszer;
	}

	if(!IsPlayerInAnyVehicle(playerid))
	{
		if(!ujratolt)
			ResetPlayerWeapons(playerid);

		if(!loszer && ujratolt){
			GivePlayerWeapon(playerid, PlayerInfo[playerid][pFegyverek][aWeaponSlotok[fegyver]], 0);
  		}
		else
			GivePlayerWeapon(playerid, PlayerInfo[playerid][pFegyverek][aWeaponSlotok[fegyver]], PlayerInfo[playerid][pToltenyek][aWeaponSlotok[fegyver]]);
	}

	return true;
}

stock TeleNameToID(const neve[])
{
    new vissza = NINCS, t = NINCS;
    for(;++t < MAX_TELEPORT;)
    {
        if(TPInfo[t][tphasznalva])
        {
			if(!strcmp(neve, TPInfo[t][tpnev], true))
			{
				vissza = t;
				break;
			}
        }
    }
    return vissza;
}

stock SetPos(playerid, Float:psx, Float:psy, Float:psz, Float:angle = -999.9, bool:update = false)
{
	if(update) {
		PlayerInfo[playerid][posx] = psx;
		PlayerInfo[playerid][posy] = psy;
		PlayerInfo[playerid][posz] = psz;
	}

	SetPlayerPos(playerid, psx, psy, psz);
	if(angle != -999) {
		if(update)
			PlayerInfo[playerid][pangle] = angle;
		SetPlayerFacingAngle(playerid, angle);
	}

	return true;
}

stock SetSkin(playerid, skin, bool:update = true)
{
	if(update)
		PlayerInfo[playerid][pskin] = skin;

	SetPlayerSkin(playerid, skin);
	return true;
}

stock SetInterior(playerid, interiorid, bool:update = true)
{
	if(update)
		PlayerInfo[playerid][pinterior] = interiorid;

	SetPlayerInterior(playerid, interiorid);
	return true;
}
stock ASSetVW(playerid)
{
	SetPlayerVirtualWorld(playerid, 0x6F330000 + playerid);
}
stock AllowPlayerIntoGame(playerid, bool:IN_SPAWN = false)
{
	s0beitCheck[playerid][stage] = 0;
	s0beitCheck[playerid][checking] = false;

	SetPlayerVirtualWorld(playerid, 0);
	TogglePlayerControllable(playerid, true);

 	if(!IN_SPAWN)
		SpawnPlayer(playerid);
}

stock SetVirtualWorld(playerid, vwe, bool:update = true)
{
	new regi = GetPlayerVirtualWorld(playerid);
	if(update)
		PlayerInfo[playerid][pvirtualworld] = vwe;

	SetPlayerVirtualWorld(playerid, vwe);
	if(vwe == 0 && (regi != 0)) Idojaras(playerid);
	else if(regi != vwe) Idojaras(playerid, 0);
	return true;
}
stock GiveHealth(playerid, Float:plusz)
{
	return SetHealth(playerid, PlayerInfo[playerid][pElet] + plusz);
}
stock SetHealth(playerid, Float:health, bool:update = true, bool:ehseg = false)
{
	if(health > MAX_HP)
		health = MAX_HP;
	else if(health < 0.0)
		health = 0.0;

	if(update)
	{
		PlayerInfo[playerid][pElet] = health;
		PlayerInfo[playerid][pUjElet] = health;
	}

	if(health == 0.0) PlayerInfo[playerid][pScriptShoot][2] = (ehseg ? 100 : 1);
	SetPlayerHealth(playerid, health);
	return true;
}
stock GiveArmor(playerid, Float:plusz)
{
	return SetArmor(playerid, PlayerInfo[playerid][pPancel] + plusz);
}
stock SetArmor(playerid, Float:armour, bool:update = true)
{
	if(armour > MAX_ARMOR)
		armour = MAX_ARMOR;

	if(update)
	{
		PlayerInfo[playerid][pPancel] = armour;
		PlayerInfo[playerid][pUjPancel] = armour;
	}

	SetPlayerArmour(playerid, armour);
	return true;
}

stock GetNearestObject(playerid)
{
	PlayerInfo[playerid][pinterior] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][pvirtualworld] = GetPlayerVirtualWorld(playerid);

	new i = -1, visszateres = -1;
	for(;++i < MAX_DROP;)
	{
		if(dInfo[i][dHasznalva])
		{
			if(dInfo[i][dInt] != PlayerInfo[playerid][pinterior] || dInfo[i][dVirtual] != PlayerInfo[playerid][pvirtualworld])
				continue;

			if(IsPlayerInRangeOfPoint(playerid, 3.0, PosExt(dInfo[i][dPos])))
			{
				visszateres = i;
				break;
			}
		}
	}
	return visszateres;
}

stock GetDropIndex()
{
	new i = 0, visszateres = -1;
	for(;++i < MAX_DROP;)
	{
		if(!dInfo[i][dHasznalva])
		{
			visszateres = i;
			break;
		}
	}
	return visszateres;
}

stock TargyEldob(playerid, tipus, db)
{
	if(!IsPlayerConnected(playerid) || !Belepve(playerid))
		return false;

	new strdb[64];
	if(db != NINCS)
	{
		LoopingAnim(playerid, "MISC", "pickup_box", 4.0, 0, 0, 1, 0, 0);
		LoopingAnim(playerid, "MISC", "pickup_box", 4.0, 0, 0, 1, 0, 0);
		format(strdb, sizeof(strdb), "%s", FN(db, 0, ','));
	}

	switch(tipus)
	{
		case ELDOB_LOSZER:
		{
		    if(!PlayerInfo[playerid][pFegyver])
		    	return SCM(playerid, COL_LRED, "Nincs a kezedben fegyver!");

			if(!Lofegyver(PlayerInfo[playerid][pFegyver]))
			    return SCM(playerid, COL_LRED, "Ilyen lõszert nem tudsz eldobni!");

			new slot = GetGunSlot(PlayerInfo[playerid][pFegyver]);
			if(PlayerInfo[playerid][pToltenyek][ slot ] - db < 1)
			    return SFM(playerid, COL_LRED, "Ehhez a fegyverhez csak %ddb lõszered van", PlayerInfo[playerid][pToltenyek][ slot ] - 1);
			new Float:ppos[3];
			GetPlayerPos(playerid, PosExt(ppos));

			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");

			if(db == NINCS) ppos[0] += 2.0;

			new fegyo = PlayerInfo[playerid][pFegyver];

			dInfo[di][dTipus] 	= 	ELDOB_LOSZER;
			dInfo[di][dFegyver] = 	fegyo;
			dInfo[di][dErtek] 	= 	db;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);

			dInfo[di][dObject]	=	CreateDynamicObject(2040, ppos[0], ppos[1], ppos[2] - 1.0, 0.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);

            
			Fegyver(playerid, false);
			PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
			PlayerInfo[playerid][pToltenyek][slot] -= db;

			Cselekves(playerid, "eldobott némi lõszert", 1);
			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')",dInfo[di][dTipus],dInfo[di][dFegyver],dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
		case ELDOB_FEGYVER:
		{
			new wid 	=	GetPlayerWeapon(playerid);
			new ammo;

			if(db > 0)
				ammo = db;
			else
				ammo = GetPlayerAmmo(playerid);

			new Float:ppos[3];

			GetPlayerPos(playerid, PosExt(ppos));

			if(!wid || !ammo)
				return false;

			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");

			if(db == NINCS) ppos[0] += 2.0;

			dInfo[di][dTipus] 	= 	ELDOB_FEGYVER;
			dInfo[di][dFegyver] = 	wid;
			dInfo[di][dErtek] 	= 	ammo;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);

		//	nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"%s "#COL_SZURKE"]\n"#COL_FEHER"Lõszer: "#COL_VKEK"%s\n"#COL_SZURKE"(( /felvesz ))", aWeaponNames[wid], FN(ammo, 0, ','));

			dInfo[di][dObject]	=	CreateDynamicObject(aWeaponModel[wid], ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
		//	dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);

			new slot = GetGunSlot( PlayerInfo[playerid][pFegyver] );

			if(db && (db > PlayerInfo[playerid][pToltenyek][slot]))
				return SFM(playerid, COL_LRED, "A töltény mennyiség "#COL_MKEK"1 "#COL_FEHER"és "#COL_MKEK"%d "#COL_FEHER"között lehet! | 0 = Összes átadása", PlayerInfo[playerid][pToltenyek][slot]);

			if(!db)
				ammo = PlayerInfo[playerid][pToltenyek][slot];
			else
				ammo = db;

			PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
			PlayerInfo[playerid][pToltenyek][slot] -= ammo;
			if(PlayerInfo[playerid][pToltenyek][slot] == 0)
			{
				PlayerInfo[playerid][pFegyverek][slot] = 0;
			}
			Fegyver(playerid, false);
			Cselekves(playerid, "eldobott egy fegyvert", 1);

			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')",dInfo[di][dTipus],dInfo[di][dFegyver],dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
//			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%fnyad,%f,%f','%d','%d','%d')", dInfo[di][dTipus],0,dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
		case ELDOB_MATERIAL:
		{
			new Float:ppos[3];
			GetPlayerPos(playerid, PosExt(ppos));

			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");

			dInfo[di][dTipus] 	= 	ELDOB_MATERIAL;
			dInfo[di][dErtek] 	= 	db;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			PlayerInfo[playerid][pMaterial] -= db;
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);

			//nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"Materiál "#COL_SZURKE"]\n"#COL_VKEK"%sdb\n"#COL_SZURKE"(( /felvesz ))", strdb);

			dInfo[di][dObject]	=	CreateDynamicObject(2060, ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
		//	dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);

			SFM(playerid, COL_VZOLD, "Eldobtál "#COL_MKEK"%s"#COL_FEHER"db materiált!", strdb);
			Cselekves(playerid, "eldobott némi materiált", 1);
			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')",dInfo[di][dTipus],dInfo[di][dFegyver],dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
		case ELDOB_HEROIN:
		{
			new Float:ppos[3];
			GetPlayerPos(playerid, PosExt(ppos));

			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");

			dInfo[di][dTipus] 	= 	ELDOB_HEROIN;
			dInfo[di][dErtek] 	= 	db;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			PlayerInfo[playerid][pHeroin] -= db;
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);

		//	nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"Heroin "#COL_SZURKE"]\n"#COL_VKEK"%sg\n"#COL_SZURKE"(( /felvesz ))", strdb);

			dInfo[di][dObject]	=	CreateDynamicObject(1578, ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
		//	dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);

			SFM(playerid, COL_VZOLD, "Eldobtál "#COL_MKEK"%s"#COL_FEHER"mg heroint!", strdb);
			Cselekves(playerid, "eldobott némi heroint", 1);
			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')",dInfo[di][dTipus],dInfo[di][dFegyver],dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
		case ELDOB_KOKAIN:
		{
			new Float:ppos[3];
			GetPlayerPos(playerid, PosExt(ppos));

			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");

			dInfo[di][dTipus] 	= 	ELDOB_KOKAIN;
			dInfo[di][dErtek] 	= 	db;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			PlayerInfo[playerid][pKokain] -= db;
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);

		//	nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"Kokain "#COL_SZURKE"]\n"#COL_VKEK"%sg\n"#COL_SZURKE"(( /felvesz ))", strdb);

			dInfo[di][dObject]	=	CreateDynamicObject(1575, ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
		//	dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);

			SFM(playerid, COL_VZOLD, "Eldobtál "#COL_MKEK"%s"#COL_FEHER"g kokaint!", strdb);
			Cselekves(playerid, "eldobott némi kokaint", 1);
			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')",dInfo[di][dTipus],dInfo[di][dFegyver],dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
		case ELDOB_MARI:
		{
			new Float:ppos[3];
			GetPlayerPos(playerid, PosExt(ppos));

			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");

			dInfo[di][dTipus] 	= 	ELDOB_MARI;
			dInfo[di][dErtek] 	= 	db;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			PlayerInfo[playerid][pMarihuana] -= db;
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);

	//		nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"Marihuána "#COL_SZURKE"]\n"#COL_VKEK"%sg\n"#COL_SZURKE"(( /felvesz ))", strdb);

			dInfo[di][dObject]	=	CreateDynamicObject(1576, ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
	//		dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);

			SFM(playerid, COL_VZOLD, "Eldobtál "#COL_MKEK"%s"#COL_FEHER"g mariuánát!", strdb);
			Cselekves(playerid, "eldobott némi marihuánát", 1);
			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')",dInfo[di][dTipus],dInfo[di][dFegyver],dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
		case ELDOB_PENZ:
		{
			new Float:ppos[3];
			GetPlayerPos(playerid, PosExt(ppos));

			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");

			dInfo[di][dTipus] 	= 	ELDOB_PENZ;
			dInfo[di][dErtek] 	= 	db;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			GiveMoney(playerid,-db);
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);

		//	nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"Készpénz "#COL_SZURKE"]\n"#COL_VKEK"%s$\n"#COL_SZURKE"(( /felvesz ))", strdb);

			//1550 - 1212
			dInfo[di][dObject]	=	CreateDynamicObject((db > 1500000 ? 1550 : 1212), ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
		//	dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);

			SFM(playerid, COL_VZOLD, "Eldobtál "#COL_MKEK"%s"#COL_FEHER"Dollár készpénzt!", strdb);
			Cselekves(playerid, "eldobott némi pénzt", 1);
			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')",dInfo[di][dTipus],dInfo[di][dFegyver],dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
	}
	new Float:ppos[3];
	GetPlayerPos(playerid, PosExt(ppos));
	new date[3],time[3];
	getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);

	new mit[64];
	if(tipus == ELDOB_LOSZER){ mit = "Lõszer";}
	if(tipus == ELDOB_FEGYVER){ mit = "Fegyver";}
	if(tipus == ELDOB_MATERIAL){ mit = "Material";}
	if(tipus == ELDOB_HEROIN){ mit = "Heroin";}
	if(tipus == ELDOB_KOKAIN){ mit = "Kokain";}
	if(tipus == ELDOB_MARI){ mit = "Marihuana";}
	if(tipus == ELDOB_PENZ){ mit = "Pénz";}

	new Stringje[256];
	format(Stringje,256,"Ki: %s | Mit: %s | Mikor: %d-%02d-%02d %02d:%02d | Hol: X: %.0f | Y: %.0f | Z: %.0f",JatekosNev(playerid),mit,PosExt(date), time[0], time[1],ppos[0],ppos[1],ppos[2]);
	Log(FILE_CUCCELDOBAS, Stringje);

	return true;
}

stock TargyFelvesz(playerid, did, tipus)
{
	switch(tipus)
	{
		case ELDOB_LOSZER:
		{
		    if(PlayerInfo[playerid][pjatekosszint] < 3)
				return SCM(playerid, COL_LRED, "Fegyverhasználat csak 3 szinttõl érhetõ el ezért nem vehetsz fel lõszert!");

			if(PlayerInfo[playerid][pFegyver])
				return SCM(playerid, COL_MKEK, "Elõször tedd el a fegyvered!");

			new eldobottslot = GetGunSlot(dInfo[did][dFegyver]);
			
			if(PlayerInfo[playerid][pFegyverek][ eldobottslot ] == 0)
				return SCM(playerid, COL_MKEK, "Nincs olyan fegyvered, amibe ezt betudnád tölteni!");

			new slot = GetGunSlot(dInfo[did][dFegyver]);
			PlayerInfo[playerid][pToltenyek][slot] += dInfo[did][dErtek];
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl "#COL_MKEK"%sdb"#COL_FEHER" "#COL_MKEK"%s"#COL_FEHER" típusú fegyverhez való lõszert!", FN(dInfo[did][dErtek], 0, ','), aWeaponNames[dInfo[did][dFegyver]]);
		}
		case ELDOB_FEGYVER:
		{
			if(PlayerInfo[playerid][pjatekosszint] < 3)
				return SCM(playerid, COL_LRED, "Fegyverhasználat csak 3 szinttõl érhetõ el ezért nem vehetsz fel fegyvert!");

			if(PlayerInfo[playerid][pFegyver])
				return SCM(playerid, COL_MKEK, "Elõször tedd el a fegyvered!");
			if(SameWeaponSlot( PlayerInfo[playerid][pFegyverek][ aWeaponSlotok[ dInfo[did][dFegyver] ] ], dInfo[did][dFegyver]))
				return SCM(playerid, COL_MKEK, "Már van ilyen típusú fegyvered!");

			PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
			ResetPlayerWeapons(playerid);
			GiveWeapon(playerid, dInfo[did][dFegyver], dInfo[did][dErtek]);
			SetPlayerAttachedWeapon(playerid);
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl egy "#COL_MKEK"%s"#COL_FEHER" típusú fegyvert "#COL_MKEK"%sdb"#COL_FEHER" lõszerrel!", aWeaponNames[dInfo[did][dFegyver]], FN(dInfo[did][dErtek], 0, ','));
		}
		case ELDOB_MATERIAL:
		{
			if((dInfo[did][dErtek] + PlayerInfo[playerid][pMaterial]) > P_MAX_MATERIAL)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi materiál!");

			PlayerInfo[playerid][pMaterial] += dInfo[did][dErtek];
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl "#COL_MKEK"%s"#COL_FEHER"db materiált!", FN(dInfo[did][dErtek], 0, ','));
		}
		case ELDOB_HEROIN:
		{
			if((dInfo[did][dErtek] + PlayerInfo[playerid][pHeroin]) > P_MAX_HEROIN)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi heroin!");

			PlayerInfo[playerid][pHeroin] += dInfo[did][dErtek];
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl "#COL_MKEK"%s"#COL_FEHER"mg heroint!", FN(dInfo[did][dErtek], 0, ','));
		}
		case ELDOB_KOKAIN:
		{
			if((dInfo[did][dErtek] + PlayerInfo[playerid][pKokain]) > P_MAX_KOKAIN)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi kokain!");

			PlayerInfo[playerid][pKokain] += dInfo[did][dErtek];
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl "#COL_MKEK"%s"#COL_FEHER"mg kokaint!", FN(dInfo[did][dErtek], 0, ','));
		}
		case ELDOB_MARI:
		{
			if((dInfo[did][dErtek] + PlayerInfo[playerid][pMarihuana]) > P_MAX_MARIHUANA)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi marihuána!");

			PlayerInfo[playerid][pMarihuana] += dInfo[did][dErtek];
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl "#COL_MKEK"%s"#COL_FEHER"mg marihuánát!", FN(dInfo[did][dErtek], 0, ','));
		}
		case ELDOB_PENZ:
		{
		    if(PlayerInfo[playerid][pjatekosszint] < 3)
				return SCM(playerid, COL_LRED, "Csak 3-as szinttõl.");

			if((dInfo[did][dErtek] + PlayerInfo[playerid][ppenz]) > 99999999)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi készpénz!");

			GiveMoney(playerid,dInfo[did][dErtek]);
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl "#COL_MKEK"%s"#COL_FEHER"$ készpénzt!", FN(dInfo[did][dErtek], 0, ','));//mi a baja?
		}
	}

	dInfo[did][dTipus] 		= 	0;
	dInfo[did][dFegyver] 	= 	0;
	dInfo[did][dErtek] 		= 	0;
	dInfo[did][dPos][0] 	= 	0.0;
	dInfo[did][dPos][1] 	= 	0.0;
	dInfo[did][dPos][2] 	= 	0.0;
	dInfo[did][dInt] 		= 	0;
	dInfo[did][dVirtual] 	= 	0;
	DestroyDynamicObject(dInfo[did][dObject]);
	DestroyDynamic3DTextLabel(dInfo[did][dText]);
	dInfo[did][dHasznalva]	= 	false;
	Cselekves(playerid, "felvett valamit a földrõl", 1);
	doQuery( "DELETE FROM `"#MYSQL_CUCCOK_TABLA"` WHERE TorlesiAzonosito = '%d'", dInfo[did][dTorlesiAzonosito]);
	dInfo[did][dTorlesiAzonosito] = 0;
	return true;
}
stock PlayerToPlayer(playerid, targetid, Float:dist)
{
	new Float:pos[3];
	GetPlayerPos(targetid, pos[0], pos[1], pos[2]);
	return IsPlayerInRangeOfPoint(playerid, dist, pos[0], pos[1], pos[2]);
}

stock GetClosestPlayer(playerid)
{
	new kicsoda = -1;
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(GetPlayerDistanceFromPlayer(playerid,i) < 3 && i != playerid && Belepve(i) && GetPlayerState(i) != PLAYER_STATE_SPECTATING )
		{
			kicsoda = i;
			break;
		}
	}
	return kicsoda;
}

stock GetClosestPlayerTrafi(playerid)
{
	new kicsoda = -1;
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(GetPlayerDistanceFromPlayer(playerid,i) < 30 && i != playerid && Belepve(i) && GetPlayerState(i) != PLAYER_STATE_SPECTATING )
		{
			kicsoda = i;
			break;
		}
	}
	return kicsoda;
}

stock KozelbenValaki(playerid, Float:tav)
{
	new jatekos = GetClosestPlayer(playerid);
	if(jatekos == INVALID_PLAYER_ID) return INVALID_PLAYER_ID;
	new Float:x, Float:y, Float:z;
	new id;
	GetPlayerPos(jatekos,x,y,z);
	if(IsPlayerInRangeOfPoint(playerid,tav,x,y,z)) id = jatekos;
	return id;
}

stock Bilincs(playerid, bilincs, ido = -1)
{
	if(PlayerInfo[playerid][pFegyver])
	{
		Fegyver(playerid, false);
	}

	if(ido == -1)
	{
		switch(bilincs)
		{
			case 0: ido = 0;
			case 1, 3: ido = 60;
			case 2: ido = 300;
		}
	}

	PlayerInfo[playerid][pBilincselve] = bilincs;
	PlayerInfo[playerid][pBilincsIdo] = ido;

	switch(bilincs)
	{
		case 0:
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			//RemovePlayerAttachedObject(playerid, SLOT_BILINCS);
            Freeze(playerid, NINCS);
		}
		case 1,2: Freeze(playerid, NINCS);
	}
	return true;
}

stock Korozes_Kiad(pid, ki, oka[], szint)
{
	new nev[MAX_PLAYER_NAME];

	if(szint == NINCS) format(nev, MAX_PLAYER_NAME, "%s", BoltNevek[ki]);
	else if(ki != INVALID_PLAYER_ID && IsPlayerConnected(ki))
		format(nev, MAX_PLAYER_NAME, "%s", JatekosNev(ki));
	else
		format(nev, MAX_PLAYER_NAME, "Állam (Kamera rendszer)");

	new bool:oks;
	if(IsPlayerConnected(pid))
	{
		if(!PlayerInfo[pid][pMaszkVisel] || (PlayerInfo[pid][pMaszkVisel] && (ki != INVALID_PLAYER_ID || IsPlayerConnected(ki))))
		{
			if(Korozes[pid][krSzint] < 5)
				Korozes[pid][krSzint] += (szint == NINCS ? 1 : szint);

			format(Korozes[pid][krOka], 64, "%s", oka);
			format(Korozes[pid][krNev], MAX_PLAYER_NAME, "%s", JatekosNev(pid));
			format(Korozes[pid][krKiadta], MAX_PLAYER_NAME, "%s", nev);
			oks = true;
		}
	}

	nformat(str, 128, "[Körözés]: Személy: "#COL_MKEK"%s"#COL_FEHER" | Kiadta: "#COL_MKEK"%s", (oks ? JatekosNev(pid, true) : ("Ismeretlen")), nev);

	if(ki != INVALID_PLAYER_ID && IsPlayerConnected(ki) && szint != NINCS)
		FrakcioUzenet(COLOR_WHITE, PlayerInfo[ki][pFrakcio], str);
	else
	{
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_FBI, str);
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_KATONA, str);
	}

	format(str, 128, "[Körözés]: Vád: "#COL_MKEK"%s", oka);
	if(ki != INVALID_PLAYER_ID && IsPlayerConnected(ki) && szint != NINCS)
		FrakcioUzenet(COLOR_WHITE, PlayerInfo[ki][pFrakcio], str);
	else
	{
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_FBI, str);
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_KATONA, str);
	}

	if(oks)
		SFM(pid, COL_VZOLD, "Feljelentettek! Vád: "#COL_MKEK"%s", oka);

	return true;
}

stock Korozes_Torol(pid, ki, oka[])
{
	if(!Belepve(pid)) return true;

	Korozes[pid][krSzint] = 0;
	format(Korozes[pid][krOka], 64, "[Törölt]: %s", oka);
	format(Korozes[pid][krNev], MAX_PLAYER_NAME, "%s", JatekosNev(pid));
	format(Korozes[pid][krKiadta], MAX_PLAYER_NAME, "%s", (ki == NINCS ? ("Állam") : JatekosNev(ki)));

	nformat(str, 128, "[Körözés törlése]: Személy: "#COL_MKEK"%s"#COL_FEHER" | Visszavonta: "#COL_MKEK"%s", JatekosNev(pid, true), (ki == NINCS ? ("Állam") : JatekosNev(ki, true)));
	if(ki != NINCS && IsPlayerConnected(ki))
		FrakcioUzenet(COLOR_WHITE, PlayerInfo[ki][pFrakcio], str);
	else
	{
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_KATONA, str);
	}

	format(str, 128, "[Körözés törlése]: Visszavonásának oka: "#COL_MKEK"%s", oka);
	if(ki != NINCS && IsPlayerConnected(ki))
		FrakcioUzenet(COLOR_WHITE, PlayerInfo[ki][pFrakcio], str);
	else
	{
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_KATONA, str);
	}

	return true;
}

stock bool:Karakter_Ellenorzes( str[] )
{
	new tilos[11][8] =
	{
		{"|"},{"*"},{"'"},{"/"},{";"},
		{"="},{"INSERT"},{"DELETE"},
		{"DROP"},{"SELECT"},{"#"}
	};

	new i = NINCS;
	for(;++i < sizeof(tilos);)
	{
		if(strfind(str, tilos[i], true) != NINCS)
			return true;
	}

	return false;
}

stock bool:OOC_Ellenorzes(playerid, const cmd[], const str[])
{
	new adds[][] =
	{
		{"class"},{"liverpg"},{"roleplay"},{"role play"},{"rpégé"},{"orion"},{"rájz"},{"rpg"},{"nova"},{"second life"},{"rájz"},{"87.229.73.16:6969"},
		{"fay"}, {"klasszon"}, {"seemta"}, {"szímta"},{"rise rpg"},{"szimta"},{"rise"},{"everlife"},{"erpégé"},{"ever life"},{"37.221.210.30:7750"},
		{"reborn"}
	};

	new i = NINCS, helyzet = NINCS;
	for(;++i < sizeof(adds);)
	{
		if(strfind(str, adds[i], true) != NINCS)
		{
			helyzet = i;
			break;
		}
	}

	if(helyzet != NINCS)
	{
		AdminUzenet(COLOR_LIGHTRED, 1001, "[Szerverhírdetés]: [%d]%s | Szó: %s | CMD: %s - %s", playerid, JatekosNev(playerid), adds[helyzet], cmd, str);
		nformat(astr, 128, "[%d]%s | Szó: %s | CMD: %s - %s", playerid, JatekosNev(playerid), adds[helyzet], cmd, str);
		Log(FILE_ADDS, astr);
		SFM(playerid, COL_LRED, "Ne hirdess szervert! | Szó: %s", adds[helyzet]);
		return false;
	}

	return true;
}

/*stock BilincsFel( pid )
{
	switch( GetPlayerSkin(pid) )
	{
		case 2,7,15,16,17,18,20:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.004000,0.022000,0.022000,20.399993,-16.300025,-39.599998,1.000000,1.000000,1.000000);
		case 1:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.057000,0.026999,-0.001000,-162.899948,31.000005,50.799995,1.000000,1.000000,1.000000);
		case 9,10,12:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.030000,0.027999,0.028000,7.900000,-19.400032,-46.099990,1.000000,1.000000,1.000000);
		case 11,13:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.063999,-0.048000,0.021000,-162.899948,31.000005,50.799995,1.000000,1.000000,1.000000);
		case 14:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.004000,0.048999,0.012999,20.899991,-15.000026,-47.199993,1.000000,1.000000,1.000000);
		case 21,28,30,32,35,36,37,38,44,45,46,47,48,49,53,54,58,60,88,94,95,100,102,114,116,126,129,132,134,142,154,155,159,160,161,162:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,0.936999,2.262998);
		case 167,170,180,185,189,205,171,173,174,175,176,177,179,230,229,231,234,245,247,254,274,281,282,283,288,297,298:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,0.936999,2.262998);
		case 22,66,67,70,98,101,115:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.042000,-0.010000,0.020000,5.499993,-4.799993,-52.800006,1.431999,0.877000,2.506999);
		case 23,24,25,26,29,34,51,52,62,72,73,96,99,108,113,121,122,128,133,146,153,156,158,181,183,184,188,200,206,217,220,221,222,223,250,252,255,258,259:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.053000,0.035999,0.015000,5.499993,-4.799993,-52.800006,1.422000,0.690000,1.607997);
		case 286,292:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.053000,0.035999,0.015000,5.499993,-4.799993,-52.800006,1.422000,0.690000,1.607997);
		case 31,39,40,41,43,55,56,57,63,64,69,76,77,89,90,91,92,93,97,104,106,107,109,110,130,131,136,137,138,139,140,141,145,148,150,152,157,165:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.038000,-0.021999,0.019000,5.499993,-4.799993,-52.800006,1.101000,0.686000,1.902997);
		case 166,169,190,191,192,193,194,195,196,197,198,199,201,207,209,210,211,214,215,216,218,219,224,225,226,227,232,233,237,238,239,243,251,256,257,261:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.038000,-0.021999,0.019000,5.499993,-4.799993,-52.800006,1.101000,0.686000,1.902997);
		case 275,27,290,287,293,294,299:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.034000,0.010000,0.019000,5.499993,-4.799993,-52.800006,1.101000,0.686000,1.902997);
		case 277,278,279,284,285,295:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.015000,-0.007999,0.021000,5.499993,-4.799993,-52.800006,1.101000,0.686000,1.902997);
		case 33:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.002999,0.020000,-0.011000,0.000000,0.000000,-53.699966,1.000000,1.000000,1.000000);
		case 50,59,61,68,112,135,143,147,182,186,187,203,204,212,240,249,260:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.008999,0.034000,-0.001000,0.000000,0.000000,-53.699966,1.268000,1.217000,1.461000);
		case 71,80,81,124,168,241,242:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.028999,0.011999,-0.004000,17.900001,-7.399981,-44.099960,1.268000,1.217000,1.461000);
		case 75,117,118,123,125,163,164,213,228,253,291:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.012999,0.012999,-0.017000,17.900001,-7.399981,-44.099960,0.772000,1.200999,1.511000);
		case 78,79,83,84,111,127:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.020999,0.029000,0.003999,17.900001,-7.399981,-44.099960,1.340000,0.973000,2.218001);
		case 85:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.013000,-0.005999,-0.003000,17.900001,-7.399981,-44.099960,1.092000,0.973000,2.218001);
		case 87:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.015999,-0.017999,-0.018000,17.900001,-7.399981,-44.099960,0.455000,0.973000,1.372000);
		case 103:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.046999,0.089000,0.013000,17.900001,-7.399981,-44.099960,2.518000,1.169000,2.128000);
		case 120,246:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.017999,0.060000,0.013000,17.900001,-7.399981,-44.099960,1.451000,1.169000,1.834000);
		case 144:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.017999,0.028000,-0.000999,17.900001,-7.399981,-44.099960,1.199000,1.169000,1.834000);
		case 172,178:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.017999,0.009000,-0.000999,17.900001,-7.399981,-44.099960,0.834000,1.169000,1.499999);
		default: SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.004000,0.022000,0.022000,20.399993,-16.300025,-39.599998,1.000000,1.000000,1.000000);
	}
}*/

stock TeruletFrissites()
{
	foreach(Player, x)
	{
		if(!PlayerInfo[x][pFrakcio]) continue;
		if(FInfo[PlayerInfo[x][pFrakcio]][fLegalis] != FK_LEGAL || Admin(x, FOADMIN_SZINT))
			TeruletekMutatasa(x);
	}
}

stock TeruletekMutatasa(playerid)
{
	new x = -1;
	for(;++x < MAX_TERULET;)
	{
		if(!tInfo[x][tVan]) continue;

		GangZoneShowForPlayer(playerid, tInfo[x][tZone], FrakcioSzin[ tInfo[x][tFrakcio] - 1 ]);

		if(tInfo[x][tHarcFolyik])
			GangZoneFlashForPlayer(playerid, tInfo[x][tZone], COLOR_INVISIBLE);
		else
			GangZoneStopFlashForPlayer(playerid, tInfo[x][tZone]);
	}
}

stock HarcKieses(playerid, oka[])
{
	new harcu[128], terulet = ServerInfo[sHarcVan];
	format(harcu, 128, "[WAR]: %s kiesett a harcból! Oka: %s", JatekosNev(playerid, true), oka);

	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	SetVirtualWorld(playerid, 0);
	PlayerInfo[playerid][pHarcol] = false;

	new vedo, tamado;
	foreach(Player, p)
	{
	    if(!Belepve(p) || GetPlayerVirtualWorld(p) != WAR_VW || playerid == p || !PlayerInfo[p][pHarcol])
			continue;

        if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][VEDOK])
			vedo++;
		else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
			tamado++;

		SendClientMessage(p, COLOR_LIGHTRED, harcu);
	}

	//SendFormatMessageToAll(COLOR_LIGHTRED, "[DEBUG]: HarcKieses => Védõ: %d | Támadó: %d", vedo, tamado);
	if(vedo > 0 && tamado > 0)
		return true;

	ServerInfo[sHarcVan] = -1;
	tInfo[terulet][tHarcFolyik] = false;
	GangZoneStopFlashForAll(tInfo[terulet][tZone]);

	if(vedo < 1)
	{
		foreach(Player, p)
		{
		    if(!Belepve(p))
				continue;

			if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][VEDOK])
				SendFormatMessage(p, COLOR_WHITE, "[WAR]: Elvesztettétek a(z) "#COL_MKEK"%s"#COL_FEHER" területet!", tInfo[terulet][tNev]);
			else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
				SendFormatMessage(p, COLOR_WHITE, "[WAR]: Sikeresen megszereztétek a(z) "#COL_MKEK"%s"#COL_FEHER" területet!", tInfo[terulet][tNev]);
		}

		tInfo[terulet][tFrakcio] = tInfo[terulet][tHarcolok][TAMADOK];
		FInfo[tInfo[terulet][tHarcolok][TAMADOK]][fUtolsoTamadas] = gettime();
	}
	else if(tamado < 1)
	{
	    foreach(Player, p)
		{
		    if(!Belepve(p))
				continue;

			if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][VEDOK])
				SendFormatMessage(p, COLOR_WHITE, "[WAR]: A támadók elbuktak, így sikeresen megvédtétek a(z) "#COL_MKEK"%s"#COL_FEHER" területet!", tInfo[terulet][tNev]);
			else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
				SendClientMessage(p, COLOR_WHITE, "[WAR]: A támadás sikertelen volt, mindenki elbukott!");
		}

		FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fUtolsoTamadas] = gettime();
	}

	tInfo[terulet][tFoglalasIdo] = gettime();

	foreach(Player, p)
	{
	    if(!Belepve(p))
			continue;

		if(GetPlayerVirtualWorld(p) == WAR_VW && PlayerInfo[p][pHarcol])
		{
			SendClientMessage(p, COLOR_LIGHTRED, "[WAR]: 5 másodperc múlva a rendszer visszarak az alap VirtualWorld-be!");
			Freeze(p, 10000);
			defer HarcVege(p);
		}
	}

	foreach(Jarmuvek, x)
	{
		if(GetVehicleVirtualWorld(x) == WAR_VW)
			SetVehicleVirtualWorld(x, 0);
	}

	TeruletFrissites();
	return 1;
}

timer HarcVege[5000](playerid)
{
	SetVirtualWorld(playerid, 0);
	PlayerInfo[playerid][pHarcol] = false;
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);

	ClearAnimations(playerid);
	SetHealth(playerid, MAX_HP);
}

stock bool:KapuEngedely(playerid, kapu)
{
	if(kapu < 0 || kapu >= MAX_KAPU || !Kapu[kapu][kVan]) return false;
	if(Kapu[kapu][kKod] != NINCS) return true;
 	if(Kapu[kapu][kHasznalo][0] == 0) return false;

	new bool:ok, val;
	for(new h = 0; h < MAX_KAPU_HASZNALO; h++)
	{
		val = Kapu[kapu][kHasznalo][h];
		switch(val)
		{
			// frakciók
			case 1..99: ok = ( PlayerInfo[playerid][pFrakcio] == val );
		}
		if(ok) break;
	}
	return ok;
}

stock SetPlayerAttachedWeapon(playerid, bool:csaktorles = false)
{
	if(IsPlayerNPC(playerid) || !Belepve(playerid))
		return true;

	if(csaktorles)
	{
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER1);
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER2);
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER3);
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER4);
		return true;
	}

    new armed, fegyver[4], tolteny[4];
    armed = PlayerInfo[playerid][pFegyver];

	// Shotgun + Sawnoff + Combat
	fegyver[1] = PlayerInfo[playerid][pFegyverek][3];
	tolteny[1] = PlayerInfo[playerid][pToltenyek][3];

    // MP5 + Uzi + Tec
    fegyver[0] = PlayerInfo[playerid][pFegyverek][4];
	tolteny[0] = PlayerInfo[playerid][pToltenyek][4];

    // M4 + AK47
    fegyver[2] = PlayerInfo[playerid][pFegyverek][5];
	tolteny[2] = PlayerInfo[playerid][pToltenyek][5];

    // Rifle + Sniper
    fegyver[3] = PlayerInfo[playerid][pFegyverek][6];
	tolteny[3] = PlayerInfo[playerid][pToltenyek][6];

    if((fegyver[0] && (tolteny[0] > 0)) && (armed != fegyver[0]))
        SetPlayerAttachedObject(playerid, SLOT_FEGYVER1, GetWeaponModel(fegyver[0]), 7, 0.08, -0.08, -0.09, 280, 10, 5, 1.0, 1.0, 1.0);
    else //if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER1);

    if((fegyver[1] && (tolteny[1] > 0)) && (armed != fegyver[1]))
        SetPlayerAttachedObject(playerid, SLOT_FEGYVER2, GetWeaponModel(fegyver[1]), 8, -0.1, -0.1, 0.14, 270, 0, 5, 1.0, 1.0, 1.0);
    else //if(IsPlayerAttachedObjectSlotUsed(playerid, 1))
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER2);

    if((fegyver[2] && (tolteny[2] > 0)) && (armed != fegyver[2]))
        SetPlayerAttachedObject(playerid, SLOT_FEGYVER3, GetWeaponModel(fegyver[2]), 1, -0.25, -0.07, -0.05, 180, 10, 15, 1.0, 1.0, 1.0);
    else //if(IsPlayerAttachedObjectSlotUsed(playerid, 2))
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER3);

    if((fegyver[3] && (tolteny[3] > 0)) && (armed != fegyver[3]))
        SetPlayerAttachedObject(playerid, SLOT_FEGYVER4, GetWeaponModel(fegyver[3]), 1, -0.25, -0.1, 0.15, 180, 5, 15, 1.0, 1.0, 1.0);
    else //if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER4);

	return true;
}

stock GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
	    case 1:
	        return 331;

		case 2..8:
		    return weaponid+331;

        case 9:
		    return 341;

		case 10..15:
			return weaponid+311;

		case 16..18:
		    return weaponid+326;

		case 22..29:
		    return weaponid+324;

		case 30,31:
		    return weaponid+325;

		case 32:
		    return 372;

		case 33..45:
		    return weaponid+324;

		case 46:
		    return 371;
	}
	return false;
}

stock GetGunSlot(fegyo)
{
	if(fegyo < 0 || fegyo >= sizeof(aWeaponSlotok))
		return 0;
	return aWeaponSlotok[fegyo];
}

stock GetGunID(string[])
{
	new fegyo;
	for(new x = 0; x < sizeof(aWeaponNames); x++)
	{
		if(egyezik(string, aWeaponNames[x]))
		{
			fegyo = x;
			break;
		}
	}

	return fegyo;
}

stock NumPlayerWeapons(playerid)
{
	new visszateres = 0, i = -1, weapons[13][2];
	for(;++i < 13;)
	{
		GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
		if(weapons[i][0] == 46) continue;
		if(weapons[i][0] && weapons[i][1])
		{
			visszateres++;
		}
	}
	return visszateres;
}

stock EngedelyStr(playerid)
{
	new str[256], i = -1;

	for(;++i < MAX_ENGEDELY;)
		format(str, 64, "%s%d,", str, PlayerInfo[playerid][pEngedely][i]);

	str[strlen(str) - 1] = '\0';

	return str;
}

stock GetFractionPay( fk )
{
	new str[256], i = -1;

	for(;++i < 16;)
		format(str, 64, "%s%d,", str, FInfo[ fk ][fFizetes][i]);

	str[strlen(str) - 1] = '\0';

	return str;
}

stock GetFractionWeapons(fractionid)
{
	new fegy[256], i = -1;

	for(;++i < 50;)
		format(fegy, 64, "%s%d,", fegy, FInfo[fractionid][fFegyverek][i]);

	fegy[strlen(fegy) - 1] = '\0';

	return fegy;
}

stock GetFractionAmmos(fractionid)
{
	new fegy[256], i = -1;

	for(;++i < 50;)
		format(fegy, 64, "%s%d,", fegy, FInfo[fractionid][fToltenyek][i]);

	fegy[strlen(fegy) - 1] = '\0';

	return fegy;
}

stock GetPlayerBoltCucc( playerid )
{
	new str[512];

	for(new i = 0; i < MAX_BL_CUCC; i++)
 	{
 	    if(i == 0)
			format(str, sizeof(str), "%d",PlayerInfo[playerid][pCuccok][i]);
		else
		    format(str, sizeof(str), "%s,%d",str,PlayerInfo[playerid][pCuccok][i]);

	}
	return str;
}

stock GetUserWeapons(playerid)
{
	new fegy[64], i = -1;

	for(;++i < 13;)
	{
		if(PlayerInfo[playerid][pDuty]) format(fegy, 64, "%s0,", fegy);
		else if(PlayerInfo[playerid][pPaintBall][0] != 0) format(fegy, 64, "%s%d,", fegy, PlayerInfo[playerid][pPBFegyverek][i]);
		else format(fegy, 64, "%s%d,", fegy, PlayerInfo[playerid][pFegyverek][i]);
	}

	fegy[strlen(fegy) - 1] = '\0';

	return fegy;
}

stock GetUserWeaponsAmmo(playerid)
{
	new fegy[64], i = -1;

	for(;++i < 13;)
	{
		if(PlayerInfo[playerid][pDuty]) format(fegy, 64, "%s0,", fegy);
		else if(PlayerInfo[playerid][pPaintBall][0] != 0) format(fegy, 64, "%s%d,", fegy, PlayerInfo[playerid][pPBToltenyek][i]);
		else format(fegy, 64, "%s%d,", fegy, PlayerInfo[playerid][pToltenyek][i]);
	}

	fegy[strlen(fegy) - 1] = '\0';

	return fegy;
}

stock bool:IsPlayerInAnyTruck(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
		return false;

    switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
    {
        case 403, 514, 515, 578: return true;
        default: return false;
    }
    return false;
}

stock GenerateTruckRoad(&start, &cel)
{
	new st = random(sizeof(KamionUtak)), ce;
	start = st;
	while(st != (ce = random(sizeof(KamionUtak))))
	{
	    cel = ce;
	    break;
	}
	return true;
}
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(PlayerInfo[playerid][pTog][12])
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        SetHealth(playerid, 150); //Állítsa az életet 150-re
	        RepairVehicle(vehicleid); //Javítsa meg a kocsit
	    }
	}

	return true;
}
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(PlayerInfo[playerid][pTV][2] != NINCS && IsPlayerConnected( PlayerInfo[playerid][pTV][2] ) && PlayerInfo[ PlayerInfo[playerid][pTV][2] ][pTV][0] == playerid)
	{
		//PlayerSpectatePlayer(PlayerInfo[playerid][pTV][2], playerid);
		SetInterior(PlayerInfo[playerid][pTV][2], GetPlayerInterior(playerid), false);
		SetVirtualWorld(PlayerInfo[playerid][pTV][2], GetPlayerVirtualWorld(playerid), false);
	}
	return 1;
}
public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(!IsPlayerNPC(playerid))
	{
	    if(s0beitCheck[playerid][checking])
        {
			ASSetVW(playerid);
			if(s0beitCheck[playerid][stage] == 2 && oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER)
			{
				if(s0beitCheck[playerid][vehicleId] != INVALID_VEHICLE_ID)
				{
					DestroyVehicle(s0beitCheck[playerid][vehicleId]);
					s0beitCheck[playerid][vehicleId] = INVALID_VEHICLE_ID;
				}
				s0beitCheck[playerid][stage] = 3;
			}
			else if(s0beitCheck[playerid][stage] == 3 && oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
			{
				s0beitCheck[playerid][stage] = 4;
				s0beitCheck[playerid][check_started] = GetTickCount();
				TogglePlayerControllable(playerid, true);
			}
        }
	    new carid = GetPlayerVehicleID(playerid);
	    new seat = GetPlayerVehicleSeat(playerid);
	    
	    if(newstate == PLAYER_STATE_DRIVER)
		{
		    if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_DRIVER) return 1;
		    g_DrivingVehicle[playerid] = true;
		    g_IsPassenger[playerid] = false;

		    g_DrivenVehicleID[playerid] = carid;
		}
		else if(oldstate == PLAYER_STATE_DRIVER)
		{
		    if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_DRIVER) return 1;
			g_DrivingVehicle[playerid] = false;
		    g_DrivenVehicleID[playerid] = 0;
	 	}

	 	if(newstate == PLAYER_STATE_PASSENGER)
	 	{
	 	    if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_DRIVER) return 1;
	        g_IsPassenger[playerid] = true;

	        g_DrivenVehicleID[playerid] = 0;
		}
		else if(oldstate == PLAYER_STATE_PASSENGER)
		{
		    if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_PASSENGER || newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_DRIVER) return 1;
	        g_IsPassenger[playerid] = false;
	        g_DrivenVehicleID[playerid] = 0;
		}
		
		if(seat != 128 && seat != NINCS && (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER))
	        UjjLenyomatHozzaad(carid, GetPlayerVehicleSeat(playerid), playerid);
	        
    	if(PlayerInfo[playerid][pTV][2] != NINCS && IsPlayerConnected( PlayerInfo[playerid][pTV][2] ) && PlayerInfo[ PlayerInfo[playerid][pTV][2] ][pTV][0] == playerid)
		{
			if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
				PlayerSpectateVehicle(PlayerInfo[playerid][pTV][2], carid);
			if(newstate == PLAYER_STATE_ONFOOT)
				PlayerSpectatePlayer(PlayerInfo[playerid][pTV][2], playerid);
  		}
	    if(PlayerInfo[playerid][pTaxiban] == 1)
		{
		    TaxiOraStop(PlayerInfo[playerid][pTaxisid],playerid);
		    PlayerInfo[playerid][pTaxisid] = INVALID_PLAYER_ID;
		    PlayerInfo[playerid][pTaxiban] = 0;
		}
		if(newstate == PLAYER_STATE_DRIVER)
		{
			KocsiUtolsoHasznalat[carid] = gettime();
			new id;
			if(IsPlayerInAnyVehicle(playerid))
				id = JarmuID( GetPlayerVehicleID(playerid), playerid );

			if(id)
			{
				if(IsABicikli( vInfo[ id ][vModel] ))
					PlayerInfo[playerid][pSK] = 40;
			}
			PlayerInfo[playerid][pCarEnterTime] = GetTickCount();
		
			if(!PlayerInfo[playerid][pTog][8] && !PlayerInfo[playerid][pMP3_Megy] && !PlayerInfo[playerid][pJarmuZene])
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, ServerInfo[sZene]);
			}
		}
		if(oldstate == PLAYER_STATE_DRIVER)
		{
		    new vid = JarmuID(carid, playerid);
		    vUpdate(vid, vuElet);
			/*if(GetVehicleModel(carid) == 530)
			{
			    stop PlayerInfo[playerid][pTargoncaTimer];
			    PlayerInfo[playerid][pTargoncaTimerStart] = false;
			}*/
		}
		if(oldstate == PLAYER_STATE_DRIVER && (GetTickCount() - PlayerInfo[playerid][pCarEnterTime]) < 220 && !IsABicikli(GetPlayerVehicleID(playerid)) && !IsAMotor(GetPlayerVehicleID(playerid)))
		{
			PlayerInfo[playerid][pCarFloodTime] += 2;
			PlayerInfo[playerid][pCarFlood]++;
			if(PlayerInfo[playerid][pCarFlood] < 3)
			{
				nformat(string, 128, "[AC]: {1E90FF}[%d]%s - Cheat: CarFlood - %dx", playerid, JatekosNev(playerid), PlayerInfo[playerid][pCarFlood]);
				Log(FILE_CHEAT, string);

				if(PlayerInfo[playerid][pCarFlood] >= 2)
					AdminUzenetEx(LKEK, 1001, string);

			} else {

				if(!PlayerInfo[playerid][pBanFlood])
				{
					nformat(string, 128, "[AC]: {1E90FF}[%d]%s - Cheat: CarFlood - %dx (%s)", playerid, JatekosNev(playerid), PlayerInfo[playerid][pCarFlood], (Admin(playerid, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
					AdminUzenetEx(LKEK, 1001, string);
					Log(FILE_CHEAT, string);
				}

				if(!Admin(playerid, FOADMIN_SZINT))
					ServerBan(playerid, 0, "[AC] CarFlood", NINCS, (!Belepve(playerid) ? true : false), true, true);

				return true;
			}
		}
	}

	if(newstate == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pSK] != 0)
		PlayerInfo[playerid][pSK] = 0;
	return true;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    if(clickedid == g_TextDraw[td_iPhone_Call][1])
	{
	    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	    strcat(called[playerid], "1");
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], called[playerid]);
	}
	if(clickedid == g_TextDraw[td_iPhone_Call][2])
	{
	    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	    strcat(called[playerid], "2");
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], called[playerid]);
	}
	if(clickedid == g_TextDraw[td_iPhone_Call][3])
	{
	    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	    strcat(called[playerid], "3");
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], called[playerid]);
	}
	if(clickedid == g_TextDraw[td_iPhone_Call][4])
	{
	    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	    strcat(called[playerid], "4");
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], called[playerid]);
	}
	if(clickedid == g_TextDraw[td_iPhone_Call][5])
	{
	    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	    strcat(called[playerid], "5");
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], called[playerid]);
	}
	if(clickedid == g_TextDraw[td_iPhone_Call][6])
	{
	    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	    strcat(called[playerid], "6");
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], called[playerid]);
	}
	if(clickedid == g_TextDraw[td_iPhone_Call][7])
	{
	    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	    strcat(called[playerid], "7");
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], called[playerid]);
	}
	if(clickedid == g_TextDraw[td_iPhone_Call][8])
	{
	    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	    strcat(called[playerid], "8");
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], called[playerid]);
	}
	if(clickedid == g_TextDraw[td_iPhone_Call][9])
	{
	    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	    strcat(called[playerid], "9");
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], called[playerid]);
	}
	if(clickedid == g_TextDraw[td_iPhone_Call][10])
	{
	    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	    strcat(called[playerid], "0");
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call], called[playerid]);
	}
	if(clickedid == g_TextDraw[td_iPhone_Call][11]) //Call
	{
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
	    CancelSelectTextDraw(playerid);
     	loop(0, sizeof(g_TextDraw[td_iPhone_Call]), PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_Call][PHONE]);
     	SendClientMessage(playerid, -1, "Csatlakozás...");
     	TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][0]);
		TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][1]);
     	iPhoneCallStatus[playerid] = 1;
     	new c;
		new ph = strval(called[playerid]);
		
		if(ph == 102)
		{
			PlayerInfo[playerid][pSegelyhivas] = 2;
			SendClientMessage(playerid, COLOR_ALLDEPT, "Itt a Mentõszolgálat, kérem mondja el, hogy mi történt!");
		}
		else if(ph == 103)
		{
			PlayerInfo[playerid][pSegelyhivas] = 3;
			SendClientMessage(playerid, COLOR_ALLDEPT, "Itt a Tûzoltóság, kérem mondja el, hogy mi történt!");
		}
		else if(ph == 104)
		{
			PlayerInfo[playerid][pSegelyhivas] = 4;
			SendClientMessage(playerid, COLOR_ALLDEPT, "Itt a Rendõrség, kérem diktálja le a bejenelteni kívánt személy nevét (( Ha IC nem tudod, írj Ismeretlent ))!");
		}
		else if(ph == 106)
		{
			PlayerInfo[playerid][pSegelyhivas] = 6;
			SendClientMessage(playerid, COLOR_ALLDEPT, "Itt az autómentõ szolgálat, kérem mondja el merre található ön! (( Ha IC nem tudod, írj Ismeretlent ))!");
		}
		else if(ph == 0)
		{
			SendClientMessage(playerid, COLOR_ALLDEPT, "Vegyél új szemüveget, ilyen szám nem létezik..");
		}
		else
		{
			foreach(Player, i)
			{
			    if(IsPlayerConnected(i))
			    {
		            if(playerid != i)
		    		{
						if(PlayerInfo[i][pCuccok][BL_TELEFON] == ph)
						{
							if(GetPlayerState(i) == PLAYER_STATE_DRIVER || PlayerInfo[i][pTog][5])
							{
								SendClientMessage(playerid,-1,"A hívott szám jelenleg nem elérhetõ.");
								iPhoneCallStatus[playerid] = 0;
								iPhoneHivo[playerid] = false;
	      						PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
		        				iPhoneStatus[playerid] = 2;
	        					HideIphoneMenu(playerid);
		        				TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone][25]);
		        				loop(1, 37, PPHONE) PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);
		        				return 1;
							}
							else
							{
					        	if(iPhoneStatus[i] == 3) HideIphoneMenu(i);
						    	iPhoneCallStatus[playerid] = 2;
						    	iPhoneHivo[playerid] = true;
						    	iPhoneCallStatus[i] = 2;
						    	callto[playerid] = i;
						    	iPhoneHivo[i] = false;
						    	callto[i] = playerid;
						    	c = 1;
						    	PlayerPlaySound(i, 20600, 0.0, 0.0, 0.0);
						    	TextDrawShowForPlayer(i, g_TextDraw[td_iPhone_CallYesNo][0]);
						    	TextDrawShowForPlayer(i, g_TextDraw[td_iPhone_CallYesNo][1]);
						    	iPhoneStatus[i] = 3;
						    	TextDrawHideForPlayer(i, g_TextDraw[td_iPhone][25]);
						    	loop(0, 19, PHONE) TextDrawShowForPlayer(i, g_TextDraw[td_iPhone][PHONE]);
						    	loop(19, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(i, g_TextDraw[td_iPhone][PHONE]);
	    						loop(1, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(i, g_PlayerTextDraw[i][ptd_iPhone][PPHONE]);
						    	TextDrawShowForPlayer(i, g_TextDraw[td_iPhone][22]);
						    	TextDrawShowForPlayer(i, g_TextDraw[td_iPhone][23]);
						    	TextDrawShowForPlayer(i, g_TextDraw[td_iPhone][24]);
	                        	PlayerTextDrawSetString(i, g_PlayerTextDraw[i][ptd_iPhone][0], "Call");
					        	PlayerTextDrawShow(i, g_PlayerTextDraw[i][ptd_iPhone][0]);
								break;
							}
						}
					}
			    }
			}
			if(c == 0)
			{
			    iPhoneCallStatus[playerid] = 0;
			    iPhoneHivo[playerid] = true;
	      		PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
		        iPhoneStatus[playerid] = 2;
		        HideIphoneMenu(playerid);
		        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone][25]);
		        loop(1, PPHONE_SIZE, PPHONE) PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);
				SendClientMessage(playerid, -1, "A hívott szám nem elérhetõ.");
			}
			else SendClientMessage(playerid, -1, "Hívás...");
		}
	}
	if(clickedid == g_TextDraw[td_iPhone_Call][12]) //Delete
	{
	    PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        new size = strlen(called[playerid]);
		if(size == 1) strdel(called[playerid],0,1),PlayerTextDrawSetString(playerid,g_PlayerTextDraw[playerid][ptd_iPhone_Call],"_");
		else strdel(called[playerid],size-1,size), PlayerTextDrawSetString(playerid,g_PlayerTextDraw[playerid][ptd_iPhone_Call],called[playerid]);
	}
    if(clickedid == g_TextDraw[td_iPhone_Calculator][0])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
        	strcat(var1[playerid], "0");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var1[playerid]);
		}
		else
		{
		    strcat(var2[playerid], "0");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var2[playerid]);
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][1])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
        	var1[playerid] = "";
        	var2[playerid] = "";
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], "HIBA");
		}
		else
		{
		    new s = GetPVarInt(playerid, "tovar");
		    switch(s)
		    {
				case 1:
				{
				    new str[24];
				    format(str, 24, "%d", (strval(var1[playerid])/strval(var2[playerid])));
	        		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], str);
				}
				case 2:
				{
				    new str[24];
				    format(str, 24, "%d", (strval(var1[playerid])*strval(var2[playerid])));
	        		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], str);
				}
				case 3:
				{
				    new str[24];
				    format(str, 24, "%d", (strval(var1[playerid])-strval(var2[playerid])));
	        		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], str);
				}
				case 4:
				{
				    new str[24];
				    format(str, 24, "%d", (strval(var1[playerid])+strval(var2[playerid])));
	        		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], str);
				}
			}
			DeletePVar(playerid, "tovar");
			var1[playerid] = "";
        	var2[playerid] = "";
		}
	}
	if(clickedid == g_TextDraw[td_iPhone_Calculator][2])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
        	strcat(var1[playerid], "1");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var1[playerid]);
		}
		else
		{
		    strcat(var2[playerid], "1");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var2[playerid]);
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][3])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
        	strcat(var1[playerid], "2");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var1[playerid]);
		}
		else
		{
		    strcat(var2[playerid], "2");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var2[playerid]);
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][4])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
        	strcat(var1[playerid], "3");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var1[playerid]);
		}
		else
		{
		    strcat(var2[playerid], "3");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var2[playerid]);
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][5])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
        	strcat(var1[playerid], "4");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var1[playerid]);
		}
		else
		{
		    strcat(var2[playerid], "4");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var2[playerid]);
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][6])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
        	strcat(var1[playerid], "5");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var1[playerid]);
		}
		else
		{
		    strcat(var2[playerid], "5");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var2[playerid]);
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][7])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
        	strcat(var1[playerid], "6");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var1[playerid]);
		}
		else
		{
		    strcat(var2[playerid], "6");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var2[playerid]);
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][8])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
        	strcat(var1[playerid], "7");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var1[playerid]);
		}
		else
		{
		    strcat(var2[playerid], "7");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var2[playerid]);
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][9])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
        	strcat(var1[playerid], "8");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var1[playerid]);
		}
		else
		{
		    strcat(var2[playerid], "8");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var2[playerid]);
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][10])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
        	strcat(var1[playerid], "9");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var1[playerid]);
		}
		else
		{
		    strcat(var2[playerid], "9");
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], var2[playerid]);
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][11])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
            SetPVarInt(playerid, "tovar", 1);
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], "/");
		}
		else
		{
		    DeletePVar(playerid, "tovar");
		    var1[playerid] = "";
        	var2[playerid] = "";
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], "HIBA");
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][12])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
            SetPVarInt(playerid, "tovar", 2);
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], "X");
		}
		else
		{
		    DeletePVar(playerid, "tovar");
		    var1[playerid] = "";
        	var2[playerid] = "";
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], "ERROR");
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][13])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
            SetPVarInt(playerid, "tovar", 3);
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], "-");
		}
		else
		{
		    DeletePVar(playerid, "tovar");
		    var1[playerid] = "";
        	var2[playerid] = "";
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], "ERROR");
		}
    }
    if(clickedid == g_TextDraw[td_iPhone_Calculator][14])
    {
        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
        if(!GetPVarInt(playerid, "tovar"))
        {
            SetPVarInt(playerid, "tovar", 4);
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], "+");
		}
		else
		{
		    DeletePVar(playerid, "tovar");
		    var1[playerid] = "";
        	var2[playerid] = "";
        	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Calculator], "ERROR");
		}
    }
	if(!PlayerInfo[playerid][pValtozott] && clickedid == Text:INVALID_TEXT_DRAW)
		return DeleteKeyPad(playerid);

	return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    if(PlayerInfo[playerid][pMelyikKapu] > NINCS)
	{
		new kulcs = -1;

		if(playertextid == g_PlayerTextDraw[playerid][ptd_Gombok][0])
			kulcs = 1;
		if(playertextid == g_PlayerTextDraw[playerid][ptd_Gombok][1])
			kulcs = 2;
		if(playertextid == g_PlayerTextDraw[playerid][ptd_Gombok][2])
			kulcs = 3;
		if(playertextid == g_PlayerTextDraw[playerid][ptd_Gombok][3])
			kulcs = 4;
		if(playertextid == g_PlayerTextDraw[playerid][ptd_Gombok][4])
			kulcs = 5;
		if(playertextid == g_PlayerTextDraw[playerid][ptd_Gombok][5])
			kulcs = 6;
		if(playertextid == g_PlayerTextDraw[playerid][ptd_Gombok][6])
			kulcs = 7;
		if(playertextid == g_PlayerTextDraw[playerid][ptd_Gombok][7])
			kulcs = 8;
		if(playertextid == g_PlayerTextDraw[playerid][ptd_Gombok][8])
			kulcs = 9;
		if(playertextid == g_PlayerTextDraw[playerid][ptd_Gombok][9])
			kulcs = 0;

		CallLocalFunction("OnPlayerPressKeyPad", "iii", playerid, Kapu[PlayerInfo[playerid][pMelyikKapu]][kKod], kulcs);
		return true;
	}
	return false;
}

timer Kocsijavit[20000](playerid,kocsi,vid,osszeg,KiszallasOsszeg)
{
	//RepairVehicle(kocsi);
	SetVehicleHealth(kocsi, 1000.0);

	vInfo[vid][vElet] = 1000.0;
	vehicleh[ kocsi ] = 1000.0;
	vUpdate(vid, vuElet);

	Cselekves(playerid,"megjavította a motort a jármûben.",0);
	Freeze(playerid, NINCS);

	if(vInfo[vid][vMunka] == PlayerInfo[playerid][pFrakcio])						//Saját frakció jármû javítása
	{
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] += (osszeg / 8);										//A 20%-at levonja a széfbõl.
		SendFormatMessage(playerid, COLOR_WHITE, "A szerelés költsége 0 $-volt, anyagár %d-$ melyet a frakciód széfjébõl levontunk.", (osszeg / 8));
	}
	else
	{
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] += osszeg + KiszallasOsszeg;
		SendFormatMessage(playerid, COLOR_WHITE, "A szerelés költsége %d -$ volt, ebbõl %d-$ volt az anyagköltség.", osszeg, (osszeg / 8));
		if(KiszallasOsszeg > 1)
			SendFormatMessage(playerid, COLOR_WHITE, "A kiszállási díj: %d-$. Melyet a frakció széfbe utaltunk",KiszallasOsszeg);
		SendFormatMessage(playerid, COLOR_WHITE, "Összesen %d-$ -ot vontunk le a Frakció Széfbõl.", (osszeg + KiszallasOsszeg));
		SendFormatMessage(playerid, COLOR_WHITE, "Összesen %d-$ került be a széfbe", ((osszeg - (osszeg / 8)) + KiszallasOsszeg));
	}
}

timer Kasztni[20000](playerid,vid,osszeg,KiszallasOsszeg)
{
    UpdateVehiclePanelsDamageStatus(vInfo[vid][vID], 0, 0, 0, 0, 0, 0, 0);
	vInfo[vid][vPanels] = 0;
	UpdateVehicleDoorsDamageStatus(vInfo[vid][vID], 0, 0, 0, 0, 0, 0);
	vInfo[vid][vDoors] = 0;
	vUpdate(vid, vuPanels);

	Cselekves(playerid,"megjavította a karosszéria alkatrészeket a jármûvön.",0);
	Freeze(playerid, NINCS);

	if(vInfo[vid][vMunka] == PlayerInfo[playerid][pFrakcio])						//Saját frakció jármû javítása
	{
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] += (osszeg / 8);										//A 20%-at levonja a széfbõl.
		SendFormatMessage(playerid, COLOR_WHITE, "A szerelés költsége 0 $-volt, anyagár %d-$ melyet a frakciód széfjébõl levontunk.", (osszeg / 8));
	}
	else
	{
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] += osszeg + KiszallasOsszeg;
		SendFormatMessage(playerid, COLOR_WHITE, "A szerelés költsége %d -$ volt, ebbõl %d-$ volt az anyagköltség.", osszeg, (osszeg / 8));
		if(KiszallasOsszeg > 1)
			SendFormatMessage(playerid, COLOR_WHITE, "A kiszállási díj: %d-$. Melyet a frakció széfbe utaltunk",KiszallasOsszeg);
		SendFormatMessage(playerid, COLOR_WHITE, "Összesen %d-$ -ot vontunk le a Frakció Széfbõl.", (osszeg + KiszallasOsszeg));
		SendFormatMessage(playerid, COLOR_WHITE, "Összesen %d-$ került be a széfbe", ((osszeg - (osszeg / 8)) + KiszallasOsszeg));
	}
}


timer Lampak[20000](playerid,vid,osszeg,KiszallasOsszeg)
{
    UpdateVehicleLightsDamageStatus(vInfo[vid][vID], 0, 0, 0, 0);
	vInfo[vid][vLights] = 0;
	vUpdate(vid, vuLights);

	Cselekves(playerid,"megjavította a lámpákat a jármûvön.",0);
	Freeze(playerid, NINCS);

	if(vInfo[vid][vMunka] == PlayerInfo[playerid][pFrakcio])						//Saját frakció jármû javítása
	{
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] += (osszeg / 8);										//A 20%-at levonja a széfbõl.
		SendFormatMessage(playerid, COLOR_WHITE, "A szerelés költsége 0 $-volt, anyagár %d-$ melyet a frakciód széfjébõl levontunk.", (osszeg / 8));
	}
	else
	{
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] += osszeg + KiszallasOsszeg;
		SendFormatMessage(playerid, COLOR_WHITE, "A szerelés költsége %d -$ volt, ebbõl %d-$ volt az anyagköltség.", osszeg, (osszeg / 8));
		if(KiszallasOsszeg > 1)
			SendFormatMessage(playerid, COLOR_WHITE, "A kiszállási díj: %d-$. Melyet a frakció széfbe utaltunk",KiszallasOsszeg);
		SendFormatMessage(playerid, COLOR_WHITE, "Összesen %d-$ -ot vontunk le a Frakció Széfbõl.", (osszeg + KiszallasOsszeg));
		SendFormatMessage(playerid, COLOR_WHITE, "Összesen %d-$ került be a széfbe", ((osszeg - (osszeg / 8)) + KiszallasOsszeg));
	}
}

timer Kerekek[20000](playerid,vid,osszeg,KiszallasOsszeg)
{
    UpdateVehicleTiresDamageStatus(vInfo[vid][vID], 0, 0, 0, 0);
	vInfo[vid][vTires] = 0;
	vUpdate(vid, vuTires);

	Cselekves(playerid,"megjavította a kerekeket a jármûvön.",0);
	Freeze(playerid, NINCS);

	if(vInfo[vid][vMunka] == PlayerInfo[playerid][pFrakcio])						//Saját frakció jármû javítása
	{
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] += (osszeg / 8);										//A 20%-at levonja a széfbõl.
		SendFormatMessage(playerid, COLOR_WHITE, "A szerelés költsége 0 $-volt, anyagár %d-$ melyet a frakciód széfjébõl levontunk.", (osszeg / 8));
	}
	else
	{
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] += osszeg + KiszallasOsszeg;
		SendFormatMessage(playerid, COLOR_WHITE, "A szerelés költsége %d -$ volt, ebbõl %d-$ volt az anyagköltség.", osszeg, (osszeg / 8));
		if(KiszallasOsszeg > 1)
			SendFormatMessage(playerid, COLOR_WHITE, "A kiszállási díj: %d-$. Melyet a frakció széfbe utaltunk",KiszallasOsszeg);
		SendFormatMessage(playerid, COLOR_WHITE, "Összesen %d-$ -ot vontunk le a Frakció Széfbõl.", (osszeg + KiszallasOsszeg));
		SendFormatMessage(playerid, COLOR_WHITE, "Összesen %d-$ került be a széfbe", ((osszeg - (osszeg / 8)) + KiszallasOsszeg));
	}
}

fpublic OnPlayerPressKeyPad(playerid, kapu, keynum)
{
	new formatocska[128];
	format(formatocska, sizeof(formatocska), "%d", kapu);
	new hossz = strlen(formatocska);

	if(strlen(Szamok[playerid]) != hossz)
	{
		format(formatocska, sizeof(formatocska), "%d", keynum);

		strins(Szamok[playerid], formatocska, strlen(Szamok[playerid]));

		new i = -1, text[7];
		for(;++i < strlen(Szamok[playerid]);)
			strins(text, "]", strlen(text));

		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], text);
	}

	if(strlen(Szamok[playerid]) == hossz)
	{
		if(strval(Szamok[playerid]) == kapu)
		{
			PlayerPlaySound(playerid, 21002, 0.0, 0.0, 0.0);
			PlayerInfo[playerid][pValtozott] = true;
			PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], 16711935);
			PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1]);
			PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1]);

			if(Kapu[PlayerInfo[playerid][pMelyikKapu]][kMozgo])
				MoveDynamicObject(Kapu[PlayerInfo[playerid][pMelyikKapu]][kOID], PosExt(Kapu[PlayerInfo[playerid][pMelyikKapu]][kNPos]), Kapu[PlayerInfo[playerid][pMelyikKapu]][kSpeed]);
			else
			{
				SetDynamicObjectPos(Kapu[PlayerInfo[playerid][pMelyikKapu]][kOID], PosExt(Kapu[PlayerInfo[playerid][pMelyikKapu]][kNPos]));
				SetDynamicObjectRot(Kapu[PlayerInfo[playerid][pMelyikKapu]][kOID], PosExt(Kapu[PlayerInfo[playerid][pMelyikKapu]][kNRPos]));
			}
			PlayerInfo[playerid][pMelyikKapu] = NINCS;
			defer VisszaAllitas(playerid, 1);

		} else {
			PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
			PlayerInfo[playerid][pValtozott] = true;
			PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], -16776961);
			PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0]);
			PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0]);
			defer VisszaAllitas(playerid, 0);
		}

		CancelSelectTextDraw(playerid);
		Szamok[playerid][0] = EOS;
	}
	return true;
}

timer VisszaAllitas[2000](playerid, jelzes)
{
	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], "_");
	switch(jelzes)
	{
		case 0: { PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], -2147483393); PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0]); PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0]); }
		case 1: return DeleteKeyPad(playerid);
	}
	PlayerInfo[playerid][pValtozott] = false;
	SelectTextDraw(playerid, 0xF7C25EAA);
	return true;
}

stock CreateKeyPad(playerid)
{
	g_PlayerTextDraw[playerid][ptd_Kellek][0] = CreatePlayerTextDraw(playerid, 547.199951, 197.866531, "_");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], 0.394800, 1.861332);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], 544.799072, -107.519882);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], 60);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], 2);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][0], 1);

	g_PlayerTextDraw[playerid][ptd_Kellek][1] = CreatePlayerTextDraw(playerid, 606.400085, 193.386672, "~n~~n~~n~");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][1], 0.454800, 6.572803);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][1], 488.799896, -0.746670);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][1], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][1], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][1], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][1], 60);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][1], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][1], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][1], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][1], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][1], 1);

	g_PlayerTextDraw[playerid][ptd_Gombok][0] = CreatePlayerTextDraw(playerid, 512.000000, 225.493255, "1");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], 5832791);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], 1);
	PlayerTextDrawSetSelectable(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][0], true);

	g_PlayerTextDraw[playerid][ptd_Gombok][1] = CreatePlayerTextDraw(playerid, 546.599792, 225.000000, "2");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], 0.483599, 2.286931);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], 5832791);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], 1);
	PlayerTextDrawSetSelectable(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][1], true);

	g_PlayerTextDraw[playerid][ptd_Gombok][2] = CreatePlayerTextDraw(playerid, 581.199707, 225.253295, "3");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], 0.485199, 2.197331);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], 5832791);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], 1);
	PlayerTextDrawSetSelectable(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][2], true);

	g_PlayerTextDraw[playerid][ptd_Gombok][3] = CreatePlayerTextDraw(playerid, 511.400024, 257.853332, "4");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], 5832791);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], 1);
	PlayerTextDrawSetSelectable(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][3], true);

	g_PlayerTextDraw[playerid][ptd_Gombok][4] = CreatePlayerTextDraw(playerid, 547.599853, 258.106658, "5");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], 5832791);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], 1);
	PlayerTextDrawSetSelectable(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][4], true);

	g_PlayerTextDraw[playerid][ptd_Gombok][5] = CreatePlayerTextDraw(playerid, 582.199829, 257.613311, "6");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], 5832791);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], 1);
	PlayerTextDrawSetSelectable(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][5], true);

	g_PlayerTextDraw[playerid][ptd_Gombok][6] = CreatePlayerTextDraw(playerid, 511.599945, 289.466766, "7");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], 5832791);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], 1);
	PlayerTextDrawSetSelectable(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][6], true);

	g_PlayerTextDraw[playerid][ptd_Gombok][7] = CreatePlayerTextDraw(playerid, 547.799865, 289.720092, "8");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], 5832791);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], 1);
	PlayerTextDrawSetSelectable(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][7], true);

	g_PlayerTextDraw[playerid][ptd_Gombok][8] = CreatePlayerTextDraw(playerid, 582.399902, 289.226745, "9");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], 5832791);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], 1);
	PlayerTextDrawSetSelectable(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][8], true);

	g_PlayerTextDraw[playerid][ptd_Gombok][9] = CreatePlayerTextDraw(playerid, 547.399963, 321.586791, "0");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], 5832791);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], 1);
	PlayerTextDrawSetSelectable(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][9], true);

	g_PlayerTextDraw[playerid][ptd_Jelzes][0] = CreatePlayerTextDraw(playerid, 511.600067, 321.093444, "_");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], 536.799682, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], -2147483393);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][0], 1);

	g_PlayerTextDraw[playerid][ptd_Jelzes][1] = CreatePlayerTextDraw(playerid, 582.199829, 321.346771, "_");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], 536.799682, 22.399993);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], 8388863);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][1], 1);

	g_PlayerTextDraw[playerid][ptd_KapuNev] = CreatePlayerTextDraw(playerid, 547.200012, 353.919921, "Yakuza kapu");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], 0.231600, 1.137066);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], 5.600007, 93.333305);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], -1378294221);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], 1);
	return true;
}

stock DeleteKeyPad(playerid)
{
	for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][i]);
	for(new i = 0; i < 10; i++) PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][i]);
	for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][i]);
	PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev]);

	Szamok[playerid][0] = EOS;
	return true;
}

timer MoveTrashBack[1000](trashid)
{
	new Float:vpos[4];
	new Float:unused[2];

	GetDynamicObjectPos(Kuka[trashid][kID], vpos[0], vpos[1], vpos[2]);
	GetDynamicObjectRot(Kuka[trashid][kID], unused[0], unused[1], vpos[3]);

	// 0.00000, -3.94000, 0.76000,   -120.00000, 0.00000, 0.00000

	MoveDynamicObject(Kuka[trashid][kID], vpos[0], vpos[1], vpos[2] - 1.52000, 1.0, 0.0, 0.0, vpos[3]);
	Kuka[trashid][kFazis] = 2;

	return true;
}

stock JatekosIP(playerid)
{
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

stock IsNumeric(const string[]) {
	new length=strlen(string);
	if (length==0) return false;
	for (new i = 0; i < length; i++) {
		if (
		(string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+')
		|| (string[i]=='-' && i!=0)
		|| (string[i]=='+' && i!=0)
		) return false;
	}
	if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
	return true;
}

stock ServerBan(kit, ido = 0, oka[], tilto = NINCS, bool:ipban = false, bool:kick = true, bool:szoveg = true)
{
	if(PlayerInfo[kit][pBanFlood])//mert szar a samp kick és raktam bele késleltetést, így több rekordot is bevihet sajnos....
	{
		printf("Szerver: Ban - AntiFlood - %s | Oka: %s", JatekosNev(kit), oka);
		return true;
	}

	PlayerInfo[kit][pBanFlood] = true;
	new tipus[5], cim[30], bannolo[30];
	if(ipban) tipus = "ip";
	else tipus = "nev";

	if(ipban) strmid(cim, JatekosIP(kit), 0, strlen(JatekosIP(kit)), 30);
	else strmid(cim, PlayerInfo[kit][pNev], 0, strlen(PlayerInfo[kit][pNev]), 30);

	if(tilto == NINCS) bannolo = "Rendszer";
	else strmid(bannolo, PlayerInfo[tilto][pNev], 0, strlen(PlayerInfo[tilto][pNev]), 30);

	new uIdo;
	if(ido) uIdo = gettime() + (60*60*ido);

	if(IsLewis(kit))
	{
	    SendFormatMessage(kit,COLOR_LIGHTRED,"Tiltás leállítva{1E90FF} -> %s | %s - %s", bannolo, BanIdo(ido, true), oka);
		return false;
	}

	new year, month, day;
	getdate(year, month, day);

	new ev, ho, nap, ora, perc, mperc;
	uDate(uIdo, ev, ho, nap, ora, perc, mperc, 1);
	nformat(banned, 512, "INSERT INTO `"#MYSQL_BAN_TABLA"` (Cim, Tipus, UIdo, Banolta, Oka, Mikor) VALUES ('%s', '%s', '%d', '%s', '%s', '%d/%02d/%02d')",cim, tipus, uIdo, bannolo, oka, year, month, day);
	mysql_tquery(sql_ID, banned, "", "");

	if(szoveg)
	{
		SendFormatMessageToAll(COLOR_LIGHTRED, ""#PREFIX": {1E90FF}%s ki lett tiltva %s által %s", JatekosNev(kit), bannolo, BanIdo(ido, true));
		SendFormatMessageToAll(COLOR_LIGHTRED, ""#PREFIX":{1E90FF}Oka: %s", oka);
        #if UCPKONZOL == true
  			nformat(bansocket, 512, "[[b;#FF6347;#000000]BAN: %s ki lett tiltva %s által %s | Oka: %s]", JatekosNev(kit), bannolo, BanIdo(ido, true), oka);
  			WSStringFix(bansocket);
	    	WSServerSentToAll(ServerInfo[sUCPServer], bansocket);
		#endif
	}
   	nformat(uzen, 256, "Oka: %s\nBanolt: %s\nLejár: %d.%02d.%02d %02d:%02d\nIdõpont: %d/%d/%d", oka, bannolo, ev, ho, nap, ora, perc, year, month, day);
	doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pUtoljara = '%d', pOnline = '1' WHERE id = '%d'", gettime(), PlayerInfo[kit][pID]);
	ShowPlayerDialog(kit, DIALOG_INFO, DIALOG_STYLE_MSGBOX, #COL_PIROS"Figyelem! "#COL_FEHER"Ki lettél tiltva!", uzen, "OK", "");

	if(kick)
	{
	    if(tilto == NINCS)
			Kick(kit, true); //Ha a rendszer banol, akkor lewist is.
		else
		    Kick(kit, false); //Ha nem, akkor nem.
	}	
	return true;
}

stock NumCharacter(string[], character)
{
	new szamlalas = 0, i = -1;
	for(;++i < strlen(string);)
	{
		if(string[i] == character)
		{
			szamlalas++;
		}
	}
	return szamlalas;
}

stock GetHasznaloNum(kapuid)
{
	new szamlalas = 0, i = -1;
    for(;++i < MAX_KAPU_HASZNALO;)
	{
	    if(Kapu[kapuid][kHasznalo][i] > 0)
	    {
			szamlalas++;
	    }
	}
	return szamlalas;
}
/*
stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}
*/
stock Float:GetDistanceToPointEx(playerid,Float:x1,Float:y1,Float:z1)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return INF_FLOAT;
}

stock Float:GetDistanceToVehicle(playerid, jarmuid)
{
	if(IsPlayerConnected(playerid) && IsVehicleConnected(jarmuid))
	{
		new Float:x1,Float:y1,Float:z1;
		GetVehiclePos(jarmuid,x1,y1,z1);
		return GetDistanceToPointEx(playerid,x1,y1,z1);
	}
	return INF_FLOAT;
}

stock Float:GetDistanceToCar(playerid,vehicleid) //By Darkrealm (Edited by Sacky and Gabriel "Larcius" Cordes)
{
	return GetDistanceToVehicle(playerid,vehicleid);
}

stock Float:GetDistanceToFaHely(playerid, fa)
{
	if(IsPlayerConnected(playerid) && (fa > -1))
	{
		return GetDistanceToPointEx(playerid, FaHelyek[fa][fPosX], FaHelyek[fa][fPosY], FaHelyek[fa][fPosZ]);
	}
	return INF_FLOAT;
}

stock GetClosestFaHely(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new
			kozelifa = -1,
			Float:closestdist = 9999.0,
			Float:dist,
			fa = -1
		;

		for(;++fa < sizeof(FaHelyek);)
		{
			dist = GetDistanceToFaHely(playerid, fa);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelifa = fa;
			}
		}
		return kozelifa;
	}
	return -1;
}

stock UjKapuID()
{
	new visszateres = NINCS, i = 0;
	for(;++i < MAX_KAPU;)
	{
	    if(!Kapu[i][kVan])
	    {
	        visszateres = i;
	        break;
	    }
	}
	return visszateres;
}

stock Float:GetDistanceToKapu(playerid, kapu)
{
	if (IsPlayerConnected(playerid) && (kapu > -1))
	{
		return GetDistanceToPointEx(playerid, Kapu[kapu][kZPos][0], Kapu[kapu][kZPos][1], Kapu[kapu][kZPos][2]);
	}
	return INF_FLOAT;
}

stock GetClosestKapu(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new kozelikapu=NINCS;
		new kapu = -1;
		new Float:closestdist = 9999.0, Float:dist;
		for(;++kapu < MAX_KAPU;)
		{
			dist = GetDistanceToKapu(playerid, kapu);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelikapu = kapu;
			}
		}
		return kozelikapu;
	}
	return NINCS;
}

fpublic Autentikacio(index, response_code, data[])
{
	if(index == 0)
	{
		if(response_code != 200)
		{
			printf("Autentikáció: - hiba! Hibakód: #%d | A szerver leáll!", response_code);
			SendRconCommand("exit");
			return true;
		}

		if(!strcmp(data, "true", true)) print("Autentikáció: - sikeres | Futtatás engedélyezve - Folytatás");
		else print("Autentikáció: - sikertelen | Futtatás megtagadva - Leállítás"), SendRconCommand("exit");
	}

	return true;
}

stock Parancs_Alias()
{
	#define ZA ZCMD_Alias
	ZA("kosar",    "kosár");
	ZA("feltor",    "feltör");
	ZA("bankkartya",    "bankkártya");
	ZA("nullaz",	"nulláz");
	ZA("gazmaszk",	"gázmaszk");
	ZA("leut",	"leüt");
	ZA("verdij",	"vérdíj");
	ZA("mergezes",	"mérgezés");
	ZA("mereg",	"méreg");
	ZA("hazassag",	"házasság");
	ZCMD_Alias("oltozo"	,	"öltözõ");
	ZCMD_Alias("horgaszat", 	"horgászat");
	ZCMD_Alias("tiltasaim", 	"tiltásaim");
	ZCMD_Alias("horgaszat", 	"fish");
	ZCMD_Alias("harcstilus", 	"harcstílus");
	ZCMD_Alias("w", 			"whisper");
	ZCMD_Alias("adatnezes", 	"adatnézés");
	ZCMD_Alias("alruha", 		"álruha");
	ZCMD_Alias("alnev", 		"álnév");
	ZCMD_Alias("oltozo", 		"öltözõ");
	ZCMD_Alias("fekves", 		"fekvés");
	ZCMD_Alias("tanc", 			"tánc");
	ZCMD_Alias("uzemmod", 		"üzemmód");
	ZCMD_Alias("felszereles", 	"felszerelés");
	ZCMD_Alias("gyasz", 		"gyász");
	ZCMD_Alias("sir", 			"sír");
	ZCMD_Alias("johettek", 		"jöhettek");
	ZCMD_Alias("allj", 			"állj");
	ZCMD_Alias("kezennallas", 	"kézenállás");
	ZCMD_Alias("ad", 			"advertise");
	ZCMD_Alias("ad", 			"hirdet");
	ZCMD_Alias("zar", 			"zár");
	ZCMD_Alias("o", 			"ooc");
	ZCMD_Alias("s", 			"shout");
	ZCMD_Alias("pickup", 		"p");
	ZCMD_Alias("hangup", 		"h");
	ZCMD_Alias("tankol", 		"fill");
	ZCMD_Alias("szamla", 		"bsz");
	ZCMD_Alias("szamla", 		"bankszamla");
	ZCMD_Alias("szamla", 		"bankszámla");
	ZCMD_Alias("szamla", 		"számla");
	ZCMD_Alias("fegyver", 		"f");
	ZCMD_Alias("utzar", 		"útzár");
	ZCMD_Alias("telefon", 		"call");
	ZCMD_Alias("keszit", 		"készít");
	ZCMD_Alias("gyogyszer", 	"gyógyszer");
	ZCMD_Alias("atad", 			"átad");
	ZCMD_Alias("segit", 		"segít");
	ZCMD_Alias("motoz", 		"frisk");
	ZCMD_Alias("boja", 			"bója");
	ZCMD_Alias("tazer", 		"sokk");
	ZCMD_Alias("korozes", 		"körözés");
	ZCMD_Alias("sk", 			"sebessegkorlat");
	ZCMD_Alias("sk", 			"sebességkorlát");
	ZCMD_Alias("cuff", 			"bilincs");
	ZCMD_Alias("berak", 		"detain");
	ZCMD_Alias("mapper",        "mp");
	
	ZCMD_Alias("haz", 			"ház");
	ZCMD_Alias("frakcio", 		"fk");
	ZCMD_Alias("frakcio", 		"frakció");
	ZCMD_Alias("enter", 		"be");
	ZCMD_Alias("exit", 			"ki");
	ZCMD_Alias("engedely", 		"engedély");
	ZCMD_Alias("engedely", 		"licence");
	ZCMD_Alias("animok", 		"animlist");
	ZCMD_Alias("ah", 			"ahelp");
	ZCMD_Alias("stats", 		"adatok");
	ZCMD_Alias("stats", 		"adataim");
	ZCMD_Alias("szemelyi", 		"személyi");
	ZCMD_Alias("tuz", 			"tûz");
	ZCMD_Alias("statisztika", 	"stat");
	ZCMD_Alias("aduty", 		"onduty");
	ZCMD_Alias("atankol", 		"fuelcar");
	ZCMD_Alias("uzenet", 		"ü");
	ZCMD_Alias("uzenet", 		"üzenet");
	ZCMD_Alias("valasz", 		"válasz");
	ZCMD_Alias("valasz", 		"vá");
	
	ZCMD_Alias("premium", 		"prémium");
	ZCMD_Alias("premium", 		"p");
	
	ZCMD_Alias("valt", 		"vált");
	
	ZCMD_Alias("gun", 			"givegun");
	ZCMD_Alias("terulet", 		"terület");
	ZCMD_Alias("ceg", 			"cég");
	ZCMD_Alias("megtankol", 	"fuelcars");
	ZCMD_Alias("ujhaz", 		"újház");
	ZCMD_Alias("ajto", 			"ajtó");
	//ZCMD_Alias("setleader", 	"makeleader");
	ZCMD_Alias("td",			"showtd");
	ZCMD_Alias("eladokocsik", 	"eladókocsik");
	ZCMD_Alias("admins", 		"adminok");
	ZCMD_Alias("asek", 			"adminsegedek");
	ZCMD_Alias("asek", 			"adminsegédek");
	ZCMD_Alias("idojaras", 		"weather");
	ZCMD_Alias("napszak", 		"tod");
	ZCMD_Alias("get", 			"gethere");
	ZCMD_Alias("eladohazak",	"eladóházak");
	ZCMD_Alias("megprobal",		"megpróbál");
	ZCMD_Alias("megprobalja",	"megpróbálja");
	ZCMD_Alias("atnez",			"átnéz");
	ZCMD_Alias("butor",			"bútor");
	ZCMD_Alias("jelveny",		"jelvény");
	ZCMD_Alias("kartya",		"kártya");
	ZCMD_Alias("benzinkut",		"benzinkút");
	ZCMD_Alias("szef",			"széf");
	ZCMD_Alias("hir",			"hír");
	ZCMD_Alias("rendszam",		"rendszám");
	ZCMD_Alias("nevvaltas",		"névváltás");
	ZCMD_Alias("menu",			"menü");
	ZCMD_Alias("elutasit",		"elutasít");
	ZCMD_Alias("korhazban",		"kórházban");
	ZCMD_Alias("buntetesem",	"büntetésem");
	ZCMD_Alias("megkot",		"megköt");
	ZCMD_Alias("megkot",		"tie");
	ZCMD_Alias("zsak",			"zsák");
	ZCMD_Alias("radomany",		"riporteradomany");
	ZCMD_Alias("korbevezetes",  "körbevezetés");
	ZCMD_Alias("zero",  "zéró");
	ZCMD_Alias("szerelok",  "szerelõk");
	ZCMD_Alias("jelent",  "bejelent");
	ZCMD_Alias("taxiora", "taxióra");
	ZCMD_Alias("buszjegy", "buszjegy");
	ZCMD_Alias("kereskedok", "kereskedõk");
	ZCMD_Alias("k",             "kereskedõ");
	ZCMD_Alias("k",             "kereskedés");
	ZCMD_Alias("erme",          "érme");
	ZCMD_Alias("kocka",         "dobókocka");
	ZCMD_Alias("lstleader",     "skvleader");
	ZCMD_Alias("garazs", 		"garázs");
	ZCMD_Alias("lotto",         "lottó");
	ZCMD_Alias("lakcimkartya",  "lakcímkártya");
	ZCMD_Alias("legtobbfirka",  "legtöbbfirka");
	ZCMD_Alias("ceg",           "biz");
	ZCMD_Alias("csakany",       "csákány");
	return true;
}
fpublic initDatabases()
{
	printf("Adatbázisok ellenõrzése");
	//A biztonság kedvéért non-threaded queryt küldök, hogy míg le nem fut a query, ne történjen betöltés.
	#define MAXQUERYSIZE 1024
	new query[MAXQUERYSIZE]; //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! FIGYELJ RÁ, HA KEVÉS, MEGHAL A MÓD !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	
	format(query, MAXQUERYSIZE, "CREATE TABLE IF NOT EXISTS `garazs` (\
  	`id` int(11) NOT NULL AUTO_INCREMENT,\
  	`tipus` int(11) NOT NULL DEFAULT '0',\
  	`tulaj` int(11) NOT NULL DEFAULT '-1',\
  	`ara` int(11) NOT NULL DEFAULT '0',\
  	`haz` int(11) NOT NULL DEFAULT '0',\
  	`x` float NOT NULL DEFAULT '0',\
  	`y` float NOT NULL,\
  	`z` float NOT NULL,\
  	`a` float NOT NULL,\
  	`zarva` int(11) NOT NULL DEFAULT '1',\
  	PRIMARY KEY (`id`)\
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;");
    mysql_query(sql_ID, query, false);
    
    printf("Adatbázisok ellenõrzése megtörtént");
}
public OnGameModeInit()
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    PowerTD[0] = TextDrawCreate(511.000000, 396.000000, "~n~~n~");
	TextDrawBackgroundColor(PowerTD[0], 255);
	TextDrawFont(PowerTD[0], 1);
	TextDrawLetterSize(PowerTD[0], 0.590000, 0.039999);
	TextDrawColor(PowerTD[0], -1);
	TextDrawSetOutline(PowerTD[0], 0);
	TextDrawSetProportional(PowerTD[0], 1);
	TextDrawSetShadow(PowerTD[0], 1);
	TextDrawUseBox(PowerTD[0], 1);
	TextDrawBoxColor(PowerTD[0], 255);
	TextDrawTextSize(PowerTD[0], 592.000000, -10.000000);

	PowerTD[1] = TextDrawCreate(512.000000, 397.000000, "~n~~n~");
	TextDrawBackgroundColor(PowerTD[1], 255);
	TextDrawFont(PowerTD[1], 1);
	TextDrawLetterSize(PowerTD[1], 0.500000, -0.099999);
	TextDrawColor(PowerTD[1], -1);
	TextDrawSetOutline(PowerTD[1], 0);
	TextDrawSetProportional(PowerTD[1], 1);
	TextDrawSetShadow(PowerTD[1], 1);
	TextDrawUseBox(PowerTD[1], 1);
	TextDrawBoxColor(PowerTD[1], 252645375);
	TextDrawTextSize(PowerTD[1], 591.000000, 0.000000);
	
	
    g_TextDraw[td_iPhone][0] = TextDrawCreate(507.000183, 195.792556, "ld_pool:ball");
	TextDrawLetterSize(g_TextDraw[td_iPhone][0], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][0], 16.000000, 16.000000);
	TextDrawAlignment(g_TextDraw[td_iPhone][0], 1);
	TextDrawColor(g_TextDraw[td_iPhone][0], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone][0], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][0], 0);
	TextDrawFont(g_TextDraw[td_iPhone][0], 4);

	g_TextDraw[td_iPhone][1] = TextDrawCreate(506.666839, 404.199951, "ld_pool:ball");
	TextDrawLetterSize(g_TextDraw[td_iPhone][1], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][1], 16.000000, -16.000000);
	TextDrawAlignment(g_TextDraw[td_iPhone][1], 1);
	TextDrawColor(g_TextDraw[td_iPhone][1], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone][1], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][1], 0);
	TextDrawFont(g_TextDraw[td_iPhone][1], 4);

	g_TextDraw[td_iPhone][2] = TextDrawCreate(578.666870, 404.199951, "ld_pool:ball");
	TextDrawLetterSize(g_TextDraw[td_iPhone][2], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][2], 16.000000, -16.000000);
	TextDrawAlignment(g_TextDraw[td_iPhone][2], 1);
	TextDrawColor(g_TextDraw[td_iPhone][2], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone][2], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][2], 0);
	TextDrawFont(g_TextDraw[td_iPhone][2], 4);

	g_TextDraw[td_iPhone][3] = TextDrawCreate(578.666870, 195.792541, "ld_pool:ball");
	TextDrawLetterSize(g_TextDraw[td_iPhone][3], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][3], 16.000000, 16.000000);
	TextDrawAlignment(g_TextDraw[td_iPhone][3], 1);
	TextDrawColor(g_TextDraw[td_iPhone][3], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone][3], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][3], 0);
	TextDrawFont(g_TextDraw[td_iPhone][3], 4);

	g_TextDraw[td_iPhone][4] = TextDrawCreate(507.000061, 202.844375, "LD_SPAC:white");
	TextDrawLetterSize(g_TextDraw[td_iPhone][4], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][4], 87.666656, 194.962951);
	TextDrawAlignment(g_TextDraw[td_iPhone][4], 1);
	TextDrawColor(g_TextDraw[td_iPhone][4], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone][4], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][4], 0);
	TextDrawFont(g_TextDraw[td_iPhone][4], 4);

	g_TextDraw[td_iPhone][5] = TextDrawCreate(513.666564, 195.548095, "LD_SPAC:white");
	TextDrawLetterSize(g_TextDraw[td_iPhone][5], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][5], 74.666641, 208.651809);
	TextDrawAlignment(g_TextDraw[td_iPhone][5], 1);
	TextDrawColor(g_TextDraw[td_iPhone][5], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone][5], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][5], 0);
	TextDrawFont(g_TextDraw[td_iPhone][5], 4);

	g_TextDraw[td_iPhone][6] = TextDrawCreate(507.333496, 196.377746, "ld_pool:ball");
	TextDrawLetterSize(g_TextDraw[td_iPhone][6], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][6], 16.000000, 16.000000);
	TextDrawAlignment(g_TextDraw[td_iPhone][6], 1);
	TextDrawColor(g_TextDraw[td_iPhone][6], 255);
	TextDrawSetShadow(g_TextDraw[td_iPhone][6], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][6], 0);
	TextDrawFont(g_TextDraw[td_iPhone][6], 4);

	g_TextDraw[td_iPhone][7] = TextDrawCreate(507.333496, 403.540649, "ld_pool:ball");
	TextDrawLetterSize(g_TextDraw[td_iPhone][7], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][7], 16.000000, -16.000000);
	TextDrawAlignment(g_TextDraw[td_iPhone][7], 1);
	TextDrawColor(g_TextDraw[td_iPhone][7], 255);
	TextDrawSetShadow(g_TextDraw[td_iPhone][7], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][7], 0);
	TextDrawFont(g_TextDraw[td_iPhone][7], 4);

	g_TextDraw[td_iPhone][8] = TextDrawCreate(578.000244, 403.540649, "ld_pool:ball");
	TextDrawLetterSize(g_TextDraw[td_iPhone][8], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][8], 16.000000, -16.000000);
	TextDrawAlignment(g_TextDraw[td_iPhone][8], 1);
	TextDrawColor(g_TextDraw[td_iPhone][8], 255);
	TextDrawSetShadow(g_TextDraw[td_iPhone][8], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][8], 0);
	TextDrawFont(g_TextDraw[td_iPhone][8], 4);

	g_TextDraw[td_iPhone][9] = TextDrawCreate(578.000305, 196.377746, "ld_pool:ball");
	TextDrawLetterSize(g_TextDraw[td_iPhone][9], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][9], 16.000000, 16.000000);
	TextDrawAlignment(g_TextDraw[td_iPhone][9], 1);
	TextDrawColor(g_TextDraw[td_iPhone][9], 255);
	TextDrawSetShadow(g_TextDraw[td_iPhone][9], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][9], 0);
	TextDrawFont(g_TextDraw[td_iPhone][9], 4);

	g_TextDraw[td_iPhone][10] = TextDrawCreate(514.666809, 196.622222, "LD_SPAC:white");
	TextDrawLetterSize(g_TextDraw[td_iPhone][10], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][10], 72.000022, 206.992568);
	TextDrawAlignment(g_TextDraw[td_iPhone][10], 1);
	TextDrawColor(g_TextDraw[td_iPhone][10], 255);
	TextDrawSetShadow(g_TextDraw[td_iPhone][10], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][10], 0);
	TextDrawFont(g_TextDraw[td_iPhone][10], 4);

	g_TextDraw[td_iPhone][11] = TextDrawCreate(507.666656, 204.674133, "LD_SPAC:white");
	TextDrawLetterSize(g_TextDraw[td_iPhone][11], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][11], 86.333419, 191.229660);
	TextDrawAlignment(g_TextDraw[td_iPhone][11], 1);
	TextDrawColor(g_TextDraw[td_iPhone][11], 255);
	TextDrawSetShadow(g_TextDraw[td_iPhone][11], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][11], 0);
	TextDrawFont(g_TextDraw[td_iPhone][11], 4);

	g_TextDraw[td_iPhone][12] = TextDrawCreate(511.333435, 221.925933, "LD_otb:blue");
	TextDrawLetterSize(g_TextDraw[td_iPhone][12], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][12], 78.666633, 155.140731);
	TextDrawAlignment(g_TextDraw[td_iPhone][12], 1);
	TextDrawColor(g_TextDraw[td_iPhone][12], -1768515841);
	TextDrawSetShadow(g_TextDraw[td_iPhone][12], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][12], 0);
	TextDrawFont(g_TextDraw[td_iPhone][12], 4);

	g_TextDraw[td_iPhone][13] = TextDrawCreate(549.666809, 201.599945, "ld_pool:ball");
	TextDrawLetterSize(g_TextDraw[td_iPhone][13], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][13], 3.333292, 4.148138);
	TextDrawAlignment(g_TextDraw[td_iPhone][13], 1);
	TextDrawColor(g_TextDraw[td_iPhone][13], -2139062142);
	TextDrawSetShadow(g_TextDraw[td_iPhone][13], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][13], 0);
	TextDrawFont(g_TextDraw[td_iPhone][13], 4);

	g_TextDraw[td_iPhone][14] = TextDrawCreate(544.999877, 209.896240, "ld_poke:cd1d");
	TextDrawLetterSize(g_TextDraw[td_iPhone][14], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][14], 12.333331, 2.074084);
	TextDrawAlignment(g_TextDraw[td_iPhone][14], 1);
	TextDrawColor(g_TextDraw[td_iPhone][14], -2139062142);
	TextDrawSetShadow(g_TextDraw[td_iPhone][14], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][14], 0);
	TextDrawFont(g_TextDraw[td_iPhone][14], 4);

	g_TextDraw[td_iPhone][15] = TextDrawCreate(541.000366, 210.066589, "ld_pool:ball");
	TextDrawLetterSize(g_TextDraw[td_iPhone][15], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][15], 1.333292, 1.244433);
	TextDrawAlignment(g_TextDraw[td_iPhone][15], 1);
	TextDrawColor(g_TextDraw[td_iPhone][15], -2139062142);
	TextDrawSetShadow(g_TextDraw[td_iPhone][15], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][15], 0);
	TextDrawFont(g_TextDraw[td_iPhone][15], 4);

	g_TextDraw[td_iPhone][16] = TextDrawCreate(543.333618, 380.311004, "ld_pool:ball");
	TextDrawLetterSize(g_TextDraw[td_iPhone][16], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][16], 16.333269, 18.251844);
	TextDrawAlignment(g_TextDraw[td_iPhone][16], 1);
	TextDrawColor(g_TextDraw[td_iPhone][16], -1061109690);
	TextDrawSetShadow(g_TextDraw[td_iPhone][16], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][16], 0);
	TextDrawFont(g_TextDraw[td_iPhone][16], 4);

	g_TextDraw[td_iPhone][17] = TextDrawCreate(511.333496, 221.925994, "ld_plan:tvbase");
	TextDrawLetterSize(g_TextDraw[td_iPhone][17], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][17], 78.666702, 9.540740);
	TextDrawAlignment(g_TextDraw[td_iPhone][17], 1);
	TextDrawColor(g_TextDraw[td_iPhone][17], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone][17], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][17], 0);
	TextDrawFont(g_TextDraw[td_iPhone][17], 4);

	g_TextDraw[td_iPhone][18] = TextDrawCreate(550.666687, 221.925918, "4G________________00:00");
	TextDrawLetterSize(g_TextDraw[td_iPhone][18], 0.194333, 0.865778);
	TextDrawAlignment(g_TextDraw[td_iPhone][18], 2);
	TextDrawColor(g_TextDraw[td_iPhone][18], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone][18], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][18], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone][18], 51);
	TextDrawFont(g_TextDraw[td_iPhone][18], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone][18], 1);

	g_TextDraw[td_iPhone][19] = TextDrawCreate(549.999450, 233.125991, "00:00");
	TextDrawLetterSize(g_TextDraw[td_iPhone][19], 0.460333, 2.666073);
	TextDrawAlignment(g_TextDraw[td_iPhone][19], 2);
	TextDrawColor(g_TextDraw[td_iPhone][19], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone][19], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][19], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone][19], 51);
	TextDrawFont(g_TextDraw[td_iPhone][19], 2);
	TextDrawSetProportional(g_TextDraw[td_iPhone][19], 1);

	g_TextDraw[td_iPhone][20] = TextDrawCreate(549.332702, 254.866653, "1 de enero");
	TextDrawLetterSize(g_TextDraw[td_iPhone][20], 0.124999, 0.803554);
	TextDrawAlignment(g_TextDraw[td_iPhone][20], 2);
	TextDrawColor(g_TextDraw[td_iPhone][20], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone][20], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][20], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone][20], 51);
	TextDrawFont(g_TextDraw[td_iPhone][20], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone][20], 1);

	g_TextDraw[td_iPhone][21] = TextDrawCreate(549.999572, 342.148040, "~g~Y ~w~a feloldáshoz");
	TextDrawLetterSize(g_TextDraw[td_iPhone][21], 0.257666, 1.276443);
	TextDrawAlignment(g_TextDraw[td_iPhone][21], 2);
	TextDrawColor(g_TextDraw[td_iPhone][21], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone][21], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][21], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone][21], 51);
	TextDrawFont(g_TextDraw[td_iPhone][21], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone][21], 1);

	g_TextDraw[td_iPhone][22] = TextDrawCreate(511.333282, 231.466659, "ld_plan:tvbase");
	TextDrawLetterSize(g_TextDraw[td_iPhone][22], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][22], 78.666664, 16.177804);
	TextDrawAlignment(g_TextDraw[td_iPhone][22], 1);
	TextDrawColor(g_TextDraw[td_iPhone][22], 8388863);
	TextDrawSetShadow(g_TextDraw[td_iPhone][22], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][22], 0);
	TextDrawFont(g_TextDraw[td_iPhone][22], 4);

	g_TextDraw[td_iPhone][23] = TextDrawCreate(511.333282, 231.466705, "LD_SPAC:white");
	TextDrawLetterSize(g_TextDraw[td_iPhone][23], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][23], 78.666656, 1.659255);
	TextDrawAlignment(g_TextDraw[td_iPhone][23], 1);
	TextDrawColor(g_TextDraw[td_iPhone][23], 16777215);
	TextDrawSetShadow(g_TextDraw[td_iPhone][23], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][23], 0);
	TextDrawFont(g_TextDraw[td_iPhone][23], 4);

	g_TextDraw[td_iPhone][24] = TextDrawCreate(511.333282, 247.814788, "LD_SPAC:white");
	TextDrawLetterSize(g_TextDraw[td_iPhone][24], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][24], 78.666656, 1.659255);
	TextDrawAlignment(g_TextDraw[td_iPhone][24], 1);
	TextDrawColor(g_TextDraw[td_iPhone][24], 16777215);
	TextDrawSetShadow(g_TextDraw[td_iPhone][24], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][24], 0);
	TextDrawFont(g_TextDraw[td_iPhone][24], 4);

	g_TextDraw[td_iPhone][25] = TextDrawCreate(511.666900, 344.296508, "ld_plan:tvbase");
	TextDrawLetterSize(g_TextDraw[td_iPhone][25], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone][25], 78.333389, 33.185237);
	TextDrawAlignment(g_TextDraw[td_iPhone][25], 1);
	TextDrawColor(g_TextDraw[td_iPhone][25], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone][25], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone][25], 0);
	TextDrawFont(g_TextDraw[td_iPhone][25], 4);

	//Clock
	g_TextDraw[td_iPhone_Clock][0] = TextDrawCreate(549.633178, 252.551788, "00:00");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Clock][0], 0.499667, 2.861037);
	TextDrawAlignment(g_TextDraw[td_iPhone_Clock][0], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Clock][0], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Clock][0], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Clock][0], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Clock][0], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Clock][0], 2);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Clock][0], 1);

	g_TextDraw[td_iPhone_Clock][1] = TextDrawCreate(549.066528, 277.052032, "1 és 1999 között");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Clock][1], 0.124999, 0.803554);
	TextDrawAlignment(g_TextDraw[td_iPhone_Clock][1], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Clock][1], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Clock][1], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Clock][1], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Clock][1], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Clock][1], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Clock][1], 1);

	//Galeria
	g_TextDraw[td_iPhone_Gallery] = TextDrawCreate(542.000122, 340.977722, "~<~_képek.png_~>~");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Gallery], 0.202333, 1.069037);
	TextDrawAlignment(g_TextDraw[td_iPhone_Gallery], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Gallery], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Gallery], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Gallery], 1);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Gallery], 255);
	TextDrawFont(g_TextDraw[td_iPhone_Gallery], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Gallery], 1);

	//Clima
	g_TextDraw[td_iPhone_Time][0] = TextDrawCreate(582.999938, 335.585296, "Napos");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Time][0], 0.236999, 0.998518);
	TextDrawAlignment(g_TextDraw[td_iPhone_Time][0], 3);
	TextDrawColor(g_TextDraw[td_iPhone_Time][0], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Time][0], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Time][0], 1);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Time][0], 255);
	TextDrawFont(g_TextDraw[td_iPhone_Time][0], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Time][0], 1);

	g_TextDraw[td_iPhone_Time][1] = TextDrawCreate(518.333312, 258.844390, "LD_SPAC:white");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Time][1], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Time][1], 64.666687, 72.177795);
	TextDrawAlignment(g_TextDraw[td_iPhone_Time][1], 1);
	TextDrawColor(g_TextDraw[td_iPhone_Time][1], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Time][1], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Time][1], 0);
	TextDrawFont(g_TextDraw[td_iPhone_Time][1], 4);

	g_TextDraw[td_iPhone_Time][2] = TextDrawCreate(555.000000, 323.140777, "wheater.com");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Time][2], 0.127999, 0.687407);
	TextDrawAlignment(g_TextDraw[td_iPhone_Time][2], 1);
	TextDrawColor(g_TextDraw[td_iPhone_Time][2], 255);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Time][2], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Time][2], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Time][2], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Time][2], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Time][2], 1);

	//GPS
	g_TextDraw[td_iPhone_GPS] = TextDrawCreate(547.666870, 253.036956, "Te itt vagy:");
	TextDrawLetterSize(g_TextDraw[td_iPhone_GPS], 0.188666, 0.944592);
	TextDrawAlignment(g_TextDraw[td_iPhone_GPS], 2);
	TextDrawColor(g_TextDraw[td_iPhone_GPS], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_GPS], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_GPS], 1);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_GPS], 255);
	TextDrawFont(g_TextDraw[td_iPhone_GPS], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_GPS], 1);

	//Radio
	g_TextDraw[td_iPhone_Radio][0] = TextDrawCreate(542.333251, 258.844360, "~<~ RÁDIÓ ~>~");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Radio][0], 0.265333, 1.085629);
	TextDrawAlignment(g_TextDraw[td_iPhone_Radio][0], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Radio][0], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Radio][0], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Radio][0], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Radio][0], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Radio][0], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Radio][0], 1);

	g_TextDraw[td_iPhone_Radio][1] = TextDrawCreate(550.999938, 353.592559, "~g~Y~w~/n a kikapcsoláshoz");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Radio][1], 0.227000, 1.006814);
	TextDrawAlignment(g_TextDraw[td_iPhone_Radio][1], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Radio][1], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Radio][1], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Radio][1], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Radio][1], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Radio][1], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Radio][1], 1);

	//Musica
	g_TextDraw[td_iPhone_Music][0] = TextDrawCreate(542.333251, 258.844360, "~<~ ZENE ~>~");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Music][0], 0.265333, 1.085629);
	TextDrawAlignment(g_TextDraw[td_iPhone_Music][0], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Music][0], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Music][0], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Music][0], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Music][0], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Music][0], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Music][0], 1);

	g_TextDraw[td_iPhone_Music][1] = TextDrawCreate(550.999938, 353.592559, "~g~Y~w~a leállításhoz");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Music][1], 0.227000, 1.006814);
	TextDrawAlignment(g_TextDraw[td_iPhone_Music][1], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Music][1], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Music][1], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Music][1], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Music][1], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Music][1], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Music][1], 1);

	//Mapa
	g_TextDraw[td_iPhone_Map] = TextDrawCreate(511.266815, 249.548080, "samaps:map");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Map], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Map], 78.666656, 126.518585);
	TextDrawAlignment(g_TextDraw[td_iPhone_Map], 1);
	TextDrawColor(g_TextDraw[td_iPhone_Map], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Map], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Map], 0);
	TextDrawFont(g_TextDraw[td_iPhone_Map], 4);

	//Internet
	g_TextDraw[td_iPhone_Internet][0] = TextDrawCreate(550.666748, 326.459228, "Karbantartás alatt...~n~");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Internet][0], 0.151000, 0.836741);
	TextDrawAlignment(g_TextDraw[td_iPhone_Internet][0], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Internet][0], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Internet][0], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Internet][0], 1);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Internet][0], 255);
	TextDrawFont(g_TextDraw[td_iPhone_Internet][0], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Internet][0], 1);

	g_TextDraw[td_iPhone_Internet][1] = TextDrawCreate(515.333374, 261.748046, "404");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Internet][1], 0.858666, 7.237334);
	TextDrawAlignment(g_TextDraw[td_iPhone_Internet][1], 1);
	TextDrawColor(g_TextDraw[td_iPhone_Internet][1], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Internet][1], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Internet][1], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Internet][1], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Internet][1], 2);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Internet][1], 1);


	//SMS
	
	
	
	
	g_TextDraw[td_iPhone_SMS][0] = TextDrawCreate(550.666748, 326.459228, "SMS ASD~n~");
	TextDrawLetterSize(g_TextDraw[td_iPhone_SMS][0], 0.151000, 0.836741);
	TextDrawAlignment(g_TextDraw[td_iPhone_SMS][0], 2);
	TextDrawColor(g_TextDraw[td_iPhone_SMS][0], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_SMS][0], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_SMS][0], 1);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_SMS][0], 255);
	TextDrawFont(g_TextDraw[td_iPhone_SMS][0], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_SMS][0], 1);

	g_TextDraw[td_iPhone_SMS][1] = TextDrawCreate(550.666748, 326.459228, "/sms [Telefonszám] [Üzenet]");
	TextDrawLetterSize(g_TextDraw[td_iPhone_SMS][1], 0.118666, 0.837334);
	TextDrawAlignment(g_TextDraw[td_iPhone_SMS][1], 2);
	TextDrawColor(g_TextDraw[td_iPhone_SMS][1], -1);
	TextDrawSetShadow(g_TextDraw[td_iPhone_SMS][1], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_SMS][1], 1);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_SMS][1], 255);
	TextDrawFont(g_TextDraw[td_iPhone_SMS][1], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_SMS][1], 1);
	
	
	//SMS






	//Calculadora
	g_TextDraw[td_iPhone_Calculator][0] = TextDrawCreate(522.900268, 354.604370, "0");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][0], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][0], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][0], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][0], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][0], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][0], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][0], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][0], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][0], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][0], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][0], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][0], true);

	g_TextDraw[td_iPhone_Calculator][1] = TextDrawCreate(549.300354, 354.604370, "=");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][1], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][1], 51.000000, 29.037044);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][1], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][1], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][1], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][1], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][1], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][1], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][1], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][1], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][1], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][1], true);

	g_TextDraw[td_iPhone_Calculator][2] = TextDrawCreate(522.900268, 333.204071, "1");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][2], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][2], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][2], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][2], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][2], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][2], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][2], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][2], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][2], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][2], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][2], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][2], true);

	g_TextDraw[td_iPhone_Calculator][3] = TextDrawCreate(540.233581, 333.204071, "2");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][3], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][3], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][3], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][3], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][3], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][3], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][3], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][3], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][3], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][3], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][3], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][3], true);

	g_TextDraw[td_iPhone_Calculator][4] = TextDrawCreate(557.900207, 333.204071, "3");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][4], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][4], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][4], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][4], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][4], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][4], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][4], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][4], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][4], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][4], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][4], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][4], true);

	g_TextDraw[td_iPhone_Calculator][5] = TextDrawCreate(522.900268, 311.803771, "4");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][5], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][5], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][5], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][5], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][5], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][5], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][5], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][5], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][5], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][5], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][5], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][5], true);

	g_TextDraw[td_iPhone_Calculator][6] = TextDrawCreate(540.233581, 311.803771, "5");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][6], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][6], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][6], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][6], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][6], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][6], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][6], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][6], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][6], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][6], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][6], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][6], true);

	g_TextDraw[td_iPhone_Calculator][7] = TextDrawCreate(557.900207, 311.803771, "6");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][7], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][7], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][7], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][7], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][7], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][7], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][7], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][7], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][7], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][7], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][7], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][7], true);

	g_TextDraw[td_iPhone_Calculator][8] = TextDrawCreate(522.900268, 290.403472, "7");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][8], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][8], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][8], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][8], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][8], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][8], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][8], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][8], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][8], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][8], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][8], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][8], true);

	g_TextDraw[td_iPhone_Calculator][9] = TextDrawCreate(540.233581, 290.403472, "8");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][9], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][9], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][9], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][9], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][9], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][9], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][9], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][9], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][9], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][9], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][9], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][9], true);

	g_TextDraw[td_iPhone_Calculator][10] = TextDrawCreate(557.900207, 290.403472, "9");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][10], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][10], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][10], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][10], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][10], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][10], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][10], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][10], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][10], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][10], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][10], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][10], true);

	g_TextDraw[td_iPhone_Calculator][11] = TextDrawCreate(577.899597, 290.403472, "/");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][11], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][11], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][11], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][11], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][11], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][11], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][11], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][11], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][11], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][11], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][11], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][11], true);

	g_TextDraw[td_iPhone_Calculator][12] = TextDrawCreate(577.899597, 311.803771, "x");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][12], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][12], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][12], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][12], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][12], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][12], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][12], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][12], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][12], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][12], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][12], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][12], true);

	g_TextDraw[td_iPhone_Calculator][13] = TextDrawCreate(577.899597, 333.204071, "-");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][13], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][13], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][13], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][13], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][13], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][13], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][13], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][13], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][13], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][13], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][13], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][13], true);

	g_TextDraw[td_iPhone_Calculator][14] = TextDrawCreate(577.899597, 354.604370, "+");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][14], 0.271333, 1.359405);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][14], 10.0, 10.370368);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][14], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][14], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Calculator][14], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Calculator][14], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][14], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][14], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Calculator][14], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][14], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Calculator][14], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Calculator][14], true);

	g_TextDraw[td_iPhone_Calculator][15] = TextDrawCreate(516.666625, 255.940597, "LD_SPAC:white");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Calculator][15], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Calculator][15], 67.999954, 26.962947);
	TextDrawAlignment(g_TextDraw[td_iPhone_Calculator][15], 1);
	TextDrawColor(g_TextDraw[td_iPhone_Calculator][15], -2139062017);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Calculator][15], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Calculator][15], 0);
	TextDrawFont(g_TextDraw[td_iPhone_Calculator][15], 4);

	//Call
	g_TextDraw[td_iPhone_Call][0] = TextDrawCreate(511.333312, 278.755523, "LD_SPAC:white");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][0], 0.000000, 0.000000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][0], 78.333259, 98.725921);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][0], 1);
	TextDrawColor(g_TextDraw[td_iPhone_Call][0], -2041184257);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][0], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][0], 0);
	TextDrawFont(g_TextDraw[td_iPhone_Call][0], 4);

	g_TextDraw[td_iPhone_Call][1] = TextDrawCreate(524.999877, 282.488739, "1");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][1], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][1], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][1], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Call][1], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][1], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Call][1], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][1], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][1], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Call][1], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][1], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][1], 1);
    TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][1], true);

	g_TextDraw[td_iPhone_Call][2] = TextDrawCreate(549.999328, 282.244262, "2");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][2], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][2], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][2], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Call][2], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][2], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Call][2], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][2], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][2], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Call][2], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][2], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][2], 1);
    TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][2], true);

	g_TextDraw[td_iPhone_Call][3] = TextDrawCreate(574.999084, 282.414581, "3");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][3], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][3], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][3], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Call][3], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][3], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Call][3], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][3], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][3], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Call][3], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][3], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][3], 1);
    TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][3], true);

	g_TextDraw[td_iPhone_Call][4] = TextDrawCreate(524.999877, 304.229614, "4");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][4], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][4], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][4], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Call][4], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][4], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Call][4], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][4], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][4], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Call][4], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][4], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][4], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][4], true);

	g_TextDraw[td_iPhone_Call][5] = TextDrawCreate(549.999328, 304.229614, "5");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][5], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][5], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][5], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Call][5], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][5], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Call][5], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][5], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][5], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Call][5], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][5], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][5], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][5], true);

	g_TextDraw[td_iPhone_Call][6] = TextDrawCreate(574.999084, 304.229614, "6");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][6], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][6], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][6], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Call][6], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][6], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Call][6], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][6], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][6], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Call][6], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][6], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][6], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][6], true);

	g_TextDraw[td_iPhone_Call][7] = TextDrawCreate(524.999877, 326.800170, "7");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][7], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][7], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][7], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Call][7], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][7], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Call][7], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][7], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][7], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Call][7], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][7], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][7], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][7], true);

	g_TextDraw[td_iPhone_Call][8] = TextDrawCreate(549.999328, 326.800170, "8");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][8], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][8], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][8], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Call][8], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][8], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Call][8], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][8], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][8], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Call][8], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][8], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][8], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][8], true);

	g_TextDraw[td_iPhone_Call][9] = TextDrawCreate(574.999084, 326.800170, "9");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][9], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][9], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][9], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Call][9], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][9], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Call][9], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][9], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][9], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Call][9], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][9], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][9], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][9], true);

	g_TextDraw[td_iPhone_Call][10] = TextDrawCreate(549.999328, 349.370727, "0");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][10], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][10], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][10], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Call][10], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][10], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Call][10], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][10], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][10], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Call][10], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][10], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][10], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][10], true);

	g_TextDraw[td_iPhone_Call][11] = TextDrawCreate(524.999877, 349.370727, "F");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][11], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][11], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][11], 2);
	TextDrawColor(g_TextDraw[td_iPhone_CallYesNo][1], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][11], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_CallYesNo][1], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][11], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][11], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_CallYesNo][1], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][11], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][11], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][11], true);

	g_TextDraw[td_iPhone_Call][12] = TextDrawCreate(574.999084, 349.370727, "C");
	TextDrawLetterSize(g_TextDraw[td_iPhone_Call][12], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_Call][12], 10.0, 22.399999);
	TextDrawAlignment(g_TextDraw[td_iPhone_Call][12], 2);
	TextDrawColor(g_TextDraw[td_iPhone_Call][12], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_Call][12], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_Call][12], 0);
	TextDrawSetShadow(g_TextDraw[td_iPhone_Call][12], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_Call][12], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_Call][12], 51);
	TextDrawFont(g_TextDraw[td_iPhone_Call][12], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_Call][12], 1);
	TextDrawSetSelectable(g_TextDraw[td_iPhone_Call][12], true);

	//Call YES/NO
	g_TextDraw[td_iPhone_CallYesNo][0] = TextDrawCreate(534.333129, 320.651794, "N");
	TextDrawLetterSize(g_TextDraw[td_iPhone_CallYesNo][0], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_CallYesNo][0], 5.000000, 20.325927);
	TextDrawAlignment(g_TextDraw[td_iPhone_CallYesNo][0], 2);
	TextDrawColor(g_TextDraw[td_iPhone_CallYesNo][0], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_CallYesNo][0], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_CallYesNo][0], 2080375039);
	TextDrawSetShadow(g_TextDraw[td_iPhone_CallYesNo][0], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_CallYesNo][0], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_CallYesNo][0], 51);
	TextDrawFont(g_TextDraw[td_iPhone_CallYesNo][0], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_CallYesNo][0], 1);

	g_TextDraw[td_iPhone_CallYesNo][1] = TextDrawCreate(563.666198, 320.651794, "Y");
	TextDrawLetterSize(g_TextDraw[td_iPhone_CallYesNo][1], 0.449999, 1.600000);
	TextDrawTextSize(g_TextDraw[td_iPhone_CallYesNo][1], 5.000000, 20.325927);
	TextDrawAlignment(g_TextDraw[td_iPhone_CallYesNo][1], 2);
	TextDrawColor(g_TextDraw[td_iPhone_CallYesNo][1], -1);
	TextDrawUseBox(g_TextDraw[td_iPhone_CallYesNo][1], true);
	TextDrawBoxColor(g_TextDraw[td_iPhone_CallYesNo][1], 8388863);
	TextDrawSetShadow(g_TextDraw[td_iPhone_CallYesNo][1], 0);
	TextDrawSetOutline(g_TextDraw[td_iPhone_CallYesNo][1], 0);
	TextDrawBackgroundColor(g_TextDraw[td_iPhone_CallYesNo][1], 51);
	TextDrawFont(g_TextDraw[td_iPhone_CallYesNo][1], 1);
	TextDrawSetProportional(g_TextDraw[td_iPhone_CallYesNo][1], 1);

	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	//Zéró:
	g_TextDraw[td_Zero] = TextDrawCreate(57.000000, 314.000000, "~r~Zero Tolerancia ON!");
	TextDrawLetterSize(g_TextDraw[td_Zero], 0.240000, 1.200000);
	TextDrawAlignment(g_TextDraw[td_Zero], 1);
	TextDrawColor(g_TextDraw[td_Zero], -1);
	TextDrawUseBox(g_TextDraw[td_Zero], false);
	TextDrawSetShadow(g_TextDraw[td_Zero], 1);
	TextDrawSetOutline(g_TextDraw[td_Zero], 0);
	TextDrawFont(g_TextDraw[td_Zero], 1);
	TextDrawSetProportional(g_TextDraw[td_Zero], 1);
	//traffipax villanás:
	g_TextDraw[td_CameraFlash] = TextDrawCreate(-20.000000,2.000000,"|");
	TextDrawUseBox(g_TextDraw[td_CameraFlash],1);
	TextDrawBoxColor(g_TextDraw[td_CameraFlash],0xffffff66);
	TextDrawTextSize(g_TextDraw[td_CameraFlash],660.000000,22.000000);
	TextDrawAlignment(g_TextDraw[td_CameraFlash],0);
	TextDrawBackgroundColor(g_TextDraw[td_CameraFlash],0x000000ff);
	TextDrawFont(g_TextDraw[td_CameraFlash],3);
	TextDrawLetterSize(g_TextDraw[td_CameraFlash],1.000000,52.200000);
	TextDrawColor(g_TextDraw[td_CameraFlash],0xffffffff);
	TextDrawSetOutline(g_TextDraw[td_CameraFlash],1);
	TextDrawSetProportional(g_TextDraw[td_CameraFlash],1);
	TextDrawSetShadow(g_TextDraw[td_CameraFlash],1);


	new start = tickcount();
	Parancs_Alias();
	onPause_Init();
	Seifader_OnExit();
	Streamer_TickRate(200);

	AddPlayerClass(3, 1483.7136,-1741.7975,13.5469, 272.518, 0, 0, 0, 0, 0, 0);

	new i = 0;
	for(; i++ < 10;)
		print("\n");

	print( VERZIO " betoltese folyamatban");
	print("---------------------------------------------------\n");
	print("MySQL: Kapcsolodas a MySQL-hez!");

	ServerInfo[sPort] = GetServerVarAsInt("port");
	if(ServerInfo[sPort] == 7777) sql_ID = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DB, MYSQL_PW);
	else sql_ID = mysql_connect(MYSQL_HOST, tMYSQL_USER, tMYSQL_DB, tMYSQL_PW);
	printf("Szerver indítása... | Házi szerver");

	mysql_log( LOG_ERROR );
	initDatabases();
	
	mysql_tquery(sql_ID, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pOnline = '0'", "", "");
	//Szerver beállítások
	ServerInfo[sWhiteList] = false;
	ServerInfo[sAka] = true;
	ServerInfo[sReg] = true;
	
    #if UCPKONZOL == true
		ServerInfo[sUCPServer] = CreateWSServer("onUCPClientConnect", "onUCPClientDisconnect", "onUCPClientMessage");
    	nformat(port, 8, "%d", ServerInfo[sPort] + 1);
    	WSServerStartListen(ServerInfo[sUCPServer], "0.0.0.0", port);
    #endif
    
 	//print("MySQL: Kapcsolat sikeresen letrejott!");
 	print("---------------------------------------------------\n\n");
 	print("Szerver: Idozitok elinditasa!");
 	/* --------------- Idõzítõk ide --------------- */
 	UpdateIphone();
	AdatMentesMindenkinek();
	MasodpercesIdozito();
	KetMasodpercesIdozito();
	OtmasodpercesIdozito();
	FelmasodpercesIdozito();
	t_Teargas();
	t_Bomba();
	repeat t_UCPCheck();
	SetTimer("PowerBar", 20, 1);
	/* --------------- Idõzítõk vége --------------- */
	print("Szerver: Idozitok elinditasa sikeresen megtortent!");

	/* Területek */
	Area[A51] = CreateDynamicRectangle(-109.375,1644.53125,414.0625,2125);
	Area[Favago] = CreateDynamicRectangle(1312.5,-172.8515625,1628.90625,52.734375);

	AutomataBetoltes();
	TeleBetoltese();
	CreateBall();
	ZuzoGepStat[zLezaro] = CreateDynamicObject(968, -1864.56726, -1669.87000, 21.48400,   0.00000, 0.00000, 90.00000);
	
	ProcessSQL();

	FavagoFak();
	LoadAratas();
	CreateBanyaObject(true);
	
	LoadBoltok();
	AlapVas();
	
	#if NPC_KELL == 1
	BotBetoltes();
	#endif
	
	#if defined KELLDWAYNE
	FegyveresNPCk();
	#endif
	
	UnixTime = gettime();
	BoltBotBetoltes();
	BankLezerBetoltes(true, true);
	BankBotBetoltes();


	k_kereskedo = INVALID_PLAYER_ID;

	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	ManualVehicleEngineAndLights();
	SetGameModeText(VERZIO);
	SendRconCommand("mapname « - San Andreas - »");
	//ShowPlayerMarkers(0);
	ShowNameTags(true);
	SetNameTagDrawDistance(100.0);
	DisableNameTagLOS();

	i = -1;
	for(;++i < sizeof(KukaPos);)
	{
		Kuka[i][kID] = CreateDynamicObject(1339, KukaPos[i][0], KukaPos[i][1], KukaPos[i][2], 0.0, 0.0, KukaPos[i][3]);
		Kuka[i][kHasznalva] = true;
	}

	ServerInfo[sHarcVan] = NINCS;
	ServerInfo[sBetoltve] = true;
	ServerInfo[sCarResi][0] = 3600;
	ServerInfo[sTuzIdo][1] = 900;

	ServerInfo[sDrog][0] = Rand(1000, 2500);
	ServerInfo[sDrog][1] = Rand(1000, 2500);
	ServerInfo[sDrog][2] = Rand(1000, 2500);

	BankInfo[bBankElocsarnok] = Rand(10000, 99999);
	BankInfo[bBankSzefterem][0] = Rand(1, 9);
	BankInfo[bBankSzefterem][1] = Rand(1, 9);
	BankInfo[bBankSzefterem][2] = Rand(1, 9);
	BankInfo[bBankSzefterem][3] = Rand(1, 9);
	BankInfo[bBankSzefterem][4] = Rand(1, 9);

	ServerInfo[sBankPenz][0] = Rand(10000000, 20000000);
	//ServerInfo[sBankrob] = (gettime() + (30 * 60)); // félóra
	ServerInfo[sBankrob] = 0;
	gettime( PosExt( ServerInfo[sRL_Time] ) );
	FixHour( ServerInfo[sRL_Time][0] );
	SetWorldTime( (ServerInfo[sRL_Time][0] + IDO_ELTOLODAS) );
	ServerInfo[sNapszakForce] = false;
	
	CreateDynamic3DTextLabel("(( /vizsga ))", COLOR_MKEK, 2334.5764, -1991.8934, 13.5435, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

	LoadCameras();

	printf("Heapspace: %i kilobytes", heapspace() / 1024);
	printf("Szerver: Betoltesi ido: %dms", tickcount() - start);
	for(new ca=0;ca<MAX_VEHICLES;ca++)
	{
		if(vInfo[ca][vApben] == 1 && GetVehicleVirtualWorld(ca) == 0)
		{
			SetVehicleVirtualWorld(ca,AP_VW);
		}
	}
	return 1;
}
stock FixHour( &hour )
{
	if(hour < 0) hour = (hour + 24);
	else if(hour > 23) hour = (hour - 24);
	return true;
}

task UpdateIphone[60000]()
{
	new Hour, Minute;
	gettime(Hour, Minute);
	new str[64];
	format(str,sizeof(str),"4G________________%02d:%02d",Hour,Minute);
	TextDrawSetString(g_TextDraw[td_iPhone][18], str);
	format(str,sizeof(str),"%02d:%02d",Hour,Minute);
	TextDrawSetString(g_TextDraw[td_iPhone_Clock][0], str);
	TextDrawSetString(g_TextDraw[td_iPhone][19], str);

	new Year, Month, Day;
	getdate(Year, Month, Day);
	format(str,sizeof(str),"%s, %02d %d",GetMonth(Month), Day, Year);
	TextDrawSetString(g_TextDraw[td_iPhone][20], str);
	TextDrawSetString(g_TextDraw[td_iPhone_Clock][1], str);
	ActualizarTiempo();
	return 1;
}

stock ActualizarTiempo()
{
 	new weather[64],idwea;
	GetServerVarAsString("weather", weather, sizeof(weather));
	idwea = strval(weather);
	if(idwea >= 0 && idwea <= 7) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Napos");
	else if(idwea == 8) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Viharos");
	else if(idwea == 9) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"KÖdös");
	else if(idwea == 10) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Napos");
	else if(idwea == 11) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Meleg");
	else if(idwea >= 12 && idwea <= 15) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Aburro");
	else if(idwea == 16) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Esõs");
	else if(idwea >= 17 && idwea <= 18) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Meleg");
	else if(idwea == 19) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Sand");
	else if(idwea == 20) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Ködös");
	else if(idwea == 21) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Nagyon sötét");
	else if(idwea == 22) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Nagyon sötét");
	else if(idwea >= 23 && idwea <= 26) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Orange");
	else if(idwea >= 27 && idwea <= 29) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Sunny");
	else if(idwea >= 30 && idwea <= 32) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Dark");
	else if(idwea == 33) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Dark");
	else if(idwea == 34) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Blue");
	else if(idwea == 35) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Marron");
	else if(idwea >= 36 && idwea <= 38) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Brillant");
	else if(idwea == 39) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Very brillant");
	else if(idwea >= 40 && idwea <= 42) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Blue/Purple");
	else if(idwea == 43) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Toxic");
	else if(idwea == 44) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Black");
	else if(idwea == 45) TextDrawSetString(g_TextDraw[td_iPhone_Time][0],"Black");
	return 1;
}

stock GetMonth(Month)
{
    new MonthStr[15];
    switch(Month)
    {
        case 1:  MonthStr = "January";
        case 2:  MonthStr = "February";
        case 3:  MonthStr = "March";
        case 4:  MonthStr = "April";
        case 5:  MonthStr = "May";
        case 6:  MonthStr = "June";
        case 7:  MonthStr = "July";
        case 8:  MonthStr = "Agoust";
        case 9:  MonthStr = "September";
        case 10: MonthStr = "October";
        case 11: MonthStr = "November";
        case 12: MonthStr = "Dicember";
    }
    return MonthStr;
}


public OnGameModeExit()
{
    //Seifader_OnExit();
	return 1;
}

public OnQueryError( errorid, error[], callback[], query[], connectionHandle )
{
	//printf("%d | %s | %s | %d", errorid, error, callback, connectionHandle);
    new sqlerror[128];
	if(errorid == 1062)
		format(sqlerror, sizeof(sqlerror), "MySQL Hiba történt! Részletek a logban (Duplikáció #%d)", errorid);
	else
	    format(sqlerror, sizeof(sqlerror), "MySQL Hiba történt! Részletek a logban (#%d)", errorid);

	AdminUzenetEx(COLOR_LIGHTRED, 1, sqlerror);
	print(sqlerror);

	if(errorid == 2003)
	{
		AdminUzenetEx(COLOR_MKEK,1, "MySQL: A kapcsolat megszakadt!");
		AdminUzenetEx(COLOR_MKEK,1, "Szerver: Leállítás folyamatban!");
		print("MySQL: A kapcsolat megszakadt!");
		print("Szerver: Leállítás folyamatban!");
		SendRconCommand("exit");
		return true;
	}

	new entry[2048];
	format(entry, sizeof(entry), "[%d] %s - [query] %s\r\n", errorid, error, query);
    Log(FILE_MYSQL, entry);
    return true;
}

//pickup
//onpickup
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new i = NINCS;

	for(;++i < sizeof(BoltBot);)
	{
		if(BoltRablas[i][npcPenz] == pickupid)
		{
			DestroyDynamicPickup(BoltRablas[i][npcPenz]);
			new randomo = Rand(BOLTROBMIN, BOLTROBMAX);
			PlayerInfo[playerid][pRabolhat] = RABOLHAT;
			SCM(playerid,COL_LRED,"Legközelebb "#RABOLHAT" másodperc múlva rabolhatsz.");
			GiveMoney(playerid,randomo);
			BoltRablas[i][npcPenz] = -1;
			switch(random(100))
			{
			   case 0 .. 65:
			   {
			    SFM(playerid, COL_MKEK, "Kaptál a boltrablásból %s$,viszont a boltos riasztotta a rendõrséget!", FN(randomo, 0, '.'));
			   	new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid, x,y,z);
				foreach(Player, id)
				{
					if(PlayerInfo[id][pDuty][0] && PlayerInfo[id][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[id][pFrakcio] == FRAKCIO_KATONA)
					{
						SendClientMessage(id, RED, "[Központ]: {1E90FF}Figyelem minden egységnek. Boltrablás történt,helyszín betáplálva a GPS-be!");
						SetPlayerCheckpoint(id, x, y, z, 5.0);
					}
				}
			   }
			    case 66 .. 100:
			    {
			        SFM(playerid, COL_MKEK, "Kaptál a boltrablásból %s$t!", FN(randomo, 0, '.'));
			    }
	   		}
			return true;
		}
	}

	i = NINCS;
	for(;++i < MAX_CEG;)
	{
		if(CegInfo[i][cVan] && CegInfo[i][cPickup] == pickupid)
		{
			new str[128];
			if(CegInfo[i][cTulajID] != NINCS)
				format(str, 128, "~w~%s~w~~n~Tulaj: %s~n~Belépõ: ~g~%s$~n~Belépézhez: /enter", CegInfo[i][cNev], CegInfo[i][cTulaj], FN(CegInfo[i][cBelepo], 0, ','));
			else
				format(str, 128, "~w~%s~w~~n~A cég eladó!~n~Ára: ~g~%s$~n~Megvétel: /cég vesz", CegInfo[i][cNev], FN(CegInfo[i][cAr], 0, ','));

			GameTextForPlayer(playerid, str, 3000, 3);
			return true;
		}
	}

	if(IsJob(playerid, MUNKA_FARMER) && ((vInfo[PlayerInfo[playerid][pJarmuben]][vModel] == 532) || (vInfo[PlayerInfo[playerid][pJarmuben]][vModel] == 531)))
	{
	    i = NINCS;
		for(;++i < sizeof(Aratas_Objectek);)
		{
			if(pickupid == AratasInfo[i][aratasPickup])
			{
				if(!Aratas_Objectek[i][aratasLearatva])
				{
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 532)
					{
						PlayerInfo[playerid][pFarmernel]++;
						DestroyDynamicObject(AratasInfo[i][aratasObject]);
						Aratas_Objectek[i][aratasLearatva] = true;
					}
				} else {
					if((GetVehicleModel(GetPlayerVehicleID(playerid)) == 531) && (GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid))) == 610))
					{
						PlayerInfo[playerid][pFarmernel]++;
						AratasInfo[i][aratasObject] = CreateDynamicObject(Aratas_Objectek[i][aratasID], Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ], Aratas_Objectek[i][aratasRX], Aratas_Objectek[i][aratasRY], Aratas_Objectek[i][aratasRZ]);
						Aratas_Objectek[i][aratasLearatva] = false;
					}
				}

				if(PlayerInfo[playerid][pFarmernel] == 30)
				{
					new l = -1;
					for(;++l < PlayerInfo[playerid][pFarmernel];)

					PlayerInfo[playerid][pFarmernel] = 0;
					CallLocalFunction("OnPlayerFinishJob", "iii", playerid, MUNKA_FARMER, Rand(FARMFIZUMIN,FARMFIZUMAX));
				}
				DestroyDynamicPickup(AratasInfo[i][aratasPickup]);
				AratasInfo[i][aratasPickup] = CreateDynamicPickup(1007, 14, Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ] + 0.8, 0);
				break;
			}
		}
		return true;
	}

	foreach(Player, utzar)
	{
		if(!Belepve(utzar))
			continue;

		if(!Utzarak[utzar][uVan]) continue;

    	if(pickupid == Utzarak[utzar][uPickup][0])
		{
		    new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];

		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);

	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);

			Utzarak[utzar][uPickup][0] = CreateDynamicPickup(1007, 14, X+(1.5*dis1), Y+(1.5*dis2), Z, 0);
    	    break;
    	}
    	else if(pickupid == Utzarak[utzar][uPickup][1])
		{
	    	new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];

		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);

	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);

			Utzarak[utzar][uPickup][1] = CreateDynamicPickup(1007, 14, X-(1.5*dis1), Y-(1.5*dis2), Z, 0);
    	    break;
    	}
	}

	i = NINCS;
	for(;++i < MAX_HOUSE;)
	{
		if(HazInfo[i][pickup] == pickupid)
		{
			if(!PlayerInfo[playerid][phazatnez])
			{
				PlayerInfo[playerid][phazatnez] = true;
				nformat(str,64,"~w~Házszám: ~r~%d~w~~n~Tulajdonos: ~n~~g~%s",i,HazInfo[i][tulaj]);
				GameTextForPlayer(playerid,str,2000,5);
				break;
			}
		}
	}

	if(!PlayerInfo[playerid][pbemehet] || PlayerInfo[playerid][pjail] == 1)
		return true;

	i = NINCS;
	for(;++i < MAX_AJTO;)
	{
		if((pickupid == AjtoInfo[i][abepickup]) || (pickupid == AjtoInfo[i][abepickupk]))
		{
			if(!AjtoInfo[i][anyitva]) return SCM(playerid, COL_LRED, "Az ajtó jelenleg zárva van!");
			if(PlayerInfo[playerid][pTog][14] == true) return false;
			if(IsPlayerInAnyVehicle(playerid))
			    if(!AjtoInfo[i][ajarmu])
			        return SCM(playerid, COL_LRED, "Az ajtón csak gyalog lehet bemenni!");

			AjtoTeleport(playerid, 0, i);
			break;
		} else if((pickupid == AjtoInfo[i][akipickup]) || (pickupid == AjtoInfo[i][akipickupk]))
		{
		    if(PlayerInfo[playerid][pTog][14] == true) return false;
			AjtoTeleport(playerid, 1, i);
			break;
		}
	}
	return true;
}

timer HazTextDrawEltuntetes[1000](playerid, houseid)
{
	#pragma unused houseid
	PlayerInfo[playerid][phazatnez] = false;
	return true;
}

public OnPlayerEnterCheckpoint(playerid)
{
	new vid, car;
	if(IsPlayerInAnyVehicle(playerid))
	{
		car = GetPlayerVehicleID(playerid);
		vid = JarmuID(car, playerid);
	}
	if(PlayerInfo[playerid][pRendelese] != NINCS && IsPlayerInRangeOfPoint(playerid, 5.0, PlayerInfo[playerid][pRendelesPoz][0],PlayerInfo[playerid][pRendelesPoz][1],PlayerInfo[playerid][pRendelesPoz][2]))
	{
		switch(PlayerInfo[playerid][pRendelese])
		{
			case 1:	{ SetArmor(playerid, MAX_ARMOR); }
			case 2:	{ PlayerInfo[playerid][pMergezoLovedekek] = 10; }
			default:	{	GiveWeapon(playerid,HitmanFegyverek[PlayerInfo[playerid][pRendelese]][1][0],HitmanFegyverek[PlayerInfo[playerid][pRendelese]][2][0]); }
		}
		SCM(playerid,COL_VZOLD,"Felvetted a megrendelt csomagod!");
		PlayerInfo[playerid][pRendelesPoz][0] = 0;	PlayerInfo[playerid][pRendelesPoz][1] = 0;	PlayerInfo[playerid][pRendelesPoz][2] = 0; 	PlayerInfo[playerid][pRendelese] = NINCS;
	}
	if(TrezorAD[playerid] == 1) //puncika
	{
		if(Trezor[playerid] == 1)
		{
			defer MunkaTimer[15000](playerid);
			funkcio[playerid] = 2;
			SCM(playerid,COL_LRED,"ATM feltöltése folyamatban..");
			TogglePlayerControllable(playerid, false);
		}
	}
	DisablePlayerCheckpoint(playerid);
	switch(PlayerInfo[playerid][pCP])
	{
	    case CP_ARU:
		{
			if(IsPlayerInRangeOfPoint(playerid,15.0,  MunkaCP[playerid][0],MunkaCP[playerid][1],MunkaCP[playerid][2]))
			{
				if(vInfo[vid][vMunka] == MUNKA_ARU)
				{
					Freeze(playerid);
					SCM(playerid,COL_VZOLD,"Lepakolod az árút..");
					Cselekves(playerid,"lepakolja az árút..");
					defer AruLe[5000](playerid, MUNKA_ARU);
					return true;
				}
			}
			else return SetCP(playerid, MunkaCP[playerid][0],MunkaCP[playerid][1],MunkaCP[playerid][2], 5.0, PlayerInfo[playerid][pCP]);
		}
		case CP_ARU2:
		{
			if(IsPlayerInRangeOfPoint(playerid,15.0,  2338.1218,-2071.3381,13.5538))
			{
				if(vInfo[vid][vMunka] == MUNKA_ARU)
				{
					Freeze(playerid);
					defer AruFel[15000](playerid, MUNKA_ARU);
					Cselekves(playerid, "felpakolja az árút..");
					return true;
				}
			}
		}
		case CP_PILOTA:
		{
			if(IsPlayerInRangeOfPoint(playerid,15.0,  MunkaCP[playerid][0],MunkaCP[playerid][1],MunkaCP[playerid][2]))
			{
				if(vInfo[vid][vMunka] == MUNKA_PILOTA)
				{
					Freeze(playerid);
					SCM(playerid,COL_VZOLD,"Lepakolod az árút..");
					Cselekves(playerid,"lepakolja az árút..");
					defer AruLe[20000](playerid, MUNKA_PILOTA);
					return true;
				}
			}
			else return SetCP(playerid, MunkaCP[playerid][0],MunkaCP[playerid][1],MunkaCP[playerid][2], 5.0, PlayerInfo[playerid][pCP]);
		}
		case CP_PILOTA2:
		{
			if(IsPlayerInRangeOfPoint(playerid,15.0,  1617.9362,-2628.5530,13.5469))
			{
				if(vInfo[vid][vMunka] == MUNKA_PILOTA)
				{
					Freeze(playerid);
					defer AruFel[20000](playerid, MUNKA_PILOTA);
					Cselekves(playerid, "felpakolja az árút..");
					return true;
				}
			}
		}
		case CP_DROG:
		{
			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Szevasz testvér, megszereztem a cuccot!");
			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Na, örülök, hogy segíthettem, bro', szólj ha kell még valami cucc!");
			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Na, cso cso");

			SCM(playerid, COL_MKEK, "A telefont lerakták!");
			SCM(playerid, COL_MKEK, "5db drogmag hozzáadva!");

			PlayerInfo[playerid][pDrogMag][ PlayerInfo[playerid][pDrogMit][1] - 1 ] += 5;

			PlayerInfo[playerid][pDrogMit][1] = 0;
			return true;
		}
		case CP_VAS:
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, CPbe[playerid][0], CPbe[playerid][1], CPbe[playerid][2]))
			{
				CPbe[playerid][0] = 0;
				CPbe[playerid][1] = 0;
				CPbe[playerid][2] = 0;
				SCM(playerid, COL_MKEK, "Elkezdtél vasat gyujteni!");

				Freeze(playerid);
				ClearAnimations(playerid, 1);
				LoopingAnim(playerid, "BOMBER", "BOM_Plant_Loop", 4.0, 1, 0, 0, 1, 0);

				PlayerInfo[playerid][pFoglalt] = true;
				PlayerInfo[playerid][pCP] = 0;
				defer MuveletTimer[15000](playerid, T_VAS, NINCS, NINCS);
			}
		}
		case CP_GPS:
		{
			SCM(playerid, COL_VZOLD, "GPS pozíció törölve!");
			PlayerInfo[playerid][pCP] = 0;
		}
		case CP_KUKA:
		{
			if(vid && vInfo[vid][vModel] == 408)
			{
			    new i = PlayerInfo[playerid][pKukaIndex];
				if(Kuka[i][kHasznalva])
				{
					SCM(playerid, COL_LRED, "Kis türelmet kérek!");

					new Float:opos[4];

					GetDynamicObjectPos(Kuka[i][kID], opos[0], opos[1], opos[2]);
					Kuka[i][kCP][playerid] = NINCS;

					new Float:vpos[4];
					GetVehiclePos(GetPlayerVehicleID(playerid), vpos[0], vpos[1], vpos[2]);
					GetVehicleZAngle(GetPlayerVehicleID(playerid), vpos[3]);
					GetVehicleXYBehind(vpos[0], vpos[1], vpos[2], vpos[3], 4.3);
					SetDynamicObjectPos(Kuka[i][kID], vpos[0], vpos[1], vpos[2] - 0.9);
					SetDynamicObjectRot(Kuka[i][kID], 0.0, 0.0, vpos[3]);

					Freeze(playerid);
					Kuka[i][kPlayerid] = playerid;
					Kuka[i][kFazis] = 1;
					PlayerInfo[playerid][pCP] = 0;
					MoveDynamicObject(Kuka[i][kID], vpos[0], vpos[1], vpos[2] + 0.76000, 1.0, -120.0, 0.0, vpos[3]);
				}
			}
		}
		case CP_KAMION_KEZD:
		{
			if(!IsPlayerInAnyTruck(playerid))		return SCM(playerid, COL_LRED, "Hova lett a kamion?!");
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) != 578))		return SCM(playerid, COL_LRED, "Hova lett a pótkocsi?!");

			Freeze(playerid);
			GameTextForPlayer(playerid, "RAKODÁS", 5000, 1);
			defer Berakodas(playerid);

			PlayerInfo[playerid][pKCheckpointS] = NINCS;
			CheckpointBeallitas(playerid,MUNKA_KAMION);
			return true;
		}
		case CP_KAMION_CEL:
		{

			if(!IsPlayerInAnyTruck(playerid))	return SCM(playerid, COL_LRED, "Hova lett a kamion?!");
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) != 578))	return SCM(playerid, COL_LRED, "Hova lett a pótkocsi?!");
			SCM(playerid, COL_MKEK, "Leadtad az árut!");

			Freeze(playerid);
			GameTextForPlayer(playerid, "KIRAKODÁS", 5000, 1);
			defer Kirakodas(playerid);

			PlayerInfo[playerid][pKCheckpointC] = NINCS;
			PlayerInfo[playerid][pCP] = 0;
			return true;

		}
		case CP_UTTISZTITO:
		{

			if(vInfo[vid][vModel] == 574 && vInfo[vid][vMunka] == MUNKA_UTTISZTITO)
			{
				if(IsPlayerInRangeOfPoint(playerid,15.0,  MunkaCP[playerid][0],MunkaCP[playerid][1],MunkaCP[playerid][2]))
				{
					new kerekites = Kerekites(floatround(PlayerInfo[playerid][pTavolsag]), SZAZAS);
					if(3 + kerekites > 17)
						kerekites = Rand(UTTISZTITOMIN, UTTISZTITOMAX);

					CheckpointBeallitas(playerid,MUNKA_UTTISZTITO);
					CallLocalFunction("OnPlayerFinishJob", "iii", playerid, MUNKA_UTTISZTITO, kerekites);
				}
				else return SetCP(playerid, MunkaCP[playerid][0],MunkaCP[playerid][1],MunkaCP[playerid][2], 5.0, PlayerInfo[playerid][pCP]);
			}

		}
		case CP_MOWER:
		{

			if(vInfo[vid][vModel] == 572 && vInfo[vid][vMunka] == MUNKA_MOWER)
			{
				if(IsPlayerInRangeOfPoint(playerid,15.0,  MunkaCP[playerid][0],MunkaCP[playerid][1],MunkaCP[playerid][2]))
				{
					new kerekites = Kerekites(floatround(PlayerInfo[playerid][pTavolsag]), SZAZAS);
					if(3 + kerekites > 17)
						kerekites = Rand(MOWERMIN, MOWERMAX);

					CheckpointBeallitas(playerid,MUNKA_MOWER);
					CallLocalFunction("OnPlayerFinishJob", "iii", playerid, MUNKA_MOWER, kerekites);
				}
				else return SetCP(playerid, MunkaCP[playerid][0],MunkaCP[playerid][1],MunkaCP[playerid][2], 5.0, PlayerInfo[playerid][pCP]);
			}

		}

		case CP_VIZSGA:
		{
			if(!PlayerInfo[playerid][pJarmuben])
			{
				SetPlayerCheckpoint(playerid, PosExt( Vizsga_Kamion[ PlayerInfo[playerid][pVizsga][0] ] ), 3.5);
				PlayerInfo[playerid][pCP] = CP_VIZSGA;

				SCM(playerid, COL_LRED, "Hová tûnt a vizsga jármû??");
				return true;
			}
			switch( PlayerInfo[playerid][pVizsga][1] )//vizsga típus
			{
				case VIZSGA_KOCSI, VIZSGA_MOTOR: //kocsi, motor
				{
					if(IsPlayerInRangeOfPoint(playerid, 15.0, PosExt(Vizsga_Alap[PlayerInfo[playerid][pVizsga][0]])))
					{
						if((PlayerInfo[playerid][pVizsga][0] + 1) < sizeof(Vizsga_Alap))
						{
							PlayerInfo[playerid][pVizsga][0]++;
							SetPlayerCheckpoint(playerid, PosExt( Vizsga_Alap[PlayerInfo[playerid][pVizsga][0]] ), 3.5);
						} else {
							new str[512];
							format(str, sizeof(str), "%s"#COL_VZOLD" %s "#COL_FEHER"%s%s"#COL_MKEK"%d"#COL_FEHER"%s%s",
							""#COL_FEHER"Sikeres vizsgát tettél", VizsgaLista[PlayerInfo[playerid][pVizsga][1]][0] ,"vezetésbol.\n",
							"Az engedélyed ", VizsgaLista[ PlayerInfo[playerid][pVizsga][1] ][4][0], " napig((óráig)) érvényes.\n",
							"Köszönjük, hogy te is a Los Angeles Autóiskolát választottad!\n");
							Info_Dialog(playerid, ""#COL_FEHER"Sikeres vizsga - Los Angeles Autósiskola", str);

							SetVehicleToRespawn( vInfo[ PlayerInfo[playerid][pJarmuben] ][vID] );
							PlayerInfo[playerid][pEngedely][ PlayerInfo[playerid][pVizsga][1] ] = VizsgaLista[ PlayerInfo[playerid][pVizsga][1] ][4][0];//vizsga érvényességi ideje

							PlayerInfo[playerid][pVizsga][0] = 0;
							PlayerInfo[playerid][pVizsga][1] = 0;
							PlayerInfo[playerid][pVizsga][2] = 0;
							PlayerInfo[playerid][pCP] = 0;
						}
					}
					else
					{
						SCM(playerid,COL_LRED,"Remélem hogy nem bugot akartál kihasználni..");
						PlayerInfo[playerid][pVizsga][0] = 0;
						PlayerInfo[playerid][pVizsga][1] = 0;
						PlayerInfo[playerid][pVizsga][2] = 0;
						PlayerInfo[playerid][pCP] = 0;
						return 1;
					}
				}
				case VIZSGA_KAMION:
				{
					if(IsPlayerInRangeOfPoint(playerid, 15.0, PosExt(Vizsga_Kamion[PlayerInfo[playerid][pVizsga][0]])) || (IsPlayerInRangeOfPoint(playerid, 15.0, PosExt(Vizsga_Kamion[PlayerInfo[playerid][pVizsga][1]]))))
					{
						if(!IsPlayerInAnyTruck(playerid)) { SCM(playerid, COL_LRED, "Ha kamionra vizsgázol,miért nem abban ülsz?"); PlayerInfo[playerid][pVizsga][0] = 0; PlayerInfo[playerid][pVizsga][1] = 0; PlayerInfo[playerid][pVizsga][2] = 0;	PlayerInfo[playerid][pCP] = 0; return 1; }
						if((PlayerInfo[playerid][pVizsga][0] + 1) < sizeof(Vizsga_Kamion))
						{
							//SCM(playerid, COL_VZOLD, "Ellenörzopont rendben!");
							PlayerInfo[playerid][pVizsga][0]++;
							SetPlayerCheckpoint(playerid, PosExt( Vizsga_Kamion[ PlayerInfo[playerid][pVizsga][0] ] ), 5.0);

						} else {

							new str[512];
							format(str, sizeof(str), "%s"#COL_VZOLD" %s "#COL_FEHER"%s%s%s%s",
							""#COL_FEHER"Sikeres vizsgát tettél", VizsgaLista[PlayerInfo[playerid][pVizsga][1]][0] ,"vezetésbol.\n",
							"Az engedélyed, ", VizsgaLista[PlayerInfo[playerid][pVizsga][1]][4][0], " érvényes.\n",
							"Köszönjük, hogy te is a Los Angeles Autóiskolát választottad!\n");
							Info_Dialog(playerid, ""#COL_FEHER"Sikeres vizsga - Los Angeles Autósiskola", str);

							SetVehicleToRespawn( vInfo[ PlayerInfo[playerid][pJarmuben] ][vID] );
							PlayerInfo[playerid][pEngedely][ PlayerInfo[playerid][pVizsga][1] ] = VizsgaLista[ PlayerInfo[playerid][pVizsga][1] ][4][0];//vizsga érvényességi ideje

							PlayerInfo[playerid][pVizsga][0] = 0;
							PlayerInfo[playerid][pVizsga][1] = 0;
							PlayerInfo[playerid][pVizsga][2] = 0;
							PlayerInfo[playerid][pCP] = 0;
						}
					}
					else
					{
						SCM(playerid,COL_LRED,"Remélem hogy nem bugot akartál kihasználni..");
						PlayerInfo[playerid][pVizsga][0] = 0;
						PlayerInfo[playerid][pVizsga][1] = 0;
						PlayerInfo[playerid][pVizsga][2] = 0;
						PlayerInfo[playerid][pCP] = 0;
						return 1;
					}
				}
			}
			return true;
		}
		case CP_LENYOMOZ:
		{
			SCM(playerid, COL_MKEK, "Cél koordináta törölve!");
			PlayerInfo[playerid][pCP] = 0;
		}
	}
	return true;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(extraid == SKIN_VALASZTAS)
	{
	    if(response)
	    {
			if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < 100)	return SCM(playerid, COL_LRED, "Egy ruha ára 100$, neked nincs ennyi készpénzed!");
			else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < 100) return SCM(playerid, COL_LRED,"Nincs 100$ a bankszámládon!");
			PenzHozzaad(playerid, -100);
		    SetSkin(playerid, modelid,true);
		    PlayerInfo[playerid][pskin] = modelid;
			SFM(playerid, COL_VZOLD, "Vettél egy új ruhát! (( SkinID: %d ))", modelid);
			CegPenz(BIZ_RUHA, 100);

			return true;
		}
	    else
			{ SCM(playerid, COL_MKEK, "Kiléptél a vásárlásból! További kellemes napot!"); return true; }
	}
	if(extraid == FBI_SKIN_VALASZTAS)
	{
	    if(response)
	    {
		    SetSkin(playerid, modelid,false);
			return true;
		}
	}
	if(extraid == FK_SKIN_VALASZTAS)
	{
		if(response)
		{
			PlayerInfo[playerid][pDutySkin] = modelid;
  			SetPlayerSkin(playerid,modelid);
			SFM(playerid, COL_VZOLD, "Vettél egy új frakcióruhát! (( SkinID: %d ))", modelid);

		} else
			return SCM(playerid, COL_MKEK, "További szép napot!");
	}
	return true;
}

timer JointTimer[5000](playerid, process, param)
{
	if(!Belepve(playerid))
		return true;

	switch( process )
	{
		case 1:
		{
			if(param == JOINT_BONG )
				Cselekves(playerid, "elõveszi a bongját");
			else if(param == JOINT_PIPA )
				Cselekves( playerid, "elõveszi a pipáját");
			else
				Cselekves( playerid, "elõveszi a cigipapírt");
		}
		case 2:
		{
			if(param == JOINT_BONG )
				Cselekves(playerid, "megtölti a bongot vízzel");
			else if(param == JOINT_PIPA )
   			{
				Cselekves( playerid, "beletömi a mariskát a pipába");
				PlayerInfo[playerid][pMarihuana] -= floatround(PlayerInfo[playerid][pJoint][3] / 2);
			}
			else
			{
				PlayerInfo[playerid][pCuccok][ BL_PAPIR ]--;
				Cselekves(playerid, "letépett egy cigipapírt");
			}
		}
		case 3:
		{
			if(param == JOINT_BONG )
   			{
				Cselekves(playerid, "beleszórja a mariskát a bongba");
				PlayerInfo[playerid][pMarihuana] -= PlayerInfo[playerid][pJoint][3];
   			}
			else if(param == JOINT_PIPA )
			{
				Cselekves( playerid, "beleszór még egy kis füvet");
				PlayerInfo[playerid][pMarihuana] -= floatround(PlayerInfo[playerid][pJoint][3] / 2);
			}
			else
			{
				PlayerInfo[playerid][pCuccok][ BL_CIGI ]--;
				Cselekves(playerid, "szétmorzsolt egy cigit és betekerte.");
				PlayerInfo[playerid][pMarihuana] -= PlayerInfo[playerid][pJoint][3];
			}
		}
		case 4:
		{
			if(param == JOINT_BONG )
				Cselekves(playerid, "meggyújtja a bongot");
			else if(param == JOINT_PIPA )
				Cselekves( playerid, "ránéz a pipára");
			else
			{
				Cselekves(playerid, "meggyújtott egy cigit");
			}
		}
		case 5, 6:
		{
			if(PlayerInfo[playerid][pJoint][2] > gettime())
				return SCM(playerid, COL_LRED, "Túl gyorsan szívsz.");

			if(process == 5)
			{
				PlayerInfo[playerid][pJoint][0] = 15;
				PlayerInfo[playerid][pJoint][1] = false;

			}
			else if(PlayerInfo[playerid][pJoint][0] > 0)
			{
				PlayerInfo[playerid][pJoint][0]--;
				if(!PlayerInfo[playerid][pJoint][0])
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SCM(playerid, COL_MKEK, "Elszívtad a cigit.");
				}
				else if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY)
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);

				return false;
			}

			Szukseglet(playerid, 5.0);
		 	SetArmor(playerid, (PlayerInfo[playerid][pPancel] + 2.0));

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			LoopingAnim(playerid, "GANGS", "drnkbr_prtl_F", 4.0, 0, 1, 1, 1, -1);

		//	SetPlayerDrunkLevel(playerid, ((!(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 300));
			SetPlayerWeather(playerid, 177);
			defer Eltuntetes[15000](playerid);


			PlayerInfo[playerid][pJoint][2] = (gettime() + 4);
			Cselekves(playerid, "szívott egy slukkot.");

			if(ServerInfo[sRL_Time][0] > 19 || ServerInfo[sRL_Time][0] < 8)
				return true;

			return true;
		}
	}

	if(process < 5)
		defer JointTimer[5000](playerid, (process + 1), param);

	return true;
}
stock Float:floatrand(Float:min, Float:max)
{
	new imin = floatround(min);
	return floatdiv(float(random((floatround(max)-imin)*100)+(imin*100)),100.0);
}

timer playSound[1000](playerid, soundid, Float:x, Float:y, Float:z)
{
	if(playerid == NINCS)
	{
	    foreach(Player, i)
	        PlayerPlaySound(i, soundid, x, y, z);
	}
	else
	{
	    PlayerPlaySound(playerid, soundid, x, y, z);
	}
}

timer hideBanyaProgress[3000](playerid)
{
    HidePlayerProgressBar(playerid, BanyaBar[playerid]);
    BanyaBarTimerStat[playerid] = false;
}
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	#define HOLDING(%0) \
		((newkeys & (%0)) == (%0))

	#define PRESSED(%0) \
		(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

	#define RELEASED(%0) \
		(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !ZuzoGepStat[zDolgozik] && IsPlayerInAnyVehicle(playerid) && PRESSED(KEY_CROUCH))
	{
	    new kocsi = GetPlayerVehicleID(playerid);
	    if(GetVehicleDistanceFromPoint(kocsi, -1867.8721, -1673.3206, 21.6576) < 2.5)
	    {
		    if(GetSzikla(kocsi) > 0)
		    {
				ZuzoGepStat[zKovekOssz] = GetSzikla(kocsi);
				ZuzoGepStat[zKovekFolyamatban] = 0;
				ZuzoGepStat[zPlayer] = playerid;
				ZuzoGepStat[zTimer] = repeat t_Zuzogep( kocsi );
	            ZuzoGepStat[zDolgozik] = true;
	            ZuzoGepStat[zBezuzva] = 0;

				MoveDynamicObject(ZuzoGepStat[zLezaro], -1864.56726, -1669.87000, 21.48400 + 0.0001, 0.0001, 0.00000, 270.00000, 90.00000);
			}
			return 1;
		}
	}

    if(Billentyu[playerid] != NINCS && newkeys != 0)
	{
	    if(BillentyuHatra[playerid] == 15) Cselekves(playerid, "leszedi a burkolatokat..");
	    else if(BillentyuHatra[playerid] == 10) Cselekves(playerid, "összeköti a vezetéteket..");
	    else if(BillentyuHatra[playerid] == 5) Cselekves(playerid, "visszarakja a burkolatot..");
	    new	kocsi = GetPlayerVehicleID(playerid);
	    stop PlayerTimers[playerid][PT_LOPAS];
		KocsiLopas(playerid,kocsi,newkeys);
		return 1;
	}
	if(PRESSED(KEY_FIRE) && g_KovetVisz[playerid][1] != NINCS && !IsPlayerInAnyVehicle(playerid))
	{
	    new car = GetClosestVehicle(playerid);
		if(GetVehicleModel(car) == 478 && GetDistanceToVehicle(playerid, car) < 7.0)
		{
		    if(SziklaFelrak(car))
			{
			    DestroyObject(g_KovetVisz[playerid][1]);
			    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			    Cselekves(playerid, "felrakta a követ a platóra");
			    g_KovetVisz[playerid][0] = NINCS;
			    g_KovetVisz[playerid][1] = NINCS;
			    return 1;
			}
			else
			    SCM(playerid, COL_LRED, "Nem fér fel több");
		}
		else
  			SCM(playerid, COL_LRED, "Nincs a közelben kõ hordására szolgáló jármû");
	}
	if(Focizik[playerid] == 1)
	{
    	new
	    	tick = GetTickCount(),
			dif;
    	if (PRESSED(KEY_HANDBRAKE))
			pLastTick[playerid] = tick;
		else if (RELEASED(KEY_HANDBRAKE))
		{
	    	dif = tick - pLastTick[playerid];
	    	pLastTick[playerid] = -1;
	    	if(dif < 2000)
	    	{
		    	new
		        	Float:ox, Float:oy, Float:oz,
		        	Float:x, Float:y, Float:z;
		    	GetBallPos(ox, oy, oz);
		    	GetPlayerPos(playerid, x, y, z);
		    	if(IsPlayerInRangeOfPoint(playerid, 1.2, ox, oy, z) && floatabs(oz - z) < 1.8)
		    	{
		        	new
			            Float:speed,
			            Float:angle,
			            Float:vx, Float:vy, Float:vz;

					if(dif > 1000)
				    	dif = 2000 - dif;

			   		speed = (float(dif + 400) / (1000)) * 20.0;

		        	if(BallHolder != -1)
		        	{
				        DestroyBall();
				        CreateBall();
				        SetObjectPos(Ball, ox, oy, oz);
				        BallHolder = -1;
					}

			        GetPlayerFacingAngle(playerid, angle);
			        vx = speed * floatsin(-angle, degrees),
			        vy = speed * floatcos(-angle, degrees);
			        vz = /*(newkeys & KEY_SECONDARY_ATTACK) ? (speed / 1.3) :*/ (speed / 5.2);

			        /*GetPlayerCameraFrontVector(playerid, vx, vy, vz);
			        vx *= speed;
			        vy *= speed;
			        vz *= speed * 1.2;
			        if(vz < 0.0)
			            vz = 0.0;*/

					PHY_SetObjectVelocity(Ball, vx, vy, vz);

					if(oz > BallSpawn[2] + (1.0 - 0.875))
				    	ApplyAnimation(playerid, "WAYFARER", "WF_Fwd", 4.0, 0, 0, 0, 0, 0);
					else if(dif > 300)
						ApplyAnimation(playerid, "FIGHT_D", "FightD_1", 4.1, 0, 1, 1, 0, 0);

					PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);

				//	LastTouch = playerid;
				}
			}
		}
		if (PRESSED(KEY_WALK))
			pLastTick[playerid] = tick;
		else if (RELEASED(KEY_WALK))
		{
		    dif = tick - pLastTick[playerid];
		    pLastTick[playerid] = -1;
		    if(dif < 2000)
		    {
			    new
			        Float:ox, Float:oy, Float:oz,
			        Float:x, Float:y, Float:z;
			    GetBallPos(ox, oy, oz);
			    GetPlayerPos(playerid, x, y, z);
			    if(IsPlayerInRangeOfPoint(playerid, 1.2, ox, oy, z) && floatabs(oz - z) < 1.8)
			    {
			        new
			            Float:speed,
			            Float:angle,
			            Float:vx, Float:vy, Float:vz;

					if(dif > 1000)
					    dif = 2000 - dif;
			        speed = (float(dif + 400) / (1000)) * 15.0;

			        if(BallHolder != -1)
			        {
				        DestroyBall();
				        CreateBall();
				        SetObjectPos(Ball, ox, oy, oz);
				        BallHolder = -1;
				    }

			        GetPlayerFacingAngle(playerid, angle);
			        vx = speed * floatsin(-angle, degrees),
			        vy = speed * floatcos(-angle, degrees);
			        vz = speed / 1.3;
					PHY_SetObjectVelocity(Ball, vx, vy, vz);

					if(oz > BallSpawn[2] + (1.0 - 0.875))
					    ApplyAnimation(playerid, "WAYFARER", "WF_Fwd", 4.0, 0, 0, 0, 0, 0);
					else if(dif > 300)
						ApplyAnimation(playerid, "FIGHT_D", "FightD_1", 4.1, 0, 1, 1, 0, 0);
					PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);

					//LastTouch = playerid;
				}
			}
		}
	
		if (PRESSED(KEY_SECONDARY_ATTACK))
			pLastTick[playerid] = tick;
		else if (RELEASED(KEY_SECONDARY_ATTACK))
		{
		    dif = tick - pLastTick[playerid];
		    pLastTick[playerid] = -1;
		    if(dif < 2000)
		    {
			    new
			        Float:ox, Float:oy, Float:oz,
			        Float:x, Float:y, Float:z;
			    GetBallPos(ox, oy, oz);
			    GetPlayerPos(playerid, x, y, z);
			    if(IsPlayerInRangeOfPoint(playerid, 1.2, ox, oy, z) && floatabs(oz - z) < 1.8)
			    {
			        new
			            Float:speed,
			            Float:angle,
			            Float:vx, Float:vy, Float:vz;

					if(dif > 1000)
					    dif = 2000 - dif;
			        speed = (float(dif + 400) / (1000)) * 16.0;

			        if(BallHolder != -1)
			        {
				        DestroyBall();
				        CreateBall();
				        SetObjectPos(Ball, ox, oy, oz);
				        BallHolder = -1;
				    }

			        GetPlayerFacingAngle(playerid, angle);
			        vx = speed * floatsin(-angle, degrees),
			        vy = speed * floatcos(-angle, degrees);
			        vz = speed / 2.0;
					PHY_SetObjectVelocity(Ball, vx, vy, vz);

					if(oz > BallSpawn[2] + (1.0 - 0.875))
					    ApplyAnimation(playerid, "WAYFARER", "WF_Fwd", 4.0, 0, 0, 0, 0, 0);
					else if(dif > 300)
						ApplyAnimation(playerid, "FIGHT_D", "FightD_1", 4.1, 0, 1, 1, 0, 0);
					PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);

					//LastTouch = playerid;
				}
			}
		}
 	}
	if(PRESSED(KEY_YES) && BillentyuHatra[playerid] == NINCS)
	{
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    if(iPhoneStatus[playerid] != 0) return 1;
		    
			if(GetPlayerVehicleSeat(playerid))
				return SCM(playerid, COL_LRED, "Csak sofõrként tudod használni!");

			if(MunkaFolyamatban[playerid] == 1)
				return SCM(playerid,COL_LRED,"Már elkezdtél valamilyen munkafolyamatot!");

			if(PlayerInfo[playerid][pTiltasok][TILTAS_AUTO] > 0)
			{
				SFM(playerid,COL_LRED,"Nem használhatsz jármûvet még %d percig",PlayerInfo[playerid][pTiltasok][TILTAS_AUTO]/60);
				return 1;
			}
			new
				kocsi = GetPlayerVehicleID(playerid),
				jarmuidje = JarmuID(kocsi, playerid);

			if(IsABicikli(vInfo[jarmuidje][vModel]))
				return SCM(playerid, COL_LRED, "Ez egy bicikli :D Nincs benne motor!");

			if(!vInfo[jarmuidje][vUzemanyag])
				return SCM(playerid, COL_LRED, "A jármûbõl kifogyott az üzemanyag!");

			if(PlayerInfo[playerid][pmotortinditja])
				return SCM(playerid, COL_LRED, "A jármû jelenleg is indítás alatt áll!");

			if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
			{
				SetJarmu(kocsi, KOCSI_MOTOR, 0);
				SendClientMessage(playerid, COLOR_LIGHTRED, "A jármû leállítva!");
				Cselekves(playerid, "leállította a jármûvét", 1);
				vInfo[jarmuidje][vMotorelinditva] = false;
			}
			else
			{
				if(JarmuKulcs(playerid, jarmuidje))
				{
					new kocsiserules, starttime, Float:kocsielet;
					GetVehicleHealth(kocsi, kocsielet);
					if((100 - (((kocsielet - 350) / 650)) * 100) > 100)
						return SCM(playerid, COL_LRED, "A jármû állapota nem teszi lehetõvé a motor indítását!");

					kocsiserules = 1000 - floatround(kocsielet);
					starttime = 1000 + (kocsiserules * 5);
					SendClientMessage(playerid, COLOR_GREEN, "Jármû indítás...");
					defer JarmuInditas[starttime](playerid, kocsi);
					PlayerInfo[playerid][pmotortinditja] = true;
				} else
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Ehhez a jármûhöz nincs kulcsod!");
			}
		}
		#if defined KELLDWAYNE
		new fk = PlayerInfo[playerid][pFrakcio];
		if(fk != 1 && fk != 2 && fk != 3 && fk != 5 && fk != 6 && fk != 10 && fk != 12)
		{
			new Float:x,Float:y,Float:z;
			GetPlayerPos(VasarlosNPCK[0], x,y,z);
			if(IsPlayerInRangeOfPoint(playerid,5,x,y,z))
			{
			   	if(PlayerInfo[playerid][pNPCSzobaAll][0] > 0) {SFM(playerid,COL_LRED,"%d másodperc múlva vásárolhatsz újra!",PlayerInfo[playerid][pNPCSzobaAll][0]);	return 1;	}
				if(NPCFloodVedelem[playerid] > 0)	{	SFM(playerid,COL_LRED,"%d másodperc múlva beszélhetsz újra az NPCvel!",NPCFloodVedelem[playerid]);	return 1;	}
				NPCFloodVedelem[playerid] = 30;
				SendClientMessage(playerid,0x44f50aAA,"Dwayne Harrison mondja: Szevasz öreg! Mi járatban erre?");
				ShowPlayerDialog(playerid,DIALOG_NPCVASARLAS,DIALOG_STYLE_LIST,"Beszélgetés egy Idegennel","- Szevasz öreg! Semmi különös, csak egy szál cigi kellene, van nálad?\n- Csá ember, mi a pálya? Van valami jó számomra?\n- Szevasz, semmi különös.. tudod hogy megy ez manapság, mindenkitõl félni kell.","Válaszom","Mégse");
			}
		}
		#endif
	    if(iPhoneCallStatus[playerid] == 2 && iPhoneHivo[playerid] == false)
	    {
	        iPhoneCallStatus[playerid] = 3;
	        iPhoneCallStatus[callto[playerid]] = 3;
	        SendClientMessage(playerid, -1, "A kapcsolat létrejött.");
	        SendClientMessage(callto[playerid], -1, "A kapcsolat létrejött.");
	        return 1;
	    }
	    if(iPhone_CC[1][playerid] == 1 || iPhone_CC[2][playerid] == 1)
	    {
            PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        StopAudioStreamForPlayer(playerid);
	        return 1;
		}
	    if(iPhoneStatus[playerid] == 1)
	    {
	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        iPhoneStatus[playerid] = 2;
	        TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][19]);
	        TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][20]);
	        TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][21]);
	        loop(22, 26, PHONE) TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone][PHONE]);
	        loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);
	        UpdateCoordinates(playerid, MenuX[playerid], MenuY[playerid]);
	    }
	    else if(iPhoneStatus[playerid] == 2)
	    {
	        new menuid = UpdateCoordinates(playerid, MenuX[playerid], MenuY[playerid]);
	        if(menuid == 12) return PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
	        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	        iPhoneStatus[playerid] = 3;
	        TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][25]);
	        loop(1, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);
	        ShowIphoneMenu(playerid, menuid);
	    }
	}
	if(newkeys & KEY_NO)
	{
	    if(iPhoneStatus[playerid] == 1)
	    {
	        PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
	        loop(0, 22, PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][PHONE]);
		    iPhoneStatus[playerid] = 0;
	    }
	    else if(iPhoneStatus[playerid] == 2)
	    {
	        PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
	        iPhoneStatus[playerid] = 1;
	        loop(22, 26, PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][PHONE]);
	        loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone][19]);
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone][20]);
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone][21]);
	    }
	    else if(iPhoneStatus[playerid] == 3)
	    {
	        PlayerPlaySound(playerid, 1053, 0.0, 0.0, 0.0);
	        iPhoneStatus[playerid] = 2;
	        TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone][25]);
	        loop(1, PPHONE_SIZE, PPHONE) PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);
	        HideIphoneMenu(playerid);
	    }
	}
	if(newkeys & KEY_ANALOG_LEFT)
	{
	    if(iPhone_CC[0][playerid] == 1)
	    {
	        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	        PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery], Gallery[random(sizeof(Gallery))]);
	        return 1;
	    }
     	if(iPhone_CC[1][playerid] == 1)
	    {
	        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	        StopAudioStreamForPlayer(playerid);
	        PlayAudioStreamForPlayer(playerid, Radio[random(sizeof(Radio))]);
	        return 1;
	    }
	    if(iPhone_CC[2][playerid] == 1)
	    {
	        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	        StopAudioStreamForPlayer(playerid);
	        PlayAudioStreamForPlayer(playerid, Music[random(sizeof(Music))]);
	        return 1;
	    }
	    if(iPhoneStatus[playerid] == 2)
	    {
	        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
			if(MenuX[playerid] == 0)
			{
			    if(MenuY[playerid] == 0)
			    {
			        MenuX[playerid] = 2;
				    MenuY[playerid] = 3;
				    UpdateCoordinates(playerid, MenuX[playerid], MenuY[playerid]);
			        return 1;
			    }
			    MenuY[playerid] -= 1;
			    MenuX[playerid] = 2;
			    UpdateCoordinates(playerid, MenuX[playerid], MenuY[playerid]);
				return 1;
			}
	        MenuX[playerid] -= 1;
	        UpdateCoordinates(playerid, MenuX[playerid], MenuY[playerid]);
	    }
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    if(iPhoneStatus[playerid] != 0) return 1;
		    
			new vehicleidje = vInfoID[GetPlayerVehicleID(playerid)];
			if(vInfo[vehicleidje][Kozos]) SetVehicleIndex(playerid, vehicleidje, false, true), vInfo[vehicleidje][Kozos] = 0;
			else SetVehicleIndex(playerid, vehicleidje, true);
		}
	}
	if(newkeys & KEY_ANALOG_RIGHT)
	{
	    if(iPhone_CC[0][playerid] == 1)
	    {
	        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	        PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Gallery], Gallery[random(sizeof(Gallery))]);
	        return 1;
	    }
	    if(iPhone_CC[1][playerid] == 1)
	    {
	        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	        StopAudioStreamForPlayer(playerid);
	        PlayAudioStreamForPlayer(playerid, Radio[random(sizeof(Radio))]);
	        return 1;
	    }
	    if(iPhone_CC[2][playerid] == 1)
	    {
	        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
	        StopAudioStreamForPlayer(playerid);
	        PlayAudioStreamForPlayer(playerid, Music[random(sizeof(Music))]);
	        return 1;
	    }
	    if(iPhoneStatus[playerid] == 2)
	    {
	        PlayerPlaySound(playerid, 17803, 0.0, 0.0, 0.0);
			if(MenuX[playerid] == 2)
			{
			    if(MenuY[playerid] == 3)
			    {
			        MenuY[playerid] = 0;
				    MenuX[playerid] = 0;
				    UpdateCoordinates(playerid, MenuX[playerid], MenuY[playerid]);
			        return 1;
			    }
			    MenuY[playerid] += 1;
			    MenuX[playerid] = 0;
			    UpdateCoordinates(playerid, MenuX[playerid], MenuY[playerid]);
			    return 1;
			}
	        MenuX[playerid] += 1;
	        UpdateCoordinates(playerid, MenuX[playerid], MenuY[playerid]);
	    }
	    if(IsPlayerInAnyVehicle(playerid))
		{
		    if(iPhoneStatus[playerid] != 0) return 1;
		    
			new vehicleidje = JarmuID(GetPlayerVehicleID(playerid), playerid);
			if(vInfo[vehicleidje][Kozos]) SetVehicleIndex(playerid, vehicleidje, true), vInfo[vehicleidje][Kozos] = 0;
			else SetVehicleIndex(playerid, vehicleidje, false, true);
		}
	}
	if(PlayerInfo[playerid][pSzunetel])
		CallLocalFunction("OnPlayerPause", "dd", playerid, 0);
		

	if(PlayerInfo[playerid][pPisil])
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		PlayerInfo[playerid][pPisil] = false;

	}

	if(PlayerInfo[playerid][pUsingLoopingAnim] == 1)
	{
		PlayerInfo[playerid][pUsingLoopingAnim] = 0;
	}
	
	/*------------ Animok kezelése ------------*/

	if(PlayerInfo[playerid][pAnimban][0] == 1 && !IsPlayerInAnyVehicle(playerid))
		return LoopingAnim(playerid, "CRACK", "crckidle4", 4.0, 1, 0, 0, 0, 0);


	//Nitró
	if (IsPlayerInAnyVehicle(playerid))
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
		    new vehicleid = GetPlayerVehicleID(playerid);
	  		if(vInfo[vehicleid][vNOS] > 0)
			{
				if(PRESSED(KEY_FIRE))
				{
				    vInfo[vehicleid][vNOSCounter] = GetTickCount();
					AddVehicleComponent(vehicleid, 1010);
				}
				else if (RELEASED(KEY_FIRE))
				{
				    new ido = GetTickCount() - vInfo[vehicleid][vNOSCounter];
				    vInfo[vehicleid][vNOS] -= ido;
				    if(vInfo[vehicleid][vNOS] > 0)
						AddVehicleComponent(vehicleid, 1010);
					else
					{
					    vInfo[vehicleid][vNOS] = 0;
					    RemoveVehicleComponent(vehicleid,1010);
					}

					vInfo[vehicleid][vNOSCounter] = 0;
				}
			}
			else
			{
			    RemoveVehicleComponent(vehicleid,1010);
			}
		}
	}
	if(PRESSED(KEY_FIRE))
	{
	    if(Focizik[playerid] == 1)
		{
	    	////////////////////////////////FOCI
	     	new
		    	Float:ox, Float:oy, Float:oz,
		    	Float:x, Float:y, Float:z;
		    
			GetBallPos(ox, oy, oz);
			if(BallHolder == playerid)
			{
			    DestroyBall();
				CreateBall();
				SetObjectPos(Ball, ox, oy, oz);
				BallHolder = -1;
			}
			else
			{
				GetPlayerPos(playerid, x, y, z);
				if(IsPlayerInRangeOfPoint(playerid, 1.2, ox, oy, z) && oz < z && (z - oz) < 1.2)
				{
				    GetObjectRot(Ball, ox, oy, oz);
				    AttachObjectToPlayer(Ball, playerid, 0.0, 0.6, -0.875, ox, oy, oz);

					if(BallHolder != -1)
					    PlayerPlaySound(BallHolder, 1130, 0.0, 0.0, 0.0);
					PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);

					BallHolder = playerid;
					//LastTouch = playerid;
				}
			}
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
		}
		//////////////////FOCI//////////////////////////////////////////////////
	    if(!IsPlayerInAnyVehicle(playerid) && (g_AttachedObj[playerid][SLOT_JOBBKEZ] == 18634 || g_AttachedObj[playerid][SLOT_BALKEZ] == 18634))
	    {
	        new animindex = GetPlayerAnimationIndex(playerid);
	        new animlib[32]; format(animlib, 32, "UNKNOWN");
	        new animname[32]; format(animname, 32, "UNKNOWN");
			
	        if(animindex)
		        GetAnimationName(animindex,animlib,32,animname,32);
		    
		    if(g_KovetVisz[playerid][1] == NINCS &&(!animindex || (!egyezik(animlib, "SWORD") && !egyezik(animname, "sword_4"))))
		    {
		        new kozeli = getClosestBanyaKo(playerid, 2.0);
		        if(kozeli != NINCS)
		        {
		            g_BanyaObjectek[kozeli][bHP] -= floatrand(5.0, 10.0);
		            SetPlayerProgressBarValue(playerid, BanyaBar[playerid], MAX_BANYAKO_HP - g_BanyaObjectek[kozeli][bHP]);
    		        ShowPlayerProgressBar(playerid, BanyaBar[playerid]);
		            if(g_BanyaObjectek[kozeli][bHP] <= 0.0)
		            {
		                g_BanyaObjectek[kozeli][bHP] = 0.0;
		                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);

						g_KovetVisz[playerid][0] = kozeli;
						g_KovetVisz[playerid][1] = CreateObject(3930, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
						BanyaKoMaterial(g_BanyaObjectek[kozeli][bTipus], g_KovetVisz[playerid][1], false);
						AttachObjectToPlayer(g_KovetVisz[playerid][1], playerid, 0.0, 0.5, 0.2, 0.0, 0.0, 0.0);
						DestroyDynamicObject(g_BanyaObjectek[kozeli][bObjID]);
						g_BanyaObjectek[kozeli][bObjID] = NINCS;
						
		                Streamer_UpdateAll();
		                
		            }
					if(BanyaBarTimerStat[playerid])
						stop BanyaBarTimer[playerid];
						
					BanyaBarTimer[playerid] = defer hideBanyaProgress(playerid);
					BanyaBarTimerStat[playerid] = true;
				}

				OnePlayAnim(playerid,"SWORD","sword_4",4.0,0,1,1,0,0);
		   		new Float:pposdata[3];
			    GetPlayerPos(playerid, posArr{pposdata});
		   		defer playSound[700](NINCS, 1135, posArr{pposdata});
			}
	    }
	    else if(PlayerInfo[playerid][pJoint][0])
			JointTimer( playerid, 6, NINCS );
	}
	if(PlayerInfo[playerid][pTog][14] == true)
	{
		if(PRESSED(KEY_SECONDARY_ATTACK))
		{
			if(PlayerInfo[playerid][pjail] != 0) return 1;

			for(new i=0;i<MAX_AJTO;i++)
			{
				if(GetPlayerInterior(playerid) == AjtoInfo[i][abeinterior] && GetPlayerVirtualWorld(playerid) == AjtoInfo[i][abevw] && IsPlayerInRangeOfPoint(playerid, 1.0, AjtoInfo[i][abepos][0],AjtoInfo[i][abepos][1],AjtoInfo[i][abepos][2]))
				{
					if(!AjtoInfo[i][anyitva]) return SCM(playerid, COL_LRED, "Az ajtó jelenleg zárva van!");
					AjtoTeleport(playerid, 0, i);
				}
				if(GetPlayerInterior(playerid) == AjtoInfo[i][akiinterior] && GetPlayerVirtualWorld(playerid) == AjtoInfo[i][akivw] && IsPlayerInRangeOfPoint(playerid, 1.0, AjtoInfo[i][akipos][0],AjtoInfo[i][akipos][1],AjtoInfo[i][akipos][2]))
				{
					if(!AjtoInfo[i][anyitva]) return SCM(playerid, COL_LRED, "Az ajtó jelenleg zárva van!");
					AjtoTeleport(playerid, 1, i);
				}
			}
		}
	}
	if(RELEASED(KEY_FIRE) && PlayerInfo[playerid][pFegyver] == 17 && PlayerInfo[playerid][pSWAT] > 0)
	{
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);
		x += (15 * floatsin(-a, degrees));
		y += (15 * floatcos(-a, degrees));
		z -= 1.0;
		createTearGas(x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
		Cselekves(playerid, "eldobott egy könnygáz gránátot");
		return true;
	}
	if( PRESSED(KEY_SECONDARY_ATTACK) && PlayerInfo[playerid][pJoint][0] && !IsPlayerInAnyVehicle(playerid) )
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		PlayerInfo[playerid][pJoint][0] = false;
		SCM(playerid, COL_MKEK, "Abbahagytad a szívást.");
		return true;
	}
	if(PRESSED(KEY_SPRINT))
	{
	    if(Fishing[playerid] != 0)
	    {
	        if(HuzzadVaze[playerid] != 0)
	        {
          		HuzzadVaze[playerid] = 0;
          		Huzza(playerid);
	        }
	    }
	}
	if(HOLDING(KEY_FIRE) || HOLDING(KEY_SECONDARY_ATTACK) && HOLDING(KEY_HANDBRAKE))
	{
		if(Bortonben(playerid) != 0)
		{
			SCM(playerid,COL_LRED,"Ne ütögess!");
			Freeze(playerid, 10000);
		}
	}
	if(KepetCsinal[playerid] == 1)
	{
		if(PRESSED(KEY_ANALOG_RIGHT))
		{
			GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			new Float: n1X, Float: n1Y;
			if(Degree[playerid] >= 360) Degree[playerid] = 0;
			Degree[playerid] += SelfieSpeed;
			n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
			n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
			SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
			SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+1);
			SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		}
		if(PRESSED(KEY_ANALOG_LEFT))
		{
			GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			new Float: n1X, Float: n1Y;
			if(Degree[playerid] >= 360) Degree[playerid] = 0;
			Degree[playerid] -= SelfieSpeed;
			n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
			n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
			SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
			SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+1);
			SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		}
	}
	if(!TrafiTimerFut[playerid] && !PlayerInfo[playerid][pTimerFut] && !PlayerInfo[playerid][pFoglalt])
	{
		if(IsKeyJustDown(KEY_HANDBRAKE,newkeys,oldkeys)){
		    new animindex = GetPlayerAnimationIndex(playerid);
	        new animlib[32]; format(animlib, 32, "UNKNOWN");
	        new animname[32]; format(animname, 32, "UNKNOWN");

	        if(animindex)
		        GetAnimationName(animindex,animlib,32,animname,32);

		    if(g_KovetVisz[playerid][1] == NINCS && (!animindex || (!egyezik(animlib, "SWORD") && !egyezik(animname, "sword_4"))))
				StopLoopingAnim(playerid);
		}

		if(PlayerInfo[playerid][pUsingLoopingAnim] && PlayerInfo[playerid][pAnimban][0] == 1)
			return true;
	}

	PlayerInfo[playerid][pUsingLoopingAnim] = 0;
	/*------------ Animok kezelése vége ------------*/

	#define KEY_AIM KEY_HANDBRAKE

	new	animlib[32],
		animname[32];

	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);

	new Keys, ud, lr;
    GetPlayerKeys(playerid, Keys, ud, lr);

	if(!GetPlayerVehicleSeat(playerid)) //csak söfõr tudja kapcsolni az indexet
	{
		/*if(PRESSED(KEY_ANALOG_LEFT))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new vehicleidje = vInfoID[GetPlayerVehicleID(playerid)];
				if(vInfo[vehicleidje][Kozos]) SetVehicleIndex(playerid, vehicleidje, false, true), vInfo[vehicleidje][Kozos] = 0;
				else SetVehicleIndex(playerid, vehicleidje, true);
			}
		}//geci
		if(PRESSED(KEY_ANALOG_RIGHT))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new vehicleidje = JarmuID(GetPlayerVehicleID(playerid), playerid);
				if(vInfo[vehicleidje][Kozos]) SetVehicleIndex(playerid, vehicleidje, true), vInfo[vehicleidje][Kozos] = 0;
				else SetVehicleIndex(playerid, vehicleidje, false, true);
			}
		}*/
		if(PRESSED(KEY_ANALOG_DOWN))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new vehicleidje = JarmuID(GetPlayerVehicleID(playerid), playerid);
				if(!vInfo[vehicleidje][Kozos])
				{
					SetVehicleIndex(playerid, vehicleidje, true, true, true);
					vInfo[vehicleidje][Kozos] = 1;
				}
				else
				{
					SetVehicleIndex(playerid, vehicleidje, true, true);
					vInfo[vehicleidje][Kozos] = 0;
				}
			}
		}
	}

	if(!PlayerInfo[playerid][pAduty] && !IsPlayerInAnyVehicle(playerid)) //Admin szoliban ne essen el - elesés
	{
		if(HOLDING(KEY_SPRINT) && PRESSED(KEY_JUMP) && !Bortonben(playerid)) Szukseglet(playerid, float(Rand(1, 4)));
		if(((ud < 0) || (ud > 0) || (lr > 0) || (lr < 0)) && HOLDING(KEY_SPRINT) && PRESSED(KEY_JUMP) && !PlayerInfo[playerid][pmegbotlott])
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				switch(random(10))
				{
					case 4, 7:
					{
						ClearAnimations(playerid);
						LoopingAnim(playerid, "PED", "KO_shot_front", 2.3, 0, 1, 1, 1, 0, 1);
						PlayerInfo[playerid][pmegbotlott] = true;
					}
				}
			}
		}

		if((PRESSED(KEY_FIRE) || PRESSED(KEY_JUMP)) && PlayerInfo[playerid][pmegbotlott])
		{
			if(!strcmp("PED", animlib, true) && !strcmp("KO_SHOT_FRONT", animname, true))
			{
				LoopingAnim(playerid, "PED", "getup_front", 2.3, 0, 1, 1, 0, -1, 1);
				PlayerInfo[playerid][pmegbotlott] = false;
			}
		}
	} //elesés vége

	if(PRESSED(KEY_FIRE))
	{
		if(IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][pSpeedBoots])
		{
			new Float:vx,Float:vy,Float:vz, id;
			id = GetPlayerVehicleID(playerid);
			GetVehicleVelocity(id ,vx, vy, vz);
			SetVehicleVelocity(id , vx * 1.3, vy * 1.3, vz * 1.3);
			RepairVehicle(id);
		}
	}
	if(PRESSED(KEY_ACTION))
	{
		if(IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][pSpeedBoots])
		{
			new Float:vx,Float:vy,Float:vz, id;
			id = GetPlayerVehicleID(playerid);
			GetVehicleVelocity(id ,vx, vy, vz);
			SetVehicleVelocity(id , vx * 0, vy * 0, vz * 0);
			RepairVehicle(id);
		}
	}
	if(PRESSED(KEY_CROUCH))
	{
		if(Admin(playerid, 4) && !PlayerInfo[playerid][pTog][13] && !IsPlayerInAnyVehicle(playerid))
		{
			new car = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new id = IsSeatTaken(car, 0);
				if(id != playerid && id != NINCS)
					return SCM(playerid, COL_LRED, "A vezetõ ülés foglalt!");

				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!IsScripter(playerid) || (!IsScripter(playerid) && vInfo[vid][vInsert]))
						AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s lefoglalt egy %s típusú jármûvet! JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[vInfo[vid][vModel] - 400], car, vid, JarmuTulaj(vid));

					SCM(playerid, COL_MKEK, "Jármû sikeresen lefoglalva!");

					if(id == NINCS)
						PutPlayerInVehicle(playerid, car, 0);

					SetJarmu(car, KOCSI_MOTOR, 1);
					vInfo[vid][vMotorelinditva] = true;
				}
			}
			else
				return SCM(playerid, COL_LRED, "Nincs jármû a közeledben!");
		}
	}


	if(HOLDING(KEY_FIRE))
	{
		if((PlayerInfo[playerid][pFegyver] == 9) && IsJob(playerid, MUNKA_FAVAGO))
		{
			new fa = GetClosestFaHely(playerid), faformat[64];
			if((GetDistanceToFaHely(playerid, fa) < 5.0))
			{
				if(FaHelyek[fa][fAllapot] > 0)
				{
					stop PlayerTimers[playerid][PT_FAVAGO];
					PlayerTimers[playerid][PT_FAVAGO] = defer FavagasTimer[1000](playerid, fa);
					PlayerInfo[playerid][pFavagoMunkazik] = true;
					format(faformat, sizeof(faformat), "~w~Állapot: ~r~%d%%", FaHelyek[fa][fAllapot]);
					GameTextForPlayer(playerid, faformat, 500, 1);
				} else
					return SCM(playerid, COL_LRED, "Ez a fa már ki van vágva!");
			}
		}
	}

	if(HOLDING(KEY_FIRE) && !PlayerInfo[playerid][pTuzetOlt] && (PlayerInfo[playerid][pFegyver] == 42)) // bal egérgomb v. bal egérgomb + jobb egérgomb
		PlayerInfo[playerid][pTuzetOlt] = true;
	if(PRESSED(KEY_FIRE) && !PlayerInfo[playerid][pTuzetOlt] && IsPlayerInAnyVehicle(playerid) && !GetPlayerVehicleSeat(playerid) && vInfo[PlayerInfo[playerid][pJarmuben]][vModel] == 407)
		PlayerInfo[playerid][pTuzetOlt] = true;
	else if(RELEASED(KEY_FIRE) && PlayerInfo[playerid][pTuzetOlt])
		PlayerInfo[playerid][pTuzetOlt] = false;


	if(PRESSED( KEY_NO ) && BillentyuHatra[playerid] == NINCS)
	{
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
		    new vehicleid = GetPlayerVehicleID(playerid);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(lights == 1)
			{
				lights = 0;
				SCM(playerid,COL_MKEK,"Lámpa lekapcsolva.");
			} else {
				lights = 1;
				SCM(playerid,COL_MKEK,"Lámpa felkapcsolva.");
			}
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		}
	}
	return true;
}

stock GetVehicleXYBehind(&Float:x, &Float:y, &Float:z, &Float:a, Float:mennyivel = 10.0)
{
	x -= (mennyivel * floatsin(-a, degrees));
	y -= (mennyivel * floatcos(-a, degrees));
	return true;
}

stock GetInFrontOfXY(&Float:x, &Float:y, &Float:z, &Float:a, Float:mennyivel = 10.0, bool:forditva = false)
{
	if(!forditva)
		x += (mennyivel * floatsin(-a, degrees)), y += (mennyivel * floatcos(-a, degrees));
	else
		x -= (mennyivel * floatsin(-a, degrees)), y -= (mennyivel * floatcos(-a, degrees));

	return true;
}

stock GetNewFaIndex()
{
	new
		fa = -1,
		visszateres = -1;
	for(;++fa < MAX_FA;)
	{
		if(!FaAdatok[fa][fahasznalva])
		{
			visszateres = fa;
			break;
		}
	}
	return visszateres;
}

stock FaLerak(playerid, Float:xpoz, Float:ypoz, Float:zpoz)
{
	new
		index = GetNewFaIndex(),
		fastring[MAX_PLAYER_NAME + 11];

	if(index > -1)
	{
		FaAdatok[index][faposx] = xpoz;
		FaAdatok[index][faposy] = ypoz;
		FaAdatok[index][faposz] = zpoz;
		FaAdatok[index][fahasznalva] = true;
		FaAdatok[index][faplayerid] = playerid;

		GetPlayerName(playerid, fastring, MAX_PLAYER_NAME);
		format(fastring, sizeof(fastring), "FA\n[%s]", fastring);

		FaAdatok[index][falabel] = CreateDynamic3DTextLabel(fastring, -1, xpoz, ypoz, zpoz, 20.0);
	}
	Streamer_Update(playerid);
	return true;
}

timer FavagasTimer[1000](playerid, fa)
{
	new faformat[32];

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, FaHelyek[fa][fPosX], FaHelyek[fa][fPosY], FaHelyek[fa][fPosZ]))
	{
		PlayerInfo[playerid][pFavagoMunkazik] = false;
		stop PlayerTimers[playerid][PT_FAVAGO];
		//PlayerTextDrawHide(playerid, FaVagasTD);
		return true;
	}

	if((FaHelyek[fa][fAllapot] > 0) && GetPlayerWeapon(playerid) == 9)
	{
		stop PlayerTimers[playerid][PT_FAVAGO];
		FaHelyek[fa][fAllapot] -= random(9);
		format(faformat, sizeof(faformat), "~w~Állapot: ~r~%d%%", (FaHelyek[fa][fAllapot] < 0 ? 0 : FaHelyek[fa][fAllapot]));
		//PlayerTextDrawSetString(playerid, FaVagasTD, faformat);
		GameTextForPlayer(playerid, faformat, 1000, 1);
		PlayerTimers[playerid][PT_FAVAGO] = defer FavagasTimer[1000](playerid, fa);
	} else if(((FaHelyek[fa][fAllapot] <= 0) && PlayerInfo[playerid][pFavagoMunkazik]))
	{
		stop PlayerTimers[playerid][PT_FAVAGO];
		SCM(playerid, COL_MKEK, "Sikeresen kivágtad a fát!");

		PlayerInfo[playerid][pFavagoMunkazik] = false;

		new Float:opos[3];
		GetDynamicObjectPos(FaObjectek[fa], PosExt(opos));

		new Float:playerposok[3];
		GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);

		//FaLerak(playerid, playerposok[0], playerposok[1], playerposok[2]);


		CallLocalFunction("OnPlayerFinishJob", "iii", playerid, MUNKA_FAVAGO, Rand(FAVAGOFIZUMIN, FAVAGOFIZUMAX));

		cmd_s(playerid, "Vigyázat! Dõl a fa");

		new mozgas = MoveDynamicObject(FaObjectek[fa], PosExt(opos) + 0.0100, 0.0001, 0.0, 100.0, 0.0);
		defer FaVisszaallitas[(30000 + mozgas)](playerid, fa);
	}

	return true;
}

timer FaVisszaallitas[30000](playerid, fa)
{
	FaHelyek[fa][fAllapot] = 100;
	DestroyDynamicObject(FaObjectek[fa]);
	FaObjectek[fa] = CreateDynamicObject(618, FaHelyek[fa][fPosX], FaHelyek[fa][fPosY], FaHelyek[fa][fPosZ], 0.0, 0.0, 0.0);
	Streamer_Update(playerid);
	return true;
}

public OnDynamicObjectMoved(objectid)
{
	new i = -1;
	for(; ++i < 9;)
	{
	    if(objectid == ZuzoGepStat[zKovek][i]){
	        DestroyDynamicObject(objectid);
	        ZuzoGepStat[zBezuzva] ++;
	        
	        if(ZuzoGepStat[zBezuzva] == ZuzoGepStat[zKovekOssz])
	        {
	        	new fizu = ZuzoGepStat[zKovekOssz] * Rand(60,100);
	        	
				SFM(ZuzoGepStat[zPlayer], COL_LRED, "A leadott kövek feldolgozásra kerültek! %d$ hozzáadva a fizetésedhez!", fizu);
	        	
                PlayerInfo[ ZuzoGepStat[zPlayer] ][pFizetes] += fizu;
                
                ZuzoGepStat[zBezuzva] = 0;
	            ZuzoGepStat[zKovekOssz] = 0;
	            ZuzoGepStat[zDolgozik] = false;
	            ZuzoGepStat[zKovekFolyamatban] = 0;
	            ZuzoGepStat[zPlayer] = INVALID_PLAYER_ID;
	            
	            MoveDynamicObject(ZuzoGepStat[zLezaro], -1864.56726, -1669.87000, 21.48400 - 0.0001, 0.0001, 0.00000, 0.00000, 90.00000);
		  	}
		  	ZuzoGepStat[zKovek][i] = NINCS;
	        return 1;
	    }
	}
	i = NINCS;
	for(;++i < 500;)
	{
		if(Kuka[i][kHasznalva] && (Kuka[i][kID] == objectid))
		{
			if(Kuka[i][kFazis] == 1)
				defer MoveTrashBack(i);
			else if(Kuka[i][kFazis] == 2)
			{
				TogglePlayerControllable(Kuka[i][kPlayerid], true);
				CallLocalFunction("OnPlayerFinishJob", "iii", Kuka[i][kPlayerid], MUNKA_KUKA, Rand(KUKAFIZUMIN, KUKAFIZUMAX));

				SetDynamicObjectPos(Kuka[i][kID], KukaPos[i][0], KukaPos[i][1], KukaPos[i][2] - 0.3);
				SetDynamicObjectRot(Kuka[i][kID], 0.0, 0.0, KukaPos[i][3]);

				new rand = random(sizeof(KukaPos)),
					Float:cpx = KukaPos[rand][0],
					Float:cpy = KukaPos[rand][1],
					Float:cpz = KukaPos[rand][2],
					Float:cpa = KukaPos[rand][3];

				/*
				new rand = random(sizeof(KukaPos)),
					Float:cpx = KukaPos[rand][0],
					Float:cpy = KukaPos[rand][1],
					Float:cpz = KukaPos[rand][2],
					Float:cpa = KukaPos[rand][3];

				PlayerInfo[playerid][pCP] = CP_KUKA;
				PlayerInfo[playerid][pKukaIndex] = rand;

				GetInFrontOfXY(cpx, cpy, cpz, cpa, 4.0, true);
				SetPlayerCheckpoint(playerid, cpx, cpy, cpz, 5.0);
				*/

				GetInFrontOfXY(cpx, cpy, cpz, cpa, 4.0, true);
				PlayerInfo[Kuka[i][kPlayerid]][pKukaIndex] = rand;
				PlayerInfo[Kuka[i][kPlayerid]][pCP] = CP_KUKA;
				//Kuka[rand][kCP][Kuka[i][kPlayerid]] = CreateDynamicCP(cpx, cpy, cpz, 5.0, .playerid = Kuka[i][kPlayerid], .streamdistance = 30000.0);
				//Kuka[rand][kCP][Kuka[i][kPlayerid]] = CreateCP(Kuka[i][kPlayerid], CP_KUKA, cpx, cpy, cpz, 5.0);
				SetPlayerCheckpoint(Kuka[i][kPlayerid], cpx, cpy, cpz, 5.0);

				Kuka[i][kPlayerid] = -1;
				Kuka[i][kFazis] = 0;
			}
			break;
		}
	}

	new x = -1;
	for(;++x < sizeof(FaHelyek);)
	{
		if(FaObjectek[x] == objectid)
		{
			DestroyDynamicObject(FaObjectek[x]);
			FaObjectek[x] = CreateDynamicObject(831, FaHelyek[x][fPosX], FaHelyek[x][fPosY], FaHelyek[x][fPosZ] - 0.3, 0.0, 0.0, 0.0);

			foreach(Player, playerid)
				if(IsPlayerConnected(playerid))
					Streamer_Update(playerid);
		}
	}
    return true;
}
stock RandomSiker(szazalek)
{
	new randomkell = floatround(100 / szazalek);
	new bool:siker = false;
	switch(random(randomkell))
 	{
 	    case 1: siker = true;
 	    default: siker = false;
 	}
	return siker;
}
stock MunkaTPAdd(playerid, job, bool:legalis)
{
    //0 = legál számláló, 1 = legál pontok, 2 = illegál számláló, 3 = illegál pontok
    if(legalis)
    {
	    if(job == MUNKA_MOWER)
	  	{
			if(RandomSiker(50))
	  		    PlayerInfo[playerid][pExp][0]++;
		}
		else
			PlayerInfo[playerid][pExp][0]++;

		if(PlayerInfo[playerid][pExp][0] >= SZINT_LEPES)
		{
			PlayerInfo[playerid][pExp][1]++;
			SFM(playerid, COL_MKEK, "Gratulálunk, tehetség pontjaid növekedtek (legális)! Új pontjaid száma: %d", PlayerInfo[playerid][pExp][1]);

			new i = -1;

			for(;++i < sizeof(Munkak);)
			{
				if((PlayerInfo[playerid][pExp][1] == Munkak[i][2][0]) && (Munkak[i][3][0]))
					SFM(playerid, COL_MKEK, "Gratulálok, mostantól elérhetõvé vált számodra az alábbi munka: "#COL_MKEK"%s!", Munkak[i][1]);
			}
		}
	}
	else
	{
	    PlayerInfo[playerid][pExp][2]++;

		if(PlayerInfo[playerid][pExp][2] >= SZINT_LEPES)
		{
			PlayerInfo[playerid][pExp][3]++;
			SFM(playerid, COL_MKEK, "Gratulálunk, tehetség pontjaid növekedtek (illegális)! Új pontjaid száma: %d", PlayerInfo[playerid][pExp][3]);

			new i = -1;

			for(;++i < sizeof(Munkak);)
			{
				if((PlayerInfo[playerid][pExp][2] == Munkak[i][2][0]) && !(Munkak[i][3][0]))
					SFM(playerid, COL_MKEK, "Gratulálok, mostantól elérhetõvé vált számodra az alábbi munka: "#COL_MKEK"%s!", Munkak[i][1]);
			}
		}
 	}
}
fpublic OnPlayerFinishJob(playerid, job, pay) //munka vége
{
	if(Munkak[(job - 20)][3][0]) //legális
	{
	    MunkaTPAdd(playerid, job, true);
	} else { //illegális
	    MunkaTPAdd(playerid, job, false);
	}

	if(job != MUNKA_KAMION && pay > 30)
		pay = Rand(30, 50);

	SFM(playerid, COL_MKEK, "Munka: "#COL_MKEK"%s"#COL_FEHER"$ hozzáadva a fizetésedhez!", FN(pay, 0, ','));
	PlayerInfo[playerid][pFizetes] += pay;
	return true;
}

fpublic Megbotlik(playerid)
{
	ClearAnimations(playerid);
	LoopingAnim(playerid, "PED", "KO_skid_back", 4, 0, 0, 0, 0, 800, 1);
	return true;
}

stock UresHullaHely()
{
	new hullaid = -1, i = -1;
	for(;++i < MAX_HULLA;)
	{
		if(!HullaInfo[i][Hvan])
		{
			hullaid = i;
			break;
		}
	}
	return hullaid;
}

timer HullaTorles[600000](hullaid)
{
	HullaInfo[hullaid][Hallapot] -= 5;
	if(HullaInfo[hullaid][Hallapot] <= 0)
		HullaTorol(hullaid);

	return true;
}

stock HullaTorol(hullaid)
{
	if(!HullaInfo[hullaid][Hvan])
		return false;

	stop HullaInfo[hullaid][Htimer];
	HullaInfo[hullaid][Hvan] = false;
	HullaInfo[hullaid][Hpos][0] = 0.0;
	HullaInfo[hullaid][Hpos][1] = 0.0;
	HullaInfo[hullaid][Hpos][2] = 0.0;
	HullaInfo[hullaid][Hoka] = 0;
	HullaInfo[hullaid][Hkie][0] = EOS;
	HullaInfo[hullaid][Hkieid] = 0;
	HullaInfo[hullaid][Hmegolte][0] = EOS;
	HullaInfo[hullaid][Hmegolteid] = 0;
	HullaInfo[hullaid][Hvw] = 0;

	HullaInfo[hullaid][HHeroin] = 0;
	HullaInfo[hullaid][HKokain] = 0;
	HullaInfo[hullaid][HMati] = 0;
	HullaInfo[hullaid][HMariska] = 0;
	HullaInfo[hullaid][HPenz] = 0;

	DestroyDynamic3DTextLabel(HullaInfo[hullaid][Htext3d]);
	DestroyDynamicObject(HullaInfo[hullaid][Hobject]);
	return true;
}

stock HullaLerak(playerid, Float:Xa, Float:Ya, Float:Za, oka, VW = 0, megolte[] = "Nem gyilkosság")
{
	new ureshely = UresHullaHely();
	if(ureshely == NINCS) return false;

	TargyEldob(playerid, ELDOB_FEGYVER, NINCS);//kezében lévõ fegyver eldobása

	//fegyverek törlése
	new fegyver = -1;
	for(;++fegyver < 13;)
	{
		PlayerInfo[playerid][pFegyverek][fegyver] = 0;
		PlayerInfo[playerid][pToltenyek][fegyver] = 0;
	}

	SetPlayerAttachedWeapon(playerid, true);

	HullaInfo[ureshely][Hvan] = true;
	HullaInfo[ureshely][Htimer] = defer HullaTorles(ureshely);
	HullaInfo[ureshely][Hpos][0] = Xa;
	HullaInfo[ureshely][Hpos][1] = Ya;
	Za -= 0.9;
	HullaInfo[ureshely][Hvw] = VW;
	HullaInfo[ureshely][Hpos][2] = Za;
	HullaInfo[ureshely][Hoka] = oka;
	format(HullaInfo[ureshely][Hkie], MAX_PLAYER_NAME, JatekosNev(playerid));
	HullaInfo[ureshely][Hkieid] = playerid;

	if(PlayerInfo[playerid][pKokain] > 0 && PlayerInfo[playerid][pjatekosszint] > 3)
	{
	    HullaInfo[ureshely][HKokain] = PlayerInfo[playerid][pKokain];
	    PlayerInfo[playerid][pKokain] = 0;
	} else HullaInfo[ureshely][HKokain] = 0;

	if(PlayerInfo[playerid][pHeroin] > 0 && PlayerInfo[playerid][pjatekosszint] > 3)
	{
	    HullaInfo[ureshely][HHeroin] = PlayerInfo[playerid][pHeroin];
	    PlayerInfo[playerid][pHeroin] = 0;
	} else HullaInfo[ureshely][HHeroin] = 0;

	if(PlayerInfo[playerid][pMarihuana] > 0 && PlayerInfo[playerid][pjatekosszint] > 3)
	{
	    HullaInfo[ureshely][HMariska] = PlayerInfo[playerid][pMarihuana];
	    PlayerInfo[playerid][pMarihuana] = 0;
	} else HullaInfo[ureshely][HMariska] = 0;

	if(PlayerInfo[playerid][pMaterial] > 0 && PlayerInfo[playerid][pjatekosszint] > 3)
	{
	    HullaInfo[ureshely][HMati] = PlayerInfo[playerid][pMaterial];
	    PlayerInfo[playerid][pMaterial] = 0;
	} else HullaInfo[ureshely][HMati] = 0;

	if(PlayerInfo[playerid][ppenz] > 0 && PlayerInfo[playerid][pjatekosszint] > 3)
	{
	    HullaInfo[ureshely][HPenz] = PlayerInfo[playerid][ppenz];
		PlayerInfo[playerid][ppenz] = 0;
	} else HullaInfo[ureshely][HPenz] = 0;

	format(HullaInfo[ureshely][Hmegolte], MAX_PLAYER_NAME, megolte);
	HullaInfo[ureshely][Htext3d] = CreateDynamic3DTextLabel("=== "#COL_LKEK"Hulla"#COL_FEHER" ===\n"#COL_LKEK"(( /hulla ))", FEHER, Xa, Ya, Za, 20.0,.worldid = VW);

	HullaInfo[ureshely][Hobject] = CreateDynamicObject(19944, Xa, Ya, Za, 0, 0, 274, VW);

	HullaInfo[ureshely][Hallapot] = 80;
	HullaInfo[ureshely][Hperc] = 0;
	return true;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	new butorid = ButorObjectID(objectid);

	PlayerInfo[playerid][pSzButor] = butorid;
	ShowPlayerDialog(playerid, DIALOG_BUTOR_SZERKESZTES, DIALOG_STYLE_LIST, #COL_FEHER"Bútor "#COL_VKEK"szerkesztés", "Bútor mozgatása\nBútor törlése", "Mehet!", "Mégse!");

	CancelEdit(playerid);
	return true;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(g_ObjectetEditel[playerid] != objectid)
	{
	    g_ObjectetEditel[playerid] = NINCS;
	    return false;
	}
	if(GetPVarInt(playerid, "vObjEdit") == VOBJ_EDIT_RENDORVILLOGO)
	{
	    if(response == EDIT_RESPONSE_FINAL)
		{
		    new kocsi = GetPlayerVehicleID(playerid),
				jarmuidje = JarmuID(kocsi, playerid);

			new Float:ofx, Float:ofy, Float:ofz, Float:ofaz;
			new Float:finalx, Float:finaly;
			new Float:px, Float:py, Float:pz, Float:roz;
			GetVehiclePos(vInfo[jarmuidje][vID], px, py, pz);
			GetVehicleZAngle(vInfo[jarmuidje][vID], roz);
			ofx = x-px;
			ofy = y-py;
			ofz = z-pz;
			ofaz = rz-roz;
			finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
			finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);

			AttachDynamicObjectToVehicle(vInfo[jarmuidje][vVillogo], vInfo[jarmuidje][vID], finalx, finaly, ofz, rx, ry, ofaz);

			SetPVarInt(playerid, "vObjEdit", 0);
			UnFreeze(playerid);
			return 1;
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
		    new kocsi = GetPlayerVehicleID(playerid),
				jarmuidje = JarmuID(kocsi, playerid);

			DestroyDynamicObject(vInfo[jarmuidje][vVillogo]);
			SetPVarInt(playerid, "vObjEdit", 0);
			UnFreeze(playerid);
			return 1;
		}
	}
	else if(GetPVarInt(playerid, "vObjEdit") == VOBJ_EDIT_TAXI)
	{
	    if(response == EDIT_RESPONSE_FINAL)
		{
		    new kocsi = GetPlayerVehicleID(playerid),
				jarmuidje = JarmuID(kocsi, playerid);

			new Float:ofx, Float:ofy, Float:ofz, Float:ofaz;
			new Float:finalx, Float:finaly;
			new Float:px, Float:py, Float:pz, Float:roz;
			GetVehiclePos(vInfo[jarmuidje][vID], px, py, pz);
			GetVehicleZAngle(vInfo[jarmuidje][vID], roz);
			ofx = x-px;
			ofy = y-py;
			ofz = z-pz;
			ofaz = rz-roz;
			finalx = ofx*floatcos(roz, degrees)+ofy*floatsin(roz, degrees);
			finaly = -ofx*floatsin(roz, degrees)+ofy*floatcos(roz, degrees);

			AttachDynamicObjectToVehicle(vInfo[jarmuidje][vTaxi], vInfo[jarmuidje][vID], finalx, finaly, ofz, rx, ry, ofaz);

			SetPVarInt(playerid, "vObjEdit", 0);
			UnFreeze(playerid);
			return 1;
		}
		else if(response == EDIT_RESPONSE_CANCEL)
		{
		    new kocsi = GetPlayerVehicleID(playerid),
				jarmuidje = JarmuID(kocsi, playerid);

			DestroyDynamicObject(vInfo[jarmuidje][vTaxi]);
			SetPVarInt(playerid, "vObjEdit", 0);
			UnFreeze(playerid);
			return 1;
		}
	}
	else
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			new fid = FrakcioID(PlayerInfo[playerid][pFrakcioKezeles]);
			if(fid != NINCS)
			{
				if(FInfo[fid][fObjectID] == objectid)
				{
					PlayerInfo[playerid][pFrakcioKezeles] = -1;

					FInfo[fid][fSzefPos][0] = x;
					FInfo[fid][fSzefPos][1] = y;
					FInfo[fid][fSzefPos][2] = z;

					FInfo[fid][fSzefPosR][0] = rx;
					FInfo[fid][fSzefPosR][1] = ry;
					FInfo[fid][fSzefPosR][2] = rz;
					FkUpdate(fid, fuSzefObject);

					SFM(playerid, COL_MKEK, "%s frakció széf pozíciója sikeresen elmentve!", FInfo[fid][fNev]);
					return true;
				}
			}
			if(objectid == GraffitiObjectLerakas[playerid])
			{
				AddTag(x,y,z,rx,ry,rz);
				DestroyDynamicObject(GraffitiObjectLerakas[playerid]);
				GraffitiObjectLerakas[playerid] = 0;
				SCM(playerid,COL_LRED, "Grafiti Lerakva!");
				return 1;
			}
			if(objectid == HifiObjectLerakas[playerid])
			{
				DestroyDynamicObject(HifiObjectLerakas[playerid]);
				HifiObjectLerakas[playerid] = 0;
				HifiLerak(playerid,x,y,z,rx,ry,rz);
				return true;
			}
			if(AutomataID[playerid] > NINCS)
			{
				new auid = AutomataID[playerid];

				AutomataInfo[auid][aupos][0] = x;
				AutomataInfo[auid][aupos][1] = y;
				AutomataInfo[auid][aupos][2] = z;
				AutomataInfo[auid][aupos][3] = rx;
				AutomataInfo[auid][aupos][4] = ry;
				AutomataInfo[auid][aupos][5] = rz;

				//if(AutomataInfo[auid][autipus] == 2)
				//{
				//	if(IsValidDynamic3DTextLabel(AutomataInfo[auid][autext])) DestroyDynamic3DTextLabel(AutomataInfo[auid][autext]);
				//	AutomataInfo[auid][autext] = CreateDynamic3DTextLabel("(( /menü ))", COLOR_MKEK, x, y, z, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
				//}

				SetDynamicObjectPos(AutomataInfo[auid][auobject], x, y, z);
				SetDynamicObjectRot(AutomataInfo[auid][auobject], rx, ry, rz);

				//DestroyDynamicObject(AutomataInfo[auid][auobject]);
				//AutomataInfo[auid][auobject] = CreateDynamicObject(AutomataModel(AutomataInfo[auid][autipus]), x, y, z, rx, ry, rz, AutomataInfo[auid][auVW], AutomataInfo[auid][auInt]);
				Streamer_Update(playerid);
				AutomataInfo[auid][auszerkeszti] = false;
				AutomataInfo[auid][auhasznalva] = true;
				SCM(playerid, COL_VZOLD, "Automata pozíciója sikeresen elmentve!");
				AutomataID[playerid] = NINCS;

				new qry[1024];
				format(qry, 1024, "UPDATE `"#LSQL_AUTOMATA_TABLA"` SET aupenz='%d', auposx='%f', auposy='%f', auposz='%f', aurotx='%f', auroty='%f', aurotz='%f', vw='%d', int='%d' WHERE id='%d'", AutomataInfo[auid][aupenz], x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), auid);

				new DB:db = db_open(LSQL_ADATBAZIS);
				db_free_result(db_query(db, qry));
				db_close(db);

				return true;
			}

		    if(KapuID[playerid] != NINCS)
		    {
		        switch(SzerkesztesAllas[playerid])
			    {
					case 1:
					{
						Kapu[KapuID[playerid]][kZPos][0] = x;
						Kapu[KapuID[playerid]][kZPos][1] = y;
						Kapu[KapuID[playerid]][kZPos][2] = z;

						Kapu[KapuID[playerid]][kZRPos][0] = rx;
						Kapu[KapuID[playerid]][kZRPos][1] = ry;
						Kapu[KapuID[playerid]][kZRPos][2] = rz;

						SzerkesztesAllas[playerid] = 2;
						EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);

						SCM(playerid, COL_MKEK, "Zárt pozíció sikeresen elmentve!");
						SCM(playerid, COL_MKEK, "Most kérlek állítsd be és mentsd el a kapu nyitott állapotát!");
					    return true;
					}
					case 2:
					{
					    Kapu[KapuID[playerid]][kNPos][0] = x;
						Kapu[KapuID[playerid]][kNPos][1] = y;
						Kapu[KapuID[playerid]][kNPos][2] = z;

						Kapu[KapuID[playerid]][kNRPos][0] = rx;
						Kapu[KapuID[playerid]][kNRPos][1] = ry;
						Kapu[KapuID[playerid]][kNRPos][2] = rz;
						Kapu[KapuID[playerid]][kMozgo] = true;
						Kapu[KapuID[playerid]][kSzerkeszt] = false;

						new querycske[2048], hasznalocska[128], i = NINCS, numero = GetHasznaloNum(KapuID[playerid]);
						for(;++i < MAX_KAPU_HASZNALO;)
						{
						    if(Kapu[KapuID[playerid]][kHasznalo][i] > 0)
						    {
								format(hasznalocska, sizeof(hasznalocska), "%s%d%s", hasznalocska, Kapu[KapuID[playerid]][kHasznalo][i], (numero > i + 1 ? (",") : ("")));
						    }
						}

						format(querycske, sizeof(querycske), "INSERT INTO `"#MYSQL_KAPU_TABLA"` (ID, Nev, Model, Tav, Speed, Pos, NPos, NRPos, ZPos, ZRPos, Hasznalo, nyit, Vw, Kod)");
						format(querycske, sizeof(querycske), "%s VALUES('%d',", querycske, KapuID[playerid]);
						format(querycske, sizeof(querycske), "%s'%s','%d',", querycske, Kapu[KapuID[playerid]][kNev], Kapu[KapuID[playerid]][kModel]);
						format(querycske, sizeof(querycske), "%s'%f','3',", querycske, Kapu[KapuID[playerid]][kTav]);
						format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, PosExt(Kapu[KapuID[playerid]][kZPos]));
						format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, PosExt(Kapu[KapuID[playerid]][kNPos]));
						format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, PosExt(Kapu[KapuID[playerid]][kNRPos]));
						format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, PosExt(Kapu[KapuID[playerid]][kZPos]));
						format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, PosExt(Kapu[KapuID[playerid]][kZRPos]));
						format(querycske, sizeof(querycske), "%s'%s','0','%d',", querycske, (strlen(hasznalocska) > 0 ? hasznalocska : ("0")), GetPlayerVirtualWorld(playerid));
						format(querycske, sizeof(querycske), "%s'%d')", querycske, Kapu[KapuID[playerid]][kKod]);
						//mysql_function_query(sql_ID, querycske, false, "", "");
						mysql_tquery(sql_ID, querycske, "", "");

						if(Kapu[KapuID[playerid]][kKod] > NINCS)
							AdminUzenet(COLOR_LIGHTRED, 1, "%s létrehozott egy kaput! Obj: %d | Kód: %d | Folyamat: EDO", JatekosNev(playerid), Kapu[KapuID[playerid]][kModel], Kapu[KapuID[playerid]][kKod]);
						else
						    AdminUzenet(COLOR_LIGHTRED, 1, "%s létrehozott egy kaput! Obj: %d | Fk: %s | Folyamat: EDO", JatekosNev(playerid), Kapu[KapuID[playerid]][kModel], hasznalocska);

	                    SCM(playerid, COL_MKEK, "Kapu zárt és nyitott állapota sikeresen elmentve!");
						SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZPos]));
						SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZRPos]));

						SzerkesztesAllas[playerid] = NINCS;
						KapuID[playerid] = NINCS;
					    return true;
					}
					case 3:
					{
						Kapu[KapuID[playerid]][kZPos][0] = x;
						Kapu[KapuID[playerid]][kZPos][1] = y;
						Kapu[KapuID[playerid]][kZPos][2] = z;

						Kapu[KapuID[playerid]][kZRPos][0] = rx;
						Kapu[KapuID[playerid]][kZRPos][1] = ry;
						Kapu[KapuID[playerid]][kZRPos][2] = rz;

						Kapu[KapuID[playerid]][kSzerkeszt] = false;

						new querycske[256];
						format(querycske, sizeof(querycske), "UPDATE `"#MYSQL_KAPU_TABLA"` SET ZPos = '%f,%f,%f', ZRPos = '%f,%f,%f' WHERE ID = '%d'", PosExt(Kapu[KapuID[playerid]][kZPos]), PosExt(Kapu[KapuID[playerid]][kZRPos]), KapuID[playerid]);
						//mysql_function_query(sql_ID, querycske, false, "", "");
						mysql_tquery(sql_ID, querycske, "", "");

						KapuID[playerid] = NINCS;
						SCM(playerid, COL_MKEK, "Kapu zárt állapota sikeresen frissítve!");
					    return true;
					}
					case 4:
					{
					    Kapu[KapuID[playerid]][kNPos][0] = x;
						Kapu[KapuID[playerid]][kNPos][1] = y;
						Kapu[KapuID[playerid]][kNPos][2] = z;

						Kapu[KapuID[playerid]][kNRPos][0] = rx;
						Kapu[KapuID[playerid]][kNRPos][1] = ry;
						Kapu[KapuID[playerid]][kNRPos][2] = rz;

						Kapu[KapuID[playerid]][kSzerkeszt] = false;

						new querycske[256];
						format(querycske, sizeof(querycske), "UPDATE `"#MYSQL_KAPU_TABLA"` SET NPos = '%f,%f,%f', NRPos = '%f,%f,%f' WHERE ID = '%d'", PosExt(Kapu[KapuID[playerid]][kNPos]), PosExt(Kapu[KapuID[playerid]][kNRPos]), KapuID[playerid]);
						//mysql_function_query(sql_ID, querycske, false, "", "");
						mysql_tquery(sql_ID, querycske, "", "");

						SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZPos]));
						SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZRPos]));

						KapuID[playerid] = NINCS;
						SCM(playerid, COL_MKEK, "Kapu nyitott állapota sikeresen frissítve!");
					    return true;
					}
			    }
			}
			new querycske[1024],formatalunk[512],
			kategoria[48],penz,nev[48],
			butorszam = ButorObjectID(objectid);

			if(!ButorInfo[butorszam][butorMegveve])
			{
				switch(ButorInfo[butorszam][butorTipus])
				{
					case 1:
					{
						kategoria = "Asztal";
						penz = Butor_Asztal[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Asztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 2:
					{
						kategoria = "Ülõgarnitúra";
						penz = Butor_Ulogarnitura[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Ulogarnitura[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 3:
					{
						kategoria = "Festmények, képek";
						penz = Butor_Kepek[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Kepek[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 4:
					{
						kategoria = "Lámpák";
						penz = Butor_Lampak[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Lampak[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 5:
					{
						kategoria = "TV-k";
						penz = Butor_TV[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_TV[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 6:
					{
						kategoria = "DVD-k, HiFi-k";
						penz = Butor_DVDHiFi[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_DVDHiFi[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 7:
					{
						kategoria = "Hangfal";
						penz = Butor_Hangfal[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Hangfal[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 8:
					{
						kategoria = "Szekrény";
						penz = Butor_Szekreny[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Szekreny[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 9:
					{
						kategoria = "Fotel";
						penz = Butor_Fotel[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Fotel[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 10:
					{
						kategoria = "Konyhabútor";
						penz = Butor_Konyhabutor[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Konyhabutor[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 11:
					{
						kategoria = "Hûtõ";
						penz = Butor_Huto[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Huto[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 12:
					{
						kategoria = "Számítógép";
						penz = Butor_Szamitogep[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Szamitogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 13:
					{
						kategoria = "Ajtó";
						penz = Butor_Ajto[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Ajto[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 14:
					{
						kategoria = "Mosógép";
						penz = Butor_Mosogep[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Mosogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 15:
					{
						kategoria = "Nyomtató";
						penz = Butor_Nyomtato[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Nyomtato[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 16:
					{
						kategoria = "Ágy";
						penz = Butor_Agy[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Agy[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 17:
					{
						kategoria = "WC";
						penz = Butor_WC[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_WC[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 18:
					{
						kategoria = "Zuhanyzó";
						penz = Butor_Zuhanyzo[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Zuhanyzo[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 19:
					{
						kategoria = "Mosdó";
						penz = Butor_Mosdo[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Mosdo[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 20:
					{
						kategoria = "Szõnyeg";
						penz = Butor_Szonyeg[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Szonyeg[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 21:
					{
						kategoria = "Szék";
						penz = Butor_Szek[ButorInfo[butorszam][butorListitem]][butorNEV];
						format(nev, sizeof(nev), Butor_Szek[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 22:
					{
						kategoria = "Íróasztal";
						penz = Butor_Iroasztal[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Iroasztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 23:
					{
						kategoria = "Fal";
						penz = Butor_Fal[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Fal[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
					case 24:
					{
						kategoria = "Széf";
						penz = Butor_Szef[ButorInfo[butorszam][butorListitem]][butorAR];
						format(nev, sizeof(nev), Butor_Szef[ButorInfo[butorszam][butorListitem]][butorNEV]);
					}
				}

				ButorInfo[butorszam][butorPosX] = x;
				ButorInfo[butorszam][butorPosY] = y;
				ButorInfo[butorszam][butorPosZ] = z;
				ButorInfo[butorszam][butorPosRX] = rx;
				ButorInfo[butorszam][butorPosRY] = ry;
				ButorInfo[butorszam][butorPosRZ] = rz;

				PlayerInfo[playerid][pSzButor] = butorszam;
				format(formatalunk, sizeof(formatalunk), #COL_FEHER"Biztos, hogy meg akarod venni a következõ bútort?\n\n\n"#COL_VKEK"Bútor kategóriája: "#COL_FEHER"%s\n"#COL_VKEK"Bútor neve: "#COL_FEHER"%s\n"#COL_VKEK"Bútor ára: "#COL_FEHER"%d$", kategoria, nev, penz);
				ShowPlayerDialog(playerid, DIALOG_BUTOR_MEGVETEL, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"megvétele", formatalunk, "Biztos!", "Mégse!");
				return true;
			}
			format(querycske, sizeof(querycske), "UPDATE `butorok` SET butorPosX = '%.2f', butorPosY = '%.2f', butorPosZ = '%.2f', butorPosRX = '%.2f', butorPosRY = '%.2f', butorPosRZ = '%.2f' WHERE id = '%d'", x, y, z, rx, ry, rz, butorszam);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");

			SCM(playerid, COL_MKEK, "Sikeresen elmentetted a bútort!");
		}

		if(response == EDIT_RESPONSE_CANCEL)
		{
		    if(objectid == HifiObjectLerakas[playerid])
		    {
				PlayerInfo[playerid][pCuccok][BL_HIFI]++;
				DestroyDynamicObject(HifiObjectLerakas[playerid]);
				SCM(playerid,COL_LRED,"Akkor mégse rakj le..");
				return true;
		    }
			if(objectid == GraffitiObjectLerakas[playerid])
			{
				DestroyDynamicObject(GraffitiObjectLerakas[playerid]);
				GraffitiObjectLerakas[playerid] = 0;
				SCM(playerid,COL_LRED, "Grafiti lerakási kísérlet törölve!");
				return 1;
			}
		    if(KapuID[playerid] != NINCS)
		    {
			    if((SzerkesztesAllas[playerid] == 1 || SzerkesztesAllas[playerid] == 2))
			    {
		            Kapu[KapuID[playerid]][kVan] = false;
		            Kapu[KapuID[playerid]][kSzerkeszt] = false;
					Kapu[KapuID[playerid]][kModel] = 0;
					Kapu[KapuID[playerid]][kTav] = 0.0;
					Kapu[KapuID[playerid]][kSpeed] = 0.0;
					Kapu[KapuID[playerid]][kPos][0] = 0.0;
					Kapu[KapuID[playerid]][kPos][1] = 0.0;
					Kapu[KapuID[playerid]][kPos][2] = 0.0;
					Kapu[KapuID[playerid]][kNPos][0] = 0.0;
					Kapu[KapuID[playerid]][kNPos][1] = 0.0;
					Kapu[KapuID[playerid]][kNPos][2] = 0.0;
					Kapu[KapuID[playerid]][kNRPos][0] = 0.0;
					Kapu[KapuID[playerid]][kNRPos][1] = 0.0;
					Kapu[KapuID[playerid]][kNRPos][2] = 0.0;
					Kapu[KapuID[playerid]][kZPos][0] = 0.0;
					Kapu[KapuID[playerid]][kZPos][1] = 0.0;
					Kapu[KapuID[playerid]][kZPos][2] = 0.0;
					Kapu[KapuID[playerid]][kZRPos][0] = 0.0;
					Kapu[KapuID[playerid]][kZRPos][1] = 0.0;
					Kapu[KapuID[playerid]][kZRPos][2] = 0.0;
					Kapu[KapuID[playerid]][kMozgo] = false;
					Kapu[KapuID[playerid]][kNyit] = false;
					Kapu[KapuID[playerid]][kVW] = NINCS;
					DestroyDynamicObject(Kapu[KapuID[playerid]][kOID]);
					SzerkesztesAllas[playerid] = 0;
					KapuID[playerid] = NINCS;
					SCM(playerid, COL_MKEK, "Kiléptél a szerkesztési folyamatból, kapu sikeresen törölve!");
			        return true;
				}
				if(SzerkesztesAllas[playerid] == 4)
				{
			        SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZPos]));
					SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZRPos]));
	                Kapu[KapuID[playerid]][kSzerkeszt] = false;
					SzerkesztesAllas[playerid] = 0;
					KapuID[playerid] = NINCS;
					SCM(playerid, COL_MKEK, "Kapu szerkesztése befejezve és visszaállítva az eredeti zárt állapotára!");
			        return false;
				}
			}

			if(AutomataID[playerid] > -1)
			{
				new
					Float:objectpos[6],
					automataid = AutomataID[playerid];

				GetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[0], objectpos[1], objectpos[2]);
				GetDynamicObjectRot(AutomataInfo[automataid][auobject], objectpos[3], objectpos[4], objectpos[5]);

				SetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[0], objectpos[1], objectpos[2]);
				SetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[3], objectpos[4], objectpos[5]);

				AutomataID[playerid] = NINCS;
				return true;
			}

			new butorszam = ButorObjectID(objectid);
			if(ButorInfo[butorszam][butorMegveve])
			{
				SetDynamicObjectPos(ButorInfo[butorszam][butorObject], ButorInfo[butorszam][butorPosX], ButorInfo[butorszam][butorPosY], ButorInfo[butorszam][butorPosZ]);
				SetDynamicObjectRot(ButorInfo[butorszam][butorObject], ButorInfo[butorszam][butorPosRX], ButorInfo[butorszam][butorPosRY], ButorInfo[butorszam][butorPosRZ]);
			} else {
				ButorInfo[butorszam][butorPosX] = 0.0;
				ButorInfo[butorszam][butorPosY] = 0.0;
				ButorInfo[butorszam][butorPosZ] = 0.0;
				ButorInfo[butorszam][butorPosRX] = 0.0;
				ButorInfo[butorszam][butorPosRY] = 0.0;
				ButorInfo[butorszam][butorPosRZ] = 0.0;
				ButorInfo[butorszam][butorVW] = 0;
				ButorInfo[butorszam][butorInterior] = 0;
				ButorInfo[butorszam][butorHasznalva] = false;
				ButorInfo[butorszam][butorMegveve] = false;
				ButorInfo[butorszam][butorTipus] = NINCS;
				ButorInfo[butorszam][butorListitem] = NINCS;
				ButorInfo[butorszam][butorModel] = 0;
				ButorInfo[butorszam][butorPosRX] = 0.0;
				ButorInfo[butorszam][butorPosRY] = 0.0;
				ButorInfo[butorszam][butorPosRZ] = 0.0;
				DestroyDynamicObject(ButorInfo[butorszam][butorObject]);
			}
			/*new
				Float:objectpos[6],
				automataid = ObjectID(objectid);

			GetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[0], objectpos[1], objectpos[2]);
			GetDynamicObjectRot(AutomataInfo[automataid][auobject], objectpos[3], objectpos[4], objectpos[5]);

			SetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[0], objectpos[1], objectpos[2]);
			SetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[3], objectpos[4], objectpos[5]);*/
		}
	}
	if(response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL)
	{
	    g_ObjectetEditel[playerid] = NINCS;
	}
	MoveDynamicObject(objectid, x, y, z, 20.0, rx, ry, rz);
	return true;
}

stock SetVehicleNeon( vid, szin )
{
	switch( szin )
	{
		case 0:
		{
			if(IsValidDynamicObject( vInfo[vid][vNeon][1] )) DestroyDynamicObject( vInfo[vid][vNeon][1] );
			if(IsValidDynamicObject( vInfo[vid][vNeon][2] )) DestroyDynamicObject( vInfo[vid][vNeon][2] );
			vInfo[vid][vNeon][1] = INVALID_OBJECT_ID;
			vInfo[vid][vNeon][2] = INVALID_OBJECT_ID;
			vInfo[vid][vNeon][4] = false;
		}
		case 1 .. 6:
		{
			new Neonok[6] = {18647, 18648, 18649, 18650, 18651, 18652};

			if(IsValidDynamicObject( vInfo[vid][vNeon][1] )) DestroyDynamicObject( vInfo[vid][vNeon][1] );
			if(IsValidDynamicObject( vInfo[vid][vNeon][2] )) DestroyDynamicObject( vInfo[vid][vNeon][2] );
			vInfo[vid][vNeon][1] = CreateDynamicObject(Neonok[szin - 1],0.0, 0.0, 10.0, 0, 0, 0);
			vInfo[vid][vNeon][2] = CreateDynamicObject(Neonok[szin - 1],0.0, 0.0, 10.0, 0, 0, 0);

			AttachDynamicObjectToVehicle(vInfo[vid][vNeon][1], vInfo[vid][vID], 0.9004, 0.1164, -0.4655, 0.000000, 0.000000, 0.000000);
			AttachDynamicObjectToVehicle(vInfo[vid][vNeon][2], vInfo[vid][vID], -0.8706, 0.0570, -0.4655, 0.000000, 0.000000, 0.000000);

			vInfo[vid][vNeon][4] = true;
		}
	}
	return true;
}

stock SetVehicleIndex(playerid, vehicleid, bool:left=false, bool:right=false, bool:kozos=false)
{
	if(right)
	{
		if(!vInfo[vehicleid][JobbIndex])
		{
			if(!left || !kozos)
			{
				DestroyDynamicObject(vInfo[vehicleid][BalIndex1]);
				DestroyDynamicObject(vInfo[vehicleid][BalIndex2]);
				DestroyDynamicObject(vInfo[vehicleid][BalTrailer1]);
				DestroyDynamicObject(vInfo[vehicleid][BalTrailer2]);
				vInfo[vehicleid][BalIndex1] = 0;
				vInfo[vehicleid][BalIndex2] = 0;
				vInfo[vehicleid][BalTrailer1] = 0;
				vInfo[vehicleid][BalTrailer2] = 0;
				vInfo[vehicleid][BalIndex] = 0;
			}
			vInfo[vehicleid][JobbIndex1] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
			vInfo[vehicleid][JobbIndex2] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
			switch(GetVehicleModel(vInfo[vehicleid][vID]))
			{
				case 417, 425, 430, 432, 441, 446, 447, 449, 452, 453, 454, 460, 464, 465, 469, 472, 473, 476, 481, 484, 487, 488, 493, 497, 501, 509, 510, 511, 512, 513, 519, 520, 537, 538, 539, 548, 553, 563, 564, 569, 570, 571, 577, 590, 592, 593, 594, 595:
				{
					vInfo[vehicleid][JobbIndex1] = 0;
					vInfo[vehicleid][JobbIndex2] = 0;
					DestroyDynamicObject(vInfo[vehicleid][JobbIndex1]);
					DestroyDynamicObject(vInfo[vehicleid][JobbIndex2]);
					return vInfo[vehicleid][JobbIndex] = 0;
				}
				case 400:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.929999, -2.275004, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.949999, 2.069999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 401:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.969999, -2.305005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.039999, 2.495009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 402:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.934999, -2.590011, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.999999, 2.565011, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 403:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.549999, -4.195048, -0.719999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.989999, 4.455054, -0.809999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 404:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.819999, -2.720014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.694999, 2.280004, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 405:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.874999, -2.720014, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.874999, 2.325005, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 406:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 2.230003, -5.130069, 0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.924998, 4.985066, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 407:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.999999, -3.515032, 0.070000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.844999, 4.145047, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 408:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, -4.035044, -0.504999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 4.835062, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 409:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.859999, -3.905041, -0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.909999, 3.440031, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 410:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, -2.165001, 0.104999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.879999, 2.150001, 0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 411:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.854999, -2.470008, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.999999, 2.520009, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 412:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.989999, -3.595034, -0.154999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.009999, 2.725014, -0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 413:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.909999, -2.660013, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.954999, 2.570011, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 414:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.104999, -3.405030, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.709999, 2.875018, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 415:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.749999, -2.430008, 0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.924999, 2.495009, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 416:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.369999, -3.665036, 1.459998, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.049999, 2.935019, 0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 418:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.004999, -2.545010, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.984999, 2.360006, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 419:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.929999, -3.005021, -0.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.014999, 2.375006, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 420:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.009999, -2.705014, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.004999, 2.285004, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 421:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.839999, -2.895018, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.909999, 2.530010, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 422:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.914999, -2.470009, -0.259999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.794999, 2.290004, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 423:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.839999, -2.250004, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.774999, 2.325005, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 424:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.749999, -1.619998, 0.240000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.874999, 1.354999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 426:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.645013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.059999, 2.290004, -0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 427:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.934999, -3.925042, 0.339999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.999999, 2.695014, 0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 428:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.924999, -2.965020, 0.175000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.939999, 2.435008, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 429:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.814999, -2.435008, -0.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.799999, 2.275004, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 431:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.039999, -5.810085, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.944999, 5.890087, 0.399999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 433:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.334998, -4.735060, -0.084999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.264999, 3.725037, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 434:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.659999, -1.964998, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.619999, 1.894998, -0.309999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 436:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.889999, -2.485009, 0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.874999, 2.240003, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 437:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.164999, -5.330074, 1.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.194999, 5.560079, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 438:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.064999, -2.520009, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.119999, 2.370006, -0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 439:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.759999, -2.650012, -0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.804999, 2.370006, -0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 440:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.909999, -2.625012, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.979999, 2.565011, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 442:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.024999, -3.125023, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.019999, 2.810016, -0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 443:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.474998, -6.870109, -0.729999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.074999, 5.820085, -1.029999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 444:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.119999, -3.065022, 0.539999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.139999, 2.730014, 0.689999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 445:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.924999, -2.800016, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.939999, 2.335005, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 448:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.180000, -0.999999, -0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.250000, 0.479999, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 451:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.864999, -2.560011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.954999, 1.944998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 455:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.349998, -4.560056, -0.784999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.294999, 3.730037, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 456:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.209999, -4.560056, -0.669999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.944999, 3.360029, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 457:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.509999, -1.294998, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.449999, 1.179999, -0.095000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 458:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.949999, -2.805016, -0.165000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.415007, -0.145000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 459:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.889999, -2.640012, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.580011, -0.085000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 461:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.200000, -1.074999, 0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 462:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.155000, -0.909999, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 463:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.180000, -1.044999, 0.129999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.195000, 0.749999, 0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 466:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.009999, -2.770015, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.904999, 2.625012, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 467:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.924999, -3.025021, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.904999, 2.820017, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 468:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.145000, -0.864999, 0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.245000, 0.494999, 0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 470:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.019999, -2.685013, -0.234999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.054999, 2.160001, 0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 471:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.399999, -0.779999, 0.204999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.364999, 0.764999, 0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 474:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.959999, -2.825016, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.894999, 2.590011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 475:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.859999, -2.825016, -0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.859999, 2.485009, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 477:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.019999, -2.660013, 0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.864999, 2.485009, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 478:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.834999, -2.555010, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.079999, 1.994998, 0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 479:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.939999, -2.755015, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.984999, 2.525010, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 480:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.844999, -2.375006, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.619999, 2.295005, -0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 482:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.859999, -2.565011, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.894999, 2.405007, -0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 483:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.644999, -2.765015, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.794999, 2.610012, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 485:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.664999, -1.444998, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.644999, 1.749998, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 486:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.569999, -3.180025, 1.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.819999, 1.449998, 0.769999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 489:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.119999, -2.655013, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.114999, 2.590011, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 490:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.099999, -3.095023, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.084999, 3.190025, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 491:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.834999, -2.910018, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.829999, 2.500009, -0.099999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 492:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.899999, -2.795016, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.684999, 2.500009, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 494:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.789999, -2.890018, 0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.854999, 2.365006, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 495:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.094999, -2.205002, -0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.109999, 2.365006, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 496:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.934999, -2.125000, 0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.939999, 2.190002, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 498:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.954999, -3.110023, 0.334999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.879999, 3.080023, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 499:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.119999, -3.425030, 0.409999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.779999, 2.495009, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 500:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.739999, -1.969998, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.399999, 2.125001, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 502:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.774999, -2.715014, -0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.859999, 2.605012, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 503:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, -2.840017, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.859999, 2.410007, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 504:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.069999, -2.780015, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.894999, 2.635012, -0.089999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 505:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.074999, -2.625012, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.089999, 2.605012, 0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 506:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.049999, 2.090000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.814999, -2.460008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 507:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.049999, 3.250026, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.024999, -2.845017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 508:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.104999, 3.135024, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.584998, -3.995043, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 514:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.349998, 4.325051, 0.140000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.224999, -4.990066, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 515:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.349998, 4.325051, -0.519999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.299998, -4.990066, -1.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 516:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 517:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 518:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 521:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.204999, 0.674999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 522:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 523:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 524:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.139999, -3.970043, -1.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.644998, 4.080045, -0.319999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 525:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.224999, -3.060022, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.179999, 2.905019, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 526:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.889999, -2.325005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.004999, 2.440008, -0.105000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 527:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.889999, -2.230003, 0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.964999, 2.465008, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 528:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.049999, 2.530010, 0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.134999, -2.640012, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 529:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.044999, 2.610012, 0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.124999, -2.670013, 0.244999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 530:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.474999, -1.874998, 1.314998, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 531:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.419999, 1.579998, -0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 532:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.389998, 3.050022, 1.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.684999, -1.974998, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 533:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.004999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.054999, -2.520010, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 534:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.109999, 2.910019, -0.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.599999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 535:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.934999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 536:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.739999, -3.105023, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 540:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, -2.745015, -0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.944999, 2.585011, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 541:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.724999, -2.400007, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.684999, 2.390007, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 542:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.859999, 2.650013, -0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.689999, -2.960020, -0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 543:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.799999, 2.235003, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.014999, -2.620012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 544:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.729999, 3.720037, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.834999, -3.355029, -0.544999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 545:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.494999, 1.659998, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.829999, -2.064999, -0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 546:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.755015, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.014999, 2.635012, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 547:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.919999, -2.665013, 0.065000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.984999, 2.485009, 0.035000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 549:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.874999, -2.565011, 0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.014999, 2.485009, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 550:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.994999, -2.700014, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.029999, 2.585011, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 551:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.974999, -3.040022, 0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.029999, 2.620012, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 552:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.994999, -3.030021, 0.609999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.104999, 3.090023, 0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 554:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.109999, -2.815016, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.144999, 2.505009, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 555:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.749999, -2.480009, -0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.739999, 2.305005, -0.269999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 556:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.074999, -2.940019, 0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.009999, 2.530010, 0.499999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 557:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.134999, -2.785016, 0.584999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.184999, 2.490009, 0.724999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 558:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.914999, -2.430008, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.919999, 2.170002, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 559:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.864999, -2.300005, 0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.859999, 2.565011, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 560:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.929999, -2.260004, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.929999, 2.520010, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 561:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.929999, -2.555011, -0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.869999, 2.605012, -0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 562:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.854999, -2.275004, 0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.939999, 2.365006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 565:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.874999, -1.924998, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.844999, 2.049999, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 566:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.149999, 2.690014, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 567:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.149999, 2.925019, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 568:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.189999, -1.514998, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.444999, 2.160001, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 572:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.434999, -1.039999, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 573:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.984999, -3.360029, -0.389999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.989999, 3.175025, -0.354999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 574:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.679999, -1.199999, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.704999, 1.679998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 575:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.974999, -2.740015, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.029999, 2.265004, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 576:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.974999, -3.205025, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.074999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 578:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.239999, 4.360052, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.309998, -5.560079, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 579:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.219999, 2.395007, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 580:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.219999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 581:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.189999, -1.014999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 582:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.034999, -3.425030, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.089999, 2.505009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 583:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.724999, -1.604998, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.669999, 1.399998, 0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 585:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.159999, 2.900018, 0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, -2.850017, 0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 586:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.394999, -1.234999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.384999, 0.599999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 587:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.560011, 0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.019999, 2.115000, -0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 588:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.039999, -3.945042, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.414998, 3.400030, -0.424999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 589:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.984999, -2.330005, 0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.889999, 2.335005, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 596:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 597:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 598:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 599:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 600:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 601:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.169999, -3.065022, 1.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.179999, 3.130024, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 602:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 603:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 604:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 605:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 608:
				{
					vInfo[vehicleid][JobbIndex1] = 0;
					vInfo[vehicleid][JobbIndex2] = 0;
					DestroyDynamicObject(vInfo[vehicleid][JobbIndex1]);
					DestroyDynamicObject(vInfo[vehicleid][JobbIndex2]);
					return vInfo[vehicleid][JobbIndex] = 0;
				}
				case 609:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.119999, -2.880018, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.314998, 2.660013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
			}
			if(IsTrailerAttachedToVehicle(vInfo[vehicleid][vID]))
			{
				vInfo[vehicleid][JobbTrailer1] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
				//vInfo[vehicleid][JobbTrailer2] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
				switch(GetVehicleModel(GetVehicleTrailer(vInfo[vehicleid][vID])))
				{
					case 435:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 1.019999, -3.950042, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 450:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 1.049999, -3.975043, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 584:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 1.214999, -4.320051, -0.714999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 591:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 1.354998, -3.960043, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 606:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 607:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 610:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 1.104999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 611:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 0.814999, 1.269999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
				}
			}
			vInfo[vehicleid][JobbIndex] = 1;
		}else if(vInfo[vehicleid][JobbIndex] && !kozos)
		{
			/*
			DestroyDynamicObject(vInfo[vehicleid][BalIndex1]);
			DestroyDynamicObject(vInfo[vehicleid][BalIndex2]);
			DestroyDynamicObject(vInfo[vehicleid][BalTrailer1]);
			DestroyDynamicObject(vInfo[vehicleid][BalTrailer2]);
			vInfo[vehicleid][BalIndex1] = 0;
			vInfo[vehicleid][BalIndex2] = 0;
			vInfo[vehicleid][BalTrailer1] = 0;
			vInfo[vehicleid][BalTrailer2] = 0;
			vInfo[vehicleid][BalIndex] = 0;
			*/
			DestroyDynamicObject(vInfo[vehicleid][JobbIndex1]);
			DestroyDynamicObject(vInfo[vehicleid][JobbIndex2]);
			DestroyDynamicObject(vInfo[vehicleid][JobbTrailer1]);
			DestroyDynamicObject(vInfo[vehicleid][JobbTrailer2]);
			vInfo[vehicleid][JobbIndex1] = 0;
			vInfo[vehicleid][JobbIndex2] = 0;
			vInfo[vehicleid][JobbTrailer1] = 0;
			vInfo[vehicleid][JobbTrailer2] = 0;
			vInfo[vehicleid][JobbIndex] = 0;
		}
	}
	if(left)
	{
		if(!vInfo[vehicleid][BalIndex])
		{
			if(!right || !kozos)
			{
				DestroyDynamicObject(vInfo[vehicleid][JobbIndex1]);
				DestroyDynamicObject(vInfo[vehicleid][JobbIndex2]);
				DestroyDynamicObject(vInfo[vehicleid][JobbTrailer1]);
				DestroyDynamicObject(vInfo[vehicleid][JobbTrailer2]);
				vInfo[vehicleid][JobbIndex1] = 0;
				vInfo[vehicleid][JobbIndex2] = 0;
				vInfo[vehicleid][JobbTrailer1] = 0;
				vInfo[vehicleid][JobbTrailer2] = 0;
				vInfo[vehicleid][JobbIndex] = 0;
			}
			vInfo[vehicleid][BalIndex1] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
			vInfo[vehicleid][BalIndex2] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
			switch(GetVehicleModel(vInfo[vehicleid][vID]))
			{
				case 417, 425, 430, 432, 441, 446, 447, 449, 452, 453, 454, 460, 464, 465, 469, 472, 473, 476, 481, 484, 487, 488, 493, 497, 501, 509, 510, 511, 512, 513, 519, 520, 537, 538, 539, 548, 553, 563, 564, 569, 570, 571, 577, 590, 592, 593, 594, 595, 608:
				{
					vInfo[vehicleid][BalIndex1] = 0;
					vInfo[vehicleid][BalIndex2] = 0;
					DestroyDynamicObject(vInfo[vehicleid][BalIndex1]);
					DestroyDynamicObject(vInfo[vehicleid][BalIndex2]);
					return vInfo[vehicleid][BalIndex] = 0;
				}
				case 400:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.929999, -2.275004, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.949999, 2.069999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 401:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.969999, -2.305005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.039999, 2.495009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 402:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.934999, -2.590011, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.999999, 2.565011, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 403:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.549999, -4.195048, -0.719999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.989999, 4.455054, -0.809999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 404:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.819999, -2.720014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.694999, 2.280004, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 405:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.874999, -2.720014, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.874999, 2.325005, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 406:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -2.230003, -5.130069, 0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.924998, 4.985066, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 407:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.999999, -3.515032, 0.070000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.844999, 4.145047, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 408:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, -4.035044, -0.504999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 4.835062, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 409:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.859999, -3.905041, -0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.909999, 3.440031, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 410:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, -2.165001, 0.104999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.879999, 2.150001, 0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 411:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.854999, -2.470008, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.999999, 2.520009, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 412:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.989999, -3.595034, -0.154999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.009999, 2.725014, -0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 413:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.909999, -2.660013, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.954999, 2.570011, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 414:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.104999, -3.405030, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.709999, 2.875018, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 415:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.749999, -2.430008, 0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.924999, 2.495009, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 416:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.369999, -3.665036, 1.459998, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.049999, 2.935019, 0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 418:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.004999, -2.545010, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.984999, 2.360006, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 419:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.929999, -3.005021, -0.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.014999, 2.375006, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 420:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.009999, -2.705014, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.004999, 2.285004, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 421:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.839999, -2.895018, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.909999, 2.530010, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 422:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.914999, -2.470009, -0.259999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.794999, 2.290004, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 423:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.839999, -2.250004, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.774999, 2.325005, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 424:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.749999, -1.619998, 0.240000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.874999, 1.354999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 426:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.645013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.059999, 2.290004, -0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 427:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.934999, -3.925042, 0.339999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.999999, 2.695014, 0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 428:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.924999, -2.965020, 0.175000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.939999, 2.435008, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 429:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.814999, -2.435008, -0.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.799999, 2.275004, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 431:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.039999, -5.810085, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.944999, 5.890087, 0.399999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 433:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.334998, -4.735060, -0.084999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.264999, 3.725037, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 434:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.659999, -1.964998, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.619999, 1.894998, -0.309999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 436:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.889999, -2.485009, 0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.874999, 2.240003, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 437:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.164999, -5.330074, 1.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.194999, 5.560079, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 438:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.064999, -2.520009, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.119999, 2.370006, -0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 439:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.759999, -2.650012, -0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.804999, 2.370006, -0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 440:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.909999, -2.625012, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.979999, 2.565011, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 442:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.024999, -3.125023, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.019999, 2.810016, -0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 443:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.474998, -6.870109, -0.729999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.074999, 5.820085, -1.029999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 444:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.119999, -3.065022, 0.539999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.139999, 2.730014, 0.689999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 445:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.924999, -2.800016, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.939999, 2.335005, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 448:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.180000, -0.999999, -0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.250000, 0.479999, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 451:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.864999, -2.560011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.954999, 1.944998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 455:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.349998, -4.560056, -0.784999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.294999, 3.730037, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 456:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.209999, -4.560056, -0.669999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.944999, 3.360029, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 457:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.509999, -1.294998, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.449999, 1.179999, -0.095000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 458:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.949999, -2.805016, -0.165000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.415007, -0.145000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 459:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.889999, -2.640012, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.580011, -0.085000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 461:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.200000, -1.074999, 0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 462:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.155000, -0.909999, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 463:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.180000, -1.044999, 0.129999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.195000, 0.749999, 0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 466:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.009999, -2.770015, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.904999, 2.625012, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 467:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.924999, -3.025021, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.904999, 2.820017, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 468:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.145000, -0.864999, 0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.245000, 0.494999, 0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 470:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.019999, -2.685013, -0.234999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.054999, 2.160001, 0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 471:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.399999, -0.779999, 0.204999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.364999, 0.764999, 0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 474:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.959999, -2.825016, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.894999, 2.590011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 475:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.859999, -2.825016, -0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.859999, 2.485009, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 477:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.019999, -2.660013, 0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.864999, 2.485009, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 478:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.834999, -2.555010, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.079999, 1.994998, 0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 479:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.939999, -2.755015, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.984999, 2.525010, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 480:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.844999, -2.375006, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.619999, 2.295005, -0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 482:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.859999, -2.565011, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.894999, 2.405007, -0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 483:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.644999, -2.765015, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.794999, 2.610012, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 485:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.664999, -1.444998, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.644999, 1.749998, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 486:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.569999, -3.180025, 1.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.819999, 1.449998, 0.769999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 489:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.119999, -2.655013, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.114999, 2.590011, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 490:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.099999, -3.095023, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.084999, 3.190025, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 491:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.834999, -2.910018, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.829999, 2.500009, -0.099999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 492:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.899999, -2.795016, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.684999, 2.500009, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 494:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.789999, -2.890018, 0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.854999, 2.365006, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 495:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.094999, -2.205002, -0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.109999, 2.365006, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 496:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.934999, -2.125000, 0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.939999, 2.190002, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 498:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.954999, -3.110023, 0.334999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.879999, 3.080023, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 499:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.119999, -3.425030, 0.409999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.779999, 2.495009, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 500:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.739999, -1.969998, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.399999, 2.125001, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 502:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.774999, -2.715014, -0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.859999, 2.605012, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 503:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, -2.840017, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.859999, 2.410007, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 504:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.069999, -2.780015, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.894999, 2.635012, -0.089999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 505:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.074999, -2.625012, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.089999, 2.605012, 0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 506:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.049999, 2.090000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.814999, -2.460008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 507:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.049999, 3.250026, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.024999, -2.845017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 508:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.104999, 3.135024, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.584998, -3.995043, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 514:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.349998, 4.325051, 0.140000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.224999, -4.990066, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 515:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.349998, 4.325051, -0.519999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.299998, -4.990066, -1.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 516:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 517:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 518:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 521:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.204999, 0.674999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 522:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 523:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 524:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.139999, -3.970043, -1.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.644998, 4.080045, -0.319999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 525:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.224999, -3.060022, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.179999, 2.905019, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 526:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.889999, -2.325005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.004999, 2.440008, -0.105000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 527:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.889999, -2.230003, 0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.964999, 2.465008, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 528:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.049999, 2.530010, 0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.134999, -2.640012, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 529:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.044999, 2.610012, 0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.124999, -2.670013, 0.244999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 530:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.474999, -1.874998, 1.314998, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 531:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.419999, 1.579998, -0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 532:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.389998, 3.050022, 1.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.684999, -1.974998, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 533:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.004999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.054999, -2.520010, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 534:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.109999, 2.910019, -0.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.599999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 535:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.934999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 536:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.739999, -3.105023, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 540:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, -2.745015, -0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.944999, 2.585011, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 541:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.724999, -2.400007, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.684999, 2.390007, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 542:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.859999, 2.650013, -0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.689999, -2.960020, -0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 543:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.799999, 2.235003, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.014999, -2.620012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 544:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.729999, 3.720037, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.834999, -3.355029, -0.544999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 545:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.494999, 1.659998, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.829999, -2.064999, -0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 546:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.755015, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.014999, 2.635012, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 547:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.919999, -2.665013, 0.065000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.984999, 2.485009, 0.035000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 549:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.874999, -2.565011, 0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.014999, 2.485009, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 550:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.994999, -2.700014, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.029999, 2.585011, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 551:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.974999, -3.040022, 0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.029999, 2.620012, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 552:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.994999, -3.030021, 0.609999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.104999, 3.090023, 0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 554:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.109999, -2.815016, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.144999, 2.505009, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 555:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.749999, -2.480009, -0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.739999, 2.305005, -0.269999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 556:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.074999, -2.940019, 0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.009999, 2.530010, 0.499999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 557:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.134999, -2.785016, 0.584999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.184999, 2.490009, 0.724999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 558:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.914999, -2.430008, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.919999, 2.170002, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 559:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.864999, -2.300005, 0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.859999, 2.565011, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 560:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.929999, -2.260004, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.929999, 2.520010, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 561:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.929999, -2.555011, -0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.869999, 2.605012, -0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 562:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.854999, -2.275004, 0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.939999, 2.365006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 565:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.874999, -1.924998, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.844999, 2.049999, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 566:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.149999, 2.690014, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 567:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.149999, 2.925019, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 568:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.189999, -1.514998, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.444999, 2.160001, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 572:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.434999, -1.039999, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 573:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.984999, -3.360029, -0.389999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.989999, 3.175025, -0.354999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 574:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.679999, -1.199999, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.704999, 1.679998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 575:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.974999, -2.740015, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.029999, 2.265004, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 576:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.974999, -3.205025, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.074999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 578:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.239999, 4.360052, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.309998, -5.560079, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 579:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.219999, 2.395007, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 580:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.219999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 581:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.189999, -1.014999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 582:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.034999, -3.425030, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.089999, 2.505009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 583:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.724999, -1.604998, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.669999, 1.399998, 0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 585:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.159999, 2.900018, 0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, -2.850017, 0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 586:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.394999, -1.234999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.384999, 0.599999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 587:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.560011, 0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.019999, 2.115000, -0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 588:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.039999, -3.945042, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.414998, 3.400030, -0.424999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 589:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.984999, -2.330005, 0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.889999, 2.335005, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 596:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 597:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 598:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 599:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 600:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 601:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.169999, -3.065022, 1.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.179999, 3.130024, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 602:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 603:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 604:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 605:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 609:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.119999, -2.880018, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.314998, 2.660013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
			}
			if(IsTrailerAttachedToVehicle(vInfo[vehicleid][vID]))
			{
				vInfo[vehicleid][BalTrailer1] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
				//vInfo[vehicleid][JobbTrailer2] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
				switch(GetVehicleModel(GetVehicleTrailer(vInfo[vehicleid][vID])))
				{
					case 435:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -1.019999, -3.950042, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 450:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -1.049999, -3.975043, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 584:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -1.214999, -4.320051, -0.714999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 591:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -1.354998, -3.960043, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 606:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 607:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 610:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -1.104999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 611:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -0.814999, 1.269999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
				}
			}
			vInfo[vehicleid][BalIndex] = 1;
		}else if(vInfo[vehicleid][BalIndex] && !kozos)
		{
			DestroyDynamicObject(vInfo[vehicleid][BalIndex1]);
			DestroyDynamicObject(vInfo[vehicleid][BalIndex2]);
			DestroyDynamicObject(vInfo[vehicleid][BalTrailer1]);
			DestroyDynamicObject(vInfo[vehicleid][BalTrailer2]);
			vInfo[vehicleid][BalIndex1] = 0;
			vInfo[vehicleid][BalIndex2] = 0;
			vInfo[vehicleid][BalTrailer1] = 0;
			vInfo[vehicleid][BalTrailer2] = 0;
			vInfo[vehicleid][BalIndex] = 0;
		}
	}
	Streamer_Update(playerid);
	return true;
}
task KetMasodpercesIdozito[2000]()
{
	foreach(Player,p)
	{
		if(!Belepve(p))
			continue;
	}
	return 1;
}
task OtmasodpercesIdozito[5000]()
{
	//12 egy perc, akkor 120 perc 1440
	ServerInfo[sFHaszon] += 5;
	if(ServerInfo[sFHaszon] >= 1440)//24 - 1440
	{
		ServerInfo[sFHaszon] = 0;
		TeruletHaszon();
	}
	ServerInfo[sBankPenz][1] += 5;//3óránként újratöltés
	if(ServerInfo[sBankPenz][1] == 10800 && ServerInfo[sBankPenz][0] < 45000)
	{
		ServerInfo[sBankPenz][1] = 0;
		ServerInfo[sBankPenz][0] = Rand(45000, 95000);
	}

	if(ServerInfo[sPaintBall][2] > 0)//ha nem lesz jelentkezõ kidobja
	{
		ServerInfo[sPaintBall][2] -= 5;
		if(!ServerInfo[sPaintBall][2])
		{
			foreach(Player, id)
			{
				if(!Belepve(id) || !PlayerInfo[id][pPaintBall][0])
					continue;

				SetPos(id, PosExt( CegInfo[ BIZ_PB ][cPosBe] ), CegInfo[ BIZ_PB ][cPosBe][3]);
				SetVirtualWorld(id, CegInfo[ BIZ_PB ][cVw][0]);
				SetInterior(id, CegInfo[ BIZ_PB ][cInt][0]);

				PaintBallMuvelet(id, 2);
				Freeze(id, NINCS);

				GiveMoney(id,CegInfo[BIZ_PB][cBelepo]);
				SCM(id, COL_MKEK, "Mivel nem jött új játékos a rendszer kirakott a PaintBall elé és visszakaptad a nevezési összeget.");
			}
		}
	}
	if(ServerInfo[sPaintBall][4] > 0)//paintball idõ 900
	{
		ServerInfo[sPaintBall][4] -= 5;
		if(!ServerInfo[sPaintBall][4])
		{
			/*new ppl, pdb, db;// = (ServerInfo[sPaintBall][0] * (CegInfo[BIZ_PB][cBelepo] / 4));
			if(IsPlayerConnected(ServerInfo[sPaintBall][1]) && PlayerInfo[ ServerInfo[sPaintBall][1] ][pPaintBall][0])
				ppl = ServerInfo[sPaintBall][1];
			else
			{*/

			new ppl, pdb, db;
			foreach(Player, idp)
			{
				if(!Belepve(idp) || !PlayerInfo[idp][pPaintBall][0])
					continue;

				db++;
				if(PlayerInfo[idp][pPaintBall][1] > pdb)
				{
					pdb = PlayerInfo[idp][pPaintBall][1];
					ppl = idp;
				}
			}
			//}

			new penz = floatround(db * (CegInfo[BIZ_PB][cBelepo] / 2));
			GiveMoney(ppl,penz);
			CegInfo[BIZ_PB][cKassza] -= penz;

			foreach(Player, id)
			{
				if(!Belepve(id) || !PlayerInfo[id][pPaintBall][0])
					continue;

				SetPos(id, PosExt( CegInfo[ BIZ_PB ][cPosBe] ), CegInfo[ BIZ_PB ][cPosBe][3]);
				SetVirtualWorld(id, CegInfo[ BIZ_PB ][cVw][0]);
				SetInterior(id, CegInfo[ BIZ_PB ][cInt][0]);

				PaintBallMuvelet(id, 2);
				Freeze(id, NINCS);

				SFM(id, COL_MKEK, "A mecss véget ért! A gyõztes "#COL_MKEK"%s"#COL_FEHER" - jutalma: "#COL_MKEK"%s"#COL_FEHER"$", JatekosNev(ppl, true), FN(penz, 0, ','));
			}
		}
	}
	if(ServerInfo[sPaintBall][3] > 0)//pb indítás
	{
		ServerInfo[sPaintBall][3] -= 5;
		if(!ServerInfo[sPaintBall][3])
		{
			foreach(Player, id)
			{
				if(!Belepve(id) || !PlayerInfo[id][pPaintBall][0])
					continue;

				SCM(id, COL_MKEK, "A meccs elindult, 15 perc áll rendelkezésetekre!");
				Freeze(id, NINCS);
			}
		}
	}

	//14percenként hívódik meg, 25óra kell míg egy ültetvény eléri a 100%-ot
	ServerInfo[sDrogSz] += 5;
	if(ServerInfo[sDrogSz] >= 850)
	{
		//printf("Hívódik! (0)");
		new h = -1;
		for(;++h < MAX_HOUSE;)
		{
			if(HazInfo[h][hasznalatban])
			{
				//printf("Hívódik! (1)");
				new d = -1;
				for(;++d < 50;)
				{
					if((HazInfo[h][hDrogMi][d] > 0) && (HazInfo[h][hDrogAllapot][d] < 100))
					{
						/*
							24h = 86400s

							86400 / 5 = 17280 //egy nap alatt ennyiszer hívódik meg
							17280 / 100 = 172,8 > 170
							3,7m -> 1hívás
						*/
						//printf("Hívódik! (2)");
						HazInfo[h][hDrogAllapot][d]++;

						new form[64];

						switch(HazInfo[h][hDrogMi][d])
						{
							case 1: format(form, sizeof(form), "Marihuana");
							case 2: format(form, sizeof(form), "Kokain");
							case 3: format(form, sizeof(form), "Heroin");
						}

						format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%", form, HazInfo[h][hDrogAllapot][d]);
						UpdateDynamic3DTextLabelText(HazInfo[h][hDrogHely][d], 0xFFFFFFFF, form);
					}

					if((HazInfo[h][hDrogAllapot][d] > 99) && (HazInfo[h][hDrogMennyi][d] == 0))
					{
						new form[200];

						switch(HazInfo[h][hDrogMi][d])
						{
							case 1: format(form, sizeof(form), "Marihuana");
							case 2: format(form, sizeof(form), "Kokain");
							case 3: format(form, sizeof(form), "Heroin");
						}

						switch(HazInfo[h][hDrogMi][d])
						{
							case 1: //Marihuana
								HazInfo[h][hDrogMennyi][d] = Rand(2, 5);
							case 2: //Kokain
								HazInfo[h][hDrogMennyi][d] = Rand(2, 5);
							case 3: //Heroin
								HazInfo[h][hDrogMennyi][d] = Rand(2, 5);
						}

						format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%\n"#COL_FEHER"Termés: "#COL_MKEK"%dg", form, HazInfo[h][hDrogAllapot][d], HazInfo[h][hDrogMennyi][d]);
						UpdateDynamic3DTextLabelText(HazInfo[h][hDrogHely][d], 0xFFFFFFFF, form);
					}
				}
			}
		}
		ServerInfo[sDrogSz] = 0;
	}


	new kmh, idx;
	foreach(Jarmuvek, id)
	{
		idx = JarmuID( id, INVALID_PLAYER_ID );
		if(Uzemanyagok[ vInfo[idx][vModel] - 400 ] == 0) continue;
		
		if(vInfo[idx][vHasznalva])
		{
			if(IsABicikli(vInfo[idx][vModel])) continue;
			if(vInfo[idx][vUzemanyag] > 0 && vInfo[idx][vMotorelinditva])
			{
				kmh = GetVehicleSpeed(vInfo[idx][vID]);
				if(kmh > 150)
					vInfo[idx][vUzemanyag] -= 0.3;
				else if(kmh > 125)
					vInfo[idx][vUzemanyag] -= 0.2;
				else
					vInfo[idx][vUzemanyag] -= 0.1;

				vInfo[idx][vKilometer] += (kmh * 0.278);
				/*if((vInfo[idx][vUzemanyag] < 15.0))
				{
					new p_id = GetVehicleDriver(vInfo[idx][vID]);
					if(p_id > NINCS)
						GameTextForPlayer(p_id, "~r~Fogy az üzemanyag!", 3000, 1);
				}*/
			}
			if(vInfo[idx][vUzemanyag] < 1.0 && vInfo[idx][vMotorelinditva])
			{
				vInfo[idx][vMotorelinditva] = false;
				SetJarmu(vInfo[idx][vID], KOCSI_MOTOR, 0);
				if(vInfo[idx][vUzemanyag])
					vInfo[idx][vUzemanyag] = 0.0;

				new p_id = GetVehicleDriver(vInfo[idx][vID]);
				if(p_id > NINCS)
					SCM(p_id, COL_MKEK, "Kifogyott a jármûvedbõl az üzemanyag!");
			}

			new Float:khp;
			GetVehicleHealth(vInfo[idx][vID], khp);
			if(vInfo[idx][vMotorelinditva] && ((100 - (((khp - 350) / 650)) * 100) >= 100))
			{
				vInfo[idx][vMotorelinditva] = false;
				SetJarmu(vInfo[idx][vID], KOCSI_MOTOR, 0);
				new p_id = GetVehicleDriver(vInfo[idx][vID]);
				if(p_id > NINCS)
					SCM(p_id, COL_MKEK, "A jármûved elromlott! Hívj szerelõt! /call 112");
			}
		}
	}
//############################################################# SZERVER ####################################################################
	new real_time[2], date[3];
	gettime( ServerInfo[sRL_Time][3], real_time[0], real_time[1]);
	FixHour( ServerInfo[sRL_Time][3] );
	
	if((ServerInfo[sRL_Time][3] > ServerInfo[sRL_Time][0]) || (ServerInfo[sRL_Time][3] == 0 && ServerInfo[sRL_Time][3] == 23))
	{
		AlapVas();
		Lotto();
		getdate(PosExt(date));
		#if defined KELLDWAYNE
		ServerInfo[sNPCrespawn]++;
		new jatekos = VasarlosNPCK[0];
		if(jatekos != INVALID_PLAYER_ID && IsPlayerNPC(jatekos) && ServerInfo[sNPCrespawn] == 3)
		{
			FegyverNPC(jatekos);
			ServerInfo[sNPCrespawn] = 0;
		}
		#endif
		DatumNap = ServerInfo[sRL_Time][3], format(JelenlegiDatum, 12, "%d-%d-%d", DatumEv, DatumHonap, DatumNap);
		SendFormatMessageToAll(COLOR_MKEK, ""#PREFIX": Jelenleg %d óra van - Dátum: %d-%02d-%02d %02d:%02d ", ServerInfo[sRL_Time][3], PosExt(date));
		ServerInfo[sRL_Time][0] = ServerInfo[sRL_Time][3];
		SetWorldTime( (ServerInfo[sRL_Time][3] + IDO_ELTOLODAS) );
		ServerInfo[sNapszakForce] = false;
		
		CreateBanyaObject(true); //ideiglenesen
	}
	if(ServerInfo[sHarcVan] != NINCS)
	{
	    new terulet = ServerInfo[sHarcVan];

		if(tInfo[terulet][tVarakozasIdo] > 0)
		{
			tInfo[terulet][tVarakozasIdo] -= 5;
			if(tInfo[terulet][tVarakozasIdo] <= 600 && tInfo[terulet][tVarakozasIdo] >= 60 && (tInfo[terulet][tVarakozasIdo] % 60) == 0)
			{
			    foreach(Player, p)
				{
				    if(!Belepve(p)) continue;
					if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tFrakcio])
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: %s megtámadta a(z) %s területeteket!", FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev], tInfo[terulet][tNev]);

						if((tInfo[terulet][tVarakozasIdo] >= 60) && (tInfo[terulet][tVarakozasIdo] % 60 == 0))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: %d perc van hátra a harcig!", (tInfo[terulet][tVarakozasIdo] / 60));
						else if((0 < tInfo[terulet][tVarakozasIdo] < 60) && (tInfo[terulet][tVarakozasIdo] % 15 == 0))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: %d másodperc van hátra a harcig!", tInfo[terulet][tVarakozasIdo]);

						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: Ha nem megy oda legalább egy tagotok akkor %s megszerzi a területet!", FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev]);
						//SendClientMessage(p, COLOR_LIGHTRED, (tInfo[terulet][tTipus] ? ("Fegyveres háború lesz!") : ("Fegyvernélküli háború lesz!")));
					}
					else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: Megtámadtátok a(z) %s területet - A terület jelenleg a(z) %s birtokolja!", tInfo[terulet][tNev], FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev]);

						if((tInfo[terulet][tVarakozasIdo] >= 60) && (tInfo[terulet][tVarakozasIdo] % 60 == 0))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: %d perc van hátra a harcig!", (tInfo[terulet][tVarakozasIdo] / 60));
						else if((0 < tInfo[terulet][tVarakozasIdo] < 60) && (tInfo[terulet][tVarakozasIdo] % 15 == 0))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: %d másodperc van hátra a harcig!", tInfo[terulet][tVarakozasIdo]);

						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: Ha nem mentek harcolni a(z) %s terület %s birtokában marad!", tInfo[terulet][tNev], FInfo[ tInfo[terulet][tHarcolok][VEDOK] ][fNev]);
						//SendClientMessage(p, COLOR_LIGHTRED, (tInfo[terulet][tTipus] ? ("Fegyveres háború lesz!") : ("Fegyvernélküli háború lesz!")));
					}
				}
			}
			else if(tInfo[terulet][tVarakozasIdo] < 60 && tInfo[terulet][tVarakozasIdo] > 0 && (tInfo[terulet][tVarakozasIdo] == 15))
			{
				new vedo, tamado;
				foreach(Player, p)
				{
				    if(!Belepve(p))
						continue;

					if((PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][VEDOK]) && IsPlayerInDynamicArea(p, tInfo[terulet][tArea]))
						vedo++;
					else if((PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK]) && IsPlayerInDynamicArea(p, tInfo[terulet][tArea]))
						tamado++;
				}
				if(vedo < 1)
				{
				    foreach(Player, pl)
					{
						if(PlayerInfo[pl][pFrakcio] == tInfo[terulet][tFrakcio])
							SendFormatMessage(pl, COLOR_LIGHTRED, "Figyelem: Mivel senki sem ment ki, a(z) %s területre ezért a(z) %s megszerezte!", tInfo[terulet][tNev], FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev]);
						else if(PlayerInfo[pl][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
							SendFormatMessage(pl, COLOR_LIGHTRED, "Figyelem: Mivel senki sem védte a(z) %s területet, ezért megszerezték!", tInfo[terulet][tNev]);
					}

					tInfo[terulet][tFrakcio] = tInfo[terulet][tHarcolok][TAMADOK];
					ServerInfo[sHarcVan] = -1;
					tInfo[terulet][tFoglalasIdo] = gettime();
					TeruletFrissites();
				}
				else if(tamado < 1)
				{
				    foreach(Player, p)
					{
						if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tFrakcio])
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: Mivel senki sem jött megtámadni a(z) %s területet, így a tiétek maradt!", tInfo[terulet][tNev]);
						else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: Mivel nem volt támadó, így nem tudták elfoglalni a(z) %s területet!", tInfo[terulet][tNev]);
					}

					ServerInfo[sHarcVan] = -1;
					tInfo[terulet][tFoglalasIdo] = gettime();

				} else {

				    foreach(Player, pl)
					{
						if(((PlayerInfo[pl][pFrakcio] == tInfo[terulet][tFrakcio]) || (PlayerInfo[pl][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])) && IsPlayerInDynamicArea(pl, tInfo[terulet][tArea]))
						{
							SendClientMessage(pl, COLOR_LIGHTRED, "Figyelem! Amelyik csapat elveszti utolsó emberét, az fog veszteni!");
							SendClientMessage(pl, COLOR_LIGHTRED, "Figyelem! A harc 15 másodperces fagyasztás után indul!");
							Freeze(pl, 15000);

							//Fegyver elrakás
							Fegyver(pl, false);

							PlayerInfo[pl][pHarcol] = true;

							new kocsi = GetClosestVehicle(pl);
							if(GetDistanceToVehicle(pl, kocsi) < 7.5)
							{
								if((GetVehicleModel(kocsi) == 487) && (GetVehicleVirtualWorld(kocsi) == 0))
								{
									SetVehicleVirtualWorld(kocsi, WAR_VW);
								}
							}

							SetVirtualWorld(pl, WAR_VW);
							SetPlayerWorldBounds(pl, tInfo[terulet][tMaxPos][0] - 5.0, tInfo[terulet][tMinPos][0] + 5.0, tInfo[terulet][tMaxPos][1] - 5.0, tInfo[terulet][tMinPos][1] + 5.0);
						}
					}

					tInfo[terulet][tHarcFolyik] = true;
					TeruletFrissites();
				}
			}
		}
	}
	foreach(Player, pid)
	{
		if(!Belepve(pid) || IsPlayerNPC(pid))
			continue;

        if(!ServerInfo[sNapszakForce])
			SetPlayerTime(pid, ServerInfo[sRL_Time][3], real_time[0]);

		if(PlayerInfo[pid][pAnimban][0] && !IsPlayerInAnyVehicle(pid))
		    LoopingAnim(pid, "CRACK", "crckidle4", 4.0, 1, 0, 0, 0, 0);

		if(PlayerInfo[pid][pSMkocsi] && !IsPlayerInAnyVehicle(pid))
	    	DestroyVehicle(smkocsiid[pid]);

		UnixTime = gettime();
		new tmp = 0,ido = UnixTime;
		tmp = ido - StatInfo[pid][pRIdo];
		StatInfo[pid][pRIdo] = ido;
		StatInfo[pid][pIdo] += tmp;
		if(PlayerInfo[pid][padmin] && PlayerInfo[pid][pAduty] == true)
			StatInfo[pid][pOnduty] += tmp;

		if(StatInfo[pid][pIdo] >= STAT_MENTES_IDO)
			StatMentes(pid);

		//JatekosNev(playerid, bool:normal = false, bool:real = false)
		if(PlayerInfo[pid][pAlnevbe] == false)
		{
			if(strcmp(PlayerInfo[pid][pNev], JatekosNev(pid, false, true)) && (strlen(PlayerInfo[pid][pNev]) > 0))
				SetPlayerName(pid, PlayerInfo[pid][pNev]);
		}
		else
		{
			SetPlayerName(pid,PlayerInfo[pid][pAlnev]);
		}
		if(!PlayerInfo[pid][pBilincselve] && !Bortonben(pid) && !PlayerInfo[pid][pAduty] && !PlayerInfo[pid][pASduty])
		{
			//Szukseglet(pid, 0.1, 0.03);

			PlayerInfo[pid][pSzuksegletFigy]--;
			if(PlayerInfo[pid][pSzuksegletFigy] < 1)
			{
				//PlayerInfo[pid][pSzuksegletFigy] = 2;
				if(PlayerInfo[pid][pEhseg] >= 100.0 && PlayerInfo[pid][pVizelet] < 100.0)
					SCM(pid, COL_LRED, "Korog a gyomrod, gyorsan egyél valamit mert romlik az egészséged.."), SetHealth(pid, (PlayerInfo[pid][pElet] - 0.5), true, true);
				else if(PlayerInfo[pid][pEhseg] < 100.0 && PlayerInfo[pid][pVizelet] >= 100.0)
					SCM(pid, COL_LRED, "Itt az idõ, hív a természet. Keress gyorsan egy toalettet és könnyíts magadon.."), SetHealth(pid, (PlayerInfo[pid][pElet] - 0.5), true, true);
				else if(PlayerInfo[pid][pEhseg] >= 100.0 && PlayerInfo[pid][pVizelet] >= 100.0)
					SCM(pid, COL_LRED, "Hív a természet és éhes is vagy, egyél valamit és könnyíts magadon.."), SetHealth(pid, (PlayerInfo[pid][pElet] - 0.5), true, true);
			}
		}

		if(PlayerInfo[pid][pFeliratIdo] > 0)
		{
			PlayerInfo[pid][pFeliratIdo] -= 5;
			if(!PlayerInfo[pid][pFeliratIdo])
			{
				FeliratMutat( pid, false );
				SCM(pid, COL_MKEK, "Feliratok kikapcsolva!");
			}
		}

		if(!PlayerInfo[pid][pSzunetel])
		{
			PlayerInfo[pid][pszintlepesmperc] += 5;
			if(!(PlayerInfo[pid][pszintlepesmperc] % 60) && (PlayerInfo[pid][pszintlepesmperc] != 0))
			{
				PlayerInfo[pid][pszintlepesperc]++;
				PlayerInfo[pid][pFizetesIdo]--;

				if(PlayerInfo[pid][pFizetesIdo] < 1)
				{
					PlayerInfo[pid][pFizetesIdo] = FIZETES_IDO;
					//SendClientMessage(pid, COLOR_WHITE, "=========== [ "#COL_MKEK"Fizetési csekk"#COL_FEHER" ] ===========");
					if(PlayerInfo[pid][pBsz] == 0)
						SendClientMessage(pid, COLOR_LIGHTRED, "Mivel nincs bankszámlád, ezért a fizetésed nem került kiutalásra!");
					else
					{
						SendFormatMessage(pid, COLOR_YELLOW, "SMS - Bank: Fizetés: %s $ | Bankszámla: %s $ | Jármû Adó: %d$ | Ház Adó: %d $ | Villanyszámla: %d$", FN(PlayerInfo[pid][pFizetes], 0, ','), FN(PlayerInfo[pid][pBszPenz], 0, ','),AdoResz(pid),HazAdoResz(pid), Villanysz(pid));
						new penz, id = PlayerInfo[pid][pFrakcio];
						if(id)
						{
							if(FInfo[ id ][fPenz] > FInfo[ id ][fFizetes][ PlayerInfo[pid][prang] - 1])//ha van elég pénz a széfben
							{
								penz += FInfo[ id ][fFizetes][ PlayerInfo[pid][prang] - 1];
								FInfo[ id ][fPenz] -= FInfo[ id ][fFizetes][ PlayerInfo[pid][prang] - 1];
								SendFormatMessage(pid, COLOR_YELLOW, "SMS - Bank: Munkahely fizetés: "#COL_MKEK"%s"#COL_FEHER"$", FN(FInfo[ id ][fFizetes][ PlayerInfo[pid][prang] - 1], 0, ','));
							} else
								SendClientMessage(pid, COLOR_YELLOW, "SMS - Bank: Munkahely fizetés: "#COL_MKEK"Nincs"#COL_FEHER" (Nincs elég pénz a széfben!)");
						}

						//SendFormatMessage(pid, COLOR_WHITE, "Jármû Adó: "#COL_MKEK"%d"#COL_FEHER"$", AdoResz(pid));
						//SendFormatMessage(pid, COLOR_WHITE, "Ház Adó: "#COL_MKEK"%d"#COL_FEHER"$", HazAdoResz(pid));
						//SendFormatMessage(pid, COLOR_WHITE, "Villanyszámla: "#COL_MKEK"%d"#COL_FEHER"$", Villanysz(pid));

						PlayerInfo[pid][pBszPenz] -= AdoResz(pid);
						PlayerInfo[pid][pBszPenz] -= HazAdoResz(pid);
						PlayerInfo[pid][pBszPenz] -= Villanysz(pid);

						penz += PlayerInfo[pid][pFizetes];
						PlayerInfo[pid][pBszPenz] += penz;
						PlayerInfo[pid][pFizetes] = 0;
						FizetesHang(pid, 1);
					}
				}
				PlayerInfo[pid][pszintlepesmperc] = 0;
			}

			if(!(PlayerInfo[pid][pszintlepesperc] % 60) && (PlayerInfo[pid][pszintlepesperc] != 0))
			{
				PlayerInfo[pid][pszintlepesora]++;
				PlayerInfo[pid][pJatszottOra]++;
				PlayerInfo[pid][pszintlepesperc] = 0;
				if(PlayerInfo[pid][pSzemelyi])
				{
					PlayerInfo[pid][pSzemelyi]--;
					if(!PlayerInfo[pid][pSzemelyi])
						SCM(pid, COL_MKEK, "Figyelem! A Személyi Igazolványod lejárt!");
				}

				new i = NINCS;
				for(;++i < MAX_ENGEDELY;)
				{
					if(PlayerInfo[pid][pEngedely][i])
					{
						PlayerInfo[pid][pEngedely][i]--;
						if(PlayerInfo[pid][pEngedely][i] < 5 && (i != 0))
							SFM(pid, COL_MKEK, "Figyelem! A "#COL_MKEK"%s"#COL_FEHER" engedélyed már csak "#COL_MKEK"%d"#COL_FEHER" napig((óráig)) érvényes.", VizsgaLista[i][0], PlayerInfo[pid][pEngedely][i]);
					}
				}
			}

			if(PlayerInfo[pid][pszintlepesora] == PlayerInfo[pid][pszintlepeskell])
			{
				PlayerInfo[pid][pjatekosszint]++;
				PlayerInfo[pid][pszintlepeskell] = PlayerInfo[pid][pjatekosszint] * 4;
				PlayerInfo[pid][pszintlepesora] = 0;

				SFM(pid, COL_MKEK, "Gratulálunk, sikeresen szintet léptél! Új szinted: "#COL_MKEK"%d", PlayerInfo[pid][pjatekosszint]);
			}
		}
		if(PlayerInfo[pid][pAS] > gettime())
		{
			if((PlayerInfo[pid][pAS] - gettime()) < 5)
			{
				//0 = melyik channel, 1 = idõ, 2 = admin nézi, 3 = eddig repoltolhat
				PlayerInfo[pid][pReport][1] = NINCS;
				SCM(pid, COL_MKEK, "Az Adminsegéd jogod hamarosan lejár. Köszönjük, hogy segítettél, további kellemes játékot kívánunk.");
				if(PlayerInfo[pid][pTV][0] != NINCS)
				{
					if(!IsScripter(pid) && PlayerInfo[PlayerInfo[pid][pTV][0]][padmin] > PlayerInfo[pid][padmin])
						AdminUzenet(COLOR_LIGHTRED, 0, "%s befejezte %s megfigyelését mert lejárt az Adminsegéd joga!", JatekosNev(pid), JatekosNev(PlayerInfo[pid][pTV][0]));

					PlayerInfo[ PlayerInfo[pid][pTV][0] ][pTV][2] = NINCS;
					PlayerInfo[pid][pTV][0] = NINCS;
                    TogglePlayerSpectating(pid, 0);

					if(PlayerInfo[pid][pinterior] != 0 || PlayerInfo[pid][pvirtualworld] != 0)
						Freeze(pid, 3000);
					else
						Freeze(pid, 1000);

					SetPlayerPos(pid, PlayerInfo[pid][posx], PlayerInfo[pid][posy], PlayerInfo[pid][posz]);
					SetInterior(pid, PlayerInfo[pid][pinterior]);
					SetVirtualWorld(pid, PlayerInfo[pid][pvirtualworld]);
					ShowInfoTextDraw(pid);
				}
				//TogTextDraw(pid, PTD_REPORT, false, false);
			}
		}
		if(GetPlayerAnimationIndex(pid) == 1231)
		{
			if(!GetPlayerSkin(pid))
				SetSkin(pid, 1);

			PlayerInfo[pid][pCheatFigy] ++;
			if(PlayerInfo[pid][pCheatFigy] == 5)
			{
				if(Iter_Count(Adminok) > 0)
				{
					nformat(string, 128, "[AC]: {1E90FF}[%d]%s - Cheat: CJ Futás", pid, JatekosNev(pid));
					AdminUzenetEx(LKEK, 1001, string);
					Log(FILE_CHEAT, string);
					PlayerInfo[pid][pCheatFigy] = 0;

				} else {

					nformat(string, 128, "[AC]: [%d]%s - Cheat: CJ Futás (Kick)", pid, JatekosNev(pid));
					Log(FILE_CHEAT, string);

					//ServerBan(pid, 0, "[AC] CJ Futás", NINCS, (!Belepve(pid) ? true : false), true, true);
					Kick(pid);
					continue;
				}
			}
		} // CJ Futás Check vége
	}
}

stock Time(const mikell[])
{
	new
		masodperc, perc, ora,
		nap, honap, ev;

	new ido;

	gettime(ora, perc, masodperc);
	getdate(ev, honap, nap);

	if(!strcmp("mp", mikell))
		ido = masodperc;
	if(!strcmp("perc", mikell))
		ido = perc;
	if(!strcmp("ora", mikell))
		ido = ora;
	if(!strcmp("nap", mikell))
		ido = nap;
	if(!strcmp("honap", mikell))
		ido = honap;
	if(!strcmp("ev", mikell))
		ido = ev;
	return ido;
}

stock Freeze(playerid, ido = 0)
{
	TogglePlayerControllable(playerid, (ido == NINCS ? true : false));

	if(ido > 0)
		defer UnFreeze[ido](playerid);

	return true;
}

timer UnFreeze[1000](playerid)
{
	TogglePlayerControllable(playerid, true);
	return true;
}
fpublic Lotto()
{
	new lotto = Rand(0,99);
	foreach(Player, p)
	{
		if(!Belepve(p))
			continue;

		new nyertes = -1;
		if(PlayerInfo[p][pLottounix] == lotto)
		{
			new nyeremeny = Rand(100000,150000);
			SFM(p,COL_VZOLD,"Gratulálunk, ön megnyerte a fonyereményt, ami %d$! Az összeget átutaltuk a bankszámlájára!",nyeremeny);
			SendFormatMessageToAll(COLOR_MKEK,"Lottó: {FFFFFF}%s megnyerte a lottót! A kihúzott szám: %d! Gratulálunk neki!",JatekosNev(p),lotto);
			PlayerInfo[p][pBszPenz] += nyeremeny;
			nyertes = p;
		}
		else if(PlayerInfo[p][pLottounix] != NINCS)
		{
			SCM(p, COL_LRED,"Sajnos most nem nyertél a lottón..");
		}
		if(nyertes == -1) { SendFormatMessage(p,COLOR_MKEK,"Lottó: {FFFFFF}Sajnos most nem volt nyertes - Kihúzott számunk: %d",lotto); }
		PlayerInfo[p][pLottounix] = NINCS;
	}
}

timer Sokk[5000](playerid)
{
	PlayerInfo[playerid][pSokk] = 0;
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	SCM(playerid, COL_LRED, "Elmúlt a sokk hatása");
	return true;
}
timer Box[60000](playerid)
{
	SCM(playerid, COL_VZOLD, "Megtanultál Boxolni!");
	ClearAnimations(playerid);
	PlayerInfo[playerid][pBox] = 1;
	TogglePlayerControllable(playerid, true);
	PlayerInfo[playerid][pHarcstilusTanul] = false;
	return true;
}

timer Grabkick[60000](playerid)
{
	SCM(playerid, COL_VZOLD, "Megtanultál Grabkickelni!");
	ClearAnimations(playerid);
	PlayerInfo[playerid][pGrabkick] = 1;
	TogglePlayerControllable(playerid, true);
	PlayerInfo[playerid][pHarcstilusTanul] = false;
	return true;
}

timer Elbow[60000](playerid)
{
	SCM(playerid, COL_VZOLD, "Megtanultál Elbowolni!");
	ClearAnimations(playerid);
	PlayerInfo[playerid][pElbow] = 1;
	TogglePlayerControllable(playerid, true);
	PlayerInfo[playerid][pHarcstilusTanul] = false;
	return true;
}

timer Kungfu[60000](playerid)
{
	SCM(playerid, COL_VZOLD, "Megtanultál Kungfuzni!");
	ClearAnimations(playerid);
	PlayerInfo[playerid][pKungfu] = 1;
	TogglePlayerControllable(playerid, true);
	PlayerInfo[playerid][pHarcstilusTanul] = false;
	return true;
}

timer Kneehead[60000](playerid)
{
	SCM(playerid, COL_VZOLD, "Megtanultál Kneeheadelni!");
	ClearAnimations(playerid);
	PlayerInfo[playerid][pKneehead] = 1;
	TogglePlayerControllable(playerid, true);
	PlayerInfo[playerid][pHarcstilusTanul] = false;
	return true;
}

task FelmasodpercesIdozito[500]()
{
	UpdateCameras();
}

task MasodpercesIdozito[1000]()
{
	new weapons[2], TD_tmp[1024 + 1],mellek[256],	sk, Float:pos[3], Float:cpos[3], bool:van[2], str[128],	targetplayer;
	if(BankIdo > 0)
	{
		BankIdo--;
		if(BankIdo == 0)
		{
			ClearAnimations(BankBotok[bankNPCID]);
			BankBotok[bankAnim] = false;
			BankInfo[bBankInditva] = false;
			BankLezerBetoltes(true, true);
			BankInfo[bBankElocsarnok] = Rand(10000, 99999);
		}
	}
	if(ServerInfo[sBankrob] > 0)
	{
		ServerInfo[sBankrob]--;
		if(ServerInfo[sBankrob] == 0)
		{
			ServerInfo[sBankrob] = 0;
			ClearAnimations(BankBotok[bankNPCID]);
			BankBotok[bankAnim] = false;
			BankInfo[bBankInditva] = false;
			BankLezerBetoltes(true, true);
			BankInfo[bBankElocsarnok] = Rand(10000, 99999);
		}
	}

	foreach(Player, p)
	{
		if(!Belepve(p))
			continue;

		/*if(BevasarloKosar[p][1] != NINCS && Korozes[p][krSzint] == 0)
		{
		    Korozes_Kiad(p, INVALID_PLAYER_ID, "Lopás", 5);
		}*/
		if(!IsPlayerInAnyVehicle(p) && Billentyu[p] != NINCS)
		{
			Billentyu[p] = NINCS;
			BillentyuHatra[p] = NINCS;
			MunkaFolyamatban[p] = 0;
			SCM(p,COL_LRED,"Mivel elhagytad a jármûvet ezért a jármû ellopása sikertelen volt!");
		}
		if(FInfo[PlayerInfo[p][pFrakcio] ][fLegalis] == FK_REND || IsHitman(p))
		{
			if(PlayerInfo[p][pUjPancel] > 0)
			{
				if(PlayerInfo[p][ArmorObjFenn] == false && KompatibilisSkin(GetPlayerSkin(p)))
				{
					Melleny(p, 1);
				}
			}	else	{
				if(PlayerInfo[p][ArmorObjFenn] == true)
				{
					Melleny(p, 0);
					SCM(p,COL_SARG,"A mellényed tönkrement!");
				}
			}
		}
		if(Leutve[p] > 0)
		{
			Leutve[p]--;
			if(Leutve[p] == 0)
			{
				Leut(p,0);
			}
		}
		if(PlayerInfo[p][pNemolheto] > 0)
		{
			PlayerInfo[p][pNemolheto]--;
		}
		if(Azonositas[p] > 0)
		{
			Azonositas[p]--;
			if(Azonositas[p] == 0 && !Belepett[p])
			{
				AdminUzenet(LKEK,1,"%s nem azonosította magát ezért ki lett rúgva a szerverrõl!",JatekosNev(p, false, true));
				Kick(p);
			}
		}
		if(PlayerInfo[p][pECMD] > 0)
		{
			PlayerInfo[p][pECMD]--;
		}
		for(new i=1;i<MAXHIFI;i++)
		{
			if(IsPlayerInRangeOfPoint(p, 6.0, HifiInfo[i][hX], HifiInfo[i][hY], HifiInfo[i][hZ]))
			{
				if(HifiInfo[i][hX] != 0 && HifiInfo[i][hY] != 0 && HifiInfo[i][hZ] != 0)
				{
					if(!egyezik(HifiInfo[i][hURL],HifiZene[p]) && !egyezik(HifiInfo[i][hURL],"-"))
					{
						StopAudioStreamForPlayer(p);
						PlayAudioStreamForPlayer(p, HifiInfo[i][hURL],HifiInfo[i][hX], HifiInfo[i][hY], HifiInfo[i][hZ],20.0,1);
						strmid(HifiZene[p],HifiInfo[i][hURL],0,strlen(HifiInfo[i][hURL]),256);
					}
				}
			}
		}
		if(PlayerInfo[p][ptraffipax] == true)
		{
			if(!IsPlayerInAnyVehicle(p) || GetVehicleSpeed(GetPlayerVehicleID(p)) > 10) // kész
			{
				SendClientMessage(p, -1, "A traffipax {ff0000}lekapcsolt!");
				PlayerInfo[p][ptraffipax] = false;
				DestroyDynamic3DTextLabel( vehicle3Dtext[ p ] );
				return false;
			}
			new jatekos = GetClosestPlayerTrafi(p);
			if(IsPlayerInAnyVehicle(jatekos))
			{
			    if(TrafiBuntetheto[jatekos] == 0)
			    {
					new rendszam[128], seb[128];
					new car = GetPlayerVehicleID(jatekos);
					new vid = JarmuID(car, jatekos);
					new sebesseg = GetVehicleSpeed(car);
					if(sebesseg < 1) return true;
					format(rendszam, sizeof(rendszam), "A közeli jármû rendszáma: {00ff59}See-%d", vid);
					format(seb, sizeof(seb), "Sebessége: {ff0000}%d{ffffff} km/h", sebesseg);
					SendClientMessage(p, -1, "____traffipax EREDMÉNY____");
					SendClientMessage(p, -1, rendszam);
					SendClientMessage(p, -1, seb);//pina

					if(!PlayerInfo[jatekos][pAduty] && !PlayerInfo[jatekos][pASduty] && !PlayerInfo[jatekos][pDuty])
    				{
						if(sebesseg > 50)
						{
							new buntetes = sebesseg*3;
							PlayerInfo[jatekos][ppenz] -= buntetes;
							FInfo[ FRAKCIO_LSPD ][fPenz] += buntetes;
							SendFormatMessage(p,RSARG,"Büntetése: %d$",buntetes);
							SCM(jatekos, COL_VKEK,"Elkapott a traffipax!");
							TrafiBuntetheto[jatekos] = 1;
							defer Trafibuntethet[5000](jatekos);
							SendFormatMessage(jatekos,RSARG,"Büntetés: %d$",buntetes);
						}
					}
					TrafiBuntetheto[jatekos] = 1;
					defer Trafibuntethet[5000](jatekos);
				}
				return true;
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(p,65,1171.6571,-1662.3842,22.2744))
		{
			if(!egyezik(SweetRadio,HifiZene[p]) && !egyezik(SweetRadio,"-"))
			{
				StopAudioStreamForPlayer(p);
				PlayAudioStreamForPlayer(p, SweetRadio,1171.6571,-1662.3842,22.2744,65.0,1);
				strmid(HifiZene[p],SweetRadio,0,strlen(SweetRadio),256);
			}
		}
		if(AntiFlood[p] > 0)
		{
			AntiFlood[p]--;
		}
		if(Bejelzett[p] > 0)
		{
			Bejelzett[p]--;
		}
		if(NPCFloodVedelem[p] > 0)
		{
			NPCFloodVedelem[p]--;
			if(NPCFloodVedelem[p] == 0)
			{
				SCM(p,COL_VZOLD,"Újra beszélhetsz az NPCvel!");
			}
		}
		if(PlayerInfo[p][pNPCSzobaAll][0] > 0)
		{
			PlayerInfo[p][pNPCSzobaAll][0]--;
			if(PlayerInfo[p][pNPCSzobaAll][0] == 0)
			{
				SCM(p,COL_VZOLD,"Újra vásárolhatsz fegyvert az NPCtõl!");
			}
		}
		if(PenztRabol[p] == 1)
		{
			new randomo = Rand(150, 160);
			if(PlayerInfo[p][pBMennyi] >= 10000)
			{
				TogglePlayerControllable(p, true);
				SCM(p, COL_MKEK, "Befejezted a pénz pakolását!");
				PenztRabol[p] = 0;
				SetPlayerAttachedObject(p, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
				DestroyDynamicObject(PlayerInfo[p][pHatizsakO]);
				return true;
			}

			if(ServerInfo[sBankPenz][0] - randomo <= 0)
			{
				TogglePlayerControllable(p, true);
				SCM(p, COL_MKEK, "Befejezted a pakolást, mert nincs több pénz a széfben.");
				PenztRabol[p] = 0;
				SetPlayerAttachedObject(p, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
				DestroyDynamicObject(PlayerInfo[p][pHatizsakO]);
				return true;
			}
			PlayerInfo[p][pBMennyi] += randomo;
			ServerInfo[sBankPenz][0] -= randomo;

			SFM(p, COL_VZOLD, "Táskába sikeresen bepakoltál %s$-ot!", FN(randomo, 0, ','));
		}
		Firka_OnPlayerUpdate(p);
		if(GPSFloodolas[p] > 0)
		{
			GPSFloodolas[p]--;
		}
		if(PlayerInfo[p][pTiltasok][TILTAS_FRAKCIO] > 0)
		{
			PlayerInfo[p][pTiltasok][TILTAS_FRAKCIO]--;
			if(PlayerInfo[p][pTiltasok][TILTAS_FRAKCIO] == 0)
			{
				SCM(p,COL_MKEK,"Lejárt a Frakció tiltásod!");
			}
		}
		if(PlayerInfo[p][pTiltasok][TILTAS_REPORT] > 0)
		{
			PlayerInfo[p][pTiltasok][TILTAS_REPORT]--;
			if(PlayerInfo[p][pTiltasok][TILTAS_REPORT] == 0)
			{
				SCM(p,COL_MKEK,"Lejárt a Report tiltásod!");
			}
		}
		if(PlayerInfo[p][pTiltasok][TILTAS_FEGYVER] > 0)
		{
			PlayerInfo[p][pTiltasok][TILTAS_FEGYVER]--;
			if(PlayerInfo[p][pTiltasok][TILTAS_FEGYVER] == 0)
			{
				SCM(p,COL_MKEK,"Lejárt a Fegyver tiltásod!");
			}
		}
		if(PlayerInfo[p][pTiltasok][TILTAS_AUTO] > 0)
		{
			PlayerInfo[p][pTiltasok][TILTAS_AUTO]--;
			if(PlayerInfo[p][pTiltasok][TILTAS_AUTO] == 0)
			{
				SCM(p,COL_MKEK,"Lejárt a Autó tiltásod!");
			}
		}
		if(PlayerInfo[p][pTiltasok][TILTAS_AS] > 0)
		{
			PlayerInfo[p][pTiltasok][TILTAS_AS]--;
			if(PlayerInfo[p][pTiltasok][TILTAS_AS] == 0)
			{
				SCM(p,COL_MKEK,"Lejárt a AS tiltásod!");
			}
		}
		if(PlayerInfo[p][pRabolhat] > 0)
		{
		    PlayerInfo[p][pRabolhat]--;
		    if(PlayerInfo[p][pRabolhat] == 0)
		    {
		        SCM(p, COL_VZOLD,"Újra rabolhatsz!");
		        PlayerInfo[p][pRabolhat] = NINCS;
		    }
		}
		if(PlayerInfo[p][pLophat] > 0)
		{
		    PlayerInfo[p][pLophat]--;
		    if(PlayerInfo[p][pLophat] == 0)
		    {
		        SCM(p, COL_VZOLD,"Újra lophatsz jármûvet!");
		        PlayerInfo[p][pLophat] = NINCS;
		    }
		}
		if(PlayerInfo[p][pAduty] == false && !Admin(p,FOADMIN_SZINT))
		{
			if(CsomagtartoAFK[p] > MAXAFK || PlayerInfo[p][pAfkIdo] > MAXAFK)
			{
				if(AFKDialogShowing[p] == 0)
				{
					AFKDialogShowing[p] = 1;
					ShowPlayerDialog(p, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "{FF0000}Anti AFK", "Haló, ittvagy?\n{FF0000}Ha 20mp-ne belül nem reagálsz, kickellek!", "Igen", "Nem");
					PlayerTimers[p][PT_AFK] = defer AFKKick[20000](p);
				}
			}
		}
		if(PlayerInfo[p][pPisil] == true)
		{
			Szukseglet(p, 0.0, -3.5);
			if(PlayerInfo[p][pVizelet] <= 0.0)
			{
				PlayerInfo[p][pPisil] = false;
				Cselekves(p,"könnyített magán...",0);
				PlayerInfo[p][pVizelet] = 0.0;
				SetPlayerSpecialAction(p, 0);
			}
		}
		new fid = PlayerInfo[p][pFegyver];
		if(fid == 22 || fid == 23 || fid == 24 || fid == 25 || fid == 26 || fid == 27 || fid == 28 || fid == 29 || fid == 30 || fid == 31 || fid == 32 || fid == 33 || fid == 34)
		{
			targetplayer = GetPlayerTargetPlayer(p);
			if((targetplayer != INVALID_PLAYER_ID) && (GetPlayerDistanceFromPlayer(p, targetplayer) < 8.0) && IsPlayerNPC(targetplayer))
			{
				if(targetplayer == BankBotok[bankNPCID])
				{
					if(ServerInfo[sBankrob] > 0)
					{
						new uzenet1[128];
						format(uzenet1,128,"A bankot nemrégiben rabolták, ezért még nem rabolhatod!\nLátogass vissza %d perc múlva!",ServerInfo[sBankrob]/60);
						Info_Dialog(p, "Jelenleg nem rabolható!", uzenet1);

						return 1;
					}
					if(BankInfo[bBankInditva] == true)
					{
						Info_Dialog(p, "Jelenleg nem rabolható!", "Jelenleg is Rabolják!!");
						return 1;
					}
				}
				if(!BankBotok[bankAnim] && (targetplayer != INVALID_PLAYER_ID) && (targetplayer == BankBotok[bankNPCID]))
				{
					if(ServerInfo[sBankrob] > 0)
					{
						new uzenet1[128];
						format(uzenet1,128,"A bankot nemrégiben rabolták, ezért még nem rabolhatod!\nLátogass vissza %d perc múlva!",ServerInfo[sBankrob]/60);
						ShowPlayerDialog(p,NINCS,DIALOG_STYLE_MSGBOX,"Jelenleg nem rabolható!",uzenet1,"OK","");
						return 1;
					}
					if(OnlineTagok(FRAKCIO_LSPD) >= BOLT_RABOLHATO)
					{
							BankBotok[bankAnim] = true;
							LoopingAnim(targetplayer, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0);
							ShowPlayerDialog(p, DIALOG_BANKROB, DIALOG_STYLE_MSGBOX, "Bankrablás", "Biztos vagy benne, hogy kiakarod rabolni a bankot?", "Igen", "Nem");
					} else
						Info_Dialog(p, "Jelenleg nem rabolható!", "Sajnálom de jelenleg nincs elegendõ Online rendõr\nahhoz, hogy kirabolhasd. Látogass vissza késõbb!");
				}
				if(PlayerInfo[p][pRabolhat] == NINCS)
				{
					new bo = -1;
					for(;++bo < sizeof(BoltBot);)
					{
						if((targetplayer != INVALID_PLAYER_ID) && (targetplayer == BoltRablas[bo][npcID]) && BoltRablas[bo][npcRabolhato])
						{
							if(OnlineTagok(FRAKCIO_LSPD) >= BOLT_RABOLHATO)
							{
								if(BoltRablas[bo][npcRabolva] > gettime())
								{
									new form[128];
									format(form, sizeof(form), #COL_FEHER"Sajnálom de ez a bolt nem rég volt kirabolva\nezért még várnod kell"#COL_MKEK"%d percet"#COL_FEHER",\nhogy kirabolhasd!", ((BoltRablas[bo][npcRabolva] - gettime()) / 60));
									Info_Dialog(p, "Nem rég kivolt rabolva", form);
								}
								else if(!BoltRablas[bo][npcAnim] && (BoltRablas[bo][npcKicsoda] == -1))
								{
									LoopingAnim(targetplayer, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0);
									BoltRablas[bo][npcAnim] = true;

									BoltRablas[bo][npcKicsoda] = p;
									BoltRablas[bo][npcRabolas] = true;
									ShowPlayerDialog(p, DIALOG_BOLTROB, DIALOG_STYLE_MSGBOX, "Biztos kiakarod rabolni?", "Biztos vagy abban, hogy kiakarod rabolni ezt a boltot?", "Igen", "Nem");
								}
							} else
								Info_Dialog(p, "Jelenleg nem rabolható!", "Sajnálom de jelenleg nincs elegendõ Online rendõr\nahhoz, hogy kirabolhasd. Látogass vissza késõbb!");
						}
					}
				}
				else
					SFM(p,COL_LRED,"Még nem rabolhatsz! Várnod kell %d másodpercet",PlayerInfo[p][pRabolhat]);
			}
		}

		/* --------------- AFK Updater ------------------*/
		if(HazabanVan(p) == NINCS)
		{
			PlayerInfo[p][pAfkIdo]++;
			if(PlayerInfo[p][pAfkIdo] > 60 && !PlayerInfo[p][pSzunetel]) CallLocalFunction("OnPlayerPause", "dd", p, 1);
			if(PlayerInfo[p][pSzunetel])
				UpdateDynamic3DTextLabelText(PlayerInfo[p][pAFK_text], LKEK, (format(uzenet, sizeof(uzenet), "[AFK: %s]", TimeFormat( PlayerInfo[p][pAfkIdo], true )), uzenet));
		}
		if(GetPlayerMoney(p) > 0)
		{
			ResetPlayerMoney(p);
		}
		if(CsipogoIdo[p] > 0)
		{
			CsipogoIdo[p] --;
			if(CsipogoIdo[p] <= 0)
			{
				CsipogoIdo[p] = 0;
				SCM(p,COL_LRED,"Lejárt a csipogó jele!");
				foreach(Player, c)
				{
					SetPlayerMarkerForPlayer(c, p, COLOR_INVISIBLE);
				}
			}
		}
		if(NumPlayerWeapons(p) > 1)
		{
			nformat(string, 128, "[AC]:{1E90FF} [%d]%s - Cheat: Fegyver[1] - Több fegyver (%s)", p, JatekosNev(p), (Admin(p, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
			AdminUzenetEx(LKEK, 1001, string);
			Log(FILE_CHEAT, string);
			ResetPlayerWeapons(p);

			if(!Admin(p, FOADMIN_SZINT))
				ServerBan(p, 0, "[AC] Fegyver Cheat[1]", NINCS, (!Belepve(p) ? true : false), true, true);

			continue;
		}
		GetPlayerWeaponData(p, 0, weapons[0], weapons[1]);
		if(!weapons[0] && weapons[1] > 0)
		{
			nformat(string, 128, "[AC]:{1E90FF} [%d]%s - Cheat: Fegyver[2] - [%d]%s (%s)", p, JatekosNev(p),  weapons[0], aWeaponNames[weapons[0]], (Admin(p, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
			AdminUzenetEx(LKEK, 1001, string);
			Log(FILE_CHEAT, string);

			ResetPlayerWeapons(p);
			if(!Admin(p, FOADMIN_SZINT))
				ServerBan(p, 0, "[AC] Fegyver Cheat[2]", NINCS, (!Belepve(p) ? true : false), true, true);

			continue;
		}

		if(!PlayerInfo[p][pSzunetel])
		{
			if(PlayerInfo[p][pCarEntering] > 0)
				PlayerInfo[p][pCarEntering]--;

			if(PlayerInfo[p][pCarFloodTime] > 0)
			{
				PlayerInfo[p][pCarFloodTime]--;
				if(PlayerInfo[p][pCarFloodTime] == 0)
					PlayerInfo[p][pCarFlood] = 0;
			}

			if(PlayerInfo[p][pFakeKill][1] > 0)
			{
				PlayerInfo[p][pFakeKill][0]--;
				if(!PlayerInfo[p][pFakeKill][0])
					PlayerInfo[p][pFakeKill][1] = 0;
			}

			if(PlayerInfo[p][pCarTeleportTime] > 0)
			{
				PlayerInfo[p][pCarTeleportTime]--;
				if(PlayerInfo[p][pCarTeleportTime] == 0)
					PlayerInfo[p][pCarTeleportFlood] = 0;
			}

			if(PlayerInfo[p][pVehiclePosUpdated])
				PlayerInfo[p][pVehiclePosUpdated] = false;

			//if(PlayerInfo[p][pJailIdo] > 0)
			if((Bortonben(p) != 0) && (PlayerInfo[p][pJailIdo] > 0))
			{
				PlayerInfo[p][pJailIdo]--;
				if(PlayerInfo[p][pJailIdo] == 1)
					Borton(p, 0);
				else
					Borton(p, 100);//szökés check
			}

			if(PlayerInfo[p][pSpawnVedelem] > 0)
				PlayerInfo[p][pSpawnVedelem]--;

			if(PlayerInfo[p][pBilincsIdo] > 0)
			{
				PlayerInfo[p][pBilincsIdo] --;
				if(PlayerInfo[p][pBilincsIdo] <= 0)
					Bilincs(p, 0);
			}
		}

		if(PlayerInfo[p][pDrogMuvelet][3] < gettime() && PlayerInfo[p][pDrogMuvelet][3] != 0)
		{
			PlayerInfo[p][pDrogMuvelet][0] = 0;
			PlayerInfo[p][pDrogMuvelet][2] = 0;
			PlayerInfo[p][pDrogMuvelet][3] = 0;
			PlayerInfo[p][pDrogMuvelet][4] = 0;
		}

		if(PlayerInfo[p][pVizsga][2])
		{
			PlayerInfo[p][pVizsga][2]--;
			if(!PlayerInfo[p][pVizsga][2])
			{
				PlayerInfo[p][pVizsga][1] = 0; //melyik vizsga
				PlayerInfo[p][pVizsga][0] = 0; // viszga cp hol tart
				PlayerInfo[p][pVizsga][2] = 0;//max vizsga idõ
				PlayerInfo[p][pCP] = 0;
				DisablePlayerCheckpoint(p);
				SCM(p, COL_LRED, "Sajnálom kedves vizsgázó, de az idõd letelt, ezért a megkezdett vizsgád sikertelen!");

				if(PlayerInfo[p][pJarmuben] && vInfo[ PlayerInfo[p][pJarmuben] ][vMunka] == 101)//oktatós jármû
				{
					SetVehicleToRespawn( vInfo[ PlayerInfo[p][pJarmuben] ][vID] );
				}
			}
		}

		if(PlayerInfo[p][pVisz] != NINCS && !IsPlayerNPC(PlayerInfo[p][pVisz]))
		{
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(p, X, Y, Z);

			SetPos(PlayerInfo[p][pVisz], (X+0.5), Y, Z);
			SetInterior(PlayerInfo[p][pVisz], GetPlayerInterior(p));
			SetVirtualWorld(PlayerInfo[p][pVisz], GetPlayerVirtualWorld(p));
		}
		/* Textdrawupdate */
		if(!PlayerInfo[p][pSzunetel])
		{
			UpdatePlayerInfo(p);
			format(TD_tmp, sizeof(TD_tmp), "%09d$", KPegyenleg(p));
			PlayerTextDrawSetString(p, g_PlayerTextDraw[p][ptd_Penz], TD_tmp);
			TD_tmp[0] = EOS;

			FormatTextDraw(TD_tmp, mellek, "%s_(%d)~n~Szint:_%d_(még_%d_óra)~n~Bankban:_%s$", JatekosNev(p), p, PlayerInfo[p][pjatekosszint], (PlayerInfo[p][pszintlepeskell] - PlayerInfo[p][pszintlepesora]), FN(PlayerInfo[p][pBszPenz],0,','));

			if((Bortonben(p) != 0) && (PlayerInfo[p][pJailIdo] > 0))
				FormatTextDraw(TD_tmp, mellek, "~n~%s:_%dmp", BortonNev(PlayerInfo[p][pjail]), PlayerInfo[p][pJailIdo]);

			if(PlayerInfo[p][pHatizsak])
				FormatTextDraw(TD_tmp, mellek, "~n~Hátizsák:_%d$", PlayerInfo[p][pBMennyi]);

			PlayerTextDrawSetString(p, g_PlayerTextDraw[p][ptd_Adatok], TD_tmp);

			if(IsPlayerInAnyVehicle(p) && !GetPlayerVehicleSeat(p) && !PlayerInfo[p][pSMkocsi])
			{
				if(!PlayerInfo[p][pJarmuben]) {
					PlayerInfo[p][pJarmuben] = JarmuID(GetPlayerVehicleID(p), p);
					UpdateVehicleInfo( p, PlayerInfo[p][pJarmuben] );
				} else {
					UpdateVehicleInfo( p, PlayerInfo[p][pJarmuben] );
					vInfo[ PlayerInfo[p][pJarmuben] ][vKilometer] += GetVehicleSpeed( vInfo[ PlayerInfo[p][pJarmuben] ][vID] )*0.278;
				}

				if(!PlayerInfo[p][pJarmuTDMutat]) {
					ShowVehicleTextDraw(p);
					PlayerInfo[p][pJarmuTDMutat] = true;
				}
			}
			if(PlayerInfo[p][pPisil])
			{
				Szukseglet(p, 0.0, -5.0);
				if(PlayerInfo[p][pVizelet] <= 0.0)
				{
					PlayerInfo[p][pVizelet] = 0.0;
					PlayerInfo[p][pPisil] = false;
					SetPlayerSpecialAction(p, SPECIAL_ACTION_NONE);
				}
			}
		}
		/*---------------- Tûz rendszer - check ---------------*/
		if(ServerInfo[sTuzVan] && ServerInfo[sTuzIdo][0] > 0)
		{
			sk = GetPlayerSkin(p);
			for(new t = 0; t < TUZ_MAX; t++)
			{
				if(!Tuz[t][tuzAktiv]) continue;
				if((GetDistanceToPointEx(p, PosExt(Tuz[t][tPoz])) < TUZ_SERULES_TAV) && sk != 277 && sk != 278 && sk != 279 && sk != 219)
				{
					SetHealth(p, (PlayerInfo[p][pElet] - TUZ_SERULES));
					SCM(p, COL_LRED, "Vigyázz!! Még a végén megégsz! Menj a tûz közelébõl!");
				}

				if(PlayerInfo[p][pTuzetOlt] && PlayerInfo[p][pFrakcio] == FRAKCIO_LAFD)
				{
					van[1] = false;
					if(IsPlayerInAnyVehicle(p) && !GetPlayerVehicleSeat(p))
					{
						GetPlayerCameraPos(p, PosExt(cpos));
						GetVehiclePos(vInfo[ PlayerInfo[p][pJarmuben] ][vID], PosExt(pos));
						if(
							(GetDistance(PosExt(cpos), PosExt(Tuz[t][tPoz])) < 30.0) &&
							(vInfo[ PlayerInfo[p][pJarmuben] ][vModel] == 407) &&
							(GetDistance(PosExt(pos), PosExt(Tuz[t][tPoz])) < 35.0)
						)
							van[1] = true;
					}

					GetXYZInFrontOfPlayer(p, PosExt(pos), 1.0);
					if((GetDistance(PosExt(pos), PosExt(Tuz[t][tPoz])) < TUZ_OLTO_TAV) || van[1] )
					{
						if(!van[1]) Tuz[t][tHP]--;
						else Tuz[t][tHP]-= 3;

						if(Tuz[t][tHP] > 0)
						{
							format(str, 128, "[ %d / %d ]", Tuz[t][tHP], Tuz[t][tMaxHP]);
							UpdateDynamic3DTextLabelText(Tuz[t][tFelirat], COLOR_MKEK, str);
							Streamer_Update(p);

						} else {

							DestroyDynamic3DTextLabel(Tuz[t][tFelirat]);
							DestroyDynamicMapIcon(Tuz[t][tMap]);

							for(new o = 0; o < TUZ_OBJECT; o++)
								DestroyDynamicObject(Tuz[t][tObject][o]);

							Tuz[t][tuzAktiv] = false;
							for(new b = 0; b < TUZ_MAX; b++)
							{
								if(Tuz[b][tuzAktiv])
								{
									van[0] = true;
									break;
								}
							}

							if(!van[0])
							{
								format(str, sizeof(str), "===================== [ "#COL_FEHER"Felhívás"#COL_LRED" ] =====================");
								FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_LAFD, str);
								format(str, sizeof(str), "Sikeresen eloltottátok a tüzet! A jutalom nem marad el, az államtól %s$-rt kaptatok.", FN(ServerInfo[sTuzPenz], 0, ','));
								FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LAFD, str);

								FInfo[ FRAKCIO_LAFD ][ fPenz ] += ServerInfo[sTuzPenz];
								ServerInfo[sTuzIdo][1] = Rand(TUZ_IDO_MIN, TUZ_IDO_MAX); //mikor indul a kövi tûz
								ServerInfo[sTuzVan] = false;
								ServerInfo[sTuzIdo][0] = 0;
							} else {

								format(str, sizeof(str), "===================== [ "#COL_FEHER"TÛZRIADÓ"#COL_LRED" ] =====================");
								FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_LAFD, str);
								format(str, sizeof(str), "Sikeresen eloltottatok egy tüzet, de még nem végeztetek, siessetek a következõhöz és a jutalom nem marad el!");
								FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LAFD, str);
							}
						}
					}
				}
			}
		}
	}

	/*----------------- Race System ---------------------------*/
	new id;
	for(;++id < MAX_RACE;)
	{
		if(Race[id][rStatusz] == RACE_MEGY)
		{
			if(Race[id][rIdoHatra] > 0)
			{
				Race[id][rIdoHatra]--;
				if(!Race[id][rIdoHatra])
				{
					Race[id][rStatusz] = RACE_VEGE;
					Race[id][rBentvan] = 0;
					foreach(Player, x)
					{
						if(PlayerRace[x][rVersenyen] == id)
						{
							SetPlayerColor(x, COLOR_INVISIBLE);
							DisablePlayerRaceCheckpoint(x);
							PlayerRace[x][rVersenyen] = 0;

							SCM(x, COL_LRED, "Mivel nem tudtad megadott idõn belül teljesíteni a távot kiestél a versenybõl!");
						}
					}
				}
			}
		}

		if(Race[id][rStatusz] == RACE_INDUL)
		{
			Race[id][rIdo]--;
			new ido = Race[id][rIdo];

			foreach(Player, p)
			{
				if(!Belepve(p))
					continue;

				if((ido >= 1800 && (ido % 1800) == 0) || (ido >= 600 && ido < 1800 && (ido % 600) == 0))
				{
					SendClientMessage(p, COLOR_WHITE, "============= [ "#COL_VZOLD"Racing Team"#COL_FEHER" ] =============");
					SendFormatMessage(p, COLOR_WHITE, "A(z) "#COL_MKEK"%s"#COL_FEHER" %s múlva indul!", Race[id][rNev], TimeFormat(ido));
				}
				else if(ido >= 120 && ido < 600 && (ido % 60) == 0)
				{
					SendClientMessage(p, COLOR_WHITE, "============= [ "#COL_VZOLD"Racing Team"#COL_FEHER" ] =============");
					SendFormatMessage(p, COLOR_WHITE, "A(z) "#COL_MKEK"%s"#COL_FEHER" %s múlva indul!", Race[id][rNev], TimeFormat(ido));
				}
				else if(ido == 60)
				{
					SendClientMessage(p, COLOR_WHITE, "============= [ "#COL_VZOLD"Racing Team"#COL_FEHER" ] =============");
					SendFormatMessage(p, COLOR_WHITE, "A(z) "#COL_MKEK"%s"#COL_FEHER" egy percen belül indul!", Race[id][rNev]);
				}
				else if(ido == 30)
				{
					SendClientMessage(p, COLOR_WHITE, "============= [ "#COL_VZOLD"Racing Team"#COL_FEHER" ] =============");
					SendFormatMessage(p, COLOR_WHITE, "A(z) "#COL_MKEK"%s"#COL_FEHER" 30 másodpercen belül indul!", Race[id][rNev]);
				}
				else if(ido <= 10 && ido > 0)
				{
					if(PlayerRace[p][rVersenyen] == id)
					{
						//if(ido > 10) format(str, sizeof(str), "~g~%d", ido);
						if(ido <= 10 && ido >= 8) format(str, sizeof(str), "~g~~h~%d", ido);
						else if(ido <= 7&& ido >= 6) format(str, sizeof(str), "~y~%d", ido);
						else if(ido <= 5 && ido >= 4) format(str, sizeof(str), "~r~~h~~h~%d", ido);
						else if(ido <= 3 && ido >= 2) format(str, sizeof(str), "~r~~h~%d", ido);
						else if(ido < 2) format(str, sizeof(str), "~r~%d", ido);
						GameTextForPlayer(p, str, 925, 5);
					}
				}
				else if(ido <= 0)
				{
					Race[id][rIdoHatra] = 1800;//eddig mehet a verseny max
					Race[id][rStatusz] = RACE_MEGY;

					if(PlayerRace[p][rVersenyen] == NINCS)
					{
						DisablePlayerRaceCheckpoint(p);
						continue;
					}

					if(PlayerRace[p][rVersenyen] == id)
					{
						PlayerPlaySound(p, 1057, 0.0, 0.0, 0.0);
						GameTextForPlayer(p, "~r~~h~==] GO ]==", 3000, 5);
						PlayerRace[p][rVersenyCP] = RACE_START_CP;

						PlayerRace[p][rPIdo] = 0;
						SetRaceCP(p);
					}
				}
			}
		}
		else if(Race[id][rStatusz] == RACE_MEGY)
		{
			foreach(Player, p)
			{
				if(!Belepve(p) || PlayerRace[p][rVersenyen] != id)
					continue;

				PlayerRace[p][rPIdo]++;
			}
		}
	}
	/*----------------- Race System vége ---------------------------*/

	if(ServerInfo[sCarResi][0] > 0)
	{
		ServerInfo[sCarResi][0]--;
		if(ServerInfo[sCarResi][0] == 30)
			SendClientMessageToAll(COLOR_WHITE, ""#COL_MKEK"Felhívás:"#COL_FEHER" Az elhagyott jármûvek "#COL_MKEK"30"#COL_FEHER" másodpercen belül elvontatásra kerülnek!");

		if(!ServerInfo[sCarResi][0])
		{
			JarmuRespawn(ServerInfo[sCarResi][1]);
			ServerInfo[sCarResi][0] = 3600;//1h múlva automata respawn
			ServerInfo[sCarResi][1] = 0; //esetleges automata respawn javítás nélkül
			SendClientMessageToAll(COLOR_WHITE, ""#COL_MKEK"Felhívás:"#COL_FEHER" Elhagyott és használaton kívüli jármûvek elvontatva!");
		}
	}

	if(ServerInfo[sTuzIdo][0] > 0)
	{
		ServerInfo[sTuzIdo][0]--;
		if(ServerInfo[sTuzVan] && !ServerInfo[sTuzIdo][0]) //ha lejár az idõ
		{
			TuzMuvelet( 4, NINCS );
			new penz = ((ServerInfo[sTuzPenz] / 2)/235);
			FInfo[ FRAKCIO_LAFD ][fPenz] -= penz;
			format(str, sizeof(str), "===================== [ "#COL_FEHER"Felhívás"#COL_LRED" ] =====================");
			FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_LAFD, str);
			format(str, sizeof(str), "A tüzet nem sikerült eloltani, ezért az állam %s$ büntetést szabott ki!", FN(penz, 0, ','));
			FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LAFD, str);
		}
	}
	if(ServerInfo[sTuzIdo][1] > 0)
	{
		ServerInfo[sTuzIdo][1]--;
		if(!ServerInfo[sTuzIdo][1])
			TuzGeneral();
	}
	
	ServerInfo[sIdojarasIdo]++;
	if(ServerInfo[sIdojarasIdo] >= 3600)
	{
		Idojaras(NINCS, NINCS);
		ServerInfo[sIdojarasIdo] = 0;
	}
	SzerverNev();
	return true;
}

timer GTimer[60000](process, extra)
{
	#pragma unused extra //HA HASZNÁLOD EZT VEDD KII
	switch(process)
	{
		case GT_HIRDETES:
		{
			ServerInfo[sHirdetes] = false;
		}
	}
	return true;
}

timer MuveletTimer[1000](playerid, process, extra, egyeb)
{
	if(!IsPlayerConnected(playerid) || !Belepve(playerid))
		return true;

	if(!PlayerInfo[playerid][pTimerFut] && (IsPlayerConnected(extra) && !PlayerInfo[extra][pTimerFut]))
		return true;

	new str[128];
	PlayerInfo[playerid][pTimerFut] = false;
	PlayerInfo[playerid][pFoglalt] = false;

	switch( process )
	{
		case T_TUKERES:
		{
			if(KozeliObject( playerid, 3 ) == NINCS)
				return SCM(playerid, COL_LRED, "Elmentél a kuka közelébõl ezért nem találtál semmit!");

			switch(random(100))
			{
				case 0 .. 30:
					return SCM(playerid, COL_LRED, "Sajnos nem találtál tût a kukában, nézd át jobban..");
				case 31 .. 100:
				{
					SCM(playerid, COL_VZOLD, "Találtál egy tût a kukában..");
					Cselekves(playerid, "talált valamit az egyik kukában");
					PlayerInfo[playerid][pCuccok][ BL_TU ]++;
					return true;
				}
			}
		}
		case T_PENZPAKOLAS:
		{
			new randomo = Rand(150, 160);
			if(PlayerInfo[playerid][pBMennyi] >= 10000)
			{
				TogglePlayerControllable(playerid, true);
				SCM(playerid, COL_MKEK, "Befejezted a pénz pakolását!");

				SetPlayerAttachedObject(playerid, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
				DestroyDynamicObject(PlayerInfo[playerid][pHatizsakO]);
				return true;
			}

			if(ServerInfo[sBankPenz][0] - randomo <= 0)
			{
				TogglePlayerControllable(playerid, true);
				SCM(playerid, COL_MKEK, "Befejezted a pakolást, mert nincs több pénz a széfben.");
				SetPlayerAttachedObject(playerid, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
				DestroyDynamicObject(PlayerInfo[playerid][pHatizsakO]);
				return true;
			}
			PlayerInfo[playerid][pBMennyi] += randomo;
			ServerInfo[sBankPenz][0] -= randomo;

			SFM(playerid, COL_VZOLD, "Táskába sikeresen bepakoltál %s$-ot!", FN(randomo, 0, ','));
			return true;
		}
		case T_HACKPANEL:
		{
			//pBHackJegyek
			/*
			new i = -1;
			for(;++i < 5;)
				PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][i]);

			i = -1;
			for(;++i < 3;)
				PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][i]);

			i = -1;
			for(;++i < 5;)
				PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][i]);
			*/

			new val[2];
			new i = PlayerInfo[playerid][pBHackMelyik];

			//printf("IA1: %d", i);
			if(PlayerInfo[playerid][pBHackJegyek][i] != BankInfo[bBankSzefterem][i])
			{
				PlayerInfo[playerid][pBHackJegyek][i]++;

				valstr(val, PlayerInfo[playerid][pBHackJegyek][i]);
				PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][i], val);

				if(PlayerInfo[playerid][pBHackJegyek][i] == BankInfo[bBankSzefterem][i])
				{
					PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][i], 16711935);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][i]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][i]);
					PlayerPlaySound(playerid, 21002, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pBHackMelyik]++;
					if(PlayerInfo[playerid][pBHackMelyik] == 5)
					{
						SCM(playerid, COL_MKEK, "Széftermi biztonsági lézer kikapcsolva!");
						dforeach(BankSZLezer, lezer)
							DestroyDynamicObject(lezer);

						BankInfo[bBankSZLezerK] = true;
						TogglePlayerControllable(playerid, true);

						new x = -1;
						for(;++x < 5;)
							PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][x]);

						x = -1;
						for(;++x < 3;)
							PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][x]);

						x = -1;
						for(;++x < 5;)
							PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][x]);

						stop PlayerTimers[playerid][PBHACK];
						return true;
					}
					return true;
				}
				return true;
			} else PlayerInfo[playerid][pBHackMelyik]++;
			if(PlayerInfo[playerid][pBHackJegyek][0] != BankInfo[bBankSzefterem][0])
			{
				PlayerInfo[playerid][pBHackJegyek][0]++;

				valstr(val, PlayerInfo[playerid][pBHackJegyek][0]);
				PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], val);

				if(PlayerInfo[playerid][pBHackJegyek][0] != BankInfo[bBankSzefterem][0])
				{
					PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], 16711935);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0]);
					return true;
				}
				return true;
			}
			if(PlayerInfo[playerid][pBHackJegyek][1] != BankInfo[bBankSzefterem][1])
			{
				PlayerInfo[playerid][pBHackJegyek][1]++;

				valstr(val, PlayerInfo[playerid][pBHackJegyek][1]);
				PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], val);

				if(PlayerInfo[playerid][pBHackJegyek][1] != BankInfo[bBankSzefterem][1])
				{
					PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], 16711935);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1]);
					return true;
				}
				return true;
			}
			if(PlayerInfo[playerid][pBHackJegyek][2] != BankInfo[bBankSzefterem][2])
			{
				PlayerInfo[playerid][pBHackJegyek][2]++;

				valstr(val, PlayerInfo[playerid][pBHackJegyek][2]);
				PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], val);

				if(PlayerInfo[playerid][pBHackJegyek][2] != BankInfo[bBankSzefterem][2])
				{
					PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], 16711935);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2]);
					return true;
				}
				return true;
			}
			if(PlayerInfo[playerid][pBHackJegyek][3] != BankInfo[bBankSzefterem][3])
			{
				PlayerInfo[playerid][pBHackJegyek][3]++;

				valstr(val, PlayerInfo[playerid][pBHackJegyek][3]);
				PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], val);

				if(PlayerInfo[playerid][pBHackJegyek][3] != BankInfo[bBankSzefterem][3])
				{
					PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], 16711935);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3]);
					return true;
				}
				return true;
			}
			if(PlayerInfo[playerid][pBHackJegyek][4] != BankInfo[bBankSzefterem][4])
			{
				PlayerInfo[playerid][pBHackJegyek][4]++;

				valstr(val, PlayerInfo[playerid][pBHackJegyek][4]);
				PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], val);

				if(PlayerInfo[playerid][pBHackJegyek][4] != BankInfo[bBankSzefterem][4])
				{
					PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], 16711935);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4]);
					return true;
				}
				return true;
			}
			return true;
		}
		/*case T_C4PLANT:
		{
			ClearAnimations(playerid, 1);
			SCM(playerid, COL_MKEK, "A bomba sikeresen felszerelve! Most pedig futás az elõcsarnokból!");

			BankInfo[bBankC4] = CreateDynamicObject(1252, 1768.79749, -1117.43945, 24.41430,   0.00000, 45.00000, 0.00000);
			BankInfo[bBankC4Fel] = true;

			Streamer_Update(playerid);
			return true;
		}*/
		case T_DROGKESZITES:
		{
			//Marihuana [%dg]\n%sKokain [%dg]\n%sHeroin [%dg]
			//PlayerInfo[playerid][pDrogAnyag][listitem]

			new mennyi = floatround(PlayerInfo[playerid][pDrogAnyag][egyeb] / 2);
			PlayerInfo[playerid][pDrogAnyag][egyeb] = 0;

			switch(egyeb)
			{
				case 0:
					PlayerInfo[playerid][pMarihuana] += mennyi;
				case 1:
					PlayerInfo[playerid][pKokain] += mennyi;
				case 2:
					PlayerInfo[playerid][pHeroin] += mennyi;
			}

			ClearAnimations(playerid, 1);
			SFM(playerid, COL_MKEK, "Sikeresen elõállítottál "#COL_MKEK"%dmg "#COL_FEHER"drogot!", mennyi);
			return true;
		}
		case T_UTZAR:
		{
			DestroyDynamicObject(Utzarak[playerid][uObject]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][0]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][1]);
			DestroyDynamic3DTextLabel(Utzarak[playerid][uText]);
			Utzarak[playerid][uVan] = false;
			Utzarak[playerid][uTipus] = 0;
			Utzarak[playerid][uPickup] = {NINCS, NINCS, NINCS, NINCS};

			Streamer_Update(playerid);

			SCM(playerid, COL_MKEK, "Útzár automatikusan felvéve!");

			return 1;
		}
		case T_FKESZITES:
		{
			SFM(playerid, COL_MKEK, "Sikeresen elkészítettél egy "#COL_MKEK"%s"#COL_FEHER"-t!", Fegyverek[egyeb][fNev]);

			if(((PlayerInfo[playerid][pFegyverSkill] - Fegyverek[egyeb][fSkill]) <= 49))
			{
				SCM(playerid, COL_VZOLD, "Fegyverkészítési tapasztalatod növekedett!");

				PlayerInfo[playerid][pFegyverSkill]++;
			}

			SFM(playerid, COL_MKEK, "Megmaradt materialod: "#COL_MKEK"%d"#COL_FEHER"db", PlayerInfo[playerid][pMaterial]);

			if(PlayerInfo[playerid][pFegyver])
			{
				Fegyver(playerid, false);
			}

			switch(egyeb)
			{
				case 0: GiveWeapon(playerid, 8, Fegyverek[egyeb][fTolteny]);
				case 1: GiveWeapon(playerid, 15, Fegyverek[egyeb][fTolteny]);
				case 2: GiveWeapon(playerid, 7, Fegyverek[egyeb][fTolteny]);
				case 3: GiveWeapon(playerid, 5, Fegyverek[egyeb][fTolteny]);
				case 4: GiveWeapon(playerid, 6, Fegyverek[egyeb][fTolteny]);
				case 5: GiveWeapon(playerid, 22, Fegyverek[egyeb][fTolteny]);
				case 6: GiveWeapon(playerid, 23, Fegyverek[egyeb][fTolteny]);
				case 7: GiveWeapon(playerid, 25, Fegyverek[egyeb][fTolteny]);
				case 8: GiveWeapon(playerid, 24, Fegyverek[egyeb][fTolteny]);
				case 9: GiveWeapon(playerid, 29, Fegyverek[egyeb][fTolteny]);
				case 10: GiveWeapon(playerid, 28, Fegyverek[egyeb][fTolteny]);
				case 11: GiveWeapon(playerid, 30, Fegyverek[egyeb][fTolteny]);
				case 12: GiveWeapon(playerid, 31, Fegyverek[egyeb][fTolteny]);
				case 13: GiveWeapon(playerid, 34, Fegyverek[egyeb][fTolteny]);
				case 14: GiveWeapon(playerid, 27, Fegyverek[egyeb][fTolteny]);
				case 15: SetArmor(playerid, Fegyverek[egyeb][fTolteny]);
			}

			PlayerInfo[playerid][pFoglalt] = false;
			ClearAnimations(playerid, 1);

			//CallLocalFunction("OnPlayerFinishJob", "ii", playerid, MUNKA_FEGYVER);

			return true;
		}
		case T_MATIKESZITES:
		{
		
			new	rand = Rand(15, 45);
			rand = egyeb * rand;
			
			ClearAnimations(playerid, 1);
			UnFreeze(playerid);
			PlayerInfo[playerid][pMaterial] += rand;
			PlayerInfo[playerid][pVas] -= egyeb;
			
			SFM(playerid, COL_MKEK, "Sikeresen készítettél "#COL_MKEK"%d"#COL_FEHER"db materialt!", rand);
			return true;
		}

		case T_VAS:
		{
			ClearAnimations(playerid, 1);
			TogglePlayerControllable(playerid, true);

			new rand = random(2);
			switch(rand)
			{
				case 0:
				{
					SCM(playerid, COL_LRED, "Sajnos nem találtál semmi használhatót!");
					return true;
				}
				case 1:
				{
					new vasrand = (random(2) + 1);
					SFM(playerid, COL_MKEK, "Sikeresen gyûjtöttél "#COL_MKEK"%d"#COL_FEHER"kg vasat!", vasrand);

					PlayerInfo[playerid][pVas] += vasrand;

					if(PlayerInfo[playerid][pVas] > P_MAX_VAS)
						PlayerInfo[playerid][pVas] = P_MAX_VAS;

					return true;
				}
			}
			return true;
		}
		case T_MSEGIT:
			goto tsegit;
		case T_UJJLENYOMAT:
		{
		    //.playerid = playerid, .process = T_UJJLENYOMAT, .extra = vehicleid, .egyeb = ajto
		    SendClientMessage(playerid, NINCS, "========== Ujjlenyomatok az ajtón ==========");
		    new lenyomatok = vector_size(c_Ujjlenyomatok[extra]);
		    new ajtolenyomatok = 0;
		    new i = NINCS;
		    for(; ++i < lenyomatok;)
		    {
		        new lenyomat[MAX_PLAYER_NAME + 5];
		        vector_get_arr(c_Ujjlenyomatok[extra], i, lenyomat, MAX_PLAYER_NAME + 5);

				new l_seat, l_nev[MAX_PLAYER_NAME];
		        sscanf(lenyomat, "p<|>is["#MAX_PLAYER_NAME"]", l_seat, l_nev);

		        if(l_seat != egyeb) continue;
		        SFM(playerid, COL_MKEK,"%s ujjlenyomata", l_nev);
		        ajtolenyomatok++;
		    }
		    if(!ajtolenyomatok)
	            return SCM(playerid, COL_LRED, "Nincs ujjlenyomat Ezen az ajtón!");
		}
		case T_SEGIT:
		{
			tsegit:
			if(PlayerInfo[playerid][pAnimban][0] == 0)
				return true;

			if(process == T_SEGIT && GetPlayerDistanceFromPlayer(playerid, extra) > 4)
				return true;

			new Float:hp = PlayerInfo[playerid][pElet];
			if(hp < 15.0) SetHealth(playerid, 35.0);
			else if(hp < 95.0) SetHealth(playerid, (hp + 5.0));
			
			Anim(playerid, 0);
			if(process == T_MSEGIT)
			{
				SCM(playerid, COL_MKEK, "Sikeresen elláttad a sérüléseid!");
				Cselekves(playerid, "ellátta a sérüléseit..");

			} else if(process == T_SEGIT)
			{
				SFM(playerid, COL_MKEK, "%s sikeresen ellátta a sérüléseid!", JatekosNev(extra));
				format(str, sizeof(str), "ellátta %s sérüléseit.", JatekosNev(playerid, true));
				Cselekves(playerid, str, 1);

				if(PlayerInfo[extra][pFrakcio] == FRAKCIO_LAFD && PlayerInfo[extra][pDuty])
				{
					SFM(extra, COL_MKEK, "Sikeresen elláttad "#COL_MKEK"%s"#COL_FEHER" sérüléseit, ezért a Mentõszolgálat 8$-ot kapott a TB-bõl!", JatekosNev(playerid, true));
					FInfo[ FRAKCIO_LAFD ][fPenz] += 8;
				}
				SetCameraBehindPlayer(playerid);
				SetPlayerWeather(playerid, 1);
				PlayerInfo[extra][pTimerFut] = false;
				PlayerInfo[extra][pFoglalt] = false;

				Freeze(extra, NINCS);
				if(!IsPlayerInAnyVehicle(extra))
					ClearAnimations(extra);
			}
			return true;
		}
	}

	return true;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z)
{
	if((new_x > WB_MAX_X || new_x < WB_MIN_X) || (new_y > WB_MAX_Y || new_y < WB_MIN_Y) || (new_z > 20000.0 || new_z < -20000.0))
		return 0;

	if(GetVehicleInterior(vehicleid) != GetPlayerInterior(playerid) || GetVehicleVirtualWorld(playerid) != GetPlayerVirtualWorld(playerid)) return false;
	
	new Float:pos[3];
	GetVehiclePos(vehicleid, PosExt(pos));

	if(VehiclePos[vehicleid][0] != 0.0 && VehiclePos[vehicleid][1] != 0.0 && VehiclePos[vehicleid][2] != 0.0 && GetVehicleTrailer(vehicleid))
	{
		new
			Float:dist = GetVehicleDistanceFromPoint(vehicleid, PosExt( VehiclePos[vehicleid] )),
			Float:distp = GetPlayerDistanceFromPoint(playerid, PosExt(pos));

		if(dist >= 15.0 && distp <= 15.0)
		{
			PlayerInfo[playerid][pCarTeleportFlood]++;
			PlayerInfo[playerid][pCarTeleportTime] += 2;

			nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: Jármû teleport - %d (%.0f, %.0f) - %dx", playerid, JatekosNev(playerid), vehicleid, dist, distp, PlayerInfo[playerid][pCarTeleportFlood]);
			Log(FILE_CHEAT, string);

			if(PlayerInfo[playerid][pCarTeleportFlood] >= 2)
				AdminUzenetEx(COLOR_WHITE, 1001, string);

			SetVehiclePos(vehicleid, PosExt( VehiclePos[vehicleid] ));
		}
		else
			VehiclePos[vehicleid] = pos;
	}
	else
		VehiclePos[vehicleid] = pos;

	/*----------------- Jármû sérülés -----------------*/
	/*if(passenger_seat != 0)
		return true;

	new cm = GetPlayerCameraMode(playerid);
	if(cm != 53 && cm != 51)
		return true;

	new keys, tmp;
	GetPlayerKeys(playerid, keys, tmp, tmp);
	if(!(keys & KEY_FIRE))
		return true;

	new Float:vhp; GetVehicleHealth(vehicleid, vhp);
	switch (GetPlayerWeapon(playerid))
	{
		case WEAPON_COLT45: DecreaseVehHP(VEHICLE_DMG_COLT45);
		case WEAPON_SILENCED: DecreaseVehHP(VEHICLE_DMG_SILENCED);
		case WEAPON_DEAGLE: DecreaseVehHP(VEHICLE_DMG_DEAGLE);
		case WEAPON_SHOTGUN: DecreaseVehHP(VEHICLE_DMG_SHOTGUN);
		case WEAPON_SAWEDOFF: DecreaseVehHP(VEHICLE_DMG_SAWEDOFF);
		case WEAPON_SHOTGSPA: DecreaseVehHP(VEHICLE_DMG_SHOTGSPA);
		case WEAPON_UZI: DecreaseVehHP(VEHICLE_DMG_UZI);
		case WEAPON_MP5: DecreaseVehHP(VEHICLE_DMG_MP5);
		case WEAPON_AK47: DecreaseVehHP(VEHICLE_DMG_AK47);
		case WEAPON_M4: DecreaseVehHP(VEHICLE_DMG_M4);
		case WEAPON_TEC9: DecreaseVehHP(VEHICLE_DMG_TEC9);
		case WEAPON_RIFLE: DecreaseVehHP(VEHICLE_DMG_RIFLE);
		case WEAPON_ROCKETLAUNCHER: DecreaseVehHP(VEHICLE_DMG_ROCKETLAUNCHER);
		case WEAPON_HEATSEEKER: DecreaseVehHP(VEHICLE_DMG_HEATSEEKER);
		case WEAPON_MINIGUN: DecreaseVehHP(VEHICLE_DMG_MINIGUN);
		default: DecreaseVehHP(VEHICLE_DMG_DEFAULT);
	}*/

	return true;
}

stock GetPlayerSpeed(playerid)
{
	new Float:vVectors[3];
	GetPlayerVelocity(playerid, vVectors[0], vVectors[1], vVectors[2]);
	return floatround(VectorSize(vVectors[0],vVectors[1],vVectors[2])*136.666667);
}

stock GetVehicleSpeed( vehicleid )
{
	new Float:vSpeed[3];
	GetVehicleVelocity( vehicleid, vSpeed[0], vSpeed[1], vSpeed[2] );

	new Float:vSpeed_Float;
	vSpeed_Float = VectorSize(vSpeed[0], vSpeed[1], vSpeed[2]) * 161.0;

	new vSpeed_Int;
	vSpeed_Int = floatround( vSpeed_Float, floatround_round );

	return vSpeed_Int;
}

timer JarmuInditas[1000](playerid, vehicleid)
{
	new jarmuidje = JarmuID(vehicleid, playerid);
	vInfo[jarmuidje][vMotorelinditva] = true;
	SetJarmu(vehicleid, KOCSI_MOTOR, 1);
	SendClientMessage(playerid, COLOR_GREEN, "A jármû sikeresen beindítva!");
	Cselekves(playerid, "beindította a jármûvét", 1);
	PlayerInfo[playerid][pmotortinditja] = false;
	return true;
}
timer Berakodas[5000](playerid)
{
	TogglePlayerControllable(playerid, 1);

	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 578)
	{
		new szinek[3] = {2934, 2935, 2932};
		new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
		vInfo[vid][vKObject] = CreateDynamicObject(szinek[random(sizeof(szinek))], 0, 0, -1000, 0, 0, 0);
		//CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 200.0);
		AttachDynamicObjectToVehicle(vInfo[vid][vKObject], GetPlayerVehicleID(playerid), 0.0, -1.725000, 1.200000, 0.0, 0.0, 0.0);
		Streamer_Update(playerid);
		SCM(playerid, COL_MKEK, "Felrakva!");
	}

	GameTextForPlayer(playerid, "RAKODÁS MEGTÖRTÉNT", 2000, 3);
	return true;
}

timer Kirakodas[5000](playerid)
{
	TogglePlayerControllable(playerid, 1);
	GameTextForPlayer(playerid, "KIRAKODÁS MEGTÖRTÉNT", 2000, 3);

	new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
	new Float:tavolsag = GetDistanceBetweenPoints(PosExt(KamionUtak[PlayerInfo[playerid][pKamions]]), PosExt(KamionUtak[PlayerInfo[playerid][pKamionc]]));
	new kerekites = ((floatround((Kerekites(floatround(tavolsag), SZAZAS) * 7) * 1.25) + 15000)/235);// + 25% fizetés
	CallLocalFunction("OnPlayerFinishJob", "iii", playerid, MUNKA_KAMION, kerekites);

	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 578)
		DestroyDynamicObject(vInfo[vid][vKObject]);

	//SendFormatMessage(playerid, COLOR_DARKORANGE, "Az áru kirakodása megtörtént! Az áruért kaptál: %d$-ot!", kerekites);
	return true;
}

timer JatekosTeleportalhat[1000](playerid, bool:ertek)
	return PlayerInfo[playerid][pbemehet] = ertek;

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!Belepve(playerid))
	{
		ServerBan(playerid, 0, "[AC] Sobeit", NINCS, true, true, false);
	}
	new vi = JarmuID(vehicleid, playerid), tipusa = GetVehicleModel(vehicleid);
	/*if(!ispassenger && (vInfo[vi][vMunka] == 101) && (PlayerInfo[playerid][pVizsga] != 0))
	{
	    new ktipus = GetVehicleType(vehicleid);

		if(ktipus == CAR && (!PlayerInfo[playerid][pEngedely][0] && !PlayerInfo[playerid][pEngedely][1]))
		{
			ClearAnimations(playerid);
			Freeze(playerid, 5000);
			SCM(playerid, COL_LRED, "Ezt a jármûvet B kategória és KRESZ vizsga nélkül nem vezetheted!");
			return true;
		}
		else if(ktipus == MOTORBIKE && (!PlayerInfo[playerid][pEngedely][0] && !PlayerInfo[playerid][pEngedely][2]))
		{
			ClearAnimations(playerid);
			Freeze(playerid, 5000);
			SCM(playerid, COL_LRED, "Ezt a jármûvet A1 kategória és KRESZ vizsga nélkül nem vezetheted!");
			return true;
		}
	}*/
	if(!ispassenger && GetVehicleDriver(vehicleid) != INVALID_PLAYER_ID )
	{
		ClearAnimations(playerid);
		Freeze(playerid, 5000);
		SCM(playerid, COL_LRED, "Használd a /kiszed-et!!");
		return true;
	}
	if(!ispassenger && PlayerInfo[playerid][pAnimban][0] == 1)
	{
		ClearAnimations(playerid);
		Freeze(playerid, 5000);
		SCM(playerid, COL_LRED, "Így ne vezess!");
		return true;
	}
	
	PlayerInfo[playerid][pJarmubenUlt] = vi;
	if(!vInfo[vi][vInsert])
		SendClientMessage(playerid, COLOR_WHITE, "(( Ez egy Admin által lehívott jármû! ))");
    else if(vInfo[vi][vTulajID] == NINCS && !vInfo[vi][vMunka] && !ispassenger)
    {
		SendClientMessage(playerid, COLOR_WHITE, "Ez a jármû "#COL_MKEK"eladó"#COL_FEHER", ha megszeretnéd venni írd be, hogy "#COL_MKEK"/v (frakció) vesz");
		SendFormatMessage(playerid, COLOR_WHITE, "Típusa: "#COL_MKEK"%s (%d)"#COL_FEHER" | Rendszám: "#COL_MKEK"%d[%d]"#COL_FEHER" | Ára: "#COL_MKEK"%s$", VehicleNames[tipusa-400], tipusa, vehicleid, vi, FN(vInfo[vi][vAr], 0, ','));
	}
	else if(JarmuKulcs( playerid, vi ))
	{
		if(NincsBenne_Radio(vInfo[vi][vModel]))
			SendClientMessage(playerid, COLOR_WHITE, "A jármû indításához használd a "#COL_MKEK"/motor"#COL_FEHER" parancsot, vagy a "#COL_MKEK"~k~~VEHICLE_ACCELERATE~"#COL_FEHER" gombot, a lámpa felkapcsolásához a "#COL_MKEK"~k~~KEY_YES~"#COL_FEHER" gombot.");
		else
			SendClientMessage(playerid, COLOR_WHITE, "A jármû indításához használd a "#COL_MKEK"/motor"#COL_FEHER" parancsot, vagy a "#COL_MKEK"~k~~VEHICLE_ACCELERATE~"#COL_FEHER" gombot, a lámpa felkapcsolásához a "#COL_MKEK"~k~~KEY_YES~"#COL_FEHER" gombot. "#COL_MKEK"Rádió: /v rádió");
	}
	else if(vInfo[vi][vMunka] == 100 && !ispassenger)//bérelhetõ
		SendFormatMessage(playerid, COLOR_WHITE, "A jármû bérlésének összege "#COL_MKEK"%s"#COL_FEHER"$ - bérléshez írd be: "#COL_MKEK"/v bérel", FN(vInfo[vi][vAr], 0, ','));

	if((vInfo[vi][vMunka] != 101) && (PlayerInfo[playerid][pVizsga][2]))
	{
		ClearAnimations(playerid, 1);
		SCM(playerid, COL_LRED, "Jelenleg vizsgázol, nem szállhatsz be más jármûbe!");
	}
	if((vInfo[vi][vMunka] == 101) && (PlayerInfo[playerid][pVizsga] != 0))
	{
	    SetJarmu(vi,KOCSI_MOTOR,1);
	    SCM(playerid,COL_MKEK,"Vizsgajármûbe ültél, a motor elindult.");
	}
	if(vInfo[vi][vModel] == 481 || vInfo[vi][vModel] == 509 || vInfo[vi][vModel] == 510)
	{
	    SetJarmu(vehicleid,KOCSI_MOTOR,1);
	}
	SendClientMessage(playerid, COLOR_WHITE, "A jármû indításához használd a "#COL_MKEK"/motor"#COL_FEHER" parancsot, vagy a "#COL_MKEK"~k~~VEHICLE_ACCELERATE~"#COL_FEHER" gombot, a lámpa felkapcsolásához a "#COL_MKEK"~k~~KEY_YES~"#COL_FEHER" gombot. "#COL_MKEK"Rádió: /v rádió");
	return true;
}
timer smtimer[3000](playerid)
{
	return DestroyVehicle(smkocsiid[playerid]);
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(PlayerInfo[playerid][pMP3_Megy])
	{
		StopAudioStreamForPlayer(playerid);
	}
	if(PlayerInfo[playerid][pSMkocsi] == 1)
	{
	    SCM(playerid,COL_MKEK,"Kiszálltál, ezért a kocsi törlodött.");
	    SetHealth(playerid,MAX_HP);
		SetPlayerDrunkLevel(playerid, 0);
		PlayerInfo[playerid][pSMkocsi] = 0;
		defer smtimer[3000](playerid);
		if(!IsPlayerInAnyVehicle(playerid))
			ClearAnimations(playerid);
	}
	KocsiUtolsoHasznalat[vehicleid] = gettime();
	vInfo[JarmuID(vehicleid, playerid)][vLastActive] = gettime();
	if(PlayerInfo[playerid][pOv])
	{
		PlayerInfo[playerid][pOv] = false;
		Cselekves(playerid, "kikapcsolta a biztonsági övet");
		return true;
	}
	return true;
}
timer unMarkPlayer[1000](kit, kinek)
{
	if(kinek == NINCS)
	{
	    foreach(Player, i)
		{
			if(!PlayerInfo[i][pRadarJelzes][kit]) continue;

			PlayerInfo[i][pRadarJelzes][kit] = false;
			PlayerInfo[i][pRadarJelzesCol][kit] = COLOR_INVISIBLE;
		 	PlayerInfo[i][pRadarJelzesTipus][kit] = JELZES_TOROLHETO;
            StreamUpdate(kit, i);
            
			if(PlayerInfo[kit][pRadarJelzes][i])
			{
			    PlayerInfo[kit][pRadarJelzes][i] = false;
				PlayerInfo[kit][pRadarJelzesCol][i] = COLOR_INVISIBLE;
				PlayerInfo[kit][pRadarJelzesTipus][i] = JELZES_TOROLHETO;
				StreamUpdate(i, kit);
			}
		}
	}
	else
	{
	    PlayerInfo[kinek][pRadarJelzes][kit] = false;
		PlayerInfo[kinek][pRadarJelzesCol][kit] = COLOR_INVISIBLE;
	 	PlayerInfo[kinek][pRadarJelzesTipus][kit] = JELZES_TOROLHETO;
   		StreamUpdate(kit, kinek);
   		
   		if(PlayerInfo[kit][pRadarJelzes][kinek])
		{
		    PlayerInfo[kit][pRadarJelzes][kinek] = false;
			PlayerInfo[kit][pRadarJelzesCol][kinek] = COLOR_INVISIBLE;
			PlayerInfo[kit][pRadarJelzesTipus][kinek] = JELZES_TOROLHETO;
			StreamUpdate(kinek, kit);
		}
	}
}
public OnPlayerDeath(playerid, killerid, reason)
{
	if(g_ObjectetEditel[playerid] != NINCS){
	    CancelEdit(playerid);
	}
	if(!Belepve(playerid))
	{
		ServerBan(playerid, 0, "[AC] Sobeit", NINCS, true, true, false);
	}
	if(iPhoneStatus[playerid] > 0)
	{
    	if(IsValidObject(firstperson[playerid])) DestroyObject(firstperson[playerid]);
        DeletePVar(playerid,"tovar");
    	var1[playerid] = "";
    	var2[playerid] = "";
    	loop(0, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][PHONE]);
     	loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);

	    HideIphoneMenu(playerid);
	    iPhoneStatus[playerid] = 0;
    }
	new halal = (PlayerInfo[playerid][pLastDeath] == 0 ? 30 : gettime() - PlayerInfo[playerid][pLastDeath]);
	PlayerInfo[playerid][pLastDeath] = gettime();

    unMarkPlayer(playerid, NINCS);
	if(PlayerInfo[playerid][pScriptShoot][0] != NINCS && PlayerInfo[playerid][pScriptShoot][1] != NINCS)
	{
		killerid = PlayerInfo[playerid][pScriptShoot][0];
		reason = PlayerInfo[playerid][pScriptShoot][1];
		PlayerInfo[playerid][pScriptShoot][0] = NINCS;
		PlayerInfo[playerid][pScriptShoot][1] = NINCS;
		PlayerInfo[playerid][pScriptShoot][2] = 0;
	}
	else if(!PlayerInfo[playerid][pScriptShoot][2] && killerid != INVALID_PLAYER_ID && (Shooted[playerid][killerid] < (gettime() - 10) || reason <= 42 && GetPlayerWeapon(killerid) != reason || halal <= 3))
	{
		PlayerInfo[playerid][pFakeKill][0]++;
		PlayerInfo[playerid][pFakeKill][1]+= 3;

		if(PlayerInfo[playerid][pFakeKill][0] >= 2)
		{
			nformat(astr, 128, "[AC]:{1E90FF} [%d]%s - Cheat: FakeKill (%s)", playerid, JatekosNev(playerid), (Admin(playerid, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
			AdminUzenetEx(LKEK, 1001, astr);
			Log(FILE_CHEAT, astr);

			if(!Admin(playerid, FOADMIN_SZINT))
				ServerBan(playerid, 0, "[AC] FakeKill", NINCS, (!Belepve(playerid) ? true : false), true, true);

			return true;
		}
	}

	if((killerid == INVALID_PLAYER_ID || !IsPlayerConnected(killerid)) && (PlayerInfo[playerid][pScriptShoot][2] == 100 || PlayerInfo[playerid][pScriptShoot][2] == 1))
		reason = (PlayerInfo[playerid][pScriptShoot][2] == 100 ? 100 : 101);

	if(((PlayerInfo[playerid][pFegyverSkill] - 5) >= 0) && !PlayerInfo[playerid][pAduty] && !PlayerInfo[playerid][pPaintBall][0] && !PlayerInfo[playerid][pPaintBall][0] && killerid != INVALID_PLAYER_ID)
		PlayerInfo[playerid][pFegyverSkill] -= (Rand(0,5));

	if(PlayerInfo[playerid][pTolvajSkill] > 6 && !PlayerInfo[playerid][pAduty] && !PlayerInfo[playerid][pPaintBall][0] && !PlayerInfo[playerid][pPaintBall][0] && killerid != INVALID_PLAYER_ID)
		PlayerInfo[playerid][pTolvajSkill] -= (Rand(0,2));

	PlayerInfo[playerid][pNemolheto] = 0;
	PlayerInfo[playerid][pEhseg] = 0.0;
	PlayerInfo[playerid][pVizelet] = 0.0;
	PlayerInfo[playerid][pScriptShoot][2] = 0;
	PlayerInfo[playerid][pVisz] = NINCS;
	PlayerInfo[playerid][pUsingLoopingAnim] = 0;
	PlayerInfo[playerid][phaz] = -1;
	PlayerInfo[playerid][pMP3_Megy] = false;
	PlayerInfo[playerid][pBMennyi] = 0;
	PlayerInfo[playerid][pHatizsak] = 0;
	
	PlayerInfo[playerid][pMergezoMod] = 0;
	PlayerInfo[playerid][pMergezoLovedekek] = 0;
	PlayerInfo[playerid][pRendelese] = NINCS;
	StopAudioStreamForPlayer(playerid);
	if(Bejelzett[playerid] > 0) Bejelzett[playerid] = 0; SetPlayerColor(playerid,COLOR_INVISIBLE);
	//ClearAnimations(playerid);


	new index;
	if(DivatInfo[SLOT_SAPKA][playerid][dVan] == 1)
	{
		index = SLOT_SAPKA;
		SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
	}
	if(DivatInfo[SLOT_SZEMUVEG][playerid][dVan] == 1)
	{
		index = SLOT_SZEMUVEG;
		SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
	}
	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
	    PlayerInfo[playerid][pMaszkVisel] = false;
	}

	for(new i = NINCS; ++i < MAX_PLAYER_ATTACHED_OBJECTS;)
		if(IsPlayerAttachedObjectSlotUsed(playerid, i))
			RemovePlayerAttachedObject(playerid, i);

	//PaintBall mûveletek
	if(killerid != INVALID_PLAYER_ID && PlayerInfo[playerid][pPaintBall][0] != 0 && PlayerInfo[killerid][pPaintBall][0] != 0)
	{
		PlayerInfo[killerid][pPaintBall][1]++;

		if((PlayerInfo[killerid][pPaintBall][1] > ServerInfo[sPaintBall][0]) || (ServerInfo[sPaintBall][1] == INVALID_PLAYER_ID))
		{
			ServerInfo[sPaintBall][0] = PlayerInfo[killerid][pPaintBall][1];
			new poid = ServerInfo[sPaintBall][1];
			foreach(Player, i)
			{
				if(!Belepve(i) || !PlayerInfo[i][pPaintBall][0])
					continue;

				if(Belepve(poid) && poid != killerid && PlayerInfo[poid][pPaintBall][0] != 0)
					SendFormatMessage(i, COLOR_TKEK, "** Hoppá! "#COL_MKEK"%s"#COL_TKEK" megölte %st ezzel átvette a vezetést! Jelenleg "#COL_MKEK"%d"#COL_TKEK" öléssel vezet!", JatekosNev(killerid, true), JatekosNev(playerid, true), ServerInfo[sPaintBall][0]);
				else
					SendFormatMessage(i, COLOR_TKEK, "** Jelenleg "#COL_MKEK"%s"#COL_TKEK" vezet "#COL_MKEK"%d"#COL_TKEK" öléssel!", JatekosNev(killerid, true), ServerInfo[sPaintBall][0]);
			}

			ServerInfo[sPaintBall][1] = killerid;
		}

		return true;
	}
	if(Bortonben( playerid ) != 0)
		return Borton(playerid, Bortonben( playerid ));

	new Float:pos[3];
	GetPlayerPos(playerid, PosExt(pos));
	if(killerid != INVALID_PLAYER_ID)
	{
		if(PlayerInfo[playerid][pVerdij] > 0)
		{
			if(IsHitman(killerid) && PlayerInfo[killerid][pHitmanDuty] == 1)
			{
				foreach(Player,i)
				{
					if(IsHitman(i))
					{
						SendFormatMessage(i,LKEK, "Ügynökség:"#COL_FEHER" # %s teljesítette a megbízást! #", PlayerInfo[killerid][pHitmanNev]);
					}
				}
				SendFormatMessageToAll(COLOR_YELLOW," << A bérgyilkos teljesítette a megbízását - %s likvidálva! >>",JatekosNev(playerid));
				PlayerInfo[killerid][pBszPenz] += PlayerInfo[playerid][pVerdij];
				SFM(killerid,COL_VZOLD,"A megbízást sikeresen teljesítetted! Az ügynökség a számládra utalt %s $t!",FN(PlayerInfo[playerid][pVerdij]));
				PlayerInfo[playerid][pVerdij] = 0;
				strmid(PlayerInfo[playerid][pVerdijOk],"Nincs",0,strlen("Nincs"),32);
			}
		}
		if(GetPlayerVirtualWorld(killerid) == 0 && GetPlayerInterior(killerid) == 0 && !RendvedelmiFrakcioTag(playerid))
		{
		    if(PlayerInfo[playerid][pFegyver] >= 22 && PlayerInfo[playerid][pFegyver] <= 23)
		    {
				new str1[250];
				new zona[MAX_PLAYER_NAME];
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(killerid, X,Y,Z);
				foreach(Player,x)
				{
				   if(PlayerInfo[x][pDuty][0] && PlayerInfo[x][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[x][pFrakcio] == FRAKCIO_KATONA || PlayerInfo[x][pFrakcio] == FRAKCIO_FBI)
				   {
                        MarkPlayer(killerid, x, COLOR_RED, false, JELZES_KOROZES);
				   }
				}
				GetPlayer2DZone(playerid, zona, MAX_ZONE_NAME);
				format(str1, sizeof(str1), "[CCTV]: {1E90FF}%s körzetben "COL_LRED"gyilkosság"COL_LKEK" történt! Jelölve a térképen)",zona);
				FrakcioUzenet(RED, FRAKCIO_FBI, str1);
				FrakcioUzenet(RED, FRAKCIO_LSPD, str1);
				FrakcioUzenet(RED, FRAKCIO_KATONA, str1);
				Bejelzett[killerid] += 600;
			}
		}
	}
	if(killerid != INVALID_PLAYER_ID && !PlayerInfo[killerid][pAduty] && !PlayerInfo[killerid][pHarcol] && !PlayerInfo[killerid][pMaszkVisel] && !IsHitman(playerid))
	{
		SFM(playerid,COL_LRED,"Meghaltál! Megölt: {1E90FF}%s",JatekosNev(killerid));
		if((FInfo[ PlayerInfo[killerid][pFrakcio] ][fLegalis] != FK_REND && !PlayerInfo[killerid][pDuty][0]))
		{
			if(reason != 49 && GetPlayerVirtualWorld(killerid) == 0 && GetPlayerInterior(killerid) == 0) Korozes_Kiad(killerid, NINCS, "Gyilkosság", 1);//ha nem jármûvel öl
			else
			if(reason == 49) Korozes_Kiad(killerid, NINCS, "Cserbenhagyás", 1);//ha jármûvel elüti
		}
	}
	if(TilosOlni == 1 && !IsHitman(killerid) &&  !IsPlayerNPC(killerid) && IsPlayerConnected(killerid) && killerid != INVALID_PLAYER_ID && killerid >= 0 && killerid < MAX_PLAYERS)
	{
		SCM(killerid,COL_LRED, "Zeró tolerancia érvényben van, es mivel megszegted, 1 óra jail!");
		BortonInfo(killerid, "Rendszer", "Zeró Tolerancia");
		PlayerInfo[killerid][pjail] = 3;
		PlayerInfo[killerid][pJailIdo] = 3600;
	}


	PlayerInfo[playerid][pMaszkVisel] = false;
	/*-------------------------- Halál okai --------------------------*/
	new str[128];
	if((reason == 16 || reason == 38 || reason >= 0 && reason <= 47) && killerid != INVALID_PLAYER_ID && !IsHitman(playerid))
		format(str, sizeof(str), "[Halál]: %s megölte %st ezzel: %s - Pénz: %s$", JatekosNev(killerid), JatekosNev(playerid), aWeaponNames[reason], FN(PlayerInfo[playerid][ppenz], 0, ','));
	else if(reason == 51 && killerid != INVALID_PLAYER_ID && !IsHitman(playerid))
		format(str, sizeof(str), "[Halál]: %s felrobbantotta %st - Pénz: %s$", JatekosNev(killerid), JatekosNev(playerid), FN(PlayerInfo[playerid][ppenz], 0, ','));
	else if((reason >= 49 && reason <= 54 && reason != 52) || reason == 100 || reason == 101  || reason == 777 || reason == 888 || reason == 999)
	{
		new oka[32];
		switch( reason )
		{
			case 49: oka = "Autó";
			case 50: oka = "Helikopter";
			case 51: oka = "Robbanás";
			case 53: oka = "Megfulladt";
			case 54: oka = "Leesett";
			case 100: oka = "Éhenhalt";
			case 101: oka = "Rendszer";
			case 777: oka = "[C4]Robbanás";
			case 888: oka = "Jármû berobbanás";
			case 999: oka = "Mérgezés";
		}

		if(reason != 54 && reason != 53 && reason != 51 && reason != 100 && reason != 101)
		{
			new killer = GetClosestPlayer(playerid);
			format(str, sizeof(str), "[Halál]: %s meghalt | Oka: %s | Közelben volt: %s - Pénz: %s$", JatekosNev(playerid), oka, (killer == NINCS ? ("Nincs adat") : JatekosNev(killer)), FN(PlayerInfo[playerid][ppenz], 0, ','));

		} else
			format(str, sizeof(str), "[Halál]: %s meghalt | Oka: %s - Pénz: %s$", JatekosNev(playerid), oka, FN(PlayerInfo[playerid][ppenz], 0, ','));
	}

	if(!strlen(str)) format(str, sizeof(str), "[Halál]: %s meghalt | Oka: Ismeretlen(%d) - Pénz: %s$ | X: %f Y: %f Z: %f", JatekosNev(playerid), reason, FN(PlayerInfo[playerid][ppenz], 0, ','), pos[0], pos[1], pos[2]);

	if(!PlayerInfo[playerid][pHarcol])
		AdminUzenetEx(LKEK, 1001, str);

	Log(FILE_HALAL, str);

	if(!PlayerInfo[playerid][pAduty])
	{
		if(killerid != INVALID_PLAYER_ID) HullaLerak(playerid, PosExt(pos), reason, GetPlayerVirtualWorld(playerid), JatekosNev(killerid));
		else HullaLerak(playerid, PosExt(pos), reason, GetPlayerVirtualWorld(playerid));

		if(ServerInfo[sHarcVan] != NINCS && PlayerInfo[playerid][pHarcol]) HarcKieses(playerid, "Meghalt");
		
		PlayerInfo[playerid][pJailIdo] = KORHAZIDO;
		PlayerInfo[playerid][pjail] = 1;
		
		Anim(playerid,0);
		Borton(playerid, 1);
		BortonInfo(playerid, "Rendszer", "Halál");
		
		SCM(playerid, COL_LRED, "A kórházi költség 100 $ volt! Levonva a számládról!");
		
		PlayerInfo[playerid][pBszPenz] -= 100;
		PlayerInfo[playerid][pFegyver] = 0;
		DeleteWeapon(playerid);
		if(PlayerInfo[playerid][ppenz] > 0)	PlayerInfo[playerid][ppenz] = 0;

		if(Korozes[playerid][krSzint])
		{
			new penz = (Korozes[playerid][krSzint] * 150);
			PlayerInfo[playerid][pBszPenz] -= penz;
			FInfo[ FRAKCIO_LSPD ][fPenz] += penz;
			Korozes[playerid][krSzint] = 0;
			SFM(playerid, COL_LRED, "Mivel halálod elõtt körözés volt rajtad, azért %s$ levonásra került a bankszámládról!", FN(penz, 0, ','));
		}

	}
	else
	{
		Anim(playerid,0);
		SetPos(playerid, PosExt(pos));
		SCM(playerid, COL_MKEK, "Mivel Adminszolgálatban vagy, így visszakerültél a halálod helyszínére.");
	}
	return true;
}
fpublic OnVehicleDestroy(vehicleid)
{
	dvector(c_Ujjlenyomatok[vehicleid]);
	
	new jarmuidje = JarmuID(vehicleid, INVALID_PLAYER_ID);
	
	if(IsValidDynamicObject(vInfo[jarmuidje][vVillogo]))
 		DestroyDynamicObject(vInfo[jarmuidje][vVillogo]);

    if(IsValidDynamicObject(vInfo[jarmuidje][vTaxi]))
 		DestroyDynamicObject(vInfo[jarmuidje][vTaxi]);
 		
    SziklaTorol(vehicleid);
    
}
stock GetVehicleModelSeats(modelid)
{
    static const g_aVehicleSeats[] =
	{
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4,
		4, 2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2,
		2, 4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2,
		1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4,
		2, 2, 4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2,
		4, 4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0,
		4, 0, 0
	};
	return (modelid < 400 || modelid > 611) ? (0) : (g_aVehicleSeats[(modelid - 400)]);
}
#define GetVehicleSeats(%0) \
        (GetVehicleModelSeats(GetVehicleModel(%0)))

CMD:ujjlenyomat(playerid, params[])
{
	new param[32];
	if(sscanf(params, "s[32]{}", param)) return SCM(playerid, COL_LRED, "/ujjlenyomat [vesz / keres]");
	
	if(egyezik(param, "vesz"))
	{
	    new jatekos;
		if(sscanf(params, "{s[32]}u", jatekos)) return SCM(playerid, COL_LRED, "/ujjlenyomat vesz [JátékosID / Név]");
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos)) return NincsJatekos(playerid);
		
		Kerelem[playerid][KERELEM_UJJLENYOMAT] = jatekos;
		Kerelem[jatekos][KERELEM_UJJLENYOMAT] = playerid;
		
		new kicsinalja[128];

		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
		}
		if(PlayerInfo[playerid][pAlnevbe] == true)
		{
			format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
		}
		if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
		{
			format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
		}
		SFM(jatekos,COL_MKEK,"%s ujjlenyomatot venne tõled || /elfogad ujjlenyomat",kicsinalja);
		SCM(playerid,COL_MKEK,"Ujjlenyomat vételi kérelem elküldve");
	}
	else if(egyezik(param, "keres"))
	{
	    if(PlayerInfo[playerid][pFoglalt]) return SCM(playerid, COL_LRED, "Most mással vagy elfoglalva...");
	    
	    new ajto;
		if(sscanf(params, "{s[32]}d", ajto)){
			SCM(playerid, COL_LRED, "/ujjlenyomat keres [Ajtó (0 - 3)]");
			SCM(playerid, COL_FEHER, "0 - Sofõr");
			SCM(playerid, COL_FEHER, "1 - Anyósülés");
			SCM(playerid, COL_FEHER, "2 - Bal hátsó");
			SCM(playerid, COL_FEHER, "3 - Bal hátsó");
			return 1;
		}
		
		if(ajto < 0 || ajto > 3){
		    SCM(playerid, COL_LRED, "/ujjlenyomat keres [Ajtó (0 - 3)]");
			SCM(playerid, COL_FEHER, "0 - Sofõr");
			SCM(playerid, COL_FEHER, "1 - Anyósülés");
			SCM(playerid, COL_FEHER, "2 - Bal hátsó");
			SCM(playerid, COL_FEHER, "3 - Bal hátsó");
			return 1;
		}
		new vehicleid = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, vehicleid) < 5.0)
		{
		    PlayerInfo[playerid][pFoglalt] = true;
		    
		    Freeze(playerid, 10000);
			defer MuveletTimer[10000](playerid, T_UJJLENYOMAT, vehicleid, ajto);
			LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0, 1, 0, 0, 1, 0, 1);
			Cselekves(playerid, "nyomokat keres...");
			
		}
		else
		    return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
	}
	return 1;
}
stock UjjLenyomatHozzaad(vehicleid, seat, playerid)
{
	if(!vector_exists(c_Ujjlenyomatok[vehicleid])) return false;//SCM(playerid, COL_LRED, "UjjLenyomatHozzaad: vector nem létezik!");

	new ujjlenyomatarray[MAX_PLAYER_NAME + 5];
	format(ujjlenyomatarray, MAX_PLAYER_NAME + 5, "%d|%s", seat, JatekosNev(playerid, true));
	vector_push_back_arr(c_Ujjlenyomatok[vehicleid], ujjlenyomatarray);
	
	return true;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(GetJarmu(vehicleid, KOCSI_MOTOR) == 1)
		SetJarmu(vehicleid, KOCSI_MOTOR, 0);
		
	new vid = JarmuID(vehicleid, killerid);

    new Float:vhealth;
    GetVehicleHealth(vehicleid,vhealth);
    if(vhealth < 250) //felrobbant
 	{
		if(vInfo[vid][vMunka] == 100 || vInfo[vid][vMunka] >= 20)
		{
			vInfo[vid][vZarva] = false;
			vInfo[vid][vUzemanyag] = MAX_Benzin[ vInfo[vid][vModel] - 400 ];
			vInfo[vid][vBerelt] = false;
			vInfo[vid][vElet] = 1000.0;
		}
		else
		{
			vInfo[vid][vElet] = 450.0;
		}
 	}
 	else //vízbe esett
 	{
 	    
 	}
	SetVehicleHealth(vehicleid, vInfo[vid][vElet]);
	vUpdate(vid, vuElet);
	return true;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	new vid = JarmuID(vehicleid, forplayerid);

	if(vInfo[vid][vZarva])
		SetVehicleParamsForPlayer(vInfo[vid][vID], forplayerid, 0, 1);

    PlayerInfo[forplayerid][pStreameltvehicle]++;
	return true;
}

public OnVehicleSpawn(vehicleid)
{
	new vid = JarmuID(vehicleid, INVALID_PLAYER_ID);
	if(vid)
	{
		if(vInfo[vid][vMunka] == 100 || vInfo[vid][vMunka] >= 20)
		{
			vInfo[vid][vZarva] = false;
			vInfo[vid][vUzemanyag] = MAX_Benzin[ vInfo[vid][vModel] - 400 ];
			vInfo[vid][vBerelt] = false;
			vInfo[vid][vElet] = 1000.0;
		}

		SetVehicleHealth(vehicleid, vInfo[vid][vElet]);
		vInfo[vid][vRadio] = 0;
		vInfo[vid][vMotorelinditva] = false;

		ChangeVehicleColor(vehicleid, vInfo[vid][vSzin1], vInfo[vid][vSzin2]);
		SetVehicleNeon( vid, 0 );

		if(IsValidDynamicObject(vInfo[vid][BalIndex1])) DestroyDynamicObject(vInfo[vid][BalIndex1]);
		if(IsValidDynamicObject(vInfo[vid][BalIndex2])) DestroyDynamicObject(vInfo[vid][BalIndex2]);
		if(IsValidDynamicObject(vInfo[vid][BalTrailer1])) DestroyDynamicObject(vInfo[vid][BalTrailer1]);
		if(IsValidDynamicObject(vInfo[vid][BalTrailer2])) DestroyDynamicObject(vInfo[vid][BalTrailer2]);

		vInfo[vid][BalIndex1] = 0;
		vInfo[vid][BalIndex2] = 0;
		vInfo[vid][BalTrailer1] = 0;
		vInfo[vid][BalTrailer2] = 0;
		vInfo[vid][BalIndex] = 0;

		if(IsValidDynamicObject(vInfo[vid][JobbIndex1])) DestroyDynamicObject(vInfo[vid][JobbIndex1]);
		if(IsValidDynamicObject(vInfo[vid][JobbIndex2])) DestroyDynamicObject(vInfo[vid][JobbIndex2]);
		if(IsValidDynamicObject(vInfo[vid][JobbTrailer1])) DestroyDynamicObject(vInfo[vid][JobbTrailer1]);
		if(IsValidDynamicObject(vInfo[vid][JobbTrailer2])) DestroyDynamicObject(vInfo[vid][JobbTrailer2]);

		vInfo[vid][JobbIndex1] = 0;
		vInfo[vid][JobbIndex2] = 0;
		vInfo[vid][JobbTrailer1] = 0;
		vInfo[vid][JobbTrailer2] = 0;
		vInfo[vid][JobbIndex] = 0;

		TuningBetolt(vehicleid);
		KocsinObject[vid] = 0;
		KocsinObject1[vid] = 0;
		KocsinObject2[vid] = 0;
		KocsinObject3[vid] = 0;
		KocsinObject4[vid] = 0;
		KocsinDarab[vid] = 0;
		Alvany[vid] = 0;
		Mosogep[vid] = 0;
		Tv[vid] = 0;
		Radiator[vid] = 0;
		Video[vid] = 0;
		
		JarmuRendszam(vid);
	}
    SziklaTorol(vehicleid);
	return true;
}

public OnPlayerClickMap(playerid,Float:fX,Float:fY,Float:fZ)
{
	if(Admin(playerid,1))
	{
	    PlayerInfo[playerid][pWPjelolve] = 1;
	    PlayerInfo[playerid][pWPX] = fX;
	    PlayerInfo[playerid][pWPY] = fY;
	    PlayerInfo[playerid][pWPZ] = fZ;
	    SCM(playerid,COL_MKEK,"Kijelölted a WayPointot, használd a /wp parancsot a teleportáláshoz.");
	}
	return 1;
}
public OnPlayerUpdate(playerid)
{
    if(Kicked[playerid]) return false;
    
    if(s0beitCheck[playerid][checking] && s0beitCheck[playerid][spawned])
	{
		if (s0beitCheck[playerid][stage] == 1)
		{
            s0beitCheck[playerid][vehicleId] = CreateVehicle(457, 0.05, -0.43, 500.71, 0, 0, 0, -1);

		    if(s0beitCheck[playerid][vehicleId] != INVALID_VEHICLE_ID)
		    {
				ASSetVW(playerid);

				SetVehicleVirtualWorld(s0beitCheck[playerid][vehicleId], GetPlayerVirtualWorld(playerid));
		        PutPlayerInVehicle(playerid, s0beitCheck[playerid][vehicleId], 0);

				s0beitCheck[playerid][stage] = 2;
				//s0beitCheck[playerid][asTimer] = defer ASKickLagger(playerid);
		    }
		    else
			{
			    new szPlayerName[MAX_PLAYER_NAME];
			    GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);

			    printf("[anti-s0beit] %s át lett engedve az ellenõrzésen, mert nem sikerült jármûvet spawnolni.", szPlayerName);

				ASCleanup(playerid);
			    AllowPlayerIntoGame(playerid);
			}
		}
		else if(s0beitCheck[playerid][stage] == 4)
		{
		    new weapon, ammo;

			if(GetPlayerWeaponData(playerid, 1, weapon, ammo) && ++s0beitCheck[playerid][counter] && weapon != 0 && ammo != 0)
			{
			    new szPlayerName[MAX_PLAYER_NAME];
			    GetPlayerName(playerid, szPlayerName, MAX_PLAYER_NAME);

				s0beitCheck[playerid][stage] = 0;

				ASCleanup(playerid);
				SeeKick(playerid,"[Hack]S0beit!");
			}
			else if(s0beitCheck[playerid][counter] > 21 && (GetTickCount() - s0beitCheck[playerid][check_started]) > 100)
			{
				ASCleanup(playerid);
				AllowPlayerIntoGame(playerid);
			}
		}

		return 0;
	}
    if(PlayerInfo[playerid][pDesync])//Szinkronizálás kikapcsolása
		return false;
		
	if(PlayerInfo[playerid][pDesyncTrue])//Szinkronizálás kikapcsolása
		return true;
		
	if(!Belepve(playerid)) return 0; //Nem szinkronizálunk a többi playernek, ha nincs belépve
	if(Lefagyasztva[playerid]) // Nem szinkronizálunk gombnyomásokat ha le van fagyasztva.
	{
	    new keys, ud, lr;
    	GetPlayerKeys(playerid, keys, ud, lr);

		if (keys || ud || lr)
		{
			return 0;
		}
	}
	new Float:fPlayerPosition[3], Float:fCameraPosition[3], Float:fCameraFrontVector[3];

	GetPlayerPos(playerid, fPlayerPosition[0], fPlayerPosition[1], fPlayerPosition[2]);
	GetPlayerCameraPos(playerid, fCameraPosition[0], fCameraPosition[1], fCameraPosition[2]);
	GetPlayerCameraFrontVector(playerid, fCameraFrontVector[0], fCameraFrontVector[1], fCameraFrontVector[2]);

	if((fPlayerPosition[0] > WB_MAX_X || fPlayerPosition[0] < WB_MIN_X) || (fPlayerPosition[1] > WB_MAX_Y || fPlayerPosition[1] < WB_MIN_Y) || (fPlayerPosition[2] > 20000.0 || fPlayerPosition[2] < -20000.0))
		return 0;

    new bool:bPossibleCrasher = false;

	if((fCameraPosition[0] > WB_MAX_X || fCameraPosition[0] < WB_MIN_X) || (fCameraPosition[1] > WB_MAX_Y || fCameraPosition[1] < WB_MIN_Y) || (fCameraPosition[2] > 20000.0 || fCameraPosition[2] < -20000.0))
	{
		new szPlayerName[24];
		GetPlayerName(playerid, szPlayerName, 24);

		printf("%s valószínûleg crasheltetni próbál. (camera position is out of world bounds)", szPlayerName);

		bPossibleCrasher = true;
	}

	for(new i = 0; i < 3; i++)
	{
		if(floatabs(fCameraFrontVector[i]) > 25.0)
		{
			new szPlayerName[24];
			GetPlayerName(playerid, szPlayerName, 24);

			printf("%s valószínûleg crasheltetni próbál. (invalid camera front vector)", szPlayerName);

			bPossibleCrasher = true;
		}
	}

	if(bPossibleCrasher)
	{
		if(GetTickCount() - CrashAttemptLastCleanupTick[playerid] > 3500)
		{
		    CrashAttempts[playerid] = 0;
		    CrashAttemptLastCleanupTick[playerid] = GetTickCount();
		}

		if(CrashAttempts[playerid] >= 10)
		{
			new szPlayerName[24];
			GetPlayerName(playerid, szPlayerName, 24);

		    printf("%s kickelve lett, mert túl sok hibás aim sync packetet küldött.", szPlayerName);
		}
		else
		    CrashAttempts[playerid]++;

		return 0;
	}
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		if(!g_DrivingVehicle[playerid] || g_IsPassenger[playerid])
			return 0;

	    if(g_DrivenVehicleID[playerid] != GetPlayerVehicleID(playerid))
			return 0;
	}
	if(VasNala[playerid] != -1)
	{
		new Keys,ud,lr;
		GetPlayerKeys(playerid,Keys,ud,lr);
		if((ud == KEY_UP || ud == KEY_DOWN || lr == KEY_LEFT || lr == KEY_RIGHT))
		{
		   ApplyAnimation(playerid,"BOX","bxhipwlk",1300,1,1,1,1,5000);
		}
	}
	if(PlayerInfo[playerid][ArmorObjFenn] == true && !KompatibilisSkin(GetPlayerSkin(playerid)))
	{
		Melleny(playerid, 0);
	}
	if(PlayerInfo[playerid][pGodmode] == 1)
	{
	   SetArmor(playerid, MAX_ARMOR);
	   SetHealth(playerid, MAX_HP);
	}

	if(PlayerInfo[playerid][pTeruletSzerkeszt])
	{
		new
			Keys,
			UpDown,
			LeftRight;

		GetPlayerKeys(playerid, Keys, UpDown, LeftRight);
		TogglePlayerControllable(playerid, false);

		if(LeftRight == KEY_LEFT)
			tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0] -= 8.0;
		else if(LeftRight & KEY_LEFT && Keys & KEY_FIRE)
			tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0] += 8.0;
		else if(LeftRight == KEY_RIGHT)
			tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0] += 8.0;
		else if(LeftRight & KEY_RIGHT && Keys & KEY_FIRE)
			tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0] -= 8.0;
		else if(UpDown == KEY_UP)
			tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1] += 8.0;
		else if(UpDown & KEY_UP && Keys & KEY_FIRE)
			tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1] -= 8.0;
		else if(UpDown == KEY_DOWN)
			tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1] -= 8.0;
		else if(UpDown & KEY_DOWN && Keys & KEY_FIRE)
			tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1] += 8.0;
		else if(Keys & KEY_SECONDARY_ATTACK)
		{
			TogglePlayerControllable(playerid, true);
			TeruletMentesID(PlayerInfo[playerid][pTerulet]);
			SendFormatMessage(playerid, COLOR_MKEK, "%s terület sikeresen létrehozva!", tInfo[PlayerInfo[playerid][pTerulet]][tNev]);
			PlayerInfo[playerid][pTerulet] = 0;
			PlayerInfo[playerid][pTeruletSzerkeszt] = false;
			TeruletFrissites();
		}

		GangZoneDestroy(tInfo[PlayerInfo[playerid][pTerulet]][tZone]);
		DestroyDynamicArea(tInfo[PlayerInfo[playerid][pTerulet]][tArea]);
		tInfo[PlayerInfo[playerid][pTerulet]][tZone] = GangZoneCreate(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1]);
		tInfo[PlayerInfo[playerid][pTerulet]][tArea] = CreateDynamicRectangle(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1]);

		GangZoneShowForPlayer(playerid, tInfo[ PlayerInfo[playerid][pTerulet] ][tZone], COLOR_TERULET_GREY);
		return true;
	}

	if(GetPlayerVehicleID(playerid) && !PlayerInfo[playerid][pVehiclePosUpdated])
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		GetVehiclePos(vehicleid, VehiclePos[vehicleid][0], VehiclePos[vehicleid][1], VehiclePos[vehicleid][2]);
		PlayerInfo[playerid][pVehiclePosUpdated] = true;
	}



	if(noclipdata[playerid][cameramode] == CAMERA_MODE_FLY)
	{
		new keys,ud,lr;
		GetPlayerKeys(playerid,keys,ud,lr);

		if(noclipdata[playerid][mode] && (GetTickCount() - noclipdata[playerid][lastmove] > 100))
		{
		    MoveCamera(playerid);
		}
		if(noclipdata[playerid][udold] != ud || noclipdata[playerid][lrold] != lr)
		{
			if((noclipdata[playerid][udold] != 0 || noclipdata[playerid][lrold] != 0) && ud == 0 && lr == 0)
			{
				StopPlayerObject(playerid, noclipdata[playerid][flyobject]);
				noclipdata[playerid][mode]      = 0;
				noclipdata[playerid][accelmul]  = 0.0;
			}
			else
			{
				noclipdata[playerid][mode] = GetMoveDirectionFromKeys(ud, lr);
				MoveCamera(playerid);
			}
		}
		noclipdata[playerid][udold] = ud; noclipdata[playerid][lrold] = lr;
		return false;
	}

	if(PlayerInfo[playerid][pFegyver] != 0)
	{
		if(GetPlayerWeapon(playerid) == PlayerInfo[playerid][pFegyver])
		{
			new weapon[2];
			GetPlayerWeaponData(playerid, aWeaponSlotok[PlayerInfo[playerid][pFegyver]], weapon[0], weapon[1]);

			new wep, ammo, slot = GetGunSlot(PlayerInfo[playerid][pFegyver]);

			GetPlayerWeaponData(playerid, slot, wep, ammo);
		
			if(PlayerInfo[playerid][pToltenyek][ slot ] >= ammo){
				PlayerInfo[playerid][pToltenyek][ slot ] = ammo;
   			}
		}
		else if(GetPlayerWeapon(playerid) != PlayerInfo[playerid][pFegyver])
  		{
            if(PlayerInfo[playerid][pFegyver] > 47)
			{
				Fegyver(playerid, false);
   			}
			if(PlayerInfo[playerid][pFegyverMuvelet] < gettime() && !IsPlayerInAnyVehicle(playerid))
			{
				SCM(playerid, COL_MKEK, "Elraktad a fegyvered a zsebedbe");
				Fegyver(playerid, false);
			}
		}
	}
	

    switch(GetPlayerWeapon(playerid))
	{
	  	case 44, 45:
	  	{
   			new keys, ud, lr;
	    	GetPlayerKeys(playerid, keys, ud, lr);
	    	if((keys & KEY_FIRE) && (!IsPlayerInAnyVehicle(playerid)))
			{
			  	return 0;
			}
		}
	}


	if( IsPlayerInAnyVehicle( playerid ) && !PlayerInfo[playerid][pSpeedBoots])
	{
        new Float:vehh, v_id;
		v_id = GetPlayerVehicleID( playerid );
		GetVehicleHealth( v_id, vehh );
		if( vehh != vehicleh[ v_id ] )
		{
			CallLocalFunction("OnVehicleHealthChange", "iiff", playerid, v_id, vehicleh[ v_id ], vehh);
			vehicleh[ v_id ] = vehh;
		}
	}
	if(PlayerInfo[playerid][pSK] && IsPlayerInAnyVehicle(playerid))
		Sebessegkorlat(playerid);

	return 1;
}

//Én -> Aki lõ engem -> Sebzés mértéke -> Fegyver
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
	if(PlayerInfo[playerid][pAduty] && !Admin(issuerid,1) && dmoff == 1 && issuerid != INVALID_PLAYER_ID)
        return SeeKick(issuerid,"Adminszolgálatos sebzése.",NINCS);

    if(playerid == INVALID_PLAYER_ID || PlayerInfo[playerid][pAduty] || PlayerInfo[playerid][pASduty] || PlayerInfo[playerid][pSpawnVedelem])
	{
	    GiveHealth(playerid, amount);
		return 1;
 	}
 	
	if(PlayerInfo[playerid][pGodmode] == 1)
	{
	    SetArmor(playerid,MAX_ARMOR);
		SetHealth(playerid,MAX_HP);
		return 1;
	}
	
    if(issuerid != INVALID_PLAYER_ID)
	{
	    if(PlayerInfo[issuerid][pUzemmod] == 1)
	        GiveHealth(playerid, amount);
	        
		if(PlayerInfo[playerid][pSpawnVedelem] || PlayerInfo[playerid][pAduty])
			return true;

        if(weaponid && !IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][pAnimban][0] == 0 && PlayerInfo[playerid][pHitmanDuty] == 0)
		{
			if(Lofegyver(weaponid) && weaponid >= 22 && weaponid <= 34)
	  		{
	  		    new index = bodyPartToAnimVarIndex(bodypart);
			  	if(index != NINCS)
			  	    if(bodypart != BODY_PART_TORSO || PlayerInfo[playerid][pPancel] < 10.0)
			  			PlayerInfo[playerid][pAnimban][ index ] ++;

				if(weaponid == 34 && bodypart != BODY_PART_HEAD)
				{
				    SCM(playerid, COL_MKEK, "Súlyos sérülést szereztél, ezért összeestél!");
					Anim(playerid, 1);
				}

				switch( bodypart )
				{
					case BODY_PART_HEAD:
					{
						if(PlayerInfo[playerid][pSWATDuty] == 0 && PlayerInfo[issuerid][pMergezoMod] == 0)
						{
							if(weaponid >= 22 && weaponid <= 34)
							{
								Shooted[playerid][issuerid] = gettime();
								PlayerInfo[playerid][pScriptShoot][0] = playerid; // anti fakekill miatt
								PlayerInfo[playerid][pScriptShoot][1] = weaponid;
							  	new Float:x,Float:y,Float:z; GetPlayerPos(playerid, x,y,z);
								HullaLerak(playerid,x, y, z, weaponid, GetPlayerVirtualWorld(playerid), JatekosNev(issuerid));
								SetHealth(playerid, 0.0);
								SCM(issuerid,COL_VZOLD,"Fejenlõtted ezért meghalt!");
								SCM(playerid,COL_LRED,"Fejenlõttek ezért meghaltál!");
							}
						}
						return true;
					}
					case BODY_PART_TORSO:
					{
					    if(PlayerInfo[playerid][pPancel] < 10.0 && PlayerInfo[playerid][pPancel] > 0.0)
					        GiveHealth(playerid, -amount);

	                    if(PlayerInfo[playerid][pAnimban][ BODY_PART_TORSO ] > 15 && PlayerInfo[playerid][pPancel] < 10.0)
	                    {
	                        SCM(issuerid, COL_MKEK, "A célpontod túl sok sebzést kapott ezért összeesett!");
							SCM(playerid, COL_MKEK, "Több, mint 15ször mellkason lõttek ezért összeestél!");
							Anim(playerid, 1);
	                    }
					}
					case BODY_PART_LEFT_LEG, BODY_PART_RIGHT_LEG:
					{
						if(weaponid >= 22 && weaponid <= 34)
						{
							if(PlayerInfo[playerid][pSWATDuty] == 0 && PlayerInfo[issuerid][pMergezoMod] == 0 && PlayerInfo[playerid][pAnimban][0]  == 0)
							{
								if(PlayerInfo[playerid][pAnimban][ BODY_PART_RIGHT_LEG_A ] >= 3 || PlayerInfo[playerid][pAnimban][ BODY_PART_LEFT_LEG_A ] >= 3 || PlayerInfo[playerid][pAnimban][ BODY_PART_LEFT_LEG_A ] != 0 && PlayerInfo[playerid][pAnimban][ BODY_PART_RIGHT_LEG_A ] != 0)
								{
									SCM(issuerid, COL_MKEK, "Lábon lõtted ezért összeesett!");
									SCM(playerid, COL_MKEK, "Lábon lõttek ezért összeestél!");
									Anim(playerid, 1);
		   						}
							}
						}
					}
				}
	  		}
		}
		if(IsHitman(issuerid) && !IsPlayerNPC(playerid) && PlayerInfo[issuerid][pMergezoMod] == 1 && (PlayerInfo[issuerid][pFegyver] == 23 || PlayerInfo[issuerid][pFegyver] == 34))
		{
			if(PlayerInfo[issuerid][pMergezoLovedekek] > 0 && Mergezve[playerid] == 0)
			{
				Mergezve[playerid]++;
				SetPlayerDrunkLevel(playerid, 25000);
				defer Mergezes[25000](playerid,issuerid);
				SFM(issuerid,COL_VZOLD,"(( Eltaláltad egy mérgezett lövedékkel "#COL_LKEK"%st"#COL_FEHER"! A méreg hamarosan kifejti hatását.. ))",JatekosNev(playerid));
				SCM(playerid,COL_LRED,"Eltalált egy mérgezett lövedék! A méreg hamarosan kifejti hatását..");
				LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
			}
		}

		if(ServerInfo[sDMOff] && PlayerInfo[playerid][pAduty] && !Admin(issuerid, 0))
		{
			SCM(issuerid, COL_LRED, "Azért van Adminszolgálatban, hogy segítsen, ne bántsd...");
			SeeKick(issuerid,"Ne lõdd az Adminszolgálatost!",NINCS);
		}

		if(PlayerInfo[issuerid][pFegyver] == 9)
		{
			SetHealth(playerid, (PlayerInfo[playerid][pElet]));
			PlayerInfo[issuerid][pFureszelt]++;
			if(PlayerInfo[issuerid][pFureszelt] == 5)
			{
				SCM(issuerid, COL_LRED, "Legyen már eszed! IRL se tennél ilyet...");
				SeeKick(issuerid,"Mi vagy te? Láncfûrészes gyilkos?",NINCS);
			}
		}
		Shooted[playerid][issuerid] = gettime();
	}
	else
	{

		if((PlayerInfo[playerid][pPancel] - amount) >= 0)
			GiveArmor(playerid, -amount);
		else
		{
			if((PlayerInfo[playerid][pElet] - amount) <= 0)
			{
				SetHealth(playerid, 0.0);
				return true;
			}
			else
				GiveHealth(playerid, - amount);
		}
	}
    return true;
}
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	if(PlayerInfo[damagedid][pAnimban][0] == 1 && PlayerInfo[damagedid][pNemolheto] > 0)
	{
		GiveHealth(damagedid, amount);
		SFM(playerid,COL_LRED,"Még %d másodpercet kell várnod hogy megölhesd!",PlayerInfo[damagedid][pNemolheto]);
		return 1;
	}
	if(PlayerInfo[playerid][pDrogMuvelet][0] == 2)
		amount -= ((amount * 30) / 100);

	if((PlayerInfo[damagedid][pPancel] - amount) >= 0.0)
		GiveArmor(damagedid, -amount);
	else
	{
		if((PlayerInfo[damagedid][pElet] - amount) <= 0)
		{
			Shooted[damagedid][playerid] = gettime();
			PlayerInfo[damagedid][pScriptShoot][0] = playerid;
			PlayerInfo[damagedid][pScriptShoot][1] = weaponid;
			SetHealth(damagedid, 0.0);
			return true;
		}
		else
			GiveHealth(damagedid, - amount);
	}
	if(Bejelzett[playerid] == 0 && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0 && !RendvedelmiFrakcioTag(playerid))
	{
	    if(PlayerInfo[playerid][pFegyver] >= 22 && PlayerInfo[playerid][pFegyver] <= 34)
	    {
			new str1[250];
			new zona[MAX_ZONE_NAME];
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid, X,Y,Z);
			foreach(Player,x)
			{
			   if(PlayerInfo[x][pDuty][0] && PlayerInfo[x][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[x][pFrakcio] == FRAKCIO_KATONA || PlayerInfo[x][pFrakcio] == FRAKCIO_FBI)
			   {
  	 				MarkPlayer(playerid, x, COLOR_NAR, false, JELZES_KOROZES);
  	 				defer unMarkPlayer[10 * 60000](playerid, x);
			   }
			}
			GetPlayer2DZone(playerid, zona, MAX_ZONE_NAME);
			format(str1, sizeof(str1), "[CCTV]: {1E90FF}%s körzetben "#COL_NARANCS"lövöldözés{1E90FF} történt! Jelölve a térképen - (( /cctv ))",zona);
			FrakcioUzenet(RED, FRAKCIO_FBI, str1);
			FrakcioUzenet(RED, FRAKCIO_LSPD, str1);
			FrakcioUzenet(RED, FRAKCIO_KATONA, str1);
			Bejelzett[playerid] += 180;
		}
	}
	return true;
}

fpublic OnPlayerHealthChange(playerid, Float:newhealth, Float:oldhealth)
{
	if(PlayerInfo[playerid][pSpawnVedelem] && newhealth < MAX_HP)	SetHealth(playerid, MAX_HP);
	if(newhealth < 10)	{	Anim(playerid, 1);	}
	return true;
}

fpublic OnVehicleHealthChange( playerid, vehicleid, Float:regielet, Float:ujelet )
{
	if((gettime() - vehlastshot[vehicleid]) >= 1)
	{
		new
			Float:jatekoselet,
			Float:Elet,
			Float:kulonbseg = (regielet - ujelet)/*,
			drunklevelplusz*/;
			
  		if(PlayerInfo[playerid][pAduty])
			return true;

		if(regielet > ujelet && (regielet - ujelet) > (UtkozesErzekenyseg * 2.8))
		{
			//GetPlayerHealth(playerid, jatekoselet);
			jatekoselet = PlayerInfo[playerid][pElet];

			if(GetPlayerState(playerid) == 2)
			{
				if(PlayerInfo[playerid][pOv])
	   			{
					Elet = jatekoselet - ((kulonbseg / UtkozesErzekenyseg) / 2);
					//drunklevelplusz = floatround((kulonbseg*10)/2);
	   			}
				else
	   			{
					Elet = jatekoselet - (kulonbseg / UtkozesErzekenyseg);
					//drunklevelplusz = floatround((kulonbseg*10));
				}
			}

			else if(GetPlayerState(playerid) == 3)
			{
				if(PlayerInfo[playerid][pOv]){
					Elet = jatekoselet - (kulonbseg / ((UtkozesErzekenyseg + 3) / 2));
					//drunklevelplusz = floatround((kulonbseg*10)/2);
	   			}
				else{

					Elet = jatekoselet - (kulonbseg / (UtkozesErzekenyseg + 3));
					//drunklevelplusz = floatround((kulonbseg*10));
	   			}
			}
            /*if(GetPlayerDrunkLevel(playerid) < 5000) drunklevelplusz += 5000;
            SetPlayerDrunkLevel(playerid, drunklevelplusz);*/
            
			SetHealth(playerid, Elet);

			/*if(!PlayerInfo[playerid][pOv])
				FadePlayerScreen(playerid, COLOR_BLACK, 25);*/
		}
	}
	return true;
}
timer Restart[30000](idx)
{
	#if NPC_KELL == 1
		new i = -1;
		for(;++i < 100;)
		{
			if(BotInformacio[i][botID])
				FCNPC_Destroy(BotInformacio[i][botID]);
		}
	#endif

	//mysql_close();
	SendClientMessage(idx, COLOR_MKEK, "[Szerver]: Mentés lefutott -> Újraindítás folyamatban! (Éles szerver esetén UCP-n indítsd újra!)");

	#if HAZI_SZERVER != 0
		SendRconCommand("gmx");
	#endif

	return true;
}

//Ne írd át! Ha mentés kell, akkor az enumban add meg - Martin
stock vUpdate(id, ...)
{
	if(!vInfo[id][vInsert])
		return true;

	new idx;
	for(;++idx < numargs();)
		vUpdates[id][vehUpdate:(getarg(idx))] = true;

	return true;
}

//Terhelés elosztás -> Frakció - Martin
stock FkUpdate(id, ...)
{
	new idx;
	for(;++idx < numargs();)
		FUpdates[id][fk_Update:(getarg(idx))] = true;

	//FInfo[id][fKellUpdates] = true;
	return true;
}

stock JarmuToID(const vname[])
{
	for(new i = 0; i < 211; i++)
	{
		if(!strfind(VehicleNames[i], vname, true))
			return i + 400;
	}
	return -1;
}

stock Belepve(playerid, bool:online = true)
{
	if(online && !IsPlayerConnected(playerid))
		return false;
	if(!PlayerInfo[playerid][pbelepve])
		return false;

	return true;
}

fpublic BanTorles(playerid)
{
	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
		new get[3][128], form[128];
		cache_get_field_content(0, "Cim", 		get[0]);
		cache_get_field_content(0, "Banolta", 	get[1]);
		cache_get_field_content(0, "Oka", 		get[2]);

		if(!strcmp(PlayerInfo[playerid][pNev], get[1]) || Admin(playerid, FOADMIN_SZINT))
		{
			AdminLog("[Unban] %s feloldott egy tiltást! Név/IP: %s | Tiltó: %s | Oka: %s", JatekosNev(playerid, false, true), get[0], get[1], get[2]);
			AdminUzenet(COLOR_LIGHTRED, 1, "%s feloldott egy tiltást! Név/IP: %s | Tiltó: %s", JatekosNev(playerid, false, true), get[0], get[1]);

			mysql_tquery(sql_ID, (format(form, sizeof(form), "DELETE FROM `"#MYSQL_BAN_TABLA"` WHERE Cim = '%s'", get[0]), form), "", "");
			SendFormatMessage(playerid, COLOR_MKEK, "[Unban]: Tiltás feloldva! Név/IP: %s | Tiltó: %s | Oka: %s", get[0], get[1], get[2]);
		} else
			SendFormatMessage(playerid, COLOR_WHITE, "[Unban]: Ezt a tiltást nem odhatod fel mivel "#COL_MKEK"%s"#COL_FEHER" tiltota nem pedig te!", get[1]);

	} else {
		SendClientMessage(playerid, COLOR_MKEK, "[Unban]: Nincs találat az adatbázisban!");
	}

	return true;
}

fpublic GlobalNevValtas( const nev[], jatekos, playerid )
{
	new nums, fields;
	cache_get_data(nums, fields);

	if(!nums)
	{
	    new nevvaltasstr[128];
		if(jatekos != playerid)
		{
			AdminUzenet(COLOR_LIGHTRED, 1, "%s leváltotta %s nevét erre: %s (uID: %d)", JatekosNev(playerid), JatekosNev(jatekos), nev, PlayerInfo[jatekos][pID]);
			format(nevvaltasstr,128,"Admin: %s leváltotta %s nevét %s -re",JatekosNev(playerid),PlayerInfo[jatekos][pNev],nev);
		}
		else
		{
		    AdminUzenet(COLOR_LIGHTRED, 1, "%s nevet váltott! Új név: %s (uID: %d)", JatekosNev(playerid), nev, PlayerInfo[jatekos][pID]);
			format(nevvaltasstr,128,"Admin: %s nevet váltott! Új név: %s",JatekosNev(playerid),nev);
		}
		Log(FILE_NEVVALTAS, nevvaltasstr);

		strmid(PlayerInfo[jatekos][pNev], nev, 0, strlen(nev), MAX_PLAYER_NAME);
		SetPlayerName(jatekos, nev);

		nformat(query, 128, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET nev = '%s' WHERE id = '%d'", nev, PlayerInfo[jatekos][pID]);
		mysql_tquery(sql_ID, query, "", "");
		Adat_Update( jatekos, ADAT_MINDEN );

		if(jatekos != playerid)
			SendFormatMessage(jatekos, COLOR_MKEK, "[Névváltás]: Admin %s leváltotta a nevedet erre: %s (uID: %d)", JatekosNev(playerid), PlayerInfo[jatekos][pNev], PlayerInfo[jatekos][pID]);

        PlayerInfo[jatekos][pAEnged][1] = false;
	}
	else
	{
		SendFormatMessage(playerid, COLOR_MKEK, "[Névváltás]: A választott név ("#COL_FEHER"%s"#COL_MKEK") már szerepel az adatbázisban! Válassz másikat!",nev);
	}

	return true;
}

fpublic BanCheck( playerid, muvelet )
{
	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
		new ido, banolta[MAX_PLAYER_NAME], oka[50], mikor[16], str[64];
		mysql_get_int(0, "UIdo", ido);
		cache_get_field_content(0, "Banolta", banolta);
		cache_get_field_content(0, "Oka", oka);
		cache_get_field_content(0, "Mikor", mikor);

		new mikor2 = floatround((0.0 + ido - gettime()) / 3600.0, floatround_round);
		if((mikor2 > 0) || (ido == 0))
		{
			PlayerInfo[playerid][pTiltvaVan] = true;

			SetSpawnInfo(playerid, 0, 1, 175.2608, -150.5269, 1.5781, 0, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);

			if(ido)
			{
				new ev, ho, nap, ora, perc, mperc;
				uDate(ido, ev, ho, nap, ora, perc, mperc, 1);
				format(str, sizeof(str), "%d.%02d.%02d %02d:%02d", ev, ho, nap, ora, perc);
			} else
				format(str, sizeof(str), "Soha (Örök ban)");

			nformat(uze, 512, ""#COL_FEHER"Oka:"#COL_MKEK" %s\n"#COL_FEHER"Banolt:"#COL_MKEK" %s\n"#COL_FEHER"Lejár:"#COL_MKEK" %s\n"#COL_FEHER"Idõpont:"#COL_MKEK" %s", oka, banolta, str, mikor);
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""#COL_MKEK"Figyelem!"#COL_SZURKE" Ki vagy tiltva!", uze, "OK", "");
			Kick(playerid);

			return false;

		} else {

			nformat(que, 256, "DELETE FROM `"#MYSQL_BAN_TABLA"` WHERE Cim = '%s' OR Cim = '%s'", JatekosNev(playerid), JatekosIP(playerid));
			mysql_tquery(sql_ID, que, "", "");
		}
	}

	TextDrawBetoltes(playerid);

	if(ServerInfo[sRestart] && !IsScripter(playerid))
		ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Figyelem!", "Jelenleg restart folyik a szerveren!\nKérlek várj türelemesen, míg a rendszer helyreállítódik!\nMegértésedet köszönjük!", "OK", "");
	else
	{
		nformat(queryc, 256, "SELECT * FROM `"#MYSQL_JATEKOS_TABLA"` WHERE nev = '%s'", JatekosNev(playerid));
		mysql_tquery(sql_ID, queryc, "CheckPlayer", "d", playerid);
	}
	return true;
}

stock FrakcioUzenet(szin = COLOR_YELLOW, fk, str[], rang = 1)
{
	foreach(Player, i)
	{
		if(!Belepve(i)) continue;
		if(PlayerInfo[i][pLehallgat] == fk || PlayerInfo[i][pFrakcio] == fk && PlayerInfo[i][prang] >= rang && PlayerInfo[i][pCuccok][BL_KEZIRADIO] != 0)
			SendClientMessage(i, szin, str);
	}
}

stock OnlineTagok(frakcio, bool:duty = false)
{
	new db;
	foreach(Player, i)
	{
		if(!Belepve(i) || PlayerInfo[i][pAfkIdo] > 180) continue;
		if(duty && !PlayerInfo[i][pDuty]) continue;
		if(PlayerInfo[i][pFrakcio] == frakcio)
			db++;
	}
	return db;
}


//by Martin
stock TuzGeneral( bool:direkt = false )
{
	if(!ServerInfo[sTuzVan] || direkt) // új tûz generálása
	{
		new tagok = OnlineTagok(FRAKCIO_LAFD, true);
		if(tagok >= TUZ_MINTAG)
		{
			new Iterator:Tuzek<TUZ_MAX_POZ>;
			new x = -1, num = 0;

			for(;++x < TUZ_MAX_POZ;)
			{
				if(TuzPoz[x][tPoz][0] != 0.0)
				{
					Iter_Add(Tuzek, x);
					num++;
				}
			}

			if(!num) return true; //ha nincs betöltve tûz
			new str[128], helyek;

			if(tagok > 5) helyek = TUZ_MAX;
			else helyek = ( random(TUZ_MAX) +1 );
			if(helyek > num) helyek = 1;
			if(tagok > 5)
			{
				tagok = 5;
			}//NE LEGYEN MÁÁÁN SOK PÍZ

			if(direkt) ServerInfo[sTuzPenz] = (((500 * (helyek * tagok * 100)) / 3)/235);//ha direkt indított ne kapjanak annyit..
			else ServerInfo[sTuzPenz] = ((800 * (helyek * tagok * 100))/235);

			if(ServerInfo[sTuzPenz] > 3000)
			{
				ServerInfo[sTuzPenz]=3000;
			}

			for(new t = 0; t < helyek; t++)
			{
				new poz = Iter_Random(Tuzek);
				Iter_Remove(Tuzek, poz);

				Tuz[t][tuzAktiv] = true;

				Tuz[t][tPoz][0] = TuzPoz[poz][tPoz][0];
				Tuz[t][tPoz][1] = TuzPoz[poz][tPoz][1];
				Tuz[t][tPoz][2] = TuzPoz[poz][tPoz][2];

				Tuz[t][tMaxHP] = 50 + (tagok * 80);
				Tuz[t][tHP] = Tuz[t][tMaxHP];

				format(str, 128, "[ %d / %d ]", Tuz[t][tHP], Tuz[t][tMaxHP]);
				Tuz[t][tFelirat] = CreateDynamic3DTextLabel(str, COLOR_MKEK, TuzPoz[ poz ][tPoz][0], TuzPoz[ poz ][tPoz][1],TuzPoz[ poz ][tPoz][2] + 1.0, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

				for(new o = 0; o < TUZ_OBJECT; o++)
					Tuz[t][tObject][o] = CreateDynamicObject(18691, TuzPoz[poz][tPoz][0] + floatrand(-TUZ_TAV, TUZ_TAV), TuzPoz[poz][tPoz][1] + floatrand(-TUZ_TAV, TUZ_TAV), TuzPoz[poz][tPoz][2] - 2.0, 0.0, 0.0, 0.0, .streamdistance = 200.0);

				Tuz[t][tMap] = CreateDynamicMapIcon(TuzPoz[poz][tPoz][0], TuzPoz[poz][tPoz][1],TuzPoz[poz][tPoz][2], 20, 0, NINCS, NINCS, NINCS, 6000.0);
				Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_STYLE, MAPICON_GLOBAL);
				if(Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, NINCS))
					Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, NINCS);

				printf("Szerver: Tûz gyújtása! ID: %d", poz);
			}

			foreach(Player, idx)
			{
				if(!Belepve(idx)) continue;
				if(PlayerInfo[idx][pFrakcio] == FRAKCIO_LAFD)
				{
					//SendClientMessage(idx, COLOR_LIGHTRED, "===================== [ "#COL_FEHER"TÛZRIADÓ"#COL_LRED" ] =====================");
					SendClientMessage(idx, COLOR_YELLOW, "======= TÛZ RIADÓ ======= Koordináták betáplálva a GPS-be, oltsátok el minél hamarabb! =======");

					for(new t = 0; t < helyek; t++)
					{
						if(Tuz[t][tuzAktiv] && !Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, idx))
							Streamer_AppendArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, idx );
					}

					Streamer_Update(idx);
				}
			}

			ServerInfo[sTuzVan] = true;
			ServerInfo[sTuzIdo][0] = 900; //15 percig olthatják el, különben sikertelen
			ServerInfo[sTuzIdo][1] = 0;
		}
	}

	return true;
}

timer FizetesHang[4000](playerid, ertek)
{
	switch(ertek)
	{
		case 1:
		{
			defer FizetesHang[4000](playerid, 2);
			PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		}
		case 2:
			PlayerPlaySound(playerid, 1069, 0.0, 0.0, 0.0);
	}
}

stock TuzMuvelet( muvelet = 1, idx = NINCS )
{
	switch( muvelet )
	{
		case 1: //betöltés
		{
			print("Szerver: Tûz pozíciók betöltése!");
			new i = NINCS, id, pos[128], nums;
			if(nums)
			{
				for(;++i < nums;)
				{
					mysql_get_int(i, "Id", id);
					mysql_get_string(i, "Pos", pos);
					sscanf(pos, "p<,>fff", PosExt(TuzPoz[id][tPoz]));

					if(TuzPoz[id][tPoz][0] != 0.0)
					{
						TuzPoz[id][tMapID] = CreateDynamicMapIcon(PosExt(TuzPoz[id][tPoz]), 36, 0, NINCS, NINCS, NINCS, TUZ_MUTAT_TAV);
						Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_STYLE, 3);
						if(Streamer_IsInArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS))
							Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS);
					}

				}
			}

			printf("Szerver: %d tûz pozíció sikeresen betöltve!", nums);
		}
		case 2: //mentés
		{
		    new aquery[512];
			format(aquery, 128, "INSERT INTO `"#MYSQL_TUZEK_TABLA"` (Id, pos) VALUES ('%d', '%f,%f,%f')", idx, PosExt(TuzPoz[idx][tPoz]));
			mysql_tquery(sql_ID, aquery, "", "");
//lak
		}
		case 3: //törlés
		{
		    new aquery[512];
			format(aquery, 128, "DELETE FROM `"#MYSQL_TUZEK_TABLA"` WHERE Id = '%d'", idx);
			mysql_tquery(sql_ID, aquery, "", "");
//lak
		}
		case 4: //tûz stop
		{
			for(new t = 0; t < TUZ_MAX; t++)
			{
				if(Tuz[t][tuzAktiv])
				{
					DestroyDynamic3DTextLabel(Tuz[t][tFelirat]);
					DestroyDynamicMapIcon(Tuz[t][tMap]);

					for(new o = 0; o < TUZ_OBJECT; o++)
						DestroyDynamicObject(Tuz[t][tObject][o]);

					Tuz[t][tuzAktiv] = false;
				}
			}

			ServerInfo[sTuzIdo][1] = Rand(TUZ_IDO_MIN, TUZ_IDO_MAX);
			ServerInfo[sTuzVan] = false;
			if(idx != NINCS && muvelet == 4)
			{
				nformat(str, 128, "<< %s leállította a tûz akciót! (Pénz nem kerül levonásra) >>", JatekosNev(idx));
				FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LAFD, str);
			}
		}
	}
	return true;
}

fpublic AkaMuvelet(pid, id, muvelet)
{
	new nums, fields, str[256], nev[MAX_PLAYER_NAME], sql[128];
	cache_get_data(nums, fields);

	switch(muvelet)
	{
		case 1:
		{
			if(nums)
			{
				new i = NINCS, uid, bool:val;
				for(;++i < nums;)
				{
					//mysql_get_string(i, "Nev", nev);
					mysql_get_int(i, "Uid", uid);
					/*if(strcmp(nev, JatekosNev(pid)))
					{
						if(!szam) format(str, sizeof(str), "%s", nev);
						else format(str, sizeof(str), "%s, %s", str, nev);
						szam++;
					}*/
					if(!val)
					{
						if(PlayerInfo[pid][pID] == uid)
						{
							val = true;
							format(sql, sizeof(sql), "UPDATE `"#MYSQL_AKA_SYSTEM"` SET Ido='%d' WHERE Uid='%d'", gettime(), PlayerInfo[pid][pID]);
						}
						else
							format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_AKA_SYSTEM"` (Uid, Nev, IP, Ido) VALUES('%d', '%s', '%s', '%d')", PlayerInfo[pid][pID], PlayerInfo[pid][pNev], JatekosIP(pid), gettime());
					}
				}
			} else {
				format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_AKA_SYSTEM"` (Uid, Nev, IP, Ido) VALUES('%d', '%s', '%s', '%d')", PlayerInfo[pid][pID], PlayerInfo[pid][pNev], JatekosIP(pid), gettime());
			}

			mysql_tquery(sql_ID, sql, "", "");

			//if(!strlen(str)) format(str, sizeof(str), "Nincs");
			//format(str, sizeof(str), "%s belépett! Aka: %s", JatekosNev(pid), str);
			//AdminUzenetEx(COLOR_LIGHTRED,1, str);
		}
		case 2:
		{
			str[0] = EOS;
			if(nums)
			{
				new i = -1, szam;
				for(;++i < nums;)
				{
					mysql_get_string(i, "Nev", nev);
					if(!egyezik(nev, JatekosNev(pid)))
					{
						if(!szam) format(str, sizeof(str), "%s", nev);
						else format(str, sizeof(str), "%s, %s", str, nev);
						szam++;
					}
				}
			} else {
				format(str, sizeof(str), "Nincs");
			}

			if(!strlen(str)) format(str, sizeof(str), "Nincs");
			format(str, sizeof(str), "%s aka: %s", JatekosNev(pid), str);
			SendClientMessage(id, COLOR_MKEK, str);
		}
	}
	return true;
}

fpublic AdatBetoltes( playerid )
{
	if(PlayerInfo[playerid][pTiltvaVan])
		return false;

	new nums, fields, str[128];
	cache_get_data(nums, fields);
	if(nums)
	{
		new toltenyek[64], fegyverek[64];
		mysql_get_string(0, "nev", PlayerInfo[playerid][pNev]);
	    mysql_get_int(0, "id", PlayerInfo[playerid][pID]);

		mysql_get_int(0, "penz", PlayerInfo[playerid][ppenz]);
	    mysql_get_int(0, "skin", PlayerInfo[playerid][pskin]);
	    mysql_get_int(0, "szint", PlayerInfo[playerid][pjatekosszint]);
        mysql_get_int(0, "interior", PlayerInfo[playerid][pinterior]);
        mysql_get_int(0, "pMapper", PlayerInfo[playerid][pMapper]);
        mysql_get_int(0, "vw", PlayerInfo[playerid][pvirtualworld]);
        mysql_get_int(0, "jail", PlayerInfo[playerid][pjail]);
		mysql_get_int(0, "pJailIdo", PlayerInfo[playerid][pJailIdo]);
		
		str[0] = EOS;
		mysql_get_string(0, "pAnimban", str);
		sscanf(str, "p<,>a<d>[8]", PlayerInfo[playerid][pAnimban]);
		
        mysql_get_int(0, "admin", PlayerInfo[playerid][padmin]);
        mysql_get_string(0, "pDNS", PlayerInfo[playerid][pDNS]);
        
		mysql_get_int(0, "pAS", PlayerInfo[playerid][pAS]);
		mysql_get_string(0, "pDefense", PlayerInfo[playerid][pDefense]);
        mysql_get_int(0, "bankszamla", PlayerInfo[playerid][pBsz]);
		mysql_get_int(0, "bankszamlaegyenleg", PlayerInfo[playerid][pBszPenz]);
        mysql_get_int(0, "bankszamlapin", PlayerInfo[playerid][pBszPin]);
        mysql_get_float(0, "posx", PlayerInfo[playerid][posx]);
        mysql_get_float(0, "posy", PlayerInfo[playerid][posy]);
        mysql_get_float(0, "posz", PlayerInfo[playerid][posz]);
        mysql_get_float(0, "angle", PlayerInfo[playerid][pangle]);
		mysql_get_float(0, "pPancel", PlayerInfo[playerid][pPancel]);
        mysql_get_int(0, "regisztracio", PlayerInfo[playerid][pregisztracio]);
		mysql_get_int(0, "pfrakcio", PlayerInfo[playerid][pFrakcio]);
		mysql_get_int(0, "prang", PlayerInfo[playerid][prang]);
		mysql_get_int(0, "pszintlepesperc", PlayerInfo[playerid][pszintlepesperc]);
		mysql_get_int(0, "pszintlepesora", PlayerInfo[playerid][pszintlepesora]);
		mysql_get_int(0, "pszintlepeshez", PlayerInfo[playerid][pszintlepeskell]);
		mysql_get_int(0, "phitman", PlayerInfo[playerid][pHitman]);
		mysql_get_int(0, "pLeader", PlayerInfo[playerid][pLeader]);
		mysql_get_string(0, "pAdminNev", PlayerInfo[playerid][pAdminNev]);
		mysql_get_string(0, "pHitmanNev", PlayerInfo[playerid][pHitmanNev]);
		mysql_get_int(0, "pSWAT", PlayerInfo[playerid][pSWAT]);
		mysql_get_int(0, "pSWATRang", PlayerInfo[playerid][pSWATRang]);
		mysql_get_int(0, "pJarmuKolcson", PlayerInfo[playerid][pJarmuKolcson]);
		mysql_get_int(0, "pBox", PlayerInfo[playerid][pBox]);
		mysql_get_int(0, "pElbow", PlayerInfo[playerid][pElbow]);
		mysql_get_int(0, "pKungfu", PlayerInfo[playerid][pKungfu]);
		mysql_get_int(0, "pKneehead", PlayerInfo[playerid][pKneehead]);
		mysql_get_int(0, "pGrabkick", PlayerInfo[playerid][pGrabkick]);
		mysql_get_int(0, "pSM", PlayerInfo[playerid][pSM]);
		mysql_get_int(0, "pSMrang", PlayerInfo[playerid][pSMrang]);
		mysql_get_int(0, "pKannaBenzin", PlayerInfo[playerid][pKannaBenzin]);
		mysql_get_int(0, "pSKV", PlayerInfo[playerid][pSKV]);
		mysql_get_int(0, "pSKVrang", PlayerInfo[playerid][pSKVrang]);

        Anim(playerid, PlayerInfo[playerid][pAnimban][0]);
        
		if(PlayerInfo[playerid][pszintlepeskell] <= 0)
			PlayerInfo[playerid][pszintlepeskell] = PlayerInfo[playerid][pjatekosszint] * 4;

		mysql_get_int(0, "pnem", PlayerInfo[playerid][pnem]);
		mysql_get_int(0, "peletkor", PlayerInfo[playerid][peletkor]);
		mysql_get_int(0, "pszarmazas", PlayerInfo[playerid][pszarmazas]);
		//paktivalva
		mysql_get_int(0, "phaz", PlayerInfo[playerid][phaz]);

		fegyverek[0] = EOS;
		mysql_get_string(0, "pFegyverek", fegyverek);
		sscanf(fegyverek, "p<,>a<d>[13]", PlayerInfo[playerid][pFegyverek]);

		fegyverek[0] = EOS;
		mysql_get_string(0, "pToltenyek", toltenyek);
		sscanf(toltenyek, "p<,>a<d>[13]", PlayerInfo[playerid][pToltenyek]);

		//Mikor - int
		//IP - str
		str[0] = EOS;
		mysql_get_string(0, "pKorozes", str);
		sscanf(str, "p<|>is[24]s[24]s[64]", Korozes[playerid][krSzint], Korozes[playerid][krNev], Korozes[playerid][krKiadta], Korozes[playerid][krOka]);

		mysql_get_int(0, "pPremiumPont", PlayerInfo[playerid][pPremiumPont]);
		mysql_get_int(0, "pPremiumIdo", PlayerInfo[playerid][pPremiumIdo]);
		mysql_get_int(0, "pPremiumCsomag", PlayerInfo[playerid][pPremiumCsomag]);
		mysql_get_int(0, "pVas", PlayerInfo[playerid][pVas]);
		mysql_get_int(0, "pMaterial", PlayerInfo[playerid][pMaterial]);
		mysql_get_int(0, "pHeroin", PlayerInfo[playerid][pHeroin]);
		mysql_get_int(0, "pKokain", PlayerInfo[playerid][pKokain]);
		mysql_get_int(0, "pMarihuana", PlayerInfo[playerid][pMarihuana]);//sorrendben nem itt van
		mysql_get_int(0, "pFegyverSkill", PlayerInfo[playerid][pFegyverSkill]);
		mysql_get_int(0, "pFizetesIdo", PlayerInfo[playerid][pFizetesIdo]);

		if(PlayerInfo[playerid][pFizetesIdo] <= 0)
			PlayerInfo[playerid][pFizetesIdo] = FIZETES_IDO;

		mysql_get_int(0, "pFizetes", PlayerInfo[playerid][pFizetes]);
		mysql_get_int(0, "pJatszottOra", PlayerInfo[playerid][pJatszottOra]);
		
		mysql_get_int(0, "pTelefonPenz", PlayerInfo[playerid][pTelefonPenz]);
		mysql_get_int(0, "pMunka1", PlayerInfo[playerid][pMunka1]);
		mysql_get_int(0, "pMunka2", PlayerInfo[playerid][pMunka2]);
		mysql_get_int(0, "pExpLegal", PlayerInfo[playerid][pExp][1]);
		mysql_get_int(0, "pExpIllegal", PlayerInfo[playerid][pExp][3]);
		mysql_get_int(0, "pDutySkin", PlayerInfo[playerid][pDutySkin]);

		mysql_get_int(0, "pKereskedo", PlayerInfo[playerid][pKereskedo]);
		mysql_get_int(0, "pHal", PlayerInfo[playerid][pHal]);
		mysql_get_int(0, "pClub", PlayerInfo[playerid][pClub]);
		mysql_get_int(0, "pFrakcioTiltas", PlayerInfo[playerid][pTiltasok][TILTAS_FRAKCIO]);
		mysql_get_int(0, "pReportTiltas", PlayerInfo[playerid][pTiltasok][TILTAS_REPORT]);
		mysql_get_int(0, "pFegyverTiltas", PlayerInfo[playerid][pTiltasok][TILTAS_FEGYVER]);
		mysql_get_int(0, "pAutoTiltas", PlayerInfo[playerid][pTiltasok][TILTAS_AUTO]);
		mysql_get_int(0, "pASTiltas", PlayerInfo[playerid][pTiltasok][TILTAS_AS]);
		mysql_get_int(0, "pTaxiTiltas", PlayerInfo[playerid][pTiltasok][TILTAS_TAXI]);
		mysql_get_int(0, "pLottounix", PlayerInfo[playerid][pLottounix]);

		str[0] = EOS;
		mysql_get_string(0, "pEngedely", str);
		sscanf(str, "p<,>a<d>["#MAX_ENGEDELY"]", PlayerInfo[playerid][pEngedely]);

		mysql_get_int(0, "pHatizsak", PlayerInfo[playerid][pHatizsak]);

		mysql_get_int(0, "pMaszk", PlayerInfo[playerid][pMaszk]);

		str[0] = EOS;
		mysql_get_string(0, "BortonInfo", str);
		sscanf(str, "p<|>s["#MAX_PLAYER_NAME"]s[64]", PlayerInfo[playerid][pJailAdta], PlayerInfo[playerid][pJailOk]);

		str[0] = EOS;
		mysql_get_string(0, "pCuccok", str);//hol?
		sscanf(str, "p<,>a<d>["#MAX_BL_CUCC"]", PlayerInfo[playerid][pCuccok]);//Remélem tényleg ad neki default értéket :D

		mysql_get_int(0, "pSzemelyi", PlayerInfo[playerid][pSzemelyi]);
		mysql_get_int(0, "pValaszok", PlayerInfo[playerid][pValaszok]);
		mysql_get_int(0, "pLakcimkartya", PlayerInfo[playerid][pLakcimkartya]);

		//PlayerInfo[kinek][pDrogAnyag]
		str[0] = EOS;
		mysql_get_string(0, "pDrogAnyag", str);
		sscanf(str, "p<,>a<d>[3]", PlayerInfo[playerid][pDrogAnyag]);

		str[0]= EOS;
		mysql_get_string(0,"Divat_Sapka",str);
		sscanf(str, "p<,>dfffffffffd",
		DivatInfo[SLOT_SAPKA][playerid][dVan],DivatInfo[SLOT_SAPKA][playerid][dPosX],DivatInfo[SLOT_SAPKA][playerid][dPosY],DivatInfo[SLOT_SAPKA][playerid][dPosZ],
		DivatInfo[SLOT_SAPKA][playerid][dRotX],DivatInfo[SLOT_SAPKA][playerid][dRotY],DivatInfo[SLOT_SAPKA][playerid][dRotZ],DivatInfo[SLOT_SAPKA][playerid][dScaleX],
		DivatInfo[SLOT_SAPKA][playerid][dScaleY],DivatInfo[SLOT_SAPKA][playerid][dScaleZ],DivatInfo[SLOT_SAPKA][playerid][dmodelid]);

		str[0]= EOS;
		mysql_get_string(0,"Divat_Szemuveg",str);
		sscanf(str, "p<,>dfffffffffd",
		DivatInfo[SLOT_SZEMUVEG][playerid][dVan],DivatInfo[SLOT_SZEMUVEG][playerid][dPosX],DivatInfo[SLOT_SZEMUVEG][playerid][dPosY],DivatInfo[SLOT_SZEMUVEG][playerid][dPosZ],
		DivatInfo[SLOT_SZEMUVEG][playerid][dRotX],DivatInfo[SLOT_SZEMUVEG][playerid][dRotY],DivatInfo[SLOT_SZEMUVEG][playerid][dRotZ],DivatInfo[SLOT_SZEMUVEG][playerid][dScaleX],
		DivatInfo[SLOT_SZEMUVEG][playerid][dScaleY],DivatInfo[SLOT_SZEMUVEG][playerid][dScaleZ],DivatInfo[SLOT_SZEMUVEG][playerid][dmodelid]);

		str[0]= EOS;
		mysql_get_string(0,"Divat_Maszk",str);
		sscanf(str, "p<,>dfffffffffd",
		DivatInfo[SLOT_MASZK][playerid][dVan],DivatInfo[SLOT_MASZK][playerid][dPosX],DivatInfo[SLOT_MASZK][playerid][dPosY],DivatInfo[SLOT_MASZK][playerid][dPosZ],
		DivatInfo[SLOT_MASZK][playerid][dRotX],DivatInfo[SLOT_MASZK][playerid][dRotY],DivatInfo[SLOT_MASZK][playerid][dRotZ],DivatInfo[SLOT_MASZK][playerid][dScaleX],
		DivatInfo[SLOT_MASZK][playerid][dScaleY],DivatInfo[SLOT_MASZK][playerid][dScaleZ],DivatInfo[SLOT_MASZK][playerid][dmodelid]);

		mysql_get_string(0,"pHazasodvaVele",PlayerInfo[playerid][pHazasodvaVele]);

		str[0] = EOS;
		mysql_get_string(0,"pFegyvertVasarolt",str);
		sscanf(str,"p<,>ddddddddd",PlayerInfo[playerid][pFegyvertVasarolt][0],PlayerInfo[playerid][pFegyvertVasarolt][1],PlayerInfo[playerid][pFegyvertVasarolt][2],PlayerInfo[playerid][pFegyvertVasarolt][3],PlayerInfo[playerid][pFegyvertVasarolt][4],PlayerInfo[playerid][pFegyvertVasarolt][5],PlayerInfo[playerid][pFegyvertVasarolt][6],PlayerInfo[playerid][pFegyvertVasarolt][7],PlayerInfo[playerid][pFegyvertVasarolt][8]);

		str[0] = EOS;
		mysql_get_string(0,"pNPCSzobaAll",str);
		sscanf(str,"p<,>ddddddddd",PlayerInfo[playerid][pNPCSzobaAll][0],PlayerInfo[playerid][pNPCSzobaAll][1],PlayerInfo[playerid][pNPCSzobaAll][2],PlayerInfo[playerid][pNPCSzobaAll][3],PlayerInfo[playerid][pNPCSzobaAll][4],PlayerInfo[playerid][pNPCSzobaAll][5],PlayerInfo[playerid][pNPCSzobaAll][6],PlayerInfo[playerid][pNPCSzobaAll][7],PlayerInfo[playerid][pNPCSzobaAll][8]);

		str[0] = EOS;
		mysql_get_string(0,"pTog",str);
		sscanf(str,"p<,>dddddddddddddddd",
		PlayerInfo[playerid][pTog][0],PlayerInfo[playerid][pTog][1],PlayerInfo[playerid][pTog][2],PlayerInfo[playerid][pTog][3],PlayerInfo[playerid][pTog][4],PlayerInfo[playerid][pTog][5],PlayerInfo[playerid][pTog][6],PlayerInfo[playerid][pTog][7],PlayerInfo[playerid][pTog][8],PlayerInfo[playerid][pTog][9],PlayerInfo[playerid][pTog][10],PlayerInfo[playerid][pTog][11],PlayerInfo[playerid][pTog][12],PlayerInfo[playerid][pTog][13],PlayerInfo[playerid][pTog][14],PlayerInfo[playerid][pTog][15]);

		str[0]= EOS;
		mysql_get_string(0,"Verdij",str);
		sscanf(str, "p<|>is[64]",PlayerInfo[playerid][pVerdij], PlayerInfo[playerid][pVerdijOk]);

		mysql_get_int(0, "pLophat", PlayerInfo[playerid][pLophat]);
		mysql_get_int(0, "pTolvajKulcs", PlayerInfo[playerid][pTolvajKulcs]);
		mysql_get_int(0, "pTolvajSkill", PlayerInfo[playerid][pTolvajSkill]);
		mysql_get_int(0, "pRabolhat", PlayerInfo[playerid][pRabolhat]);
		mysql_get_int(0, "pZarolva", PlayerInfo[playerid][pZarolva]);
		mysql_get_int(0, "pGaumaszk", PlayerInfo[playerid][pGazmaszk]);
		mysql_get_int(0, "pTartozas", PlayerInfo[playerid][pTartozas]);
		mysql_get_float(0, "pEhseg", PlayerInfo[playerid][pEhseg]);
        mysql_get_float(0, "pVizelet", PlayerInfo[playerid][pVizelet]);
        mysql_get_int(0, "pBuntetoPontok", PlayerInfo[playerid][pBuntetoPontok]);
        mysql_get_string(0,"pUjjlenyomat",PlayerInfo[playerid][pUjjlenyomat]);
        mysql_get_string(0,"pCharLeiras",PlayerInfo[playerid][pCharLeiras]);
        
		if(PlayerInfo[playerid][pVas] > P_MAX_VAS)
			PlayerInfo[playerid][pVas] = P_MAX_VAS;

		if(ServerInfo[sWhiteList] && !PlayerInfo[playerid][padmin])
		{
			SCM(playerid, COL_LRED, "A szerver jelenleg karbantartás módban fut! Kérlek látogass vissza késõbb!");
			Kick(playerid);
			return true;
		}

		PlayerInfo[playerid][pSpawnVedelem] = 5;
		if(!PlayerInfo[playerid][pbelepve])
		{
			new bool:van;

			do
			{
				van = false;
				PlayerInfo[playerid][pBID] = Rand(1000, 9999);
				foreach(Player, i)
				{
					if(!Belepve(i) || IsPlayerNPC(i) || i == playerid)
						continue;

					if(PlayerInfo[i][pBID] == PlayerInfo[playerid][pBID])
					{
						van = true;
						break;
					}
				}
			}while(van);

			SetReport(playerid);
			Kapcsolodasok(playerid, 2);
			PlayerInfo[playerid][pbelepve] = true;
            if(Admin(playerid, 1)) Iter_Add(Adminok, playerid);
			if(IsAS(playerid)) Iter_Add(ASek, playerid);
		    
			if(PlayerInfo[playerid][pPancel] > 0.0)
				SetArmor(playerid, PlayerInfo[playerid][pPancel], false);

			Adat_Update( playerid, ADAT_MINDEN );

			format(PlayerInfo[playerid][pIP], 16, "%s", JatekosIP(playerid));
			printf("Szerver: %s belepett - uID: %d | BID: %d", PlayerInfo[playerid][pNev], PlayerInfo[playerid][pID], PlayerInfo[playerid][pBID]);

			if(ServerInfo[sPort] != 7777) SendClientMessage(playerid, COLOR_MKEK, "Figyelem! A szerver jelenleg Tesztüzem módban fut!");

			if(PlayerInfo[playerid][pjatekosszint] == 1)
			{
				SCM(playerid,COL_CITROM,"Ha jobban megismernéd a szervert, használd a /körbevezetés parancsot.");
			}
			DefenseCheck(playerid);
			doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pUtoljara = '%d', pOnline = '1' WHERE id = '%d'", gettime(), PlayerInfo[playerid][pID]);


			PlayerInfo[playerid][pNevek] = true;
			MutatNevek(playerid, true);
			
			LiveBy[playerid] = -1;
			LiveRequest[playerid] = 0;
			Live[playerid] = 0;
   			Trezor[playerid] = 0;
   			TrezorAD[playerid] = 0;

			if(Bortonben(playerid) != 0)
				cmd_buntetesem(playerid, "");

			EhsegBar[playerid] = CreatePlayerProgressBar(playerid, 548.0, 27.0, 55.5, 3.2, 0xFF0000FF, 100.0);
			VizeletBar[playerid] = CreatePlayerProgressBar(playerid, 548.0, 37.0, 55.5, 3.2, 0xFFFF00FF, 100.0);
			BanyaBar[playerid] = CreatePlayerProgressBar(playerid, 300.0, 400.0, 75.0, 7.0, 0xcfcaf1FF, 100.0, BAR_DIRECTION_RIGHT);

		}
		if(TilosOlni == 1)
		{
			TextDrawShowForPlayer(playerid, g_TextDraw[td_Zero]);
			SCM(playerid, COL_LRED, "Zero tolerancia bekapcsolva!");
			SCM(playerid, COL_LRED, "Amíg ez érvényben van, tilos ölni, aki megszegi automata 1 óra jail!");
		}
		if(Admin(playerid,1))
		{
		   	PlayerInfo[playerid][pDefensed][1] = 0;
			ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_FEHER"\nAdd meg az Admin Jelszavad!", "Rendben", "Mégse");
		}
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Belepes')", JatekosNev(playerid), PosExt(date), time[0], time[1]);
		TogglePlayerSpectating(playerid, false);
		SpawnPlayer( playerid );
		Hatarozas[playerid] = UnixTime;
	//	doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pOnline = '0'", "", "");
  		doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET IP='%s' WHERE nev='%s' ",JatekosIP(playerid),JatekosNev(playerid));
  		

  		if(Admin(playerid,1))
  		{
			if(strlen(PlayerInfo[playerid][pDNS]) > 0)
		  	{
			  	dns(PlayerInfo[playerid][pDNS], playerid);
			  	printf("[ADMINSECURITY]: %s - IP:%s (DNS)hitelesítés...",JatekosNev(playerid), JatekosIP(playerid));
  		    	
   			}
			else
			{
			    nformat(queryc, 256, "SELECT * FROM `"#MYSQL_IPS_TABLA"` WHERE ip = '%s'", JatekosIP(playerid));
				mysql_tquery(sql_ID, queryc, "AdminIPBetoltes", "d", playerid);
				printf("[ADMINSECURITY]: %s - IP:%s (IP)hitelesítés...",JatekosNev(playerid), JatekosIP(playerid));
			}
		}

		return true;
	}
	else
	{

		if(PlayerInfo[playerid][probalkozasok] == MAX_PROBALKOZASOK)
		{
			Kapcsolodasok(playerid, 3, "Hibás jelszó!");
			Kick(playerid);
		}

		PlayerInfo[playerid][probalkozasok]++;
		format(uzenet, sizeof(uzenet), #COL_LRED"Hibás jelszó!\n"#COL_FEHER"Hátralévõ próbálkozások száma: %d/%d\nKérlek írd be a lentebbi mezõbe a jelszót!", PlayerInfo[playerid][probalkozasok], MAX_PROBALKOZASOK);
		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Bejelentkezés", uzenet, "Belépés", "Mégse");
		SCM(playerid, COL_LRED, "Érvénytelen jelszó!");
	    return true;
	}
}

stock FeliratMutat( playerid, bool:muvelet )
{
	if(!Belepve(playerid))
		return true;

	foreach(Player, p)
	{
		if(p == playerid || !Belepve(p) || !IsValidDynamic3DTextLabel( PlayerInfo[p][pFelirat] ) || (PlayerInfo[p][pAduty] && muvelet))
			continue;

		if(muvelet)
			Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, PlayerInfo[p][pFelirat], E_STREAMER_PLAYER_ID, playerid);
		else
			Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, PlayerInfo[p][pFelirat], E_STREAMER_PLAYER_ID, playerid);
	}

	return true;
}

stock Felirat( playerid, bool:felrak )
{
	if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pFelirat] ))
		DestroyDynamic3DTextLabel( PlayerInfo[playerid][pFelirat] );

	if(Belepve(playerid) && felrak)
	{
		nformat(str, 8, "[%d]", PlayerInfo[playerid][pBID]);
		PlayerInfo[playerid][pFelirat] = CreateDynamic3DTextLabel(str, COLOR_YELLOW, 0.0, 0.0, 0.1, 250.0, playerid, INVALID_VEHICLE_ID, 1, NINCS, NINCS, playerid, 300.0);

		foreach(Player, p)
		{
			if(!Belepve(p) || !PlayerInfo[p][pBejelento] || p == playerid) continue;
			Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, PlayerInfo[playerid][pFelirat], E_STREAMER_PLAYER_ID, p);
		}

	} else {

		foreach(Player, p)
		{
			if(!Belepve(p) || p == playerid || !IsValidDynamic3DTextLabel( PlayerInfo[p][pFelirat] )) continue;
			Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, PlayerInfo[p][pFelirat], E_STREAMER_PLAYER_ID, playerid);
		}
	}

	return true;
}

stock SetReport(playerid, channel = -2)
{
	if(channel == -2)
	{
		if(IsAS(playerid)) PlayerInfo[playerid][pReport][1] = 0;
		else if(PlayerInfo[playerid][padmin] > 0 && PlayerInfo[playerid][padmin] < 7) PlayerInfo[playerid][pReport][1] = 1;
		else if(PlayerInfo[playerid][padmin] == FOADMIN_SZINT || PlayerInfo[playerid][padmin] == SZUPER_SZINT || PlayerInfo[playerid][padmin] == FEJLESZTO_SZINT || PlayerInfo[playerid][padmin] == AC_SZINT) PlayerInfo[playerid][pReport][1] = 2;
		else if(PlayerInfo[playerid][padmin] >= TULAJ_SZINT) PlayerInfo[playerid][pReport][1] = 3;
		else PlayerInfo[playerid][pReport][1] = NINCS;

	} else {

		PlayerInfo[playerid][pReport][1] = channel;
	}
	return true;
}

stock BankLezerBetoltes( bool:szef = false, bool:ajto = false)
{
	if(ajto)
	{
		if(IsValidDynamicObject(BankInfo[bAjto][0])) DestroyDynamicObject(BankInfo[bAjto][0]);
		if(IsValidDynamicObject(BankInfo[bAjto][1])) DestroyDynamicObject(BankInfo[bAjto][1]);
		BankInfo[bAjto][0] = CreateDynamicObject(2634, 2316.69751, -6.80970, 23.31470,   0.00000, 0.00000, 90.00000);
		BankInfo[bAjto][1] = CreateDynamicObject(19302, 2319.90625, -6.74310, 23.07072,   0.00000, 0.00000, 90.00000);
	}

	if(szef)
	{
		dforeach(BankSZLezer, lezer)
			if(IsValidDynamicObject(lezer))
				DestroyDynamicObject(lezer);

		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.369628,-10.174092,23.741739,0.000000,0.000000,94.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.369628,-10.174092,23.211738,0.000000,0.000000,94.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.369628,-10.174092,22.671735,0.000000,0.000000,94.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.369628,-10.174092,24.231731,-0.600000,21.600000,94.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.431152,-10.597762,21.604623,2.499999,-22.899997,87.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.429199,-10.641340,21.561004,2.499999,-22.899997,87.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.209472,-10.659071,22.354316,-3.400001,-7.000004,87.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.165039,-10.611978,23.134262,-3.400001,-7.000004,87.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.118896,-10.697793,23.847635,-3.400001,-0.700004,87.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2323.043945,-10.778247,23.902299,-3.400001,8.099994,87.900001));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.479492,-10.599168,24.058338,-3.400001,14.899995,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.740966,-10.568235,24.014448,-3.400001,14.899995,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2323.097412,-10.625087,24.095108,-3.400001,-3.000004,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2323.097412,-10.625087,24.095108,-3.400001,-3.000004,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.139892,-10.584959,24.038173,-3.400001,-3.000004,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2320.932861,-10.534378,23.966407,-3.400001,-3.000004,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.520996,-10.559041,24.001392,-3.400001,5.399995,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2320.449707,-10.714961,21.982276,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2320.980224,-10.709411,21.984127,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.520751,-10.703755,21.986015,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.621826,-10.692237,21.989858,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2323.512695,-10.682915,21.992973,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2324.763183,-10.669835,22.247341,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2325.493652,-10.662189,22.249889,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2325.051513,-10.666818,22.778352,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2323.051757,-10.687761,22.771373,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2324.879394,-10.668620,23.337755,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2325.359375,-10.663593,23.339433,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2324.697265,-10.670521,23.827125,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2324.697265,-10.670521,23.827125,-0.200001,-0.000003,90.599998));
	}
	return true;
}
stock BankBotBetoltes()
{
	//Lézer bankhoz - Hanci - 2013.07.20

	print("Szerver: Botok betöltése!");
	new /*i = -1, */botname[MAX_PLAYER_NAME];
	format(botname, sizeof(botname), "[NPC]bankbot_%d", 0);
	ConnectNPCEx(botname);
	print("Szerver: BoltBotok betöltése megtörtént!");
	return true;
}

stock BoltBotBetoltes()
{
	print("Szerver: Botok betoltese folyamatban!");
	new i = -1, botname[MAX_PLAYER_NAME];

	for(;++i < sizeof(BoltBot);)
	{
		BoltRablas[i][npcKicsoda] = -1;
		format(botname, sizeof(botname), "[NPC]boltbot_%d", i);

		BoltRablas[i][npcID] = ConnectNPCEx(botname);
		BoltRablas[i][npcArea] = CreateDynamicCircle(BoltBot[i][bBotPosX], BoltBot[i][bBotPosY], 10.0);
		SetPlayerPos(BoltRablas[i][npcID], BoltBot[i][bBotPosX], BoltBot[i][bBotPosY], BoltBot[i][bBotPosZ]);
	}
	print("Szerver: BoltBotok betöltése megtörtént!");

	return true;
}


#if NPC_KELL == 1

stock BotBetoltes()
{
	//BallasSkins
	//GyarPoziciok
	new k = -1, e = -1;

	for(;++k < 100;)
		for(;++e < sizeof(BotInformacio[]);)
			BotInformacio[k][botEnum:e] = 0;

	print("Szerver: Botok betöltése!");
	new i = -1, num = 0, botskin = (sizeof(BallasSkins) - 1), botname[MAX_PLAYER_NAME];
	for(;++i < 1;)
	{
		format(botname, sizeof(botname), "bankbot_%d", num);
		BotInformacio[num][botID] = FCNPC_Create(botname);

		new rand = random(sizeof(GyarPoziciok));
		FCNPC_Spawn(BotInformacio[num][botID], BallasSkins[botskin], GyarPoziciok[rand][kozPosX], GyarPoziciok[rand][kozPosY], GyarPoziciok[rand][kozPosZ]);
		FCNPC_SetWeapon(BotInformacio[num][botID], 32);
		FCNPC_SetAmmo(BotInformacio[num][botID], 2000);
		FCNPC_SetWeaponSkillLevel(BotInformacio[num][botID], WEAPONSKILL_MICRO_UZI, 100);

		new hova = (rand - (random(2) ? 1 : -1));

		if(hova < 0)
			hova = (sizeof(GyarPoziciok) - 1);
		else if(hova > (sizeof(GyarPoziciok) - 1))
			hova = 0;

		FCNPC_GoTo(BotInformacio[num][botID], GyarPoziciok[rand][kozPosX], GyarPoziciok[rand][kozPosY], GyarPoziciok[rand][kozPosZ], MOVE_TYPE_WALK, 1);

		BotInformacio[num][botMost] = rand;
		BotInformacio[num][botKovetkezo] = hova;

		botskin--;
		num++;
	}
	print("Szerver: Botok betöltése megtörtént!");
	return true;
}

public FCNPC_OnReachDestination(npcid)
{
	new i = -1;
	for(;++i < 100;)
	{
		if(npcid == BotInformacio[i][botID])
		{
			BotInformacio[i][botKElozo] =	BotInformacio[i][botElozo];
			BotInformacio[i][botElozo] 	= 	BotInformacio[i][botMost];
			BotInformacio[i][botMost]	= 	BotInformacio[i][botKovetkezo];

			//{0, {1045.0146, -1312.5759, 13.5469}, {1, 7, 3}} most: 2 | elõzõ: 1
			/*new HovaMehet[5];
			new l = -1;
			for(;++l < sizeof(HovaMehet);)
			{
				HovaMehet[l] = GyarPoziciok[BotInformacio[i][botMost]][kozMerre][l];
			}*/
			//HovaMehet = GyarPoziciok[BotInformacio[i][botMost]][kozMerre];

			/*new x = -1;
			for(;++x < sizeof(HovaMehet);)
			{
				if((HovaMehet[x] - 1) == BotInformacio[i][botElozo])
				{
					HovaMehet[x] = 0;
					break;
				}
			}*/
			//GetPointAngleToPoint
			/*
			{0, 1045.5754, -1228.9409, 16.9199, {2, 4, 15, 0, 0}}, // NPC1
			{0, 1045.0146, -1312.5759, 13.5469, {1, 7, 3, 0, 0}}, // NPC2
			{0, 950.0192, -1312.7231, 13.5469, {2, 4, 5, 7, 0}}, // NPC3
			{0, 950.5178, -1228.4989, 16.9065, {1, 3, 5, 15, 0}}, // NPC4
			{0, 950.0499, -1273.4552, 15.3544, {3, 4, 6, 0, 0}}, // NPC5 (köz 0-3)
			{0, 973.6544, -1273.6064, 15.1174, {5, 7, 8, 0, 0}}, // NPC6 (5-bõl indulva)
			{0, 974.0480, -1312.5380, 13.4533, {2, 3, 6, 0, 0}}, // NPC7 (6-bõl indulva, köz 3-4)
			{0, 997.5511, -1269.6351, 15.1797, {6, 9, 0, 0, 0}}, // NPC8 (6-bõl indulva)
			{0, 997.7208, -1259.3693, 15.0313, {8, 10, 0, 0, 0}}, // NPC9 (8-bõl indulva)
			{0, 997.6831, -1251.6245, 19.3968, {9, 11, 0, 0, 0}}, // NPC10 (9-bõl indulva)
			{0, 997.7750, -1246.7592, 19.4086, {10, 12, 0, 0, 0}}, // NPC11 (10-bõl indulva)
			{0, 992.0689, -1246.8112, 19.4118, {11, 13, 0, 0, 0}}, // NPC12 (11-bõl indulva)
			{0, 992.0351, -1238.8540, 19.3941, {12, 14, 0, 0, 0}}, // NPC13 (12-bõl indulva)
			{0, 991.9806, -1234.0807, 16.9475, {13, 15, 0, 0, 0}}, // NPC14 (13-bõl indulva)
			{0, 991.9255, -1228.6942, 16.9050, {1, 4, 14, 0, 0}} // NPC15 (14-bõl indulva, köz 0-1)
			*/
			printf("Elõzõ: %d | Most: %d", BotInformacio[i][botElozo], BotInformacio[i][botMost]);
			new x = -1, kovetkezo[10], num = 0;
			for(;++x < sizeof(GyarPoziciok);)
			{
				//printf("Num(1): %d", num);
				new szog = floatround(GetPointAngleToPoint(GyarPoziciok[BotInformacio[i][botMost]][kozPosX], GyarPoziciok[BotInformacio[i][botMost]][kozPosY], GyarPoziciok[x][kozPosX], GyarPoziciok[x][kozPosY]));

				//printf("Index: %d", x);
				if((BotInformacio[i][botElozo] == x) || (BotInformacio[i][botMost] == x))
					continue;

				//printf("Index(2): %d", x);
				if((!(szog % 90)) || (!((szog + 1) % 90)) || (!((szog - 1) % 90)))
				{
					printf("Szögecske: %d | %d", szog, x);
					//printf("Melyik: %d | %d | %d", x, szog, floatround(GetPointAngleToPoint(GyarPoziciok[BotInformacio[i][botMost]][kozPosX], GyarPoziciok[BotInformacio[i][botMost]][kozPosY], GyarPoziciok[x][kozPosX], GyarPoziciok[x][kozPosX])));
					//kovetkezo = x;
					kovetkezo[num] = x;
					num++;
				}
				//printf("Num(2): %d", num);
			}

			new randomo = random(num);

			if(randomo > 9)
				randomo = 0;
			printf("Randomo: %d", randomo);
			/*while(kovetkezo[randomo] == 0)
				randomo = random(sizeof(kovetkezo));*/

			//printf("Randomo: %d", randomo);
			//new randomo = random(strlen(kovetkezo));
			printf("Hova: %d", kovetkezo[randomo]);
			FCNPC_GoTo(BotInformacio[i][botID], GyarPoziciok[kovetkezo[randomo]][kozPosX], GyarPoziciok[kovetkezo[randomo]][kozPosY], GyarPoziciok[kovetkezo[randomo]][kozPosZ], MOVE_TYPE_WALK, 1);
			BotInformacio[i][botKovetkezo] = kovetkezo[randomo];
			break;
		}
	}
	return true;
}

#endif

fpublic CheckPlayer(playerid)
{
	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    format(uzenet, UZENET_SIZE, "Üdv újra a szerverünkön, "#COL_LRED"%s!\n"#COL_FEHER"Kérlek írd be a lentebbi mezõbe a jelszót!", JatekosNev(playerid));
	    
		ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Bejelentkezés", uzenet, "Belépés", "Mégse");
	}
	else
 	{
 	    if(ServerInfo[sReg] == true){
			format(uzenet, UZENET_SIZE, #COL_FEHER"Üdv a DayRPG-n, "#COL_LRED"%s!\n"#COL_FEHER"Úgy látom, te még nem regisztráltál!\nA regisztrációhoz írj be a mezõbe egy tetszõleges jelszót:", JatekosNev(playerid));
			ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Regisztráció", uzenet, "Regisztrál", "Mégse");
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "* Ez a karakter még nincs regisztrálva! Kérlek regisztrálj a http://"#WEBOLDAL"/ucp oldalon");
			Kick(playerid);
		}
	}
	return true;
}

fpublic AjtokBetoltese()
{
	print("Szerver: Ajtók betöltése!");

    new nums, fields;
	cache_get_data(nums, fields);
	if(nums)
	{
	    new i = -1, ajtoid, formazas[128], ajtoallapot, ajtojarmu;
		for(;++i < nums;)
		{
			mysql_get_int(i, "id", ajtoid);
			mysql_get_string(i, "anev", AjtoInfo[ajtoid][anev]);
			mysql_get_float(i, "abeposx", AjtoInfo[ajtoid][abepos][0]);
			mysql_get_float(i, "abeposy", AjtoInfo[ajtoid][abepos][1]);
			mysql_get_float(i, "abeposz", AjtoInfo[ajtoid][abepos][2]);
			mysql_get_float(i, "abeangle", AjtoInfo[ajtoid][abepos][3]);
			mysql_get_float(i, "akiposx", AjtoInfo[ajtoid][akipos][0]);
			mysql_get_float(i, "akiposy", AjtoInfo[ajtoid][akipos][1]);
			mysql_get_float(i, "akiposz", AjtoInfo[ajtoid][akipos][2]);
			mysql_get_float(i, "akiangle", AjtoInfo[ajtoid][akipos][3]);
			mysql_get_int(i, "afreeze", AjtoInfo[ajtoid][afreeze]);
			mysql_get_int(i, "anyitva", ajtoallapot);
			AjtoInfo[ajtoid][anyitva] = ajtoallapot ? true : false;
			mysql_get_int(i, "ajarmu", ajtojarmu);
			AjtoInfo[ajtoid][ajarmu] = ajtojarmu ? true : false;
			mysql_get_int(i, "abeinterior", AjtoInfo[ajtoid][abeinterior]);
			mysql_get_int(i, "akiinterior", AjtoInfo[ajtoid][akiinterior]);
			mysql_get_int(i, "abevw", AjtoInfo[ajtoid][abevw]);
			mysql_get_int(i, "akivw", AjtoInfo[ajtoid][akivw]);
			AjtoInfo[ajtoid][ahasznalva] = true;

			format(formazas, sizeof(formazas), #COL_NARANCS"[Bejárat]\n"#COL_SKEK"%s", AjtoInfo[ajtoid][anev]);

			if(AjtoInfo[ajtoid][abepos][0] != 0.0)
			{
				AjtoInfo[ajtoid][abelabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, PosExt(AjtoInfo[ajtoid][abepos])+0.75,20, .worldid = AjtoInfo[ajtoid][abevw], .interiorid = AjtoInfo[ajtoid][abeinterior]);
				AjtoInfo[ajtoid][abepickup] = CreateDynamicPickup(1318, 23, PosExt(AjtoInfo[ajtoid][abepos]), AjtoInfo[ajtoid][abevw], AjtoInfo[ajtoid][abeinterior]);

				if(AjtoInfo[ajtoid][ajarmu])
					AjtoInfo[ajtoid][abepickupk] = CreateDynamicPickup(1007, 14, PosExt(AjtoInfo[ajtoid][abepos]), AjtoInfo[ajtoid][abevw], AjtoInfo[ajtoid][abeinterior]);
			}

			if(AjtoInfo[ajtoid][akipos][0] != 0.0)
			{
				//AjtoInfo[ajtoid][akipos][0], AjtoInfo[ajtoid][akipos][1], AjtoInfo[ajtoid][akipos][2]+0.75
				AjtoInfo[ajtoid][akilabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, PosExt(AjtoInfo[ajtoid][akipos])+0.75,20, .worldid = AjtoInfo[ajtoid][akivw], .interiorid = AjtoInfo[ajtoid][akiinterior]);
				AjtoInfo[ajtoid][akipickup] = CreateDynamicPickup(1318, 23, PosExt(AjtoInfo[ajtoid][akipos]), AjtoInfo[ajtoid][akivw], AjtoInfo[ajtoid][akiinterior]);

				if(AjtoInfo[ajtoid][ajarmu])
					AjtoInfo[ajtoid][akipickupk] = CreateDynamicPickup(1007, 14, PosExt(AjtoInfo[ajtoid][akipos]), AjtoInfo[ajtoid][akivw], AjtoInfo[ajtoid][akiinterior]);
			}
		}
	}
	printf("Szerver: %d ajtó sikeresen betöltve!", nums);
	return true;
}
fpublic TuzBetoltes()
{
	print("Szerver: Tûz pozíciók betöltése!");
	new nums, fields;
	cache_get_data(nums, fields);
	if(nums)
	{
	    new i = NINCS, id, pos[128];
		for(;++i < nums;)
		{
			mysql_get_int(i, "Id", id);
			mysql_get_string(i, "Pos", pos);
			sscanf(pos, "p<,>fff", PosExt(TuzPoz[id][tPoz]));

			if(TuzPoz[id][tPoz][0] != 0.0)
			{
				TuzPoz[id][tMapID] = CreateDynamicMapIcon(PosExt(TuzPoz[id][tPoz]), 36, 0, NINCS, NINCS, NINCS, TUZ_MUTAT_TAV);
				Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_STYLE, 3);
				if(Streamer_IsInArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS))
					Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS);
			}
		}
	}
	else
	    print("Nincs betöltendõ tûz! (numrows==0)");

	printf("Szerver: %d tûz pozíció sikeresen betöltve!", nums);
	return true;
}

fpublic HazBetoltes()
{
	print("Szerver: Házak betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
		new i = -1, hdb, hsz[64], drog[513], zarva;
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "id", hdb);
			mysql_get_string(i, "tulaj", HazInfo[hdb][tulaj]);
			mysql_get_int(i, "TulajID", HazInfo[hdb][hTulajID]);
			mysql_get_float(i, "poziciox", HazInfo[hdb][posx]);
			mysql_get_float(i, "pozicioy", HazInfo[hdb][posy]);
			mysql_get_float(i, "pozicioz", HazInfo[hdb][posz]);
			mysql_get_int(i, "interior", HazInfo[hdb][hInterior]);
			mysql_get_int(i, "ar", HazInfo[hdb][hazar]);
			if(HazInfo[hdb][hazar] < MIN_HAZ_AR)
			{
			   HazInfo[hdb][hazar] = MIN_HAZ_AR;
			}
			mysql_get_int(i, "butorok", HazInfo[hdb][butorsz]);

			mysql_get_string(i, "hazSzef", hsz);
			sscanf(hsz, "p<,>a<d>[5]", HazInfo[hdb][hazSzef]);

			mysql_get_string(i, "drogMi", drog);
			sscanf(drog, "p<,>a<d>[50]", HazInfo[hdb][hDrogMi]);

			mysql_get_string(i, "drogAll", drog);
			sscanf(drog, "p<,>a<d>[50]", HazInfo[hdb][hDrogAllapot]);

			mysql_get_int(i, "hZarva", zarva);
			HazInfo[hdb][hZarva] = (zarva ? true : false);

			mysql_get_string(i, "hFegyver", drog);
			sscanf(drog, "p<,>a<d>[15]", HazInfo[hdb][hFegyver]);

			mysql_get_string(i, "hTolteny", drog);
			sscanf(drog, "p<,>a<d>[15]", HazInfo[hdb][hTolteny]);

			mysql_get_int(i, "hTipus", HazInfo[hdb][hTipus]);
			mysql_get_int(i, "hPince", HazInfo[hdb][hPince]);

			mysql_get_int(i, "hGarazs", HazInfo[hdb][hGarazs]);

			HazInfo[hdb][hasznalatban] = true;

			if(HazInfo[hdb][hTulajID] == NINCS)
				format(uzenet, sizeof(uzenet), "Házszám: ~g~%d.~n~~w~Ár: ~g~%s$.~n~~w~Tulaj: ~g~Senki.", hdb, FN(HazInfo[hdb][hazar], 0, '.'));
			else
				format(uzenet, sizeof(uzenet), "Házszám: ~g~%d.~n~~w~Tulaj: ~g~%s.", hdb, HazInfo[hdb][tulaj]);

			HazInfo[hdb][hasznalatban] = true;
			SpawnHouse(hdb, uzenet, (HazInfo[hdb][hTulajID] == NINCS ? HAZ_MEGVEHETO_MODEL : HAZ_MEGVETT_MODEL));
			BelsoPickup(hdb, HazInfo[hdb][hInterior]);

			//PDrogHelyek
			UjUltetveny( hdb );

	    }
	}
  	printf("Szerver: %d ház sikeresen betöltve!", nums);
 	return true;
}

stock UjUltetveny( hdb )
{
	new p = -1, which = 1, form[64];
	for(;++p < sizeof(PDrogHelyek);)
	{
		new Float:DPos[3], Float:fordit = (PDrogHelyek[p][pFordit] ? -0.7 : 0.7);

		if(PDrogHelyek[p][pEnged][1])
		{
			DPos[0] = PDrogHelyek[p][pDrogX];
			DPos[1] = PDrogHelyek[p][pDrogY];
			DPos[2] = PDrogHelyek[p][pDrogA];

			GetXYInFrontOfPoint(PosExt(DPos) + 90.0, fordit);
			PDrogHely[which + DROG_KOZEP][0] = DPos[0];
			PDrogHely[which + DROG_KOZEP][1] = DPos[1];
			PDrogHely[which + DROG_KOZEP][2] = PDrogHelyek[p][pDrogZ];
			PDrogHely[which + DROG_KOZEP][3] = DPos[2];

			if((HazInfo[hdb][hDrogMi][which + DROG_KOZEP] > 0))
			{
				switch(HazInfo[hdb][hDrogMi][which + DROG_KOZEP])
				{
					case 1: format(form, sizeof(form), "Marihuana");
					case 2: format(form, sizeof(form), "Kokain");
					case 3: format(form, sizeof(form), "Heroin");
				}

				format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%", form, HazInfo[hdb][hDrogAllapot][which + DROG_KOZEP]);
			} else
				format(form, sizeof(form), "[Drog hely]\nSzabad");

			HazInfo[hdb][hDrogHely][which + DROG_KOZEP] = CreateDynamic3DTextLabel(form, 0xFFFFFFFF, PDrogHelyek[p][pDrogX], PDrogHelyek[p][pDrogY], PDrogHelyek[p][pDrogZ] + 0.4, 20.0, .worldid = hdb, .interiorid = 123);
			/*format(form, sizeof(form), "Valami %d | %d", (which + DROG_KOZEP), p);
			CreateDynamic3DTextLabel(form, -1, PosExt(PDrogHely[which + DROG_KOZEP]) + 0.4, 20.0, .worldid = hdb, .interiorid = 123);*/
			//GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance)
		}

		if(PDrogHelyek[p][pEnged][0])
		{
			DPos[0] = PDrogHelyek[p][pDrogX];
			DPos[1] = PDrogHelyek[p][pDrogY];
			DPos[2] = PDrogHelyek[p][pDrogA];

			GetXYInFrontOfPoint(PosExt(DPos), -0.85);
			PDrogHely[which + DROG_BAL][0] = DPos[0];
			PDrogHely[which + DROG_BAL][1] = DPos[1];
			PDrogHely[which + DROG_BAL][2] = PDrogHelyek[p][pDrogZ];
			PDrogHely[which + DROG_BAL][3] = PDrogHelyek[p][pDrogA];
			GetXYInFrontOfPoint(PDrogHely[which + DROG_BAL][0], PDrogHely[which + DROG_BAL][1], PDrogHely[which + DROG_BAL][3] + 90.0, fordit);

			if((HazInfo[hdb][hDrogMi][which + DROG_BAL] > 0))
			{
				switch(HazInfo[hdb][hDrogMi][which + DROG_BAL])
				{
					case 1: format(form, sizeof(form), "Marihuana");
					case 2: format(form, sizeof(form), "Kokain");
					case 3: format(form, sizeof(form), "Heroin");
				}

				format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%", form, HazInfo[hdb][hDrogAllapot][which + DROG_BAL]);
			} else
				format(form, sizeof(form), "[Drog hely]\nSzabad");

			HazInfo[hdb][hDrogHely][which + DROG_BAL] = CreateDynamic3DTextLabel(form, 0xFFFFFFFF, DPos[0], DPos[1], PDrogHelyek[p][pDrogZ] + 0.4, 20.0, .worldid = hdb, .interiorid = 123);
			/*format(form, sizeof(form), "Valami %d | %d", (which + DROG_BAL), p);
			CreateDynamic3DTextLabel(form, -1, PosExt(PDrogHely[which + DROG_BAL]) + 0.4, 20.0, .worldid = hdb, .interiorid = 123);*/
		}

		if(PDrogHelyek[p][pEnged][2])
		{
			DPos[0] = PDrogHelyek[p][pDrogX];
			DPos[1] = PDrogHelyek[p][pDrogY];
			DPos[2] = PDrogHelyek[p][pDrogA];

			GetXYInFrontOfPoint(PosExt(DPos), 0.85);
			PDrogHely[which + DROG_JOBB][0] = DPos[0];
			PDrogHely[which + DROG_JOBB][1] = DPos[1];
			PDrogHely[which + DROG_JOBB][2] = PDrogHelyek[p][pDrogZ];
			PDrogHely[which + DROG_JOBB][3] = PDrogHelyek[p][pDrogA];
			GetXYInFrontOfPoint(PDrogHely[which + DROG_JOBB][0], PDrogHely[which + DROG_JOBB][1], PDrogHely[which + DROG_JOBB][3] + 90.0, fordit);

			if((HazInfo[hdb][hDrogMi][which + DROG_JOBB] > 0))
			{
				switch(HazInfo[hdb][hDrogMi][which + DROG_JOBB])
				{
					case 1: format(form, sizeof(form), "Marihuana");
					case 2: format(form, sizeof(form), "Kokain");
					case 3: format(form, sizeof(form), "Heroin");
				}

				format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%", form, HazInfo[hdb][hDrogAllapot][which + DROG_JOBB]);
			} else
				format(form, sizeof(form), "[Drog hely]\nSzabad");

			HazInfo[hdb][hDrogHely][which + DROG_JOBB] = CreateDynamic3DTextLabel(form, 0xFFFFFFFF, DPos[0], DPos[1], PDrogHelyek[p][pDrogZ] + 0.4, 20.0, .worldid = hdb, .interiorid = 123);
			/*format(form, sizeof(form), "Valami %d | %d", (which + DROG_JOBB), p);
			CreateDynamic3DTextLabel(form, -1, PosExt(PDrogHely[which + DROG_JOBB]) + 0.4, 20.0, .worldid = hdb, .interiorid = 123);*/
		}

		which += 3;
	}

	return true;
}

stock AutomataModel(tipusid)
{
	switch(tipusid)
	{
		case 1: return 2942; //ATM
		case 2: return 1340; //Hotdog
		case 3: return 1227;//Kék kuka
		default: return 2942;
	}
	return true;
}

fpublic ButorBetoltes()
{
    new x = NINCS;
	for( ;++x < MAXBUTORSZAM; )
	{
		ButorInfo[x][butorTipus] = NINCS;
		ButorInfo[x][butorListitem] = NINCS;
	}

	new nums, fields, butordat;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1;
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "id", butordat);
			mysql_get_float(i, "butorPosX", ButorInfo[butordat][butorPosX]);
			mysql_get_float(i, "butorPosY", ButorInfo[butordat][butorPosY]);
			mysql_get_float(i, "butorPosZ", ButorInfo[butordat][butorPosZ]);
			mysql_get_float(i, "butorPosRX", ButorInfo[butordat][butorPosRX]);
			mysql_get_float(i, "butorPosRY", ButorInfo[butordat][butorPosRY]);
			mysql_get_float(i, "butorPosRZ", ButorInfo[butordat][butorPosRZ]);
			mysql_get_int(i, "butorModel", ButorInfo[butordat][butorModel]);
			mysql_get_int(i, "butorVW", ButorInfo[butordat][butorVW]);
			mysql_get_int(i, "butorInterior", ButorInfo[butordat][butorInterior]);
			ButorInfo[butordat][butorHasznalva] = true;
			ButorInfo[butordat][butorMegveve] = true;
			mysql_get_int(i, "butorTipus", ButorInfo[butordat][butorTipus]);
			mysql_get_int(i, "butorListitem", ButorInfo[butordat][butorListitem]);
			ButorInfo[butordat][butorObject] = CreateDynamicObject(ButorInfo[butordat][butorModel], ButorInfo[butordat][butorPosX], ButorInfo[butordat][butorPosY], ButorInfo[butordat][butorPosZ], ButorInfo[butordat][butorPosRX], ButorInfo[butordat][butorPosRY], ButorInfo[butordat][butorPosRZ], ButorInfo[butordat][butorVW], ButorInfo[butordat][butorInterior]);
		}
	}
	printf("Szerver: %d bútor sikeresen betöltve!", nums);
	return 1;
}

fpublic AutomataBetoltes()
{
	print("Szerver: Automatak betoltese!");

	new nums, fields, auid;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1;
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "id", auid);
			mysql_get_int(i, "autipus", AutomataInfo[auid][autipus]);
			mysql_get_int(i, "aupenz", AutomataInfo[auid][aupenz]);
			mysql_get_float(i, "auposx", AutomataInfo[auid][aupos][0]);
			mysql_get_float(i, "auposy", AutomataInfo[auid][aupos][1]);
			mysql_get_float(i, "auposz", AutomataInfo[auid][aupos][2]);
			mysql_get_float(i, "aurotx", AutomataInfo[auid][aupos][3]);
			mysql_get_float(i, "auroty", AutomataInfo[auid][aupos][4]);
			mysql_get_float(i, "aurotz", AutomataInfo[auid][aupos][5]);
			mysql_get_int(i, "vw", AutomataInfo[auid][auVW]);
			mysql_get_int(i, "int", AutomataInfo[auid][auInt]);
			AutomataInfo[auid][auhasznalva] = true;
			//printf("%d | %d | %d | %f | %f | %f | %f | %f | %f | %d | %d", auid, AutomataInfo[auid][autipus], AutomataInfo[auid][aupenz], PosExt(AutomataInfo[auid][aupos]), AutomataInfo[auid][aupos][3], AutomataInfo[auid][aupos][4], AutomataInfo[auid][aupos][5], AutomataInfo[auid][auVW], AutomataInfo[auid][auInt]);

			AutomataInfo[auid][auobject] = CreateDynamicObject(AutomataModel(AutomataInfo[auid][autipus]), PosExt(AutomataInfo[auid][aupos]), AutomataInfo[auid][aupos][3], AutomataInfo[auid][aupos][4], AutomataInfo[auid][aupos][5], AutomataInfo[auid][auVW], AutomataInfo[auid][auInt]);

		//	if(AutomataInfo[auid][autipus] == 2)
			//	AutomataInfo[auid][autext] = CreateDynamic3DTextLabel("(( /menü ))", COLOR_MKEK, PosExt(AutomataInfo[auid][aupos]), 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AutomataInfo[auid][auVW], AutomataInfo[auid][auInt]);

			//db_next_row(AutoE);
		}
	}
	printf("Szerver: %d automata sikeresen betoltve!", nums);
	return true;
}

fpublic FrakcioBetoltes()
{
    print("Szerver: Frakciók betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1, fk, szefobject, szefpos[100], fegytol[256], fizetes[256];
	    for(;++i < nums;)
	    {
            mysql_get_int(i, "ID", fk);
			mysql_get_string(i, "FNev", FInfo[fk][fNev]);
			mysql_get_string(i, "Rang1", FInfo[fk][fRang1]);
			mysql_get_string(i, "Rang2", FInfo[fk][fRang2]);
			mysql_get_string(i, "Rang2", FInfo[fk][fRang2]);
			mysql_get_string(i, "Rang3", FInfo[fk][fRang3]);
			mysql_get_string(i, "Rang4", FInfo[fk][fRang4]);
			mysql_get_string(i, "Rang5", FInfo[fk][fRang5]);
			mysql_get_string(i, "Rang6", FInfo[fk][fRang6]);
			mysql_get_string(i, "Rang7", FInfo[fk][fRang7]);
			mysql_get_string(i, "Rang8", FInfo[fk][fRang8]);
			mysql_get_string(i, "Rang9", FInfo[fk][fRang9]);
			mysql_get_string(i, "Rang10", FInfo[fk][fRang10]);
   			mysql_get_string(i, "Rang11", FInfo[fk][fRang11]);
			mysql_get_string(i, "Rang12", FInfo[fk][fRang12]);
			mysql_get_string(i, "Rang13", FInfo[fk][fRang13]);
			mysql_get_string(i, "Rang14", FInfo[fk][fRang14]);
			mysql_get_string(i, "Rang15", FInfo[fk][fRang15]);
			mysql_get_string(i, "Rang16", FInfo[fk][fRang16]);
			mysql_get_int(i, "SzefRang", FInfo[fk][fSzefRang]);

			//printf("%s | %s | %s | %s | %s | %s | %s | %s | %s | %s | %s", FInfo[fk][fNev], FInfo[fk][fRang1], FInfo[fk][fRang2], FInfo[fk][fRang3], FInfo[fk][fRang4], FInfo[fk][fRang5], FInfo[fk][fRang6], FInfo[fk][fRang7], FInfo[fk][fRang8], FInfo[fk][fRang9], FInfo[fk][fRang10]);

			mysql_get_int(i, "Legalis", FInfo[fk][fLegalis]);
			//FInfo[fk][fLegalis] = legalis ? true : false;

			mysql_get_int(i, "SzefObject", szefobject);
			FInfo[fk][fSzefObject] = szefobject ? true : false;

			mysql_get_string(i, "SzefPos", szefpos);
			sscanf(szefpos, "p<,>a<f>[3]", FInfo[fk][fSzefPos]);

			mysql_get_string(i, "SzefPosR", szefpos);
			sscanf(szefpos, "p<,>a<f>[3]", FInfo[fk][fSzefPosR]);

			mysql_get_int(i, "Penz", FInfo[fk][fPenz]);
			mysql_get_int(i, "Material", FInfo[fk][fMaterial]);
			mysql_get_int(i, "Heroin", FInfo[fk][fHeroin]);
			mysql_get_int(i, "Kokain", FInfo[fk][fKokain]);
			mysql_get_int(i, "Marihuana", FInfo[fk][fMarihuana]);

			mysql_get_string(i, "Fegyverek", fegytol);
			sscanf(fegytol, "p<,>a<d>[50]", FInfo[fk][fFegyverek]);

			mysql_get_string(i, "Toltenyek", fegytol);
			sscanf(fegytol, "p<,>a<d>[50]", FInfo[fk][fToltenyek]);

			mysql_get_int(i, "VW", FInfo[fk][fVW]);
			mysql_get_int(i, "Interior", FInfo[fk][fInterior]);

			mysql_get_string(i, "Fizetesek", fizetes);
			sscanf(fizetes, "p<,>a<d>[16]", FInfo[fk][fFizetes]);

			mysql_get_int(i,"MaxRang",FInfo[fk][fMaxRang]);
            mysql_get_int(i,"Traffipax",FInfo[fk][fTrafi]);
            
			FInfo[fk][fVan] = true;

			if(FInfo[fk][fSzefObject])
				FInfo[fk][fObjectID] = CreateDynamicObject(2332, FInfo[fk][fSzefPos][0], FInfo[fk][fSzefPos][1], FInfo[fk][fSzefPos][2], FInfo[fk][fSzefPosR][0], FInfo[fk][fSzefPosR][1], FInfo[fk][fSzefPosR][2], FInfo[fk][fVW], FInfo[fk][fInterior]);

	    }
	}
	printf("Szerver: %d frakció sikeresen betöltve!", nums);
	return true;
}
fpublic LoadEldobottCuccok()
{
    print("Szerver: Eldobtt Cuccok Betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1,pos[100];
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "Tipus", dInfo[i][dTipus]);
			mysql_get_int(i, "Fegyver", dInfo[i][dFegyver]);
			mysql_get_int(i, "Ertek", dInfo[i][dErtek]);
			mysql_get_string(i, "Pozicio", pos);
			sscanf(pos, "p<,>a<f>[3]", dInfo[i][dPos]);
			mysql_get_int(i, "Int", dInfo[i][dInt]);
			mysql_get_int(i, "VW", dInfo[i][dVirtual]);
			mysql_get_int(i, "TorlesiAzonosito", dInfo[i][dTorlesiAzonosito]);
			dInfo[i][dHasznalva] = true;
			
			if(dInfo[i][dTipus] == ELDOB_LOSZER)
			{
				dInfo[i][dObject] =	CreateDynamicObject(2040, dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 0.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
			else if(dInfo[i][dFegyver] != 0)
			{
				dInfo[i][dObject] =	CreateDynamicObject(aWeaponModel[dInfo[i][dFegyver]], dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
			else if(dInfo[i][dTipus] == ELDOB_MATERIAL)
			{
				dInfo[i][dObject]	=	CreateDynamicObject(2060, dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
			else if(dInfo[i][dTipus] == ELDOB_HEROIN)
			{
				dInfo[i][dObject]	=	CreateDynamicObject(2060, dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
			else if(dInfo[i][dTipus] == ELDOB_KOKAIN)
			{
				dInfo[i][dObject]	=	CreateDynamicObject(1575, dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
			else if(dInfo[i][dTipus] == ELDOB_MARI)
			{
				dInfo[i][dObject]	=	CreateDynamicObject(1576, dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
			else if(dInfo[i][dTipus] == ELDOB_PENZ)
			{
				dInfo[i][dObject]	=	CreateDynamicObject((dInfo[i][dErtek] > 1500000 ? 1550 : 1212), dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
		}
	}
	printf("Szerver: %d eldobott cucc betöltve!", nums);
	return true;
}
fpublic TeruletBetoltes()
{
	print("Szerver: Területek betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1, tid, pos[32];
	    for(;++i < nums;)
	    {
            mysql_get_int(i, "ID", tid);
			mysql_get_string(i, "Nev", tInfo[tid][tNev]);
			mysql_get_string(i, "MinPos", pos);
			sscanf(pos, "p<,>a<f>[2]", tInfo[tid][tMinPos]);
			mysql_get_string(i, "MaxPos", pos);
			sscanf(pos, "p<,>a<f>[2]", tInfo[tid][tMaxPos]);
			mysql_get_int(i, "Frakcio", tInfo[tid][tFrakcio]);
			mysql_get_string(i, "Haszon", pos);
			sscanf(pos, "p<,>a<d>[5]", tInfo[tid][tHaszon]);
			mysql_get_int(i, "HaszonIdo", tInfo[tid][tHaszonIdo]);
			mysql_get_int(i, "VarakozasIdo", tInfo[tid][tVarakozasIdo]);
			tInfo[tid][tVan] = true;

			tInfo[tid][tZone] = GangZoneCreate(tInfo[tid][tMinPos][0], tInfo[tid][tMinPos][1], tInfo[tid][tMaxPos][0], tInfo[tid][tMaxPos][1]);
			tInfo[tid][tArea] = CreateDynamicRectangle(tInfo[tid][tMinPos][0], tInfo[tid][tMinPos][1], tInfo[tid][tMaxPos][0], tInfo[tid][tMaxPos][1]);
	    }
	}
	printf("Szerver: %d terület sikeresen betöltve!", nums);
	return true;
}

fpublic JarmuadatBetoltes()
{
    print("Szerver: Jarmuadatok betoltese!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = NINCS, id;
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "id", id);
			mysql_get_string(i, "nev", JarmuAdat[id][jNev]);
			mysql_get_string(i, "ujnev", JarmuAdat[id][jUjNev]);
			mysql_get_int(i, "ar", JarmuAdat[id][jAr]);
			mysql_get_int(i, "lophato", JarmuAdat[id][jLophato]);
		}
	}

	printf("Szerver: %d jarmuadat sikeresen betoltve!", nums);
	return true;
}

fpublic JarmuBetoltes()
{
    print("Szerver: Jármûvek betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1, bID, vZarva2, fegyver[64];
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "ID", bID);
			mysql_get_string(i, "Tulaj", vInfo[bID][vTulaj]);
			mysql_get_int(i, "TulajID", vInfo[bID][vTulajID]);
			mysql_get_int(i, "Ar", vInfo[bID][vAr]);
			mysql_get_int(i, "Model", vInfo[bID][vModel]);
			mysql_get_int(i, "Munka", vInfo[bID][vMunka]);
			mysql_get_int(i, "Szin1", vInfo[bID][vSzin1]);
			mysql_get_int(i, "Szin2", vInfo[bID][vSzin2]);
			mysql_get_float(i, "VPosx", vInfo[bID][vPosx]);
			mysql_get_float(i, "VPosy", vInfo[bID][vPosy]);
			mysql_get_float(i, "VPosz", vInfo[bID][vPosz]);
			mysql_get_float(i, "VAngle", vInfo[bID][vAngle]);
			mysql_get_float(i, "VElet", vInfo[bID][vElet]);
			mysql_get_int(i, "vInt", vInfo[bID][vInt]);
			mysql_get_int(i, "vVW", vInfo[bID][vVW]);
			
			mysql_get_int(i, "VHiba", vInfo[bID][vHiba]);
			mysql_get_int(i, "VZarva", vZarva2);
			vInfo[bID][vZarva] = vZarva2 ? true : false;
			mysql_get_int(i, "VRang", vInfo[bID][vRang]);
			mysql_get_float(i, "VKilometer", vInfo[bID][vKilometer]);
			mysql_get_float(i, "VUzemanyag", vInfo[bID][vUzemanyag]);
			mysql_get_int(i, "VPanels", vInfo[bID][vPanels]);
			mysql_get_int(i, "VDoors", vInfo[bID][vDoors]);
			mysql_get_int(i, "VLights", vInfo[bID][vLights]);
			mysql_get_int(i, "VTires", vInfo[bID][vTires]);

			//Jármûben lévõ tárgyak
			vInfo[bID][vVas] = 0;
			mysql_get_int(i, "vVas", 		vInfo[bID][vVas]);
			vInfo[bID][vMaterial] = 0;
			mysql_get_int(i, "vMaterial", 	vInfo[bID][vMaterial]);
			vInfo[bID][vHeroin] = 0;
			mysql_get_int(i, "vHeroin", 	vInfo[bID][vHeroin]);
			vInfo[bID][vKokain] = 0;
			mysql_get_int(i, "vKokain", 	vInfo[bID][vKokain]);
			vInfo[bID][vMarihuana] = 0;
			mysql_get_int(i, "vMarihuana", 	vInfo[bID][vMarihuana]);

			//Fegyver betoltés
			mysql_get_string(i, "vFegyver", fegyver);
			sscanf(fegyver, "p<,>a<d>[5]", vInfo[bID][vFegyver]);

			mysql_get_string(i, "vTolteny", fegyver);
			sscanf(fegyver, "p<,>a<d>[5]", vInfo[bID][vTolteny]);

			mysql_get_int(i, "vLastActive", vInfo[bID][vTLastActive]);
			//printf("Jármû: %d - LastActive: %d", bID, vInfo[bID][vTLastActive]);

			vInfo[bID][vRendszam][0] = EOS;
			mysql_get_string(i, "vRendszam", vInfo[bID][vRendszam]);
			mysql_get_int(i, "vNeon", vInfo[bID][vNeon][0]);

			mysql_get_int(i, "vMod0", vInfo[bID][vMod][0]);
			mysql_get_int(i, "vMod1", vInfo[bID][vMod][1]);
			mysql_get_int(i, "vMod2", vInfo[bID][vMod][2]);
			mysql_get_int(i, "vMod3", vInfo[bID][vMod][3]);
			mysql_get_int(i, "vMod4", vInfo[bID][vMod][4]);
			mysql_get_int(i, "vMod5", vInfo[bID][vMod][5]);
			mysql_get_int(i, "vMod6", vInfo[bID][vMod][6]);
			mysql_get_int(i, "vMod7", vInfo[bID][vMod][7]);
			mysql_get_int(i, "vMod8", vInfo[bID][vMod][8]);
			mysql_get_int(i, "vMod9", vInfo[bID][vMod][9]);
			mysql_get_int(i, "vMod10", vInfo[bID][vMod][10]);
			mysql_get_int(i, "vMod11", vInfo[bID][vMod][11]);
			mysql_get_int(i, "vMod12", vInfo[bID][vMod][12]);
			mysql_get_int(i, "vHidraulika", vInfo[bID][vHidraulika]);
			mysql_get_int(i, "vMatrica", vInfo[bID][vMatrica]);
			mysql_get_int(i, "vApben", vInfo[bID][vApben]);
			mysql_get_int(i, "vGarazsban", vInfo[bID][vGarazsban]);
			mysql_get_int(i, "vNOS", vInfo[bID][vNOS]);
			
			vInfo[bID][vBerelt] = false;
			vInfo[bID][vHasznalva] = true;
			vInfo[bID][vInsert] = true;
			vInfo[bID][vRadio] = 0;

			JarmuSpawn(bID, vInfo[bID][vModel], vInfo[bID][vPosx], vInfo[bID][vPosy], vInfo[bID][vPosz], vInfo[bID][vAngle], vInfo[bID][vSzin1], vInfo[bID][vSzin2]);

			if(vInfo[bID][vMunka] == 101)
				vInfo[bID][vOktato] = CreateDynamic3DTextLabel("Tanulókocsi", COLOR_MKEK, vInfo[bID][vPosx], vInfo[bID][vPosy], vInfo[bID][vPosz]+0.75, 20.0, .attachedvehicle = vInfo[bID][vID]);

            if(vInfo[bID][vModel] == 407 || vInfo[bID][vModel] == 544)
				TuzoltoKocsiFelszereles(vInfo[bID][vID]);

			if(vInfo[bID][vMunka] < 20)
			{
				UpdateVehicleDamageStatus(vInfo[bID][vID], vInfo[bID][vPanels], vInfo[bID][vDoors], vInfo[bID][vLights], vInfo[bID][vTires]);
				SetVehicleHealth(vInfo[bID][vID], vInfo[bID][vElet] > 350.0 ? vInfo[bID][vElet] : 450.0);
				vehicleh[ vInfo[bID][vID]] = vInfo[bID][vElet];

			}
			else {

				vehicleh[vInfo[bID][vID]] = 1000.0;
				vInfo[bID][vElet] = 1000.0;
			}
			if(vInfo[bID][vApben] == 1)
			{
				SetVehicleVirtualWorld(vInfo[bID][vID],AP_VW);
			}
			else
   			{
   			    LinkVehicleToInterior(vInfo[bID][vID], vInfo[bID][vInt]);
   			    SetVehicleVirtualWorld(vInfo[bID][vID],vInfo[bID][vVW]);
   			}

		}
	}
	printf("Szerver: %d jármû sikeresen betöltve!", nums);
/*	for(new asd; asd < MAX_VEHICLES; asd++)
	{
		JarmuRespawn(asd);
	}*/
	return true;
}

fpublic CegMuvelet( muvelet )
{
	switch( muvelet )
	{
		case 1: //cégek betöltése
		{
			print("Szerver: Cegek betoltese!");

			new nums, fields;
			cache_get_data(nums, fields);

			if(nums)
			{
				new i = NINCS, cdb, pos[64];
				for(;++i < nums;)
				{
					mysql_get_int(i, "Id", cdb);
					mysql_get_string(i, "ANev", CegInfo[cdb][cANev]);
					mysql_get_string(i, "Nev", CegInfo[cdb][cNev]);
					mysql_get_int(i, "Tipus", CegInfo[cdb][cTipus]);
					mysql_get_string(i, "Tulaj", CegInfo[cdb][cTulaj]);
					mysql_get_int(i, "TulajID", CegInfo[cdb][cTulajID]);
					mysql_get_int(i, "FTulaj", CegInfo[cdb][cFTulaj]);
					mysql_get_int(i, "Belepo", CegInfo[cdb][cBelepo]);
					mysql_get_int(i, "Kassza", CegInfo[cdb][cKassza]);
					mysql_get_int(i, "Ar", CegInfo[cdb][cAr]);

					pos[0] = EOS;
					mysql_get_string(i, "PosBe", pos);
					sscanf(pos, "p<,>ffff", PosExt(CegInfo[cdb][cPosBe]), CegInfo[cdb][cPosBe][3]);

					pos[0] = EOS;
					mysql_get_string(i, "PosKi", pos);
					sscanf(pos, "p<,>ffff", PosExt(CegInfo[cdb][cPosKi]), CegInfo[cdb][cPosKi][3]);

					pos[0] = EOS;
					mysql_get_string(i, "Vw", pos);
					sscanf(pos, "p<,>dd", CegInfo[cdb][cVw][0], CegInfo[cdb][cVw][1]);

					pos[0] = EOS;
					mysql_get_string(i, "Inte", pos);
					sscanf(pos, "p<,>dd", CegInfo[cdb][cInt][0], CegInfo[cdb][cInt][1]);

					CegInfo[cdb][cPickup] = CreateDynamicPickup(1239, 23, PosExt(CegInfo[cdb][cPosBe]), CegInfo[cdb][cVw][0], CegInfo[cdb][cInt][0], NINCS);
					CegInfo[cdb][cVan] = true;
				}
			}

			printf("Szerver: %d ceg sikeresen betoltve!", nums);
		}

		case 2://cégek mentése
		{
			new query[1024], i = NINCS;
			for(;++i < MAX_CEG;)
			{
				if(CegInfo[i][cVan])
				{
					format(query, sizeof(query), "UPDATE `"#MYSQL_CEGEK_TABLA"` SET ");
					//MySQLUpdateSTR(query, "ANev", CegInfo[i][cANev]);
					//MySQLUpdateSTR(query, "Nev", CegInfo[i][cNev]);
					//MySQLUpdateINT(query, "Tipus", CegInfo[i][cTipus]);
					MySQLUpdateSTR(query, "Tulaj", CegInfo[i][cTulaj]);
					MySQLUpdateINT(query, "TulajID", CegInfo[i][cTulajID]);
					MySQLUpdateINT(query, "FTulaj", CegInfo[i][cFTulaj]);

					MySQLUpdateINT(query, "Belepo", CegInfo[i][cBelepo]);
					MySQLUpdateINT(query, "Kassza", CegInfo[i][cKassza]);

					//format(pos, 256, "%f,%f,%f,%f", PosExt(CegInfo[i][cPosBe]), CegInfo[i][cAngBe][3]);
					//MySQLUpdateSTR(query, "PosBe", pos);

					//format(pos, 256, "%f,%f,%f,%f", PosExt(CegInfo[i][cPosKi]), CegInfo[i][cAngKi][3]);
					//MySQLUpdateSTR(query, "PosKi", pos);

					//MySQLUpdateINT(query, "Vw", CegInfo[i][cVw]);
					//MySQLUpdateINT(query, "Inte", CegInfo[i][cInt]);

					MySQLFinalUpdate(query, "Id", i);
				}
			}
		} //cég mentés vége
	}
	return true;
}


fpublic BenzinkutBetoltes()
{
	print("Szerver: Benzinkútak betöltése!");

	new nums, fields, bid = 0;
	cache_get_data(nums, fields);

	if(nums)
	{
		new i = -1;
		for(;++i < nums;)
		{
			mysql_get_int(i, "id", bid);
			mysql_get_string(i, "bnev", BenzinkutInfo[bid][bnev]);
			mysql_get_float(i, "bposx", BenzinkutInfo[bid][bposx]);
			mysql_get_float(i, "bposy", BenzinkutInfo[bid][bposy]);
			mysql_get_float(i, "bposz", BenzinkutInfo[bid][bposz]);
			mysql_get_int(i, "bbenzinmennyiseg", BenzinkutInfo[bid][bbenzinmennyiseg]);
			mysql_get_int(i, "bdieselmennyiseg", BenzinkutInfo[bid][bdieselmennyiseg]);
			mysql_get_float(i, "bradius", BenzinkutInfo[bid][bradius]);
			BenzinkutInfo[bid][bhasznalva] = true;
			BenzinkutInfo[bid][blistitem] = -1;
			bid++;
		}
	}

	if(bid) printf("Szerver: %d benzinkút sikeresen betöltve!", bid);
	else print("Szerver: Nem lett betöltve benzinkút!");
	return true;
}
fpublic GPSBetoltes()
{
	print("Szerver: GPS Koordináták betöltése!");

	new nums, fields, gid = 0;
	cache_get_data(nums, fields);

	if(nums)
	{
		new i = -1;
		for(;++i < nums;)
		{
			mysql_get_int(i, "id", gid);
			mysql_get_float(i, "posx", GPSInfo[gid][gposx]);
			mysql_get_float(i, "posy", GPSInfo[gid][gposy]);
			mysql_get_float(i, "posz", GPSInfo[gid][gposz]);
			mysql_get_string(i, "gnev", GPSInfo[gid][gnev]);
			GPSInfo[gid][gHasznalva] = true;
			gid++;
		}
	}

	if(gid) printf("Szerver: %d GPS koordináta lett betöltve!", gid);
	else print("Szerver: Nem lett betöltve GPS Koordináta!");
	return true;
}

stock FavagoFak()
{
	new x = -1;
	for(;++x < sizeof(FaHelyek);)
	{
		FaObjectek[x] = CreateDynamicObject(618, FaHelyek[x][fPosX], FaHelyek[x][fPosY], FaHelyek[x][fPosZ], 0.0, 0.0, 0.0);
	}
	print("Szerver: Fák sikeresen lerakva!");
	return true;
}

fpublic KapuBetoltes()
{
	print("Szerver: Kapuk betöltése!");

	new nums, fields, kid = 0;
	cache_get_data(nums, fields);

	if(nums)
	{
		new i = -1, kapupos[64], hasznalo[64], nyit;
		for(;++i < nums;)
		{
			mysql_get_int(i, "ID", kid);
			mysql_get_string(i, "Nev", Kapu[kid][kNev]);
			mysql_get_int(i, "Model", Kapu[kid][kModel]);
			mysql_get_float(i, "Tav", Kapu[kid][kTav]);
			mysql_get_float(i, "Speed", Kapu[kid][kSpeed]);

			mysql_get_string(i, "Pos", kapupos);
			sscanf(kapupos, "p<,>fff", PosExt(Kapu[kid][kPos]));

			mysql_get_string(i, "NPos", kapupos);
			sscanf(kapupos, "p<,>fff", PosExt(Kapu[kid][kNPos]));

			mysql_get_string(i, "NRPos", kapupos);
			sscanf(kapupos, "p<,>fff", PosExt(Kapu[kid][kNRPos]));

			mysql_get_string(i, "ZPos", kapupos);
			sscanf(kapupos, "p<,>fff", PosExt(Kapu[kid][kZPos]));

			mysql_get_string(i, "ZRPos", kapupos);
			sscanf(kapupos, "p<,>fff", PosExt(Kapu[kid][kZRPos]));

			if(Kapu[kid][kSpeed] <= 0.0) Kapu[kid][kMozgo] = false;
			else Kapu[kid][kMozgo] = true;

			mysql_get_string(i, "Hasznalo", hasznalo);
			sscanf(hasznalo, "p<,>a<d>["#MAX_KAPU_HASZNALO"]", Kapu[kid][kHasznalo]);

			mysql_get_int(i, "nyit", nyit);
			Kapu[kid][kNyit] = nyit ? true : false;

			mysql_get_int(i, "Vw", Kapu[kid][kVW]);
			mysql_get_int(i, "Kod", Kapu[kid][kKod]);

			Kapu[kid][kOID] = CreateDynamicObject(Kapu[kid][kModel], PosExt(Kapu[kid][kZPos]), PosExt(Kapu[kid][kZRPos]),Kapu[kid][kVW]);

			Kapu[kid][kVan] = true;
			kid++;
		}
	}

	if(kid) printf("Szerver: %d kapu sikeresen betöltve!", kid);
	else print("Szerver: Nem lett betöltve kapu!");

	new k = -1;
	for(;++k < MAX_KAPU;)
	{
		if(Kapu[k][kNyit])
		{
			printf("Szerver: Kapu nyitása: %d",k);
			if(Kapu[k][kMozgo])
				MoveDynamicObject(Kapu[k][kOID], PosExt(Kapu[k][kNPos]), Kapu[k][kSpeed]);
			else
			{
				SetDynamicObjectPos(Kapu[k][kOID], PosExt(Kapu[k][kNPos]));
				SetDynamicObjectRot(Kapu[k][kOID], PosExt(Kapu[k][kNRPos]));
			}
		}
	}
	return true;
}

stock Adat_Num( id, mit )
{
	new num = 0, i = NINCS;
	for(;++i < MAX_HAZ_JARMU;)
	{
		if(mit == ADAT_HAZ && (PlayerInfo[id][pHazKulcs][i] != NINCS))
			num++;

		if(mit == ADAT_JARMU && (PlayerInfo[id][pJarmuKulcs][i] != NINCS && vInfo[PlayerInfo[id][pJarmuKulcs][i]][vHasznalva]))
			num++;
	}
	return num;
}

stock Adat_Update(id, mit)
{
	new i = -1, num = 0, vid, str[128];
	if(mit == ADAT_HAZ || !mit)
	{
		for(;++i < MAX_HOUSE;)
		{
			if(HazInfo[i][hasznalatban])
			{
				//if(strlen(HazInfo[i][tulaj]) && !strcmp(JatekosNev(id), HazInfo[i][tulaj]))
				if(HazInfo[i][hTulajID] == PlayerInfo[id][pID])
				{
					if(num < MAX_HAZ_JARMU)
					{
						str[0] = EOS;
						format(HazInfo[i][tulaj], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pNev]);
						format(str, sizeof(str), "Házszám: ~g~%d.~n~~w~Tulaj: ~g~%s.", i, HazInfo[i][tulaj]);
						PlayerInfo[id][pHazKulcs][num] = i;
						num++;
						if(num == MAX_HAZ_JARMU) break;
					}
				}
			}
		}
	}
	if(mit == ADAT_JARMU || !mit)
	{
		num = 0;
		foreach(Jarmuvek, kid)
		{
			vid = JarmuID(kid, id);
			if(vInfo[vid][vHasznalva])
			{
				if(vInfo[vid][vTulajID] == PlayerInfo[id][pID])
				{
					if(num < MAX_HAZ_JARMU)
					{
						format(vInfo[vid][vTulaj], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pNev]);
						PlayerInfo[id][pJarmuKulcs][num] = vid;
						vInfo[vid][vTLastActive] = gettime();//utoljára aktív
						num++;
						if(num == MAX_HAZ_JARMU) break;
					}
				}
			}
		}
	}
	if(mit == ADAT_CEG || !mit)
	{
		i = NINCS;
		for(;++i < MAX_CEG;)
		{
			if(!CegInfo[i][cVan] || CegInfo[i][cTulajID] != PlayerInfo[id][pID])
				continue;

			format(CegInfo[i][cTulaj], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pNev]);
			PlayerInfo[id][pCegKulcs] = i;
		}
	}
	//ExProcess -> update
	if(mit == ADAT_HAZ_EX || mit == ADAT_MINDEN_EX)
	{
		i = NINCS;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[id][pHazKulcs][i] != NINCS)
			{
				str[0] = EOS;
				format(HazInfo[ PlayerInfo[id][pHazKulcs][i] ][tulaj], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pNev]);
				format(str, sizeof(str), "Házszám: ~g~%d.~n~~w~Tulaj: ~g~%s.", PlayerInfo[id][pHazKulcs][i], HazInfo[ PlayerInfo[id][pHazKulcs][i] ][tulaj]);
			}
		}
	}
	if(mit == ADAT_JARMU_EX || mit == ADAT_MINDEN_EX)
	{
		i = NINCS;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[id][pJarmuKulcs][i] != NINCS)
			{
				format(vInfo[ PlayerInfo[id][pJarmuKulcs][i] ][vTulaj], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pNev]);

				vInfo[vid][vTLastActive] = gettime();//utoljára aktív
				vUpdate(PlayerInfo[id][pJarmuKulcs][i], vuTulaj);
			}
		}
	}
	return true;
}

stock DefenseCheck( playerid )
{
	new regi = PlayerInfo[playerid][padmin];
	if(regi > 0)
	{
		if(regi > TULAJ_SZINT && !IsScripter(playerid))
			PlayerInfo[playerid][padmin] = TULAJ_SZINT;
		else if(regi < 0) PlayerInfo[playerid][padmin] = 0;

		if(regi != PlayerInfo[playerid][padmin])
			SFM(playerid, COL_LRED, "Adminszint korrekció! Régi: %d -> új: %d", regi, PlayerInfo[playerid][padmin]);

		if(egyezik(JatekosNev(playerid),"Lewis_Rolee"))
		{
			ShowPlayerDialog(playerid, DIALOG_AZONOSITAS, DIALOG_STYLE_INPUT, "Azonosísd magad", "{1E90FF}Írd be az adminjelszót!", "Beír", "Mégse");
			Azonositas[playerid] = AZONOSITASIDO;
			SFM(playerid,COL_VKEK,"Van %d másodperced azonosítani magad. Amennyiben nem teszed,a szerver ki fog rúgni.",Azonositas[playerid]);
		}
		else if(strlen(PlayerInfo[playerid][pAdminNev]) < 1)
		{
			ShowPlayerDialog(playerid, DIALOG_ADMINNEV, DIALOG_STYLE_INPUT, "Nincs beállítva adminnév", "{1E90FF}Írj be egy tetszõleges adminnevet:", "Beír", "");
		}
 	}
	return true;
}

stock FajlIras(fajl[], szoveg[])
{
	new File:teszt;
	teszt = fopen(fajl, io_append);
	fwrite(teszt, szoveg);
	fclose(teszt);
}

stock KozeliHaz(playerid)
{
	new
	    ciklus = -1,
	    houseid = -1;

	for(;++ciklus < MAX_HOUSE;)
	{
	    if(HazInfo[ciklus][hasznalatban])
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 1.0, HazInfo[ciklus][posx], HazInfo[ciklus][posy], HazInfo[ciklus][posz]))
	        {
	            houseid = ciklus;
	            break; //megtaláltuk a házat! :D
	        }
	    }
	}
	return houseid;
}


stock AdminUzenetEx(colour = COLOR_LIGHTRED, szint = 1, const szoveg[])
{
	new formazas[128];
	if(szint == 1000 || szint == 1001)//prefix nélkül, így nem kell új funkció xd
		format(formazas, sizeof(formazas), "%s", szoveg);
	else
		format(formazas, sizeof(formazas), "[Admin]: %s", szoveg);

	if(szint == 1000) szint = 0;
	else if(szint == 1001) szint = 1;
	else if(szint > FOADMIN_SZINT && szint != 5555) szint = FOADMIN_SZINT;

	foreach(Player, playerid)
	{
		if(Belepve(playerid) && !PlayerInfo[playerid][pTog][3])
		{
			if((szint != 0 && Admin(playerid, szint)) || (szint == 0 && IsAS(playerid)))
				SendClientMessage(playerid, colour, formazas);
		}
	}
	#if UCPKONZOL == true
	    format(formazas, 128, "[[b;#FF6347;#000000]ADMIN: %s]", szoveg);
	    WSStringFix(formazas);
	    WSServerSentToAll(ServerInfo[sUCPServer], formazas);
	#endif
	return true;
}

stock SpawnHouse(houseid, text[], pickupmodel)
{
	#pragma unused text
	HazInfo[houseid][pickup] = CreateDynamicPickup(pickupmodel,23,HazInfo[houseid][posx],HazInfo[houseid][posy],HazInfo[houseid][posz],0,0,-1);
}

stock BelsoPickup(houseid, belso) {
	HazInfo[houseid][belsolabel] = CreateDynamic3DTextLabel("Kijárat",0xFFFFFF,BelsoInterior[HazInfo[houseid][hInterior]][belsox],BelsoInterior[HazInfo[houseid][hInterior]][belsoy],BelsoInterior[HazInfo[houseid][hInterior]][belsoz]+0.75,20,.worldid=houseid,.interiorid=BelsoInterior[belso][bInterior]);
	HazInfo[houseid][belsopickup] = CreateDynamicPickup(1318,23,BelsoInterior[HazInfo[houseid][hInterior]][belsox],BelsoInterior[HazInfo[houseid][hInterior]][belsoy],BelsoInterior[HazInfo[houseid][hInterior]][belsoz],houseid,BelsoInterior[HazInfo[houseid][hInterior]][bInterior],-1);
}

stock GetNewHouseID() {
	new
	    i = -1,
	    houseid = -1;
	for (;++i < MAX_HOUSE; )
	{
		if(!HazInfo[i][hasznalatban])
		{
			houseid = i;
			break;
		}
	}
	return houseid;
}

stock PutPlayerInHouse(playerid, houseid)
{
	if(houseid == -1)
		return false;

	new interior2 = HazInfo[houseid][hInterior];
	SetInterior(playerid, BelsoInterior[interior2][bInterior]);
	SetVirtualWorld(playerid, houseid);
	SetPos(playerid, BelsoInterior[interior2][belsox],BelsoInterior[interior2][belsoy],BelsoInterior[interior2][belsoz]);
	SetPlayerFacingAngle(playerid, BelsoInterior[interior2][belsoszog]);
	SetCameraBehindPlayer(playerid);
	PlayerInfo[playerid][phaz] = houseid;
	Freeze(playerid,5000);
	Streamer_Update(playerid);
	return true;
}

stock RemovePlayerFromHouse(playerid, houseid)
{
	if(houseid == -1)
		return false;

	SetPlayerInterior(playerid, 0);
	SetVirtualWorld(playerid, 0);
	SetPlayerPos(playerid, HazInfo[houseid][posx], HazInfo[houseid][posy], HazInfo[houseid][posz]+0.50);
	SetCameraBehindPlayer(playerid);
	PlayerInfo[playerid][phaz] = -1;
	Freeze(playerid, 2500);
	return true;
}

stock BanIdo(hour, bool:extra)
{
	new meddig[32];
	if(extra) meddig = "Örökre";
	else meddig = "Soha";

	if(hour <= 0)
	    return meddig;

	if(hour < 24)
		format(meddig, sizeof(meddig), "%d órára", hour);
	else if(hour >= 24 && hour < (24*7))
	{
		if(hour % 24 == 0)
			format(meddig, sizeof(meddig), "%d napra", (hour / 24));
		else
			format(meddig, sizeof(meddig), "%d napra és %d órára", floatround(hour/24, floatround_floor), (hour%24));
	}
	else if(hour >= (24*7))
	{
		if(hour % (24*7) == 0)
			format(meddig, sizeof(meddig), "%d hétre", (hour/24/7));
		else
		{
			if(hour % 24 == 0)
				format(meddig, sizeof(meddig), "%d hétre és %d napra", floatround(hour/24/7, floatround_floor), floatround((hour/24)%7, floatround_floor));
			else
				format(meddig, sizeof(meddig), "%d hétre, %d napra, és %d órára", floatround(hour/24/7, floatround_floor), floatround((hour/24)%7, floatround_floor), (hour%24));
		}
	}
	return meddig;
}

stock ValtozokNullazasa( playerid )//vnull
{
	new i = NINCS;

	for(;++i != sizeof(PlayerInfo[]);)
		PlayerInfo[playerid][playerInfo:i] = EOS;

	//IDE AMI ALAPBÓL NEM NULLA AZ ÉRTÉKE
	strmid(HifiZene[playerid],"-",0,strlen("-"),256);
	MunkaFolyamatban[playerid] = 0;
	Fizetesmod[playerid] = 0;
	Fonok[playerid] = 0;
	AntiFlood[playerid] = 0;
	Tuningol[playerid] = 0;
	Belepett[playerid] = false;
	Azonositas[playerid] = 0;
	Zabal[playerid] = 0;
	PDAmuvelet[playerid] = NINCS;
	Leutve[playerid] = NINCS;
	BombaKezbe[playerid] = NINCS;
	BombaLerakva[playerid] = NINCS;
	TrafiElol[playerid] = false;
	TrafiMinSebesseg[playerid] = 40;
	TrafiSebTolerancia[playerid] = 0;
	i = NINCS;
	for(; ++i < MAX_PLAYERS;)
		TrafiCsekkolva[playerid][i] = 0;
		
    BevasarloPolc[playerid][0] = 0.0, BevasarloPolc[playerid][1] = 0.0, BevasarloPolc[playerid][2] = 0.0;
    
	TrafiTimerFut[playerid] = false;
	
	PlayerInfo[playerid][pDutySkin] = 1;
	//PlayerInfo[playerid][pskin] = 1;
	PlayerInfo[playerid][pTartozas] = 0;
	PlayerInfo[playerid][pGazmaszk] = 0;
	PlayerInfo[playerid][pGazmaszkFenn] = false;
	PlayerInfo[playerid][pLeutve] = 0;
	PlayerInfo[playerid][pZarolva] = 0;
	PlayerInfo[playerid][pChannel] = NINCS;
	PlayerInfo[playerid][pRendelesPoz][0] = 0;
	PlayerInfo[playerid][pRendelesPoz][1] = 0;
	PlayerInfo[playerid][pRendelesPoz][2] = 0;
	PlayerInfo[playerid][pMergezoMod] = 0;
	PlayerInfo[playerid][pMergezoLovedekek] = 0;
	PlayerInfo[playerid][pVerdij] = 0;
	PlayerInfo[playerid][pRendelese] = NINCS;
	//PlayerInfo[playerid][pTargoncaTimerStart] = false;
	strmid(PlayerInfo[playerid][pVerdijOk],"Nincs",0,strlen("Nincs"),32);
	Mergezve[playerid] = 0;
	KepetCsinal[playerid] = 0; 	lX[playerid] = 0;	lY[playerid] = 0;	lZ[playerid] = 0;	Degree[playerid] = 0;
	PlayerInfo[playerid][pRabolhat] = NINCS;
	PlayerInfo[playerid][pLophat] = NINCS;
	PlayerInfo[playerid][pTolvajSkill] = 1;
	Billentyu[playerid] = NINCS;
	BillentyuHatra[playerid] = NINCS;
	PlayerInfo[playerid][pFegyverSkill] = 0;
	PlayerInfo[playerid][pTolvajKulcs] = 0;
	
	PlayerInfo[playerid][pMegerosites] = NINCS;
	PlayerInfo[playerid][pMegerositesExtra][0] = NINCS;
	PlayerInfo[playerid][pMegerositesExtra][1] = NINCS;
	
	CsomagtartoAFK[playerid] = 0; Erosites[playerid] = 0;
	MunkaCP[playerid][0] = 0.0;
	MunkaCP[playerid][1] = 0.0;
	MunkaCP[playerid][2] = 0.0;

	strmid(ZeneHallgatHifibol[playerid],"---",0,strlen("---"),32);
	ZenetHallgat[playerid] = 0;
	CPbe[playerid][0] = 0.0;
	Megmotozna[playerid] = NINCS;
	
	i = NINCS;
	for(; ++i < MAX_KERELEM;)
	{
		Kerelem[playerid][i] = NINCS;
	}
	HifiObjectLerakas[playerid] = -1;
	Warning[playerid] = 0;Lefagyasztva[playerid] = 0;AlapVWje[playerid] = 0;
	NPCFloodVedelem[playerid] = 0;
	Bejelzett[playerid] = 0;
	AccountID[playerid] = 0;
	KezetfognaStilus[playerid] = NINCS;
	Kezetfogna[playerid] = NINCS;
	PenztRabol[playerid] = 0;
	CPbe[playerid][1] = 0.0;
	CPbe[playerid][2] = 0.0;
	Insertalta[playerid] = 0;

	Hatarozas[playerid] = 0;
	Fishing[playerid] = 0;
	GraffitiObjectLerakas[playerid] = NINCS;
	NPCBeszelgetes[playerid] = 0;
	GPSFloodolas[playerid] = 0;
	AFKDialogShowing[playerid] = 0;
	Elso[playerid] = 0;
	VasPlayerID[playerid] = 0;
	VasNala[playerid] = -1;
	
	BevasarloKosar[playerid][0] = -1;
	BevasarloKosar[playerid][1] = -1;
	BevasarloKosar[playerid][2] = 0;
	BevasarloKosar[playerid][3] = 0;
    i = NINCS;
	for(;++i < MAX_KOSAR_CUCC;)
	{
	    BevasarloKosarCuccok[playerid][i] = NINCS;
	}
	
	PlayerInfo[playerid][pBMennyi] = 0;
	PlayerInfo[playerid][pallreport] = false;
	PlayerInfo[playerid][pNoname] = 0;
	smkocsiid[playerid] = 0;
	strmid(PlayerInfo[playerid][pHazasodvaVele],"Senki",0,strlen("Senki"),MAX_PLAYER_NAME);

	PlayerInfo[playerid][pAlnevbe] = false;
	strmid(PlayerInfo[playerid][pAlnev],"Senki",0,strlen("Senki"),32);

	Beirhatjahogyigen[playerid] = -1;
	Hazassag[playerid] = -1;
    SzereloDuty[playerid] = false;
    EpiteszDuty[playerid] = false;
	CsipogoIdo[playerid] = 0;

	PlayerInfo[playerid][pTelotHallgat] = NINCS;
	PlayerInfo[playerid][pLehallgat] = NINCS;
	PlayerInfo[playerid][ArmorObjFenn] = false;
	PlayerInfo[playerid][pSWATDuty] = 0;
	i = NINCS;
	for(; ++i < 8;)
		PlayerInfo[playerid][pAnimban][i] = 0;
		
	PlayerInfo[playerid][pNemolheto] = 0;
	PlayerInfo[playerid][pKannaBenzin] = 0;
    PlayerInfo[playerid][pID] 					= NINCS;
	PlayerInfo[playerid][pwarnok] 				= 1;
	PlayerInfo[playerid][phaz] 					= NINCS;
	PlayerInfo[playerid][pbemehet] 				= true;
	PlayerInfo[playerid][ptelefonaloid] 		= NINCS;
	PlayerInfo[playerid][pElet] 				= MAX_HP;
	PlayerInfo[playerid][pMelyikKapu] 			= NINCS;
	PlayerInfo[playerid][pMegerosites]			= NINCS;
	PlayerInfo[playerid][pFrakcioKezeles] 		= NINCS;
	PlayerInfo[playerid][pTV][0]				= NINCS;
	PlayerInfo[playerid][pTV][2]				= NINCS;
	i = NINCS;
	for(; ++i < MAX_PLAYERS;)
	{
		PlayerInfo[playerid][pRadarJelzes][i] = false;
		PlayerInfo[playerid][pRadarJelzesCol][i] = COLOR_INVISIBLE;
		PlayerInfo[playerid][pRadarJelzesTipus][i] = 0;
	}
	
	PlayerInfo[playerid][pKiertMegy] 			= NINCS;
	PlayerInfo[playerid][pVisz] 				= NINCS;
	PlayerInfo[playerid][pReport][1] 			= NINCS;
	PlayerInfo[playerid][pCamera]				= 0;
	PlayerInfo[playerid][pCameraE]				= 0;
	PlayerInfo[playerid][pBHackMelyik] 			= 0;
	PlayerInfo[playerid][pFegyver]				= 0;
	AutomataID[playerid]						= NINCS;
	PlayerInfo[playerid][peladokitol] 			= NINCS;
	PlayerInfo[playerid][pScriptShoot][0] 		= NINCS;
	PlayerInfo[playerid][pScriptShoot][1] 		= NINCS;
	PlayerInfo[playerid][pHarcstilusTanul]     = false;
	PlayerInfo[playerid][pUjjlenyomat][0] = EOS;
	for(new ci=0;ci<9;ci++)
	{
		PlayerInfo[playerid][pFegyvertVasarolt][ci]     = 0;
		PlayerInfo[playerid][pNPCSzobaAll][ci]     = 0;
	}
	PlayerInfo[playerid][pNPCSzobaAll]     = 0;
	//0 = melyik channel, 1 = idõ, 2 = admin nézi, 3 = eddig repoltolhat

	i = NINCS;
	for(;++i < MAX_HAZ_JARMU;)
	{
		PlayerInfo[playerid][pHazKulcs][i] = NINCS;
		PlayerInfo[playerid][pJarmuKulcs][i] = NINCS;
	}

	new x = -1;
	for(;++x < 5;)
		PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][x]);

	x = -1;
	for(;++x < 3;)
		PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][x]);

	x = -1;
	for(;++x < 5;)
		PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][x]);

	SzerkesztesAllas[playerid] = 0;
	KapuID[playerid] = NINCS;

	noclipdata[playerid][cameramode] 	= 	CAMERA_MODE_NONE;//FlyMode
	noclipdata[playerid][lrold]	   	 	= 	0;
	noclipdata[playerid][udold]   		= 	0;
	noclipdata[playerid][mode]   		= 	0;
	noclipdata[playerid][lastmove]   	= 	0;
	noclipdata[playerid][accelmul]   	= 	0.0;
}

stock BotCheck(playerid)
{
	new gpciserial[128], valami[128];
	gpci(playerid, gpciserial, sizeof(gpciserial));
	new DB:SERIALS = db_open("botserials.db");

	if(SERIALS)
	{
		new DBResult:EREDMENY;
		format(valami, sizeof(valami), "SELECT * FROM serialok WHERE serialok = '%s'", gpciserial);
		EREDMENY = db_query(SERIALS, valami);
		if(db_num_rows(EREDMENY) != 0)
		{
			db_close(SERIALS);
			return false;
		}
	}
	db_close(SERIALS);
	return true;
}

stock ShowInfoTextDraw(playerid)
{
	new i = -1;

	for(;++i < 7;)
		PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][i]);

	return true;
}
stock HideInfoTextDraw(playerid)
{
	new i = -1;

	for(;++i < 7;)
		PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][i]);

	return true;
}
stock ShowVehicleTextDraw( p )
{
	new i = -1;

	if(!IsABicikli(vInfo[ PlayerInfo[p][pJarmuben] ][vModel]))
		for(;++i < 7;) PlayerTextDrawShow(p, g_PlayerTextDraw[p][ptd_JarmuInfo][i]);
	else
		for(;++i < 6;) PlayerTextDrawShow(p, g_PlayerTextDraw[p][ptd_JarmuInfo][i]);

	return true;
}
stock HideVehicleTextDraw(playerid)
{
	new i = -1;

	for(;++i < 7;)
		PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][i]);

	return true;
}

stock UpdateVehicleInfo(playerid, vid)
{
	if(vInfo[vid][vModel] != 0)
	{
		new fo[64], Float:elet, extra[32];

		if(strlen(JarmuAdat[vInfo[vid][vModel] - 400][jUjNev]) > 2)
			format(fo, sizeof(fo), "Model:_%s", JarmuAdat[ vInfo[vid][vModel] - 400 ][jUjNev]);
		else format(fo, sizeof(fo), "Model:_%s", VehicleNames[ vInfo[vid][vModel] - 400 ]);
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2], fo);

	    if(vInfo[vid][vKilometer] <= 1000)
			format(fo, sizeof(fo), "Kilométer:_%.2fm", vInfo[vid][vKilometer]);
		else
			format(fo, sizeof(fo), "Kilométer:_%.2fkm", vInfo[vid][vKilometer] / 1000);
		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4], fo);

	    GetVehicleHealth(vInfo[vid][vID], elet);
		elet = elet - 350;
		if((100-((elet/650))*100) < 100)
			format(fo, sizeof(fo), "Motor:_%.0f%%", 100-((elet/650)*100));
		else
			format(fo, sizeof(fo), "Motor:_100%");

		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5], fo);

		if(!IsABicikli(vInfo[vid][vModel]) && Uzemanyagok[ vInfo[vid][vModel] - 400 ] != 0)
		{
			if(vInfo[vid][vUzemanyag] < 15.0)
			{
				format(extra,sizeof(extra)," ~r~~h~");
			}
			if(Uzemanyagok[ vInfo[vid][vModel] - 400 ] == 1)
				format(fo, sizeof(fo), "Üzemanyag: %s%.0f/%dl",extra, vInfo[vid][vUzemanyag], MAX_Benzin[ vInfo[vid][vModel] - 400 ]);
			else if(Uzemanyagok[ vInfo[vid][vModel] - 400 ] == 2)
				format(fo, sizeof(fo), "Üzemanyag: %s%.0f/%dl",extra, vInfo[vid][vUzemanyag], MAX_Benzin[ vInfo[vid][vModel] - 400]);

			PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6], fo);
		}
		return true;
	}
	return false;
}
stock UpdateVehicleSpeedInfo( playerid )
{
	new fo[64], kmh = GetVehicleSpeed( GetPlayerVehicleID(playerid) );
	if(PlayerInfo[playerid][pJarmuben])
	{
		format(fo, sizeof(fo), "Sebesség:_%d km/h", kmh);
		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3], fo);
	}

	if(PlayerInfo[playerid][pSzunetel] && IsPlayerInAnyVehicle(playerid) && kmh > 1)
		CallLocalFunction("OnPlayerPause", "dd", playerid, 0);

	return true;
}
stock UpdatePlayerInfo(playerid)
{
	new fo[64], date[3], time[3];
	if(!PlayerInfo[playerid][pFrakcio]) {
	    format(fo, sizeof(fo), "Frakció: Nincs (Civil)");
	    PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_Info][2], fo);

	    format(fo, sizeof(fo), "Rang: Nincs");
		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_Info][3], fo);
	} else {
		format(fo, sizeof(fo), "Frakció: %s", FInfo[PlayerInfo[playerid][pFrakcio]][fNev]);
		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_Info][2], fo);

		format(fo, sizeof(fo), "Rang: %s(%d)", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), PlayerInfo[playerid][prang]);
		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_Info][3], fo);
	}

	format(fo, sizeof(fo), "Fizetés: még %d perc", PlayerInfo[playerid][pFizetesIdo]);
	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_Info][4], fo);

	getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);

	format(fo, sizeof(fo), "Dátum: %d-%02d-%02d %02d:%02d", PosExt(date), time[0], time[1]);
	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_Info][5], fo);
	return true;
}

stock TextDrawBetoltes(playerid)
{

	g_PlayerTextDraw[playerid][ptd_AlsoFelso][0] = CreatePlayerTextDraw(playerid, -72.000000, 0.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0], 255);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0], 1);
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0], 0.500000, 10.400000);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0], -1);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0], 0);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0], 1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0], 1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0], 1);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0], 100);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0], 690.000000, 0.000000);

	g_PlayerTextDraw[playerid][ptd_AlsoFelso][1] = CreatePlayerTextDraw(playerid, -72.000000, 355.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1], 255);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1], 1);
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1], 0.500000, 10.400000);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1], -1);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1], 0);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1], 1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1], 1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1], 1);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1], 100);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1], 690.000000, 0.000000);

    g_PlayerTextDraw[playerid][ptd_Adatok] = CreatePlayerTextDraw(playerid, 490.0, 103.0, "_");
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Adatok], 0xFFFFFFAA);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Adatok], 1);
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Adatok], 0.259900, 1.000000);
	//TextDrawLetterSize(g_PlayerTextDraw[playerid][ptd_Adatok], 0.340000, 1.000000);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Adatok], 255);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Adatok], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Adatok], 1);
	//TextDrawSetShadow(g_PlayerTextDraw[playerid][ptd_Adatok], 1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Adatok], 1);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Adatok], 69);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Adatok], 616.000000, 0.000000);

    g_PlayerTextDraw[playerid][ptd_Penz] = CreatePlayerTextDraw(playerid, 490.000000, 80.000000, "000000000$");
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Penz], LKEK2); // 294654463
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Penz], 3);
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Penz], 0.589999, 2.399998);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Penz], -1);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Penz], 0);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Penz], 1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Penz], 1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Penz], 1);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Penz], 255);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Penz], 616.000000, 0.000000);

	g_PlayerTextDraw[playerid][ptd_Info][0] = CreatePlayerTextDraw(playerid, 648.800231, 427.093475, "~n~");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Info][0], 0.500400, 8.290129);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Info][0], -95.999984, 0.000000);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Info][0], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][0], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Info][0], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][0], 80);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Info][0], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Info][0], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][0], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Info][0], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Info][0], 1);

	g_PlayerTextDraw[playerid][ptd_Info][1] = CreatePlayerTextDraw(playerid, 16.000000, 430.826690, TDTARTALOM_BAL);
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Info][1], 0.382000, 1.264000);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Info][1], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][1], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Info][1], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Info][1], 5);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][1], 512819010); // -1523963137
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Info][1], 3);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Info][1], 1);

	g_PlayerTextDraw[playerid][ptd_Info][2] = CreatePlayerTextDraw(playerid, 180.000000, 426.346710, "Frakció: Betöltés..");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Info][2], 0.253200, 1.211733);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Info][2], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][2], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Info][2], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Info][2], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][2], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Info][2], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Info][2], 1);

	g_PlayerTextDraw[playerid][ptd_Info][3] = CreatePlayerTextDraw(playerid, 181.000000, 437.053466, "Rang: Betöltés..");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Info][3], 0.253200, 1.211733);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Info][3], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][3], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Info][3], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Info][3], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][3], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Info][3], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Info][3], 1);

	g_PlayerTextDraw[playerid][ptd_Info][4] = CreatePlayerTextDraw(playerid, 335.399444, 425.853363, "Fizetés: Betöltés..");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Info][4], 0.253200, 1.211733);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Info][4], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][4], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Info][4], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Info][4], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][4], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Info][4], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Info][4], 1);

	g_PlayerTextDraw[playerid][ptd_Info][5] = CreatePlayerTextDraw(playerid, 336.399444, 437.306762, "Dátum: Betöltés..");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Info][5], 0.253200, 1.211733);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Info][5], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][5], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Info][5], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Info][5], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][5], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Info][5], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Info][5], 1);

	g_PlayerTextDraw[playerid][ptd_Info][6] = CreatePlayerTextDraw(playerid, 459.399536, 431.826721, TDTARTALOM_JOBB);
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Info][6], 0.282000, 1.164000);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Info][6], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][6], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Info][6], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Info][6], 5);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Info][6], 512819010); // 5439743
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Info][6], 3);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Info][6], 1);

    g_PlayerTextDraw[playerid][ptd_JarmuInfo][0] = CreatePlayerTextDraw(playerid, 503.999542, 337.493377, "~n~");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0], 0.398799, 9.581871);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0], 744.799499, 5.973332);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0], 80);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0], 1);

	g_PlayerTextDraw[playerid][ptd_JarmuInfo][1] = CreatePlayerTextDraw(playerid, 572.000122, 337.493408, "Jármû Információ");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1], 0.316398, 1.420799);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1], 680.799987, 136.639877);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1], 512819010);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1], 1);

	g_PlayerTextDraw[playerid][ptd_JarmuInfo][2] = CreatePlayerTextDraw(playerid, 505.599853, 355.413269, "Model: Betöltés..");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2], 0.321198, 1.181866);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2], 1);

	g_PlayerTextDraw[playerid][ptd_JarmuInfo][3] = CreatePlayerTextDraw(playerid, 505.799743, 368.360015, "Sebesség: Betöltés..");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3], 0.301198, 1.181866);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3], 1);

	g_PlayerTextDraw[playerid][ptd_JarmuInfo][4] = CreatePlayerTextDraw(playerid, 505.799743, 382.546569, "Kilométer: Betöltés..");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4], 0.321198, 1.181866);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4], 1);

	g_PlayerTextDraw[playerid][ptd_JarmuInfo][5] = CreatePlayerTextDraw(playerid, 505.199676, 395.493286, "Sérüles: Betöltés..");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5], 0.321198, 1.234132);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5], 1);

	g_PlayerTextDraw[playerid][ptd_JarmuInfo][6] = CreatePlayerTextDraw(playerid, 506.199645, 407.693389, "Üzemanyag: 300/300.0 (B)");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6], 0.261999, 1.383466);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6], 1);

	PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0]);
	PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1]);

	g_PlayerTextDraw[playerid][ptd_Hatter][0] = CreatePlayerTextDraw(playerid, 148.989776, 140.000076, "~n~");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][0], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][0], 491.010375, 11.666667);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][0], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][0], 1086292479);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][0], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][0], 512819010);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][0], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][0], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][0], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][0], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][0], 1);

	g_PlayerTextDraw[playerid][ptd_Hatter][1] = CreatePlayerTextDraw(playerid, 283.455383, 138.250030, "Kód megadása");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][1], 0.278052, 1.565000);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][1], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][1], -1);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][1], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][1], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][1], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][1], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][1], 1);

	g_PlayerTextDraw[playerid][ptd_Hatter][2] = CreatePlayerTextDraw(playerid, 148.990066, 159.250015, "~n~");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][2], 0.492635, 14.474163);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][2], 491.010375, 12.833334);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][2], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][2], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][2], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][2], 80);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][2], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][2], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][2], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][2], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][2], 1);

	g_PlayerTextDraw[playerid][ptd_SzamJegy][0] = CreatePlayerTextDraw(playerid, 190.219635, 174.416656, "0");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], 512819010);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][0], 1);

	g_PlayerTextDraw[playerid][ptd_SzamJegy][1] = CreatePlayerTextDraw(playerid, 254.470184, 174.250015, "0");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], 512819010);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][1], 1);

	g_PlayerTextDraw[playerid][ptd_SzamJegy][2] = CreatePlayerTextDraw(playerid, 319.188995, 174.083328, "0");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], 512819010);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][2], 1);

	g_PlayerTextDraw[playerid][ptd_SzamJegy][3] = CreatePlayerTextDraw(playerid, 383.439697, 174.500015, "0");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], 512819010);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][3], 1);

	g_PlayerTextDraw[playerid][ptd_SzamJegy][4] = CreatePlayerTextDraw(playerid, 446.284576, 174.916671, "0");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], 2);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], 512819010);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][4], 1);

	g_PlayerTextDraw[playerid][ptd_Elerte][0] = CreatePlayerTextDraw(playerid, 164.450973, 263.083282, "~n~");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], 216.925308, 4.666666);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], -16776961);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][0], 1);

	g_PlayerTextDraw[playerid][ptd_Elerte][1] = CreatePlayerTextDraw(playerid, 228.232833, 262.916442, "~n~");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], 281.112701, -5.833333);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], -16776961);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][1], 1);

	g_PlayerTextDraw[playerid][ptd_Elerte][2] = CreatePlayerTextDraw(playerid, 293.420471, 262.749725, "~n~");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], 345.300201, -0.583333);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], -16776961);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][2], 1);

	g_PlayerTextDraw[playerid][ptd_Elerte][3] = CreatePlayerTextDraw(playerid, 357.670959, 263.749725, "~n~");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], 409.956298, -0.583333);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], -16776961);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][3], 1);

	g_PlayerTextDraw[playerid][ptd_Elerte][4] = CreatePlayerTextDraw(playerid, 420.515716, 264.166412, "~n~");
	PlayerTextDrawLetterSize(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], 473.206665, -4.666667);
	PlayerTextDrawAlignment(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], 1);
	PlayerTextDrawColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], -1);
	PlayerTextDrawUseBox(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], true);
	PlayerTextDrawBoxColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], -16776961);
	PlayerTextDrawSetShadow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], 0);
	PlayerTextDrawSetOutline(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], 1);
	PlayerTextDrawBackgroundColor(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], 51);
	PlayerTextDrawFont(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], 1);
	PlayerTextDrawSetProportional(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][4], 1);
}
stock MakeMarkerInvisible( playerid )
{
    foreach( Player, i )
    {
        SetPlayerMarkerForPlayer( i, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
    }
}
stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new ip_count = 0;
	new i = NINCS;
	for(; ++i < MAX_PLAYERS;)
 	{
  		if(!IsPlayerConnected(i)) continue;
		if(!egyezik(JatekosIP(i), test_ip)) continue;
		ip_count++;
    }
    return ip_count;
}
timer OnPlayerUpdateEx[1000](playerid)
{
	if(IsPlayerNPC(playerid)) return 1;
	/*
	if(Belepett[playerid])
	{
		new wid = GetPlayerWeapon(playerid);
		if(Lofegyver(wid))
  		{
		    if(wid != 0 && !g_Fegyverek[playerid][wid])
			{
			    ResetPlayerWeapons(playerid);
				AdminUzenet(COLOR_LIGHTRED, 3, "%s - Fegyver hack!", JatekosNev(playerid));
			}
		}
	}
	*/
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && PlayerInfo[playerid][pjetpack] == false)
		ServerBan(playerid, 0, "[Hack]Jetpack", NINCS, true, true, true);
		
	if(IsPlayerInAnyVehicle(playerid))
	{
	    new kocsi = GetPlayerVehicleID(playerid);
 		if(vInfo[kocsi][vNOSCounter] != 0)
	    {
			new ido = GetTickCount() - vInfo[kocsi][vNOSCounter];
			if((vInfo[kocsi][vNOS] - ido) <= 0)
			{
				vInfo[kocsi][vNOS] = 0;
				RemoveVehicleComponent(kocsi,1010);
				vInfo[kocsi][vNOSCounter] = 0;
			}
   		}
	}
	new Float:Velocity[3];
   	GetPlayerVelocity(playerid, Velocity[0], Velocity[1], Velocity[2]);
    if (floatabs(Velocity[0]) > 1.1 || floatabs(Velocity[1]) > 1.1 || floatabs(Velocity[2]) > 1.1 )
    {
        AdminUzenet(RED, 1, "[Cheat] [%d]%s cheat miatt kickelve!", playerid,JatekosNev(playerid));
    	Kick(playerid);
    }
	GetPlayerHealth(playerid, PlayerInfo[playerid][pUjElet]);
	GetPlayerArmour(playerid, PlayerInfo[playerid][pUjPancel]);
	/*if(Lefagyasztva[playerid] == 1 || !Belepve(playerid))
	{
	    if(GetPlayerSpeed(playerid) > 1)
	    {
	       	AdminUzenet(RED, 1, "[Cheat]"#COL_LKEK" %s sobeit gyanú miatt kickelve!", playerid);
   			Kick(playerid);
	    }
	}*/
	if(PlayerInfo[playerid][pUjElet] < 10)
	{
		Anim(playerid, 1);
	}
	if(PlayerInfo[playerid][padmin] != 0 && !IsRealAdmin(playerid))
	{
		SCM(playerid,COL_LRED,"Hibás adminszint miatt az adminod el lett véve!");
		AdminUzenet(LKEK,1,"[!] %s adminja érvénytelen adminszint miatt elvéve a rendszer által.",returnName(playerid));
		PlayerInfo[playerid][padmin] = 0;
	}
	new Float:XXXX,Float:YYYY,Float:ZZZZ;
	GetPlayerPos(playerid,XXXX,YYYY,ZZZZ);
	if(XXXX > 20000 || YYYY > 20000 || ZZZZ > 20000)
	{
		SetPos(playerid, 1503.8801,-1770.6318,13.5433,4.1295, true);
		SCM(playerid,COL_LRED,"Rossz helyre kerültél ezért a rendszer vissza rakott!!");
	}
	onPause_Update(playerid);
	
	if(PlayerInfo[playerid][pUjElet] > MAX_HP && PlayerInfo[playerid][pGodmode] != 1)
	{
		nformat(string, 128, "[AC]:{1E90FF} [%d]%s - Cheat: Élet (%s) | Kliens oldalon: %.1f | Szerver oldalon: %.1f | Differencia: %.1f", playerid, JatekosNev(playerid), (Admin(playerid, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")), PlayerInfo[playerid][pUjElet], PlayerInfo[playerid][pElet], (PlayerInfo[playerid][pUjElet] - PlayerInfo[playerid][pElet]));
		AdminUzenetEx(LKEK, 1001, string);
		Log(FILE_CHEAT, string);

		SetHealth(playerid, PlayerInfo[playerid][pElet], false);
		PlayerInfo[playerid][pUjElet] = PlayerInfo[playerid][pElet];

		if(!Admin(playerid, FOADMIN_SZINT))
			ServerBan(playerid, 0, "[AC] Élet Cheat", NINCS, (!Belepve(playerid) ? true : false), true, true);
	}
	if(PlayerInfo[playerid][pUjPancel] > MAX_ARMOR && PlayerInfo[playerid][pGodmode] != 1)
	{
		nformat(string, 128, "[AC]: {1E90FF}[%d]%s - Cheat: Armour (%s) | Kliens oldalon: %.1f | Szerver oldalon: %.1f | Differencia: %.1f", playerid, JatekosNev(playerid), (Admin(playerid, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")), PlayerInfo[playerid][pUjPancel], PlayerInfo[playerid][pPancel], (PlayerInfo[playerid][pUjPancel] - PlayerInfo[playerid][pPancel]));
		AdminUzenetEx(LKEK, 1001, string);
		Log(FILE_CHEAT, string);

		SetArmor(playerid, 0.0, true);

		if(!Admin(playerid, FOADMIN_SZINT))
			ServerBan(playerid, 0, "[AC] Armor hack", NINCS, (!Belepve(playerid) ? true : false), true, true);
	}
	/*------------------------------------ [ TextDraw Update ] ------------------------------------*/

	if(IsPlayerInAnyVehicle(playerid))
		UpdateVehicleSpeedInfo( playerid );

	if(PlayerInfo[playerid][pSzunetel] && !IsPlayerInAnyVehicle(playerid) && GetPlayerSpeed(playerid) > 1)
		CallLocalFunction("OnPlayerPause", "dd", playerid, 0);

	if(!IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][pJarmuTDMutat]) {
		HideVehicleTextDraw(playerid);
		PlayerInfo[playerid][pJarmuTDMutat] = false;
		PlayerInfo[playerid][pJarmuben] = 0;
	}

	if(!PlayerInfo[playerid][pMP3_Megy])
	{
		if(!PlayerInfo[playerid][pJarmuZene] && IsPlayerInAnyVehicle(playerid))
		{
			new cid = JarmuID(GetPlayerVehicleID(playerid), playerid);
			if(cid && vInfo[ cid ][vRadio])
			{
				PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][1]);
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, RadioLista[ vInfo[ cid ][vRadio] - 1 ][0]);
			}
			PlayerInfo[playerid][pJarmuZene] = true;
		}
		else if(PlayerInfo[playerid][pJarmuZene] && !IsPlayerInAnyVehicle(playerid))
		{
			PlayerInfo[playerid][pJarmuZene] = false;
			PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][1]);
			StopAudioStreamForPlayer(playerid);
		}
	}
	return 1;
}
stock ASInitialState(playerid)
{
	s0beitCheck[playerid][checking] = true;
 	s0beitCheck[playerid][stage] = 1;
	s0beitCheck[playerid][counter] = 0;
	s0beitCheck[playerid][spawned] = false;
	s0beitCheck[playerid][check_started] = 0;
	s0beitCheck[playerid][vehicleId] = INVALID_VEHICLE_ID;
}
public OnPlayerConnect(playerid)
{
    ASInitialState(playerid);
    
    new i = NINCS;
	for(; ++i < 47;)
 	{
	    g_Fegyverek[playerid][i] = false;
  	}
    CrashAttempts[playerid] = 0;
    CrashAttemptLastCleanupTick[playerid] = GetTickCount();

    BanyaBarTimerStat[playerid] = false;
    g_KovetVisz[playerid][0] = NINCS;
    g_KovetVisz[playerid][1] = NINCS;
    
    SetPlayerWorldBounds(playerid, WB_MAX_X, WB_MIN_X, WB_MAX_Y, WB_MIN_Y);
    
	g_DrivingVehicle[playerid] = false;
	g_IsPassenger[playerid] = false;
	g_DrivenVehicleID[playerid] = NINCS;
	
    g_ObjectetEditel[playerid] = NINCS;
    Kicked[playerid] = false;
    
    MenuX[playerid] = 1;
    MenuY[playerid] = 1;
	CreatePlayerIphone(playerid);
	
	pPowerTD[playerid] = CreatePlayerTextDraw(playerid, 512.000000, 397.000000, "~n~~n~");
	PlayerTextDrawBackgroundColor(playerid, pPowerTD[playerid], 255);
	PlayerTextDrawFont(playerid, pPowerTD[playerid], 1);
	PlayerTextDrawLetterSize(playerid, pPowerTD[playerid], 0.500000, -0.099999);
	PlayerTextDrawColor(playerid, pPowerTD[playerid], -1);
	PlayerTextDrawSetOutline(playerid, pPowerTD[playerid], 0);
	PlayerTextDrawSetProportional(playerid, pPowerTD[playerid], 1);
	PlayerTextDrawSetShadow(playerid, pPowerTD[playerid], 1);
	PlayerTextDrawUseBox(playerid, pPowerTD[playerid], 1);
	PlayerTextDrawBoxColor(playerid, pPowerTD[playerid], -1359019777);
	PlayerTextDrawTextSize(playerid, pPowerTD[playerid], 507.000000, 0.000000);
	
	ValtozokNullazasa(playerid);
	if(IsPlayerNPC(playerid))
	{
		if(!strcmp(JatekosNev(playerid, false, true), "[NPC]", .length = 5))
		{
			if(strfind(JatekosNev(playerid, false, true), "boltbot_") != -1)
			{
				ServerInfo[sBoltBot]++;
				if(ServerInfo[sBoltBot] == sizeof(BoltBot))
				{
					new l = 0;

					foreach(new botid : Bot)
					{
						if(strfind(JatekosNev(botid, false, true), "boltbot_") != -1)
						{
							BoltRablas[l][npcID] = botid;
							SetPlayerColor(botid, COLOR_INVISIBLE);
							l++;
							//printf("Bot: %d", l);
						}
					}
				}
			}
			else if(strfind(JatekosNev(playerid, false, true), "bankbot_") != -1)
			{
				ServerInfo[sBankBot]++;
				if(ServerInfo[sBankBot] == 1)
				{
					//new l = 0;
					foreach(new botid : Bot)
					{
						if(strfind(JatekosNev(botid, false, true), "bankbot_") != -1)
						{
							BankBotok[bankNPCID] = botid;
							SetPlayerColor(botid, COLOR_INVISIBLE);
						}
					}
				}
			}
			return true;
		}
	}
	if(!BotCheck(playerid))
	{
		SetSpawnInfo(playerid, 0, 1, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		BanEx(playerid, "[AntiBot]: IP Flood");
	}
	else
	{
	    new newcheck = HelyesNevString(JatekosNev(playerid));
		if(newcheck != 1)
	    {
			if(newcheck != 1)
			{
				if(newcheck == -1)
				    format(uzenet, sizeof(uzenet), "Helytelen név! A nevednek nagy betûvel kell kezdõdnie!");
				else if(newcheck == -2)
				    format(uzenet, sizeof(uzenet), "Helytelen név! A neved nem tartalmazhat számokat!");
			 	else if(newcheck == -3)
				    format(uzenet, sizeof(uzenet), "Helytelen név! A neved nem tartalmazhat speciális karaktereket!");
			    else if(newcheck == -4)
				    format(uzenet, sizeof(uzenet), "Helytelen név! A neved elsõ betûi lehetnek csak nagy betûk!");
			    else if(newcheck == -5)
				    format(uzenet, sizeof(uzenet), "Helytelen név! A neved max. "#MAX_ALSOVONAS" alsóvonást tartalmazhat!");
				else if(newcheck == -6)
				    format(uzenet, sizeof(uzenet), "Helytelen név! Az alsóvonás után nagy kezdõbetû kell!");
			    else if(newcheck == -7)
				    format(uzenet, sizeof(uzenet), "Helytelen név! A nevednek legalább 2részbõl kell állnia! (Vezetéknév_Keresztnév)");
        		else if(newcheck == -8)
				    format(uzenet, sizeof(uzenet), "Helytelen név! A neved min. 6, max. "#MAX_PLAYER_NAME" karakter hosszúságú lehet!");
			}
			SeeKick(playerid, uzenet);
	        return 1;
	    }
	    if(GetNumberOfPlayersOnThisIP(JatekosIP(playerid)) > MAX_IP_CONNS)
	    {
	        i = NINCS;
	        for(; ++i < MAX_PLAYERS;)
	        {
	            if(!IsPlayerConnected(i)) continue;
				if(!egyezik(JatekosIP(i), JatekosIP(playerid))) continue;
				Kick(i);
	        }
	        return 1;
	    }
	    PlayerTimers[playerid][PT_OPUP] = repeat OnPlayerUpdateEx(playerid);
		new GPCIDDRESS[200];
		gpci(playerid,GPCIDDRESS,sizeof(GPCIDDRESS));
		nformat(sqlquery,256, "SELECT * FROM `"#MYSQL_SERIAL_BAN"` WHERE Cim = '%s'", GPCIDDRESS);
		mysql_tquery(sql_ID, sqlquery,"SerialBanCheck", "i", playerid);


		Kapcsolodasok(playerid, 1);
		SetPlayerColor(playerid, COLOR_INVISIBLE);

		BoostTicTimer[playerid] = GetTickCount();
	    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 499 );
		SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 499 );
		SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 499 );

		CreateKeyPad(playerid);
		Felirat( playerid, false );

		PlayerInfo[playerid][pTog][4] = true; //Beszédanim alapból legyen bekapcsolva
		PlayerInfo[playerid][pTaxisid] = INVALID_PLAYER_ID;

		//Egyéb infok textdraw ne legyen alapból bekapcsolva
		PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][0]);
		PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][1]);
		PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][6]);
		PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0]);
		PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1]);
		PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][2]);
		PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][3]);
		PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][4]);
		PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][5]);
	}
	return true;
}

stock ASCleanup(playerid)
{
	stop s0beitCheck[playerid][asTimer];
	if(s0beitCheck[playerid][vehicleId] != INVALID_VEHICLE_ID)
	{
		DestroyVehicle(s0beitCheck[playerid][vehicleId]);
		s0beitCheck[playerid][vehicleId] = INVALID_VEHICLE_ID;
	}
}

public OnPlayerSpawn(playerid)
{
	if(IsPlayerNPC(playerid))
	{
	    #if defined KELLDWAYNE
		if(egyezik(returnName(playerid),"[NPC]Dwayne_Harrison"))
		{
			VasarlosNPCK[0] = playerid;
			FegyverNPC(playerid);
			SetVirtualWorld(playerid, 0);
			SetInterior(playerid, 0);
			SetPlayerColor(playerid, COLOR_INVISIBLE);
			NPCTextLabel[0] = CreateDynamic3DTextLabel("- "#COL_LKEK"Interakcióhoz nyomd le az "COL_FEHER"Y"COL_LKEK" gombot"COL_FEHER" -",FEHER,2690.316, -1975.359, 13.546,3,playerid,INVALID_PLAYER_ID,0,0,0,-1,100);
		}
		#endif
		new l = -1;
		for(;++l < sizeof(BoltBot);)
		{
			//printf("Spawn: %d | %d", playerid, BoltRablas[l][npcID]);
			if(BoltRablas[l][npcID] == playerid)
			{
				BoltRablas[l][npcRabolhato] = BoltBot[l][bBotRob];
				SetPlayerPos(BoltRablas[l][npcID], BoltBot[l][bBotPosX], BoltBot[l][bBotPosY], BoltBot[l][bBotPosZ]);
				SetPlayerFacingAngle(BoltRablas[l][npcID], BoltBot[l][bBotA]);
				break;
			}
		}
		if(BankBotok[bankNPCID] == playerid)
		{
			SetPlayerPos(BankBotok[bankNPCID],  2308.553, -6.994, 22.819);
			SetPlayerFacingAngle(BankBotok[bankNPCID], 178.0);
			SetPlayerSkin(BankBotok[bankNPCID],17);
		}
		return true;
	}
	else
	{
	    if(s0beitCheck[playerid][checking])
        {
			ASSetVW(playerid);

			TogglePlayerControllable(playerid, false);
			SetPlayerPos(playerid, 0.05, -0.43, 500.71);

			s0beitCheck[playerid][spawned] = true;
        }
		if(PlayerInfo[playerid][pSzunetel])
			CallLocalFunction("OnPlayerPause", "dd", playerid, 0);

		PlayerInfo[playerid][pCamera] = NINCS;
		if(!PlayerInfo[playerid][pPaintBall][0])
			PlayerInfo[playerid][pSpawnVedelem] = 5;

		if(PlayerInfo[playerid][pTiltvaVan])
			return 0;

		if(PlayerInfo[playerid][pHatizsak])
			SetPlayerAttachedObject(playerid, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);

		PlayerInfo[playerid][pMP3_Megy] = false;
		StopAudioStreamForPlayer(playerid);

	    if(PlayerInfo[playerid][pregisztracio] != 1)
		{
			PlayerInfo[playerid][ppenz] += 1000;
			SCM(playerid,COL_LRED,"Kaptál 1000$ kezdõpénzt! Jó játékot!");
		    SetPos(playerid, 1483.7136,-1741.7975,13.5469, 0.236, true);
		    SetInterior(playerid, 0);
		    SetVirtualWorld(playerid, 0);
		    
		    PlayerInfo[playerid][pregisztracio] = 1;
		}
	 	else
	  	{
			new skin = PlayerInfo[playerid][pskin];
			if(PlayerInfo[playerid][pFrakcio] != 0)
			{
				if(PlayerInfo[playerid][pDuty][0])
				{
					if(!PlayerInfo[playerid][pDutySkin])
					{
						new i = NINCS, max_skin = NINCS, var_id = NINCS;
						for(;++i < FK_SKINEK;){
							if(FrakcioSkinek[i][0] == PlayerInfo[playerid][pFrakcio]){
							    max_skin = FrakcioSkinek[i][1];
							    var_id = i;
							    break;
							}
						}
						if(max_skin != NINCS && var_id != NINCS)
						{
							new slot = PlayerInfo[playerid][prang] + 2;
						    if(slot >= max_skin) slot = (max_skin - 1) + 2;

							skin = FrakcioSkinek[ var_id ][ slot ];
	  					}
					}
					else
						skin = PlayerInfo[playerid][pDutySkin];
				}
			}
			if(!skin) skin = 1;
			SetPlayerSkin(playerid, skin);
			Freeze(playerid, 5000);
			if(PlayerInfo[playerid][pjail] != 0 && PlayerInfo[playerid][pjail] != 2)
				Borton(playerid, PlayerInfo[playerid][pjail]);
            else if(Bortonben(playerid) != 0 && Bortonben(playerid) != 2)
				Borton( playerid, Bortonben( playerid ) );
			else if(PlayerInfo[playerid][pPaintBall][0] != 0)
				PaintBallMuvelet(playerid, 3);
			else
			{
				if(PlayerInfo[playerid][pNewSpawn])
				{
					if(PlayerInfo[playerid][pHazKulcs][0] != NINCS)
						RemovePlayerFromHouse(playerid, PlayerInfo[playerid][pHazKulcs][0]);
					else
						SetPos(playerid, 1483.7136,-1741.7975,13.5469, 0.236, true);

					PlayerInfo[playerid][pNewSpawn] = false;
					PlayerInfo[playerid][phaz] = NINCS;
				}
				else if(PlayerInfo[playerid][posx] != 0.0)
				{
					SetInterior(playerid, PlayerInfo[playerid][pinterior]);
					SetVirtualWorld(playerid, PlayerInfo[playerid][pvirtualworld]);
					SetPlayerPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz]);
					SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pangle]);
				} else
					SetPos(playerid, 1483.7136,-1741.7975,13.5469, 0.236, true);
			}
		}


        Anim(playerid,0);
		TrafiBuntetheto[playerid] = 0;
		Focizik[playerid] = 0;
		StatInfo[playerid][pRIdo] = UnixTime, StatMentes(playerid, true);
		Idojaras(playerid); //Idõjárás váltás
		Felirat( playerid, true );//IDK

		PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0]);
		PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1]);

		UpdatePlayerInfo(playerid);
		ShowInfoTextDraw(playerid);

		//Progressbar-ok beállítása
		if(EhsegBar[playerid] != INVALID_PLAYER_BAR_ID)
		{
			SetPlayerProgressBarValue(playerid, EhsegBar[playerid], 0.0);
			//UpdatePlayerProgressBar(playerid, EhsegBar[playerid]);
		}
		if(VizeletBar[playerid] != INVALID_PLAYER_BAR_ID)
		{
			SetPlayerProgressBarValue(playerid, VizeletBar[playerid], 0.0);
			//UpdatePlayerProgressBar(playerid, VizeletBar[playerid]);
		}
		#if defined KELLDWAYNE
		if(NemLehetANeve(playerid))
		{
			SCM(playerid,COL_LRED,"Hiba Történt! Ezt a nevet NEM veheted fel kérlek változtass az UCP-n nevet!");
			SCM(playerid,COL_LRED,"Ezt a nevet már használja egy NPC!");
			Kick(playerid);
			return 1;
		}
		#endif
		new index;
		if(DivatInfo[SLOT_SAPKA][playerid][dVan] == 1)
		{
			index = SLOT_SAPKA;
			SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
		}
		if(DivatInfo[SLOT_SZEMUVEG][playerid][dVan] == 1)
		{
			index = SLOT_SZEMUVEG;
			SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
		}

		SetPlayerColor(playerid, COLOR_INVISIBLE);
		SetPlayerScore(playerid, PlayerInfo[playerid][pjatekosszint]);

		new td_str[1024];
		PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Penz]);
		format(td_str, sizeof(td_str), "%09d$", KPegyenleg(playerid));
		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_Penz], td_str);

		PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_Adatok], "Adatok betöltése....");
		PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Adatok]);

		if(PlayerInfo[playerid][pFegyver])
  		{
			new slot = GetGunSlot(PlayerInfo[playerid][pFegyver]);
			Fegyver(playerid, true, PlayerInfo[playerid][pFegyver], PlayerInfo[playerid][pToltenyek][slot]);
  		}
		SetHealth(playerid, MAX_HP);
		SetPlayerAttachedWeapon(playerid);

		new x = -1;
		for(;++x < MAX_TERULET;)
		{
			if(tInfo[x][tVan])
			{
				GangZoneShowForPlayer(playerid, tInfo[x][tZone], FrakcioSzin[ tInfo[x][tFrakcio] - 1 ]);
				if(tInfo[x][tHarcFolyik])
					GangZoneFlashForPlayer(playerid, tInfo[x][tZone], COLOR_INVISIBLE);
				else
					GangZoneStopFlashForPlayer(playerid, tInfo[x][tZone]);
			}
		}

		/*-------------------- Streamer újratöltés --------------------*/
		if(ServerInfo[sTuzVan] && PlayerInfo[playerid][pFrakcio] == FRAKCIO_LAFD) {
			for(new t = 0; t < TUZ_MAX; t++)
			{
				if(Tuz[t][tuzAktiv] && !Streamer_IsInArrayData(STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, playerid))
					Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, playerid);
			}
		}

		//Animok kezelése
		if(!PlayerInfo[playerid][pAnimLibsPreloaded])
		{
			EloToltes(playerid);
			PlayerInfo[playerid][pAnimLibsPreloaded] = 1;
		}
	}
	return true;
}

timer FixPlayerCam[1000](playerid)
{
	if(PlayerInfo[playerid][pCamera] == -1)
		return true;

	if(PlayerInfo[playerid][pCamera] >= sizeof(LoginCameraPos))
		PlayerInfo[playerid][pCamera] = 0;

	PlayerInfo[playerid][pCameraE] = PlayerInfo[playerid][pCamera];
	PlayerInfo[playerid][pCamera] = random(sizeof(LoginCameraPos)); //PlayerInfo[playerid][pCamera]++;
	if((PlayerInfo[playerid][pCamera] == PlayerInfo[playerid][pCameraE]) && (PlayerInfo[playerid][pCameraE] != -1))
	{
		PlayerInfo[playerid][pCamera]++;
		if(PlayerInfo[playerid][pCamera] >= sizeof(LoginCameraPos))
		{
			PlayerInfo[playerid][pCameraE] = -1;
			PlayerInfo[playerid][pCamera] = 0;
		}
	}

	//RemovePlayerColorFade(playerid);
//	FadePlayerScreen(playerid, COLOR_BLACK, 8, false, false);
	InterpolateCameraPos(playerid, LoginCameraPos[PlayerInfo[playerid][pCamera]][0], LoginCameraPos[PlayerInfo[playerid][pCamera]][1], LoginCameraPos[PlayerInfo[playerid][pCamera]][2], LoginCameraPos[PlayerInfo[playerid][pCamera]][3], LoginCameraPos[PlayerInfo[playerid][pCamera]][4], LoginCameraPos[PlayerInfo[playerid][pCamera]][5], floatround(LoginCameraPos[PlayerInfo[playerid][pCamera]][6]), floatround(LoginCameraPos[PlayerInfo[playerid][pCamera]][7]));
	InterpolateCameraLookAt(playerid, LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][0], LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][1], LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][2], LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][3], LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][4], LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][5], floatround(LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][6]), floatround(LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][7]));
	TogglePlayerControllable(playerid, false);
	return true;
}

fpublic Sotetedjen(playerid)
	FadePlayerScreenToColor(playerid, COLOR_BLACK, 8, true);

public OnPlayerScreenFade(playerid, color, speed)
{
	return true;
}

public OnPlayerScreenColorFade(playerid, color, speed)
{
	if(PlayerInfo[playerid][pCamera] != -1)
		return FixPlayerCam(playerid);

	return true;
}

public OnPlayerFadeFlashed(playerid, color, speed)
{
	//SendClientMessage(playerid, -1, "Meghívódott! (3)");
	return true;
}

public OnPlayerRequestClass(playerid, classid)
{
    clearChat(playerid);
    
	if(IsPlayerNPC(playerid) || !IsPlayerConnected(playerid))
		return true;

	if(!IsHelyesNev(playerid))
	{
		SCM(playerid, COL_LRED, "Csak RolePlay névvel jöhetsz fel! Például: Magyar_Istvan");
		Kick(playerid);
		return false;
	}
	if(!NagyKezdobetusNev(playerid))
	{
		SCM(playerid, COL_LRED, "A neved nagybetûvel kell, hogy kezdõdjön!");
		Kick(playerid);
		return false;
	}
	if(!PlayerInfo[playerid][pbelepve])
    {
		TogglePlayerSpectating(playerid, true);
		PlayerTimers[playerid][HATTER_VALTOZTATAS] = defer FixPlayerCam[1000](playerid);

		nformat(qrq, 256, "SELECT * FROM `"#MYSQL_BAN_TABLA"` WHERE Cim = '%s' OR Cim = '%s'", JatekosNev(playerid), JatekosIP(playerid));
		mysql_tquery(sql_ID, qrq, "BanCheck", "di", playerid, 0);
	}
	return true;
}

public OnPlayerDisconnect(playerid, reason)
{
	ASCleanup(playerid);
	new i = NINCS;
	
	/*foreach(Reportok, rid)
	{
	    if(g_Reportok[rid][rKuldo] != playerid) continue;
     	g_Reportok[rid][rVan] = false;
      	g_Reportok[rid][rIdo] = 0;
      	Iter_Remove(Reportok, rid);
	}
	TogTextDraw(playerid, PTD_REPORT, false, false);*/
	
    for(;++i != sizeof(PlayerTimers[]);)
		stop PlayerTimers[playerid][e_pTimers:i];
		
    if(iPhoneCallStatus[playerid] == 2)
	{
	    iPhoneCallStatus[callto[playerid]] = 0;
        iPhoneStatus[callto[playerid]] = 0;
        iPhoneHivo[ callto[playerid] ] = false;
        
		loop(0, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone][PHONE]);
	    loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(callto[playerid], g_PlayerTextDraw[ callto[playerid] ][ptd_iPhone][PPHONE]);
	    PlayerTextDrawHide(callto[playerid], g_PlayerTextDraw[ callto[playerid] ][ptd_iPhone_Call]);
     	TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone_CallYesNo][0]);
		TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone_CallYesNo][1]);

		SendClientMessage(callto[playerid], -1, "Nincs válasz... (( Kilépett ))");
        callto[callto[playerid]] = 0;
        
        
	}
	else if(iPhoneCallStatus[playerid] == 3)
	{
		iPhoneCallStatus[ callto[playerid] ] = 0;
        iPhoneStatus[ callto[playerid] ] = 0;
        iPhoneHivo[ callto[playerid] ] = false;
        
		loop(0, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone][PHONE]);
	    loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(callto[playerid], g_PlayerTextDraw[ callto[playerid] ][ptd_iPhone][PPHONE]);
	    PlayerTextDrawHide(callto[playerid], g_PlayerTextDraw[ callto[playerid] ][ptd_iPhone_Call]);
     	TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone_CallYesNo][0]);
		TextDrawHideForPlayer(callto[playerid], g_TextDraw[td_iPhone_CallYesNo][1]);

		SendClientMessage(callto[playerid], -1, "A telefont lerakták. (( Kilépett ))");
        callto[callto[playerid]] = 0;
	}
    var1[playerid] = "";
    var2[playerid] = "";
    called[playerid] = "";
    callto[playerid] = 0;
    DeletePVar(playerid,"tovar");
    iPhoneStatus[playerid] = 0;
    iPhone_CC[0][playerid] = 0;
	iPhone_CC[1][playerid] = 0;
	iPhone_CC[2][playerid] = 0;
	iPhone_CC[3][playerid] = 0;
    DestroyPlayerIphone(playerid);
    stop PlayerTimers[playerid][PT_OPUP];
	if(!ServerInfo[sRestart] && PlayerInfo[playerid][pbelepve] && !IsPlayerNPC(playerid))
	{
		if(HifiObjectLerakas[playerid] != -1)
		{
			DestroyDynamicObject(HifiObjectLerakas[playerid]);
		}
		if(GraffitiObjectLerakas[playerid] != NINCS)
		{
			DestroyDynamicObject(GraffitiObjectLerakas[playerid]);
		}
		if(PlayerInfo[playerid][pBilincselve] != 0)
		{
			PlayerInfo[playerid][pjail] = 3;
			PlayerInfo[playerid][pJailIdo] = (60 * 120);
			BortonInfo(playerid, "Rendszer", (format(uzenet, sizeof(uzenet), "Kilépés %s", "Bilincsben"), uzenet));
		}
		if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] ))
		{
			DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
			PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
		}
		if(PlayerInfo[playerid][pjail] == 2)
		{
			if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] ))
			{
				DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
				PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
			}
		}
		AdatMentes( playerid );
		doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pUtoljara = '%d', pOnline = '0' WHERE id = '%d'", gettime(), PlayerInfo[playerid][pID]);
		PlayerInfo[playerid][pbelepve] = false;
		if(Admin(playerid, 1)) Iter_Remove(Adminok, playerid);
		if(IsAS(playerid)) Iter_Remove(ASek, playerid);
		
		if(AFKDialogShowing[playerid] != 0)
		{
			stop PlayerTimers[playerid][PT_AFK];
		}

		if(Utzarak[playerid][uVan])
		{
			DestroyDynamicObject(Utzarak[playerid][uObject]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][0]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][1]);
			DestroyDynamic3DTextLabel(Utzarak[playerid][uText]);
			Utzarak[playerid][uVan] = false;
			Utzarak[playerid][uTipus] = 0;
			Utzarak[playerid][uPickup] = {NINCS, NINCS, NINCS, NINCS};
			Streamer_Update(playerid);
		}

		/*------------- [ Kilépés információk ] -------------*/
		new tav, egyeb[64];
		if(PlayerInfo[playerid][pLeutve] != 0)
			egyeb = "Leütve";
		if(PlayerInfo[playerid][pBilincselve] != 0)
			egyeb = "Bilincsben";
		if(PlayerInfo[playerid][pAnimban][0] == 1) {
			if(!strlen(egyeb)) egyeb = "Animban";
			else format(egyeb, sizeof(egyeb), "%s ,animban", egyeb);
		}
		else if(!strlen(egyeb)) egyeb = "Nincs";

		nformat(str, 128, "%s (%s)", egyeb, (reason == 0 ? ("Crash") : (reason == 1 ? ("Kilépés") : ("Kick/Ban"))));
		Kapcsolodasok(playerid, 3, str);

		foreach(Player, p)
		{
			if(!Belepve(p) || IsPlayerNPC(p) || playerid == p) continue;
			tav = floatround(GetPlayerDistanceFromPlayer(playerid, p));
			if(tav <= 50 && tav >= 0.1)
			{
				switch(reason)
				{
					case 0: SendFormatMessage(p, COLOR_WHITE, "(( %s crashelt a közeledben, távolság: %dm, egyéb: %s ))", JatekosNev(playerid, true), tav, egyeb);
					case 1: SendFormatMessage(p, COLOR_WHITE, "(( %s kilépett a közeledben, távolság: %dm, egyéb: %s ))", JatekosNev(playerid, true), tav, egyeb);
					case 2: SendFormatMessage(p, COLOR_WHITE, "(( %s kickelve vagy banolva lett a közeledben, távolság: %dm, egyéb: %s ))", JatekosNev(playerid, true), tav, egyeb);
				}
			}
		}

		if(Utzarak[playerid][uVan])
			MuveletTimer(playerid, T_UTZAR, NINCS, NINCS);
		/*------------- [ Kilépés információk vége ] -------------*/
	}
	if(PlayerInfo[playerid][pTV][2] != NINCS && IsPlayerConnected( PlayerInfo[playerid][pTV][2] ) && PlayerInfo[ PlayerInfo[playerid][pTV][2] ][pTV][0] == playerid)
	{
	    new pid = PlayerInfo[playerid][pTV][2];
		SCM(pid, COL_LRED, "A megfigyelt fél lelépett a szerverrõl ezért a rendszer visszarakott az eredeti pozíciódra!");
		
		PlayerInfo[playerid][pTV][2] = NINCS;
		PlayerInfo[pid][pTV][0] = NINCS;
        TogglePlayerSpectating(pid, 0);

		if(PlayerInfo[pid][pinterior] != 0 || PlayerInfo[pid][pvirtualworld] != 0)
			Freeze(pid, 3000);
		else
			Freeze(pid, 1000);

		SetPlayerPos(pid, PlayerInfo[pid][posx], PlayerInfo[pid][posy], PlayerInfo[pid][posz]);
		SetInterior(pid, PlayerInfo[pid][pinterior]);
		SetVirtualWorld(pid, PlayerInfo[pid][pvirtualworld]);
		ShowInfoTextDraw(pid);
	}

    i = NINCS;
	for(;++i < MAX_PLAYER_ATTACHED_OBJECTS;)
		if(IsPlayerAttachedObjectSlotUsed(playerid, i))
			RemovePlayerAttachedObject(playerid, i);

	if(PlayerInfo[playerid][pBereltJarmu])
	{
		vInfo[ PlayerInfo[playerid][pBereltJarmu] ][vBerelt] = false;
		SetVehicleToRespawn(vInfo[ PlayerInfo[playerid][pBereltJarmu] ][vID]);
		PlayerInfo[playerid][pBereltJarmu] = 0;
	}

	if(ServerInfo[sPaintBall][1] == playerid)
		ServerInfo[sPaintBall][1] = INVALID_PLAYER_ID;

	PlayerInfo[playerid][pVisz] = NINCS;
	PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_Penz]);
	PlayerTextDrawDestroy(playerid, g_PlayerTextDraw[playerid][ptd_Adatok]);

	if(PlayerInfo[playerid][pTaxioraMegy])
 	{
		stop PlayerTimers[playerid][PT_TAXIORA];
		PlayerInfo[playerid][pTaxioraMegy] = false;
	}
	StopAudioStreamForPlayer(playerid);

	if((ServerInfo[sHarcVan] != NINCS) && (GetPlayerVirtualWorld(playerid) == WAR_VW))
		HarcKieses(playerid, "Kilépett");


	if(PlayerInfo[playerid][pSMkocsi] == 1)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    DestroyVehicle(vehicleid);
	    SCM(playerid,COL_MKEK,"Kiszálltál, ezért a kocsi törlõdött.");
		SetPlayerDrunkLevel(playerid, 0);
		PlayerInfo[playerid][pSMkocsi] = 0;
		if(!IsPlayerInAnyVehicle(playerid))
			ClearAnimations(playerid);
	}

	/*---------------------- Streamer off ----------------------*/
	Felirat( playerid, false );//IDK

	i = NINCS;
	if(PlayerInfo[playerid][pTuzMutat]) {
		for(;++i < TUZ_MAX_POZ;)
		{
			if(TuzPoz[i][tPoz][0] != 0.0 && TuzPoz[i][tMapID] && Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[i][tMapID], E_STREAMER_PLAYER_ID, playerid) )
				Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[i][tMapID], E_STREAMER_PLAYER_ID, playerid);
		}
	}

	i = NINCS;
	if(ServerInfo[sTuzVan] && PlayerInfo[playerid][pFrakcio] == FRAKCIO_LAFD) {
		for(;++i < TUZ_MAX;)
		{
			if(Tuz[i][tuzAktiv] && Streamer_IsInArrayData(STREAMER_TYPE_MAP_ICON, Tuz[i][tMap], E_STREAMER_PLAYER_ID, playerid))
				Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, Tuz[i][tMap], E_STREAMER_PLAYER_ID, playerid);
		}
	}

	i = NINCS;
	for(;++i < MAX_BOJA;)
	{
		if(Bojak[playerid][i][boposx] != 0.0)
		{
			DestroyDynamicObject( Bojak[playerid][i][boObj] );
			Bojak[playerid][i][boposx] = 0.0;
			Bojak[playerid][i][boposy] = 0.0;
			Bojak[playerid][i][boposz] = 0.0;
			Bojak[playerid][i][boObj] = INVALID_OBJECT_ID;
		}
	}

	if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pDutyText] )) {
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pDutyText]);
		PlayerInfo[playerid][pDutyText] = INVALID_3D_TEXT_ID;
	}
	if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pASDutyText] )) {
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pASDutyText]);
		PlayerInfo[playerid][pASDutyText] = INVALID_3D_TEXT_ID;
	}

	if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] )) {
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
		PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
	}

	//if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pAFK_text] )) {
	DestroyDynamic3DTextLabel(PlayerInfo[playerid][pAFK_text]);
	PlayerInfo[playerid][pAFK_text] = INVALID_3D_TEXT_ID;
	//}

	if(CurrentCCTV[playerid] > -1)
	{
	    stop PlayerTimers[playerid][PT_OPUP];
		CurrentCCTV[playerid] = -1;
	}

	if(PlayerInfo[playerid][pGazmaszk] > 0 && PlayerInfo[playerid][pSWAT] > 0)
	{
		PlayerInfo[playerid][pGazmaszk] = 0;
	}

	//Progressbar-ok törlése
	if(EhsegBar[playerid] != INVALID_PLAYER_BAR_ID)
	{
		DestroyPlayerProgressBar(playerid, EhsegBar[playerid]);
		EhsegBar[playerid] = INVALID_PLAYER_BAR_ID;
	}
	if(VizeletBar[playerid] != INVALID_PLAYER_BAR_ID)
	{
		DestroyPlayerProgressBar(playerid, VizeletBar[playerid]);
		VizeletBar[playerid] = INVALID_PLAYER_BAR_ID;
	}
	if(BanyaBar[playerid] != INVALID_PLAYER_BAR_ID)
	{
	    if(BanyaBarTimerStat[playerid])
			stop BanyaBarTimer[playerid];
						
	    DestroyPlayerProgressBar(playerid, VizeletBar[playerid]);
		BanyaBar[playerid] = INVALID_PLAYER_BAR_ID;
	}
	/*---------------------- Streamer off vége ----------------------*/

	ValtozokNullazasa(playerid);//vnull
    return true;
}

stock AdminLogEx(mit[])
Log(FILE_ADMIN, mit);

stock Log(hova[], mit[])
{
	new fajl[64];
	if(!fexist((format(fajl, sizeof(fajl), "Logok/%s", hova), fajl)))
	{
		printf("Szerver: LOG hiba - %s mappa nem található!", hova);
		return true;
	}

    new y, m, d, ora, p, mp, entry[2048];
	getdate(y, m, d);
	gettime(ora, p, mp);

    format(fajl, sizeof(fajl), "Logok/%s/%02d-%02d-%02d.log", hova, y, m, d);
	format(entry, sizeof(entry), "[%02d:%02d:%02d] %s\n", ora, p, mp, mit);

	new File:hFile;
	fclose(((hFile = fopen(fajl, io_append)), fwrite(hFile, entry), hFile));
	return true;
}

stock Kapcsolodasok(pid, akcio, egyeb[] = "Nincs")
{
	new str[128];
	if(akcio == 1)
	{
	    format(str, sizeof(str), "[IP: %s][%d] %s csatlakozott | Egyéb: %s", JatekosIP(pid), pid, JatekosNev(pid), egyeb);
	}
	else if(akcio == 2)
	{
	    format(str, sizeof(str), "[IP: %s][%d] %s belépett - uID: %d - BID: %d| Egyéb: %s", JatekosIP(pid), pid, PlayerInfo[pid][pNev], PlayerInfo[pid][pID], PlayerInfo[pid][pBID], egyeb);

		if(ServerInfo[sAka])
		{
			nformat(sql, 128, "SELECT Uid FROM `"#MYSQL_AKA_SYSTEM"` WHERE IP='%s' LIMIT 3", JatekosIP(pid));
			mysql_tquery(sql_ID, sql, "AkaMuvelet", "ddd", pid, -1, 1);
		}
	}
    else if(akcio == 3)
	{
		format(str, sizeof(str), "[IP: %s][%d] %s kilépett [UID: %d] | Egyéb: %s", PlayerInfo[pid][pIP], pid, PlayerInfo[pid][pNev], PlayerInfo[pid][pID], egyeb);
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Kilepes')", JatekosNev(pid), PosExt(date), time[0], time[1]);
	}
	Log(FILE_KAPCS, str);
	return true;
}

stock NemVizsgalat(nemid)
{
	new nem[10];
	switch(nemid)
	{
		case 1: format(nem, 10, "Férfi");
		case 2: format(nem, 10, "Nõ");
		default: format(nem, 10, "N/A");
	}
	return nem;
}

stock Szarmazas(szarmazasid)
{
	new szarmazas[10];
	switch(szarmazasid)
	{
		case 1: format(szarmazas, 10, "USA");
		case 2: format(szarmazas, 10, "Európa");
		case 3: format(szarmazas, 10, "Ázsia");
		default: format(szarmazas, 10, "N/A");
	}
	return szarmazas;
}

public OnRconCommand(cmd[])
{
	printf("Ezt írtad be: %s", cmd);
	/*if(!strcmp(cmd, "givebankm", .length = strlen("givebankm")))
	{
	    new player, osszeg;
	    sscanf(cmd, "{s[24]}ud", player, osszeg);
	    printf("Játékos: %d", player);
	    printf("Összeg: %d", osszeg);
	    return true;
	}*/
	return true;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	if(areaid == Area[A51] && Bejelzett[playerid] < 1)
	{
		if(!RendvedelmiFrakcioTag(playerid) && !PlayerInfo[playerid][pAduty] && !PlayerInfo[playerid][pASduty] && !IsHitman(playerid))
		{
			Bejelzett[playerid]+=300;
			foreach(Player, x)
			{
				if(RendvedelmiFrakcioTag(x))
				{
					FrakcioUzenet(COLOR_PIROS, FRAKCIO_KATONA, "[Figyelem]:{FFFFFF} Az illetéktelen behatolás az 51-es körzetbe!.");
					SetPlayerMarkerForPlayer(x, playerid, COLOR_PIROS);
				}
			}
		}
	}
	if(areaid == Area[Favago] && IsJob(playerid, MUNKA_FAVAGO))
	{
		SCM(playerid,COL_VZOLD,"Beléptél a favágó zónába! Vedd fel a láncfûrészt! /munka kezd");
		SetPlayerCheckpoint(playerid, 1547.141, 13.851, 24.140, 5.0);
	}
	return true;
}
public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new i = NINCS;
	if(areaid == Area[A51] && Bejelzett[playerid] < 1)
	{
		if(!RendvedelmiFrakcioTag(playerid) && !PlayerInfo[playerid][pAduty] && !PlayerInfo[playerid][pASduty] && !IsHitman(playerid))
		{
			foreach(Player, x)
			{
				if(RendvedelmiFrakcioTag(x))
				{
					FrakcioUzenet(COLOR_PIROS, FRAKCIO_KATONA, "[Figyelem]:{FFFFFF} Az illetéktelen behatoló elhagyta a(z) A51 területét.");
				}
			}
		}
	}
	if(areaid == Area[Favago] && IsJob(playerid, MUNKA_FAVAGO) && PlayerInfo[playerid][pFegyverek][1] == 9)
	{
		SCM(playerid,COL_VZOLD,"Kiléptél a favágó zónából ezért a láncfûrészed elvéve!");
		PlayerInfo[playerid][pFegyverek][1] = 0;
		
		Fegyver(playerid, false);
	}
	for(;++i < sizeof(BoltBot);)
	{
		if(BoltRablas[i][npcArea] == areaid)
		{
			if(BoltRablas[i][npcKicsoda] == playerid)
			{
				if(BoltRablas[i][npcSikerult] && BoltRablas[i][npcFolyamatban])
				{
					SCM(playerid, COL_MKEK, "A boltrablás megszakadt!");
					stop BoltRablas[i][npcTimer];
				}
				PlayerInfo[playerid][pRabolhat] = NINCS;
				BoltRablas[i][npcAnim] = false;
				BoltRablas[i][npcRabolas] = false;

				if(!BoltRablas[i][npcSikerult])
					BoltRablas[i][npcRabolva] = (gettime() + (90 * 60));

				ClearAnimations(BoltRablas[i][npcID]);

				if(!BoltRablas[i][npcFolyamatban] && BoltRablas[i][npcHivhat])
				{
					if(i >= sizeof(Boltok))
						i = (sizeof(Boltok) - 1);

					if(!PlayerInfo[ BoltRablas[i][npcKicsoda] ][pMaszkVisel])
						Korozes_Kiad(BoltRablas[i][npcKicsoda], i, "Bolt rablás", NINCS);

					BoltRablas[i][npcHivhat] = false;
				}

				BoltRablas[i][npcKicsoda] = -1;
				BoltRablas[i][npcFolyamatban] = false;
			}
			break;
		}
	}
	return true;
}

timer BoltRab[1000](playerid, npcid)
{
	BoltRablas[npcid][npcAnim] = false;
	BoltRablas[npcid][npcFolyamatban] = false;
	BoltRablas[npcid][npcKicsoda] = -1;
	BoltRablas[npcid][npcRabolva] = (gettime() + (90 * 60));

	//ClearAnimations(BoltRablas[npcid][npcID]);*/

	new Float:po[3];

	po[0] = BoltBot[npcid][bBotPosX];
	po[1] = BoltBot[npcid][bBotPosY];
	po[2] = BoltBot[npcid][bBotA];
	GetXYInFrontOfPoint(po[0], po[1], po[2], 2.0);

	BoltRablas[npcid][npcPenz] = CreateDynamicPickup(PENZOBJECT, 23, po[0], po[1], BoltBot[npcid][bBotPosZ], .playerid = playerid);
	format(uzenet, sizeof(uzenet), "Kiszolgáló mondja: Tessék itt a pénze! Kérem hagyjon!");
	ProxDetector(15.0, BoltRablas[npcid][npcID], uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, false, true);
	Streamer_Update(playerid);
	return true;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{
	    case DIALOG_NYUGTA:
	    {
	        Cselekves(playerid, "elrakta a nyugtát a zsebébe");
	    }
		case DIALOG_BOMBA:
		{
			if(!response) return 1;
			if(BombaLerakva[playerid] == NINCS) return 1;
			switch(listitem)
			{
				case 0:
				{
					BombaRobbant(playerid, BombaLerakva[playerid]);
				}
				case 1:
				{
					g_Bomba[ BombaLerakva[playerid] ][bIdo] = 5;
					g_Bomba[ BombaLerakva[playerid] ][bRobbantja] = playerid;
					
					SCM(playerid, COL_VZOLD,"Idõzítõ beállítva! - 5 másodperc múlva robban a bomba");
					Cselekves(playerid, "beállította az idõzítõt a detonátoron...");
				}
				case 2:
				{
					g_Bomba[ BombaLerakva[playerid] ][bIdo] = 10;
					g_Bomba[ BombaLerakva[playerid] ][bRobbantja] = playerid;
					
					SCM(playerid, COL_VZOLD,"Idõzítõ beállítva! - 10 másodperc múlva robban a bomba");
					Cselekves(playerid, "beállította az idõzítõt a detonátoron...");
				}
				case 3:
				{
					g_Bomba[ BombaLerakva[playerid] ][bIdo] = 15;
					g_Bomba[ BombaLerakva[playerid] ][bRobbantja] = playerid;
					
					SCM(playerid, COL_VZOLD,"Idõzítõ beállítva! - 15 másodperc múlva robban a bomba");
					Cselekves(playerid, "beállította az idõzítõt a detonátoron...");
				}
				case 4:
				{
					g_Bomba[ BombaLerakva[playerid] ][bIdo] = 30;
					g_Bomba[ BombaLerakva[playerid] ][bRobbantja] = playerid;
					
					SCM(playerid, COL_VZOLD,"Idõzítõ beállítva! - 30 másodperc múlva robban a bomba");
					Cselekves(playerid, "beállította az idõzítõt a detonátoron...");
				}
				case 5:
				{
					g_Bomba[ BombaLerakva[playerid] ][bIdo] = 60;
					g_Bomba[ BombaLerakva[playerid] ][bRobbantja] = playerid;
					
					SCM(playerid, COL_VZOLD,"Idõzítõ beállítva! - 60 másodperc múlva robban a bomba");
					Cselekves(playerid, "beállította az idõzítõt a detonátoron...");
				}
			}
			return true;
		}
		case DIALOG_SMS:
		{
		    if(response)
		    {
		        new Vantalalat;
		        
		        SMSSzama[playerid] =  strlen(inputtext);
                foreach(Player, i)
				{
				    if(SMSSzama[playerid] == PlayerInfo[i][pCuccok][BL_TELEFON])
				    {
				        Vantalalat = 1;
					}
				}
				if(Vantalalat == 0)
				{
				    ShowPlayerDialog(playerid,DIALOG_NINCS,DIALOG_STYLE_MSGBOX,"SMS","Ez a telefonszám nem elérhetõ..","Bezárás","");
				}
				else if(Vantalalat == 1)
				{
				    ShowPlayerDialog(playerid,DIALOG_SMSs,DIALOG_STYLE_INPUT,"SMS,","SMS Szövege","Mehet","Mégse");
				}
			}
			return true;
		}
				
		        
		case DIALOG_HITMAN:
		{
			if(response)
			{
				if(PlayerInfo[playerid][ppenz] < HitmanFegyverek[listitem][3][0])
				{
					SFM(playerid,COL_LRED,"%d$ba kerül ez a cucc!",HitmanFegyverek[listitem][3][0]);
					return 1;
				}
				if(HitmanFegyverek[listitem][1][0] > 0 && SameWeaponSlot(PlayerInfo[playerid][pFegyverek][aWeaponSlotok[ HitmanFegyverek[listitem][1][0] ]], HitmanFegyverek[listitem][1][0]) && PlayerInfo[playerid][pMegerosites] != playerid)
				{
					SCM(playerid, COL_LRED, "Ezen a sloton már van fegyvered! Biztos, hogy felül akarod írni? Ha igen válaszd ki megint az adott fegyvert!");
					PlayerInfo[playerid][pMegerosites] = playerid;
					return true;
				}
				switch(HitmanFegyverek[listitem][1][0])
				{
					case -1:	{	SFM(playerid, COL_VZOLD, "Sikeresen rendeltél egy Golyóálló mellényt "#COL_MKEK"%s"#COL_FEHER"$-ért!", FN(HitmanFegyverek[listitem][3][0], 0, ',')); PlayerInfo[playerid][pRendelese] = 1; }
					case -2:	{	SFM(playerid, COL_VZOLD, "Sikeresen rendeltél egy Mérgezõ töltetet "#COL_MKEK"%s"#COL_FEHER"$-ért!", FN(HitmanFegyverek[listitem][3][0], 0, ',')); PlayerInfo[playerid][pRendelese] = 2; }
					default:
					{
						SFM(playerid, COL_VZOLD, "Sikeresen megrendelted a kõvetkezõ fegyvert: "#COL_MKEK"%s", HitmanFegyverek[listitem][0]);
						SFM(playerid, COL_VZOLD, "Ára: "#COL_MKEK"%s"#COL_FEHER"$. Töltényszám: "#COL_MKEK"%d"#COL_FEHER"db", FN(HitmanFegyverek[listitem][3][0], 0, ','), HitmanFegyverek[listitem][2][0]);
						PlayerInfo[playerid][pRendelese] = listitem;
					}
				}
				new Float:RendelesCP[1][3] =
				{
				//	{2233.4265,-2283.2390,14.3751},
				//	{2124.8967,-2271.8970,14.7835},
					{2179.4214,-2249.5559,20.6746}
				};
				new xyz = random(sizeof(RendelesCP));
				SetPlayerCheckpoint(playerid, PosExt(RendelesCP[xyz]), 5.0);
				GiveMoney(playerid,-HitmanFegyverek[listitem][3][0]);
				PlayerInfo[playerid][pRendelesPoz][0] = RendelesCP[xyz][0];
				PlayerInfo[playerid][pRendelesPoz][1] = RendelesCP[xyz][1];
				PlayerInfo[playerid][pRendelesPoz][2] = RendelesCP[xyz][2];
				PlayerInfo[playerid][pMegerosites] = NINCS;
				SCM(playerid,COL_MKEK,"A rendelésed felveheted a megfelelõ helyen!");
			}
			return 1;
		}
		case DIALOG_PDA:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(PlayerInfo[playerid][prang] < PDA[listitem][0][0]) { SFM(playerid,COL_LRED,"Rang %d szükséges!",PDA[listitem][0]); HideDialog(playerid); PDAmuvelet[playerid] = NINCS; return true; }
						ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "Írja be a felfüggeszteni kívánt személy nevét.", "Felfüggeszt", "");
						PDAmuvelet[playerid] = 0; // Felfüggesztés
					}
					case 1:
					{
						if(PlayerInfo[playerid][prang] < PDA[listitem][0][0]) { SFM(playerid,COL_LRED,"Rang %d szükséges!",PDA[listitem][0]); HideDialog(playerid); PDAmuvelet[playerid] = NINCS; return true; }
						ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "Írja be a zárolni kívánt számlaszámot.", "Zárol", "");
						PDAmuvelet[playerid] = 1; // Bankszámla zárolás
					}
					case 2:
					{
						if(PlayerInfo[playerid][prang] < PDA[listitem][0][0]) { SFM(playerid,COL_LRED,"Rang %d szükséges!",PDA[listitem][0]); HideDialog(playerid); PDAmuvelet[playerid] = NINCS; return true; }
						ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "Írja be a feloldani kívánt számlaszámot.", "Felold", "");
						PDAmuvelet[playerid] = 2; // Bankszámla feloldás
					}
					case 3:
					{
						if(PlayerInfo[playerid][prang] < PDA[listitem][0][0]) { SFM(playerid,COL_LRED,"Rang %d szükséges!",PDA[listitem][0]); HideDialog(playerid); PDAmuvelet[playerid] = NINCS; return true; }
						ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "Írja be a rádiófrekvenciát. ((Frakció ID)).", "Lehallgat", "");
						PDAmuvelet[playerid] = 3; // Lehallgatás
					}
					case 4:
					{
						if(PlayerInfo[playerid][prang] < PDA[listitem][0][0]) { SFM(playerid,COL_LRED,"Rang %d szükséges!",PDA[listitem][0]); HideDialog(playerid); PDAmuvelet[playerid] = NINCS; return true; }
						ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "Adja meg a lehallgatandó telefonszámot!.", "Lehallgat", "");
						PDAmuvelet[playerid] =  4; // Lehallgatás
					}
					case 5:
					{
						if(PlayerInfo[playerid][prang] < PDA[listitem][0][0]) { SFM(playerid,COL_LRED,"Rang %d szükséges!",PDA[listitem][0]); HideDialog(playerid); PDAmuvelet[playerid] = NINCS; return true; }
						ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, ""#COL_SARGA"FBI "#COL_KEK"PDA", "Lehallgatás befejezve! (( Rádió / Telefon ))", "Bezár", "");
						PlayerInfo[playerid][pLehallgat] = NINCS;
						PlayerInfo[playerid][pTelotHallgat] = NINCS;
					}
					case 6:
					{
						if(PlayerInfo[playerid][prang] < PDA[listitem][0][0]) { SFM(playerid,COL_LRED,"Rang %d szükséges!",PDA[listitem][0]); HideDialog(playerid); PDAmuvelet[playerid] = NINCS; return true; }
						ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "Adja meg személy nevét", "Adatlekérés", "");
						PDAmuvelet[playerid] =  6; // Adatlekérés
					}
				}
			}
		}
		case DIALOG_PDA2:
		{
			if(response)
			{
				switch(PDAmuvelet[playerid])
				{
					case 0:
					{
						new jatekos;
						sscanf(inputtext,"u",jatekos);
						if(jatekos == INVALID_PLAYER_ID || !Belepve(jatekos) || IsPlayerNPC(jatekos))	return ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "A célszemély nincs az adatbázisban! Írja be a helyes nevet. "#COL_LRED"(( OFFLINE ))", "Felfüggeszt", "");
						if(FInfo[PlayerInfo[jatekos][pFrakcio]][fLegalis] != FK_REND && FInfo[PlayerInfo[jatekos][pFrakcio]][fLegalis] != FK_LEGAL) return ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "A célszemély nincs az adatbázisban! Írjon be helyes nevet. ((Nem legális frakcióba van))", "Felfüggeszt", "");
						if(jatekos == playerid)	{ SCM(playerid,COL_LRED,"Magadat?!"); HideDialog(playerid); PDAmuvelet[playerid] = NINCS; return true; }
						if(PlayerInfo[jatekos][pFrakcio] == FRAKCIO_FBI) { SCM(playerid,COL_LRED,"Saját frakciódból ne függessz már fel senkit.."); HideDialog(playerid); PDAmuvelet[playerid] = NINCS; return true; }
						PlayerInfo[jatekos][prang] = 0;
						PlayerInfo[jatekos][pFrakcio] = 0;
						PlayerInfo[jatekos][pDutySkin] = 0;
						PlayerInfo[jatekos][pLeader] = 0;
						PDAmuvelet[playerid] = NINCS;
						SendFormatMessageToAll(FEHER,"<< {1E90FF} %s felfüggesztve [FBI]-%s. által. {1E90FF} >>",JatekosNev(jatekos),JatekosNev(playerid,false,true));
						ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, ""#COL_SARGA"FBI "#COL_KEK"PDA", "A célszemély felfüggesztve.", "Bezár", "");
					}
					case 1:
					{
						new szam,  jatekos;
						sscanf(inputtext,"d",szam);
						jatekos = JatekosIDSzamlaszam(szam);
						if(jatekos == NINCS) return ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "A megadott számlaszám nem létezik. Írja be a helyes számlaszámot!", "Zárol", "");
						if(PlayerInfo[jatekos][pZarolva] == 1) return ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "A megadott számlaszám már zárolva van! Adjon meg másikat...", "Zárol", "");
						PlayerInfo[jatekos][pZarolva] = 1;
						SCM(jatekos,COL_SARG,"A(z) F.B.I. zárolta a bankszámlád!");
						ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, ""#COL_SARGA"FBI "#COL_KEK"PDA", "Számla zárolva!", "Bezár", "");
						PDAmuvelet[playerid] = NINCS;
					}
					case 2:
					{
						new szam,  jatekos;
						sscanf(inputtext,"d",szam);
						jatekos = JatekosIDSzamlaszam(szam);
						if(jatekos == NINCS) return ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "A megadott számlaszám nem létezik. Írja be a helyes számlaszámot!", "Zárol", "");
						if(PlayerInfo[jatekos][pZarolva] == 0) return ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "A megadott számlaszám nincs zárolva! Adjon meg másikat...", "Zárol", "");
						PlayerInfo[jatekos][pZarolva] = 0;
						SCM(jatekos,COL_SARG,"A(z) F.B.I. feloldotta a bankszámlád!");
						ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, ""#COL_SARGA"FBI "#COL_KEK"PDA", "Számla feloldva!", "Bezár", "");
						PDAmuvelet[playerid] = NINCS;
					}
					case 3:
					{
						new frakcioid;
						sscanf(inputtext,"d",frakcioid);
						if(frakcioid < 0 || frakcioid > MAX_FRAKCIO) return ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "A megadott frekvencia érvénytelen!"#COL_LRED"((Hibás frakció ID))", "Lehallgat", "");
						if(frakcioid == PlayerInfo[playerid][pFrakcio]) { SCM(playerid,COL_LRED,"Hülye vagy fiam? Saját frakciód rádióját akarod lehallgatni?!"); HideDialog(playerid); PDAmuvelet[playerid] = NINCS; return true; }
						PlayerInfo[playerid][pLehallgat] = frakcioid;
						SFM(playerid,COL_SARG,"Lehallgatás sikeres! Lehallgatott frekvencia: "#COL_LKEK"%s",FInfo[frakcioid][fNev]);
						PDAmuvelet[playerid] = NINCS;
					}
					case 4:
					{
						new telefonszam, jatekos;
						sscanf(inputtext,"d",telefonszam);
						jatekos = TeloszamToJatekos(telefonszam);
						if(jatekos == NINCS) return ShowPlayerDialog(playerid, DIALOG_PDA2, DIALOG_STYLE_INPUT, ""#COL_SARGA"FBI "#COL_KEK"PDA", "A megadott telefonszám érvénytelen!", "Lehallgat", "");
						if(telefonszam == PlayerInfo[playerid][pCuccok][BL_TELEFON]) { SCM(playerid,COL_LRED,"Hülye vagy fiam? Saját telefonod akarod lehallgatni?!"); HideDialog(playerid); PDAmuvelet[playerid] = NINCS; return true; }
						PlayerInfo[playerid][pTelotHallgat] = jatekos;
						SFM(playerid,COL_SARG,"Lehallgatás sikeres! Lehallgatott telefonszám: "#COL_LKEK"%d "#COL_FEHER" Célszemély: "#COL_LKEK"%s",telefonszam,JatekosNev(jatekos));
						PDAmuvelet[playerid] = NINCS;
					}
					case 6:
					{
					
					    new jatekos;
						sscanf(inputtext,"u",jatekos);
						
                        if(jatekos == INVALID_PLAYER_ID || !Belepve(jatekos))
							return NincsJatekos(playerid);
			
						SendFormatMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ %s adatai ]"#COL_FEHER" ===================", JatekosNev(jatekos, true));
						ShowStats(playerid, jatekos);
						
						PDAmuvelet[playerid] = NINCS;
					}
				}
			}
		}
		case DIALOG_ADMINNEV:
		{
		    if(response)
		    {
		        if(strlen(inputtext) >= MAX_PLAYER_NAME)
				{
				    ShowPlayerDialog(playerid, DIALOG_ADMINNEV, DIALOG_STYLE_INPUT, "Nincs beállítva adminnév", "{1E90FF}A beírt adminnév túl hosszú! Irj be egy rövidebbet:", "Beír", "");
				}
				else
				{
				    strmid(PlayerInfo[playerid][pAdminNev], inputtext, 0, MAX_PLAYER_NAME);
				    SCM(playerid,COL_MKEK,"Adminnév "#COL_VZOLD"beállítva!");
				}
		    }
		    else
		        ShowPlayerDialog(playerid, DIALOG_ADMINNEV, DIALOG_STYLE_INPUT, "Nincs beállítva adminnév", "{1E90FF}Írj be egy tetszõleges adminnevet:", "Beír", "");
		}
		case DIALOG_AZONOSITAS:
		{
			if(response)
			{
				if(egyezik(inputtext, AZONOSITJELSZO))
				{
					Fonok[playerid] = 1;
					SendClientMessage(playerid,LKEK,"[AC]: {FF6347}Azonosítás "#COL_VZOLD"sikeres!"); Belepett[playerid] = true;
					if(strlen(PlayerInfo[playerid][pAdminNev]) < 1)
					{
						ShowPlayerDialog(playerid, DIALOG_ADMINNEV, DIALOG_STYLE_INPUT, "Nincs beállítva adminnév", "{1E90FF}Írj be egy tetszõleges adminnevet:", "Beír", "");
					}
				}
				else
				{
					SendClientMessage(playerid,LKEK,"[AC]: {FF6347}Azonosítás "#COL_LRED"sikertelen!"); Kick(playerid);
 				}
			}
		}
		case DIALOG_MAIN:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0: ShowPlayerDialog(playerid,DIALOG_RANGE,DIALOG_STYLE_INPUT,"Add meg a radar hatáskörét","A hatáskör 5-20 közötti érték legyen","OK","");
						case 1:
						{
							new cam = GetClosestCamera(playerid);
							if(cam == -1) return SendClientMessage(playerid,COLOR_RED,"Nincs a közelben radar!");
							SendClientMessageEx(playerid,COLOR_GREEN,"sis","Legközelebbi radar ID-je: ",cam,".");
							SendFormatMessage(playerid, COLOR_GREEN, "Eddigi Bevétele: %d $", SpeedCameras[cam][_eddiggyujtott]);
						}
						case 2:
						{
							new cam = GetClosestCamera(playerid);
							if(cam == -1) return SendClientMessage(playerid,COLOR_RED,"Nincs a közelben radar!");
							SetPVarInt(playerid,"selected",cam);
							ShowPlayerDialog(playerid,DIALOG_EDIT,DIALOG_STYLE_LIST,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Szerkesztõ","Forgás változtatása\nHatáskör megváltoztatása\nSebesség limit\nBüntetési Összeg\nMPH mód kikapcsolása\nHozzáad/Töröl/3DText változtatása\n{FF1400}Radar törlése\n{FF1400}Fizetés\n{FF1400}Kilépés","OK","");
						}
						case 3:
						{
							new cam = GetClosestCamera(playerid);
							if(cam == -1) return SendClientMessage(playerid,COLOR_RED,"A közelben nincs radar");
							DestroySpeedCam(cam);
							SendClientMessage(playerid,COLOR_GREEN,"A radar törölve.");
							DeletePVar(playerid,"selected");
						}
						case 4:
						{
							for(new i = 0;i<loaded_cameras +1;i++)
							{
								if(SpeedCameras[i][_active] == true)
								{
									DestroySpeedCam(i);
								}
							}
							SendClientMessage(playerid,COLOR_GREEN,"Összes radar sikeresen törölve!");
						}
						case 5:
						{
							SCM(playerid,COL_MKEK, "Kiléptél a menübõl!");
						}
					}
				}
			}
			//======================================================
			//                  Making a speedcam
			//======================================================
			case DIALOG_RANGE:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_RANGE,DIALOG_STYLE_INPUT,"Add meg a radar hatáskörét","A hatáskör 5-20 közötti érték legyen","OK","");
					if(strval(inputtext) < 5 || strval(inputtext) > 20)
					{
						SCM(playerid,COL_MKEK, "5-20 között!");
						ShowPlayerDialog(playerid,DIALOG_RANGE,DIALOG_STYLE_INPUT,"Add meg a radar hatáskörét","A hatáskör 5-20 közötti érték legyen","OK","");
						return 1;
					}
					SetPVarInt(playerid,"range",strval(inputtext));
				}
			}
			case DIALOG_LIMIT:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_LIMIT,DIALOG_STYLE_INPUT,"Add neg a radar sebességlimitét","Kérlek írd be az értéket","OK","");
					SetPVarInt(playerid,"limit",strval(inputtext));
					ShowPlayerDialog(playerid,DIALOG_FINE,DIALOG_STYLE_INPUT,"Add meg a büntetés összegét","Kérlek add meg a büntetés összegét","OK","");
				}
			}
			case DIALOG_FINE:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_FINE,DIALOG_STYLE_INPUT,"Add meg a büntetés összegét","Kérlek add meg a büntetés összegét","OK","");
					if(strval(inputtext) > 100000)
					{
						SCM(playerid,COL_MKEK, "Max 100.000$");
						ShowPlayerDialog(playerid,DIALOG_FINE,DIALOG_STYLE_INPUT,"Add meg a büntetés összegét","Kérlek add meg a büntetés összegét","OK","");
						return 1;
					}
					SetPVarInt(playerid,"fine",strval(inputtext));
					new Float:x,Float:y,Float:z,Float:angle;
					GetPlayerPos(playerid,x,y,z);GetPlayerFacingAngle(playerid,angle);
					angle = angle + 180;if(angle > 360){angle = angle - 360;}
					new id = CreateSpeedCam(x,y,z -3,angle,GetPVarInt(playerid,"range"),GetPVarInt(playerid,"limit"),GetPVarInt(playerid,"fine"),CAMERA_USEMPH);
					SetPlayerPos(playerid,x,y+2,z);
					DeletePVar(playerid,"range");
					DeletePVar(playerid,"limit");
					DeletePVar(playerid,"fine");
					SetPVarInt(playerid,"selected",id);
					ShowPlayerDialog(playerid,DIALOG_EDIT,DIALOG_STYLE_LIST,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor","Irány\nHatókör\nSebességlimit\nBüntetés\nMPH mód\nHozzáad/Töröl/3DText megváltoztatása\n{FF1400}Radar törlése\n{FF1400}Pénz menete\n{FF1400}Kilépés","OK","");
				}
			}
			//======================================================
			//                  	Edit menu
			//======================================================
			case DIALOG_EDIT:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0: ShowPlayerDialog(playerid,DIALOG_EANGLE,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - Irány","Kérlek írd be az új irány értékét","OK","");
						case 1: ShowPlayerDialog(playerid,DIALOG_ERANGE,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - Hatókör","Kérlek írd be az új hatókör értékét","OK","");
						case 2: ShowPlayerDialog(playerid,DIALOG_ELIMIT,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - Sebességlimit","Kérlek írd be az új sebességlimit értékét","OK","");
						case 3: ShowPlayerDialog(playerid,DIALOG_EFINE,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - Büntetés","Kérlek add meg a büntetés értékét","OK","");
						case 4: ShowPlayerDialog(playerid,DIALOG_ETYPE,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - Mértékegység","MPH használatához írj 1-et, Kmh használatához 0-t","OK","");
						case 5: ShowPlayerDialog(playerid,DIALOG_LABEL,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - 3DText","Szöveg hozzáadásához töltsd ki a mezõt, meglévõ tartalom törléséhez hagyd üresen.","OK","");
						case 6:
						{
							DestroySpeedCam(GetPVarInt(playerid,"selected"));
							SendClientMessage(playerid,COLOR_GREEN,"Radar sikeresen törölve.");
							DeletePVar(playerid,"selected");
						}
						case 7:
						{
							new cam = GetClosestCamera(playerid);
							if(SpeedCameras[cam][_hovamenjen] == 0)
							{
								SpeedCameras[cam][_hovamenjen] = 1;
								SCM(playerid,COL_MKEK, "Mostmár másfele megy a pénz!");
								SaveCamera(cam);
								return 1;
							}
							if(SpeedCameras[cam][_hovamenjen] == 1)
							{
								SpeedCameras[cam][_hovamenjen] = 0;
								SCM(playerid,COL_MKEK, "Mostmár a széfbe megy a pénz!");
								SaveCamera(cam);
								return 1;
							}
						}
					}
				}
			}
			//======================================================
			//                 Editing a speedcam
			//======================================================
			case DIALOG_EANGLE:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_EANGLE,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - Irány","Kérlek add meg az új irány értékét","OK","");
					new id = GetPVarInt(playerid,"selected");
					new rot = strval(inputtext);
					rot = rot + 180;
					if (rot > 360)
					{
						rot = rot - 360;
					}
					SpeedCameras[id][_rot] = rot;
					SetDynamicObjectRot(SpeedCameras[id][_objectid],0,0,rot);
					SaveCamera(id);
					SendClientMessageEx(playerid,COLOR_GREEN,"sisis","irányán módosítva, RadarID: ",id," sikeresen frissítve ",strval(inputtext),".");
				}
			}
			case DIALOG_ERANGE:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_ERANGE,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - Hatókör","Kérlek add meg az új hatókör értékét","OK","");
					if(strval(inputtext) < 5 || strval(inputtext) > 20)
					{
						SCM(playerid,COL_MKEK, "5-20 között!");
						ShowPlayerDialog(playerid,DIALOG_ERANGE,DIALOG_STYLE_INPUT,"Add meg a radar hatáskörét","A hatáskör 5-20 közötti érték legyen","OK","");
						return 1;
					}
					new id = GetPVarInt(playerid,"selected");
					SpeedCameras[id][_range] = strval(inputtext);
					SaveCamera(id);
					SendClientMessageEx(playerid,COLOR_GREEN,"sisis","Hatókör módosítva, RadarID:",id," sikeresen frissítve ",strval(inputtext),".");
				}
			}
			case DIALOG_ELIMIT:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_ELIMIT,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - Sebességlimit","Kérlek add meg a sebességlmit értékét","OK","");
					new id = GetPVarInt(playerid,"selected");
					SpeedCameras[id][_limit] = strval(inputtext);
					SaveCamera(id);
					SendClientMessageEx(playerid,COLOR_GREEN,"sisis","Sebességlimit módosítva, RadarID: ",id,"sikeresen frissítve",strval(inputtext),".");
				}
			}
			case DIALOG_EFINE:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_EFINE,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - Büntetés","Kérlek add meg a büntetés értékét","OK","");
					if(strval(inputtext) > 100000)
					{
						SCM(playerid,COL_MKEK, "Max 100.000$!");
						ShowPlayerDialog(playerid,DIALOG_EFINE,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - Büntetés","Kérlek add meg a büntetés értékét","OK","");
						return 1;
					}
					new id = GetPVarInt(playerid,"selected");
					SpeedCameras[id][_fine] = strval(inputtext);
					SaveCamera(id);
					SendClientMessageEx(playerid,COLOR_GREEN,"sisis","The fine of cameraID ",GetPVarInt(playerid,"selected")," has succesfully been updated to ",strval(inputtext),".");
				}
			}
			case DIALOG_ETYPE:
			{
				if(response)
				{
					if(!strlen(inputtext) || strval(inputtext) != 0 && strval(inputtext) != 1) return ShowPlayerDialog(playerid,DIALOG_ETYPE,DIALOG_STYLE_INPUT,"{00A5FF}traffipax {FFFFFF}- {FFDC00}Editor - Mértékegység","MPH használatához írj 1-et, Kmh használatához 0-t","OK","");
					new id = GetPVarInt(playerid,"selected");
					SpeedCameras[id][_usemph] = strval(inputtext);
					if(strval(inputtext) == 1)
					{
						SendClientMessageEx(playerid,COLOR_GREEN,"sis","RadarID ",GetPVarInt(playerid,"selected")," most nem tudod átállítani MPH-ra");
					} else {
						SendClientMessageEx(playerid,COLOR_GREEN,"sis","RadarID ",GetPVarInt(playerid,"selected")," most nem tudod átállítani Kmh-ra");
					}
				}
			}
			case DIALOG_LABEL:
			{
				if(response)
				{
					new id = GetPVarInt(playerid,"selected");
					if(!strlen(inputtext))
					{
						if(SpeedCameras[id][_activelabel] == true)
						{
							DestroyDynamic3DTextLabel(SpeedCameras[id][_label]);
							SpeedCameras[id][_activelabel] = false;
							SpeedCameras[id][_labeltxt] = 0;
						}
						SendClientMessageEx(playerid,COLOR_GREEN,"sis","3DText módosítva, RadarID: ",GetPVarInt(playerid,"selected"),"tartalom sikeresen törölve");
					} else {
						if(SpeedCameras[id][_activelabel] == true)
						{
							format(SpeedCameras[id][_labeltxt],128,"%s",inputtext);
							UpdateCameraLabel(SpeedCameras[id][_label],inputtext);
						} else {
							SpeedCameras[id][_activelabel] = true;
							format(SpeedCameras[id][_labeltxt],128,"%s",inputtext);
							SpeedCameras[id][_label] = AttachLabelToCamera(id,inputtext);
						}
						SendClientMessageEx(playerid,COLOR_GREEN,"sisss","3DText módisítva, RadarID:",GetPVarInt(playerid,"selected"),"sikeresen átírva: ",inputtext,".");
					}
					SaveCamera(id);
				}
			}
		//traffipaxok dialog vége
		case DIALOG_NPCVASARLAS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"Dwayne Harrison mondja  Ja, simán. Tessék, szívjad csak.");
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
						new miniuzenet[64];
						format(miniuzenet,sizeof(miniuzenet),"* Dwayne Harrison odanyújt egy szál cigit a srácnak");
						ProxDetector(15.0, playerid, miniuzenet, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, false, true);
					}
					case 1:
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"Dwayne Harrison mondja: Ha szeretnéd adok egy pofont, na húzz a picsába!");
						new miniuzenet[64];
						format(miniuzenet,sizeof(miniuzenet),"* Dwayne Harrison megvonja a vállát, majd elnéz a másik irányba");
						ProxDetector(15.0, playerid, miniuzenet, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, false, true);
					}
					case 2:
					{
						SendClientMessage(playerid,COLOR_LIGHTRED,"Dwayne Harrison mondja: Ahogy mondod öreg, ahogy mondod. Figyelj, van itt pár cucc, ami segíthet rajtad.");
						new fegyvervasarlas[1024], tmp[128], b = NINCS;
						for(;++b < sizeof(FegyverIllegalisLista);)
						{
							format(tmp, sizeof(tmp), "\nNév: %s\tÁr: %d$", FegyverIllegalisLista[b][0],FegyverIllegalisLista[b][3][0]);
							strcat(fegyvervasarlas, tmp, sizeof(fegyvervasarlas));
						}
						ShowPlayerDialog(playerid, DIALOG_VASARLAS, DIALOG_STYLE_LIST, "Fegyverek",fegyvervasarlas, "Megvesz", "Mégse");
					}
				}
				return 1;
			}
			return 1;
		}
		case DIALOG_VASARLAS:
		{
			if(response)
			{
			    if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < FegyverIllegalisLista[listitem][3][0])	return SFM(playerid, COL_LRED, "Nincs nálad %s $ készpénz!",FN(FegyverIllegalisLista[listitem][3][0]));
				else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < FegyverIllegalisLista[listitem][3][0]) return SFM(playerid, COL_LRED,"Nincs %s $ a bankszámládon!",FN(FegyverIllegalisLista[listitem][3][0]));
	  			if(FegyverIllegalisLista[listitem][1][0] > 0 && SameWeaponSlot(PlayerInfo[playerid][pFegyverek][aWeaponSlotok[ FegyverIllegalisLista[listitem][1][0] ]], FegyverIllegalisLista[listitem][1][0]) && PlayerInfo[playerid][pMegerosites] != playerid)
				{
					SCM(playerid, COL_LRED, "Ezen a sloton már van fegyvered! Biztos, hogy felül akarod írni? Ha igen válaszd ki megint az adott fegyvert!");
					PlayerInfo[playerid][pMegerosites] = playerid;
					return true;
				}
				PlayerInfo[playerid][pMegerosites] = NINCS;
				switch(FegyverIllegalisLista[listitem][1][0])
				{
					case -1:	{ PlayerInfo[playerid][pCuccok][BL_C4]++;	SCM(playerid,COL_MKEK,"Sikeresen vettél egy bombát."); }
					case -2:
					{
						if(PlayerInfo[playerid][pTolvajKulcs]+2 > P_MAX_TK) return SCM(playerid,COL_LRED,"Nem fér el nálad több tolvajkulcs!");
				  		PlayerInfo[playerid][pTolvajKulcs]+= 2;
					 	SCM(playerid,COL_MKEK,"Sikeresen vettél egy tolvajkulcsot.");
					}
					default:
					{
						GiveWeapon(playerid,FegyverIllegalisLista[listitem][1][0],FegyverIllegalisLista[listitem][2][0]);
						SCM(playerid,COL_MKEK,"Sikeresen vettél egy fegyvert.");
					}
				}
				PlayerInfo[playerid][pNPCSzobaAll][0] += 1800;
				SCM(playerid,COL_LRED,"1800másodperc múlva vásárolhatsz újra fegyvert!");
				GiveMoney(playerid,-FegyverIllegalisLista[listitem][3][0]);
			}
			return 1;
		}
		case DIALOG_NINCS:
		{
			if(AFKDialogShowing[playerid] != 0)
			{
				if(response)
				{
					stop PlayerTimers[playerid][PT_AFK];
					AFKDialogShowing[playerid] = 0;
					CsomagtartoAFK[playerid] = 0;
					PlayerInfo[playerid][pAfkIdo] = 0;
					SCM(playerid,COL_LRED,"Rendben!");
					return 1;
				}
				else
				{
					stop PlayerTimers[playerid][PT_AFK];
					AFKDialogShowing[playerid] = 0;
					CsomagtartoAFK[playerid] = 0;
					PlayerInfo[playerid][pAfkIdo] = 0;
					SCM(playerid,COL_LRED,"Rendben!");
					return 1;
				}
			}
		}
		case DIALOG_OLTOZO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:{PlayerInfo[playerid][pDutySkin] = 71; SetSkin(playerid, 71, false);}
					case 1:{PlayerInfo[playerid][pDutySkin] = 265; SetSkin(playerid, 265, false);}
					case 2:{PlayerInfo[playerid][pDutySkin] = 266; SetSkin(playerid, 266, false);}
					case 3:{PlayerInfo[playerid][pDutySkin] = 267; SetSkin(playerid, 267, false);}
					case 4:{PlayerInfo[playerid][pDutySkin] = 280; SetSkin(playerid, 280, false);}
					case 5:{PlayerInfo[playerid][pDutySkin] = 281; SetSkin(playerid, 281, false);}
					case 6:{PlayerInfo[playerid][pDutySkin] = 282; SetSkin(playerid, 282, false);}
					case 7:{PlayerInfo[playerid][pDutySkin] = 283; SetSkin(playerid, 283, false);}
					case 8:{PlayerInfo[playerid][pDutySkin] = 284; SetSkin(playerid, 284, false);}
					case 9:{PlayerInfo[playerid][pDutySkin] = 288; SetSkin(playerid, 288, false);}
				}
				Cselekves(playerid,"átöltözött");
			}
		}
		case DIALOG_KERESKEDES_ACCEPT2:
		{
		    if(response)
		    {
		        if(PlayerInfo[playerid][ppenz] < k_ar)
				{
					KerValtozokNullazasa();
					return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
				}
		        else if(Adat_Num(playerid,ADAT_JARMU) >= 1) {
		            KerValtozokNullazasa();
					return SCM(playerid,COL_LRED,"Ezt a jármûvet te már csak Prémium slotra tudnád tenni, keress fel egy fõadmint.");
				}
                format(vInfo[k_veh][vTulaj], MAX_PLAYER_NAME, "%s",JatekosNev(playerid));
				vInfo[k_veh][vMunka] = 0;
				vInfo[k_veh][vTulajID] = PlayerInfo[playerid][pID];
				vUpdate(k_veh, vuTulaj, vuMunka);
				SFM(playerid,COL_MKEK,"Kereskedõ %s eladta a %d ID-jû jármûvet neked %d$-ért.",JatekosNev(k_kereskedo),k_veh,k_ar);
				SFM(k_kereskedo,COL_MKEK,"Eladtad a %d ID-jû jármûvet %s számára %d$-ért.",k_veh,JatekosNev(playerid),k_ar);
				CegInfo[BIZ_KERESKEDO][cKassza] += k_ar;
				PenzHozzaad(playerid,-k_ar);
				KerValtozokNullazasa();
		    }
		    else
		    {
		        SFM(playerid,COL_MKEK,"Visszautasítottad %s ajánlatát.",JatekosNev(k_kereskedo));
		        SFM(k_kereskedo,COL_MKEK,"%s visszautasította az ajánlatod.",JatekosNev(playerid));
		        KerValtozokNullazasa();
		    }
		}
        case DIALOG_KERESKEDES_ELAD:
		{
		    if(response)
		    {
		        new id;
		        new veh;
		        new ar;
			//	new vid = JarmuID(veh,playerid);
		        if(sscanf(inputtext,"p<,>udd",id,veh,ar)) return ShowPlayerDialog(playerid,DIALOG_KERESKEDES_ELAD,DIALOG_STYLE_INPUT,"Kereskedés - Eladás","Nem adtad meg jól az adatokat!\nSzintaxis: játékos,jármûID,ár","Mehet","Mégse");
		        else if(id == INVALID_PLAYER_ID) return ShowPlayerDialog(playerid,DIALOG_KERESKEDES_ELAD,DIALOG_STYLE_INPUT,"Kereskedés - Vétel","Nincs ilyen játékos!\nSzintaxis: játékos,jármûID,ár","Mehet","Mégse");
		        else if(!PlayerToPlayer(playerid,id,3)) return SCM(playerid,COL_LRED,"A játékos mellett kell állnod!");
				new vid = JarmuID(veh,playerid);
		    	//else if(vInfo[veh][vTulajID] != PlayerInfo[playerid][pID]) return SCM(playerid,COL_LRED,"Ez a jármû nem az övé.");
		    	if(vInfo[vid][vMunka] != 103) return SCM(playerid,COL_LRED,"Ezt nem adhatod el!");
		    	if(ar < 8000) return SCM(playerid,COL_LRED,"A minimum ár 8.000$");
		        else {
//					new vid = veh;
		            new msg[128];
		            format(msg,128,""#COL_FEHER"Modell: "#COL_MKEK"%s\n"#COL_FEHER"Rendszám: "#COL_MKEK"See-%d\n"#COL_FEHER"Ár: "#COL_MKEK"%d$",JarmuAdat[ vInfo[veh][vModel] - 400 ],veh,ar);
					ShowPlayerDialog(id,DIALOG_KERESKEDES_ACCEPT2,DIALOG_STYLE_MSGBOX,"Kereskedés - "#COL_MKEK"Vétel",msg,"Megveszem","Mégse");
					k_uzleteles = 1;
				//	k_elado = id;
					k_veh = vid;
					k_ar = ar;
					k_kereskedo = playerid;
		        }
		    }
		    return 1;
		}
		case DIALOG_KERESKEDES_ACCEPT:
		{
		    if(response)
		    {
                format(vInfo[k_veh][vTulaj], MAX_PLAYER_NAME, "Használtkereskedés");
				vInfo[k_veh][vMunka] = 103;
				vInfo[k_veh][vTulajID] = NINCS;
				vUpdate(k_veh, vuTulaj, vuMunka);
				SFM(playerid,COL_MKEK,"Kereskedõ %s megvette a %d ID-jû jármûvedet %d$ért.",JatekosNev(k_kereskedo),k_veh,k_ar);
				SFM(k_kereskedo,COL_MKEK,"Megvetted %s %d ID-jû jármûvét a kereskedésnek %d$ért.",JatekosNev(playerid),k_veh,k_ar);
				//CegInfo[BIZ_KERESKEDO][cKassza] -= k_ar;
				PlayerInfo[k_kereskedo][ppenz] -= k_ar;
				PenzHozzaad(playerid,k_ar);
				KerValtozokNullazasa();
		    }
		    else
		    {
		        SFM(playerid,COL_MKEK,"Visszautasítottad %s ajánlatát.",JatekosNev(k_kereskedo));
		        SFM(k_kereskedo,COL_MKEK,"%s visszautasította az ajánlatod.",JatekosNev(playerid));
		        KerValtozokNullazasa();
		    }
		}
		case DIALOG_KERESKEDES_VESZ:
		{
		    if(response)
		    {
		        new id;
		        new veh;
		        new ar;
		        if(sscanf(inputtext,"p<,>udd",id,veh,ar)) return ShowPlayerDialog(playerid,DIALOG_KERESKEDES_VESZ,DIALOG_STYLE_INPUT,"Kereskedés - Vétel","Nem adtad meg jól az adatokat!\nSzintaxis: játékos,jármûID,ár","Mehet","Mégse");
		        else if(id == INVALID_PLAYER_ID) return ShowPlayerDialog(playerid,DIALOG_KERESKEDES_VESZ,DIALOG_STYLE_INPUT,"Kereskedés - Vétel","Nincs ilyen játékos!\nSzintaxis: játékos,jármûID,ár","Mehet","Mégse");
		        else if(!PlayerToPlayer(playerid,id,3)) return SCM(playerid,COL_LRED,"A játékos mellett kell állnod!");
				new vid = JarmuID(veh,playerid);
		    	if(vInfo[vid][vTulajID] != PlayerInfo[id][pID]) return SCM(playerid,COL_LRED,"Ez a jármû nem az övé.");
		        else {
					//new vid = veh;
		            new msg[128];
		            format(msg,128,""#COL_FEHER"Modell: "#COL_MKEK"%s\n"#COL_FEHER"Rendszám: "#COL_MKEK"See-%d\n"#COL_FEHER"Ár: "#COL_MKEK"%d$",JarmuAdat[ vInfo[veh][vModel] - 400 ],veh,ar);
					ShowPlayerDialog(id,DIALOG_KERESKEDES_ACCEPT,DIALOG_STYLE_MSGBOX,"Kereskedés",msg,"Eladom","Mégse");
					k_uzleteles = 1;
					//k_elado = id;
					k_veh = vid;
					k_ar = ar;
					k_kereskedo = playerid;
		        }
		    }
		    return 1;
		}
		case DIALOG_DIVATBOLT_SZEMUVEG:
		{
			if(response)
			{
				new ara = (DivatBolt_SZEMUVEG[listitem][2][0]/235);
				if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < ara)	return SFM(playerid, COL_LRED, "Nincs nálad %s $ készpénz!",FN(ara));
				else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < ara) return SFM(playerid, COL_LRED,"Nincs %s $ a bankszámládon!",FN(ara));
				PenzHozzaad(playerid,-100);
				new objectid = DivatBolt_SZEMUVEG[listitem][3][0];
				new slotid = DivatBolt_SZEMUVEG[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_FEJKENDO:
		{
			if(response)
			{
				new ara = (DivatBolt_FEJKENDO[listitem][2][0]/235);
				if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < ara)	return SFM(playerid, COL_LRED, "Nincs nálad %s $ készpénz!",FN(ara));
				else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < ara) return SFM(playerid, COL_LRED,"Nincs %s $ a bankszámládon!",FN(ara));
				PenzHozzaad(playerid,-100);
				new objectid = DivatBolt_FEJKENDO[listitem][3][0];
				new slotid = DivatBolt_FEJKENDO[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_HOKIMASZK:
		{
			if(response)
			{
				new ara = DivatBolt_HOKIMASZK[listitem][2][0];
				if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < ara)	return SFM(playerid, COL_LRED, "Nincs nálad %s $ készpénz!",FN(ara));
				else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < ara) return SFM(playerid, COL_LRED,"Nincs %s $ a bankszámládon!",FN(ara));
				PenzHozzaad(playerid,-100);
				new objectid = DivatBolt_HOKIMASZK[listitem][3][0];
				new slotid = DivatBolt_HOKIMASZK[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_SVAJCISAPKA:
		{
			if(response)
			{
				new ara = (DivatBolt_SVAJCISAPKA[listitem][2][0]/235);
				if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < ara)	return SFM(playerid, COL_LRED, "Nincs nálad %s $ készpénz!",FN(ara));
				else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < ara) return SFM(playerid, COL_LRED,"Nincs %s $ a bankszámládon!",FN(ara));
				new objectid = DivatBolt_SVAJCISAPKA[listitem][3][0];
				new slotid = DivatBolt_SVAJCISAPKA[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				PenzHozzaad(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_BASEBALLSAPKA:
		{
			if(response)
			{
				new ara = (DivatBolt_BASEBALLSAPKA[listitem][2][0]/235);
				if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < ara)	return SFM(playerid, COL_LRED, "Nincs nálad %s $ készpénz!",FN(ara));
				else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < ara) return SFM(playerid, COL_LRED,"Nincs %s $ a bankszámládon!",FN(ara));
				new objectid = DivatBolt_BASEBALLSAPKA[listitem][3][0];
				new slotid = DivatBolt_BASEBALLSAPKA[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				PenzHozzaad(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_KALAP:
		{
			if(response)
			{
				new ara = (DivatBolt_KALAP[listitem][2][0]/235);
				if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < ara)	return SFM(playerid, COL_LRED, "Nincs nálad %s $ készpénz!",FN(ara));
				else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < ara) return SFM(playerid, COL_LRED,"Nincs %s $ a bankszámládon!",FN(ara));
				new objectid = DivatBolt_KALAP[listitem][3][0];
				new slotid = DivatBolt_KALAP[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				PenzHozzaad(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_SAPKA:
		{
			if(response)
			{
				new ara = (DivatBolt_SAPKA[listitem][2][0]/235);
				if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < ara)	return SFM(playerid, COL_LRED, "Nincs nálad %s $ készpénz!",FN(ara));
				else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < ara) return SFM(playerid, COL_LRED,"Nincs %s $ a bankszámládon!",FN(ara));
				new objectid = DivatBolt_SAPKA[listitem][3][0];
				new slotid = DivatBolt_SAPKA[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				PenzHozzaad(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_EDIT_2:
		{
			if(response)
			{
				if(listitem == 0)
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid,MitModosit[playerid]))
					{
						EditAttachedObject(playerid,MitModosit[playerid]);
						SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
						SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
					}
					else
						SCM(playerid,COL_MKEK,"Nincs mit módosítani!");
				}
				else if(listitem == 1)
				{
					RemovePlayerAttachedObject(playerid,MitModosit[playerid]);
					MitModosit[playerid] = NINCS;
				}
				else if(listitem == 2)
				{
					if(MitModosit[playerid] == SLOT_SAPKA)
					{
						DivatInfo[SLOT_SAPKA][playerid][dVan] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dPosX] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dPosY] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dPosZ] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dRotX] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dRotY] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dRotZ] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dScaleX] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dScaleY] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dScaleZ] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dmodelid] = 0;
					}
					else if(MitModosit[playerid] == SLOT_SZEMUVEG)
					{
						DivatInfo[SLOT_SZEMUVEG][playerid][dVan] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dPosX] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dPosY] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dPosZ] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dRotX] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dRotY] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dRotZ] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dScaleX] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dScaleY] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dScaleZ] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dmodelid] = 0;
					}
					else if(MitModosit[playerid] == SLOT_MASZK)
					{
						DivatInfo[SLOT_MASZK][playerid][dVan] = 0;
						DivatInfo[SLOT_MASZK][playerid][dPosX] = 0;
						DivatInfo[SLOT_MASZK][playerid][dPosY] = 0;
						DivatInfo[SLOT_MASZK][playerid][dPosZ] = 0;
						DivatInfo[SLOT_MASZK][playerid][dRotX] = 0;
						DivatInfo[SLOT_MASZK][playerid][dRotY] = 0;
						DivatInfo[SLOT_MASZK][playerid][dRotZ] = 0;
						DivatInfo[SLOT_MASZK][playerid][dScaleX] = 0;
						DivatInfo[SLOT_MASZK][playerid][dScaleY] = 0;
						DivatInfo[SLOT_MASZK][playerid][dScaleZ] = 0;
						DivatInfo[SLOT_MASZK][playerid][dmodelid] = 0;
					}
					RemovePlayerAttachedObject(playerid,MitModosit[playerid]);
					MitModosit[playerid] = NINCS;
				}
			}
			else
				MitModosit[playerid] = NINCS;
		}
		case DIALOG_DIVATBOLT_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: MitModosit[playerid] = SLOT_SAPKA;
					case 1: MitModosit[playerid] = SLOT_SZEMUVEG;
					case 2: MitModosit[playerid] = SLOT_MASZK;
				}
				ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_EDIT_2, DIALOG_STYLE_LIST, "Mit szeretnél?", "Módosítás\nElrejtes(Ideiglenes törles)\nEltávolítás", "Ok", "Mégse");
			}
			else
				MitModosit[playerid] = NINCS;
		}
		case DIALOG_DIVATBOLT_VALASZTAS:
		{
			if(response)
			{
				new string[1024];
				new cuccid = 0;
				switch(listitem)
				{
					case 0: //Szemüvegek
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_SZEMUVEG); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_SZEMUVEG[0][1], (DivatBolt_SZEMUVEG[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_SZEMUVEG[cuccid][1],(DivatBolt_SZEMUVEG[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_SZEMUVEG, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 1://Fejkendõk
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_FEJKENDO); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_FEJKENDO[0][1], (DivatBolt_FEJKENDO[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_FEJKENDO[cuccid][1],(DivatBolt_FEJKENDO[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_FEJKENDO, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 2://Svájci Sapkák
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_SVAJCISAPKA); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_SVAJCISAPKA[0][1], (DivatBolt_SVAJCISAPKA[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_SVAJCISAPKA[cuccid][1],(DivatBolt_SVAJCISAPKA[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_SVAJCISAPKA, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 3://Baseball sapkák
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_BASEBALLSAPKA); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_BASEBALLSAPKA[0][1], (DivatBolt_BASEBALLSAPKA[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_BASEBALLSAPKA[cuccid][1],(DivatBolt_BASEBALLSAPKA[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_BASEBALLSAPKA, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 4://Kalapok
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_KALAP); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_KALAP[0][1], (DivatBolt_KALAP[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_KALAP[cuccid][1],(DivatBolt_KALAP[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_KALAP, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 5://Sapkák
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_SAPKA); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_SAPKA[0][1], (DivatBolt_SAPKA[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_SAPKA[cuccid][1],(DivatBolt_SAPKA[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_SAPKA, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 6://Maszkok
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_HOKIMASZK); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_HOKIMASZK[0][1], DivatBolt_HOKIMASZK[0][2][0]);
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_HOKIMASZK[cuccid][1],DivatBolt_HOKIMASZK[cuccid][2][0]);
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_HOKIMASZK, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
				}
				return 1;
			}
		}
		case DIALOG_TUNING:
		{
		    if(!response)
		        return 1;
		    for(new i=0;i<=TuningSzamolo[playerid];i++)
		    {
				if(listitem == i)
				{
					if(IsVehicleUpgradeCompatible(GetVehicleModel(GetPlayerVehicleID(playerid)),KomponensID[playerid][i]))
					{
						new ara = (KomponensAra(KomponensID[playerid][i])/235);
						if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] >= ara)
						{
						    new kocsi = GetPlayerVehicleID(playerid);
						    TuningFelrak(playerid,kocsi, KomponensID[playerid][i]);
							SFM(playerid,COL_MKEK,"{FF6400}%s {FFFFFF}felszerelve!", GetComponentName(KomponensID[playerid][i]));
							FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] -= ara;
							//GiveMoney(playerid,-ara);
						}
						else
						{
							SCM(playerid,COL_LRED,"Nincs elég elég pénz a széfben!");
						}
						new vehiclemodel = GetVehicleModel(GetPlayerVehicleID(playerid));
						new tuningstr[3012];
						new component;
						TuningSzamolo[playerid] = 1;
						while(GetVehicleCompatibleUpgrades(vehiclemodel, TuningSzamolo[playerid], component))
						{
							if(TuningSzamolo[playerid] <= MAX_KOMPONENS)
							{
								if(TuningSzamolo[playerid] == 1) format(tuningstr, sizeof(tuningstr), "Tuning Neve: %s | Ára: %d $", GetComponentName(component),(KomponensAra(component)/235));
								else format(tuningstr, sizeof(tuningstr), "%s\nTuning Neve: %s | Ára: %d $", tuningstr, GetComponentName(component),(KomponensAra(component)/235));
								KomponensID[playerid][TuningSzamolo[playerid]-1] = component;
								TuningSzamolo[playerid]++;
							}
							else break;
						}
						new cim[80];
						format(cim,80, ":: Elérhetõ Tuning alkatreszek a jármûhöz {FF6400}(%d)", VehicleNames[vehiclemodel-400]);
						return ShowPlayerDialog(playerid, DIALOG_TUNING, DIALOG_STYLE_LIST, cim, tuningstr, "Felszerel", "Mégse");
					}
					else SCM(playerid,COL_LRED,"Ezt az alkatreszt nem lehet felszerelni erre a kocsira!");
				}
			}
		}
		case DIALOG_TUNING_V2:
		{
		    if(!response)
		        return 1;
		    for(new i=0;i<=TuningSzamolo[playerid];i++)
		    {
				if(listitem == i)
				{
					if(IsVehicleUpgradeCompatible(GetVehicleModel(GetPlayerVehicleID(playerid)),KomponensID[playerid][i]))
					{
 						new kocsi = GetPlayerVehicleID(playerid);
						TuningFelrak(playerid,kocsi, KomponensID[playerid][i]);
						SFM(playerid,COL_MKEK,"{FF6400}%s {FFFFFF}felszerelve!", GetComponentName(KomponensID[playerid][i]));

					}
					else SCM(playerid,COL_LRED,"Ezt az alkatreszt nem lehet felszerelni erre a kocsira!");
				}
			}
		}
		case DIALOG_FELSZERELES:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a felszerelés választóból!");
			switch(listitem)
			{
				case 0:
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 22,100, false,true);//9mm
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					SCM(playerid, COL_MKEK, "Felvetted a kadét felszerelést!");
					SetArmor(playerid, MAX_ARMOR);
					SetHealth(playerid, MAX_HP);
					new sr[128];
					format(sr, sizeof(sr), "[Központ]: {1e90FF}%s szolgálatba lépett. - Kadét felszerelés", JatekosNev(playerid, true));
					FrakcioUzenet(RED, PlayerInfo[playerid][pFrakcio], sr);
				}
				case 1:
				{
					if(PlayerInfo[playerid][prang] < 2)
						return SendClientMessage(playerid, COLOR_WHITE, "Ezt nem veheted fel");
						
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 22,100, false,true);//9mm
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					SCM(playerid, COL_MKEK, "Felvetted az Officer felszerelést!");
					SetArmor(playerid, MAX_ARMOR);
					SetHealth(playerid, MAX_HP);
					new sr[128];
					format(sr, sizeof(sr), "[Központ]: {1e90FF}%s szolgálatba lépett. - Officer felszerelés", JatekosNev(playerid, true));
					FrakcioUzenet(RED, PlayerInfo[playerid][pFrakcio], sr);
				}
				case 2:
				{
					if(PlayerInfo[playerid][prang] < 2)
						return SendClientMessage(playerid, COLOR_WHITE, "Ezt nem veheted fel");

					GiveWeapon(playerid, 22,100, false,true);//9mm
					SCM(playerid, COL_MKEK, "Felvetted a Detektív felszerelést!");
					SetArmor(playerid, MAX_ARMOR);
					SetHealth(playerid, MAX_HP);
					new sr[128];
					format(sr, sizeof(sr), "[Központ]: {1e90FF}%s szolgálatba lépett. - Detektív felszerelés", JatekosNev(playerid, true));
					FrakcioUzenet(RED, PlayerInfo[playerid][pFrakcio], sr);
				}
				case 3:
				{
					if(PlayerInfo[playerid][prang] < 6)
						return SendClientMessage(playerid, COLOR_WHITE, "Ezt nem veheted fel");
						
					GiveWeapon(playerid, 24, 80, false, true);//deagle
					GiveWeapon(playerid, 31, 250,false, true);//m4
					GiveWeapon(playerid, 25, 125,false, true);//shoti
					GiveWeapon(playerid, 29, 280, false, true);//mp5
					SCM(playerid, COL_MKEK, "Felvetted az  Emergency felszerelést!");
					SetArmor(playerid, MAX_ARMOR);
					SetHealth(playerid, MAX_HP);
					new sr[128];
					format(sr, sizeof(sr), "[Központ]: {1e90FF}%s szolgálatba lépett. - Emergency felszerelés", JatekosNev(playerid, true));
					FrakcioUzenet(RED, PlayerInfo[playerid][pFrakcio], sr);
				}
				case 4:
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24,100, false,true);//deagle
					GiveWeapon(playerid, 29,100,false,true);//mp5
					GiveWeapon(playerid, 25,25,false,true);//shoti
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					SCM(playerid, COL_MKEK, "Felvetted a motoros felszerelést!");
					SetSkin(playerid, 284);
					SetArmor(playerid, MAX_ARMOR);
					SetHealth(playerid, MAX_HP);
					new sr[128];
					format(sr, sizeof(sr), "[Központ]: {1e90FF}%s szolgálatba lépett. - Motoros felszerelés", JatekosNev(playerid, true));
					FrakcioUzenet(RED, PlayerInfo[playerid][pFrakcio], sr);
				}
				case 5:
				{
					DeleteWeapon(playerid);
					SetHealth(playerid, MAX_HP);
					new skin = PlayerInfo[playerid][pskin];
					if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
						SetSkin(playerid, skin, false);
					new sr[128];
					format(sr, sizeof(sr), "[Központ]: {1e90FF}%s leadta a szolgálatot.", JatekosNev(playerid, true));
				}

			}
			return true;
		}
		case DIALOG_SWAT:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a felszerelés választóból!");
			switch(listitem)
			{
				case 0:
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24, 80, false, true);//deagle
					GiveWeapon(playerid, 29, 200, false, true);//mp5
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					GiveWeapon(playerid, 17, 30, false, true);//füst
					SetArmor(playerid, MAX_ARMOR);
					SetHealth(playerid, MAX_HP);
					SetSkin(playerid, 285, false);
					PlayerInfo[playerid][pSWATDuty] = 1;
					SCM(playerid, COL_MKEK, "Felvetted az alap felszerelést!");
					if(PlayerInfo[playerid][pGazmaszk] == 0)
					{
						SCM(playerid,COL_VZOLD,"Kaptál egy gázmaszkot! - "#COL_LKEK"/gázmaszk");
						PlayerInfo[playerid][pGazmaszk] = 1;
					}
				}
				case 1:
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24, 80, false, true);//deagle
					GiveWeapon(playerid, 29, 200, false, true);//mp5
					GiveWeapon(playerid, 34, 100, false, true);//sniper
					GiveWeapon(playerid, 17, 30, false, true);//teargas
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					SetArmor(playerid, MAX_ARMOR);
					SetHealth(playerid, MAX_HP);
					SetSkin(playerid, 285,  false);
					PlayerInfo[playerid][pSWATDuty] = 1;
					SCM(playerid, COL_MKEK, "Felvetted a közepes felszerelést!");
					if(PlayerInfo[playerid][pGazmaszk] == 0)
					{
						SCM(playerid,COL_VZOLD,"Kaptál egy gázmaszkot! - "#COL_LKEK"/gázmaszk");
						PlayerInfo[playerid][pGazmaszk] = 1;
					}
				}
				case 2:
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24, 80, false, true);//deagle
					GiveWeapon(playerid, 31, 500, false, true);//m4
					GiveWeapon(playerid, 27, 100, false, true);//combat
					GiveWeapon(playerid, 34, 100, false, true);//sniper
					GiveWeapon(playerid, 17, 30, false, true);//teargas
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					SetArmor(playerid, MAX_ARMOR);
					SetHealth(playerid, MAX_HP);
					SetSkin(playerid, 285,  false);
					PlayerInfo[playerid][pSWATDuty] = 1;
					SCM(playerid, COL_MKEK, "Felvetted a nehéz felszerelést!");
					if(PlayerInfo[playerid][pGazmaszk] == 0)
					{
						SCM(playerid,COL_VZOLD,"Kaptál egy gázmaszkot! - "#COL_LKEK"/gázmaszk");
						PlayerInfo[playerid][pGazmaszk] = 1;
					}
				}
				case 3:
				{
					PlayerInfo[playerid][pSWATDuty] = 0;
					SetArmor(playerid, 0.0);
					DeleteWeapon(playerid);
					SetPlayerSkin(playerid,PlayerInfo[playerid][pskin]);
					PlayerInfo[playerid][pGazmaszk] = 0;
					PlayerInfo[playerid][pGazmaszkFenn] = false;
				}
			}
			return true;
		}
		case DIALOG_HTANUL:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //box
					{
					    if(PlayerInfo[playerid][ppenz] < 2500)
							return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
							
						SCM(playerid, COL_VZOLD, "Elkezdted a Box-ot tanulni!");
						LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,0);
						PlayerInfo[playerid][ppenz] -= 2500;
						defer Box(playerid);
						TogglePlayerControllable(playerid, false);
					}
					case 1: //grabkick
					{
					    if(PlayerInfo[playerid][ppenz] < 3500)
							return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
							
						SCM(playerid, COL_VZOLD, "Elkezdted a Grabkick-et tanulni!");
						LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
						PlayerInfo[playerid][ppenz] -= 3500;
						defer Grabkick(playerid);
						TogglePlayerControllable(playerid, false);
					}
					case 2: //elbow
					{
					    if(PlayerInfo[playerid][ppenz] < 4000)
							return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
							
						SCM(playerid, COL_VZOLD, "Elkezdted a Elbow-ot tanulni!");
						LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
						PlayerInfo[playerid][ppenz] -= 4000;
						defer Elbow(playerid);
						TogglePlayerControllable(playerid, false);
					}
					case 3: //kungfu
					{
					    if(PlayerInfo[playerid][ppenz] < 5000)
							return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
							
						SCM(playerid, COL_VZOLD, "Elkezdted a Kungfu-t tanulni!");
						LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
						PlayerInfo[playerid][ppenz] -= 5000;
						defer Kungfu(playerid);
						TogglePlayerControllable(playerid, false);
					}
					case 4: //kneehead
					{
					    if(PlayerInfo[playerid][ppenz] < 6000)
							return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
							
						SCM(playerid, COL_VZOLD, "Elkezdted a Kneehead-et tanulni!");
						OnePlayAnim(playerid,"FIGHT_D","FightD_2",4.0,0,1,1,0,0);
						PlayerInfo[playerid][ppenz] -= 6000;
						defer Kneehead(playerid);
						TogglePlayerControllable(playerid, false);
					}
				}
				PlayerInfo[playerid][pHarcstilusTanul] = true;
			}
			return true;
		}
		case DIALOG_HVALT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //box
					{
						if(PlayerInfo[playerid][pBox] != 1)
							return SCM(playerid, COL_LRED, "Nem tanultad még meg.");
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
						SCM(playerid, COL_LRED, "Átváltottál Boxra.");
					}
					case 1: //grabkick
					{
						if(PlayerInfo[playerid][pGrabkick] != 1)
							return SCM(playerid, COL_LRED, "Nem tanultad még meg.");
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
						SCM(playerid, COL_LRED, "Átváltottál Grabkickre.");
					}
					case 2: //elbow
					{
						if(PlayerInfo[playerid][pElbow] != 1)
							return SCM(playerid, COL_LRED, "Nem tanultad még meg.");
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
						SCM(playerid, COL_LRED, "Átváltottál Elbowra.");
					}
					case 3: //kungfu
					{
						if(PlayerInfo[playerid][pKungfu] != 1)
							return SCM(playerid, COL_LRED, "Nem tanultad még meg.");
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
						SCM(playerid, COL_LRED, "Átváltottál Kungfura.");
					}
					case 4: //kneehead
					{
						if(PlayerInfo[playerid][pKneehead] != 1)
							return SCM(playerid, COL_LRED, "Nem tanultad még meg.");
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
						SCM(playerid, COL_LRED, "Átváltottál Kneeheadre.");
					}
					case 5:
					{
						SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
						SCM(playerid, COL_LRED, "Visszaváltottál alapra.");
					}
				}
			}
			return true;
		}
		case DIALOG_SHOWTEXTDRAW:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél az info szerkesztõbõl!");

			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid, DIALOG_TEXTDRAWBE, DIALOG_STYLE_LIST, "Választható opciók:", "Pénz\nAdatok\nSzükségletek\nKocsi infók\nKocsi sebesség\nEgyéb infók\nMinden", "Mehet", "Mégse");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, DIALOG_TEXTDRAWKI, DIALOG_STYLE_LIST, "Választható opciók:", "Pénz\nAdatok\nSzükségletek\nKocsi infók\nKocsi sebesség\nEgyéb infók\nMinden", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_TEXTDRAWBE:
		{
			switch(listitem)
			{
				case 0://pénz
				{
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Penz]);
				}
				case 1://adatok
				{
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Adatok]);
				}
				case 2://szükségletek
				{
					ShowPlayerProgressBar(playerid, EhsegBar[playerid]);
					ShowPlayerProgressBar(playerid, VizeletBar[playerid]);
				}
				case 3://kocsi infók
				{
					if(IsPlayerInAnyVehicle(playerid))
					{
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0]);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1]);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2]);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4]);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5]);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6]);
					}
				}
				case 4://kocsi sebesség
				{
					if(GetPlayerVehicleSeat(playerid) == 0)
					{
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3]);
					}
				}
				case 5://egyéb infók
				{
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][0]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][1]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][6]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][2]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][3]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][4]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][5]);
				}
				case 6://összes
				{
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Penz]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Adatok]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][0]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][1]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][2]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][3]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][4]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][5]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][6]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0]);
					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1]);
					ShowPlayerProgressBar(playerid, EhsegBar[playerid]);
					ShowPlayerProgressBar(playerid, VizeletBar[playerid]);
					if(GetPlayerVehicleSeat(playerid) == 0)
					{
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0]);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1]);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2]);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3]);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4]);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5]);
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6]);
					}
				}
			}
			return true;
		}
		case DIALOG_TEXTDRAWKI:
		{
			switch(listitem)
			{
				case 0://pénz
				{
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Penz]);
				}
				case 1://adatok
				{
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Adatok]);
				}
				case 2://szükségletek
				{
					HidePlayerProgressBar(playerid, EhsegBar[playerid]);
					HidePlayerProgressBar(playerid, VizeletBar[playerid]);
				}
				case 3://kocsi infók
				{
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6]);
				}
				case 4://kocsi sebesség
				{
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3]);
				}
				case 5://egyéb infók
				{
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][0]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][1]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][6]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][2]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][3]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][4]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][5]);
				}
				case 6://összes
				{
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Penz]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Adatok]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][0]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][1]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][2]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][3]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][4]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][5]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][6]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][0]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_AlsoFelso][1]);
					HidePlayerProgressBar(playerid, EhsegBar[playerid]);
					HidePlayerProgressBar(playerid, VizeletBar[playerid]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][0]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][1]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][2]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][3]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][4]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][5]);
					PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_JarmuInfo][6]);
				}
			}
			return true;
		}
		
		case DIALOG_RUHABOLT:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Köszönjük, hogy nálunk vásárolt! Viszlát késõbb!");

   			switch(listitem)
			{
				case 0:
				{
     				#define MAX_SKIN 312
					new skinek[MAX_SKIN], num = 0;
					new i = NINCS;
					for(; ++i < MAX_SKIN;)
					{
					    if(GetSkinGender(i) != PlayerInfo[playerid][pnem]) continue;
					    if(!IsValidSkin(i)) continue;
					    
					    new fk = NINCS, bool:isfk = false;
					    for(;++fk < FK_SKINEK;)
					    {
							new fkskin = NINCS;
							new MAX_FK_SKIN = FrakcioSkinek[fk][1];
							
							for(;++fkskin < MAX_FK_SKIN;)
							{
								if(FrakcioSkinek[fk][fkskin + 2] != i) continue;
					   			isfk = true;
							    break;
							}
							if(isfk)
							    break;
						}
						if(isfk) continue;
						
						skinek[num] = i, num++;
					}
			     	ShowModelSelectionMenuEx(playerid, skinek, sizeof( skinek ), "", SKIN_VALASZTAS, .dialogBGcolor = 512819010, .previewBGcolor = 80);
				}
				case 1:
				{
					if(PlayerInfo[playerid][pHatizsak] == 1)
						return SCM(playerid, COL_LRED, "Már van hátizsákod!");

					if(PlayerInfo[playerid][ppenz] < 170)
						return SCM(playerid, COL_LRED, "A hátizsák 170$-ba kerül!");

					SetPlayerAttachedObject(playerid, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
					PlayerInfo[playerid][pHatizsak] = 1;

					SCM(playerid, COL_VZOLD, "Vettél sikeresen egy hátizsákot 170$-ért!");
					PenzHozzaad(playerid,-170);
				 	CegPenz(BIZ_RUHA, 170);
					return true;
				}
				case 2:
				{
					ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_VALASZTAS, DIALOG_STYLE_LIST, "Divatbolt", "Szemüvegek\nFejkendõk\nSvájci Sapkák\nBaseball Sapkák\nKalapok\nSapkák\nMaszkok", "Tovább", "Mégse");
				}
			}
			return true;
		}
		//Vizsga rendszer by Martin
		case DIALOG_VIZSGA_KRESZ:
		{
			new id = PlayerInfo[playerid][pKresz][0];
			if(response && KreszKerdesek[ id ][3][0] == 1 || !response && KreszKerdesek[ id ][3][0] == 2)
				PlayerInfo[playerid][pKresz][1]++;//helyes válaszok számolása

			if((id + 1) == sizeof(KreszKerdesek))
			{
				new str[512];
				if(sizeof(KreszKerdesek) - PlayerInfo[playerid][pKresz][1] > 3)
				{
					format(str, sizeof(str), "%s%s"#COL_MKEK"%d"#COL_FEHER"%s"#COL_MKEK"%d"#COL_FEHER"%s%s%s",
					""#COL_FEHER"Kedves tanuló sajnálattal kell közölnöm, hogy a KRESZ vizsgád "#COL_PIROS"Sikertelen!"#COL_FEHER"\n",
					"Összsen ", sizeof(KreszKerdesek), " kérdésre válaszoltál, melybõl ", (sizeof(KreszKerdesek) - PlayerInfo[playerid][pKresz][1]), " helytelen volt.\n",
					"Amennyiben szeretnéd megismételni, úgy kérlek ismételd át a kérdéseket,\ntanulj és gyere vissza mihamarabb.\n",
					"További kellemes napot kíván a "#COL_VZOLD"Los Angeles Autósiskola");

					PlayerInfo[playerid][pEngedely][0] = 0;

				} else {

					format(str, sizeof(str), "%s%s"#COL_MKEK"%d"#COL_FEHER"%s"#COL_MKEK"%d"#COL_FEHER"%s%s%s",
					""#COL_FEHER"Kedves tanuló gratulálunk! "#COL_VZOLD"Sikeresen"#COL_FEHER" teljesítetted a KRESZ vizsgát.\n",
					"Összsen ", sizeof(KreszKerdesek), " kérdésre válaszoltál, melybõl ", (sizeof(KreszKerdesek) - PlayerInfo[playerid][pKresz][1]), " helytelen volt.\n",
					"Most már bele is vághatsz a vizsga következõ részébe, a gyakorlati vizsgába.\n",
					"További kellemes napot kíván a "#COL_VZOLD"Los Angeles Autósiskola");

					PlayerInfo[playerid][pEngedely][0] = VizsgaLista[0][4][0];
				}

				PlayerInfo[playerid][pKresz][0] = 0;
				PlayerInfo[playerid][pKresz][1] = 0;
				Info_Dialog(playerid, ""#COL_FEHER"Vizsga információk - Los Angeles Autósiskola!", str);
				return true;
			}

			new srt[512];
			format(srt, sizeof(srt), ""#COL_MKEK"Kérdés:"#COL_FEHER"\n%s\n\n"#COL_MKEK"A:"#COL_FEHER" %s\n"#COL_MKEK"B:"#COL_FEHER" %s",KreszKerdesek[id + 1][0], KreszKerdesek[id + 1][1], KreszKerdesek[id + 1][2]);
			PlayerInfo[playerid][pKresz][0]++;
			ShowPlayerDialog(playerid, DIALOG_VIZSGA_KRESZ, DIALOG_STYLE_MSGBOX, "Los Angeles - Autósiskola", srt, "A", "B");
			return true;
		}
		case DIALOG_VIZSGA_LISTA:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");

			if(PlayerInfo[playerid][pVizsga][1])
			{
				new str[512];
				format(str, sizeof(str), #COL_FEHER"Egyszerre csak egy vizsgát tudsz letenni!\nFejezd be az aktuálisat és jöhet a következõ.");
				Info_Dialog(playerid, ""#COL_FEHER"Vizsga információk - Los Angeles Autósiskola!", str);
				return true;
			}

			if(!PlayerInfo[playerid][pEngedely][0] && listitem)
			{
				new str[512];
				format(str, sizeof(str), "%s%s%s%s%s%s",
				""#COL_FEHER"Kedves tanuló sajnálattal kell közölnöm, hogy a KRESZ vizsgád "#COL_PIROS"érvénytelen."#COL_FEHER"\n",
				"Amennyiben szeretnéd elkezdeni a vizsgát, úgy kérlek a recepciós pultnál\n",
				"válaszd a KRESZ vizsga lehetõséget és legjobb tudásod szerint válaszolj a kérdésekre.\n",
				"Ha segítségre van szükséged, használd a kézikönyvet, melyet bármely boltban megtalálsz.\n",
				""#COL_FEHER"Sok sikert kíván a "#COL_VZOLD"Los Angeles Autóiskola");
				Info_Dialog(playerid, ""#COL_FEHER"Vizsga információk - Los Angeles Autósiskola!", str);
				return true;
			}

			if(PlayerInfo[playerid][pBszPenz] < VizsgaLista[listitem][1][0])
			{
				new str[512];
				format(str, sizeof(str), #COL_FEHER"A vizsga megkezdéséhez nincs elegendõ pénz a bankszámládon!");
				Info_Dialog(playerid, ""#COL_FEHER"Vizsga információk - Los Angeles Autósiskola!", str);
				return true;
			}

			PlayerInfo[playerid][pBszPenz] -= VizsgaLista[listitem][1][0];
			if(listitem)
			{
				new str[512];
				format(str, sizeof(str), "%s"#COL_VZOLD" %s "#COL_FEHER"%s%s%s%s"#COL_MKEK" %s "#COL_FEHER"%s%s",
				""#COL_FEHER"Kedves tanuló jelenleg", VizsgaLista[listitem][0] ,"vezetésbõl teszel gyakorlati vizsgát.\n",
				"Kérlek a vizsga során fordíts kellõ figyelmet a sebességed megválasztására,\n",
				"illetve minden esetben törekedj a "#COL_MKEK"KRESZ"#COL_FEHER" szabályainak betartására!\n",
				"A pálya teljesítésére", VizsgaLista[listitem][2], "áll rendelkezésedre ezután a vizsga sikeretelen!\n",
				""#COL_PIROS"Amennyiben a jármûved megsérül a vizsga szintén sikertelen!\n",
				""#COL_FEHER"Kérlek fáradj egy a parkolóban található vizsga jármûhöz és már is kezdheted a vizsgát!\n",
				""#COL_FEHER"Sok sikert! - "#COL_VZOLD"Los Angeles Autóiskola");
				Info_Dialog(playerid, ""#COL_FEHER"Vizsga információk - Los Angeles Autósiskola", str);
			}

			switch(listitem)
			{
				case 0:
				{
					PlayerInfo[playerid][pKresz][0] = 0;
					PlayerInfo[playerid][pKresz][1] = 0;

					new srt[512];
					format(srt, sizeof(srt), ""#COL_MKEK"Kérdés:"#COL_FEHER"\n%s\n\n"#COL_MKEK"A:"#COL_FEHER" %s\n"#COL_MKEK"B:"#COL_FEHER" %s",KreszKerdesek[0][0], KreszKerdesek[0][1], KreszKerdesek[0][2]);

					ShowPlayerDialog(playerid, DIALOG_VIZSGA_KRESZ, DIALOG_STYLE_MSGBOX, "Los Angeles - Autósiskola", srt, "A", "B");
				}
				case 1, 2://kocsi, motor
				{
					SetPlayerCheckpoint(playerid, PosExt( Vizsga_Alap[PlayerInfo[playerid][pVizsga][0]] ), 3.0);
					PlayerInfo[playerid][pVizsga][1] = (listitem == 1 ? VIZSGA_KOCSI : (listitem == 2 ? VIZSGA_MOTOR : VIZSGA_KOCSI)); //melyik vizsga
					PlayerInfo[playerid][pVizsga][0] = 0; // viszga cp hol tart
					PlayerInfo[playerid][pVizsga][2] = (VizsgaLista[listitem][3][0] * 60);//max vizsga idõ
					PlayerInfo[playerid][pCP] = CP_VIZSGA;
				}
				case 3://kamion
				{
					SetPlayerCheckpoint(playerid, PosExt( Vizsga_Kamion[ PlayerInfo[playerid][pVizsga][0] ] ), 4.0);
					PlayerInfo[playerid][pVizsga][1] = VIZSGA_KAMION; //melyik vizsga
					PlayerInfo[playerid][pVizsga][0] = 0; // viszga cp hol tart
					PlayerInfo[playerid][pVizsga][2] = (VizsgaLista[listitem][3][0] * 60);//max vizsga idõ
					PlayerInfo[playerid][pCP] = CP_VIZSGA;
				}
			}
			return true;
		}
		case DIALOG_BANKROBP1:
		{
			if(!response)
				return true;

			if(!IsNumeric(inputtext) || strval(inputtext) != BankInfo[bBankElocsarnok])
			{
				new str[250];
				format(str, sizeof(str), "===================== [ "#COL_FEHER"BANKRABLÁS"#COL_LRED" ] =====================");
				FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_LSPD, str);
				FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_KATONA, str);
				format(str, sizeof(str), "Figyelem minden egységnek! Valaki megpróbált betörni a See City-i bank biztonsági rendszerébe!");
				FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LSPD, str);
				FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_KATONA, str);

				SCM(playerid, COL_LRED, "Hiba a rendszerben! A rendszer értesítette a rendõrséget! A bankrablás megszakadt!");
				BankInfo[bBankInditva] = false;
				return true;
			}

			//DestroyDynamicObject
			MoveDynamicObject(BankInfo[bAjto][1], 2319.90, -5.23, 23.07,2,0.00, 0.00, 90.00);
			Streamer_Update(playerid);
			SCM(playerid, COL_MKEK, "Hátsó Kapu kinyitva!");
			SCM(playerid, COL_LRED,"[FIGYELEM] 5 perc múlva záródik a kapu automatikusan!!");
			BankIdo = 300;
			return true;
		}
		case DIALOG_BANKROB:
		{
			if(!response)
			{
				ClearAnimations(BankBotok[bankNPCID]);
				BankBotok[bankAnim] = false;
				SCM(playerid, COL_MKEK, "Ezek szerint mégsem szeretnéd kirabolni..");
				return true;
			}

			ServerInfo[sBankrob] = 10800; // 3óránként
			switch(random(100))
			{
				case 0 .. 50:
				{
					LoopingAnim(BankBotok[bankNPCID], "ped", "cower", 3.0, 1, 0, 0, 0, 0);
					SCM(playerid, COL_LRED, "A személyzet egyik tagja értesítette a rendõrséget! Fuss!");

					new str[250];
					format(str, sizeof(str), "====== Figyelem minden egységnek! A See City bankból riasztás érkezett! ======");
					FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LSPD, str);
					FrakcioUzenet(COLOR_YELLOW, FRAKCIO_KATONA, str);
					FrakcioUzenet(COLOR_YELLOW, FRAKCIO_FBI, str);
					return true;
				}
				case 51 .. 100:
				{
					BankInfo[bBankInditva] = true;

					format(uzenet, sizeof(uzenet), "Bankár mondja: Kérem ne bántson adom is a kódot a biztonsági rendszerhez!");
					ProxDetector(15.0, BankBotok[bankNPCID], uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, false, true);

					format(uzenet, sizeof(uzenet), "Bankár mondja: Itt van a kód, kérem ne bántson: %d", BankInfo[bBankElocsarnok]);
					ProxDetector(15.0, BankBotok[bankNPCID], uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, false, true);

					//MoveObject(
					MoveDynamicObject(BankInfo[bAjto][0],2316.14, -5.36, 23.31,2,0.00, 0.00, 128.00);

					return true;
				}
			}
			return true;
		}
		case DIALOG_DROGKESZIT:
		{
			if(!response)
				return true;

			if(PlayerInfo[playerid][pDrogAnyag][listitem] < 1)
				return SCM(playerid, COL_LRED, "Nincs alapanyagod a készítéshez!");

			new i = -1, ido;

			for(;++i < PlayerInfo[playerid][pDrogAnyag][listitem];)
				ido += 1;

			ClearAnimations(playerid, 1);
			LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);

			PlayerInfo[playerid][pFoglalt] = true;

			SFM(playerid, COL_MKEK, "Elkezdted a drog gyártását! Idõ: kb "#COL_MKEK"%d"#COL_FEHER" másodperc", ido);
			defer MuveletTimer[(ido * 1000)](playerid, T_DROGKESZITES, NINCS, listitem);
			return true;
		}
		case DIALOG_BOLTROB:
		{
			new i = -1, ret = -1;

			for(;++i < sizeof(BoltBot);)
			{
				if(BoltRablas[i][npcKicsoda] == playerid)
				{
					ret = i;
					break;
				}
			}

			if(ret == -1)
				return true;

			if(!response)
			{
				BoltRablas[ret][npcAnim] = false;
				BoltRablas[ret][npcKicsoda] = -1;
				BoltRablas[ret][npcRabolas] = false;

				ClearAnimations(BoltRablas[ret][npcID]);
				return SCM(playerid, COL_MKEK, "Ezek szerint mégsem szeretnéd kirabolni..");
			}

			new randomo = random(100);

			switch(randomo)
			{
				case 0 .. 55:
				{
					SCM(playerid, COL_MKEK, "Amint eltávolódsz a bolttól, a boltrablás véget ér!");
					BoltRablas[ret][npcSikerult] = true;
					BoltRablas[ret][npcHivhat] = true;
					BoltRablas[ret][npcFolyamatban] = true;

					format(uzenet, sizeof(uzenet), "Kiszolgáló mondja: Kérem ne bántson! Odaadom az összes pénzt, csak kérem ne bántson!");
					ProxDetector(15.0, BoltRablas[i][npcID], uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, false, true);

					format(uzenet, sizeof(uzenet), "Kiszolgáló mondja: Adjon két percet, és összeszedem a pénzt!");
					ProxDetector(15.0, BoltRablas[i][npcID], uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, false, true);

					BoltRablas[ret][npcTimer] = defer BoltRab[(2 * 60000)](playerid, i);
				}
				case 56 .. 99:
				{
					LoopingAnim(BoltRablas[ret][npcID], "ped", "cower", 3.0, 1, 0, 0, 0, 0);
					SCM(playerid, COL_LRED, "A boltos értesítette a rendõrséget! Fuss!");
					BoltRablas[ret][npcHivhat] = true;
					BoltRablas[ret][npcSikerult] = false;
					new Float:x,Float:y,Float:z;
					GetPlayerPos(playerid, x,y,z);
					foreach(Player, id)
					{
						if(PlayerInfo[id][pDuty][0] && PlayerInfo[id][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[id][pFrakcio] == FRAKCIO_KATONA)
						{
							SendClientMessage(id, RED, "[Központ]: {1E90FF}Figyelem minden egységnek. Boltrablás történt,helyszín betáplálva a GPS-be!");
							SetPlayerCheckpoint(id, x, y, z, 5.0);
						}
					}
				}
			}

			//SCM(playerid, COL_MKEK, "Most már nincs vissza út! Elkezdted a rablást!");

			return true;
		}
		case DIALOG_DROGULT:
		{
			//Marihuana\nKokain\nHeroin
			if(!response)
				return true;

			new ret = NearestPlant(playerid),
				hdb = PlayerInfo[playerid][phaz];

			if(ret == -1)
				return SCM(playerid, COL_MKEK, "Nem vagy ültetvényes közelében!");

			new form[64];

			switch(listitem)
			{
				case 0: format(form, sizeof(form), "Marihuana");
				case 1: format(form, sizeof(form), "Kokain");
				case 2: format(form, sizeof(form), "Heroin");
			}

			/*
			Text3D:hDrogHely[50],
			hDrogAllapot[50],
			hDrogMi[50]
			*/

			switch(listitem)
			{
				case 0: //marihuánához kell lámpa is
				{
					if( PlayerInfo[playerid][pCuccok][BL_LAMPA] <= 0 )
						return SCM( playerid, COL_LRED, "Nincs lámpád az ültetéshez.");
					PlayerInfo[playerid][pCuccok][BL_LAMPA]--;

					new ultetvenyek = 0;

					for( new i = 0; i<50; i++ )
					{
						if( HazInfo[hdb][hDrogMi][i] == 1 )
							ultetvenyek++;
					}
					switch(PlayerInfo[playerid][pCuccok][BL_LAMPA])
					{
						case 1:
						{
							new dikk = Rand(0,150);
							if( ultetvenyek >= 5 && dikk > 5+ultetvenyek)
							{
								foreach(Player, id)
								{
									if(PlayerInfo[id][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[id][pFrakcio] == FRAKCIO_KATONA)
									{
										SendFormatMessage(id, 0x00e1ffAA, "[Központ]: Figyelem minden egységnek. A %i-os házban gyanúsan sok áram fogy.", hdb);
									}
								}
							}
						}
						case 2:
						{
							new dikk = Rand(0,125);
							if( ultetvenyek >= 5 && dikk > 5+ultetvenyek)
							{
								foreach(Player, id)
								{
									if(PlayerInfo[id][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[id][pFrakcio] == FRAKCIO_KATONA)
									{
										SendFormatMessage(id, 0x00e1ffAA, "[Központ]: Figyelem minden egységnek. A %i-os házban gyanúsan sok áram fogy.", hdb);
									}
								}
							}
						}
						case 3:
						{
							new dikk = Rand(0,110);
							if( ultetvenyek >= 5 && dikk > 5+ultetvenyek)
							{
								foreach(Player, id)
								{
									if(PlayerInfo[id][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[id][pFrakcio] == FRAKCIO_KATONA)
									{
										SendFormatMessage(id, 0x00e1ffAA, "[Központ]: Figyelem minden egységnek. A %i-os házban gyanúsan sok áram fogy.", hdb);
									}
								}
							}
						}
						case 5: // Legerõsebb
						{
							new dikk = Rand(0,90);
							if( ultetvenyek >= 5 && dikk > 5+ultetvenyek)
							{
								foreach(Player, id)
								{
									if(PlayerInfo[id][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[id][pFrakcio] == FRAKCIO_KATONA)
									{
										SendFormatMessage(id, 0x00e1ffAA, "[Központ]: Figyelem minden egységnek. A %i-os házban gyanúsan sok áram fogy.", hdb);
									}
								}
							}
						}
					}
				}
				default:
				{
				    return SCM( playerid, COL_LRED, "A többi drogot ideiglenesen nem tudod ültetni.");
				}
			}

			HazInfo[hdb][hDrogAllapot][ret] = 0;
			HazInfo[hdb][hDrogMi][ret] = (listitem + 1);

			format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%", form, HazInfo[hdb][hDrogAllapot][ret]);
			UpdateDynamic3DTextLabelText(HazInfo[hdb][hDrogHely][ret], 0xFFFFFFFF, form);
			//HazInfo[hdb][hDrogHely][which + DROG_KOZEP]
			//UpdateDynamic3DTextLabelText(HazInfo[houseid][label], 0xFFFFFF, uzenet);
			return true;
		}
		case DIALOG_RADIO_JARMU:
		{
			if(!response)
				return true;

			new id = GetPlayerVehicleID(playerid);
			if(!listitem)
			{
				foreach(Player, i)
				{
					if(!PlayerInfo[i][pMP3_Megy] && IsPlayerInAnyVehicle(i) && id == GetPlayerVehicleID(i))
					{
						PlayerTextDrawShow(i, g_PlayerTextDraw[playerid][ptd_Info][1]);
						StopAudioStreamForPlayer(i);
					}
				}

				SCM(playerid, COL_MKEK, "Rádió kikapcsolva!");
				Cselekves(playerid, "kikapcsolta a jármû rádióját");
				return true;
			}

			foreach(Player, i)
			{
				if(!PlayerInfo[i][pMP3_Megy] && IsPlayerInAnyVehicle(i) && id == GetPlayerVehicleID(i))
				{
					PlayerTextDrawHide(i, g_PlayerTextDraw[playerid][ptd_Info][1]);
					StopAudioStreamForPlayer(i);
					PlayAudioStreamForPlayer(i, RadioLista[listitem -1][0]);
				}
			}

			vInfo[ JarmuID(id, playerid) ][vRadio] = listitem;
			SFM(playerid, COL_MKEK, "Jelenleg ez szól a jármûben: "#COL_MKEK"%s", RadioLista[listitem -1][1]);
			Cselekves(playerid, "rádióállomást váltott a jármûben");
			return true;
		}
		case DIALOG_RADIO:
		{
			if(!response)
				return true;

			if(!listitem)
			{
				PlayerInfo[playerid][pMP3_Megy] = false;
				PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Info][1]);
				StopAudioStreamForPlayer(playerid);
				SCM(playerid, COL_MKEK, "Rádió kikapcsolva!");
				Cselekves(playerid, "kikapcsolta az MP3 lejátszóját");
				return true;
			}

			PlayerInfo[playerid][pMP3_Megy] = true;
			PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_Info][1]);
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, RadioLista[listitem -1][0]);
			SFM(playerid, COL_MKEK, "Jelenleg ezt hallgatod: "#COL_MKEK"%s", RadioLista[listitem -1][1]);
			Cselekves(playerid, "csatornát váltott az MP3 lejátszóján");
			return true;
		}
		case DIALOG_RADIO_VHifi:
		{
			if(!response)
				return true;

			if(!listitem)
			{
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid,X,Y,Z);
				foreach(Player,i)
				{
					if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
					{
						StopAudioStreamForPlayer(i);
						strmid(HifiZene[i],"-",0,strlen("-"),256);
						strmid(HifiInfo[i][hURL],"-",0,strlen("-"),256);
					}
				}
				Cselekves(playerid, "kikapcsolta a zenét a hifin");
				return true;
			}
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid,X,Y,Z);
			foreach(Player,i)
			{
				if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
				{
					StopAudioStreamForPlayer(i);
					PlayAudioStreamForPlayer(i, RadioLista[listitem -1][0],X,Y,Z,5.0,1);
					strmid(HifiZene[i],RadioLista[listitem -1][0],0,strlen(RadioLista[listitem -1][0]),256);
					strmid(HifiInfo[i][hURL],RadioLista[listitem -1][0],0,strlen(RadioLista[listitem -1][0]),256);
				}
			}
			Cselekves(playerid, "csatornát váltott a Hifin");
			return 1;
		}
		case DIALOG_CAMERA:
		{
			if(response)
			{
				SetPlayerToCCTVCamera(playerid,listitem+1);
				SFM(playerid,COL_LRED,"Belenéztél a %s Kamerába",CameraName[listitem+1]);
			}
			return 1;
		}
		case DIALOG_ITALOK:
		{
			if(!response)
			{
				return 1;
			}
			if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < ItalLista[listitem][1][0])	return SFM(playerid, COL_LRED, "Nincs nálad %s$ készpénz!",FN(ItalLista[listitem][1][0]));
			else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < ItalLista[listitem][1][0]) return SFM(playerid, COL_LRED,"Nincs a bankszámládon %s$!",FN(ItalLista[listitem][1][0]));
			if(PlayerInfo[playerid][peletkor] < 18) return SCM(playerid,COL_LRED,"Te még ehhez kicsi vagy!");

			switch(listitem)
			{
				case 0:{Cselekves(playerid,"vett egy üveg Ásvány vizet");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);}
				case 1:{Cselekves(playerid,"vett egy üveg Coca Colát");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);}
				case 2:{Cselekves(playerid,"vett egy üveg Fantát");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);}
				case 3:{Cselekves(playerid,"vett egy üveg Sprite -t");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);}
				case 4:{Cselekves(playerid,"vett egy üveg Cappy Ice Fruit");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);}
				case 5:{Cselekves(playerid,"vett egy üveg Sört");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 6:{Cselekves(playerid,"vett egy üveg Bort");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 7:{Cselekves(playerid,"vett egy üveg Vodkát");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 8:{Cselekves(playerid,"vett egy üveg Whiskey -t");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 9:{Cselekves(playerid,"vett egy üveg Gin -t");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 10:{Cselekves(playerid,"vett egy üveg Tequila -át");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 11:{Cselekves(playerid,"vett egy üveg Absinth-tot");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 12:{Cselekves(playerid,"vett egy üveg Brandy-t");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER); SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
			}
			PenzHozzaad(playerid,-ItalLista[listitem][1][0]);
			return 1;
		}
		case DIALOG_BOLT:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Köszönjük, hogy minket választott! Viszlát késõbb!");

   			new uresslot = UresKosarSlot(playerid);
   			if(uresslot == -1) return SCM(playerid, COL_MKEK, "Tele a kosarad! Menj, fizess és aztán tovább vásárolhatsz!");
			if(TargyLista[listitem][2][0] == BL_GUMIKESZTYU && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
			    return SCM(playerid, COL_LRED, "Fejlesztés alatt.");
			    
			BevasarloKosarCuccok[playerid][uresslot] = listitem;
			/*BevasarloKosar[playerid][2] += TargyLista[listitem][2][0];
			BevasarloKosar[playerid][3] += TargyLista[listitem][1][0];*/

			new randompolc = random(MAX_POLC);
			new polc = NINCS;
			new bolt = BevasarloKosar[playerid][1];
			while(polc == NINCS)
			{
			    if(BoltPolcok[bolt][randompolc][0] == 0.0 && BoltPolcok[bolt][randompolc][1] == 0.0 && BoltPolcok[bolt][randompolc][2] == 0.0)
			    {
			        randompolc = random(MAX_POLC);
			    }
			    polc = randompolc;
			    break;
			}
		    SetPlayerCheckpoint(playerid, BoltPolcok[BevasarloKosar[playerid][1]][randompolc][0],BoltPolcok[BevasarloKosar[playerid][1]][randompolc][1],BoltPolcok[BevasarloKosar[playerid][1]][randompolc][2],3.0);
		    BevasarloPolc[playerid][0] = BoltPolcok[BevasarloKosar[playerid][1]][randompolc][0];
		    BevasarloPolc[playerid][1] = BoltPolcok[BevasarloKosar[playerid][1]][randompolc][1];
		    BevasarloPolc[playerid][2] = BoltPolcok[BevasarloKosar[playerid][1]][randompolc][2];
		    //SCM(playerid, COL_MKEK, "Ha szeretnél még valamit venni, menj a checkpointhoz és írd be a /vesz parancsot");
		    //SCM(playerid, COL_MKEK, "Ha nem szeretnél már semmit venni, menj a kasszához és fizesd ki az árut a /fizet paranccsal.");
			return true;
		}
  		/*case DIALOG_BOLT:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Köszönjük, hogy minket választott! Viszlát késõbb!");

			new ar = TargyLista[listitem][1][0];
			if(PenzEgyenleg(playerid) < ar)
				return SCM(playerid, COL_LRED, "Nincs nálad elegendõ készpénz, hogy ezt megvehesd!");

			new targy = TargyLista[listitem][2][0];
			new ertek = TargyLista[listitem][3][0];
			new tipus = TargyLista[listitem][4][0];
			new limit = TargyLista[listitem][5][0];
			
			if(limit != 0 && tipus == CUCC_BL && PlayerInfo[playerid][pCuccok][targy] + ertek > limit)
			{
			    SFM(playerid, COL_LRED, "Nem tudod megvenni, mert maximum %d %s lehet nálad!", limit, TargyLista[listitem][0]);
			    return 1;
			}
			else
			{
				if(targy == BL_TRAFFIPAX)
				{
				    if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
						return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");
						
                    PlayerInfo[playerid][pCuccok][targy] += ertek;
				}
				else if(targy == BL_TELEFON)
			    {
			        new telefonszamod = UjTelefonSzam();
					PlayerInfo[playerid][pCuccok][BL_TELEFON] = telefonszamod;
					SFM(playerid, COL_MKEK, "Új telefonszámod: %d", telefonszamod);
					nformat(queaary, 512, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pCuccok = '%s' WHERE Id = '%d'", GetPlayerBoltCucc( playerid ), PlayerInfo[playerid][pID]);

					//mysql_function_query(sql_ID, queaary, false, "", "");
					mysql_tquery(sql_ID, queaary, "", "");
			    }//csinálom
			    else if(targy == -201)
			    {
			        PlayerInfo[playerid][pTelefonPenz] += ertek;
			    }
				else if(tipus == CUCC_FEGYVER)
			    {
			        GiveWeapon(playerid, targy, ertek, false, true);
			    }
			    else
		        	PlayerInfo[playerid][pCuccok][targy] += ertek;

			 	SFM(playerid, COL_VZOLD, "Sikeresen vettél egy %s-t "#COL_MKEK"%s"#COL_FEHER"$-ért!", TargyLista[listitem][0], FN(ar, 0, ','));
				PenzHozzaad(playerid, -TargyLista[listitem][1][0]);
				CegPenz(BIZ_247, TargyLista[listitem][1][0]);
			}
			return true;
		}*/
		case DIALOG_FEGYVERKESZITES:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Várunk késõbb vissza!");

			if(PlayerInfo[playerid][pFegyverSkill] < Fegyverek[listitem][fSkill])
				return SCM(playerid, COL_LRED, "Nincs elegendõ tapasztalatod e fegyver készítéséhez!");

			if(PlayerInfo[playerid][pMaterial] < Fegyverek[listitem][fMati])
				return SCM(playerid, COL_LRED, "Nincs elegendõ alapanyagod az elkészítéséhez!");

			SCM(playerid, COL_MKEK, "Elkezdted a fegyver készítését!");

			ClearAnimations(playerid, 1);

			LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
			LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
			LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
			PlayerInfo[playerid][pMaterial] -= Fegyverek[listitem][fMati];
			defer MuveletTimer[(((listitem + 1) * 2) * 1000)](playerid, T_FKESZITES, NINCS, listitem);
			PlayerInfo[playerid][pFoglalt] = true;

			return true;
		}
		case DIALOG_DROGMAG:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Köszönjöük a vásárlást! Viszlát késõbb!");

			//Marihuana\nKokain\nHeroin
			switch(listitem)
			{
				case 0: PlayerInfo[playerid][pDrogMit][1] = 1; //Marihuana
				case 1: PlayerInfo[playerid][pDrogMit][1] = 2; //Kokain
				case 2: PlayerInfo[playerid][pDrogMit][1] = 3; //Heroin
			}

			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Hagytam San Francisco-i kikötõben 5db magot, vedd fel, és ha majd kész lettél hívj fel!");
			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Na, csõ csõ");

			SCM(playerid, COL_MKEK, "A telefont lerakták!");
			PlayerInfo[playerid][ptelefonal] = false;
			PlayerInfo[playerid][ptelefonaloid] = 0;

			PlayerInfo[playerid][pCP] = CP_DROG;
			SetPlayerCheckpoint(playerid, -1688.3713, 12.9246, 3.5547, 5.0);
			return true;
		}
		case DIALOG_HAZ_SZEF_FEGY:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(PlayerInfo[playerid][pDuty][0] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND)
				return SCM(playerid, COL_LRED, "Szolgálatban nem használhatod!");

			new fegyv[1024], form[64], i = -1; //Név [lõszer]

			switch(listitem)
			{
				case 0 .. 14:
				{
					if(PlayerInfo[playerid][pFegyver] && !HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem])
					{
						HazInfo[PlayerInfo[playerid][phaz]][hFegyver][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] = PlayerInfo[playerid][pFegyver];
						HazInfo[PlayerInfo[playerid][phaz]][hTolteny][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] += PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]];

						SFM(playerid, COL_MKEK, "Beraktál egy "#COL_MKEK"%s"#COL_FEHER" tipusú fegyvert "#COL_MKEK"%ddb"#COL_FEHER" lõszerrel!", aWeaponNames[PlayerInfo[playerid][pFegyver]], PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);

						nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Fegyver: [%d]%s - Töltény: %ddb", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], PlayerInfo[playerid][pFegyver], aWeaponNames[PlayerInfo[playerid][pFegyver]], PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);
						Log(FILE_HAZSZEF, cstr);

						PlayerInfo[playerid][pFegyverek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = 0;
						PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = 0;
						
						Fegyver(playerid, false);
						//return true;
					}
					else if(HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem])
					{
						if(PlayerInfo[playerid][pFegyver])
							if(SameWeaponSlot(PlayerInfo[playerid][pFegyver], HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem]))
								return SCM(playerid, COL_LRED, "Már van ilyen típusú fegyvered!");

						PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
						GiveWeapon(playerid, HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem], HazInfo[PlayerInfo[playerid][phaz]][hTolteny][listitem]);
						SFM(playerid, COL_MKEK, "Kivettél egy "#COL_MKEK"%s"#COL_FEHER" típusú fegyvert "#COL_MKEK"%ddb"#COL_FEHER" lõszerrel!", aWeaponNames[HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem]], HazInfo[PlayerInfo[playerid][phaz]][hTolteny][listitem]);

						new cstr[256];
						format(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Fegyver: [%d]%s - Töltény: %ddb", playerid, JatekosNev(playerid, false, true),
						PlayerInfo[playerid][phaz],
						HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem],
						aWeaponNames[HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem]],
						HazInfo[PlayerInfo[playerid][phaz]][hTolteny][listitem]);

						Log(FILE_HAZSZEF, cstr);

						HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem] = 0;
						HazInfo[PlayerInfo[playerid][phaz]][hTolteny][listitem] = 0;
						return true;
					} else {
						SCM(playerid, COL_LRED, "Ezen a sloton nincsen fegyver!");
						SCM(playerid, COL_MKEK, "Ha beszeretnél tenni fegyvert, akkor vedd elõ!");
					}
				}
			}

			new meddig = 5;

			if(PlayerInfo[playerid][pPremiumIdo] > gettime())
				if(PremiumCsomag(PlayerInfo[playerid][pPremiumCsomag]) != NINCS)
					meddig += TamogatasInfo[PremiumCsomag(PlayerInfo[playerid][pPremiumCsomag])][2];

			for(;++i < meddig;)
			{
				if(HazInfo[PlayerInfo[playerid][phaz]][hFegyver][i])
					format(form, 64, #COL_VZOLD"%s[%d] %s [%d]\n", ((i > 4) ? ("[PP] ") : ("")), i, aWeaponNames[HazInfo[PlayerInfo[playerid][phaz]][hFegyver][i]], HazInfo[PlayerInfo[playerid][phaz]][hTolteny][i]);
				else
					format(form, 64, #COL_VKEK"%s[%d] Üres\n", ((i > 4) ? ("[PP] ") : ("")), i);

				strins(fegyv, form, strlen(fegyv));
			}

			ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_FEGY, DIALOG_STYLE_LIST, #COL_NARANCS"Válassz "#COL_SZURKE"fegyvert!", fegyv, "Mehet", "Mégse");
			return true;
		}
		case DIALOG_HAZ_SZEF:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				//"Pénz:", FN(HazInfo[haz][hazSzef][0], 0, '.'), "Kokain:", HazInfo[haz][hazSzef][1], "Heroin:", HazInfo[haz][hazSzef][2], "Marihuana:", HazInfo[haz][hazSzef][3], "Material:", HazInfo[haz][hazSzef][4]);
				case 0: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ, DIALOG_STYLE_LIST, #COL_NARANCS"Pénz "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO, DIALOG_STYLE_LIST, #COL_NARANCS"Kokain "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 2: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO, DIALOG_STYLE_LIST, #COL_NARANCS"Heroin "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 3: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI, DIALOG_STYLE_LIST, #COL_NARANCS"Marihuana "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 4: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI, DIALOG_STYLE_LIST, #COL_NARANCS"Material "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 5:
				{
					new fegyv[1024], form[64], i = -1;

					new meddig = 5;

					if(PlayerInfo[playerid][pPremiumIdo] > gettime())
						if(PremiumCsomag(PlayerInfo[playerid][pPremiumCsomag]) != NINCS)
							meddig += TamogatasInfo[PremiumCsomag(PlayerInfo[playerid][pPremiumCsomag])][2];

					for(;++i < meddig;)
					{
						if(HazInfo[PlayerInfo[playerid][phaz]][hFegyver][i])
							format(form, 64, #COL_VZOLD"%s[%d] %s [%d]\n", ((i > 4) ? ("[PP] ") : ("")), i, aWeaponNames[HazInfo[PlayerInfo[playerid][phaz]][hFegyver][i]], HazInfo[PlayerInfo[playerid][phaz]][hTolteny][i]);
						else
							format(form, 64, #COL_VKEK"%s[%d] Üres\n", ((i > 4) ? ("[PP] ") : ("")), i);

						strins(fegyv, form, strlen(fegyv));
					}

					ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_FEGY, DIALOG_STYLE_LIST, #COL_NARANCS"Válassz "#COL_SZURKE"fegyvert!", fegyv, "Mehet", "Mégse");
					return true;
				}
				case 6:
				{
					new haz = PlayerInfo[playerid][phaz];
					nformat(k, 256, #COL_FEHER"Széf tartalma: \n\n%10s"#COL_VKEK"\t%s$\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d", \
					"Pénz:", FN(HazInfo[haz][hazSzef][0], 0, '.'), "Kokain:", HazInfo[haz][hazSzef][1], "Heroin:", HazInfo[haz][hazSzef][2], "Marihuana:", HazInfo[haz][hazSzef][3], "Material:", HazInfo[haz][hazSzef][4]);

					ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI, DIALOG_STYLE_MSGBOX, #COL_NARANCS"Statisztika", k, "Mehet", "Mégse");
				}
			}

			return true;
		}
		case DIALOG_HAZ_SZEF_PENZ:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			}

			return true;
		}
		case DIALOG_HAZ_SZEF_PENZ_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			if(KPegyenleg(playerid) < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi pénz!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

		    if(PlayerInfo[playerid][ppenz] >= strval(inputtext))
			{
				HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0] += strval(inputtext);
				GiveMoney(playerid,-strval(inputtext));
				SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%s$"#COL_FEHER"-ot a széfbe! Mostani házszéf egyenleg: "#COL_MKEK"%s$", FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0], 0, '.'));
	            nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Pénz: %s$ - Széfben: %s$", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0], 0, '.'));
				Log(FILE_HAZSZEF, cstr);
			}
			else { SCM(playerid, COL_MKEK, "Nincs elég pénzed!"); }

			
			return true;
		}
		case DIALOG_HAZ_SZEF_PENZ_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi pénz!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0] -= strval(inputtext);
			GiveMoney(playerid,strval(inputtext));
			SFM(playerid, COL_VZOLD, "Kitettél "#COL_MKEK"%s$"#COL_FEHER"-ot a széfbõl! Mostani házszéf egyenleg: "#COL_MKEK"%s$", FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0], 0, '.'));

			nformat(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Pénz: %s$ - Széfben: %s$", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_KOKO:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			}
			return true;
		}
		case DIALOG_HAZ_SZEF_KOKO_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			if(PlayerInfo[playerid][pKokain] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi kokain!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1] += strval(inputtext);
			PlayerInfo[playerid][pKokain] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%smg"#COL_FEHER" kokaint a széfbe! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1], 0, '.'));

			nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Kokain: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_KOKO_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi kokain!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1] -= strval(inputtext);
			PlayerInfo[playerid][pKokain] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kitettél "#COL_MKEK"%smg"#COL_FEHER" kokaint a széfbõl! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1], 0, '.'));

			nformat(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Kokain: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_HERO:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			}
			return true;
		}
		case DIALOG_HAZ_SZEF_HERO_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			if(PlayerInfo[playerid][pHeroin] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi heroin!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2] += strval(inputtext);
			PlayerInfo[playerid][pHeroin] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%smg"#COL_FEHER" heroint a széfbe! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2], 0, '.'));

			nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Heroin: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_HERO_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi heroin!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2] -= strval(inputtext);
			PlayerInfo[playerid][pHeroin] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%smg"#COL_FEHER" heroint a széfbõl! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2], 0, '.'));

			nformat(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Heroin: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_MARI:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			}
			return true;
		}
		case DIALOG_HAZ_SZEF_MARI_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			if(PlayerInfo[playerid][pMarihuana] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi marihuana!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3] += strval(inputtext);
			PlayerInfo[playerid][pMarihuana] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sg"#COL_FEHER" marihuanat a széfbe! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3], 0, '.'));

			nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Marihuana: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_MARI_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi marihuana!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3] -= strval(inputtext);
			PlayerInfo[playerid][pMarihuana] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%sg"#COL_FEHER" marihuanat a széfbõl! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3], 0, '.'));

			nformat(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Marihuana: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_MATI:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			}
			return true;
		}
		case DIALOG_HAZ_SZEF_MATI_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			if(PlayerInfo[playerid][pMaterial] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi material!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4] += strval(inputtext);
			PlayerInfo[playerid][pMaterial] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sdb"#COL_FEHER" materialt a széfbe! Mostani házszéf mennyiség: "#COL_MKEK"%sdb", FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4], 0, '.'));

			nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Material: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_MATI_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi material!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4] -= strval(inputtext);
			PlayerInfo[playerid][pMaterial] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%sdb"#COL_FEHER" materialt a széfbõl! Mostani házszéf mennyiség: "#COL_MKEK"%sdb", FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4], 0, '.'));

			nformat(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Material: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FN(strval(inputtext), 0, '.'), FN(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_FEGYVEREK:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(PlayerInfo[playerid][pDuty][0] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND)
				return SCM(playerid, COL_LRED, "Szolgálatban nem használhatod!");

			new fegyv[1024], form[64], i = -1; //Név [lõszer]

			switch(listitem)
			{
				case 0..9:
				{
					if(PlayerInfo[playerid][pFegyver] && !FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem])
					{
						FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] = PlayerInfo[playerid][pFegyver];
						FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] = PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]];

						SFM(playerid, COL_VZOLD, "Beraktál egy "#COL_MKEK"%s"#COL_FEHER" tipusú fegyvert "#COL_MKEK"%ddb"#COL_FEHER" lõszerrel!", aWeaponNames[PlayerInfo[playerid][pFegyver]], PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);

						nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | Fegyver: [%d]%s - Töltény: %ddb", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], PlayerInfo[playerid][pFegyver], aWeaponNames[PlayerInfo[playerid][pFegyver]], PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);
						Log(FILE_FSZEF, cstr);

						PlayerInfo[playerid][pFegyverek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = 0;
						PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = 0;

						Fegyver(playerid, false);
						goto haribo;
						//return true;
					}

					else if(FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem])
					{
						if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
							return SCM(playerid, COL_LRED, "Nincs elegendõ rangod a páncélszekrénybõl való kivételhez!");

						if(PlayerInfo[playerid][pFegyver])
							if(SameWeaponSlot(PlayerInfo[playerid][pFegyver], FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]))
								return SCM(playerid, COL_LRED, "Már van ilyen típusú fegyvered!");

						PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
						GiveWeapon(playerid, FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem], FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]);
						SFM(playerid, COL_MKEK, "Kivettél egy "#COL_MKEK"%s"#COL_FEHER" típusú fegyvert "#COL_MKEK"%ddb"#COL_FEHER" lõszerrel!", aWeaponNames[FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]], FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]);

						new cstr[256];
						format(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Fegyver: [%d]%s - Töltény: %ddb", playerid, JatekosNev(playerid, false, true),
						PlayerInfo[playerid][pFrakcio],
						FInfo[PlayerInfo[playerid][pFrakcio]][fNev],
						FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem],
						aWeaponNames[FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]],
						FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]);

						Log(FILE_FSZEF, cstr);

						FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] = 0;
						FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] = 0;
						FkUpdate(PlayerInfo[playerid][pFrakcio], fuFegyverek);
						return true;
					} else {
						SCM(playerid, COL_LRED, "Ezen a sloton nincsen fegyver!");
						SCM(playerid, COL_MKEK, "Ha beszeretnél tenni fegyvert, akkor vedd elõ!");
						goto haribo;
					}
				}
				case 10:
				{
					if(PlayerInfo[playerid][pSzefFegyver] < 4)
						PlayerInfo[playerid][pSzefFegyver]++;
					else
						PlayerInfo[playerid][pSzefFegyver]--;
				}
				case 11:
					PlayerInfo[playerid][pSzefFegyver]--;
			}
			haribo:
			i = ((PlayerInfo[playerid][pSzefFegyver] * 10) - 1);

			for(;++i < ((PlayerInfo[playerid][pSzefFegyver] * 10) + 10);)
			{
				if(FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][i])
					format(form, 64, #COL_VZOLD"[%d] %s [%d]\n", i, aWeaponNames[FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][i]], FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][i]);
				else
					format(form, 64, #COL_VKEK"[%d] Üres\n", i);

				strins(fegyv, form, strlen(fegyv));
			}
			if(PlayerInfo[playerid][pSzefFegyver] != 4)
				strins(fegyv, "Tovább\n", strlen(fegyv));
			if(PlayerInfo[playerid][pSzefFegyver] > 0)
				strins(fegyv, "Vissza", strlen(fegyv));

			new cim[64];
			format(cim, 64, #COL_NARANCS"Válassz "#COL_SZURKE"fegyvert! "#COL_FEHER"(%d/5)", (PlayerInfo[playerid][pSzefFegyver] + 1));

			ShowPlayerDialog(playerid, DIALOG_FRAKCIO_FEGYVEREK, DIALOG_STYLE_LIST, cim, fegyv, "Mehet", "Mégse");
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuFegyverek);
			return true;
		}
		case DIALOG_FRAKCIO_SZEFMN: // széf minrang
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > 10)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_SZEFMN, DIALOG_STYLE_INPUT, "Széf minimum rang", ""#COL_PIROS"Hibás rang (Minimum 0 maximum 10 lehet)!\n"#COL_FEHER"Kérlek add meg, hogy a frakció tagjaid\nhanyas rangtól vehessenek ki a széfbõl tartalmat.", "Mentés", "Mégse");

			nformat(str, 128, ""#COL_FEHER"Széf minimum rang váltása sikeres!\nRégi: "#COL_MKEK"%d"#COL_FEHER" -> Új: "#COL_MKEK"%d", FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang], strval(inputtext));
			Info_Dialog(playerid, ""#COL_FEHER"Széf minimum rang", str);
			FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] = strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuSzefRang);
			return true;
		}
		case DIALOG_FRAKCIO_SZEF:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(egyezik(inputtext, "Pénz"))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ, DIALOG_STYLE_LIST, #COL_NARANCS"Pénz "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
			else if(egyezik(inputtext, "Kokain"))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO, DIALOG_STYLE_LIST, #COL_NARANCS"Kokain "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
			else if(egyezik(inputtext, "Heroin"))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO, DIALOG_STYLE_LIST, #COL_NARANCS"Heroin "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
			else if(egyezik(inputtext, "Marihuana"))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI, DIALOG_STYLE_LIST, #COL_NARANCS"Marihuana "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
			else if(egyezik(inputtext, "Material"))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI, DIALOG_STYLE_LIST, #COL_NARANCS"Material "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
			else if(egyezik(inputtext, "traffipax"))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_TRAFI, DIALOG_STYLE_LIST, #COL_NARANCS"traffipax "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
			else if(egyezik(inputtext, "Statisztika"))
			{
					new z = PlayerInfo[playerid][pFrakcio];
					nformat(k, 256, #COL_FEHER"Frakció széf tartalma: \n\n%10s"#COL_VKEK"\t%s$\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d", \
					"Pénz:", FN(FInfo[z][fPenz], 0, '.'), "Kokain:", FInfo[z][fKokain], "Heroin:", FInfo[z][fHeroin], "Marihuana:", FInfo[z][fMarihuana], "Material:", FInfo[z][fMaterial]);
					ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI, DIALOG_STYLE_MSGBOX, #COL_NARANCS"Statisztika", k, "Mehet", "Mégse");
			}
			else if(egyezik(inputtext, "Minimum rang"))
			{
				if(PlayerInfo[playerid][prang] < 10)
					return SCM(playerid, COL_LRED, "Ehhez a funkcióhoz minimum 10-es rang (Leader) szükséges!");
				else
					ShowPlayerDialog(playerid, DIALOG_FRAKCIO_SZEFMN, DIALOG_STYLE_INPUT, "Széf minimum rang", "Kérlek add meg, hogy a frakció tagjaid\nhanyas rangtól vehessenek ki a széfbõl tartalmat.", "Mentés", "Mégse");
			}
			return true;
		}
		case DIALOG_FRAKCIO_VALASZTAS:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			PlayerInfo[playerid][pFrakcioKezeles] = listitem;
			ShowPlayerDialog(playerid, DIALOG_FRAKCIO_SZEF_SZERK, DIALOG_STYLE_LIST, #COL_NARANCS"Széf "#COL_SZURKE"kezelés", "Lerak\nTörlés\nÁthelyezés\nTeleportálás", "Mehet", "Mégse");
			return true;
		}
		case DIALOG_FRAKCIO_SZEF_SZERK:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			new fid = FrakcioID(PlayerInfo[playerid][pFrakcioKezeles]);
			//"Lerak\nTörlés\nÁthelyezés"
			switch(listitem)
			{
				case 0:
				{
					if(FInfo[fid][fObjectID])
						return SCM(playerid, COL_LRED, "Egy széf már le van rakva!");

					new Float:ppos[3];
					GetPlayerPos(playerid, PosExt(ppos));

					FInfo[fid][fSzefPos][0] = ppos[0];
					FInfo[fid][fSzefPos][1] = ppos[1];
					FInfo[fid][fSzefPos][2] = ppos[2];
					FInfo[fid][fVW] = GetPlayerVirtualWorld(playerid);
					FInfo[fid][fInterior] = GetPlayerInterior(playerid);
					FInfo[fid][fObjectID] = CreateDynamicObject(2332, FInfo[fid][fSzefPos][0], FInfo[fid][fSzefPos][1], FInfo[fid][fSzefPos][2]-0.6, 0.0, 0.0, 0.0, FInfo[fid][fVW], FInfo[fid][fInterior]);
					FInfo[fid][fSzefObject] = true;
					FkUpdate(fid, fuSzefObject);
					Streamer_Update(playerid);

					EditDynamicObject(playerid, FInfo[fid][fObjectID]);
					return true;
				}
				case 1:
				{
					if(!FInfo[fid][fObjectID])
						return SCM(playerid, COL_LRED, "Nincs lerakva széf!");

					FInfo[fid][fSzefPos][0] = 0.0;
					FInfo[fid][fSzefPos][1] = 0.0;
					FInfo[fid][fSzefPos][2] = 0.0;
					FInfo[fid][fSzefPosR][0] = 0.0;
					FInfo[fid][fSzefPosR][1] = 0.0;
					FInfo[fid][fSzefPosR][2] = 0.0;
					FInfo[fid][fVW] = 0;
					FInfo[fid][fInterior] = 0;
					FInfo[fid][fSzefObject] = false;

					FInfo[fid][fPenz] = 0;
					FInfo[fid][fMaterial] = 0;
					FInfo[fid][fHeroin] = 0;
					FInfo[fid][fKokain] = 0;
					FInfo[fid][fMarihuana] = 0;
					FInfo[fid][fPenz] = 0;
					FInfo[fid][fTrafi] = 0;
					for(new i=0;i<MAX_FRAKCIO;i++)
					{
						for(new c=0;c<50;c++)
						{
							FInfo[fid][fFegyverek][c] = 0;
							FInfo[fid][fToltenyek][c] = 0;
							FkUpdate(i, fuFegyverek);
						}
					}

					FkUpdate(PlayerInfo[playerid][pFrakcio], fuSzefObject);

					DestroyDynamicObject(FInfo[fid][fObjectID]);
					FInfo[fid][fObjectID] = 0;
					SCM(playerid, COL_MKEK, "Széf és tartalma sikeresen törölve!");
					return true;
				}
				case 2:
				{
					if(!FInfo[fid][fObjectID])
						return SCM(playerid, COL_LRED, "Nincs lerakva széf!");

					/*new Float:ppos[3];
					GetPlayerPos(playerid, PosExt(ppos));
					SetDynamicObjectPos(FInfo[fid][fObjectID], PosExt(ppos));

					EditDynamicObject(playerid, FInfo[fid][fObjectID]);
					*/

					//----
					DestroyDynamicObject(FInfo[fid][fObjectID]);
					new Float:ppos[3];
					GetPlayerPos(playerid, PosExt(ppos));

					FInfo[fid][fSzefPos][0] = ppos[0];
					FInfo[fid][fSzefPos][1] = (ppos[1] + 1.5);
					FInfo[fid][fSzefPos][2] = ppos[2];
					FInfo[fid][fVW] = GetPlayerVirtualWorld(playerid);
					FInfo[fid][fInterior] = GetPlayerInterior(playerid);
					FInfo[fid][fObjectID] = CreateDynamicObject(2332, FInfo[fid][fSzefPos][0], FInfo[fid][fSzefPos][1], FInfo[fid][fSzefPos][2]-0.6, 0.0, 0.0, 0.0, FInfo[fid][fVW], FInfo[fid][fInterior]);
					FkUpdate(fid, fuSzefObject);
					Streamer_Update(playerid);

					EditDynamicObject(playerid, FInfo[fid][fObjectID]);
					return true;
				}
				case 3:
				{
					if(!FInfo[fid][fObjectID])
						return SCM(playerid, COL_LRED, "Nincs lerakva széf!");

					SetPos(playerid, FInfo[fid][fSzefPos][0], (FInfo[fid][fSzefPos][1] + 1), FInfo[fid][fSzefPos][2]);
					SetVirtualWorld(playerid, FInfo[fid][fVW]);
					SetInterior(playerid, FInfo[fid][fInterior]);
					SFM(playerid, COL_VZOLD, "Sikeresen oda teleportáltál a(z) "#COL_MKEK"%s"#COL_FEHER" frakció széféhez!", FInfo[fid][fNev]);
					return true;
				}
			}

			return true;
		}
		case DIALOG_FRAKCIO_PENZ:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1:
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
						SCM(playerid, COL_LRED, "Nincs elegendõ rangod a széfbõl való kivételhez!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_PENZ_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			if(KPegyenleg(playerid) < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi pénz!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] += strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuPenz);
			GiveMoney(playerid, -strval(inputtext));
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%s$"#COL_FEHER"-ot a széfbe! Mostani frakció egyenleg: "#COL_MKEK"%s$", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz], 0, '.'));

			nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | Pénz: %s$ - Széfben: %s$", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz], 0, '.'));
			Log(FILE_FSZEF, cstr);

			return true;
		}
		case DIALOG_FRAKCIO_PENZ_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi pénz!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] -= strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuPenz);
			GiveMoney(playerid, strval(inputtext));
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s$"#COL_FEHER"-ot a széfbõl! Mostani frakció egyenleg: "#COL_MKEK"%s$", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz], 0, '.'));

			nformat(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Pénz: %s$ - Széfben: %s$", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_KOKO:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1:
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
						SCM(playerid, COL_LRED, "Nincs elegendõ rangod a széfbõl való kivételhez!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_KOKO_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			if(PlayerInfo[playerid][pKokain] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi kokain!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fKokain] += strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuKokain);
			PlayerInfo[playerid][pKokain] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sg"#COL_FEHER" kokaint a széfbe! Mostani frakció mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fKokain], 0, '.'));

			nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%ms | Kokain: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fKokain], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_KOKO_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if(FInfo[PlayerInfo[playerid][pFrakcio]][fKokain] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi kokain!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if((PlayerInfo[playerid][pKokain] + strval(inputtext)) > P_MAX_KOKAIN)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_NARANCS"Ennyi nem fér el nálad!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fKokain] -= strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuKokain);
			PlayerInfo[playerid][pKokain] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%smg"#COL_FEHER" kokaint a széfbõl! Mostani frakció mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fKokain], 0, '.'));

			nformat(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Kokain: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fKokain], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_HERO:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1:
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
						SCM(playerid, COL_LRED, "Nincs elegendõ rangod a széfbõl való kivételhez!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_HERO_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			if(PlayerInfo[playerid][pHeroin] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi heroin!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin] += strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuHeroin);
			PlayerInfo[playerid][pHeroin] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%smg"#COL_FEHER" heroint a széfbe! Mostani frakció mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin], 0, '.'));

			nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | Heroin: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_HERO_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if(FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi heroin!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if((PlayerInfo[playerid][pHeroin] + strval(inputtext)) > P_MAX_HEROIN)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_NARANCS"Ennyi nem fér el nálad!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin] -= strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuHeroin);
			PlayerInfo[playerid][pHeroin] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%smg"#COL_FEHER" heroint a széfbõl! Mostani frakció mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin], 0, '.'));

			nformat(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Heroin: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_MARI:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1:
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
						SCM(playerid, COL_LRED, "Nincs elegendõ rangod a széfbõl való kivételhez!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_MARI_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			if(PlayerInfo[playerid][pMarihuana] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad marihuana!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana] += strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuMarihuana);
			PlayerInfo[playerid][pMarihuana] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sg"#COL_FEHER" marihuanat a széfbe! Mostani frakció mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana], 0, '.'));

			nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | Marihuana: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_MARI_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if(FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi marihuana!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if((PlayerInfo[playerid][pMarihuana] + strval(inputtext)) > P_MAX_MARIHUANA)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_NARANCS"Ennyi nem fér el nálad!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana] -= strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuMarihuana);
			PlayerInfo[playerid][pMarihuana] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kitettél "#COL_MKEK"%sg"#COL_FEHER" marihuanat a széfbõl! Mostani frakció mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana], 0, '.'));

			nformat(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Marihuana: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_MATI:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1:
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
						SCM(playerid, COL_LRED, "Nincs elegendõ rangod a széfbõl való kivételhez!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_MATI_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			if(PlayerInfo[playerid][pMaterial] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad !\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial] += strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuMaterial);
			PlayerInfo[playerid][pMaterial] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sdb"#COL_FEHER" materialt a széfbe! Mostani frakció mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial], 0, '.'));

			nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | Meterial: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_MATI_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if(FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi material!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if((PlayerInfo[playerid][pMaterial] + strval(inputtext)) > P_MAX_MATERIAL)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_NARANCS"Ennyi nem fér el nálad!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial] -= strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuMaterial);
			PlayerInfo[playerid][pMaterial] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kitettél "#COL_MKEK"%sg"#COL_FEHER" materialt a széfbõl! Mostani frakció mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial], 0, '.'));

			nformat(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Meterial: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		
		case DIALOG_FRAKCIO_TRAFI:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_TRAFI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"traffipax "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1:
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
						SCM(playerid, COL_LRED, "Nincs elegendõ rangod a széfbõl való kivételhez!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_TRAFI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"traffipax "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_TRAFI_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_TRAFI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"traffipax "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			if(PlayerInfo[playerid][pCuccok][BL_TRAFFIPAX] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_TRAFI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"traffipax "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad !\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fTrafi] += strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuTrafi);
			PlayerInfo[playerid][pCuccok][BL_TRAFFIPAX] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sdb"#COL_FEHER" traffipaxot a széfbe! Mostani frakció mennyiség: "#COL_MKEK"%sdb", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fTrafi], 0, '.'));

			nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | traffipax: %sdb - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fTrafi], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_TRAFI_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"traffipax "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if(FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"traffipax "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi material!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			if((PlayerInfo[playerid][pCuccok][BL_TRAFFIPAX] + strval(inputtext)) > P_MAX_traffipax)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"traffipax "#COL_SZURKE"kivétel", #COL_NARANCS"Ennyi nem fér el nálad!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");

			FInfo[PlayerInfo[playerid][pFrakcio]][fTrafi] -= strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuTrafi);
			PlayerInfo[playerid][pCuccok][BL_TRAFFIPAX] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%sdb"#COL_FEHER" traffipaxot a széfbõl! Mostani frakció mennyiség: "#COL_MKEK"%sg", FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fTrafi], 0, '.'));

			nformat(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Meterial: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FN(strval(inputtext), 0, '.'), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fTrafi], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
	    case DIALOG_LOGIN:
	    {
	        if(!response)
				Kick(playerid);

			if(strlen(inputtext) < 6 || strlen(inputtext) > 24)
			{
				if(PlayerInfo[playerid][probalkozasok] == MAX_PROBALKOZASOK) {
					Kapcsolodasok(playerid, 3, "Hibás jelszó!");
					Kick(playerid);
				}

				PlayerInfo[playerid][probalkozasok]++;
				format(uzenet, sizeof(uzenet), #COL_LRED"Hibás jelszó!\n"#COL_FEHER"Hátralévõ próbálkozások száma: %d/%d\nKérlek írd be a lentebbi mezõbe a jelszót!", PlayerInfo[playerid][probalkozasok], MAX_PROBALKOZASOK);
				ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Bejelentkezés", uzenet, "Belépés", "Mégse");
				SCM(playerid, COL_LRED, "Érvénytelen jelszó!");
				return true;
			}
			nformat(queryc, 256, "SELECT * FROM `"#MYSQL_JATEKOS_TABLA"` WHERE nev = '%s' AND jelszo = '%s'", JatekosNev(playerid), MD5_Hash(inputtext));
			mysql_tquery(sql_ID, queryc, "AdatBetoltes", "i", playerid);
			return true;
	    }
	    case DIALOG_REGISTER:
	    {
	        if(!response)
				return Kick(playerid);

			if(injectCheck(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Bejelentkezés", #COL_LRED"Sajnáljuk! A rendszer injectálásra is használható karaktert észlelt a jelszavadban!\nKérlek válassz másik jelszót:", "Belépés", "Mégse");

	        nformat(qry, 1024, "INSERT INTO `"#MYSQL_JATEKOS_TABLA"`(nev, jelszo, penz, admin, bankszamla, bankszamlaegyenleg, bankszamlapin, posx, posy, posz, angle) VALUES('%s', '%s', '1000', '0', '0', '0', '0', '0', '0', '0', '0')", returnName(playerid), MD5_Hash(inputtext));
			//mysql_function_query(sql_ID, qry, false, "", "");
			mysql_tquery(sql_ID, qry, "", "");

	        SCM(playerid, COL_MKEK, "Kérlek add meg a nemed!");
			ShowPlayerDialog(playerid, DIALOG_NEM, DIALOG_STYLE_LIST, "Nem", "Férfi\nNõ", "Mehet", "Mégse");
	        return true;
	    }
		case DIALOG_NEM:
		{
			if(!response)
				return Kick(playerid);

			nformat(quey, 256, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pnem = '%d' WHERE nev = '%s'", listitem + 1, JatekosNev(playerid));
			//mysql_function_query(sql_ID, quey, false, "", "");
			mysql_tquery(sql_ID, quey, "", "");

			SFM(playerid, COL_MKEK, "Szóval "#COL_MKEK"%s"#COL_FEHER" vagy!", NemVizsgalat(listitem + 1));
			SCM(playerid, COL_MKEK, "Kérlek add meg az életkorod!");

			ShowPlayerDialog(playerid, DIALOG_ELETKOR, DIALOG_STYLE_INPUT, "Életkor", "Kérlek írd a lentebbi mezõbe az életkorod! (18 - 80)", "Mehet", "Mégse");
			return true;
		}
		case DIALOG_ELETKOR:
		{
			if(!response)
				return Kick(playerid);

			if(18 > strval(inputtext) || strval(inputtext) > 80)
				return ShowPlayerDialog(playerid, DIALOG_ELETKOR, DIALOG_STYLE_INPUT, "Életkor", "Hibás életkort adtál meg (18 - 80)! Próbáld újra!", "Mehet", "Mégse");

			SFM(playerid, COL_MKEK, "Szóval "#COL_MKEK"%d"#COL_FEHER" éves vagy!", strval(inputtext));
			SCM(playerid, COL_MKEK, "Kérlek add meg a származásod!");
			nformat(qary, 256, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET peletkor = '%d' WHERE nev = '%s'", strval(inputtext), JatekosNev(playerid));
			//mysql_function_query(sql_ID, qary, false, "", "");
			mysql_tquery(sql_ID, qary, "", "");
			ShowPlayerDialog(playerid, DIALOG_SZARMAZAS, DIALOG_STYLE_LIST, "Származás", "USA\nEurópa\nÁzsia", "Mehet", "Mégse");
			return true;
		}
		case DIALOG_SZARMAZAS:
		{
			if(!response)
				return Kick(playerid);
			PlayerInfo[playerid][pszarmazas] = listitem + 1;
			SFM(playerid, COL_MKEK, "Szóval "#COL_MKEK"%s"#COL_FEHER" származású vagy!", Szarmazas(listitem + 1));
			SCM(playerid, COL_MKEK, "Sikeresen regisztráltál!");
			SCM(playerid, COL_MKEK, "Kérlek jelentkezz be!");


			nformat(queryr, 256, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pszarmazas = '%d' WHERE nev = '%s'", listitem + 1, JatekosNev(playerid));
			//mysql_function_query(sql_ID, queryr, false, "", "");
			mysql_tquery(sql_ID, queryr, "", "");
			ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Bejelentkezés", #COL_FEHER"Kérlek írd be a lentebbi mezõbe a jelszót!", "Belépés", "Mégse");
			return true;
		}
	    case DIALOG_TELEPORTOK:
	    {
	        if(!response) return false;
	        new teleportciklus = -1, tid = 0;
			for(;++teleportciklus < MAX_TELEPORT;)
			{
			    if(TPInfo[teleportciklus][tphasznalva] && TPInfo[teleportciklus][listid] == listitem)
			    {
			        tid = teleportciklus;
			        break;
			    }
			}

			if(!strlen(TPInfo[tid][tpnev]))
				return SCM(playerid, COL_LRED, "Hiba történt a teleport betöltése során!");

			if(IsPlayerInAnyVehicle(playerid))
			{
			    new vehicleid = GetPlayerVehicleID(playerid);

			    SetVehiclePos(vehicleid, TPInfo[tid][tposx], TPInfo[tid][tposy], TPInfo[tid][tposz]);
			    SetVehicleZAngle(vehicleid, TPInfo[tid][tangle]);

				LinkVehicleToInterior(vehicleid, TPInfo[tid][tinterior]);
				SetVehicleVirtualWorld(vehicleid, TPInfo[tid][tvw]);

				SetVirtualWorld(playerid, TPInfo[tid][tvw]);
				SetInterior(playerid, TPInfo[tid][tinterior]);
			    return true;

			} else {
			    SetPos(playerid, TPInfo[tid][tposx], TPInfo[tid][tposy], TPInfo[tid][tposz], TPInfo[tid][tangle]);
				SetVirtualWorld(playerid, TPInfo[tid][tvw]);
				SetInterior(playerid, TPInfo[tid][tinterior]);
			}
			SFM(playerid, COL_MKEK, "Sikeresen elteleportáltál ide: "#COL_MKEK"%s", TPInfo[tid][tpnev]);
	        return true;
	    }
	    case DIALOG_GPSEK:
	    {
			if(!response) return false;
	        new GPSCiklus = -1, tid = 0;
			for(;++GPSCiklus < MAXGPS;)
			{
			    if(GPSInfo[GPSCiklus][gHasznalva] && GPSInfo[GPSCiklus][listid] == listitem)
			    {
			        tid = GPSCiklus;
			        break;
			    }
			}
			if(!strlen(GPSInfo[tid][gnev]))
			{
				SendClientMessage(playerid, 0xff6347AA, "Hiba történt a GPS betöltése során!");
				return 1;
			}
			SetPlayerCheckpoint(playerid, GPSInfo[tid][gposx], GPSInfo[tid][gposy], GPSInfo[tid][gposz], 3.0);
			SendFormatMessage(playerid, 0x1d92ffAA, "Sikeresen elindult a tervezés ide: "#COL_MKEK"%s", GPSInfo[tid][gnev]);
	        return true;
		}
		case DIALOG_BENZINKUTAK:
		{
			if(!response) return false;
	        new benzinkutciklus = 0, visszateres = 0;

			for(;++benzinkutciklus < MAX_BENZINKUT;)
			{
			    if(BenzinkutInfo[benzinkutciklus][blistitem] == listitem)
			    {
			        visszateres = benzinkutciklus;
			        break;
			    }
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    new vehicleid = GetPlayerVehicleID(playerid);
			    SetVehiclePos(vehicleid, BenzinkutInfo[visszateres][bposx], BenzinkutInfo[visszateres][bposy], BenzinkutInfo[visszateres][bposz]);
			} else
				SetPlayerPos(playerid, BenzinkutInfo[visszateres][bposx], BenzinkutInfo[visszateres][bposy] + 1.0, BenzinkutInfo[visszateres][bposz]);
			SFM(playerid, COL_MKEK, "Sikeresen elteleportáltál ide: "#COL_MKEK"%s", BenzinkutInfo[visszateres][bnev]);
	        return true;
		}
		case DIALOG_ELADAS:
		{
			if(!response)
			{
				Cselekves(playerid, "elutasította az adásvételi szerzõdést");
				PlayerInfo[playerid][peladojarmu] = 0;
				PlayerInfo[playerid][peladokitol] = NINCS;
				PlayerInfo[playerid][pMegerosites] = NINCS;
				return false;
			}
            if(Fizetesmod[playerid] == 1)
			    return SCM(playerid, COL_LRED, "Nem fizethetsz bankkártyával!");
			    
			if(KPegyenleg(playerid) >= vInfo[PlayerInfo[playerid][peladojarmu]][vAr])
			{
				new db = Adat_Num( playerid, ADAT_JARMU ), vid = PlayerInfo[playerid][peladojarmu];
				if(!db || ((db + 1) <= MAX_HAZ_JARMU && PlayerInfo[playerid][pPremiumPont] >= PremiumPontKell[ADAT_JARMU - 1][1]))
				{
					if(db != 0)
					{
						if(PlayerInfo[playerid][pMegerosites] != playerid)
						{
							PlayerInfo[playerid][pMegerosites] = playerid;
							nformat(str, 128, ""#COL_FEHER"Biztos, hogy "#COL_MKEK"%d."#COL_FEHER" jármûre szeretnéd költeni a Prémium Pontod?\nHa igen kattints az igen gombra!", (db + 1));
							ShowPlayerDialog(playerid, DIALOG_ELADAS, DIALOG_STYLE_MSGBOX, "Adásvételi szerzõdés", str, "Igen", "Mégse");
							return true;
						}

						PlayerInfo[playerid][pMegerosites] = NINCS;
						PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_JARMU - 1][1];
						nformat(str, 128, "[Jármû]: %s | %s - %d[%d] | %s$ | Maradék PP: %d", JatekosNev(playerid), VehicleNames[ vInfo[vid][vModel] - 400 ], vInfo[vid][vID], vid, FN(vInfo[vid][vAr], 0, ','), PlayerInfo[playerid][pPremiumPont]);
						Log(FILE_PREMIUM, str);
					}

					new msgbox[256];
					format(vInfo[PlayerInfo[playerid][peladojarmu]][vTulaj], MAX_PLAYER_NAME, JatekosNev(playerid));
					PenzHozzaad(playerid, -vInfo[PlayerInfo[playerid][peladojarmu]][vAr]);
					GiveMoney(PlayerInfo[playerid][peladokitol], vInfo[PlayerInfo[playerid][peladojarmu]][vAr]);

					format(vInfo[PlayerInfo[playerid][peladojarmu]][vTulaj], MAX_PLAYER_NAME, JatekosNev(playerid));
					vInfo[PlayerInfo[playerid][peladojarmu]][vTulajID] = PlayerInfo[playerid][pID];
					Adat_Update( playerid, ADAT_JARMU );

					vUpdate(PlayerInfo[playerid][peladojarmu], vuTulaj);
					doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET Tulaj = '%s', TulajID = '%d'  WHERE ID = '%d'", JatekosNev(playerid, false, true),PlayerInfo[playerid][pID], PlayerInfo[playerid][peladojarmu]);

					Cselekves(playerid, "aláírta az adásvételi szerzõdést");
					SendFormatMessage(PlayerInfo[playerid][peladokitol], COLOR_WHITE, "Sikeresen eladtad a(z) "#COL_VKEK"%s "#COL_FEHER"típusú jármûved "#COL_VKEK"%s "#COL_FEHER"$-ért %s-nak/nek!", VehicleNames[GetVehicleModel(vInfo[PlayerInfo[playerid][peladojarmu]][vID])-400], FN(vInfo[PlayerInfo[playerid][peladojarmu]][vAr], 0, '.'), JatekosNev(playerid));
                    Adat_Update( PlayerInfo[playerid][peladokitol], ADAT_JARMU );

					format(msgbox, sizeof(msgbox), "Sikeresen megvetted %s jármûvét.\nTípus: %s Rendszám: %d\nHasználd egészséggel!", JatekosNev(PlayerInfo[playerid][peladokitol]), VehicleNames[GetVehicleModel(vInfo[PlayerInfo[playerid][peladojarmu]][vID])-400], PlayerInfo[playerid][peladojarmu]);
					ShowPlayerDialog(playerid, DIALOG_ELADAS2, DIALOG_STYLE_MSGBOX, "Sikeres vásárlás", msgbox, "OK", "");
					PlayerInfo[playerid][peladojarmu] = 0;
					PlayerInfo[playerid][peladokitol] = NINCS;
				}
			} else
				SCM(playerid, COL_LRED, "Nincs ennyi pénzed!");

			return true;
		}
		case DIALOG_KAPU_STATISZTIKA:
		{
		    if(!response)
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			switch(listitem)
			{
			    case 0:
			    {
			        KapuID[playerid] = UjKapuID();
			        Kapu[KapuID[playerid]][kVan] = true;
			        Kapu[KapuID[playerid]][kSzerkeszt] = true;
			        ShowPlayerDialog(playerid, DIALOG_KAPU_NEV, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", "Kérlek add meg az alábbi mezõbe\na kapu nevét!", "Mehet!", "Mégse!");
			        return true;
			    }
			    case 1:
			    {
					new kapuidje = GetClosestKapu(playerid);
					if(GetDistanceToKapu(playerid, kapuidje) < 15.0)
					{
					    KapuID[playerid] = kapuidje;
					    ShowPlayerDialog(playerid, DIALOG_KAPU_SZERKESZTES, DIALOG_STYLE_LIST, #COL_FEHER"Kapu "#COL_VKEK"szerkesztés", "Kapu pozíciójának modosítása\nKapu nevének módosítása\nKapu sebességének módosítása\nKapu jelszavának módosítása\nKapu frakciójának módosítása\nKapu nyitási távolságának modosítása\nKapu debugolása\nKapu végleges törlése", "Mehet!", "Mégse!");
					    return true;
					}
					return SCM(playerid, COL_LRED, "Nincs a közeledben kapu! Legalább 15 koordinátára kell, hogy legyen!");
			    }
			    case 2:
				{
				    new id = GetClosestKapu(playerid);
					if(GetDistanceToKapu(playerid, id) < 15.0)
					{
					    new info[512], hpw[64];
					    new Float:tav = Kapu[id][kTav], Float:seb = Kapu[id][kSpeed], md = Kapu[id][kModel], bool:mg = Kapu[id][kMozgo];

			  			format(info, sizeof(info), ""#COL_FEHER"Kapu ID: "#COL_VKEK"%d"#COL_FEHER"\nKapu Model ID: "#COL_VKEK"%d \n"#COL_FEHER"Kapu neve:"#COL_VKEK" %s \n", id, md, Kapu[id][kNev]);
			  			format(info, sizeof(info), "%s"#COL_FEHER"Nyitási távolság:"#COL_VKEK" %.1fm "#COL_FEHER"\nNyitási sebesség:"#COL_VKEK" %.1f \n",info, tav, seb);
			  			format(info, sizeof(info), "%s"#COL_FEHER"Rotációs nyitás aktív: "#COL_VKEK"%s \n",info, (mg == true ? ("Nem") : ("Igen")));

			  			if(Kapu[id][kHasznalo][0] == 0)
							format(hpw,sizeof(hpw), ""#COL_FEHER"Kapu nyitási jelszava: "#COL_VKEK"%d", Kapu[id][kKod]);
			  			else
						{
			  			   	new i = -1, num = GetHasznaloNum(id);
							for(;++i < MAX_KAPU_HASZNALO;)
							{
							    if(Kapu[id][kHasznalo][i] > 0)
							    {
									format(hpw, sizeof(hpw), "%s%d%s", hpw, Kapu[id][kHasznalo][i], (num > i + 1 ? (",") : ("")));
							    }
							}
							format(hpw,sizeof(hpw), ""#COL_FEHER"Kaput használó frakció(k): "#COL_VKEK"%s",hpw);
			  			}
			  			format(info, sizeof(info), "%s%s",info, hpw);
			  			format(info, sizeof(info), "%s\n"#COL_FEHER"Szerkesztés alatt: "#COL_VKEK"%s",info, (Kapu[id][kSzerkeszt] == true ? ("Igen") : ("Nem")));
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, #COL_FEHER"Kapu"COL_VKEK" részletes információi:", info, "Rendben", "");
						return true;
					}
					return SCM(playerid, COL_LRED, "Nincs a közeledben kapu! Legalább 15 koordinátára kell, hogy legyen!");
				}
			}
			return true;
		}
		case DIALOG_KAPU_NEV:
		{
		    if(!response)
		    {
		        Kapu[KapuID[playerid]][kVan] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				Kapu[KapuID[playerid]][kSzerkeszt] = false;
				KapuID[playerid] = NINCS;
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
		    }

		    if(strlen(inputtext) < 1 || strlen(inputtext) > 32)
		        return ShowPlayerDialog(playerid, DIALOG_KAPU_NEV, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", "Kérlek add meg az alábbi mezõbe\na kapu nevét!", "Mehet!", "Mégse!");

			format(Kapu[KapuID[playerid]][kNev], 32, inputtext);
		    ShowPlayerDialog(playerid, DIALOG_KAPU_MODEL, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"model", "Kérlek add meg az alábbi mezõbe\na kapu model ID-jét!\nPl: 980, 1495, 18755, 14856, 973, 8378,968(sorompó)", "Mehet!", "Mégse!");
		    return true;
		}
		case DIALOG_KAPU_NEV_SZERKESZTES:
		{
		    if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			new formatocska[256];
			format(formatocska, 256, "Kérlek add meg az alábbi mezõbe\na kapu nevét! Jelenlegi: %s", Kapu[KapuID[playerid]][kNev]);

		    if(strlen(inputtext) < 5 || strlen(inputtext) > 32)
		        return ShowPlayerDialog(playerid, DIALOG_KAPU_NEV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", formatocska, "Mehet!", "Mégse!");

			format(Kapu[KapuID[playerid]][kNev], 32, inputtext);
			nformat(querycske, 128, "UPDATE `"#MYSQL_KAPU_TABLA"` SET Nev = '%s' WHERE ID = '%d'", Kapu[KapuID[playerid]][kNev], KapuID[playerid]);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");
			SFM(playerid, COL_MKEK, "A kapu neve a következõ lett: "#COL_MKEK"%s!", Kapu[KapuID[playerid]][kNev]);
		    return true;
		}
		case DIALOG_KAPU_SZERKESZTES:
		{
		    if(!response) {
		        Kapu[KapuID[playerid]][kSzerkeszt] = false;
		        SzerkesztesAllas[playerid] = 0;
				KapuID[playerid] = NINCS;
				SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
				return true;
			}

		    switch(listitem)
		    {
		        case 0:
				{
				    if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

				    ShowPlayerDialog(playerid, DIALOG_KAPU_POZICIO, DIALOG_STYLE_LIST, #COL_FEHER"Kapu "#COL_VKEK"mozgatása", "Zárt pozició\nNyitott pozició", "Mehet!", "Mégse!");
		            return true;
		        }
		        case 1:
		        {
		            if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

	                new formatocska[256];
					format(formatocska, 256, "Kérlek add meg az alábbi mezõbe\na kapu nevét! Jelenlegi: %s", Kapu[KapuID[playerid]][kNev]);

					ShowPlayerDialog(playerid, DIALOG_KAPU_NEV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", formatocska, "Mehet!", "Mégse!");
		            return true;
		        }
		        case 2:
		        {
		            if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

					Kapu[KapuID[playerid]][kSzerkeszt] = true;
	                ShowPlayerDialog(playerid, DIALOG_KAPU_SEBESSEG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"sebesség állítás", "Írd a lentebbi mezõbe a kapu gyorsaságát! (min 1, max 15)\n"#COL_NARANCS"Ha az érték 0 a kapu rotációs nyitást fog végezni!", "Mehet!", "Mégse!");
		            return true;
		        }
		        case 3:
		        {
		            if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

	                ShowPlayerDialog(playerid, DIALOG_KAPU_KOD_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");
	                return true;
		        }
		        case 4:
		        {
		            if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

		            ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO_SZERK, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
		            return true;
		        }
		        case 5:
		        {
		            if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

					ShowPlayerDialog(playerid, DIALOG_KAPU_TAV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi mezõbe, hogy \nmilyen messzirõl használhassák a kaput! (min 1, max 15)", "Mehet!", "Mégse!");
		            return true;
		        }
		        case 6:
		        {
		            Kapu[KapuID[playerid]][kSzerkeszt] = false;
		            SCM(playerid, COL_MKEK, "A közeledben lévõ kapu szerkesztési folyamata alap helyzetbe állítva!");
		            return true;
		        }
		        case 7:
		        {
					if(Kapu[KapuID[playerid]][kSzerkeszt])
						return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

		            nformat(querycske, 128, "DELETE FROM `"#MYSQL_KAPU_TABLA"` WHERE ID = '%d'", KapuID[playerid]);
					//mysql_function_query(sql_ID, querycske, false, "", "");
					mysql_tquery(sql_ID, querycske, "", "");

		            AdminUzenet(COLOR_LIGHTRED,1, "%s törölt egy kaput! Obj: %d | Folyamat: DKSZ | SQLID: %d", JatekosNev(playerid),Kapu[KapuID[playerid]][kModel], KapuID[playerid]);

		            Kapu[KapuID[playerid]][kVan] = false;
		            Kapu[KapuID[playerid]][kSzerkeszt] = false;
					Kapu[KapuID[playerid]][kModel] = 0;
					Kapu[KapuID[playerid]][kTav] = 0.0;
					Kapu[KapuID[playerid]][kSpeed] = 0.0;
					Kapu[KapuID[playerid]][kPos][0] = 0.0;
					Kapu[KapuID[playerid]][kPos][1] = 0.0;
					Kapu[KapuID[playerid]][kPos][2] = 0.0;
					Kapu[KapuID[playerid]][kNPos][0] = 0.0;
					Kapu[KapuID[playerid]][kNPos][1] = 0.0;
					Kapu[KapuID[playerid]][kNPos][2] = 0.0;
					Kapu[KapuID[playerid]][kNRPos][0] = 0.0;
					Kapu[KapuID[playerid]][kNRPos][1] = 0.0;
					Kapu[KapuID[playerid]][kNRPos][2] = 0.0;
					Kapu[KapuID[playerid]][kZPos][0] = 0.0;
					Kapu[KapuID[playerid]][kZPos][1] = 0.0;
					Kapu[KapuID[playerid]][kZPos][2] = 0.0;
					Kapu[KapuID[playerid]][kZRPos][0] = 0.0;
					Kapu[KapuID[playerid]][kZRPos][1] = 0.0;
					Kapu[KapuID[playerid]][kZRPos][2] = 0.0;
					Kapu[KapuID[playerid]][kMozgo] = false;
					Kapu[KapuID[playerid]][kNyit] = false;
					Kapu[KapuID[playerid]][kVW] = NINCS;
					Kapu[KapuID[playerid]][kKod] = -1;
					DestroyDynamicObject(Kapu[KapuID[playerid]][kOID]);

					SzerkesztesAllas[playerid] = 0;
					KapuID[playerid] = NINCS;

		            SCM(playerid, COL_MKEK, "Közeledben lévõ kapu sikeresen törölve!");
		            return true;
		        }
		    }
		    return true;
		}
		case DIALOG_KAPU_TAV_SZERKESZTES:
		{
		    if(!response)
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			if((strval(inputtext) < 1 || strval(inputtext) > 15) || !IsNumeric(inputtext))
			    return ShowPlayerDialog(playerid, DIALOG_KAPU_TAV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi mezõbe, hogy milyen messzirõl használhassák a kaput! (min 1, max 15)", "Mehet!", "Mégse!");

			Kapu[KapuID[playerid]][kTav] = float(strval(inputtext));
			Kapu[KapuID[playerid]][kSzerkeszt] = false;
			SFM(playerid, COL_MKEK, "[Info]: Kapu távolsága átírva erre: "#COL_MKEK"%d", strval(inputtext));
			nformat(querycske, 128, "UPDATE `"#MYSQL_KAPU_TABLA"` SET Tav = '%f' WHERE ID = '%d'", Kapu[KapuID[playerid]][kTav], KapuID[playerid]);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");
			KapuID[playerid] = NINCS;
			return true;
		}
		case DIALOG_KAPU_SEBESSEG:
		{
		    if(!response)
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			if((strval(inputtext) < 0 || strval(inputtext) > 15) || !IsNumeric(inputtext))
			    return ShowPlayerDialog(playerid, DIALOG_KAPU_SEBESSEG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"sebesség állítás", "Írd a lentebbi mezõbe a kapu gyorsaságát! (min 1, max 15)\n"#COL_NARANCS"Ha az érték 0 a kapu rotációs nyitást fog végezni!", "Mehet!", "Mégse!");

			if(float(strval(inputtext)) == 0.0) {
			    Kapu[KapuID[playerid]][kMozgo] = false;
			    Kapu[KapuID[playerid]][kSpeed] = 0.0;
			    SCM(playerid, COL_MKEK, "Kapu sebessége 0-ra állítva, rotációs nyitása bekapcsolva!");
			} else {
				Kapu[KapuID[playerid]][kMozgo] = true;
				Kapu[KapuID[playerid]][kSpeed] = float(strval(inputtext));
				SFM(playerid, COL_MKEK, "Kapu sebessége átírva erre: "#COL_MKEK"%d", strval(inputtext));
			}

			Kapu[KapuID[playerid]][kSzerkeszt] = false;
			nformat(querycske, 128, "UPDATE `"#MYSQL_KAPU_TABLA"` SET Speed = '%f' WHERE ID = '%d'", Kapu[KapuID[playerid]][kSpeed], KapuID[playerid]);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");
			KapuID[playerid] = NINCS;
			return true;
		}
		case DIALOG_KAPU_KOD_SZERKESZTES:
		{
		    if(!response)
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			if((strlen(inputtext) < 3 || strlen(inputtext) > 6) || !IsNumeric(inputtext))
			    return ShowPlayerDialog(playerid, DIALOG_KAPU_KOD_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");

			Kapu[KapuID[playerid]][kKod] = strval(inputtext);

			SFM(playerid, COL_MKEK, "A kapu jelszava a következõ lett: "#COL_MKEK"%d", strval(inputtext));

			new i = -1;
			for(;++i < MAX_KAPU_HASZNALO;)
				Kapu[KapuID[playerid]][kHasznalo][i] = 0;

			return true;
		}
		case DIALOG_KAPU_FRAKCIO_SZERK:
		{
		    if(!response)
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			new valamicske = NumCharacter(inputtext, ','), formatsscanf[16];

			if((valamicske + 1 < 0) || (valamicske + 1 > MAX_KAPU_HASZNALO))
			    return ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO_SZERK, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");

			format(formatsscanf, sizeof(formatsscanf), "p<,>a<i>[%d]", valamicske + 1);
			sscanf(inputtext, formatsscanf, Kapu[KapuID[playerid]][kHasznalo]);
			new i = -1;
			for(;++i < MAX_KAPU_HASZNALO;)
			{
			    if(Kapu[KapuID[playerid]][kHasznalo][i] > MAX_FRAKCIO)
			    {
			        SFM(playerid, COL_MKEK, "A frakció száma minimum 1 és maximum %d lehet!", MAX_FRAKCIO);
			        ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO_SZERK, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
			        break;
			    }
			}

			Kapu[KapuID[playerid]][kSzerkeszt] = false;

			if(Kapu[KapuID[playerid]][kKod] != -1)
			    Kapu[KapuID[playerid]][kKod] = -1;

			nformat(querycske, 128, "UPDATE `"#MYSQL_KAPU_TABLA"` SET Hasznalo = '%s', Kod = '-1' WHERE ID = '%d'", inputtext, KapuID[playerid]);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");
			KapuID[playerid] = -1;
			SFM(playerid, COL_MKEK, "A kaput a következõ szervezetek használhatják: %s", inputtext);
			return true;
		}
		case DIALOG_KAPU_POZICIO:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

		    switch(listitem)
		    {
		        case 0:
		        {
					SzerkesztesAllas[playerid] = 3;
					Kapu[KapuID[playerid]][kSzerkeszt] = true;
		            SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2]);
		            SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2]);
		            EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
		            return true;
		        }
		        case 1:
		        {
					SzerkesztesAllas[playerid] = 4;
					Kapu[KapuID[playerid]][kSzerkeszt] = true;
		            SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kNPos][0], Kapu[KapuID[playerid]][kNPos][1], Kapu[KapuID[playerid]][kNPos][2]);
		            SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kNRPos][0], Kapu[KapuID[playerid]][kNRPos][1], Kapu[KapuID[playerid]][kNRPos][2]);
		            EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
		            return true;
		        }
		    }
			return true;
		}
		case DIALOG_KAPU_MODEL:
		{
		    if(!response)
		    {
		        Kapu[KapuID[playerid]][kVan] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				Kapu[KapuID[playerid]][kSzerkeszt] = false;
				KapuID[playerid] = NINCS;
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
			}

			if(!IsNumeric(inputtext))
			{
			    SCM(playerid, COL_LRED, "A Model ID csak szám lehet! Pl: 980, 1495, 18755, 14856, 973, 8378");
			    ShowPlayerDialog(playerid, DIALOG_KAPU_MODEL, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"model", "Kérlek add meg az alábbi mezõbe\na kapu Model ID-jét!\nPl: 980, 1495, 18755, 14856, 973, 8378", "Mehet!", "Mégse!");
			    return true;
			}

			Kapu[KapuID[playerid]][kModel] = strval(inputtext);
			ShowPlayerDialog(playerid, DIALOG_KAPU_TAVOLSAG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi\na kapu nyitási távolságát!", "Mehet!", "Mégse!");

			return true;
		}
		case DIALOG_KAPU_TAVOLSAG:
		{
		    if(!response)
		    {
		        Kapu[KapuID[playerid]][kVan] = false;
		        Kapu[KapuID[playerid]][kSzerkeszt] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				KapuID[playerid] = -1;
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
			}

			if(!IsNumeric(inputtext) || (strval(inputtext) < 0 || strval(inputtext) > 15))
			{
			    SCM(playerid, COL_LRED, "A távolságnak számban megadott értéknek kell lennie! (1-15 koordináta)");
			    ShowPlayerDialog(playerid, DIALOG_KAPU_TAVOLSAG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi\na kapu nyitási távolságát!", "Mehet!", "Mégse!");
			    return true;
			}

			Kapu[KapuID[playerid]][kTav] = float(strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_KAPU_VALASZTAS, DIALOG_STYLE_LIST, #COL_FEHER"Kapu "#COL_VKEK"titkosítás", "Frakció megadása\nKód megadása", "Mehet!", "Mégse!");

			return true;
		}
		case DIALOG_KAPU_VALASZTAS:
		{
		    if(!response)
		    {
		        Kapu[KapuID[playerid]][kVan] = false;
		        Kapu[KapuID[playerid]][kSzerkeszt] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				KapuID[playerid] = -1;
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
			}
			switch(listitem)
			{
			    case 0:
			    {
			        return ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
			    }
			    case 1:
			    {
					return ShowPlayerDialog(playerid, DIALOG_KAPU_KOD, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");
			    }
			}

			return true;
		}
		case DIALOG_KAPU_KOD:
		{
		    if(!response)
		    {
				Kapu[KapuID[playerid]][kVan] = false;
				Kapu[KapuID[playerid]][kSzerkeszt] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				KapuID[playerid] = -1;
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
			}

			if((strlen(inputtext) < 3 || strlen(inputtext) > 6) || !IsNumeric(inputtext))
			    return ShowPlayerDialog(playerid, DIALOG_KAPU_KOD, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");

			Kapu[KapuID[playerid]][kKod] = strval(inputtext);

			new Float:playerposok[3];
			GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);

			Kapu[KapuID[playerid]][kZPos][0] = playerposok[0] + 1.0;
			Kapu[KapuID[playerid]][kZPos][1] = playerposok[1] + 1.0;
			Kapu[KapuID[playerid]][kZPos][2] = playerposok[2] + 1.0;
			Kapu[KapuID[playerid]][kVW] = GetPlayerVirtualWorld(playerid);
			Kapu[KapuID[playerid]][kSpeed] = 3.0;

			Kapu[KapuID[playerid]][kOID] = CreateDynamicObject(Kapu[KapuID[playerid]][kModel], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2], GetPlayerVirtualWorld(playerid));
			Streamer_Update(playerid);
			SzerkesztesAllas[playerid] = 1;
			EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
			SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
			SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");
			SendClientMessage(playerid, COLOR_NAR,    "Elõször a kapu zárt, majd nyitott állapotát kell elmentened!");
			return true;
		}
		case DIALOG_KAPU_FRAKCIO:
		{
		    if(!response)
		    {
				Kapu[KapuID[playerid]][kVan] = false;
				Kapu[KapuID[playerid]][kSzerkeszt] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				KapuID[playerid] = -1;
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
			}

			new valamicske = NumCharacter(inputtext, ','), formatsscanf[16];
			if((valamicske + 1 < 0) || (valamicske + 1 > MAX_KAPU_HASZNALO))
			{
			    MEGISCSAKVISSZAJOVUNKIDEHALLODE:
			    ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
			    return true;
			}

			format(formatsscanf, sizeof(formatsscanf), "p<,>a<i>[%d]", valamicske + 1);
			sscanf(inputtext, formatsscanf, Kapu[KapuID[playerid]][kHasznalo]);
			new i = -1;
			for(;++i < MAX_KAPU_HASZNALO;)
			{
			    if(Kapu[KapuID[playerid]][kHasznalo][i] > MAX_FRAKCIO)
			    {
			        SFM(playerid, COL_LRED, "A frakció száma minimum 1 és maximum %d lehet!", MAX_FRAKCIO);
			        goto MEGISCSAKVISSZAJOVUNKIDEHALLODE;
			        break;
			    }
			}

			new Float:playerposok[3];
			GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);

			Kapu[KapuID[playerid]][kZPos][0] = playerposok[0] + 1.0;
			Kapu[KapuID[playerid]][kZPos][1] = playerposok[1] + 1.0;
			Kapu[KapuID[playerid]][kZPos][2] = playerposok[2] + 1.0;
			Kapu[KapuID[playerid]][kVW] = GetPlayerVirtualWorld(playerid);
			Kapu[KapuID[playerid]][kSpeed] = 3.0;
			Kapu[KapuID[playerid]][kKod] = -1;

			Kapu[KapuID[playerid]][kOID] = CreateDynamicObject(Kapu[KapuID[playerid]][kModel], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2], GetPlayerVirtualWorld(playerid));
			Streamer_Update(playerid);
			SzerkesztesAllas[playerid] = 1;
			EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
			SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
			SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");
			SendClientMessage(playerid, COLOR_NAR,    "Elõször a kapu zárt, majd nyitott állapotát kell elmentened!");
			return true;
		}
		case DIALOG_BUTOR_TORLES:
		{
			if(!response)
			{
				PlayerInfo[playerid][pSzButor] = NINCS;
				return SCM(playerid, COL_MKEK, "Bútor törlése visszavonva!");
			}

			new butorszam = PlayerInfo[playerid][pSzButor];

			new querycske[1024];
			format(querycske, sizeof(querycske), "DELETE FROM `butorok` WHERE id = '%d'", butorszam);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");

			ButorInfo[butorszam][butorPosX] = 0.0;
			ButorInfo[butorszam][butorPosY] = 0.0;
			ButorInfo[butorszam][butorPosZ] = 0.0;
			ButorInfo[butorszam][butorPosRX] = 0.0;
			ButorInfo[butorszam][butorPosRY] = 0.0;
			ButorInfo[butorszam][butorPosRZ] = 0.0;
			ButorInfo[butorszam][butorModel] = 0;
			ButorInfo[butorszam][butorVW] = 0;
			ButorInfo[butorszam][butorInterior] = 0;
			ButorInfo[butorszam][butorHasznalva] = false;
			ButorInfo[butorszam][butorMegveve] = false;
			DestroyDynamicObject(ButorInfo[butorszam][butorObject]);
			ButorInfo[butorszam][butorTipus] = NINCS;
			ButorInfo[butorszam][butorListitem] = NINCS;

			SCM(playerid, COL_MKEK, "Bútor sikeresen törölve!");
			return true;
		}
		case DIALOG_BUTOR_MEGVETEL:
		{
			new penz;
			if(!response)
			{
				NULLAZAS:
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosX] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosY] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosZ] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRX] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRY] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRZ] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorVW] = 0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorInterior] = 0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorHasznalva] = false;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorTipus] = NINCS;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem] = NINCS;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorModel] = 0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRX] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRY] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRZ] = 0.0;
				DestroyDynamicObject(ButorInfo[PlayerInfo[playerid][pSzButor]][butorObject]);
				PlayerInfo[playerid][pSzButor] = NINCS;
				return SCM(playerid, COL_MKEK, "Bútor visszavonva!");
			}
			switch(ButorInfo[PlayerInfo[playerid][pSzButor]][butorTipus])
			{
				case 1:
					penz = Butor_Asztal[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 2:
					penz = Butor_Ulogarnitura[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 3:
					penz = Butor_Kepek[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 4:
					penz = Butor_Lampak[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 5:
					penz = Butor_TV[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 6:
					penz = Butor_DVDHiFi[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 7:
					penz = Butor_Hangfal[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 8:
					penz = Butor_Szekreny[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 9:
					penz = Butor_Fotel[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 10:
					penz = Butor_Konyhabutor[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 11:
					penz = Butor_Huto[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 12:
					penz = Butor_Szamitogep[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 13:
					penz = Butor_Ajto[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 14:
					penz = Butor_Mosogep[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 15:
					penz = Butor_Nyomtato[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 16:
					penz = Butor_Agy[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 17:
					penz = Butor_WC[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 18:
					penz = Butor_Zuhanyzo[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 19:
					penz = Butor_Mosdo[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 20:
					penz = Butor_Szonyeg[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 21:
					penz = Butor_Szek[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 22:
					penz = Butor_Iroasztal[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 23:
					penz = Butor_Fal[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 24:
					penz = Butor_Szef[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
			}
			if(PlayerInfo[playerid][pBszPenz] < penz)
			{
				SCM(playerid, COL_LRED, "Sajnos nincs elegendõ fedezet a bankszámládon, hogy ezt megvehesd!");
				goto NULLAZAS;
			}

			new querycske[1024];
			format(querycske, sizeof(querycske), "INSERT INTO `butorok` VALUES (");
			format(querycske, sizeof(querycske), "%s'%d', ", querycske, PlayerInfo[playerid][pSzButor]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosX]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosY]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosZ]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRX]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRY]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRZ]);
			format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorModel]);
			format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorVW]);
			format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorInterior]);
			format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorTipus]);
			format(querycske, sizeof(querycske), "%s'%d')", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");

			ButorInfo[PlayerInfo[playerid][pSzButor]][butorMegveve] = true;
			PlayerInfo[playerid][pBszPenz] -= penz;

			SFM(playerid, COL_MKEK, "Sikeresen megvetted a berendezési tárgyat "#COL_MKEK"%s$"#COL_FEHER"-ért!", FN( penz, 0, ',' ));
			PlayerInfo[playerid][pSzButor] = NINCS;
			return true;
		}
		case DIALOG_SZABAD_BUTOROK_LISTA:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");

			new butorszam = ButorSzam(playerid);

			if(butorszam >= listitem + 1)
			{
				new butorindex = GetXButor(playerid, listitem + 1);
				PlayerInfo[playerid][pSzButor] = butorindex;
				ShowPlayerDialog(playerid, DIALOG_BUTOR_SZERKESZTES, DIALOG_STYLE_LIST, #COL_FEHER"Bútor "#COL_VKEK"szerkesztés", "Bútor mozgatása\nBútor törlése", "Mehet!", "Mégse!");
			} else
				ShowPlayerDialog(playerid, DIALOG_BUTOR_KATEGORIA, DIALOG_STYLE_LIST, #COL_FEHER"Válassz "#COL_VKEK"kategóriát!", "Asztal\nÜlõgarnitúra\nFestmények, képek\nLámpák\nTV-k\nDVD-k, HiFi-k\nHangfal\nSzekrény\nFotel\nKonyhabútor\nHûtõ\nSzámítógép\nAjtó\nMosógép\nNyomtató\nÁgy\nWC\nZuhanyzó\nMosdó\nSzõnyeg\nSzék\nÍróasztal\nFal\nSzéf", "Mehet!", "Mégse!");
			return true;
		}
		case DIALOG_BUTOR:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");

			new butorszam = ButorSzam(playerid);
			new butorok[2048];

			switch(listitem)
			{
				case 0:
				{
					if(HazInfo[GetPlayerVirtualWorld(playerid)][butorsz] == butorszam)
						return SCM(playerid, COL_LRED, "[Hiba]: A bútorok száma elérte a limitet!");

					ShowPlayerDialog(playerid, DIALOG_BUTOR_KATEGORIA, DIALOG_STYLE_LIST, #COL_FEHER"Válassz "#COL_VKEK"kategóriát!", "Asztal\nÜlõgarnitúra\nFestmények, képek\nLámpák\nTV-k\nDVD-k, HiFi-k\nHangfal\nSzekrény\nFotel\nKonyhabútor\nHûtõ\nSzámítógép\nAjtó\nMosógép\nNyomtató\nÁgy\nWC\nZuhanyzó\nMosdó\nSzõnyeg\nSzék\nÍróasztal\nFal\nSzéf", "Mehet!", "Mégse!");
					return true;
				}
				case 1:
				{
					SCM(playerid, COL_MKEK, "Kattints egy tetszõleges bútorra és válassz a lehetõségek közül, vagy kilépéshez használd az ESC gombot!");
					SelectObject(playerid);
					return true;
				}
				case 2:
				{
					new i = NINCS, butorfo[128], sorozat = 0,
					Float:tavolsag,hazszam = HazabanVan(playerid);
					for(;++i < MAXBUTORSZAM;)
					{
						if(ButorInfo[i][butorVW] == hazszam && ButorInfo[i][butorHasznalva])
						{
							new butornev[48];
							switch(ButorInfo[i][butorTipus])
							{
								case 1:
									format(butornev, sizeof(butornev), Butor_Asztal[ButorInfo[i][butorListitem]][butorNEV]);
								case 2:
									format(butornev, sizeof(butornev), Butor_Ulogarnitura[ButorInfo[i][butorListitem]][butorNEV]);
								case 3:
									format(butornev, sizeof(butornev), Butor_Kepek[ButorInfo[i][butorListitem]][butorNEV]);
								case 4:
									format(butornev, sizeof(butornev), Butor_Lampak[ButorInfo[i][butorListitem]][butorNEV]);
								case 5:
									format(butornev, sizeof(butornev), Butor_TV[ButorInfo[i][butorListitem]][butorNEV]);
								case 6:
									format(butornev, sizeof(butornev), Butor_DVDHiFi[ButorInfo[i][butorListitem]][butorNEV]);
								case 7:
									format(butornev, sizeof(butornev), Butor_Hangfal[ButorInfo[i][butorListitem]][butorNEV]);
								case 8:
									format(butornev, sizeof(butornev), Butor_Szekreny[ButorInfo[i][butorListitem]][butorNEV]);
								case 9:
									format(butornev, sizeof(butornev), Butor_Fotel[ButorInfo[i][butorListitem]][butorNEV]);
								case 10:
									format(butornev, sizeof(butornev), Butor_Konyhabutor[ButorInfo[i][butorListitem]][butorNEV]);
								case 11:
									format(butornev, sizeof(butornev), Butor_Huto[ButorInfo[i][butorListitem]][butorNEV]);
								case 12:
									format(butornev, sizeof(butornev), Butor_Szamitogep[ButorInfo[i][butorListitem]][butorNEV]);
								case 13:
									format(butornev, sizeof(butornev), Butor_Ajto[ButorInfo[i][butorListitem]][butorNEV]);
								case 14:
									format(butornev, sizeof(butornev), Butor_Mosogep[ButorInfo[i][butorListitem]][butorNEV]);
								case 15:
									format(butornev, sizeof(butornev), Butor_Nyomtato[ButorInfo[i][butorListitem]][butorNEV]);
								case 16:
									format(butornev, sizeof(butornev), Butor_Agy[ButorInfo[i][butorListitem]][butorNEV]);
								case 17:
									format(butornev, sizeof(butornev), Butor_WC[ButorInfo[i][butorListitem]][butorNEV]);
								case 18:
									format(butornev, sizeof(butornev), Butor_Zuhanyzo[ButorInfo[i][butorListitem]][butorNEV]);
								case 19:
									format(butornev, sizeof(butornev), Butor_Mosdo[ButorInfo[i][butorListitem]][butorNEV]);
								case 20:
									format(butornev, sizeof(butornev), Butor_Szonyeg[ButorInfo[i][butorListitem]][butorNEV]);
								case 21:
									format(butornev, sizeof(butornev), Butor_Szek[ButorInfo[i][butorListitem]][butorNEV]);
								case 22:
									format(butornev, sizeof(butornev), Butor_Iroasztal[ButorInfo[i][butorListitem]][butorNEV]);
								case 23:
									format(butornev, sizeof(butornev), Butor_Fal[ButorInfo[i][butorListitem]][butorNEV]);
								case 24:
									format(butornev, sizeof(butornev), Butor_Szef[ButorInfo[i][butorListitem]][butorNEV]);
							}
							tavolsag = GetPlayerDistanceFromPoint(playerid, ButorInfo[i][butorPosX], ButorInfo[i][butorPosY], ButorInfo[i][butorPosZ]);
							butorfo[0] = EOS;
							format(butorfo, sizeof(butorfo), #COL_FEHER"Slot %d: "#COL_VPIROS"%s "#COL_FEHER"("#COL_VKEK"%.1fm"#COL_FEHER")\n", sorozat + 1, butornev, tavolsag);
							strins(butorok, butorfo, strlen(butorok));
							sorozat++;
						}
					}
					i = NINCS;
					for(;++i < HazInfo[GetPlayerVirtualWorld(playerid)][butorsz] - sorozat;)
					{
						new butornev[48];
						butorfo[0] = EOS;
						format(butorfo, sizeof(butorfo), #COL_FEHER"Slot %d: "#COL_VZOLD"Szabad\n", i + sorozat + 1, butornev, tavolsag);
						strins(butorok, butorfo, strlen(butorok));
					}
					ShowPlayerDialog(playerid, DIALOG_SZABAD_BUTOROK_LISTA, DIALOG_STYLE_LIST, #COL_FEHER"Bútor "#COL_VKEK"lista", butorok, "Rendben!", "Mégse!");
					return true;
				}
				case 3:
				{
					if(PlayerInfo[playerid][phaz] == NINCS)
						return SCM(playerid, COL_LRED, "Nem vagy házban!");

					new i = -1, butorfo[128];
					for(;++i < HazInfo[PlayerInfo[playerid][phaz]][butorsz];)
					{
						butorfo[0] = EOS;
						format(butorfo, sizeof(butorfo), #COL_FEHER"Slot %d: %s%s", i + 1, (butorszam > i ? (#COL_VPIROS"Foglalt") : (#COL_VZOLD"Szabad")), (i % 2 ? ("\n") : ("\t\t\t")));
						strins(butorok, butorfo, strlen(butorok));
					}
					ShowPlayerDialog(playerid, DIALOG_SZABAD_BUTOROK, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"statisztika", butorok, "Értettem", "");
					return true;
				}
				case 4:
				{
					if(HazInfo[HazabanVan(playerid)][butorsz] == 50)
						return SCM(playerid, COL_LRED, "[Hiba]: Már kibõvítetted a slotokat!");

					nformat(form, 256, #COL_FEHER"Biztos, hogy prémium slotot akarsz vásárolni?\n\n"#COL_VKEK"Bõvítés ára: "#COL_FEHER"%d Prémium Pont\n"#COL_VKEK"Bútor slotok száma a bõvítés után: "#COL_FEHER"50", PremiumPontKell[ADAT_BUTOR - 1][1]);
					ShowPlayerDialog(playerid, DIALOG_BUTOR_PREMIUM, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"prémium slot vásárlás", form, "Mehet!", "Mégse!");
					return true;
				}
			}

			return true;
		}
		case DIALOG_BUTOR_PREMIUM:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Rendben, majd késõbb!");

			new hazszam = HazabanVan(playerid);
			if(PlayerInfo[playerid][pPremiumPont] >= PremiumPontKell[ADAT_BUTOR - 1][1])//kivéve ideiglenesen
			{
				PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_BUTOR - 1][1];
				HazInfo[hazszam][butorsz] = 50;
				SFM(playerid, COL_MKEK, "Sikeresen kibõvítetted a bútorok számát "#COL_MKEK"50"#COL_FEHER"-re! Ára: "#COL_MKEK"%d"#COL_FEHER" Prémium Pont", PremiumPontKell[ADAT_BUTOR - 1][1]);
			} else return SFM(playerid, COL_LRED, "Sajnálom, de neked nincs elég prémium pontod! "#COL_MKEK"%d"#COL_FEHER" Prémium Pont szükséges!", PremiumPontKell[ADAT_BUTOR - 1][1]);

			return true;
		}
		case DIALOG_BUTOR_VETEL:
		{
			if(!response)
				return ShowPlayerDialog(playerid, DIALOG_BUTOR_KATEGORIA, DIALOG_STYLE_LIST, #COL_FEHER"Válassz "#COL_VKEK"kategóriát!", "Asztal\nÜlõgarnitúra\nFestmények, képek\nLámpák\nTV-k\nDVD-k, HiFi-k\nHangfal\nSzekrény\nFotel\nKonyhabútor\nHûtõ\nSzámítógép\nAjtó\nMosógép\nNyomtató\nÁgy\nWC\nZuhanyzó\nMosdó\nSzõnyeg\nSzék\nÍróasztal\nFal", "Mehet!", "Mégse!");

			new Float:playerposok[4],szabadbutor = SzabadButorID();
			GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);

			switch(PlayerInfo[playerid][pButorKategoria])
			{
				case 1:
					ButorInfo[szabadbutor][butorModel] = Butor_Asztal[listitem][butorID];
				case 2:
					ButorInfo[szabadbutor][butorModel] = Butor_Ulogarnitura[listitem][butorID];
				case 3:
					ButorInfo[szabadbutor][butorModel] = Butor_Kepek[listitem][butorID];
				case 4:
					ButorInfo[szabadbutor][butorModel] = Butor_Lampak[listitem][butorID];
				case 5:
					ButorInfo[szabadbutor][butorModel] = Butor_TV[listitem][butorID];
				case 6:
					ButorInfo[szabadbutor][butorModel] = Butor_DVDHiFi[listitem][butorID];
				case 7:
					ButorInfo[szabadbutor][butorModel] = Butor_Hangfal[listitem][butorID];
				case 8:
					ButorInfo[szabadbutor][butorModel] = Butor_Szekreny[listitem][butorID];
				case 9:
					ButorInfo[szabadbutor][butorModel] = Butor_Fotel[listitem][butorID];
				case 10:
					ButorInfo[szabadbutor][butorModel] = Butor_Konyhabutor[listitem][butorID];
				case 11:
					ButorInfo[szabadbutor][butorModel] = Butor_Huto[listitem][butorID];
				case 12:
					ButorInfo[szabadbutor][butorModel] = Butor_Szamitogep[listitem][butorID];
				case 13:
					ButorInfo[szabadbutor][butorModel] = Butor_Ajto[listitem][butorID];
				case 14:
					ButorInfo[szabadbutor][butorModel] = Butor_Mosogep[listitem][butorID];
				case 15:
					ButorInfo[szabadbutor][butorModel] = Butor_Nyomtato[listitem][butorID];
				case 16:
					ButorInfo[szabadbutor][butorModel] = Butor_Agy[listitem][butorID];
				case 17:
					ButorInfo[szabadbutor][butorModel] = Butor_WC[listitem][butorID];
				case 18:
					ButorInfo[szabadbutor][butorModel] = Butor_Zuhanyzo[listitem][butorID];
				case 19:
					ButorInfo[szabadbutor][butorModel] = Butor_Mosdo[listitem][butorID];
				case 20:
					ButorInfo[szabadbutor][butorModel] = Butor_Szonyeg[listitem][butorID];
				case 21:
					ButorInfo[szabadbutor][butorModel] = Butor_Szek[listitem][butorID];
				case 22:
					ButorInfo[szabadbutor][butorModel] = Butor_Iroasztal[listitem][butorID];
				case 23:
					ButorInfo[szabadbutor][butorModel] = Butor_Fal[listitem][butorID];
				case 24:
					ButorInfo[szabadbutor][butorModel] = Butor_Szef[listitem][butorID];
			}

			ButorInfo[szabadbutor][butorPosX] = playerposok[0];
			ButorInfo[szabadbutor][butorPosY] = playerposok[1];
			ButorInfo[szabadbutor][butorPosZ] = playerposok[2];
			ButorInfo[szabadbutor][butorPosRX] = 0.0;
			ButorInfo[szabadbutor][butorPosRY] = 0.0;
			ButorInfo[szabadbutor][butorPosRZ] = 0.0;
			ButorInfo[szabadbutor][butorVW] = GetPlayerVirtualWorld(playerid);
			ButorInfo[szabadbutor][butorInterior] = GetPlayerInterior(playerid);
			ButorInfo[szabadbutor][butorHasznalva] = true;
			ButorInfo[szabadbutor][butorTipus] = PlayerInfo[playerid][pButorKategoria];
			ButorInfo[szabadbutor][butorListitem] = listitem;

			ButorInfo[szabadbutor][butorObject] = CreateDynamicObject(ButorInfo[szabadbutor][butorModel], playerposok[0] + 1.0, playerposok[1] + 2.0, playerposok[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

			Streamer_Update(playerid);
			PlayerInfo[playerid][pSzButor] = szabadbutor;
			SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
			SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");

			EditDynamicObject(playerid, ButorInfo[szabadbutor][butorObject]);
			PlayerInfo[playerid][pButorKategoria] = 0;

			return true;
		}
		case DIALOG_BUTOR_SZERKESZTES:
		{
			if(!response)
				return SCM(playerid, COL_LRED, "További szép napot!");

			switch(listitem)
			{
				case 0:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
					SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");

					EditDynamicObject(playerid, ButorInfo[PlayerInfo[playerid][pSzButor]][butorObject]);
					PlayerInfo[playerid][pSzButor] = NINCS;
				}
				case 1:
				{
					new formatalunk[512],nev[48],kategoria[32],butorszam = PlayerInfo[playerid][pSzButor];
					switch(ButorInfo[butorszam][butorTipus])
					{
						case 1:
						{
							kategoria = "Asztal";
							format(nev, sizeof(nev), Butor_Asztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 2:
						{
							kategoria = "Ülõgarnitúra";
							format(nev, sizeof(nev), Butor_Ulogarnitura[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 3:
						{
							kategoria = "Festmények, képek";
							format(nev, sizeof(nev), Butor_Kepek[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 4:
						{
							kategoria = "Lámpák";
							format(nev, sizeof(nev), Butor_Lampak[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 5:
						{
							kategoria = "TV-k";
							format(nev, sizeof(nev), Butor_TV[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 6:
						{
							kategoria = "DVD-k, HiFi-k";
							format(nev, sizeof(nev), Butor_DVDHiFi[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 7:
						{
							kategoria = "Hangfal";
							format(nev, sizeof(nev), Butor_Hangfal[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 8:
						{
							kategoria = "Szekrény";
							format(nev, sizeof(nev), Butor_Szekreny[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 9:
						{
							kategoria = "Fotel";
							format(nev, sizeof(nev), Butor_Fotel[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 10:
						{
							kategoria = "Konyhabútor";
							format(nev, sizeof(nev), Butor_Konyhabutor[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 11:
						{
							kategoria = "Hûtõ";
							format(nev, sizeof(nev), Butor_Huto[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 12:
						{
							kategoria = "Számítógép";
							format(nev, sizeof(nev), Butor_Szamitogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 13:
						{
							kategoria = "Ajtó";
							format(nev, sizeof(nev), Butor_Ajto[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 14:
						{
							kategoria = "Mosógép";
							format(nev, sizeof(nev), Butor_Mosogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 15:
						{
							kategoria = "Nyomtató";
							format(nev, sizeof(nev), Butor_Nyomtato[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 16:
						{
							kategoria = "Ágy";
							format(nev, sizeof(nev), Butor_Agy[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 17:
						{
							kategoria = "WC";
							format(nev, sizeof(nev), Butor_WC[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 18:
						{
							kategoria = "Zuhanyzó";
							format(nev, sizeof(nev), Butor_Zuhanyzo[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 19:
						{
							kategoria = "Mosdó";
							format(nev, sizeof(nev), Butor_Mosdo[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 20:
						{
							kategoria = "Szõnyeg";
							format(nev, sizeof(nev), Butor_Szonyeg[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 21:
						{
							kategoria = "Szék";
							format(nev, sizeof(nev), Butor_Szek[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 22:
						{
							kategoria = "Íróasztal";
							format(nev, sizeof(nev), Butor_Iroasztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 23:
						{
							kategoria = "Fal";
							format(nev, sizeof(nev), Butor_Fal[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 24:
						{
							kategoria = "Széf";
							format(nev, sizeof(nev), Butor_Szef[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
					}

					format(formatalunk, sizeof(formatalunk), #COL_FEHER"Biztos, hogy törölni akarod a következõ bútort?\n\n\n"#COL_VKEK"Bútor kategóriája: "#COL_FEHER"%s\n"#COL_VKEK"Bútor neve: "#COL_FEHER"%s", kategoria, nev);
					ShowPlayerDialog(playerid, DIALOG_BUTOR_TORLES, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"törlése", formatalunk, "Biztos!", "Mégse!");
				}
			}
			return true;
		}
		case DIALOG_BUTOR_KATEGORIA:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");

			if(ButorSzam(playerid) == HazInfo[GetPlayerVirtualWorld(playerid)][butorsz])
				return SCM(playerid, COL_LRED, "Sajnos te már nem vehetsz több berendezési tárgyat!");

			new butorstr[3000],i = NINCS;
			new butorformat[128], butorformat2[32];

			switch(listitem)
			{
				case 0:
				{
					PlayerInfo[playerid][pButorKategoria] = 1;

					for(;++i != sizeof(Butor_Asztal);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Asztal[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Asztal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Asztal[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Asztal[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Asztal", butorstr, "Mehet!", "Vissza!");
					return true;
				}
				case 1:
				{
					PlayerInfo[playerid][pButorKategoria] = 2;

					for(;++i != sizeof(Butor_Ulogarnitura);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Ulogarnitura[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Ulogarnitura[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Ulogarnitura[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Ulogarnitura[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Ülõgarnitúra", butorstr, "Mehet!", "Vissza!");
				}
				case 2:
				{
					PlayerInfo[playerid][pButorKategoria] = 3;

					for(;++i != sizeof(Butor_Kepek);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Kepek[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Kepek[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Kepek[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Kepek[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Festmények, képek", butorstr, "Mehet!", "Vissza!");
				}
				case 3:
				{
					PlayerInfo[playerid][pButorKategoria] = 4;

					for(;++i != sizeof(Butor_Lampak);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Lampak[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Lampak[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Lampak[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Lampak[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Lámpák", butorstr, "Mehet!", "Vissza!");
				}
				case 4:
				{
					PlayerInfo[playerid][pButorKategoria] = 5;

					for(;++i != sizeof(Butor_TV);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_TV[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_TV[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_TV[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_TV[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"TV-k", butorstr, "Mehet!", "Vissza!");
				}
				case 5:
				{
					PlayerInfo[playerid][pButorKategoria] = 6;

					for(;++i != sizeof(Butor_DVDHiFi);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_DVDHiFi[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_DVDHiFi[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_DVDHiFi[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_DVDHiFi[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"DVD-k, HiFi-k", butorstr, "Mehet!", "Vissza!");
				}
				case 6:
				{
					PlayerInfo[playerid][pButorKategoria] = 7;

					for(;++i != sizeof(Butor_Hangfal);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Hangfal[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Hangfal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Hangfal[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Hangfal[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Hangfal", butorstr, "Mehet!", "Vissza!");
					return true;
				}
				case 7:
				{
					PlayerInfo[playerid][pButorKategoria] = 8;

					for(;++i != sizeof(Butor_Szekreny);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szekreny[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Szekreny[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szekreny[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Szekreny[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Szekrény", butorstr, "Mehet!", "Vissza!");
				}
				case 8:
				{
					PlayerInfo[playerid][pButorKategoria] = 9;

					for(;++i != sizeof(Butor_Fotel);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Fotel[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Fotel[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Fotel[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Fotel[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Fotel", butorstr, "Mehet!", "Vissza!");
				}
				case 9:
				{
					PlayerInfo[playerid][pButorKategoria] = 10;

					for(;++i != sizeof(Butor_Konyhabutor);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Konyhabutor[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Konyhabutor[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Konyhabutor[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Konyhabutor[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Konyhabútor", butorstr, "Mehet!", "Vissza!");
				}
				case 10:
				{
					PlayerInfo[playerid][pButorKategoria] = 11;

					for(;++i != sizeof(Butor_Huto);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Huto[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Huto[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Huto[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Huto[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Hûtõ", butorstr, "Mehet!", "Vissza!");
				}
				case 11:
				{
					PlayerInfo[playerid][pButorKategoria] = 12;

					for(;++i != sizeof(Butor_Szamitogep);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szamitogep[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Szamitogep[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szamitogep[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Szamitogep[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Számítógép", butorstr, "Mehet!", "Vissza!");
				}
				case 12:
				{
					PlayerInfo[playerid][pButorKategoria] = 13;

					for(;++i != sizeof(Butor_Ajto);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Ajto[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Ajto[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Ajto[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Ajto[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Ajtó", butorstr, "Mehet!", "Vissza!");
					return true;
				}
				case 13:
				{
					PlayerInfo[playerid][pButorKategoria] = 14;

					for(;++i != sizeof(Butor_Mosogep);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Mosogep[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Mosogep[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Mosogep[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Mosogep[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Mosógép", butorstr, "Mehet!", "Vissza!");
				}
				case 14:
				{
					PlayerInfo[playerid][pButorKategoria] = 15;

					for(;++i != sizeof(Butor_Nyomtato);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Nyomtato[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Nyomtato[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Nyomtato[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Nyomtato[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Nyomtató", butorstr, "Mehet!", "Vissza!");
				}
				case 15:
				{
					PlayerInfo[playerid][pButorKategoria] = 16;

					for(;++i != sizeof(Butor_Agy);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Agy[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Agy[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Agy[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Agy[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Ágy", butorstr, "Mehet!", "Vissza!");
				}
				case 16:
				{
					PlayerInfo[playerid][pButorKategoria] = 17;

					for(;++i != sizeof(Butor_WC);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_WC[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_WC[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_WC[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_WC[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"WC", butorstr, "Mehet!", "Vissza!");
				}
				case 17:
				{
					PlayerInfo[playerid][pButorKategoria] = 18;

					for(;++i != sizeof(Butor_Zuhanyzo);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Zuhanyzo[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Zuhanyzo[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Zuhanyzo[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Zuhanyzo[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Zuhanyzó", butorstr, "Mehet!", "Vissza!");
				}
				case 18:
				{
					PlayerInfo[playerid][pButorKategoria] = 19;

					for(;++i != sizeof(Butor_Mosdo);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Mosdo[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Mosdo[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Mosdo[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Mosdo[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Mosdó", butorstr, "Mehet!", "Vissza!");
					return true;
				}
				case 19:
				{
					PlayerInfo[playerid][pButorKategoria] = 20;

					for(;++i != sizeof(Butor_Szonyeg);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szonyeg[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Szonyeg[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szonyeg[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Szonyeg[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Szõnyeg", butorstr, "Mehet!", "Vissza!");
				}
				case 20:
				{
					PlayerInfo[playerid][pButorKategoria] = 21;

					for(;++i != sizeof(Butor_Szek);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szek[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Szek[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szek[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Szek[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Szék", butorstr, "Mehet!", "Vissza!");
				}
				case 21:
				{
					PlayerInfo[playerid][pButorKategoria] = 22;

					for(;++i != sizeof(Butor_Iroasztal);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Iroasztal[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Iroasztal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Iroasztal[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Iroasztal[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Íróasztal", butorstr, "Mehet!", "Vissza!");
				}
				case 22:
				{
					PlayerInfo[playerid][pButorKategoria] = 23;

					for(;++i != sizeof(Butor_Fal);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Fal[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Fal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Fal[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Fal[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 1), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Fal", butorstr, "Mehet!", "Vissza!");
				}
				case 23:
				{
					PlayerInfo[playerid][pButorKategoria] = 24;

					for(;++i != sizeof(Butor_Szef);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szef[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Szef[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szef[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FN(Butor_Szef[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 1), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Széf", butorstr, "Mehet!", "Vissza!");
				}
			}

			return true;
		}
		case DIALOG_ADMIN:  
		{
			if(!PlayerInfo[playerid][pDefensed][1])
			{
				if(strcmp(PlayerInfo[playerid][pDefense], MD5_Hash(inputtext)) || !response || !strlen(inputtext))
				{
					if(Karakter_Ellenorzes(inputtext)) return ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Érvénytelen karakterek!", ""#COL_FEHER"Kérlek add meg az Admin jelszavad!", "Belépés", "Mégse");
					PlayerInfo[playerid][pDefensed][0]++;
					if(PlayerInfo[playerid][pDefensed][0] > 2 && PlayerInfo[playerid][pDefensed][0] < 4)
					{
						AdminUzenet(COLOR_GREEN, 1, "%s IP címre tiltva! Oka: Többszöri hibás Admin jelszó megadás", JatekosNev(playerid));
						nformat(str, 64, "Hibás Adminjelszó (%s)", JatekosNev(playerid));
						ServerBan(playerid, 0, str, NINCS, true, true, false);
					}
					ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_PIROS"Hibás jelszó!\n"#COL_FEHER"Kérlek add meg az Admin jelszavad!", "Belépés", "Mégse");
				}
				else
				{
					AdminUzenet(LKEK,1,"Admin %s "#COL_GREEN"bejelentkezett!",JatekosNev(playerid));
					Belepett[playerid] = true;
				}
			} else if(PlayerInfo[playerid][pDefensed][1] == 1) { //jelszó megadás
				if(Karakter_Ellenorzes(inputtext)) return ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Érvénytelen karakterek!", ""#COL_FEHER"Kérlek add meg az Admin jelszavad!", "Belépés", "Mégse");
				if(strlen(inputtext) < 4 || !response)	ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_FEHER"Kérlek add meg leendõ Admin jelszavad!\n"#COL_PIROS"Ne felejtsd el, mert minden belépésnél szükséged lesz rá!", "Mentés", "Mégse");
				else
				{
					format(PlayerInfo[playerid][pDefense], 64, "%s", MD5_Hash(inputtext));
					SFM(playerid, COL_MKEK, "Admin jelszavad ( "#COL_PIROS"%s"#COL_FEHER" ) rögzítve! Ne felejtsd el, mert minden belépésnél szükséged lesz rá!", inputtext);
					AdminUzenet(LKEK,1,"Admin %s "#COL_GREEN"bejelentkezett!",JatekosNev(playerid));
					Belepett[playerid] = true;
				}

			} else if(PlayerInfo[playerid][pDefensed][1] >= 3) { //jelszó váltás

				if(!response) return SCM(playerid, COL_MKEK, "Kiléptél az Admin jelszó váltó panelbõl!");
				if(Karakter_Ellenorzes(inputtext)) return ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Érvénytelen karakterek!", ""#COL_FEHER"Kérlek add meg az Admin jelszavad!", "Belépés", "Mégse");
				if((strcmp(PlayerInfo[playerid][pDefense], MD5_Hash(inputtext)) || strlen(inputtext) < 4) && PlayerInfo[playerid][pDefensed][1] == 3)
					return ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_PIROS"Hibás jelszó, kérlek próbáld újra!"#COL_FEHER"\nAdd meg jelenlegi jelszavad\naz Adminjelszó váltásához!", "Rendben", "Mégse");
				else
				{
					if(PlayerInfo[playerid][pDefensed][1] != 4)
					{
						PlayerInfo[playerid][pDefensed][1] = 4;
						ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_FEHER"Kérlek add meg a leendõ jelszavad!", "Mentés", "Mégse");
						return true;
					}
					format(PlayerInfo[playerid][pDefense], 64, "%s", MD5_Hash(inputtext));
					SFM(playerid, COL_MKEK, "Admin jelszavad ( "#COL_PIROS"%s"#COL_FEHER" ) megváltoztatva! Ne felejtsd el, mert minden belépésnél szükséged lesz rá!", inputtext);
				}
			}
			return true;
		}
		case DIALOG_MUNKA:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");

			new melyik = NINCS;

			if(IsPlayerInRangeOfPoint(playerid, 5.0, 1539.79, 1749.28, 10.83))
				melyik = 1; //városháza
			else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2474.286, -2119.997, 14.756))
				melyik = 0; //gyár

			/*
			//Munka define - Név, Szükséges tehetség pont - Legális? (1 = igen | 0 = nem)
			new Munkak[ MAX_MUNKA ][4][20] =
			{
				{MUNKA_KAMION, 			"Kamionos", 	100, 		1},
				{MUNKA_FAVAGO, 			"Favágó", 		50, 		1},
				{MUNKA_KUKA, 			"Kukás", 		0, 			1},
				{MUNKA_UTTISZTITO, 		"Úttisztító", 	0, 			1},
				{MUNKA_FEGYVER,			"Fegyvermester",0,			0},
				{MUNKA_FARMER,			"Farmer",		30,			1}
			};*/

			new i = NINCS, id, num = 0;
			for(;++i < sizeof(Munkak);)
			{
				if(Munkak[i][3][0] == melyik)
				{
					if(num == listitem)
					{
						id = i;
						break;
					}

					num++;
				}
			}
            if((!melyik && (Munkak[ id ][2][0] > PlayerInfo[playerid][pExp][3])) || (melyik && (Munkak[ id ][2][0] > PlayerInfo[playerid][pExp][1])))
				return SCM(playerid, COL_LRED, "Sajnálom, de ehhez a munkához még nincs elég tapasztalatod. Kérlek válassz másikat!");

			/*if(Munkak[ id ][0][0] == MUNKA_FEGYVER && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_MAFFIA)
				return SCM(playerid, COL_LRED, "Ezt a munkát csak Maffia tagjai vehetik fel!");

			if(Munkak[ id ][0][0] == MUNKA_DROG && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_BANDA)
				return SCM(playerid, COL_LRED, "Ezt a munkát csak Banda tagjai vehetik fel!");*/

			if((PlayerInfo[playerid][pMunka1] && PlayerInfo[playerid][pMunka1] == Munkak[ id ][0][0]) || (PlayerInfo[playerid][pMunka2] && PlayerInfo[playerid][pMunka2] == Munkak[ id ][0][0]))
				return SCM(playerid, COL_LRED, "Már van ilyen munkád!");

			if(Szint(playerid) < 3 && Munkak[ id ][0][0] == MUNKA_FAVAGO)
			    return SCM(playerid, COL_LRED,"Ezt a munkát csak LVL3-tól használhatod!");

			if(PlayerInfo[playerid][pMunka1])
				PlayerInfo[playerid][pMunka2] = Munkak[ id ][0][0];
			else
				PlayerInfo[playerid][pMunka1] = Munkak[ id ][0][0];

			nformat(str, 128, ""#COL_VZOLD"\nGratulálok, sikeresen elvállalatad a(z)\n"#COL_MKEK"%s"#COL_VZOLD" munkát!", Munkak[ id ][1]);
			Info_Dialog(playerid, ""#COL_FEHER"Munkavállalás", str);
			//PlayerInfo[playerid][pD_MunkaValt][0] = 0;
			//PlayerInfo[playerid][pD_MunkaValt][1] = 0;
			return true;
		}
		case DIALOG_KATONA_ENGEDELY:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			SFM(playerid, COL_VZOLD, "%s a "#COL_MKEK"%st"#COL_FEHER" a tagok számára!", (Katona_Engedelyek[listitem][1][0] == 0 ? ("Engedélyezted") : ("Tiltottad")), Katona_Engedelyek[listitem][0]);
			Katona_Engedelyek[listitem][1][0] = (Katona_Engedelyek[listitem][1][0] == 0 ? 1 : 0);
			return true;
		}
		case DIALOG_KATONA_FELVESZ:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(!Katona_Engedelyek[listitem][1][0])
				return SFM(playerid, COL_LRED, "A %s jelenleg nincs engedélyezve, így nem veheted fel!", Katona_Engedelyek[listitem][0]);

		//	if(Katona_Engedelyek[listitem][2][0] > PlayerInfo[playerid][prang])
		//		return SFM(playerid, COL_LRED, "Ehhez a felszereléshez minimum %d rangra van szükséged!", Katona_Engedelyek[listitem][2][0]);
			DeleteWeapon(playerid);
			switch(listitem)
			{
				case 0://Deputy Sheriff Generalist felszerelés
				{
					GiveWeapon(playerid, 3, 1, false, true);//rendbot
					GiveWeapon(playerid, 41, 500, false, true);//spray
				}
				case 1://Deputy Sheriff felszerelés
				{
					GiveWeapon(playerid, 24, 90, false, true);//deagle
					GiveWeapon(playerid, 3, 1, false, true);//rendbot
					GiveWeapon(playerid, 41, 500, false, true);//spray
				}
				case 2://Detective Bureau felszerelés
				{
					GiveWeapon(playerid, 24, 90, false, true);//deagle
				}
				case 3://SASD Emergency felszerelés
				{
					GiveWeapon(playerid, 29, 120, false, true);//MP5
					GiveWeapon(playerid, 24, 90, false, true);//rendbot
					GiveWeapon(playerid, 3, 1, false, true);//rendbot
					GiveWeapon(playerid, 41, 500, false, true);//spray
				}
				case 4://Tactical Response Unit felszerelés
				{
					GiveWeapon(playerid, 3, 1, false, true);//Bot
					GiveWeapon(playerid, 31, 330, false, true);//M4
					GiveWeapon(playerid, 17, 20, false, true);//Teargas
					GiveWeapon(playerid, 24, 90, false, true);//deagle
				}
				case 5://Tactical Response Sniper Unit felszerelés
				{
					GiveWeapon(playerid, 24, 90, false, true);//deagle
					GiveWeapon(playerid, 34, 90, false, true);//sniper
				}
			}
			SetSkin(playerid, Katona_Engedelyek[listitem][3][0], false);
			PlayerInfo[playerid][pDuty][1] = (gettime() + (3 * 60));
			nformat(str, 128, "<< Figyelem! %s felvette a %st! >>", JatekosNev(playerid), Katona_Engedelyek[listitem][0]);
			FrakcioUzenet(COLOR_YELLOW, FRAKCIO_KATONA, str, 9);
			SFM(playerid, COL_VZOLD, "Felvetted a "#COL_MKEK"%st"#COL_FEHER"!", Katona_Engedelyek[listitem][0]);
			SetArmor(playerid, MAX_ARMOR);
			SetHealth(playerid, MAX_HP);

			return true;
		}
		case DIALOG_FBI_ENGEDELY:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			SFM(playerid, COL_VZOLD, "%s a "#COL_MKEK"%st"#COL_FEHER" a tagok számára!", (FBI_Engedely[listitem][1][0] == 0 ? ("Engedélyezted") : ("Tiltottad")), FBI_Engedely[listitem][0]);
			FBI_Engedely[listitem][1][0] = (FBI_Engedely[listitem][1][0] == 0 ? 1 : 0);
			return true;
		}
		case DIALOG_FBI_FELVESZ:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			if(!FBI_Engedely[listitem][1][0])
				return SFM(playerid, COL_LRED, "A %s jelenleg nincs engedélyezve, így nem veheted fel!", FBI_Engedely[listitem][0]);

			switch(listitem)
			{
				case 0:
				{
					GiveWeapon(playerid, 24, 50, false, true);
					GiveWeapon(playerid, 3, 1, false, true);
					GiveWeapon(playerid, 41, 500, false, true);
				}
				case 1:
				{
					GiveWeapon(playerid, 24, 50, false, true);
					GiveWeapon(playerid, 43, 1, false, true);
					//GiveWeapon(playerid, 41, 500, false, true);
					//GiveWeapon(playerid, 29, 130, false, true);
				}
				case 2: // Magasszintû
				{
					GiveWeapon(playerid, 24, 80, false, true);
					GiveWeapon(playerid, 3, 1, false, true);
					GiveWeapon(playerid, 41, 500, false, true);
					GiveWeapon(playerid, 31, 300, false, true);
				}
				case 3:
				{
					GiveWeapon(playerid, 24, 80, false, true);
					GiveWeapon(playerid, 34, 50, false, true);
				}
			}

			//SetSkin(playerid, FBI_Engedely[listitem][3][0], false);
			nformat(str, 128, "<< Figyelem! %s felvette a %st! >>", JatekosNev(playerid), FBI_Engedely[listitem][0]);
			FrakcioUzenet(COLOR_YELLOW, FRAKCIO_FBI, str, 9);
			SFM(playerid, COL_VZOLD, "Felvetted a "#COL_MKEK"%st"#COL_FEHER"!", FBI_Engedely[listitem][0]);
			SetArmor(playerid, MAX_ARMOR);
			SetHealth(playerid, MAX_HP);

			return true;
		}
		case DIALOG_HOTDOG_MENU:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");


			if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < Etel_Menu[listitem][1][0])	return SFM(playerid, COL_LRED, "Nincs nálad %s$ készpénz!",FN(Etel_Menu[listitem][1][0]));
			else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < Etel_Menu[listitem][1][0]) return SFM(playerid, COL_LRED,"Nincs a bankszámládon %s$!",FN(Etel_Menu[listitem][1][0]));

			GiveMoney(playerid,-Etel_Menu[listitem][1][0]);
			CegPenz(BIZ_HOTDOG, Etel_Menu[listitem][1][0]);
			SFM(playerid, COL_VZOLD, "Vettél egy "#COL_MKEK"%s"#COL_FEHER"-t "#COL_MKEK"%d"#COL_FEHER"$-ért!", Etel_Menu[listitem][0], Etel_Menu[listitem][1][0]);
			nformat(str, 128, "vett egy %st a HotDog standnál..", Etel_Menu[listitem][0]);
			Cselekves(playerid, str);

			if(Etel_Menu[listitem][5][0] != NINCS )
				PlayerInfo[playerid][pCuccok][ Etel_Menu[listitem][5][0] ] ++;

			SetHealth(playerid, (PlayerInfo[playerid][pElet] + Etel_Menu[listitem][2][0]));
			Szukseglet(playerid, Etel_Menu[listitem][3][0], Etel_Menu[listitem][4][0]);
			return true;
		}
		case DIALOG_RENDSZAM:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");

			new vid = PlayerInfo[playerid][pProcess][2], jatekos = PlayerInfo[playerid][pProcess][1];
			if(strlen(inputtext) > 32 || strlen(inputtext) < 4 || Karakter_Ellenorzes(inputtext))
			{
				nformat(form, 256, ""#COL_PIROS"Helytelen szöveg! Minimum 4 és maximum 32 karakter lehet!"#COL_FEHER"\nAktuális rendszám: "#COL_MKEK"%d[%d]"#COL_FEHER"\nTulajdonos: "#COL_MKEK"%s", vInfo[vid][vID], vid, vInfo[vid][vTulaj]);
				ShowPlayerDialog(playerid, DIALOG_RENDSZAM, DIALOG_STYLE_INPUT, "Rendszámváltás", form , "Rendben", "Mégse");
				return true;
			}

			if(!IsPlayerConnected(jatekos) || vInfo[vid][vTulajID] != PlayerInfo[jatekos][pID])
			{
				SCM(playerid, COL_LRED, "Egy hiba történt! A másik fél nincs fent a szerveren!");
				PlayerInfo[playerid][pProcess][0] = 0;
				PlayerInfo[playerid][pProcess][1] = NINCS;
				PlayerInfo[playerid][pProcess][2] = 0;
				return true;
			}

			nformat(str, 256, ""#COL_FEHER"Felajánlás átadva!\nTulajdonos: "#COL_MKEK"%s"#COL_FEHER"\nJármûID: "#COL_MKEK"%d[%d]"#COL_FEHER"\nÚj rendszám: "#COL_MKEK"%s", vInfo[vid][vTulaj], vInfo[vid][vID], vid, inputtext);
			Info_Dialog(playerid, "Rendszámváltás", str);

			format(vInfo[vid][vRendszam], 32, "%s", inputtext);
			PlayerInfo[jatekos][pProcess][0] = PR_RENDSZAM;
			PlayerInfo[jatekos][pProcess][1] = playerid;
			PlayerInfo[jatekos][pProcess][2] = vid;

			format(str, sizeof(str), ""#COL_MKEK"%s"#COL_FEHER" szerelõ felajánlotta, hogy egyedi\nrendszámot készít számodra!\nJármûID: "#COL_MKEK"%d[%d]"#COL_FEHER"\nÁra: "#COL_MKEK"%d"#COL_FEHER" Prémium Pont\nÚj rendszám: "#COL_MKEK"%s", JatekosNev(playerid, true), vInfo[vid][vID], vid, PremiumPontKell[ADAT_RENDSZAM - 1][1], inputtext);
			ShowPlayerDialog(jatekos, DIALOG_RENDSZAM_ELFOGAD, DIALOG_STYLE_MSGBOX, "Rendszámváltás", str, "Elfogad", "Elutasít");
			return true;
		}
		case DIALOG_RENDSZAM_ELFOGAD:
		{
			new jatekos = PlayerInfo[playerid][pProcess][1], vid = PlayerInfo[ PlayerInfo[playerid][pProcess][1] ][pProcess][2];
			if(!response)
			{
				SCM(playerid, COL_LRED, "Elutasítottad a rendszámváltást!");
				SFM(jatekos, COL_LRED, "%s elutasította a rendszámváltást!", JatekosNev(playerid, true));
				vInfo[vid][vRendszam][0] = EOS;
				goto rdr_nullazas;
			}

			new Float:pos[3], Float:angle;
			GetVehiclePos(vInfo[vid][vID], PosExt(pos));
			GetVehicleZAngle(vInfo[vid][vID], angle);

			JarmuRendszam(vid);
			SetVehicleToRespawn(vInfo[vid][vID]);

			SetVehiclePos(vInfo[vid][vID], PosExt(pos));
			SetVehicleZAngle(vInfo[vid][vID], angle);

			PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_RENDSZAM - 1][1];
			SFM(playerid, COL_VZOLD, "Jármûved rendszáma sikeresen átírva! Új rendszámod: "#COL_MKEK"%s", vInfo[vid][vRendszam]);

			//new penz = floatround(strlen(vInfo[vid][vRendszam]) * PremiumPontKell[ADAT_RENDSZAM - 1][1]);
			SFM(jatekos, COL_VZOLD, "Jármû rendszáma sikeresen lecserélve! Új rendszám: "#COL_MKEK"%s", vInfo[vid][vRendszam]);
			//SFM(jatekos, COL_MKEK, "A szerelés díja "#COL_MKEK"%s$"#COL_FEHER" hozzáadva a fizetésedhez!", FN(penz, 0, ','));
			//PlayerInfo[jatekos][pFizetes] += penz;

			rdr_nullazas:
			//Szerelõ adatai
			PlayerInfo[ jatekos ][pProcess][0] = 0;
			PlayerInfo[ jatekos ][pProcess][1] = NINCS;
			PlayerInfo[ jatekos ][pProcess][2] = 0;

			PlayerInfo[playerid][pProcess][0] = 0;
			PlayerInfo[playerid][pProcess][1] = NINCS;
			PlayerInfo[playerid][pProcess][2] = 0;

			vUpdate(vid, vuRendszam);
		}
		case DIALOG_NEON:
		{
			new Neonok[7][32] =
			{
				{#COL_FEHER"Neon leszerelése"},
				{#COL_PIROS"Piros"},
				{#COL_MKEK"Kék"},
				{#COL_VZOLD"Zöld"},
				{#COL_CITROM"Sárga"},
				{#COL_ROZSA"Rózsaszín"},
				{#COL_FEHER"Fehér"}
			};

			switch(PlayerInfo[playerid][pProcess][3])
			{
				case 1:
				{
					switch( listitem )
					{
						case 0:
						{
							if(!vInfo[PlayerInfo[playerid][pProcess][2]][vNeon][0])
								return Info_Dialog(playerid, "Tuning ~ Neon", "Ebben a Jármûben nincs Neon!\nÍgy nincs mit szererelni!");
							new str[512], jatekos = PlayerInfo[playerid][pProcess][1];

							PlayerInfo[jatekos][pProcess][3] = 4;
							format(str, sizeof(str), ""#COL_FEHER"Szerelo "#COL_MKEK"%s"#COL_FEHER" felajánlotta, hogy leszereli a\n"#COL_MKEK"%s"#COL_FEHER" típusú jármuvedrol a Neont.\nBiztos le szeretnéd szereltetni?",
							JatekosNev(playerid, true), VehicleNames[ vInfo[PlayerInfo[playerid][pProcess][2]][vModel] - 400 ]);

							ShowPlayerDialog(jatekos, DIALOG_NEON, DIALOG_STYLE_MSGBOX, "Tuning ~ Neon", str, "Igen", "Nem");
							return true;
						}
						case 1 .. 6:
						{
							new jatekos = PlayerInfo[playerid][pProcess][1];

							PlayerInfo[jatekos][pProcess][0] = PR_NEON;
							PlayerInfo[jatekos][pProcess][1] = playerid;
							PlayerInfo[jatekos][pProcess][2] = PlayerInfo[playerid][pProcess][2];
							PlayerInfo[jatekos][pProcess][3] = 2;
							PlayerInfo[jatekos][pProcess][4] = listitem;

							new str[512];

							format(str, sizeof(str), ""#COL_FEHER"Szerelo "#COL_MKEK"%s"#COL_FEHER" felajánlotta, hogy beszerel a\n"#COL_MKEK"%s"#COL_FEHER" típusú jármuvedbe egy %s"#COL_FEHER" színu Neon-t.\nValóban szeretnéd ezt a fejlesztést?",
							JatekosNev(playerid, true), VehicleNames[ vInfo[PlayerInfo[playerid][pProcess][2]][vModel] - 400 ], Neonok[listitem]);

							ShowPlayerDialog(jatekos, DIALOG_NEON, DIALOG_STYLE_MSGBOX, "Tuning ~ Neon", str, "Igen", "Nem");

							format(str, sizeof(str), ""#COL_FEHER"Felajánlottad neki: "#COL_MKEK"%s"#COL_FEHER", hogy felszerelsz egy %s\n"#COL_FEHER"színu Neont a "#COL_MKEK"%s"#COL_FEHER" típusú jármujére!",
							JatekosNev(jatekos, true), Neonok[listitem], VehicleNames[ vInfo[ PlayerInfo[playerid][pProcess][2] ][vModel] - 400 ]);

							Info_Dialog(playerid, "Tuning ~ Neon", str);
							return true;
						}
					}
					return true;
				}
				case 2:
				{
					if(!response)
					{
						neon_nullazas:
						new jatekos = PlayerInfo[playerid][pProcess][1];

						for(new i = NINCS; ++i < 5;)
						{
							PlayerInfo[playerid][pProcess][i] = 0;
							PlayerInfo[jatekos][pProcess][i] = 0;
						}

						nformat(str, 128, ""#COL_MKEK"%s"#COL_FEHER" úgy döntött mégsem tart igény a Neonra\nezért a muvelet félbeszakadt!", JatekosNev(playerid, true));
						Info_Dialog(jatekos, "Tuning ~ Neon visszamondás", str);
						Info_Dialog(playerid, "Tuning ~ Neon visszamondás", "Neon fejlesztés visszavonva!");
						return true;
					}


					PlayerInfo[playerid][pProcess][3] = 3;//Mivel fizet
					ShowPlayerDialog(playerid, DIALOG_NEON, DIALOG_STYLE_LIST, "Tuning ~ Fizetési lehetoségek", ""#AR_NEON""#Penznem"\n2 000 Prémium pont", "Választ", "Mégsem");
					return true;
				}
				case 3:
				{
					if(!response)
						goto neon_nullazas;

					if(listitem == 0)
					{
						if(PlayerInfo[playerid][pBszPenz] < AR_NEON)
						{
							nformat(str, 128, ""#COL_FEHER"Nincs elegendõ pénzed ahhoz, hogy ezt kifizesd!\nA Neon ára %s"#Penznem"!", FN(AR_NEON, 0, ','));
							Info_Dialog(playerid, "Tuning ~ Neon", str);
							return true;
						}

						PlayerInfo[playerid][pBszPenz] -= AR_NEON;

						new str[256];
						format(str, 256, ""#COL_FEHER"Felszereltél egy %s"#COL_FEHER" színu Neont "#COL_MKEK"%s"#COL_FEHER" jármuvére!\nTípus: "#COL_MKEK"%s"#COL_FEHER"\nÁra: "#COL_MKEK"%s"#COL_FEHER""#Penznem" volt.",
						Neonok[listitem], JatekosNev(playerid, true), VehicleNames[ vInfo[ PlayerInfo[playerid][pProcess][2] ][vModel] - 400 ], FN(AR_NEON, 0, ','));

						Info_Dialog(PlayerInfo[playerid][pProcess][1], "Tuning ~ Neon", str);
					}
					else if(listitem == 1)
					{
						if(PlayerInfo[playerid][pPremiumPont] < PremiumPontKell[ADAT_NEON - 1][1])
						{
							nformat(str, 128, ""#COL_FEHER"Nincs elegendõ Prémium pontod ahhoz, hogy ezt megvehesd!\nA Neon ára %s Prémium pont!", FN(PremiumPontKell[ADAT_NEON - 1][1], 0, ','));
							Info_Dialog(playerid, "Tuning ~ Neon", str);
							return true;
						}

						new str[256];
						format(str, 256, ""#COL_FEHER"Felszereltél egy %s"#COL_FEHER" színu Neont "#COL_MKEK"%s"#COL_FEHER" jármuvére!\nTípus: "#COL_MKEK"%s"#COL_FEHER"\nÁra: "#COL_MKEK"%s"#COL_FEHER" Prémium pont volt.",
						Neonok[PlayerInfo[playerid][pProcess][4]], JatekosNev(playerid, true), VehicleNames[ vInfo[ PlayerInfo[playerid][pProcess][2] ][vModel] - 400 ], FN(PremiumPontKell[ADAT_NEON - 1][1], 0, ','));

						Info_Dialog(PlayerInfo[playerid][pProcess][1], "Tuning ~ Neon", str);

						PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_NEON - 1][1];
					}

					vInfo[ PlayerInfo[playerid][pProcess][2] ][vNeon][0] = PlayerInfo[playerid][pProcess][4];
					vUpdate(PlayerInfo[playerid][pProcess][2], vuNeon);

					FInfo[ FRAKCIO_SZERELO ][fPenz] += 20000;
					FkUpdate(FRAKCIO_SZERELO, fuPenz);

					SetVehicleNeon(PlayerInfo[playerid][pProcess][2], PlayerInfo[playerid][pProcess][4]);

					Streamer_Update(playerid);
					Streamer_Update(PlayerInfo[playerid][pProcess][1]);
					return true;
				}
				case 4:
				{
					new jatekos = PlayerInfo[playerid][pProcess][1];

					nformat(str, 128, "Leszerelted "#COL_MKEK"%s"#COL_FEHER" jármujérol a Neont", JatekosNev(playerid, true));
					Info_Dialog(jatekos, "Tuning ~ Neon visszamondás", str);
					Info_Dialog(playerid, "Tuning ~ Neon visszamondás", ""#COL_FEHER"Neon leszerelve!");

					vInfo[ PlayerInfo[playerid][pProcess][2] ][vNeon][0] = 0;
					vUpdate(PlayerInfo[playerid][pProcess][2], vuNeon);
					SetVehicleNeon(PlayerInfo[playerid][pProcess][2], 0);

					Streamer_Update(playerid);
					Streamer_Update(PlayerInfo[playerid][pProcess][1]);

					for(new i = NINCS; ++i < 5;)
					{
						PlayerInfo[playerid][pProcess][i] = 0;
						PlayerInfo[jatekos][pProcess][i] = 0;
					}

					return true;
				}
			}
		}
		case DIALOG_FEGYVERBOLT:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");

			if(!PlayerInfo[playerid][pEngedely][4])
				return SCM(playerid, COL_LRED, "Neked nincs fegyverengedélyed! Keresd fel a rendõrséget!");

			if(PlayerInfo[playerid][ppenz] < Fegyver_Lista[listitem][3][0])
				return SCM(playerid, COL_LRED, "Nincs elegendõ készpénzed ahhoz, hogy ezt megvehesd!");

			if(PlayerInfo[playerid][pFegyver])
				return SCM(playerid, COL_LRED, "Van a kezedben fegyver, elõször rakd el!");

			if(Fegyver_Lista[listitem][1][0] > 0 && SameWeaponSlot(PlayerInfo[playerid][pFegyverek][aWeaponSlotok[ Fegyver_Lista[listitem][1][0] ]], Fegyver_Lista[listitem][1][0]) && PlayerInfo[playerid][pMegerosites] != playerid)
			{
				SCM(playerid, COL_LRED, "Ezen a sloton már van fegyvered! Biztos, hogy felül akarod írni? Ha igen válaszd ki megint az adott fegyvert!");
				PlayerInfo[playerid][pMegerosites] = playerid;
				return true;
			}

			if(Fegyver_Lista[listitem][1][0] == -2 && (PlayerInfo[playerid][pCuccok][ BL_C4 ] + 1) > 2)
				return SCM(playerid, COL_LRED, "Egyszerre maximum 2 Composition 4 fér el nálad!");

			if(Fegyver_Lista[listitem][1][0] == NINCS && PlayerInfo[playerid][pPancel] > 70.0)
				return SCM(playerid, COL_LRED, "Jelenleg is van rajtad egy alig használt páncél!");

			PenzHozzaad(playerid,-Fegyver_Lista[listitem][3][0]);
			CegPenz(BIZ_FEGYVER, (Fegyver_Lista[listitem][3][0]/2));
			PlayerInfo[playerid][pMegerosites] = NINCS;

			if(Fegyver_Lista[listitem][1][0] == NINCS) SetArmor(playerid, Fegyver_Lista[listitem][2][0]);
			else if(Fegyver_Lista[listitem][1][0] == -2) PlayerInfo[playerid][pCuccok][ BL_C4 ] += Fegyver_Lista[listitem][2][0];
			else GiveWeapon(playerid, Fegyver_Lista[listitem][1][0], Fegyver_Lista[listitem][2][0], false, false);

			if(Fegyver_Lista[listitem][1][0] != NINCS)
			{
				SFM(playerid, COL_VZOLD, "Sikeresen megvetted a következõ fegyvert: "#COL_MKEK"%s", Fegyver_Lista[listitem][0]);
				SFM(playerid, COL_VZOLD, "Ára: "#COL_MKEK"%s"#COL_FEHER"$. Töltényszám: "#COL_MKEK"%d"#COL_FEHER"db", FN(Fegyver_Lista[listitem][3][0], 0, ','), Fegyver_Lista[listitem][2][0]);

			} else {

				SFM(playerid, COL_VZOLD, "Sikeresen vettél egy Golyóálló mellényt "#COL_MKEK"%s"#COL_FEHER"$-ért!", FN(Fegyver_Lista[listitem][3][0], 0, ','));
			}
		}
	}
    return false;
}

/*--------------------------------- [ OnDialogResponse vége! ] ---------------------------------------*/

stock Szukseglet(playerid, Float:eh = 0.0, Float:szuk = 0.0)
{
	if(eh != 0.0)
	{

		PlayerInfo[playerid][pEhseg] += eh;

		if(PlayerInfo[playerid][pEhseg] < 0.0) PlayerInfo[playerid][pEhseg] = 0.0;
		else if(PlayerInfo[playerid][pEhseg] > 100.0) PlayerInfo[playerid][pEhseg] = 100.0;

		SetPlayerProgressBarValue(playerid, EhsegBar[playerid], PlayerInfo[playerid][pEhseg]);
		//UpdatePlayerProgressBar(playerid, EhsegBar[playerid]);
	}

	if(szuk != 0.0)
	{
		PlayerInfo[playerid][pVizelet] += szuk;

		if(PlayerInfo[playerid][pVizelet] < 0.0) PlayerInfo[playerid][pVizelet] = 0.0;
		else if(PlayerInfo[playerid][pVizelet] > 100.0) PlayerInfo[playerid][pVizelet] = 100.0;

		SetPlayerProgressBarValue(playerid, VizeletBar[playerid], PlayerInfo[playerid][pVizelet]);
		//UpdatePlayerProgressBar(playerid, VizeletBar[playerid]);
	}
}

stock JatekosIDSzamlaszam(szamlaszam) //visszatér a játékos IDjével
{
	new visszateres = -1;
	foreach(Player, playerid)
	{
		if(Belepve(playerid) && (PlayerInfo[playerid][pBsz] == szamlaszam))
		{
			visszateres = playerid;
			break;
		}
	}
	return visszateres;
}
stock AjtoZar(playerid, carid, bool:kinyit=false, bool:lopas=false)
{
	if(!kinyit)
	{
		vInfo[carid][vZarva] = true;
		GameTextForPlayer(playerid, "~w~Jármû ~r~bezárva", 5000, 5);
		Cselekves(playerid, "bezárta a jármû ajtaját", 1);
	} else {
		vInfo[carid][vZarva] = false;
		GameTextForPlayer(playerid, "~w~Jármû ~g~kinyitva", 5000, 5);
		if(!lopas)	Cselekves(playerid, "kinyitotta a jármû ajtaját", 1);
	}

	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			if(!kinyit)
				SetVehicleParamsForPlayer(vInfo[carid][vID], i, 0, 1);
			else
				SetVehicleParamsForPlayer(vInfo[carid][vID], i, 0, 0);
		}
	}
	return true;
}

stock IsHelyesNev(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        new player[24], alahuzasok = 0;
        GetPlayerName(playerid,player,24);

		new cenzura[3][10] = { "buzi", "kocsog", "hulye" };

		for(new x = 0; x < sizeof(cenzura); x++)
		{
			if(strfind(player, cenzura[x], false) != -1)
				return false;
		}

        for(new n = 0; n < strlen(player); n++)
        {
        	if(player[n] == ']' || player[n] == '[' || player[n] == '_' && n == 0 || player[n] == '_' && n == (strlen(player) - 1))
				return false;
        	if(player[n] == '_')
			{
				if(player[n-1] == '_' || player[n+1] == '_')
					return false;
				else
					alahuzasok++;
			}
        }
        if(alahuzasok < 1 || alahuzasok > 2)
            return false;
    }
    return true;
}
stock NagyKezdobetusNev(playerid)
{
	if(!IsPlayerConnected(playerid))
		return false;

	new nev[MAX_PLAYER_NAME];
	nev = returnName(playerid);

	for(new n = 0; n < strlen(nev); n++)
	{
		if(n == 0 && nev[n] == chrtolower(nev[n]))
			return false;
		if(nev[n] == '_' && n > 0 && nev[n+1] == chrtolower(nev[n+1]))
			return false;
	}

	return true;
}
stock countWords(str[])
{
    new w = 0,i=w;
    while(str[i] == ' ') i++;
    for(; i < strlen(str); i++)
    {
        if(str[i] == ' ')
        {
            w++;
            while(str[i++] == ' '){}
        }
    }
    return w;
}
fpublic SetPlayerChatBubbleEx(playerid, forplayerid, color, text[])
{
	//playerid - aki felett
	//forplayerid - akinek mutatod
	new ido = countWords(text)*1000;
    if(IsValidDynamic3DTextLabel(v_chatBubble[forplayerid][playerid]))
    {
        stop v_chatBubbleTimer[forplayerid][playerid];
		UpdateDynamic3DTextLabelText(v_chatBubble[forplayerid][playerid], color, text);
		v_chatBubbleTimer[forplayerid][playerid] = defer HidePlayerChatBubble[ido](playerid, forplayerid);
        return 1;
    }
    v_chatBubble[forplayerid][playerid] = CreateDynamic3DTextLabel(text, color, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 1, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), forplayerid);

	v_chatBubbleTimer[forplayerid][playerid] = defer HidePlayerChatBubble[ido](playerid, forplayerid);
	Streamer_Update(forplayerid);
	Streamer_Update(playerid);
    return 1;
}
timer HidePlayerChatBubble[3000](playerid, forplayerid)
{
    DestroyDynamic3DTextLabel(v_chatBubble[forplayerid][playerid]);
	return 1;
}
stock getRandomLetter() {
    return 65 + random(52);
}
stock trunklateText(const szoveg[], const Float:szazalek)
{
	new string[256];
	strmid(string, szoveg, 0, 256);

	new hossz = strlen(string);
	new Float:szazaleklab = szazalek/100.0;
	new szazalekertek = floatround(hossz*szazaleklab, floatround_round);

	new cserelve, idx;
	while(szazalekertek > cserelve)
 	{
 	    if(string[idx] == ' '){ cserelve++; continue; }
		idx = random(hossz);
		cserelve++;
  		string[idx] = getRandomLetter();
	}
	return string;
}
stock ProxDetector(Float:radi, playerid, string[], col1, col2, col3, col4, col5, bool:ret = false, bool:cb = false)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:x, Float:y, Float:z;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		foreach(Player, i)
		{
			if(Belepve(i))
			{
				if(ret && i == playerid) continue;
				if(!PlayerInfo[i][pmindenthall])
				{
				    new VW = GetPlayerVirtualWorld(playerid);
				    new VW2 = GetPlayerVirtualWorld(i);
					GetPlayerPos(i, x, y, z);
					tempposx = (oldposx -x);
					tempposy = (oldposy -y);
					tempposz = (oldposz -z);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col1, string);
							if(cb) SetPlayerChatBubbleEx(playerid, i, 0xFFFFFFFF, string);
						}
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col2, string);
							if(cb) SetPlayerChatBubbleEx(playerid, i, 0xFFFFFFBB, string);
						}
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col3, string);
							if(cb) SetPlayerChatBubbleEx(playerid, i, 0xFFFFFF77, string);
						}
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col4, string);
							if(cb) SetPlayerChatBubbleEx(playerid, i, 0xFFFFFF55, string);
						}
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col5, string);
							if(cb) SetPlayerChatBubbleEx(playerid, i, 0xFFFFFF55, string);
						}
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}
	return true;
}

stock ProxDetectorOOC(Float:radi, playerid, string[], col1, col2, col3, col4, col5, bool:ret = false)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:x, Float:y, Float:z;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		foreach(Player, i)
		{
			if(Belepve(i))
			{
				if(ret && i == playerid) continue;
				if(PlayerInfo[i][pTog][2]) continue;

				if(!PlayerInfo[i][pmindenthall])
				{
				    new VW = GetPlayerVirtualWorld(playerid);
				    new VW2 = GetPlayerVirtualWorld(i);
					GetPlayerPos(i, x, y, z);
					tempposx = (oldposx -x);
					tempposy = (oldposy -y);
					tempposz = (oldposz -z);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col1, string);
						}
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col2, string);
						}
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col3, string);
						}
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col4, string);
						}
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col5, string);
						}
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}
	return true;
}

stock ProxDetectorEx(Float:radi, Float:oldposx, Float:oldposy, Float:oldposz, string[], col1, col2, col3, col4, col5, bool:ret = false)
{
	new Float:x, Float:y, Float:z;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	//radi = 2.0; //Trigger Radius
	foreach(Player, i)
	{
		if(Belepve(i))
		{
			if(ret) continue;
			if(!PlayerInfo[i][pmindenthall])
			{
			    new VW2 = GetPlayerVirtualWorld(i);
				new VW = VW2;   //egyszerûbb így megírni
				GetPlayerPos(i, x, y, z);
				tempposx = (oldposx -x);
				tempposy = (oldposy -y);
				tempposz = (oldposz -z);
				if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				{
					if(VW == VW2)
					{
						SendClientMessage(i, col1, string);
					}
				}
				else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				{
					if(VW == VW2)
					{
						SendClientMessage(i, col2, string);
					}
				}
				else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
					if(VW == VW2)
					{
						SendClientMessage(i, col3, string);
					}
				}
				else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
					if(VW == VW2)
					{
						SendClientMessage(i, col4, string);
					}
				}
				else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
					if(VW == VW2)
					{
						SendClientMessage(i, col5, string);
					}
				}
			}
			else
			{
				SendClientMessage(i, col1, string);
			}
		}
	}
	return true;
}
stock IsAKocsi(vmodel)
{
	if(!IsABicikli(vmodel) && !IsAMotor(vmodel) && !IsARepulo(vmodel) && !IsAHajo(vmodel))
		return true;

	return false;
}

public OnPlayerText(playerid, text[])
{
	if(egyezik(text,"!bulletflood"))
	{
		ServerBan(playerid,0,"[AC] Bullet Flood[2]", NINCS, true, true, true);
		return 0;
	}
	if(!Belepve(playerid))
	{
		SCM(playerid, COL_MKEK, "Kérlek elõször jelentkezz be, vagy regisztrálj a "#COL_MKEK"http://"#WEBOLDAL""#COL_FEHER" oldalon!");
		SelectTextDraw(playerid, 0xF7C25EAA);
		return false;
	}

	if(PlayerInfo[playerid][pSzunetel])
		CallLocalFunction("OnPlayerPause", "dd", playerid, 0);

	new str[256];
	if(!OOC_Ellenorzes(playerid, "Text", text))
		return false;
		
    if(iPhoneCallStatus[playerid] == 3)
	{
	    new strr[256];
	    format(strr, 256, "{00CCFF} [Telefon] mondja: {FFFFFF}%s", text);
	    SendClientMessage(callto[playerid], -1, strr);
	    format(strr, 256, "{CCCCCC} [Telefon] mondja: {FFFFFF}%s", text);
	    SendClientMessage(playerid, -1, strr);
	    return 0;
	}


//    if(FloodEllenorzes(playerid))

    
	if(PlayerInfo[playerid][pLeutve] == 1)
		{ SCM(playerid,COL_LRED,"Ha el vagy ájulva ne beszélj már mert a végén valaki szívrohamot kap a közeledben!"); return false; }

	new shid = PlayerInfo[playerid][pSegelyhivas];
	if(shid && shid != 102 && shid != 103 && shid != 104)//mentõ rendõr, tûzoltó hívás
	{
		format(str, sizeof(str), "[Telefon] %s mondja: %s", JatekosNev(playerid, true), text);
		ProxDetector(15.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, false, true);
		if(shid == 2 || shid == 3)//mentõ, tûzoltó
		{
			new zona[MAX_PLAYER_NAME];
			GetPlayer2DZone(playerid, zona, MAX_ZONE_NAME);
			format(PlayerInfo[playerid][pSegelyhivasOk], 128, "%s", text);
			PlayerInfo[playerid][pSegelyhivas] = (shid == 2 ? 102 : 103);//elfogadásra vár

			format(str, sizeof(str), "===================== [ "#COL_MKEK"Segélykérés"#COL_FEHER" ] =====================");
			FrakcioUzenet(COLOR_WHITE, (shid == 2 ? FRAKCIO_LAFD : FRAKCIO_LAFD), str);
			format(str, sizeof(str), "Hívó: "#COL_MKEK"%s"#COL_FEHER" | (( /lista )) | Info: "#COL_MKEK"%s", JatekosNev(playerid, true), text);
			FrakcioUzenet(COLOR_WHITE, (shid == 2 ? FRAKCIO_LAFD : FRAKCIO_LAFD), str);
			format(str, sizeof(str),"Helyszín: "#COL_MKEK"%s", zona);
			FrakcioUzenet(COLOR_WHITE, (shid == 2 ? FRAKCIO_LAFD : FRAKCIO_LAFD), str);
			SendClientMessage(playerid, COLOR_ALLDEPT, "{00CCFF} [Telefon] mondja: {FFFFFF}Rendben értesítettem az egységeket!");

			iPhoneCallStatus[playerid] = 0;
			iPhoneHivo[playerid] = false;
			iPhoneStatus[playerid] = 0;
			loop(0, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][PHONE]);
			loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);
			PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call]);
			TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][0]);
			TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][1]);
			
			return false;
		}
		else if(shid >= 4)//rendõrségi bejelentés
		{
			if(shid == 4)
			{
				new jatekos, bool:ok, nev[MAX_PLAYER_NAME] = "Ismeretlen";
				sscanf(text, "u", jatekos);

				if(jatekos != INVALID_PLAYER_ID && Belepve(jatekos) && !IsPlayerNPC(jatekos)) ok = true;
				format(PlayerInfo[playerid][pSegelyhivasOt], MAX_PLAYER_NAME, "%s", (ok ? JatekosNev(jatekos, true) : nev));
				PlayerInfo[playerid][pSegelyhivas] = 5;
				SendClientMessage(playerid, COLOR_ALLDEPT, "{00CCFF} [Telefon] mondja: {FFFFFF}Rendben, most kérem indokolja pár szóban.");
			}
			else if(shid == 5)
			{
				new zona[MAX_PLAYER_NAME];
				GetPlayer2DZone(playerid, zona, MAX_ZONE_NAME);
				SendClientMessage(playerid, COLOR_ALLDEPT, "{00CCFF} [Telefon] mondja: {FFFFFF}Rendben máris intézkedünk!");
				format(PlayerInfo[playerid][pSegelyhivasOk], 128, "%s", text);
				PlayerInfo[playerid][pSegelyhivas] = 104;

				format(str, sizeof(str), "===================== [ "#COL_MKEK"Bejelentés"#COL_FEHER" ] =====================");
				FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
				format(str, sizeof(str), "Bejelentõ: "#COL_MKEK"%s"#COL_FEHER" | Személy : "#COL_MKEK"%s"#COL_FEHER" | Info: "#COL_MKEK"%s", JatekosNev(playerid, true), PlayerInfo[playerid][pSegelyhivasOt], text);
				FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
				format(str, sizeof(str),"Helyszín: "#COL_MKEK"%s", zona);
				FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
				
				iPhoneCallStatus[playerid] = 0;
				iPhoneHivo[playerid] = false;
				iPhoneStatus[playerid] = 0;
				loop(0, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][PHONE]);
				loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);
				PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call]);
				TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][0]);
				TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][1]);
			}
			else if(shid == 6)
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "{00CCFF} [Telefon] mondja: {FFFFFF}Rendben máris intézkedünk!");
				format(str, sizeof(str), "Ügyfél: "#COL_MKEK"%s"#COL_FEHER" | Telefonszám : "#COL_MKEK"%d"#COL_FEHER" | Info: "#COL_MKEK"%s", JatekosNev(playerid, true), PlayerInfo[playerid][pCuccok][BL_TELEFON], text);
				FrakcioUzenet(COLOR_WHITE, FRAKCIO_SZERELO, "Hívás érkezett az irodába.");
				FrakcioUzenet(COLOR_WHITE, FRAKCIO_SZERELO, str);
				
				iPhoneCallStatus[playerid] = 0;
				iPhoneHivo[playerid] = false;
				iPhoneStatus[playerid] = 0;
				loop(0, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][PHONE]);
				loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone][PPHONE]);
				PlayerTextDrawHide(playerid, g_PlayerTextDraw[playerid][ptd_iPhone_Call]);
				TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][0]);
				TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone_CallYesNo][1]);
				
			}
			return false;
		}
		return false;
	}

	if(Beirhatjahogyigen[playerid] > 0)
	{
		if(egyezik(text,"igen"))
		{
		    new string[1024];
			if(PlayerInfo[playerid][pnem] == 1 && PlayerInfo[Hazassag[playerid]][pnem] == 2)
			{
				format(string, sizeof(string), "Pap: %s es %s házastársaknak nyilványítalak titeket...Férj & Feleség, megcsókolhatod.", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Pap: %s es %s házastársaknak nyilványítalak titeket...Férj & Feleség, megcsókolhatod.", JatekosNev(Hazassag[playerid]), JatekosNev(playerid));
				SendClientMessage(Hazassag[playerid], COLOR_WHITE, string);
				foreach(Player,i)
				{
					SendFormatMessage(i,COLOR_WHITE,"Házasság: Van egy új Házas Párunk, %s & %s összeházasodott", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				}
			}
			else if(PlayerInfo[playerid][pnem] == 1 && PlayerInfo[Hazassag[playerid]][pnem] == 1)
			{
				format(string, sizeof(string), "Pap: %s es %s meleg társaknak nyilványítalak titeket...Férj & Férj, megcsókolhatod.", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Pap: %s es %s meleg társaknak nyilványítalak titeket...Férj & Férj, megcsókolhatod.", JatekosNev(Hazassag[playerid]), JatekosNev(playerid));
				SendClientMessage(Hazassag[playerid], COLOR_WHITE, string);
				foreach(Player,i)
				{
					SendFormatMessage(i,COLOR_WHITE,"Házasság: Van egy új meleg Párunk, %s & %s összeházasodott.", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				}
			}
			else if(PlayerInfo[playerid][pnem] == 2 && PlayerInfo[Hazassag[playerid]][pnem] == 2)
			{
				format(string, sizeof(string), "Pap: %s es %s meleg társaknak nyilványítalak titeket...Feleség & Feleség, megcsókolhatod.", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Pap: %s es %s meleg társaknak nyilványítalak titeket...Feleség & Feleség, megcsókolhatod.", JatekosNev(Hazassag[playerid]), JatekosNev(playerid));
				SendClientMessage(Hazassag[playerid], COLOR_WHITE, string);
				foreach(Player,i)
				{
					SendFormatMessage(i,COLOR_WHITE,"Házasság: Van egy új meleg Párunk, %s & %s összeházasodott.", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				}
			}
			strmid(PlayerInfo[playerid][pHazasodvaVele],JatekosNev(Hazassag[playerid]),0,strlen(JatekosNev(Hazassag[playerid])),32);
			strmid(PlayerInfo[Hazassag[playerid]][pHazasodvaVele],JatekosNev(playerid),0,strlen(JatekosNev(playerid)),32);
			Hazassag[Hazassag[playerid]] = -1;
			Hazassag[playerid] = -1;
			Beirhatjahogyigen[playerid] = 0;
			return true;
		}
		if(egyezik(text,"nem"))
		{
			SCM(playerid,COL_LRED,"Elutasítottad a felkérést");
			SCM(Hazassag[playerid],COL_LRED,"Elutasította a felkérést!");
			Hazassag[Hazassag[playerid]] = -1;
			Hazassag[playerid] = -1;
			Beirhatjahogyigen[playerid] = 0;
			return true;
		}
		if(!egyezik(text,"igen") && !egyezik(text,"nem"))
		{
			SCM(playerid,COL_LRED,"IGEN VAGY NEM!");
			return 0;
		}
	}

	if(PlayerInfo[playerid][ptelefonal] && PlayerInfo[ playerid ][pTelefonVonalban])
	{
		if(PlayerInfo[playerid][ptelefonaloid] == DROG_TELEFONSZAM)
		{
			new Elfogad[5][32] = {"drog","drogmag","cucc","mag","ültetvény"};
			new Melyik[] = { 1, 2, 1, 2, 2 };

			new i = -1, talalt = -1;

			for(;++i < sizeof(Elfogad);)
			{
				//printf("Melyik: %s", Elfogad[i]);
				if(strfind(text, Elfogad[i], true) != -1)
					talalt = i;
			}

			//printf("Talált: %d", talalt);

			if(talalt == -1)
			{
				SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Nem értettem kristálytisztán, mi is kell akkor neked?");
				return false;
			}

			format(str, sizeof(str), "[Telefon] Valaki mondja: %s", text);
			ProxDetector(15.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, false, true);

			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Milyen fajta cucc kellene?!");

			if(Melyik[talalt] == 1)
			{
				//COL_LRED
				format(str, sizeof(str), "%sMarihuana [%dg]\n%sKokain [%dg]\n%sHeroin [%dg]", (ServerInfo[sDrog][0] > 0 ? (COL_MKEK) : (COL_LRED)), ServerInfo[sDrog][0], (ServerInfo[sDrog][0] > 0 ? (COL_MKEK) : (COL_LRED)), ServerInfo[sDrog][1], (ServerInfo[sDrog][2] > 0 ? (COL_MKEK) : (COL_LRED)), ServerInfo[sDrog][2]);
				ShowPlayerDialog(playerid, DIALOG_DROG, DIALOG_STYLE_LIST, "Drog vétele", str, "Rendel", "Mégse");
			}
			else
				ShowPlayerDialog(playerid, DIALOG_DROGMAG, DIALOG_STYLE_LIST, "Mag rendelése", "Marihuana\nKokain\nHeroin", "Rendel", "Mégse");

			return false;
		}

		//PlayerInfo[playerid][pTelefonPenz]
		if(PlayerInfo[playerid][ptelefonaloid] >= 0 && PlayerInfo[ PlayerInfo[playerid][ptelefonaloid] ][ptelefonal] && PlayerInfo[playerid][pTelefonVonalban])
		{
			/*new penz = 3;

			if( PlayerInfo[playerid][pHivo] )
			{
				if(PlayerInfo[playerid][pTelefonPenz] < penz)
				{
					PlayerInfo[playerid][pTelefonPenz] = 0;
					cmd_hangup(playerid, "");
					return false;
				} else {
					PlayerInfo[playerid][pTelefonPenz] -= penz;
				}
			}*/
			//(PlayerInfo[playerid][pMaszkVisel] ? ("Valaki") : JatekosNev(playerid, true))
			foreach(Player, p)
			{
				if(PlayerInfo[p][pTelotHallgat] == playerid)
				{
					SendFormatMessage(p, COLOR_YELLOW, ""#COL_SARGA"[Lehallgatás] "#COL_FEHER"%s: %s", JatekosNev(playerid),text);
				}
			}
			if(PlayerInfo[playerid][pAlnevbe] == false)
			{
				format(str, sizeof(str), "[Telefon] %s mondja: %s", JatekosNev(playerid, true), text);
			}
			else
			{
				format(str, sizeof(str), "[Telefon] %s mondja: %s", PlayerInfo[playerid][pAlnev], text);
			}
			SendClientMessage(PlayerInfo[playerid][ptelefonaloid], COLOR_FADE1, str);

			SendFormatMessage(playerid, COLOR_FADE1, "[Telefon] Te mondod: %s", text);

			format(str, sizeof(str), "[Telefon] Valaki mondja: %s", text);
			ProxDetector(15.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, false, true);
			return false;

		} else {

			SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs a vonal túlsó felén senki! (/h(angup))");
			return false;
		}
	}

	if(!PlayerInfo[playerid][pTimerFut] && !PlayerInfo[playerid][pFoglalt] && !PlayerInfo[playerid][pAduty] && PlayerInfo[playerid][pAnimban][0] == 0 && !PlayerInfo[playerid][pTog][9])
	{
		if(GetPlayerState(playerid) == 1 && PlayerInfo[playerid][pTog][4] && GetPlayerAnimationIndex(playerid) != 1159 && GetPlayerAnimationIndex(playerid) != 1274 && PlayerInfo[playerid][pUsingLoopingAnim] == 0)//ha a beszéd animálás engedélyezett
		{
	        new time = strlen(text)*150;
			ApplyAnimation(playerid, "PED", "IDLE_CHAT", 3, 0, 0, 0, 0, time,1);
		}
	}
	
	if(Live[playerid])
	{
		new string[256];
		format(string, sizeof(string), "** [Közvetítés]: %s: %s", JatekosNev(playerid), text);
		SendClientMessageToAll(COLOR_SZURKE, string);
	}

	if(!PlayerInfo[playerid][pAduty] && !PlayerInfo[playerid][pTog][9])
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new vid = JarmuID( GetPlayerVehicleID(playerid), playerid );

			if(IsAKocsi(vInfo[vid][vModel]) && !vInfo[vid][vAblakLetekerve])
			{
				if(!PlayerInfo[playerid][pMaszkVisel])
				{
					if(PlayerInfo[playerid][pAlnevbe] == false)
					{
						format(uzenet, sizeof(uzenet), "[Jármûben] %s mondja: %s", JatekosNev(playerid, true), text);
					}
					else
					{
						format(uzenet, sizeof(uzenet), "[Jármûben] %s mondja: %s", PlayerInfo[playerid][pAlnev], text);
					}
				}
				else
				{
					new maszkid[24];
					format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
					format(uzenet, sizeof(uzenet), "[Jármûben] %s mondja: %s", maszkid, text);
				}

				nformat(logstr, 256, "[Jármûben][%d]%s - %s", playerid, JatekosNev(playerid, false, true), text);
				Log(FILE_CHAT, logstr);

				new kicsinalja[128];
				if(PlayerInfo[playerid][pMaszkVisel] == true)
				{
					format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
				}
				if(PlayerInfo[playerid][pAlnevbe] == true)
				{
					format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
				}
				if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
				{
					format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
				}
    			
				if(strfind(uzenet,":D", true) != -1 || strfind(uzenet,"xD", true) != -1)
			 		Cselekves(playerid, "nevet");
				else if(strfind(uzenet,":)") != -1)
			 		Cselekves(playerid, "mosolyog");
		   		else if(strfind(uzenet,":(") != -1)
					Cselekves(playerid, "szomorú");
		        else if(strfind(uzenet,":P", true) != -1)
					Cselekves(playerid, "nyelvet ölt");
		   		else if(strfind(uzenet,";)") != -1)
					Cselekves(playerid, "nyelvet ölt");
		        else if(strfind(uzenet,":@") != -1)
					Cselekves(playerid, "ideges");
		        else if(strfind(uzenet,":O", true) != -1)
					Cselekves(playerid, "csodálkozik");
		        else if(strfind(uzenet,":S", true) != -1)
					Cselekves(playerid, "rosszul van");
		        else if(strfind(uzenet,":$", true) != -1)
					Cselekves(playerid, "elpirul");
				else
				{
					foreach(Player, pid)
					{
						if(IsPlayerInVehicle(pid, GetPlayerVehicleID(playerid)))
						{
							SendClientMessage(pid, COLOR_FADE1, uzenet);
						}
					}
				}
				/*if(strlen(uzenet) > 74)
				{
				    new stringje[256];
					new nagystring[75];
					strmid(nagystring, uzenet, 75, strlen(uzenet));
					strdel(uzenet, 75, strlen(uzenet));
					foreach(Player, pid)
					{
						if(IsPlayerInVehicle(pid, GetPlayerVehicleID(playerid)))
						{
							format(stringje, sizeof(stringje), "%s...", uzenet);
							SendClientMessage(pid, COLOR_FADE1, stringje);
							format(stringje, sizeof(stringje), "...%s", stringje);
							SendClientMessage(pid, COLOR_FADE1, stringje);
						}
					}
				}*/
				return false;

			} else {

				if(!PlayerInfo[playerid][pMaszkVisel])
				{
					if(PlayerInfo[playerid][pAlnevbe] == false)
					{
						format(uzenet, sizeof(uzenet), "%s mondja: %s", JatekosNev(playerid, true), text);
					}
					else
					{
						format(uzenet, sizeof(uzenet), "%s mondja: %s", PlayerInfo[playerid][pAlnev], text);
					}
				}
				else
				{
					new maszkid[24];
					format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
					format(uzenet, sizeof(uzenet), "%s mondja: %s", maszkid, text);
				}
			}
		} else {

			if(!PlayerInfo[playerid][pMaszkVisel])
			{
					if(PlayerInfo[playerid][pAlnevbe] == false)
					{
						if(strlen(PlayerInfo[playerid][pAccent]) == 0)
							format(uzenet, sizeof(uzenet), "%s mondja: %s", JatekosNev(playerid, true), text);
						else
							format(uzenet, sizeof(uzenet), "%s [%s] mondja: %s", JatekosNev(playerid, true),PlayerInfo[playerid][pAccent], text);
					}
					else
					{
						if(strlen(PlayerInfo[playerid][pAccent]) == 0)
							format(uzenet, sizeof(uzenet), "%s mondja: %s", PlayerInfo[playerid][pAlnev], text);
						else
							format(uzenet, sizeof(uzenet), "%s [%s] mondja: %s", PlayerInfo[playerid][pAlnev],PlayerInfo[playerid][pAccent], text);
					}
			}
			else
			{
				new maszkid[24];
				format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
				format(uzenet, sizeof(uzenet), "%s [%s] mondja: %s", maszkid, PlayerInfo[playerid][pAccent], text);
			}
		}

		nformat(logstr, 128, "[%d]%s - %s", playerid, JatekosNev(playerid, false, true), text);
		Log(FILE_CHAT, logstr);

		new kicsinalja[128];
		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
		}
		if(PlayerInfo[playerid][pAlnevbe] == true)
		{
			format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
		}
		if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
		{
			format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
		}
		new stringje[256];
		format(stringje, sizeof(stringje), "%s", uzenet);
		
		if(strfind(stringje,":D", true) != -1 || strfind(stringje,"xD", true) != -1)
	 		Cselekves(playerid, "nevet");
		else if(strfind(stringje,":)") != -1)
	 		Cselekves(playerid, "mosolyog");
   		else if(strfind(stringje,":(") != -1)
			Cselekves(playerid, "szomorú");
        else if(strfind(stringje,":P", true) != -1)
			Cselekves(playerid, "nyelvet ölt");
   		else if(strfind(stringje,";)") != -1)
			Cselekves(playerid, "kacsint");
        else if(strfind(stringje,":@") != -1)
			Cselekves(playerid, "ideges");
        else if(strfind(stringje,":O", true) != -1)
			Cselekves(playerid, "csodálkozik");
        else if(strfind(stringje,":S", true) != -1)
			Cselekves(playerid, "rosszul van");
        else if(strfind(stringje,":$", true) != -1)
			Cselekves(playerid, "elpirul");
		else
			ProxDetector(15.0, playerid, stringje, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, false, true);
		/*if(strlen(uzenet) > 74)
		{
			new nagystring[75];
			strmid(nagystring, uzenet, 75, strlen(uzenet));
			strdel(uzenet, 75, strlen(uzenet));
			format(stringje, sizeof(stringje), "%s...", uzenet);
			ProxDetector(15.0, playerid, stringje, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			format(stringje, sizeof(stringje), "...%s (( %s ))", nagystring, kicsinalja);
			ProxDetector(15.0, playerid, stringje, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}*/

	} else {

		format(uzenet, sizeof(uzenet), "%s mondja OOC: (( %s ))", JatekosNev(playerid, true), text);
		nformat(logstr, 128, "[OOC][%d]%s - %s", playerid, JatekosNev(playerid, false, true), text);
		Log(FILE_CHAT, logstr);

		if(PlayerInfo[playerid][pAduty])
			ProxDetector(15.0, playerid, uzenet, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED);
		else if(PlayerInfo[playerid][pASduty])
			ProxDetector(15.0, playerid, uzenet, VKEK, VKEK, VKEK, VKEK, VKEK);
		else
			ProxDetector(15.0, playerid, uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	//SetPlayerChatBubble(playerid, text, COLOR_WHITE, 5, 5000);

	return 0;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
    if(!cmdtext[0]){
		Ban(playerid);
		ServerBan(playerid, 0, "[Hack]Server Attacker", NINCS, true, true, true);
		
		return false;
 	}
    
	new str[256];
    format(str, sizeof(str), "[%d]%s - %s", playerid, JatekosNev(playerid), cmdtext);
	Log(FILE_PARANCS, str);

	if(!Belepve(playerid))
		return false;
	
	return true;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!Belepve(playerid))
		return false;

	if(PlayerInfo[playerid][pSzunetel])
		CallLocalFunction("OnPlayerPause", "dd", playerid, 0);

	if(!success)
	{
		return SCM(playerid, COL_MKEK, "Nincs ilyen parancs!");
	}
	return true;
}

//========================================[ SQL Mentések ] ============================

fpublic AdatMentes( idx )
{
	if(PlayerInfo[idx][pbelepve])
	{
		new Float:pPos[4], int, vw, query[4096], str[128], i = NINCS;

		if(PlayerInfo[idx][pPaintBall][0] != 0)
		{
			vw = CegInfo[ BIZ_PB ][cVw][0];
			int = CegInfo[ BIZ_PB ][cInt][0];

			pPos[0] = CegInfo[ BIZ_PB ][cPosBe][0];
			pPos[1] = CegInfo[ BIZ_PB ][cPosBe][1];
			pPos[2] = CegInfo[ BIZ_PB ][cPosBe][2];
			pPos[3] = CegInfo[ BIZ_PB ][cPosBe][3];

		} else {

			GetPlayerPos(idx, pPos[0], pPos[1], pPos[2]);
			GetPlayerFacingAngle(idx, pPos[3]);

			vw = GetPlayerVirtualWorld(idx);
			int = GetPlayerInterior(idx);
		}

		format(query, sizeof(query), "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET ");
		MySQLUpdateINT(query, "pUtoljara", gettime());
		MySQLUpdateINT(query, "penz", PlayerInfo[idx][ppenz]);
		MySQLUpdateINT(query, "skin", PlayerInfo[idx][pskin]);
		MySQLUpdateINT(query, "szint", PlayerInfo[idx][pjatekosszint]);
		MySQLUpdateINT(query, "interior", int);
		MySQLUpdateINT(query, "vw", vw);
		MySQLUpdateINT(query, "jail", PlayerInfo[idx][pjail]);
		MySQLUpdateINT(query, "pJailIdo", PlayerInfo[idx][pJailIdo]);
		
		str[0] = EOS;
		for(; ++i < 8;)
		{
		    if(i == 0)
				format(str, sizeof(str), "%d", PlayerInfo[idx][pAnimban][i]);
			else
			    format(str, sizeof(str), "%s,%d", str, PlayerInfo[idx][pAnimban][i]);
		}
		MySQLUpdateSTR(query, "pAnimban", str);
		
		MySQLUpdateINT(query, "admin", PlayerInfo[idx][padmin]);
		MySQLUpdateSTR(query, "pDNS", PlayerInfo[idx][pDNS]);
		
		MySQLUpdateINT(query, "pAS", PlayerInfo[idx][pAS]);
		MySQLUpdateINT(query, "pMapper",PlayerInfo[idx][pMapper]);
		MySQLUpdateSTR(query, "pDefense", PlayerInfo[idx][pDefense]);
		MySQLUpdateINT(query, "bankszamla", PlayerInfo[idx][pBsz]);
		MySQLUpdateINT(query, "bankszamlaegyenleg", PlayerInfo[idx][pBszPenz]);
		MySQLUpdateINT(query, "bankszamlapin", PlayerInfo[idx][pBszPin]);
		MySQLUpdateFLOAT(query, "posx", pPos[0]);
		MySQLUpdateFLOAT(query, "posy", pPos[1]);
		MySQLUpdateFLOAT(query, "posz", pPos[2]);
		MySQLUpdateFLOAT(query, "angle", pPos[3]);
		MySQLUpdateFLOAT(query, "pPancel", PlayerInfo[idx][pPancel]);
		MySQLUpdateINT(query, "phitman", PlayerInfo[idx][pHitman]);
		MySQLUpdateSTR(query, "pHitmanNev", PlayerInfo[idx][pHitmanNev]);
		MySQLUpdateINT(query, "regisztracio", PlayerInfo[idx][pregisztracio]);

		MySQLUpdateINT(query, "pfrakcio", PlayerInfo[idx][pFrakcio]);
		MySQLUpdateINT(query, "prang", PlayerInfo[idx][prang]);

		MySQLUpdateINT(query, "pszintlepesperc", PlayerInfo[idx][pszintlepesperc]);
		MySQLUpdateINT(query, "pszintlepesora", PlayerInfo[idx][pszintlepesora]);
		MySQLUpdateINT(query, "pszintlepeshez", PlayerInfo[idx][pszintlepeskell]);

		MySQLUpdateINT(query, "pnem", PlayerInfo[idx][pnem]);
		MySQLUpdateINT(query, "peletkor", PlayerInfo[idx][peletkor]);
		MySQLUpdateINT(query, "pszarmazas", PlayerInfo[idx][pszarmazas]);
		//paktivalva
		MySQLUpdateINT(query, "phaz", PlayerInfo[idx][phaz]);
		MySQLUpdateSTR(query, "pFegyverek", GetUserWeapons(idx));
		MySQLUpdateSTR(query, "pToltenyek", GetUserWeaponsAmmo(idx));

		format(str, sizeof(str), "%d|%s|%s|%s", Korozes[idx][krSzint], Korozes[idx][krNev], Korozes[idx][krKiadta], Korozes[idx][krOka]);
		MySQLUpdateSTR(query, "pKorozes", str);
		MySQLUpdateINT(query, "pPremiumPont", PlayerInfo[idx][pPremiumPont]);
		MySQLUpdateINT(query, "pVas", PlayerInfo[idx][pVas]);
		MySQLUpdateINT(query, "pMaterial", PlayerInfo[idx][pMaterial]);
		MySQLUpdateINT(query, "pHeroin", PlayerInfo[idx][pHeroin]);
		MySQLUpdateINT(query, "pKokain", PlayerInfo[idx][pKokain]);
		MySQLUpdateINT(query, "pMarihuana", PlayerInfo[idx][pMarihuana]);
		MySQLUpdateINT(query, "pFegyverSkill", PlayerInfo[idx][pFegyverSkill]);
		MySQLUpdateINT(query, "pFizetesIdo", PlayerInfo[idx][pFizetesIdo]);
		MySQLUpdateINT(query, "pFizetes", PlayerInfo[idx][pFizetes]);
		MySQLUpdateINT(query, "pJatszottOra", PlayerInfo[idx][pJatszottOra]);
		MySQLUpdateINT(query, "pTelefonPenz", PlayerInfo[idx][pTelefonPenz]);
		MySQLUpdateINT(query, "pMunka1", PlayerInfo[idx][pMunka1]);
		MySQLUpdateINT(query, "pMunka2", PlayerInfo[idx][pMunka2]);
		MySQLUpdateINT(query, "pExpLegal", PlayerInfo[idx][pExp][1]);
		MySQLUpdateINT(query, "pExpIllegal", PlayerInfo[idx][pExp][3]);
		MySQLUpdateINT(query, "pDutySkin", PlayerInfo[idx][pDutySkin]);
		MySQLUpdateSTR(query, "pEngedely", EngedelyStr(idx));//autó, motor, kamion stb
		MySQLUpdateINT(query, "pHatizsak", PlayerInfo[idx][pHatizsak]);
		MySQLUpdateINT(query, "pMaszk", PlayerInfo[idx][pMaszk]);

		MySQLUpdateINT(query,"pLeader", PlayerInfo[idx][pLeader]);
		MySQLUpdateINT(query,"pSWAT", PlayerInfo[idx][pSWAT]);
		MySQLUpdateINT(query,"pSWATRang", PlayerInfo[idx][pSWATRang]);
		MySQLUpdateSTR(query,"pAdminNev", PlayerInfo[idx][pAdminNev]);
		MySQLUpdateINT(query, "pJarmuKolcson", PlayerInfo[idx][pJarmuKolcson]);
		MySQLUpdateINT(query, "pBox", PlayerInfo[idx][pBox]);
		MySQLUpdateINT(query, "pElbow", PlayerInfo[idx][pElbow]);
		MySQLUpdateINT(query, "pKungfu", PlayerInfo[idx][pKungfu]);
		MySQLUpdateINT(query, "pKneehead", PlayerInfo[idx][pKneehead]);
		MySQLUpdateINT(query, "pGrabkick", PlayerInfo[idx][pGrabkick]);

		MySQLUpdateINT(query,"pSM",PlayerInfo[idx][pSM]);
		MySQLUpdateINT(query,"pSMrang",PlayerInfo[idx][pSMrang]);
		MySQLUpdateINT(query,"pKannaBenzin",PlayerInfo[idx][pKannaBenzin]);

		MySQLUpdateINT(query,"pSKV",PlayerInfo[idx][pSKV]);
		MySQLUpdateINT(query,"pSKVrang",PlayerInfo[idx][pSKVrang]);

		format(str, sizeof(str), "%s|%s", PlayerInfo[idx][pJailAdta], PlayerInfo[idx][pJailOk]);
		MySQLUpdateSTR(query, "BortonInfo", str);
		MySQLUpdateSTR(query, "pCuccok", GetPlayerBoltCucc( idx ));
		MySQLUpdateINT(query, "pSzemelyi", PlayerInfo[idx][pSzemelyi]);
		MySQLUpdateINT(query, "pValaszok", PlayerInfo[idx][pValaszok]);

		format(str, sizeof(str), "%d,%d,%d", PosExt(PlayerInfo[idx][pDrogAnyag]));
		MySQLUpdateSTR(query, "pDrogAnyag", str);

		format(str,sizeof(str),"%d",DivatInfo[SLOT_SAPKA][idx][dVan]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SAPKA][idx][dPosX],DivatInfo[SLOT_SAPKA][idx][dPosY],DivatInfo[SLOT_SAPKA][idx][dPosZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SAPKA][idx][dRotX],DivatInfo[SLOT_SAPKA][idx][dRotY],DivatInfo[SLOT_SAPKA][idx][dRotZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SAPKA][idx][dScaleX],DivatInfo[SLOT_SAPKA][idx][dScaleY],DivatInfo[SLOT_SAPKA][idx][dScaleZ]);
		format(str,sizeof(str),"%s,%d",str,DivatInfo[SLOT_SAPKA][idx][dmodelid]);
		MySQLUpdateSTR(query,"Divat_Sapka",str);

		format(str,sizeof(str),"%d",DivatInfo[SLOT_SZEMUVEG][idx][dVan]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SZEMUVEG][idx][dPosX],DivatInfo[SLOT_SZEMUVEG][idx][dPosY],DivatInfo[SLOT_SZEMUVEG][idx][dPosZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SZEMUVEG][idx][dRotX],DivatInfo[SLOT_SZEMUVEG][idx][dRotY],DivatInfo[SLOT_SZEMUVEG][idx][dRotZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SZEMUVEG][idx][dScaleX],DivatInfo[SLOT_SZEMUVEG][idx][dScaleY],DivatInfo[SLOT_SZEMUVEG][idx][dScaleZ]);
		format(str,sizeof(str),"%s,%d",str,DivatInfo[SLOT_SZEMUVEG][idx][dmodelid]);
		MySQLUpdateSTR(query,"Divat_Szemuveg",str);

		format(str,sizeof(str),"%d",DivatInfo[SLOT_MASZK][idx][dVan]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_MASZK][idx][dPosX],DivatInfo[SLOT_MASZK][idx][dPosY],DivatInfo[SLOT_MASZK][idx][dPosZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_MASZK][idx][dRotX],DivatInfo[SLOT_MASZK][idx][dRotY],DivatInfo[SLOT_MASZK][idx][dRotZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_MASZK][idx][dScaleX],DivatInfo[SLOT_MASZK][idx][dScaleY],DivatInfo[SLOT_MASZK][idx][dScaleZ]);
		format(str,sizeof(str),"%s,%d",str,DivatInfo[SLOT_MASZK][idx][dmodelid]);
		MySQLUpdateSTR(query,"Divat_Maszk",str);

		MySQLUpdateSTR(query,"pHazasodvaVele",PlayerInfo[idx][pHazasodvaVele]);

		format(str,sizeof(str),"%d,%d,%d,%d,%d,%d,%d,%d,%d",PlayerInfo[idx][pFegyvertVasarolt][0],PlayerInfo[idx][pFegyvertVasarolt][1],PlayerInfo[idx][pFegyvertVasarolt][2],PlayerInfo[idx][pFegyvertVasarolt][3],PlayerInfo[idx][pFegyvertVasarolt][4],PlayerInfo[idx][pFegyvertVasarolt][5],PlayerInfo[idx][pFegyvertVasarolt][6],PlayerInfo[idx][pFegyvertVasarolt][7],PlayerInfo[idx][pFegyvertVasarolt][8]);
		MySQLUpdateSTR(query,"pFegyvertVasarolt",str);

		format(str,sizeof(str),"%d,%d,%d,%d,%d,%d,%d,%d,%d",PlayerInfo[idx][pNPCSzobaAll][0],PlayerInfo[idx][pNPCSzobaAll][1],PlayerInfo[idx][pNPCSzobaAll][2],PlayerInfo[idx][pNPCSzobaAll][3],PlayerInfo[idx][pNPCSzobaAll][4],PlayerInfo[idx][pNPCSzobaAll][5],PlayerInfo[idx][pNPCSzobaAll][6],PlayerInfo[idx][pNPCSzobaAll][7],PlayerInfo[idx][pNPCSzobaAll][8]);
		MySQLUpdateSTR(query,"pNPCSzobaAll",str);


		format(str,sizeof(str),"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",PlayerInfo[idx][pTog][0],PlayerInfo[idx][pTog][1],PlayerInfo[idx][pTog][2],PlayerInfo[idx][pTog][3],PlayerInfo[idx][pTog][4],PlayerInfo[idx][pTog][5],PlayerInfo[idx][pTog][6],PlayerInfo[idx][pTog][7],PlayerInfo[idx][pTog][8],PlayerInfo[idx][pTog][9],PlayerInfo[idx][pTog][10],PlayerInfo[idx][pTog][11],PlayerInfo[idx][pTog][12],PlayerInfo[idx][pTog][13],PlayerInfo[idx][pTog][14],
		PlayerInfo[idx][pTog][15]);
		MySQLUpdateSTR(query,"pTog",str);


		MySQLUpdateINT(query,"pKereskedo",PlayerInfo[idx][pKereskedo]);
		MySQLUpdateINT(query,"pHal",PlayerInfo[idx][pHal]);
		MySQLUpdateINT(query,"pClub",PlayerInfo[idx][pClub]);
		
		MySQLUpdateINT(query,"pFrakcioTiltas",PlayerInfo[idx][pTiltasok][TILTAS_FRAKCIO]);
		MySQLUpdateINT(query,"pReportTiltas",PlayerInfo[idx][pTiltasok][TILTAS_REPORT]);
		MySQLUpdateINT(query,"pFegyverTiltas",PlayerInfo[idx][pTiltasok][TILTAS_FEGYVER]);
		MySQLUpdateINT(query,"pAutoTiltas",PlayerInfo[idx][pTiltasok][TILTAS_AUTO]);
		MySQLUpdateINT(query,"pASTiltas",PlayerInfo[idx][pTiltasok][TILTAS_AS]);
        MySQLUpdateINT(query,"pTaxiTiltas",PlayerInfo[idx][pTiltasok][TILTAS_TAXI]);
        
		MySQLUpdateINT(query,"pLottounix",PlayerInfo[idx][pLottounix]);
		MySQLUpdateINT(query,"pLakcimkartya",PlayerInfo[idx][pLakcimkartya]);
		MySQLUpdateINT(query,"pZarolva",PlayerInfo[idx][pZarolva]);
		MySQLUpdateINT(query,"pLophat",PlayerInfo[idx][pLophat]);
		MySQLUpdateINT(query,"pTolvajSkill",PlayerInfo[idx][pTolvajSkill]);
		MySQLUpdateINT(query,"pTolvajKulcs",PlayerInfo[idx][pTolvajKulcs]);
		MySQLUpdateINT(query,"pRabolhat",PlayerInfo[idx][pRabolhat]);
		MySQLUpdateINT(query,"pGazmaszk",PlayerInfo[idx][pGazmaszk]);
		MySQLUpdateINT(query,"pTartozas",PlayerInfo[idx][pTartozas]);

		MySQLUpdateFLOAT(query,"pEhseg",PlayerInfo[idx][pEhseg]);
		MySQLUpdateFLOAT(query,"pVizelet",PlayerInfo[idx][pVizelet]);
		MySQLUpdateINT(query,"pBuntetoPontok",PlayerInfo[idx][pBuntetoPontok]);
        
		format(str,sizeof(str),"%d|%s|",PlayerInfo[idx][pVerdij], PlayerInfo[idx][pVerdijOk]);
		MySQLUpdateSTR(query,"Verdij",str);
        MySQLUpdateSTR(query,"pUjjlenyomat",PlayerInfo[idx][pUjjlenyomat]);
        
        
		MySQLFinalUpdate(query, "id", PlayerInfo[idx][pID]);
		//printf("MySQL String: %d karakter", strlen(query));
	}

	return true;
}

stock TeruletMentesID( u )
{
	new tquery[1024], tadatok[64];
	if(tInfo[u][tVan])
	{
		format(tquery, sizeof(tquery), "UPDATE `"#MYSQL_TERULET_TABLA"` SET ");
		format(tadatok, 32, "%f,%f", tInfo[u][tMinPos][0], tInfo[u][tMinPos][1]);
		MySQLUpdateSTR(tquery, "MinPos", tadatok);
		format(tadatok, 32, "%f,%f", tInfo[u][tMaxPos][0], tInfo[u][tMaxPos][1]);
		MySQLUpdateSTR(tquery, "MaxPos", tadatok);
		MySQLUpdateINT(tquery, "Frakcio", tInfo[u][tFrakcio]);
		format(tadatok, 64, "%d,%d,%d,%d,%d", tInfo[u][tHaszon][0], tInfo[u][tHaszon][1], tInfo[u][tHaszon][2], tInfo[u][tHaszon][3], tInfo[u][tHaszon][4]);
		MySQLUpdateSTR(tquery, "Haszon", tadatok);
		MySQLUpdateINT(tquery, "HaszonIdo", tInfo[u][tHaszonIdo]);
		MySQLUpdateINT(tquery, "VarakozasIdo", tInfo[u][tVarakozasIdo]);
		MySQLFinalUpdate(tquery, "ID", u);
	}
	return true;
}

fpublic TeruletMentes()
{
	new u = -1, tquery[1024], tadatok[64];
	for(;++u < MAX_TERULET;)
	{
		if(tInfo[u][tVan])
		{
			format(tquery, sizeof(tquery), "UPDATE `"#MYSQL_TERULET_TABLA"` SET ");
			format(tadatok, 32, "%f,%f", tInfo[u][tMinPos][0], tInfo[u][tMinPos][1]);
	        MySQLUpdateSTR(tquery, "MinPos", tadatok);
			format(tadatok, 32, "%f,%f", tInfo[u][tMaxPos][0], tInfo[u][tMaxPos][1]);
	        MySQLUpdateSTR(tquery, "MaxPos", tadatok);
	        MySQLUpdateINT(tquery, "Frakcio", tInfo[u][tFrakcio]);
			format(tadatok, 64, "%d,%d,%d,%d,%d", tInfo[u][tHaszon][0], tInfo[u][tHaszon][1], tInfo[u][tHaszon][2], tInfo[u][tHaszon][3], tInfo[u][tHaszon][4]);
	        MySQLUpdateSTR(tquery, "Haszon", tadatok);
	        MySQLUpdateINT(tquery, "HaszonIdo", tInfo[u][tHaszonIdo]);
	        MySQLUpdateINT(tquery, "VarakozasIdo", tInfo[u][tVarakozasIdo]);
	        MySQLFinalUpdate(tquery, "ID", u);
		}
	}
	return true;
}

fpublic AutomataMentes()
{
	new DB:db = db_open(LSQL_ADATBAZIS);
	new objectid = 0, query[1024];
	for(;++objectid < MAX_AUTOMATA;)
	{
		if(AutomataInfo[objectid][auhasznalva])
		{
			format(query, sizeof(query), "UPDATE `"#LSQL_AUTOMATA_TABLA"` SET ");
			format(query, sizeof(query), "%s autipus = '%d',", query, AutomataInfo[objectid][autipus]);
			format(query, sizeof(query), "%s aupenz = '%d',", query, AutomataInfo[objectid][aupenz]);
			/*format(query, sizeof(query), "%s auposx = '%f',", query, AutomataInfo[objectid][aupos][0]);
			format(query, sizeof(query), "%s auposy = '%f',", query, AutomataInfo[objectid][aupos][1]);
			format(query, sizeof(query), "%s auposz = '%f',", query, AutomataInfo[objectid][aupos][2]);
			format(query, sizeof(query), "%s aurotx = '%f',", query, AutomataInfo[objectid][aupos][3]);
			format(query, sizeof(query), "%s auroty = '%f',", query, AutomataInfo[objectid][aupos][4]);
			format(query, sizeof(query), "%s aurotz = '%f'", query, AutomataInfo[objectid][aupos][5]);
			format(query, sizeof(query), "%s vw = '%d'", query, AutomataInfo[objectid][auVW]);
			format(query, sizeof(query), "%s int = '%d'", query, AutomataInfo[objectid][auInt]);*/
			format(query, sizeof(query), "%s WHERE id = '%d'", query, objectid);
			//mysql_function_query(sql_ID, query, false, "", "");
			//mysql_tquery(sql_ID, query, "", "");

			db_free_result(db_query(db, query));
		}
	}
	db_close(db);
	return true;
}

fpublic JarmuMentes()
{
	new Float:vhealth,query[1024], idx, fegyver[64], i = NINCS;

	foreach(Jarmuvek, id)
	{
		idx = JarmuID(id, INVALID_PLAYER_ID);
	    if(idx && vInfo[idx][vHasznalva] && vInfo[idx][vInsert])
	    {
			GetVehicleHealth(vInfo[idx][vID], vhealth);
			GetVehicleDamageStatus(vInfo[idx][vID], vInfo[idx][vPanels], vInfo[idx][vDoors], vInfo[idx][vLights], vInfo[idx][vTires]);

	        format(query, sizeof(query), "UPDATE `"#MYSQL_JARMU_TABLA"` SET ");
			if(vUpdates[idx][vuTulaj])
			{
				MySQLUpdateSTR(query, "Tulaj", vInfo[idx][vTulaj]);
				MySQLUpdateINT(query, "TulajID", vInfo[idx][vTulajID]);
				vUpdates[idx][vuTulaj] = false;
			}

			if(vUpdates[idx][vuAr]) MySQLUpdateINT(query, "Ar", vInfo[idx][vAr]); vUpdates[idx][vuAr] = false;
			if(vUpdates[idx][vuModel]) MySQLUpdateINT(query, "Model", vInfo[idx][vModel]); vUpdates[idx][vuModel] = false;
			if(vUpdates[idx][vuMunka]) MySQLUpdateINT(query, "Munka", vInfo[idx][vMunka]); vUpdates[idx][vuMunka] = false;
			if(vUpdates[idx][vuSzin])
			{
				MySQLUpdateINT(query, "Szin1", vInfo[idx][vSzin1]);
				MySQLUpdateINT(query, "Szin2", vInfo[idx][vSzin2]);
				vUpdates[idx][vuSzin] = false;
			}
			if(vUpdates[idx][vuPos])
			{
				MySQLUpdateFLOAT(query, "VPosx", vInfo[idx][vPosx]);
				MySQLUpdateFLOAT(query, "VPosy", vInfo[idx][vPosy]);
				MySQLUpdateFLOAT(query, "VPosz", vInfo[idx][vPosz]);
				MySQLUpdateFLOAT(query, "VAngle", vInfo[idx][vAngle]);
				MySQLUpdateINT(query, "vInt", vInfo[idx][vInt]);
				MySQLUpdateINT(query, "vVW", vInfo[idx][vVW]);
				vUpdates[idx][vuPos] = false;
			}
			if(vUpdates[idx][vuElet]) MySQLUpdateFLOAT(query, "VElet", vhealth); vUpdates[idx][vuElet] = false;
	        if(vUpdates[idx][vuHiba]) MySQLUpdateINT(query, "VHiba", vInfo[idx][vHiba]); vUpdates[idx][vuHiba] = false;
	        if(vUpdates[idx][vuZarva]) MySQLUpdateINT(query, "VZarva", vInfo[idx][vZarva]); vUpdates[idx][vuZarva] = false;
			if(vUpdates[idx][vuRang]) MySQLUpdateINT(query, "VRang", vInfo[idx][vRang]); vUpdates[idx][vuRang] = false;

			MySQLUpdateFLOAT(query, "VKilometer", vInfo[idx][vKilometer]);
			MySQLUpdateFLOAT(query, "VUzemanyag", vInfo[idx][vUzemanyag]);
			//MySQLUpdateFLOAT(query, "VElet", vInfo[idx][vhealth]);
			
			if(vUpdates[idx][vuPanels]) MySQLUpdateINT(query, "VPanels", vInfo[idx][vPanels]); vUpdates[idx][vuPanels] = false;
			if(vUpdates[idx][vuDoors]) MySQLUpdateINT(query, "VDoors", vInfo[idx][vDoors]); vUpdates[idx][vuDoors] = false;
			if(vUpdates[idx][vuLights]) MySQLUpdateINT(query, "VLights", vInfo[idx][vLights]); vUpdates[idx][vuLights] = false;
			if(vUpdates[idx][vuTires]) MySQLUpdateINT(query, "VTires", vInfo[idx][vTires]); vUpdates[idx][vuTires] = false;

			//Jármûben lévõ tárgyak
			if(vUpdates[idx][vuVas]) MySQLUpdateINT(query, "vVas", vInfo[idx][vVas]); vUpdates[idx][vuVas] = false;
			if(vUpdates[idx][vuMaterial]) MySQLUpdateINT(query, "vMaterial", vInfo[idx][vMaterial]); vUpdates[idx][vuMaterial] = false;
			if(vUpdates[idx][vuHeroin]) MySQLUpdateINT(query, "vHeroin", vInfo[idx][vHeroin]); vUpdates[idx][vuHeroin] = false;
			if(vUpdates[idx][vuKokain]) MySQLUpdateINT(query, "vKokain", vInfo[idx][vKokain]); vUpdates[idx][vuKokain] = false;
			if(vUpdates[idx][vuMarihuana]) MySQLUpdateINT(query, "vMarihuana", vInfo[idx][vMarihuana]); vUpdates[idx][vuMarihuana] = false;

			if(vUpdates[idx][vuFegyver])
			{
				//Fegyver mentés
				fegyver[0] = EOS, i = NINCS;
				for(;++i < 5;)
				{
					if(vInfo[idx][vFegyver][i] > 47) { vInfo[idx][vFegyver][i] = 0; vInfo[idx][vTolteny][i] = 0; }
					format(fegyver, 64, "%s%d,", fegyver, vInfo[idx][vFegyver][i]);
				}

				fegyver[strlen(fegyver) - 1] = '\0';
				MySQLUpdateSTR(query, "vFegyver", fegyver);

				//Töltény mentés
				fegyver[0] = EOS, i = NINCS;
				for(;++i < 5;)
					format(fegyver, 64, "%s%d,", fegyver, vInfo[idx][vTolteny][i]);

				fegyver[strlen(fegyver) - 1] = '\0';
				MySQLUpdateSTR(query, "vTolteny", fegyver);
				vUpdates[idx][vuFegyver] = false;
			}

			MySQLUpdateINT(query, "vLastActive", vInfo[idx][vTLastActive]);
			if(vUpdates[idx][vuRendszam]) MySQLUpdateSTR(query, "vRendszam", vInfo[idx][vRendszam]); vUpdates[idx][vuRendszam] = false;
			if(vUpdates[idx][vuNeon]) MySQLUpdateINT(query, "vNeon", vInfo[idx][vNeon][0]); vUpdates[idx][vuNeon] = false;
			if(vUpdates[idx][vuMod])
			{
				MySQLUpdateINT(query, "vMod0", vInfo[idx][vMod][0]);
				MySQLUpdateINT(query, "vMod1", vInfo[idx][vMod][1]);
				MySQLUpdateINT(query, "vMod2", vInfo[idx][vMod][2]);
				MySQLUpdateINT(query, "vMod3", vInfo[idx][vMod][3]);
				MySQLUpdateINT(query, "vMod4", vInfo[idx][vMod][4]);
				MySQLUpdateINT(query, "vMod5", vInfo[idx][vMod][5]);
				MySQLUpdateINT(query, "vMod6", vInfo[idx][vMod][6]);
				MySQLUpdateINT(query, "vMod7", vInfo[idx][vMod][7]);
				MySQLUpdateINT(query, "vMod8", vInfo[idx][vMod][8]);
				MySQLUpdateINT(query, "vMod9", vInfo[idx][vMod][9]);
				MySQLUpdateINT(query, "vMod10", vInfo[idx][vMod][10]);
				MySQLUpdateINT(query, "vMod11", vInfo[idx][vMod][11]);
				MySQLUpdateINT(query, "vMod12", vInfo[idx][vMod][12]);
				MySQLUpdateINT(query, "vNOS", vInfo[idx][vNOS]);
				vUpdates[idx][vuMod] = false;
			}
			if(vUpdates[idx][vuHidraulika]) MySQLUpdateINT(query, "vHidraulika", vInfo[idx][vHidraulika]); vUpdates[idx][vuHidraulika] = false;
			if(vUpdates[idx][vuMatrica]) MySQLUpdateINT(query, "vMatrica", vInfo[idx][vMatrica]); vUpdates[idx][vuMatrica] = false;
	        MySQLFinalUpdate(query, "ID", idx);
		}
	}
	return true;
}

fpublic FrakcioMentes()
{
	new fk, query[2048], pos[256];
	for(;++fk < MAX_FRAKCIO;)
	{
	    if(FInfo[fk][fVan])
	    {
			/*f = -1;
			for(;++f < 50;)
			{
				if((FInfo[fk][fFegyverek][f] && (FInfo[fk][fToltenyek][f] < 1)) || (!FInfo[fk][fFegyverek][f] && (FInfo[fk][fToltenyek][f] > 0)))
				{
					FInfo[fk][fFegyverek][f] = 0;
					FInfo[fk][fToltenyek][f] = 0;
				}
			}*/

			format(query, 2048, "UPDATE `"#MYSQL_FRAKCIO_TABLA"` SET ");
			if(FUpdates[fk][fuNev]) MySQLUpdateSTR(query, "FNev", FInfo[fk][fNev]); FUpdates[fk][fuNev] = false;
			if(FUpdates[fk][fuRang1]) MySQLUpdateSTR(query, "Rang1", FInfo[fk][fRang1]); FUpdates[fk][fuRang1] = false;
			if(FUpdates[fk][fuRang2]) MySQLUpdateSTR(query, "Rang2", FInfo[fk][fRang2]); FUpdates[fk][fuRang2] = false;
			if(FUpdates[fk][fuRang3]) MySQLUpdateSTR(query, "Rang3", FInfo[fk][fRang3]); FUpdates[fk][fuRang3] = false;
			if(FUpdates[fk][fuRang4]) MySQLUpdateSTR(query, "Rang4", FInfo[fk][fRang4]); FUpdates[fk][fuRang4] = false;
			if(FUpdates[fk][fuRang5]) MySQLUpdateSTR(query, "Rang5", FInfo[fk][fRang5]); FUpdates[fk][fuRang5] = false;
			if(FUpdates[fk][fuRang6]) MySQLUpdateSTR(query, "Rang6", FInfo[fk][fRang6]); FUpdates[fk][fuRang6] = false;
			if(FUpdates[fk][fuRang7]) MySQLUpdateSTR(query, "Rang7", FInfo[fk][fRang7]); FUpdates[fk][fuRang7] = false;
			if(FUpdates[fk][fuRang8]) MySQLUpdateSTR(query, "Rang8", FInfo[fk][fRang8]); FUpdates[fk][fuRang8] = false;
			if(FUpdates[fk][fuRang9]) MySQLUpdateSTR(query, "Rang9", FInfo[fk][fRang9]); FUpdates[fk][fuRang9] = false;
			if(FUpdates[fk][fuRang10]) MySQLUpdateSTR(query, "Rang10", FInfo[fk][fRang10]); FUpdates[fk][fuRang10] = false;
			if(FUpdates[fk][fuRang11]) MySQLUpdateSTR(query, "Rang11", FInfo[fk][fRang11]); FUpdates[fk][fuRang11] = false;
			if(FUpdates[fk][fuRang12]) MySQLUpdateSTR(query, "Rang12", FInfo[fk][fRang12]); FUpdates[fk][fuRang12] = false;
			if(FUpdates[fk][fuRang13]) MySQLUpdateSTR(query, "Rang13", FInfo[fk][fRang13]); FUpdates[fk][fuRang13] = false;
			if(FUpdates[fk][fuRang14]) MySQLUpdateSTR(query, "Rang14", FInfo[fk][fRang14]); FUpdates[fk][fuRang14] = false;
			if(FUpdates[fk][fuRang15]) MySQLUpdateSTR(query, "Rang15", FInfo[fk][fRang15]); FUpdates[fk][fuRang15] = false;
			if(FUpdates[fk][fuRang16]) MySQLUpdateSTR(query, "Rang16", FInfo[fk][fRang16]); FUpdates[fk][fuRang16] = false;
			if(FUpdates[fk][fuLegalis]) MySQLUpdateINT(query, "Legalis", FInfo[fk][fLegalis]); FUpdates[fk][fuLegalis] = false;

			if(FUpdates[fk][fuSzefObject])
			{
				MySQLUpdateINT(query, "SzefObject", FInfo[fk][fSzefObject]);

				format(pos, 256, "%f,%f,%f", PosExt(FInfo[fk][fSzefPos]));
				MySQLUpdateSTR(query, "SzefPos", pos);

				format(pos, 256, "%f,%f,%f", PosExt(FInfo[fk][fSzefPosR]));
				MySQLUpdateSTR(query, "SzefPosR", pos);

				MySQLUpdateINT(query, "VW", FInfo[fk][fVW]);
				MySQLUpdateINT(query, "Interior", FInfo[fk][fInterior]);
				FUpdates[fk][fuSzefObject] = false;
			}

			if(FUpdates[fk][fuSzefRang]) MySQLUpdateINT(query, "SzefRang", FInfo[fk][fSzefRang]); FUpdates[fk][fuSzefRang] = false;
			if(FUpdates[fk][fuPenz]) MySQLUpdateINT(query, "Penz", FInfo[fk][fPenz]); FUpdates[fk][fuPenz] = false;
			if(FUpdates[fk][fuMaterial]) MySQLUpdateINT(query, "Material", FInfo[fk][fMaterial]); FUpdates[fk][fuMaterial] = false;
			if(FUpdates[fk][fuHeroin]) MySQLUpdateINT(query, "Heroin", FInfo[fk][fHeroin]); FUpdates[fk][fuHeroin] = false;
			if(FUpdates[fk][fuKokain]) MySQLUpdateINT(query, "Kokain", FInfo[fk][fKokain]); FUpdates[fk][fuKokain] = false;
			if(FUpdates[fk][fuMarihuana]) MySQLUpdateINT(query, "Marihuana", FInfo[fk][fMarihuana]); FUpdates[fk][fuMarihuana] = false;

			if(FUpdates[fk][fuFegyverek])
			{
				MySQLUpdateSTR(query, "Fegyverek", GetFractionWeapons(fk));
				MySQLUpdateSTR(query, "Toltenyek", GetFractionAmmos(fk));
				FUpdates[fk][fuFegyverek] = false;
			}

			if(FUpdates[fk][fuFizetes]) MySQLUpdateSTR(query, "Fizetesek", GetFractionPay(fk)); FUpdates[fk][fuFizetes] = false;
			if(FUpdates[fk][fuTrafi]) MySQLUpdateINT(query, "Traffipax", FInfo[fk][fTrafi]); FUpdates[fk][fuTrafi] = false;
			//if(FUpdates[fk][fuLimit])
			MySQLUpdateINT(query, "fLimit", FInfo[fk][fLimit]); //FUpdates[fk][fuLimit] = false;

			MySQLFinalUpdate(query, "ID", fk);
		}
	}
	return true;
}

fpublic BenzinkutMentes()
{
	new benzinkutid = 0, query[1024],tquery[128];
	for(;++benzinkutid < MAX_BENZINKUT;)
	{
		if(BenzinkutInfo[benzinkutid][bhasznalva])
		{
			format(tquery, sizeof(tquery), "UPDATE `"#MYSQL_BENZINKUTAK_TABLA"` SET ");
			format(query, sizeof(query), "%s bposx = '%f',", query, BenzinkutInfo[benzinkutid][bposx]);
			format(query, sizeof(query), "%s bposy = '%f',", query, BenzinkutInfo[benzinkutid][bposy]);
			format(query, sizeof(query), "%s bposz = '%f',", query, BenzinkutInfo[benzinkutid][bposz]);
			format(query, sizeof(query), "%s bbenzinar = '2$',", query, BenzinkutInfo[benzinkutid][bbenzinar]);
			format(query, sizeof(query), "%s bdieselar = '2$',", query, BenzinkutInfo[benzinkutid][bdieselar]);
			format(query, sizeof(query), "%s bbenzinmennyiseg = '%f',", query, BenzinkutInfo[benzinkutid][bbenzinmennyiseg]);
			format(query, sizeof(query), "%s bdieselmennyiseg = '%f',", query, BenzinkutInfo[benzinkutid][bdieselmennyiseg]);
			format(query, sizeof(query), "%s bradius = '%f'", query, BenzinkutInfo[benzinkutid][bradius]);
			format(query, sizeof(query), "%s WHERE id = '%d'", query, benzinkutid);
		}
	}
	return true;
}

fpublic HazMentes()
{
	new hdb = -1, query[2048], drog[512], mellek = -1;

	for(;++hdb < MAX_HOUSE;)
	{
	    if(HazInfo[hdb][hasznalatban])
	    {
			format(query, sizeof(query), "UPDATE `"#MYSQL_HAZ_TABLA"` SET ");
			MySQLUpdateSTR(query, "tulaj", HazInfo[hdb][tulaj]);
			MySQLUpdateINT(query, "TulajID", HazInfo[hdb][hTulajID]);
			MySQLUpdateINT(query, "butorok", HazInfo[hdb][butorsz]);

			MySQLUpdateINT(query, "hGarazs", HazInfo[hdb][hGarazs]);

			drog[0] = '\0';

			for(;++mellek < 5;)
				format(drog, sizeof(drog), "%s%d,", drog, HazInfo[hdb][hazSzef][mellek]);

			drog[strlen(drog) - 1] = '\0';
			MySQLUpdateSTR(query, "hazSzef", drog);

			mellek = -1, drog[0] = '\0';
			for(;++mellek < 50;)
				format(drog, sizeof(drog), "%s%d,", drog, HazInfo[hdb][hDrogMi][mellek]);

			drog[strlen(drog) - 1] = '\0';
			MySQLUpdateSTR(query, "drogMi", drog);

			mellek = -1, drog[0] = '\0';
			for(;++mellek < 50;)
				format(drog, sizeof(drog), "%s%d,", drog, HazInfo[hdb][hDrogAllapot][mellek]);

			drog[strlen(drog) - 1] = '\0';
			MySQLUpdateSTR(query, "drogAll", drog);
			MySQLUpdateINT(query, "hZarva", (HazInfo[hdb][hZarva] ? 1 : 0));

			mellek = -1, drog[0] = '\0';
			for(;++mellek < 15;)
				format(drog, sizeof(drog), "%s%d,", drog, HazInfo[hdb][hFegyver][mellek]);

			drog[strlen(drog) - 1] = '\0';
			MySQLUpdateSTR(query, "hFegyver", drog);

			mellek = -1, drog[0] = '\0';
			for(;++mellek < 15;)
				format(drog, sizeof(drog), "%s%d,", drog, HazInfo[hdb][hTolteny][mellek]);

			drog[strlen(drog) - 1] = '\0';
			MySQLUpdateSTR(query, "hTolteny", drog);

	        MySQLFinalUpdate(query, "id", hdb);

			mellek = -1;
		}
	}
	return true;
}

//========================================[ SQL Mentések Vége ] ============================

stock JarmuSzinezes(modelid)
{
	switch(modelid)
	{
	    case 416, 438, 437, 523, 427, 490, 528, 407, 544, 596, 598, 597, 599, 432, 601, 420: return false;
	}
	return true;
}

stock TiltottJarmu(modelid)
{
	switch(modelid)
	{
		case 441, 464, 465, 501, 564, 594: return false;
	}
	return true;
}

stock JarmuSpawn(azon, modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:angle, color1, color2)
{
	#if SAMPVER >= 374
		new szirena = 0;

		switch(vInfo[azon][vMunka])
		{
		    case FRAKCIO_LSPD: szirena = 1;
		    case FRAKCIO_FBI: szirena = 1;
		    case FRAKCIO_LAFD: szirena = 1;

		}
		if(!ServerInfo[sBetoltve] || modelid == 449 || modelid == 537 || modelid == 538 || modelid == 569 || modelid == 570 || modelid == 590)
			vInfo[azon][vID] = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 0, szirena);
		else
			vInfo[azon][vID] = CreateVehicle(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 0, szirena);
	#else
	    if(!ServerInfo[sBetoltve] || modelid == 449 || modelid == 537 || modelid == 538 || modelid == 569 || modelid == 570 || modelid == 590)
			vInfo[azon][vID] = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 0);
		else
			vInfo[azon][vID] = CreateVehicle(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 0);
	#endif
	
	Iter_Add(Jarmuvek, vInfo[azon][vID]);
	vInfoID[vInfo[azon][vID]] = azon;

	OnVehicleSpawn(vInfo[azon][vID]);
	c_Ujjlenyomatok[ vInfo[azon][vID] ] = cvector();
	
	return vInfo[azon][vID];
}

stock JarmuNullazas(vid)
{
	vInfo[vid][vTulaj] = EOS;
	vInfo[vid][vTulajID] = NINCS;
	vInfo[vid][vAr] = 0;
	vInfo[vid][vModel] = 0;
	vInfo[vid][vMunka] = 0;
	vInfo[vid][vSzin1] = 0;
	vInfo[vid][vSzin2] = 0;
	vInfo[vid][vPosx] = 0.0;
	vInfo[vid][vPosy] = 0.0;
	vInfo[vid][vPosz] = 0.0;
	vInfo[vid][vAngle] = 0.0;
	vInfo[vid][vInt] = 0;
	vInfo[vid][vVW] = 0;
	vInfo[vid][vHasznalva] = false;
	vInfo[vid][vMotorelinditva] = false;
	vInfo[vid][vBerelt] = false;
	vInfo[vid][vElet] = 1000.0;
	vInfo[vid][vHiba] = 0;
	vInfo[vid][vZarva] = false;
	vInfo[vid][vRang] = 0;
	vInfo[vid][vRadio] = 0;
	vInfo[vid][vKilometer] = 0;
	vInfo[vid][vUzemanyag] = 0;
	vInfo[vid][vPanels] = 0;
	vInfo[vid][vDoors] = 0;
	vInfo[vid][vLights] = 0;
	vInfo[vid][vTires] = 0;
	vInfo[vid][vVas] = 0;
	vInfo[vid][vMaterial] = 0;
	vInfo[vid][vHeroin] = 0;
	vInfo[vid][vKokain] = 0;
	vInfo[vid][vMarihuana] = 0;
	vInfo[vid][vHulla] = 0;
	vInfo[vid][vAblakLetekerve] = false;

	if(IsValidDynamicObject(vInfo[vid][vKObject]))
		DestroyDynamicObject(vInfo[vid][vKObject]);

	if(IsValidDynamic3DTextLabel(vInfo[vid][vOktato]))
		DestroyDynamic3DTextLabel(vInfo[vid][vOktato]);

	if(IsValidDynamicObject(vInfo[vid][BalIndex1])) DestroyDynamicObject(vInfo[vid][BalIndex1]);
	if(IsValidDynamicObject(vInfo[vid][BalIndex2])) DestroyDynamicObject(vInfo[vid][BalIndex2]);
	if(IsValidDynamicObject(vInfo[vid][BalTrailer1])) DestroyDynamicObject(vInfo[vid][BalTrailer1]);
	if(IsValidDynamicObject(vInfo[vid][BalTrailer2])) DestroyDynamicObject(vInfo[vid][BalTrailer2]);

	vInfo[vid][BalIndex1] = INVALID_OBJECT_ID;
	vInfo[vid][BalIndex2] = INVALID_OBJECT_ID;
	vInfo[vid][BalTrailer1] = INVALID_OBJECT_ID;
	vInfo[vid][BalTrailer2] = INVALID_OBJECT_ID;
	vInfo[vid][BalIndex] = INVALID_OBJECT_ID;

	if(IsValidDynamicObject(vInfo[vid][JobbIndex1])) DestroyDynamicObject(vInfo[vid][JobbIndex1]);
	if(IsValidDynamicObject(vInfo[vid][JobbIndex2])) DestroyDynamicObject(vInfo[vid][JobbIndex2]);
	if(IsValidDynamicObject(vInfo[vid][JobbTrailer1])) DestroyDynamicObject(vInfo[vid][JobbTrailer1]);
	if(IsValidDynamicObject(vInfo[vid][JobbTrailer2])) DestroyDynamicObject(vInfo[vid][JobbTrailer2]);

	vInfo[vid][JobbIndex1] = INVALID_OBJECT_ID;
	vInfo[vid][JobbIndex2] = INVALID_OBJECT_ID;
	vInfo[vid][JobbTrailer1] = INVALID_OBJECT_ID;
	vInfo[vid][JobbTrailer2] = INVALID_OBJECT_ID;
	vInfo[vid][JobbIndex] = INVALID_OBJECT_ID;

	if(IsValidDynamicObject( vInfo[vid][vNeon][1] ))
		DestroyDynamicObject( vInfo[vid][vNeon][1] );

	if(IsValidDynamicObject( vInfo[vid][vNeon][2] ))
		DestroyDynamicObject( vInfo[vid][vNeon][2] );

	vInfo[vid][vNeon][1] = INVALID_OBJECT_ID;
	vInfo[vid][vNeon][2] = INVALID_OBJECT_ID;
	vInfo[vid][vNeon][4] = false;

	return true;
}

fpublic OnGarazsCreate(id)
{
	gInfo[ id ][gID] = cache_insert_id();
}
fpublic GarazsBetoltes()
{
	print("Szerver: Garázsok betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
		new i = -1;
	    for(;++i < nums;)
	    {
			gInfo[i][gVan] = true;
			mysql_get_int(i, "id", gInfo[i][gID]);
			mysql_get_int(i, "tipus", gInfo[i][gTipus]);
			mysql_get_int(i, "tulaj", gInfo[i][gTulaj]);
			mysql_get_int(i, "ara", gInfo[i][gAr]);
			mysql_get_int(i, "haz", gInfo[i][gHaz]);

			mysql_get_float(i, "x", gInfo[i][gPozBe][0]);
			mysql_get_float(i, "y", gInfo[i][gPozBe][1]);
			mysql_get_float(i, "z", gInfo[i][gPozBe][2]);
			mysql_get_float(i, "a", gInfo[i][gPozBe][3]);
            mysql_get_int(i, "zarva", gInfo[i][gZarva]);
            
			gInfo[i][gPickup] = CreateDynamicPickup(19132, 23, posArr{gInfo[i][gPozBe]}, 0, 0, -1);
	    	gInfo[i][gText] = CreateDynamic3DTextLabel("[GARÁZSBEJÁRAT]\n{FF6A00}/garázs be",COLOR_WHITE, posArr{gInfo[i][gPozBe]} ,DEFAULT_LABEL_DISTANCE);
			Iter_Add(Garazsok, i);
		}
	}
  	printf("Szerver: %d garázs sikeresen betöltve!", nums);
 	return true;
}
stock UjGarazs(tipus, Float:x, Float:y, Float:z, Float:angle, haz = NINCS, tulajid = NINCS, ara = 10000)
{
	new freeslot = NINCS, i = NINCS;
	tipus--;
	for(; ++i < MAX_GARAZS;)
	{
	    if(gInfo[i][gVan]) continue;
		freeslot = i;
		break;
	}
	if(freeslot != NINCS)
	{
	    gInfo[freeslot][gVan] = true;
	    gInfo[freeslot][gTipus] = tipus;
	    gInfo[freeslot][gTulaj] = tulajid;
	    gInfo[freeslot][gAr] = ara;
	    gInfo[freeslot][gHaz] = haz;

	    gInfo[freeslot][gPozBe][0] = x;
	    gInfo[freeslot][gPozBe][1] = y;
	    gInfo[freeslot][gPozBe][2] = z;
	    gInfo[freeslot][gPozBe][3] = angle;
	    gInfo[freeslot][gZarva] = 1;
	    gInfo[freeslot][gPickup] = CreateDynamicPickup(19132, 23, x, y, z, 0, 0, -1);
	    gInfo[freeslot][gText] = CreateDynamic3DTextLabel("[GARÁZS]\n{FF6A00}/garázs be",COLOR_WHITE,x, y, z,DEFAULT_LABEL_DISTANCE);

		new insert[512];
	    format(insert, 512, "INSERT INTO `"#MYSQL_GARAZS_TABLA"` (tipus, tulaj, ara, haz, x, y, z, a) VALUES (");
        format(insert, 512, "%s'%d'", insert, tipus);
		format(insert, 512, "%s,'%d'", insert, tulajid);
        format(insert, 512, "%s,'%d'", insert, ara);
        format(insert, 512, "%s,'%d'", insert, haz);
        format(insert, 512, "%s,'%.4f'", insert, x);
        format(insert, 512, "%s,'%.4f'", insert, y);
        format(insert, 512, "%s,'%.4f'", insert, z);
        format(insert, 512, "%s,'%.4f'", insert, angle);
        format(insert, 512, "%s)", insert);
		mysql_tquery(sql_ID, insert, "OnGarazsCreate", "d", freeslot);

	    Iter_Add(Garazsok, freeslot);
	}
	return freeslot;
}
stock Garazsban(playerid)
{
	new benne = NINCS;
	new pinter = GetPlayerInterior(playerid);
	new vw = GetPlayerVirtualWorld(playerid);
	foreach(Garazsok, i)
	{
	    if(pinter != floatround(g_GarazsInteriorok[ gInfo[i][gTipus] ][4]) || vw != gInfo[i][gID] || !IsPlayerInRangeOfPoint(playerid, 10.0, posArr{g_GarazsInteriorok[ gInfo[i][gTipus] ]}) ) continue;
		benne = i;
		break;
	}
	return benne;
}
stock Garazsnal(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		new
			kozeligarazs = NINCS,
			Float:closestdist = 9999.0,
			Float:dist
		;

		foreach(Garazsok, garazs)
		{
			dist = GetPlayerDistanceFromPoint(playerid, posArr{gInfo[garazs][gPozBe]});
			if(dist < closestdist)
			{
				closestdist = dist;
				kozeligarazs = garazs;
			}
		}
		return kozeligarazs;
	}
	return NINCS;
}

stock UjJarmu(modelid, tipusa, ara, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:angle2, color1, color2, bool:insert)
{
	new ujkocsi = UjKocsiID();
	if(ujkocsi > 0)
	{
		format(vInfo[ujkocsi][vTulaj], MAX_PLAYER_NAME, "Nincs_Tulaj");
		vInfo[ujkocsi][vTulajID] = NINCS;
		vInfo[ujkocsi][vAr] = ara;
		vInfo[ujkocsi][vModel] = modelid;
		vInfo[ujkocsi][vMunka] = tipusa;
		vInfo[ujkocsi][vSzin1] = color1;
		vInfo[ujkocsi][vSzin2] = color2;
		vInfo[ujkocsi][vPosx] = spawn_x;
		vInfo[ujkocsi][vPosy] = spawn_y;
		vInfo[ujkocsi][vPosz] = spawn_z;
		vInfo[ujkocsi][vAngle] = angle2;
		vInfo[ujkocsi][vInt] = 0;
		vInfo[ujkocsi][vVW] = 0;
		vInfo[ujkocsi][vHasznalva] = true;
		vInfo[ujkocsi][vElet] = 1000.0;
		vInfo[ujkocsi][vHiba] = 0;
		vInfo[ujkocsi][vZarva] = false;
		vInfo[ujkocsi][vRang] = 0;
		vInfo[ujkocsi][vKilometer] = 0;
		vInfo[ujkocsi][vUzemanyag] = MAX_Benzin[modelid - 400];
		vInfo[ujkocsi][vPanels] = 0;
		vInfo[ujkocsi][vDoors] = 0;
		vInfo[ujkocsi][vLights] = 0;
		vInfo[ujkocsi][vTires] = 0;
		vInfo[ujkocsi][vHidraulika] = 0;
		vInfo[ujkocsi][vMatrica] = 0;
		vInfo[ujkocsi][vNOS] = 0;
		for(new i=0;i<14;i++)
		{
			vInfo[ujkocsi][vMod][i] = 0;
		}
		vInfo[ujkocsi][vInsert] = insert;

		JarmuSpawn(ujkocsi, modelid, spawn_x, spawn_y, spawn_z, angle2, color1, color2);

		if(insert)
		{
			nformat(qurery, 1024, "INSERT INTO `"#MYSQL_JARMU_TABLA"` \
			(ID, Tulaj, TulajID, Ar, Model, Munka, Szin1, Szin2, VPosx, VPosy, VPosz, VAngle, VUzemanyag) \
			VALUES('%d', 'Nincs_Tulaj', '-1', '%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f')", \
			ujkocsi, ara, modelid, tipusa, color1, color2, spawn_x, spawn_y, spawn_z, angle2, MAX_Benzin[modelid-400]);

			mysql_tquery(sql_ID, qurery, "", "");
		}
		return true;
	}
	return true;
}

stock TrailerAttached(trailer)
{
	new csatolva = NINCS;
	foreach(Jarmuvek, id)
	{
		if(!IsVehicleConnected(id) || id == trailer) continue;
		if(GetVehicleTrailer(id) == trailer)
		{
			csatolva = id;
			break;
		}
	}

	return csatolva;
}

stock Float:vPosDifference(id)
{
	new Float:diff, Float:pos[3];
	GetVehiclePos(vInfo[id][vID], PosExt(pos));
	diff = GetDistance(PosExt(pos), vInfo[id][vPosx], vInfo[id][vPosy], vInfo[id][vPosz]);
	return diff;
}
#define JARMU_RESPAWN_TIME 10//perc
stock JarmuRespawn(javitas)
{
	foreach(Jarmuvek, id)
	{
		new vid = JarmuID(id, INVALID_PLAYER_ID), Float:HP, time = gettime(), bool:repair;
		if(vid)
		{
			if(vInfo[vid][vMunka] > MAX_FRAKCIO || javitas == 1) repair = true;//munka és bérelhetõ kocsik javulnak
			else repair = false;

			if((vInfo[vid][vLastActive] + (JARMU_RESPAWN_TIME*60)) <= time)//10perc
			{
				if(VanUtas(id)) continue;
				if(TrailerAttached(id) != NINCS) continue;
				if(!repair)
				{
					GetVehicleHealth(vInfo[vid][vID], HP);
					if(HP < 350) HP = 350.0;

					GetVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
				}

				SetVehicleToRespawn(vInfo[vid][vID]);
				if(!repair)
				{
					SetVehicleHealth(vInfo[vid][vID], HP);
					vInfo[vid][vElet] = HP;
					vehicleh[vInfo[vid][vID]] = HP;
					UpdateVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
				}
				else if(repair)
				{
					SetVehicleHealth(vInfo[vid][vID], 1000.0);
					vInfo[vid][vElet] = 1000.0;
					vehicleh[vInfo[vid][vID]] = 1000.0;
				}
			}
		}
	}
	return true;
}

stock JarmuJavitas( id, bool:panelek = true, Float:elet = 1000.0)
{
	sid = JarmuID( id, INVALID_PLAYER_ID );
	if(sid)
	{
		if(panelek)
		{
			vInfo[vdb][vPanels] = 0;
			vInfo[vdb][vDoors] = 0;
			vInfo[vdb][vLights] = 0;
			vInfo[vdb][vTires] = 0;
		}
		vInfo[ sid ][vElet] = elet;
	}

	SetVehicleHealth(id, elet);
	if(panelek) RepairVehicle(id);
	return true;
}

stock UjTelefonSzam()
{
	new telefonszam = 2742 + random(8999);

	/*ciklus:
	nformat(queery, 256, "SELECT id FROM `"#MYSQL_JATEKOS_TABLA"` WHERE ptelefon = '%d'", telefonszam);
	mysql_function_query(sql_ID, queery, false, "", "");
	//mysql_store_result();

	if(mysql_num_rows())
	{
		telefonszam = 2742 + random(8999);
		goto ciklus;
	} else
		goto vege;
	vege:*/
	return telefonszam;
}

stock UjPinkod()
{
	new pinkod = 1000 + random(8999);

	/*ciklus:
	if(mysql_num_rows())
	{
		pinkod = 1000 + random(8999);
		goto ciklus;
	} else
		goto vege;
	vege:*/
	return pinkod;
}

stock UjSzamlaszam()
{
	new szamlszam = 100000 + random(899999);
	return szamlszam;
}

stock file_content( hol[], mit[] ) //Lehetõleg ezt használd, fölösleges külön file kezelõ - Martin
{
	new ertek[256];
	if(fexist(hol))
	{
		new File:fajl = fopen(hol, io_read), sor[256];
		while(fread(fajl, sor))
		{
			new keres = strfind(sor, "=", true);
			if(strcmp(sor, mit, true, keres) == 0)
			{
				strmid(ertek, sor, (keres + 1), strlen(sor));
				fclose(fajl);
				return ertek;
			}
		}
	}

	return ertek;
}

stock RandomHirdetes()
{
	/*new id;
	if(id != NINCS)
		return true;*/

	#define RANDOM_HIR "hirdetes.cfg"
	new Sorok[20][256], db;
	if(fexist(RANDOM_HIR))
	{
		new File:fajl = fopen(RANDOM_HIR, io_read), sor[256];
		while(fread(fajl, sor))
		{
			strmid(Sorok[ db ], sor, 0, strlen(sor));
			db++;
			/*new keres = strfind(sor, "=", true);
			if(strcmp(sor, "hir", true, keres) == 0)
			{
				strmid(Sorok[ db ], sor, (keres + 1), strlen(sor));
				db++;
			}*/
		}

		fclose(fajl);
	}

	if(db)
	{
		new bool:van, szam;
		do
		{
			van = false, szam = random( 20 );
			if(strlen( Sorok[ szam ] ) < 1)
				van = true;

		}while(van);

		SendFormatMessageToAll(COLOR_SZURKE, "Tipp:"#COL_MKEK" %s", Sorok[ szam ]);
	}
	return true;
}

stock JarmuID(vehicleid, playerid, bool:ciklus = false)
{
	if(vehicleid > MAX_VEHICLES || vehicleid < 0)
	{
		printf("Car Attack: %d | playerid: %d", vehicleid, playerid);
		if(playerid != INVALID_PLAYER_ID && IsPlayerConnected(playerid))
		{
			nformat(string, 128, "[AC]: {1E90FF}[%d]%s - Cheat: Car Attack - ID: %d -", playerid, JatekosNev(playerid), vehicleid);
			AdminUzenetEx(LKEK, 1001, string);
			Log(FILE_CHEAT, string);

			if(!Admin(playerid, FOADMIN_SZINT))
				ServerBan(playerid, 0, "Car attack", NINCS, (!Belepve(playerid) ? true : false), true, true);
		}
		return 0;
	}

	new visszateres = vInfoID[vehicleid];
	if(ciklus)
	{
		visszateres = 0;
		foreach(Jarmuvek, i)
		{
			if(vInfo[i][vHasznalva])
			{
				if(vInfo[i][vID] == vehicleid)
				{
					visszateres = i;
					break;
				}
			}
		}
	}
	return visszateres;
}

stock ObjectID(objectid)
{
	new i = 0, visszateres = 0;

	for(;++i < MAX_AUTOMATA;)
	{
		if(AutomataInfo[i][auhasznalva])
		{
			if(AutomataInfo[i][auobject] == objectid)
			{
				visszateres = i;
				break;
			}
		}
	}
	return visszateres;
}

stock BenzinkutnalVan(playerid, Float:rangeje = 15.0)
{
	new i = 0, visszateres = 0;

	for(;++i < MAX_BENZINKUT;)
	{
		if(BenzinkutInfo[i][bhasznalva])
		{
			if(IsPlayerInRangeOfPoint(playerid, rangeje, BenzinkutInfo[i][bposx], BenzinkutInfo[i][bposy], BenzinkutInfo[i][bposz]))
			{
				visszateres = i;
				break;
			}
		}
	}
	return visszateres;
}

stock BenzinkutLetezik(const benzinkutneve[])
{
	new b = 0;

	for(;++b < MAX_BENZINKUT;)
	{
		if(BenzinkutInfo[b][bhasznalva])
		{
			if(!strcmp(BenzinkutInfo[b][bnev], benzinkutneve, true))
			{
				return b;
			}
		}
	}
	return false;
}

stock UjBenzinkutID()
{
	new i = 0, idje = 0;

	for(;++i < MAX_BENZINKUT;)
	{
	    if(!BenzinkutInfo[i][bhasznalva])
	    {
	        idje = i;
			break;
		}
	}
	return idje;
}
stock IsScripter(playerid, bool:ex = false)
{
	for(new i; i < sizeof(Scripter); i++)
	{
		if(Fonok[playerid] == 1 && Belepett[playerid] || !strcmp(PlayerInfo[playerid][pNev], Scripter[i][0]) && (PlayerInfo[playerid][pID] == Scripter[i][1][0]))
		{
			if(ex) return i;
			else return true;
		}
	}
	if(ex) return NINCS;
	else return false;
}
stock UjKocsiID()
{
	new i = 0, idje = 0;
	for(;++i < MAX_VEHICLES;)
	{
	    if(!vInfo[i][vHasznalva])
	    {
	        idje = i;
			break;
		}
	}
	return idje;
}

stock UjTeleportID()
{
	new tid = 0, kutya = 0;
	for(;++tid < MAX_TELEPORT;)
	{
	    if(!TPInfo[tid][tphasznalva])
	    {
	        kutya = tid;
	        break;
	    }
	}
	return kutya;
}

stock UjAjtoID()
{
	new i = 0, visszateres = 0;

	for(;++i < MAX_AJTO;)
	{
	    if(!AjtoInfo[i][ahasznalva])
	    {
	        visszateres = i;
	        break;
	    }
	}
	return visszateres;
}

stock UjAutomataID()
{
	new i = 0, visszateres = 0;

	for(;++i < MAX_AUTOMATA;)
	{
	    if(!AutomataInfo[i][auhasznalva])
	    {
	        visszateres = i;
	        break;
	    }
	}
	return visszateres;
}

stock KozeliObject( playerid, tipus = NINCS, Float:tav = 3.0)
{
	new k = NINCS, id = NINCS;
	new int = GetPlayerInterior(playerid), vw = GetPlayerVirtualWorld(playerid);

	for(;++k < MAX_AUTOMATA;)
	{
		if(AutomataInfo[k][auhasznalva] && (tipus == NINCS || AutomataInfo[k][autipus] == tipus))
		{
			if(AutomataInfo[k][auVW] != vw || AutomataInfo[k][auInt] != int)
				continue;

			if(IsPlayerInRangeOfPoint(playerid, tav, PosExt(AutomataInfo[k][aupos])))
			{
				id = k;
				break;
			}
		}
	}

	return id;
}

stock AjtoKereses(const ajtonakaneve[])
{
	new i = NINCS;

	for(;++i < MAX_AJTO;)
	{
	    if((strlen(AjtoInfo[i][anev]) > 0) && !strcmp(AjtoInfo[i][anev], ajtonakaneve, true))
	    {
	        return i;
	    }
	}
	return NINCS;
}

stock AjtoTeleport(playerid, tipus, aid, bool:gotoigen = false)
{
	//0 kintrõl be
	//1 bentrõl ki
	new Float:ajtoposok[4], ajinterior, ajvw;
	if(PlayerInfo[playerid][pobjectbetoltes] && !PlayerInfo[playerid][pbemehet])
		return SCM(playerid, COL_LRED, "Már egy teleport folyamatban van!");

	ajtoposok[0] = tipus ? AjtoInfo[aid][abepos][0] : AjtoInfo[aid][akipos][0];
	ajtoposok[1] = tipus ? AjtoInfo[aid][abepos][1] : AjtoInfo[aid][akipos][1];
	ajtoposok[2] = tipus ? AjtoInfo[aid][abepos][2] : AjtoInfo[aid][akipos][2];
	ajtoposok[3] = tipus ? AjtoInfo[aid][abepos][3] : AjtoInfo[aid][akipos][3];
	ajinterior = tipus ? AjtoInfo[aid][abeinterior] : AjtoInfo[aid][akiinterior];
	ajvw = tipus ? AjtoInfo[aid][abevw] : AjtoInfo[aid][akivw];

	defer JatekosTeleportalhat[(AjtoInfo[aid][afreeze] != 0 ? (AjtoInfo[aid][afreeze] + 4000) : 4000)](playerid, true);

	if((ajtoposok[0] == 0.0) && (ajtoposok[1] == 0.0) && (ajtoposok[2] == 0.0))
		return SCM(playerid, COL_LRED, "Ennek az ajtónak nincs kijárata! Kérlek értesítsd az Adminokat!");

	if(IsPlayerInAnyVehicle(playerid))
	{
		SetVehiclePos(GetPlayerVehicleID(playerid), ajtoposok[0], ajtoposok[1], ajtoposok[2]);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), ajtoposok[3]);

	} else
		SetPos(playerid, ajtoposok[0], ajtoposok[1], ajtoposok[2], ajtoposok[3]);

	SetInterior(playerid, ajinterior);
	SetVirtualWorld(playerid, ajvw);
	PlayerInfo[playerid][pbemehet] = false;

	if(AjtoInfo[aid][ajarmu])
	{
		DestroyDynamicPickup(tipus ? AjtoInfo[aid][abepickupk] : AjtoInfo[aid][akipickupk]);
		AjtoInfo[aid][tipus ? abepickupk : akipickupk] = CreateDynamicPickup(1007, 14, tipus ? AjtoInfo[aid][abepos][0] : AjtoInfo[aid][akipos][0], tipus ? AjtoInfo[aid][abepos][1] : AjtoInfo[aid][akipos][1], tipus ? AjtoInfo[aid][abepos][2] : AjtoInfo[aid][akipos][2], 0);
	}
	if(AjtoInfo[aid][afreeze] && !gotoigen)
	{
		PlayerInfo[playerid][pobjectbetoltes] = true;
		TogglePlayerControllable(playerid, 0);
		defer UnFreeze[ AjtoInfo[aid][afreeze] ](playerid);
	}
	return true;
}

stock AdminRang(playerid)
{
	new rang[24], sc = IsScripter(playerid, true);

	if(sc != NINCS && Scripter[ sc ][2][0] && PlayerInfo[playerid][padmin] == 5555) rang = "Scripter";
	else if(sc != NINCS && !Scripter[ sc ][2][0] && PlayerInfo[playerid][padmin]) rang = "ScripterSegéd";
	else if(1 <= PlayerInfo[playerid][padmin] <= 5) rang = "Admin";
	else if(PlayerInfo[playerid][padmin] == FSEGED_SZINT) rang = "FõAdminSegéd";
	else if(PlayerInfo[playerid][padmin] == FOADMIN_SZINT) rang = "FõAdmin";
	else if(PlayerInfo[playerid][padmin] == SZUPER_SZINT) rang = "SuperAdmin";
	else if(PlayerInfo[playerid][padmin] == AC_SZINT) rang = "AdminController";
	else if(PlayerInfo[playerid][padmin] == FEJLESZTO_SZINT) rang = "Fejlesztõ";
	else if(PlayerInfo[playerid][padmin] == TULAJ_SZINT) rang = "Tulajdonos";
	else if(PlayerInfo[playerid][padmin] == SCRIPTER_SZINT) rang = "AdminController";
	else if(PlayerInfo[playerid][padmin] == FOSCRIPTER_SZINT) rang = "FõScripter";
	else if(PlayerInfo[playerid][padmin] == RENDSZG_SZINT) rang = "sysAdmin";
	else if(IsAS(playerid)) rang = "Adminsegéd";
	return rang;
}

stock JatekosNev(playerid, bool:normal = false, bool:real = false, bool:adminnev = false)
{
	new nev[256];

	if(!adminnev)
	{
		if(PlayerInfo[playerid][pAlnevbe] == false)
		{
			if(real || !Belepve(playerid)) GetPlayerName(playerid, nev, sizeof(nev));
			else format(nev, sizeof(nev), "%s", PlayerInfo[playerid][pNev]);
		}
		else
		{
			format(nev,sizeof(nev),"%s",PlayerInfo[playerid][pAlnev]);
		}
		if(normal)
		{
			new i = -1;
			for(;++i < strlen(nev);)
			{
				if(nev[i] == '_')
					nev[i] = ' ';
			}
		}
	}
	else
	{
	    format(nev,sizeof(nev),"%s",PlayerInfo[playerid][pAdminNev]);
	}
	return nev;
}

stock IsAS( pid )
{
	if(PlayerInfo[ pid ][pAS] > gettime() || PlayerInfo[ pid ][pAS] == NINCS && PlayerInfo[pid][pTiltasok][TILTAS_AS] == 0)
		return true;

	return false;
}

stock Admin(playerid, szint)
{
	if(!Belepve(playerid))
		return false;

	new sc = IsScripter( playerid, true );
	if(PlayerInfo[playerid][padmin] >= szint || (sc != NINCS && Scripter[ sc ][2][0]))
	    return true;
	else
		return false;
}

stock FrakcioJarmu(playerid, vehicleid)
{
	if((PlayerInfo[playerid][pFrakcio] > 0) && \
	(vInfo[vehicleid][vMunka] == PlayerInfo[playerid][pFrakcio]) && \
 	(vInfo[vehicleid][vRang] <= PlayerInfo[playerid][prang]))
		return true;
	return false;
}

stock IsVehicleConnected(vehicleid)
{
	new Float:x1,Float:y1,Float:z1;
	GetVehiclePos(vehicleid,x1,y1,z1);
	if(x1==0.0 && y1==0.0 && z1==0.0)
	{
		return false;
	}
	return true;
}

stock Float:GetDistanceToHulla(playerid, hulla)
{
	if(IsPlayerConnected(playerid) && HullaInfo[hulla][Hvan])
	{
		return GetDistanceToPointEx(playerid, HullaInfo[hulla][Hpos][0], HullaInfo[hulla][Hpos][1], HullaInfo[hulla][Hpos][2]);
	}
	return INF_FLOAT;
}

stock GetClosestHulla(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new kozelihulla=NINCS;
		new Float:closestdist = 9999.0, Float:dist;
		for(new hulla=0; hulla< MAX_HULLA; hulla++)
		{
			dist = GetDistanceToHulla(playerid, hulla);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelihulla = hulla;
			}
		}
		return kozelihulla;
	}
	return NINCS;
}

stock Float:GetDistanceToAutomata(playerid, automataid)
{
	if(IsPlayerConnected(playerid) && AutomataInfo[automataid][auhasznalva] && !AutomataInfo[automataid][auszerkeszti])
	{
		return GetDistanceToPointEx(playerid, AutomataInfo[automataid][aupos][0], AutomataInfo[automataid][aupos][1], AutomataInfo[automataid][aupos][2]);
	}
	return INF_FLOAT;
}

stock Float:GetDistanceToBenzinkut(playerid, benzinkutid)
{
	if(IsPlayerConnected(playerid) && BenzinkutInfo[benzinkutid][bhasznalva])
	{
		return GetDistanceToPointEx(playerid, BenzinkutInfo[benzinkutid][bposx], BenzinkutInfo[benzinkutid][bposy], BenzinkutInfo[benzinkutid][bposz]);
	}
	return INF_FLOAT;
}

stock GetClosestBenzinkut(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new kozelibenzinkut = NINCS;
		new Float:closestdist = 9999.0, Float:dist;
		new benzinkutak = 0;
		for(;++benzinkutak < MAX_BENZINKUT;)
		{
			if(BenzinkutInfo[benzinkutak][bhasznalva])
			{
				dist = GetDistanceToBenzinkut(playerid, benzinkutak);
				if(dist < closestdist)
				{
					closestdist = dist;
					kozelibenzinkut = benzinkutak;
				}
			}
		}
		return kozelibenzinkut;
	}
	return NINCS;
}

stock GetXYZInFrontOfPlayer(playerid, &Float:x, &Float:y, &Float:z, Float:dis)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,a);
	GetXYInFrontOfPoint(x, y, a, dis);
}

stock GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}

stock SetJarmu(kocsi, edit, ertek)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, objective);
	switch(edit)
	{
		case KOCSI_MOTOR: SetVehicleParamsEx(kocsi, ertek, lights, alarm, doors, bonnet, boot, objective);
		case KOCSI_LAMPA: SetVehicleParamsEx(kocsi, engine, ertek, alarm, doors, bonnet, boot, objective);
		case KOCSI_RIASZTO: SetVehicleParamsEx(kocsi, engine, lights, ertek, doors, bonnet, boot, objective);
		case KOCSI_AJTO: SetVehicleParamsEx(kocsi, engine, lights, alarm, ertek, bonnet, boot, objective);
		case KOCSI_MOTORHAZTETO: SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, ertek, boot, objective);
		case KOCSI_CSOMAGTARTO: SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, ertek, objective);
		case KOCSI_OBJECTIVE: SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, ertek);
	}
}
stock GetJarmu(kocsi, edit)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, objective);
	switch(edit)
	{
		case KOCSI_MOTOR: return engine;
		case KOCSI_LAMPA: return lights;
		case KOCSI_RIASZTO: return alarm;
		case KOCSI_AJTO: return doors;
		case KOCSI_MOTORHAZTETO: return bonnet;
		case KOCSI_CSOMAGTARTO: return boot;
	}
	return true;
}

stock KozeliAjto(playerid)
{
    new Float:playerpos[3],
		Float:legkozelebb = 1000.0,
		Float:tav,
		ajto = 0,
		i = 0;

	GetPlayerPos(playerid, playerpos[0], playerpos[1], playerpos[2]);
	for(;++i < MAX_AJTO;)
	{
		if(AjtoInfo[i][ahasznalva])
		{
			tav = GetDistance(playerpos[0], playerpos[1], playerpos[2], AjtoInfo[i][abepos][0], AjtoInfo[i][abepos][1], AjtoInfo[i][abepos][2]);
			if(tav < legkozelebb)
			{
				legkozelebb = tav;
				ajto = i;
			}
		}
	}
    return ajto;
}

stock GetClosestVehicle(playerid, bool:benneulcheck = true)
{
	new kocsi = NINCS, kocsibaul;
	new playerint = GetPlayerInterior(playerid);
	new playervw = GetPlayerVirtualWorld(playerid);
	
	if(IsPlayerInAnyVehicle(playerid)) kocsibaul = GetPlayerVehicleID(playerid);
	if(benneulcheck && kocsibaul > 0) kocsi = kocsibaul;

	if(kocsi != NINCS)
		return kocsi;

	if(IsPlayerConnected(playerid))
	{
		new closestvehicle = 1;
		new Float:closestdist = 9999.0, Float:dist;
		foreach(Jarmuvek, vid)
		{
			if(vid == kocsibaul) continue;
			if(GetVehicleVirtualWorld(vid) != playervw || GetVehicleInterior(vid) != playerint) continue;
			
			dist = GetDistanceToVehicle(playerid,vid);
			if(dist < closestdist)
			{
				closestdist = dist;
				closestvehicle = vid;
			}
		}
		return closestvehicle;
	}
	return NINCS;
}

stock NincsBenne_Radio( model )
{
	new Ebben_Nincs_Radio[] =
	{
		417,425,430,432,446,447,448,452,453,
		454,461,642,463,468,469,471,472,473,
		481,484,487,488,493,497,509,510,521,
		522,523,539,548,563,568,571,581,586,
		595
	};

	new i = NINCS;
	for(;++i < sizeof(Ebben_Nincs_Radio);)
		if(model == Ebben_Nincs_Radio[i])
			return true;

	return false;
}

stock Cselekves(playerid, cselekves[], valaki = 0, bool:OOC = false)
{
	new string[128];
	if(PlayerInfo[playerid][pAlnevbe] == false)
	{
		if(valaki == 1)
			format(string, sizeof(string), "* Valaki %s", cselekves);
		else if(valaki == 0)
		{
			new maszkid[24];
			format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
			format(string, sizeof(string), "* %s %s", (PlayerInfo[playerid][pMaszkVisel] ? maszkid : JatekosNev(playerid, true)), cselekves);
		}
		else if(valaki == 2 || valaki == NINCS)
			format(string, sizeof(string), "* %s", cselekves);
		else if(OOC)
			format(string, sizeof(string), "(( %s ))", string);
	}
	else
	{
		format(string,sizeof(string),"* %s %s",PlayerInfo[playerid][pAlnev],cselekves);
		if(OOC)
			format(string, sizeof(string), "(( %s ))", string);
	}

	ProxDetector(15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

	return true;
}
task AdatMentesMindenkinek[(15000 * 60)]()
{
	AdatMentesSzerver( false );
	foreach(Player,p)
	{
		if(PlayerInfo[p][ppenz] < 0 || PlayerInfo[p][pBszPenz] < 0 && PlayerInfo[p][pVerdij] < 1)
		{
			PlayerInfo[p][pTartozas]++;
			if(PlayerInfo[p][pTartozas] == AUTOVERDIJ)
			{
				format(PlayerInfo[p][pVerdijOk], 32, "Tartozás");
				PlayerInfo[p][pVerdij] += 10000;
				PlayerInfo[p][pTartozas] = 0;

				foreach(Player,x)
				{
					if(IsHitman(x))
					{
						SendClientMessage(x, FEHER,"=====[ "#COL_LKEK"Ügynökség - "#COL_VZOLD"Új megbízás"#COL_FEHER" ]=====");
						SendFormatMessage(x, LKEK,"Célpont: "#COL_FEHER"%s - Vérdíj: %s$ - Oka: Tartozás", JatekosNev(p), FN(PlayerInfo[p][pVerdij]));
					}
				}
			}
		}
	}
	return true;
}

fpublic AdatMentesSzerver( bool:idpd )
{
    ServerInfo[sUpdater]++;
    printf("=============== [ Automatikus mentés! (%dx) ] ===============", ServerInfo[sUpdater]);

	foreach(Player, pid)
	{
		if(Belepve(pid) && !IsPlayerNPC(pid))
			AdatMentes(pid);
	}
	print("Szerver: Játékosok adatai automatikusan mentve!");

	JarmuMentes();
	print("Szerver: Jármûvek adatai automatikusan mentve!");

	FrakcioMentes();
	print("Szerver: Frakciók adatai automatikusan mentve!");

	AutomataMentes();
	print("Szerver: Automaták adatai automatikusan mentve!");

	TeruletMentes();
	print("Szerver: Területek adatai automatikusan mentve!");

	CegMuvelet(2);
	print("Szerver: Cegek adatai automatikusan mentve!");

	BenzinkutMentes();
	print("Szerver: Benzinkutak adatai automatikusan mentve!");

	HazMentes();
	print("Szerver: Házak adatai automatikusan mentve!");

	if(idpd) {
		AdminUzenet(COLOR_GREEN, 1, "Szerver adatai sikeresen elmentve! (Updater: %d)", ServerInfo[sUpdater]);
		return true;
	}

	//Ban törlés, ha már nincs beállítva cron a szerveren
	doQuery("DELETE FROM `"#MYSQL_BAN_TABLA"` WHERE UIdo!='0' AND UIdo<='%d'", gettime());
	//AdatFrissites_Frakcio( NINCS, NINCS );
	return true;
}

/*fpublic AdatFrissites_Frakcio( fk, process ) // befejezni
{
	if(fk != NINCS)
	{
		FkInfo[ fk ][fTagok] = num;

	}
	if(process == 1)
	{
		new i;
		for(;i < MAX_FRAKCIO;)
		{
			if(!FkInfo[i][fVan]) continue;
			nformat(sql, 128, "SELECT pfrakcio FROM `"#MYSQL_JATEKOSOK_TABLA"` WHERE pfrakcio = '%d'", i);
			mysql_tquery(sql_ID, sql, "AdatFrissites_Frakcio", "i", i, 1);
		}
	}
	return true;
}*/

fpublic TeleBetoltese()
{
	print("Szerver: Teleportok betöltése!");

	new nums, fields, tid = 0;
	cache_get_data(nums, fields);

	if(nums)
	{
		new i = 0;
		for(;++i < nums;)
		{
			mysql_get_int(i, "id", tid);
			mysql_get_float(i, "tposx", TPInfo[tid][tposx]);
			mysql_get_float(i, "tposy", TPInfo[tid][tposy]);
			mysql_get_float(i, "tposz", TPInfo[tid][tposz]);
			mysql_get_float(i, "tangle", TPInfo[tid][tangle]);
			mysql_get_string(i, "tpnev", TPInfo[tid][tpnev]);
			mysql_get_int(i, "tinterior", TPInfo[tid][tinterior]);
			mysql_get_int(i, "tvw", TPInfo[tid][tvw]);
			TPInfo[tid][tphasznalva] = true;
		}
	}
	printf("Szerver: %d teleport sikeresen betöltve!", nums);
	return true;
}

stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;

    if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT; 	// Up & Left key pressed
		else if(ud > 0) direction = MOVE_BACK_LEFT; 	// Back & Left key pressed
		else            direction = MOVE_LEFT;          // Left key pressed
	}
	else if(lr > 0) 	// Right pressed
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;  // Up & Right key pressed
		else if(ud > 0) direction = MOVE_BACK_RIGHT;     // Back & Right key pressed
		else			direction = MOVE_RIGHT;          // Right key pressed
	}
	else if(ud < 0) 	direction = MOVE_FORWARD; 	// Up key pressed
	else if(ud > 0) 	direction = MOVE_BACK;		// Down key pressed

	return direction;
}

stock MoveCamera(playerid)
{
	new Float:FV[3], Float:CP[3];
	GetPlayerCameraPos(playerid, CP[0], CP[1], CP[2]);
    GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);
	if(noclipdata[playerid][accelmul] <= 1) noclipdata[playerid][accelmul] += ACCEL_RATE;
	new Float:speed = MOVE_SPEED * noclipdata[playerid][accelmul];
	new Float:X, Float:Y, Float:Z;
	GetNextCameraPosition(noclipdata[playerid][mode], CP, FV, X, Y, Z);
	MovePlayerObject(playerid, noclipdata[playerid][flyobject], X, Y, Z, speed);
	noclipdata[playerid][lastmove] = GetTickCount();
	return 1;
}

stock GetNextCameraPosition(move_mode, Float:CP[3], Float:FV[3], &Float:X, &Float:Y, &Float:Z)
{
    #define OFFSET_X (FV[0]*6000.0)
	#define OFFSET_Y (FV[1]*6000.0)
	#define OFFSET_Z (FV[2]*6000.0)
	switch(move_mode)
	{
		case MOVE_FORWARD:
		{
			X = CP[0]+OFFSET_X;
			Y = CP[1]+OFFSET_Y;
			Z = CP[2]+OFFSET_Z;
		}
		case MOVE_BACK:
		{
			X = CP[0]-OFFSET_X;
			Y = CP[1]-OFFSET_Y;
			Z = CP[2]-OFFSET_Z;
		}
		case MOVE_LEFT:
		{
			X = CP[0]-OFFSET_Y;
			Y = CP[1]+OFFSET_X;
			Z = CP[2];
		}
		case MOVE_RIGHT:
		{
			X = CP[0]+OFFSET_Y;
			Y = CP[1]-OFFSET_X;
			Z = CP[2];
		}
		case MOVE_BACK_LEFT:
		{
			X = CP[0]+(-OFFSET_X - OFFSET_Y);
 			Y = CP[1]+(-OFFSET_Y + OFFSET_X);
		 	Z = CP[2]-OFFSET_Z;
		}
		case MOVE_BACK_RIGHT:
		{
			X = CP[0]+(-OFFSET_X + OFFSET_Y);
 			Y = CP[1]+(-OFFSET_Y - OFFSET_X);
		 	Z = CP[2]-OFFSET_Z;
		}
		case MOVE_FORWARD_LEFT:
		{
			X = CP[0]+(OFFSET_X  - OFFSET_Y);
			Y = CP[1]+(OFFSET_Y  + OFFSET_X);
			Z = CP[2]+OFFSET_Z;
		}
		case MOVE_FORWARD_RIGHT:
		{
			X = CP[0]+(OFFSET_X  + OFFSET_Y);
			Y = CP[1]+(OFFSET_Y  - OFFSET_X);
			Z = CP[2]+OFFSET_Z;
		}
	}
}

stock CancelFlyMode(playerid)
{
	DeletePVar(playerid, "FlyMode");
	CancelEdit(playerid);
	TogglePlayerSpectating(playerid, false);

	DestroyPlayerObject(playerid, noclipdata[playerid][flyobject]);
	noclipdata[playerid][cameramode] = CAMERA_MODE_NONE;

	if(PlayerInfo[playerid][pinterior] != 0 || PlayerInfo[playerid][pvirtualworld] != 0)
		Freeze(playerid, 3000);
	else
		Freeze(playerid, 1000);

	SetPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz], PlayerInfo[playerid][pangle], false);
	SetInterior(playerid, PlayerInfo[playerid][pinterior]);
	SetVirtualWorld(playerid, PlayerInfo[playerid][pvirtualworld]);
	return true;
}

stock FlyMode(playerid, viewother = INVALID_PLAYER_ID)
{
	if(viewother == INVALID_PLAYER_ID)
	{
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		noclipdata[playerid][flyobject] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);
		TogglePlayerSpectating(playerid, true);
		AttachCameraToPlayerObject(playerid, noclipdata[playerid][flyobject]);
		SetPVarInt(playerid, "FlyMode", 1);
		noclipdata[playerid][cameramode] = CAMERA_MODE_FLY;
	}
	else
	{
	   /* if(noclipdata[playerid][cameramode] == CAMERA_MODE_FLY)
	    {
	    
	    }*/
	}
	return true;
}

stock JarmuRendszam(id)
{
	new string[32];
	if(strlen(vInfo[id][vRendszam]) < 4 || strfind(vInfo[id][vRendszam], "null", true) != NINCS) format(string, sizeof(string), ""COL_SZURKE"See-"COL_VKEK"%d", vInfo[id][vID]);
	else format(string, sizeof(string), "%s", vInfo[id][vRendszam]);
	
	if(vInfo[id][vMunka] != 0)
	    format(string, 32, "{FF0000}%s", string);
	    
	SetVehicleNumberPlate(vInfo[id][vID], string);
}

stock ApplyPlayerAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
    //LoopingAnim(playerid, animlib, "null", fDelta, loop, lockx, locky, freeze, time, forcesync); // Pre-load animation library
	LoopingAnim(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);
    return LoopingAnim(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

stock JarmuKulcs( playerid, vid )
{
	if(!vInfo[vid][vInsert])
		return true;
	if(IsJob(playerid, vInfo[vid][vMunka]) && vInfo[vid][vMunka] != 0)
		return true;
 	else if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
		return true;
	else if(PlayerInfo[playerid][pBereltJarmu] != 0 && PlayerInfo[playerid][pBereltJarmu] == vid)
		return true;
	else if(FrakcioJarmu(playerid, vid))
		return true;
	else if(PlayerInfo[playerid][pJarmuKolcson] == vid)
		return true;
    else if(SKVkocsi(vid) && PlayerInfo[playerid][pSKV])
	    return true;
	else if(vInfo[vid][vMunka] == 103 && PlayerInfo[playerid][pKereskedo])
	    return true;
	else if(vInfo[vid][vMunka] == 101)
	{
		if(PlayerInfo[playerid][pVizsga][1] == VIZSGA_KOCSI && (vInfo[vid][vModel] == 560 || vInfo[vid][vModel] == 405))//sultan, sentinel
			return true;
		if(PlayerInfo[playerid][pVizsga][1] == VIZSGA_MOTOR && (vInfo[vid][vModel] == 522))//nrg-500,
			return true;
		if(PlayerInfo[playerid][pVizsga][1] == VIZSGA_KAMION && (vInfo[vid][vModel] == 403 || vInfo[vid][vModel] == 515))//linerunner, roadtrain
			return true;
	}
	return false;
}

stock JarmuTulaj( vid )
{
	new stulaj[64];
	if(vInfo[vid][vTulajID] != NINCS)
		format(stulaj, sizeof(stulaj), "[%d]%s", vInfo[vid][vTulajID], vInfo[vid][vTulaj]);
	else if(vInfo[vid][vMunka] > 0 && vInfo[vid][vMunka] < MAX_FRAKCIO)//frakciós jármûvek
	{
		if(FInfo[ vInfo[vid][vMunka] ][fVan])
			format(stulaj, sizeof(stulaj), "Frakció - [%d]%s", vInfo[vid][vMunka], FInfo[ vInfo[vid][vMunka] ][fNev]);
		else
			format(stulaj, sizeof(stulaj), "Frakció - [%d]Nincs", vInfo[vid][vMunka]);
	}
	else if(vInfo[vid][vMunka] == 100)
		format(stulaj, sizeof(stulaj), "Autóbérlõ");
	else if(vInfo[vid][vMunka] == 101)
		format(stulaj, sizeof(stulaj), "Oktatási központ");
	else if(vInfo[vid][vMunka] == 102)
	    format(stulaj, sizeof stulaj, "See Közlekedési Vállalat");
	else if(vInfo[vid][vMunka] == 103)
	    format(stulaj,sizeof stulaj, "Használtkereskedés");
	else if(!vInfo[vid][vMunka])
		format(stulaj, sizeof(stulaj), "Nincs (Eladó)");
	else if(vInfo[vid][vMunka])
		format(stulaj, sizeof(stulaj), "Munka - %s", TipusToNev(vInfo[vid][vMunka]));

	return stulaj;
}

stock PMunka(pid, munka)
{
	new str[64] = "Nincs";
	if(munka == 1 && PlayerInfo[pid][pMunka1] != 0)
		format(str, sizeof(str), "%s", Munkak[ PlayerInfo[pid][pMunka1] - 20 ][1]);
	else if(munka == 2 && PlayerInfo[pid][pMunka2] != 0)
		format(str, sizeof(str), "%s", Munkak[ PlayerInfo[pid][pMunka2] - 20 ][1]);

	return str;
}

stock PJarmu(pid, idx)
{
	new str[64], id = PlayerInfo[pid][pJarmuKulcs][idx];
	if(id != NINCS && vInfo[id][vHasznalva])
		format(str, sizeof(str), "%s(%d)", VehicleNames[vInfo[id][vModel] - 400], vInfo[id][vID]);
	else
		format(str, sizeof(str), "Nincs");

	return str;
}

stock PHaz(pid, idx)
{
	new str[64];
	if(PlayerInfo[pid][pHazKulcs][idx] != NINCS)
	{
		new id = PlayerInfo[pid][pHazKulcs][idx];
		format(str, sizeof(str), ""#COL_MKEK"%d"#COL_FEHER"",id);
	} else
		format(str, sizeof(str), ""#COL_MKEK"Nincs"#COL_FEHER"");

	return str;
}

stock PFrakcio( id )
{
	new str[32] = "Nincs";
	if(PlayerInfo[id][pFrakcio])
		format(str, sizeof(str), FInfo[PlayerInfo[id][pFrakcio]][fNev]);

	return str;
}

stock ToStr(ext, bool:formata = false, val = ',')
{
	new str[32];
	if(ext)
	{
		if(formata)
			format(str, sizeof(str), "%s", FN(ext, 0, val));
		else
			format(str, sizeof(str), "%d", ext);
	}
	else
		format(str, sizeof(str), "Nincs");
	return str;
}

stock ShowZseb(playerid, kinek)
{
	//PlayerInfo[playerid][pDrogAnyag][0]
	SendFormatMessage(playerid, COLOR_WHITE, "Kokain: %d/%dg | Heroin: %d/%dg | Marihuana: %d/%dg", PlayerInfo[kinek][pKokain], P_MAX_KOKAIN, PlayerInfo[kinek][pHeroin], P_MAX_HEROIN, PlayerInfo[kinek][pMarihuana], P_MAX_MARIHUANA);
	SendFormatMessage(playerid, COLOR_WHITE, "Material: %d/%ddb | Vas: %d/%dkg | Kötszer: %d/%ddb", PlayerInfo[kinek][pMaterial], P_MAX_MATERIAL, PlayerInfo[kinek][pVas], P_MAX_VAS, PlayerInfo[kinek][pCuccok][BL_KOTSZER], P_MAX_KOTSZER);
	SendFormatMessage(playerid, COLOR_WHITE, "Szendvics: %ddb/"#P_MAX_SZENDVICS"db | Készpénz: %s$", PlayerInfo[kinek][pCuccok][BL_SZENDVICS], FN(PlayerInfo[kinek][ppenz], 0, ','));
	SendFormatMessage(playerid, COLOR_WHITE, "Mariuhána-mag: %dg | Kokain alap: %dg | Heroin alap: %dg", PosExt(PlayerInfo[kinek][pDrogAnyag]));
	SendFormatMessage(playerid, COLOR_WHITE, "Tolvajkulcs: %ddb/%ddb", PlayerInfo[playerid][pTolvajKulcs],P_MAX_TK);
	new i = -1, num = 0, fegyverek[128] = "Fegyverek:";
	for(;++i < 13;)
	{
		if(PlayerInfo[kinek][pFegyverek][i] && PlayerInfo[kinek][pToltenyek][i])
		{
			format(fegyverek, sizeof(fegyverek), "%s [ID:%d]%s(%d),", fegyverek, PlayerInfo[kinek][pFegyverek][i], aWeaponNames[PlayerInfo[kinek][pFegyverek][i]], PlayerInfo[kinek][pToltenyek][i]);
			num++;
		}
	}

	if(!num) format(fegyverek, sizeof(fegyverek), "%s Nincs", fegyverek);
	else fegyverek[strlen(fegyverek) - 1] = '\0';

	SendClientMessage(playerid, COLOR_WHITE, fegyverek);
	return true;
}

stock ShowSkill(playerid, kinek)
{
	new str[256];
	format(str, sizeof(str), "Legális munka tapasztalat: "#COL_MKEK"%d"#COL_FEHER" | Illegális munka tapasztalat: "#COL_MKEK"%d", PlayerInfo[kinek][pExp][1], PlayerInfo[kinek][pExp][2]);
	SendClientMessage(playerid, COLOR_WHITE, str);

	format(str, sizeof(str), "Fegyver tapasztalat: "#COL_MKEK"%d", PlayerInfo[kinek][pFegyverSkill]);
	SendClientMessage(playerid, COLOR_WHITE, str);

	format(str, sizeof(str), "Autólopási képesség: "#COL_MKEK"%d", PlayerInfo[kinek][pTolvajSkill]);
	SendClientMessage(playerid, COLOR_WHITE, str);
	return true;
}

stock ShowStats(playerid, kinek, bool:dbug = false)
{
	if(IsPlayerConnected(kinek) || Belepve(kinek))
	{
		//#define cl1 "{1E90FF}" // COL_MKEK {1E90FF}
		//#define cl2 "{757167}" // COL_SZURKE
		#define cl1 COL_MKEK
		#define cl2 COL_FEHER
		new str[256];

		new hazastars[32];
		if(egyezik(PlayerInfo[kinek][pHazasodvaVele],"Senki"))
		{
			hazastars = "Nincs férjed/feleséged";
		}
		else
		{
			strmid(hazastars,PlayerInfo[kinek][pHazasodvaVele],0,strlen(PlayerInfo[kinek][pHazasodvaVele]),32);
		}

		/* === Adatok kiíratása === */

		format(str, sizeof(str), "Név: "#cl1"%s"#cl2" | Nem: "#cl1"%s"#cl2" | Telefonszám: "#cl1"%s"#cl2" |  Házastárs: "#cl1"%s", \
		JatekosNev(kinek),NemVizsgalat(PlayerInfo[kinek][pnem]), ToStr(PlayerInfo[kinek][pCuccok][BL_TELEFON], true, '-'),hazastars);
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Bankszámlaszám: "#cl1"%s"#cl2" | Pin: "#cl1"%s"#cl2" | Egyenleg: "#cl1"%s$", \
		ToStr(PlayerInfo[kinek][pBsz]), ToStr(PlayerInfo[kinek][pBszPin]), FN(PlayerInfo[kinek][pBszPenz], 0, ','));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str,sizeof str, "Szint: "#cl1"%d"#cl2" | Még "#cl1"%d"#cl2" óra | Következõ Fizetés:"#cl1" %d"#cl2" perc" , \
		PlayerInfo[kinek][pjatekosszint], (PlayerInfo[kinek][pszintlepeskell] - PlayerInfo[kinek][pszintlepesora]),PlayerInfo[kinek][pFizetesIdo]);
		SendClientMessage(playerid,COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Szervezet: "#cl1"%s"#cl2" | Rang: "#cl1"%d"#cl2" | Származás: "#cl1"%s"#cl2" | Életkor: "#cl1"%d", \
		PFrakcio(kinek), PlayerInfo[kinek][prang], Szarmazas( PlayerInfo[kinek][pszarmazas] ), PlayerInfo[kinek][peletkor]);
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Egyéni munka ID-k: "#cl1"%d"#cl2" / "#cl1"%d"#cl2" | Fizetés: "#cl1"%s$", PlayerInfo[kinek][pMunka1], PlayerInfo[kinek][pMunka2], FN(PlayerInfo[kinek][pFizetes], 0, ','));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Rang: "#cl1"%s"#cl2" [%d] | Házak: %s / %s / %s", Rangok(PlayerInfo[kinek][prang], PlayerInfo[kinek][pFrakcio]), PlayerInfo[kinek][prang], PHaz(kinek, 0), PHaz(kinek, 1), PHaz(kinek, 2));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Saját jármûvek: "#COL_MKEK"%s / %s / %s", PJarmu(kinek, 0), PJarmu(kinek, 1), PJarmu(kinek, 2));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Prémium csomag: "#COL_MKEK"%s"#COL_FEHER" | Prémium pont: "#COL_MKEK"%s"#COL_FEHER" | Prémium ido: "#COL_MKEK"%s", ToStr(PlayerInfo[kinek][pPremiumCsomag]), ToStr(PlayerInfo[kinek][pPremiumPont], true), UnixToTime( PlayerInfo[kinek][pPremiumIdo] ));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
	}
	return true;
}

stock ShowPDAStats(playerid, kinek, bool:dbug = false)
{
    if(IsPlayerConnected(kinek) || Belepve(kinek))
	{
		//#define cl1 "{1E90FF}" // COL_MKEK {1E90FF}
		//#define cl2 "{757167}" // COL_SZURKE
		#define cl1 COL_MKEK
		#define cl2 COL_FEHER
		new str[256];

		/* === Adatok kiíratása === */

		format(str, sizeof(str), "Név: "#cl1"%s"#cl2" | Nem: "#cl1"%s"#cl2" | Telefonszám: "#cl1"%s", \
		JatekosNev(kinek),NemVizsgalat(PlayerInfo[kinek][pnem]), ToStr(PlayerInfo[kinek][pCuccok][BL_TELEFON], true, '-'));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Bankszámlaszám: "#cl1"%s"#cl2" | Egyenleg: "#cl1"%s$"#cl2"", \
		ToStr(PlayerInfo[kinek][pBsz]), FN(PlayerInfo[kinek][pBszPenz], 0, ','));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Származás: "#cl1"%s"#cl2" | Életkor: "#cl1"%d", \
		Szarmazas( PlayerInfo[kinek][pszarmazas] ), PlayerInfo[kinek][peletkor]);
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Egyéni munkák: "#cl1"%s"#cl2" / "#cl1"%s"#cl2" | Fizetés: "#cl1"%s$", PMunka(kinek, 1), PMunka(kinek, 2), FN(PlayerInfo[kinek][pFizetes], 0, ','));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Házak: %s / %s / %s", PHaz(kinek, 0), PHaz(kinek, 1), PHaz(kinek, 2));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Saját jármûvek: "#COL_MKEK"%s / %s / %s", PJarmu(kinek, 0), PJarmu(kinek, 1), PJarmu(kinek, 2));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str, sizeof(str), "Szervezet: "#cl1"%s"#cl2" | Rang: "#cl1"%d"#cl2" | Származás: "#cl1"%s"#cl2" | Életkor: "#cl1"%d", \
		PFrakcio(kinek), PlayerInfo[kinek][prang], Szarmazas( PlayerInfo[kinek][pszarmazas] ), PlayerInfo[kinek][peletkor]);
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
	}
	return true;
}

timer VizsgalasVege[15000](playerid, hullaid)
{
	if(50 <= HullaInfo[hullaid][Hallapot] <= 100)
	{
		SendFormatMessage(playerid, COLOR_WHITE, "Hulla életkora: %d és %d közötti", PlayerInfo[HullaInfo[hullaid][Hkieid]][peletkor] - 2, PlayerInfo[HullaInfo[hullaid][Hkieid]][peletkor] + 2);
		SendFormatMessage(playerid, COLOR_WHITE, "Hulla neme: %s", NemVizsgalat(PlayerInfo[HullaInfo[hullaid][Hkieid]][pnem]));
		SendFormatMessage(playerid, COLOR_WHITE, "Hulla származása: %s", Szarmazas(PlayerInfo[HullaInfo[hullaid][Hkieid]][pszarmazas]));
		SendFormatMessage(playerid, COLOR_WHITE, "Hulla gyilkosa: %s", HullaInfo[hullaid][Hmegolte]);
	}
	if(HullaInfo[hullaid][Hallapot] < 50)
	{
		new randomszam = random(10);
		switch(randomszam)
		{
			case 4:
			{
				SendFormatMessage(playerid, COLOR_WHITE, "Hulla életkora: %d és %d közötti", PlayerInfo[HullaInfo[hullaid][Hkieid]][peletkor] - 2, PlayerInfo[HullaInfo[hullaid][Hkieid]][peletkor] + 2);
				SendFormatMessage(playerid, COLOR_WHITE, "Hulla neme: %s", NemVizsgalat(PlayerInfo[HullaInfo[hullaid][Hkieid]][pnem]));
				SendFormatMessage(playerid, COLOR_WHITE, "Hulla származása: %s", Szarmazas(PlayerInfo[HullaInfo[hullaid][Hkieid]][pszarmazas]));
				SendFormatMessage(playerid, COLOR_WHITE, "Hulla gyilkosa: %s", HullaInfo[hullaid][Hmegolte]);
			}
			default:
				SendClientMessage(playerid, COLOR_WHITE, "Nem tudtad megállapítani a hulla adatait, mert túl sérült.");
		}
	}
	PlayerInfo[playerid][pVizsgal] = false;
	ClearAnimations(playerid);
	return true;
}

stock Rangok( Rang, Frakcio )
{
	new vsz[20];
	if(FInfo[Frakcio][fVan])
	{
		switch( Rang )
		{
			case 1: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang1]);
			case 2: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang2]);
			case 3: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang3]);
			case 4: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang4]);
			case 5: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang5]);
			case 6: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang6]);
			case 7: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang7]);
			case 8: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang8]);
			case 9: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang9]);
			case 10: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang10]);
			case 11: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang11]);
			case 12: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang12]);
			case 13: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang13]);
			case 14: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang14]);
			case 15: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang15]);
			case 16: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang16]);
			default: format(vsz, sizeof(vsz), "Nincs");
		}
	} else
		format(vsz, sizeof(vsz), "Nincs");

	return vsz;
}

stock SWATRangok( Rang )
{
	new svsz[30];
	switch( Rang )
	{
		case 1: format(svsz, sizeof(svsz), "Private I" );
		case 2: format(svsz, sizeof(svsz), "Private II" );
		case 3: format(svsz, sizeof(svsz), "Private First Class");
		case 4: format(svsz, sizeof(svsz), "Specialist" );
		case 5: format(svsz, sizeof(svsz), "Corporal" );
		case 6: format(svsz, sizeof(svsz), "Sergeant" );
		case 7: format(svsz, sizeof(svsz), "Staff Sergeant" );
		case 8: format(svsz, sizeof(svsz), "Sergeant First Class" );
		case 9: format(svsz, sizeof(svsz), "Master Sergeant" );
		case 10: format(svsz, sizeof(svsz), "First Sergeant" );
		case 11: format(svsz, sizeof(svsz), "Sergeant Major" );
		case 12: format(svsz, sizeof(svsz), "Command Sergeant Major" );
		default: format(svsz, sizeof(svsz), "Nincs");
	}
	return svsz;
}

stock KereskedoRangok(rang)
{
	new rn[30];
	switch(rang)
	{
	    case 1: format(rn,32,"Próbaidõs");
	    case 2: format(rn,32,"Autókereskedõ");
	    case 3: format(rn,32,"Tulajdonos");
	    default: format(rn,32,"---");
	}
	return rn;
}

stock SKVrangok(rang)
{
	new rn[32];
	switch(rang)
	{
	    case 1: format(rn,32,"Próbaidõs");
	    case 2: format(rn,32,"Taxisofõr");
	    case 3: format(rn,32,"Buszsofõr");
	    case 4: format(rn,32,"Mozdonyvezetõ");
	    case 5: format(rn,32,"Cégvezetõ");
	    case 6: format(rn,32,"Tulajdonos");
	    default: format(rn,32,"---");
	}
	return rn;
}

stock FrakcioTeruletek(frakcioid)
{
	if(!FInfo[frakcioid][fVan])
	    return 0;
	new x = -1, teruletek;

	for(;++x < MAX_TERULET;)
	{
	    if(tInfo[x][tVan] && (tInfo[x][tFrakcio] == frakcioid))
	        teruletek++;
	}

	return teruletek;
}

stock BortonNev( id, bool:td = false)
{
	new str[16];
	switch( id )
	{
		case 1: format(str, sizeof(str), "%s", (td ? ("Kórházban") : ("Kórház")));
		case 2: format(str, sizeof(str), "%s", (td ? ("Börtönben") : ("Börtön")));
		case 3: format(str, sizeof(str), "%s", (td ? ("AJ-ben") : ("AdminJail")));
		case 4: format(str, sizeof(str), "%s", (td ? ("Katonaság Börtön") : ("Katonaság Börtön")));
		case 5: format(str, sizeof(str), "%s", (td ? ("FBI Börtön") : ("FBI Börtön")));
		default: format(str, sizeof(str), "%s", (td ? ("Sehol") : ("Nincs")));
	}
	return str;
}

stock fBortonID(f)
{
	new b = -1;
	switch(f)
	{
	    case FRAKCIO_LSPD: b = 2;
	    case FRAKCIO_FBI: b = 5;
	}
	return b;
}
stock BortonID(borton[])
{
	if(!strcmp(borton, "Kórház", true) || !strcmp(borton, "Korhaz", true))
		return 1;
	else if(!strcmp(borton, "PD", true))
		return 2;
	else if(!strcmp(borton, "Admin", true))
		return 3;
	else if(!strcmp(borton, "Katonaság", true))
		return 4;
	else if(!strcmp(borton, "FBI", true))
		return 5;
	else if(!strcmp(borton, "null", true))
		return 0;

	return NINCS;
}

stock BortonInfo(playerid, adta[], oka[])
{
	format(PlayerInfo[playerid][pJailAdta], MAX_PLAYER_NAME, "%s", adta);
	format(PlayerInfo[playerid][pJailOk], MAX_PLAYER_NAME, "%s", oka);
	return true;
}

stock Borton(playerid, jail)
{
	DeleteWeapon(playerid);
	PlayerInfo[playerid][phaz] = NINCS;
	switch(jail)
	{
		case 0: //Szabad
		{
			if(PlayerInfo[playerid][pjail] == 1) { //Kórház
				SetPos(playerid, 1185.383,-1323.993,13.572, 269.142, true);
				SCM(playerid, COL_MKEK, "Felépültél ezért kiengedtek a kórházból!!");
			}
			else if(PlayerInfo[playerid][pjail] == 2) { //Pd
				SetPos(playerid, 1543.0260,-1675.5929,13.5557,89.6479, true);
				SCM(playerid, COL_MKEK, "A büntetésed letöltötted, ismét szabad vagy!");
				if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] ))
				{
					DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
					PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
				}
			}
			else if(PlayerInfo[playerid][pjail] == 3) { //AdminJail
				SetPos(playerid, 1503.8801,-1770.6318,13.5433,4.1295, true); //LS hegy Városháza
				SCM(playerid, COL_MKEK, "A büntetésed letöltötted, ismét szabad vagy! Legközelebb, tartsd be a szabályokat!");
			}
			else if(PlayerInfo[playerid][pjail] == 4) { //SASD
				SetPos(playerid, 290.6906,1409.2700,10.2425,0, true);
				SCM(playerid, COL_MKEK, "A büntetésed letöltötted, ismét szabad vagy!");
				if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] ))
				{
					DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
					PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
				}
			}
			else if(PlayerInfo[playerid][pjail] == 5) { //FBI
				SetPos(playerid, 290.6906,1409.2700,10.2425,0, true);
				SCM(playerid, COL_MKEK, "A büntetésed letöltötted, ismét szabad vagy!");
				if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] ))
				{
					DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
					PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
				}
			}
			else { // ha nincs bezárva de egy barom Admin bezárná nullára xd
				SetPos(playerid, 1503.8801,-1770.6318,13.5433,4.1295, true);
			}

			SetVirtualWorld(playerid, 0);
			SetInterior(playerid, 0);
			PlayerInfo[playerid][pjail] = 0;
			PlayerInfo[playerid][pJailIdo] = 0;
			return true;
		}
		case 1: //Kórház halál
		{
		    /*Freeze(playerid, 5000);
			SetArmor(playerid, 0.0);
			SetInterior(playerid, 0);
			SetPos(playerid, 1155.9384,-1332.7273,24.2973,174.6101, true);
			SetVirtualWorld(playerid, 1004);*/
			new Float:TellaPos[4][4] =
			{
				{227.566, 110.819, 999.015, 5.334},
				{223.186, 110.099, 999.015, 177.669},
				{219.558, 110.378, 999.015, 359.067},
				{215.736, 110.857, 999.015, 4.394}
			};
			new ez = random(sizeof(TellaPos));

			SetVirtualWorld(playerid, 160);
			SetInterior(playerid, 10);

			SetHealth(playerid, MAX_HP);
			SetArmor(playerid, 0.0);
			SetPos(playerid, PosExt(TellaPos[ez]), TellaPos[ez][3], .update = true);
			Freeze(playerid, 10000);
			return true;
		}
		case 2: //PD
		{
			new Float:CellaPos[4][4] =
			{
				{227.566, 110.819, 999.015, 5.334},
				{223.186, 110.099, 999.015, 177.669},
				{219.558, 110.378, 999.015, 359.067},
				{215.736, 110.857, 999.015, 4.394}
			};
			new ez = random(sizeof(CellaPos));

			SetVirtualWorld(playerid, 0);
			SetInterior(playerid, 10);
			
			SetHealth(playerid, MAX_HP);
			SetPos(playerid, PosExt(CellaPos[ez]), CellaPos[ez][3], .update = true);
			Freeze(playerid, 10000);
			return true;
		}
		case 3: //Admin
		{
			SetPos(playerid, -219.442, 1410.210, 27.773, .update = true);
			SetVirtualWorld(playerid, (PlayerInfo[playerid][pID] + 1000));
			SetInterior(playerid, 18);
			Freeze(playerid, 10000);

			if(PlayerInfo[playerid][pFegyver])
			{
				Fegyver(playerid, false);
			}
			return true;
		}
		case 4: //SASD
		{
			SetHealth(playerid, MAX_HP);
			return true;
		}
		case 5: //FBI
		{
			new Float:fbiCellaPos[1][4] =
			{
				{2818.2036,-1450.1940,28.1626}
			};
			new ez = random(sizeof(fbiCellaPos));

			SetVirtualWorld(playerid, 0);
			SetInterior(playerid, 3);

			SetHealth(playerid, MAX_HP);
			SetPos(playerid, PosExt(fbiCellaPos[ez]), fbiCellaPos[ez][3]);
			Freeze(playerid, 10000);
			return true;
		}
		case 100: // szökési kisérlet check
		{
			if(PlayerInfo[playerid][pjail] == 3) // csak AdminJail-ben
			{
				new Float:tav = GetDistanceToPoint(playerid, -219.442, 1410.210, 27.773);
				if(tav > 6)
				{
					SetPos(playerid, -219.442, 1410.210, 27.773, .update = true);
					SetVirtualWorld(playerid, (PlayerInfo[playerid][pID] + 1000));
					SetInterior(playerid, 18);
					Freeze(playerid, 10000);
				}
			}
		}
	}
	return true;
}

stock TeruletHaszon( bool:debugging = false )
{
	new t = NINCS, str[256];
	for(;++t < MAX_TERULET;)
	{
		if(!tInfo[t][tVan]) continue;
		if(OnlineTagok( tInfo[t][tFrakcio] ) >= 5 || debugging)
		{
			tInfo[t][tHaszonIdo] += 300;
			if(tInfo[t][tHaszonIdo] >= TERULET_HASZON_IDO)
			{
				if(debugging)
					AdminUzenet(COLOR_LIGHTRED, 5555, "[DEBUG]: Terület haszon - Frakció: [%d]%s", tInfo[t][tFrakcio], FInfo[tInfo[t][tFrakcio]][fNev]);

				str[0] = '\0';
				tInfo[t][tHaszonIdo] = 0;

				if(tInfo[t][tHaszon][0] > 1 && tInfo[t][tHaszon][0] < 600000)
				{
					FInfo[ tInfo[t][tFrakcio] ][fPenz] += tInfo[t][tHaszon][0];
					format(str, sizeof(str), "%sPénz: %s$, ", str, FN(tInfo[t][tHaszon][0], 0, ','));
				}
				if(tInfo[t][tHaszon][1] > 1 && tInfo[t][tHaszon][1] < 600000)
				{
					FInfo[ tInfo[t][tFrakcio] ][fKokain] += tInfo[t][tHaszon][1];
					format(str, sizeof(str), "%sKokain: %sg, ", str, FN(tInfo[t][tHaszon][1], 0, ','));
				}
				if(tInfo[t][tHaszon][2] > 1 && tInfo[t][tHaszon][2] < 600000)
				{
					FInfo[ tInfo[t][tFrakcio] ][fHeroin] += tInfo[t][tHaszon][2];
					format(str, sizeof(str), "%sHeroin: %sg, ", str, FN(tInfo[t][tHaszon][2], 0, ','));
				}
				if(tInfo[t][tHaszon][3] > 1 && tInfo[t][tHaszon][3] < 600000)
				{
					FInfo[ tInfo[t][tFrakcio] ][fMarihuana] += tInfo[t][tHaszon][3];
					format(str, sizeof(str), "%sMarihuana: %sg, ", str, FN(tInfo[t][tHaszon][3], 0, ','));
				}
				if(tInfo[t][tHaszon][4] > 1 && tInfo[t][tHaszon][4] < 600000)
				{
					FInfo[ tInfo[t][tFrakcio] ][fMaterial] += tInfo[t][tHaszon][4];
					format(str, sizeof(str), "%sMaterial: %sdb, ", str, FN(tInfo[t][tHaszon][4], 0, ','));
				}

				if(strlen(str)) str[ strlen(str) - 2 ] = '\0';
				format(str, sizeof(str), "Terület ("#COL_MKEK"%s"#COL_YELL") haszon: %s", tInfo[t][tNev], (strlen(str) ? str : ("Nincs beállított haszon!")));
				FrakcioUzenet(COLOR_YELLOW, tInfo[t][tFrakcio], str);
				FkUpdate(tInfo[t][tFrakcio], fuPenz, fuKokain, fuHeroin, fuMarihuana, fuMaterial);
			}
		}
	}
	return true;
}

stock TeruletArenaID(playerid)
{
    new x = -1, terulet = NINCS;
	for(;++x < MAX_TERULET;)
	{
		if(tInfo[x][tVan] && IsPlayerInDynamicArea(playerid, tInfo[x][tArea]))
		{
			terulet = x;
			break;
		}
	}
	return terulet;
}

stock FrakcioTagok(frakcioid)
{
	if(!FInfo[frakcioid][fVan])
	    return 0;

	new mennyiseg = 0;
	foreach(Player, playerid)
	{
	    if(IsPlayerConnected(playerid) && (PlayerInfo[playerid][pFrakcio] == frakcioid))
		mennyiseg++;
	}
	return mennyiseg;
}

//Race System by Martin
fpublic preProcessing( playerid, process, extra, estr[], estr2[] )
{
	switch( process )
	{
		case 1://betöltés
		{
			new nums, fields, i = NINCS, slot = extra;
			cache_get_data(nums, fields);

			if(nums)
			{
				mysql_get_string(0, "Nev", Race[slot][rNev]);
				mysql_get_string(0, "Indito", Race[slot][rIndito]);

				new str[16], pos[40], db;

				for(;++i < MAX_RACE_CP;)
				{
					Race[slot][rPosx][i] = 0.0;
					Race[slot][rPosy][i] = 0.0;
					Race[slot][rPosz][i] = 0.0;

					mysql_get_string(0, (format(str, sizeof(str), "CP%d", (i + 1)), str), pos);
					sscanf(pos, "p<,>fff", Race[slot][rPosx][i], Race[slot][rPosy][i], Race[slot][rPosz][i]);

					if(Race[slot][rPosx][i] != 0.0 && strlen(pos))
						db++;
				}

				Race[slot][rSzorzo] = 0;
				Race[slot][rNyeremeny] = 0;
				Race[slot][rBentvan] = 0;
				Race[slot][rIdoHatra] = 0;
				Race[slot][rNevezes] = 0;
				Race[slot][rIdo] = 0;
				Race[slot][rCPdb] = db;
				Race[slot][rCelPos][0] = Race[slot][rPosx][db - 1];
				Race[slot][rCelPos][1] = Race[slot][rPosy][db - 1];
				Race[slot][rCelPos][2] = Race[slot][rPosz][db - 1];
				Race[slot][rVan] = true;
				Race[slot][rStatusz] = 0;

				SFM(playerid, COL_VZOLD, "Sikeresen betöltötted a(z) "#COL_MKEK"%s"#COL_FEHER" nevû versenyt a(z) "#COL_MKEK"%d."#COL_FEHER" slotra! CP: %d/%d", Race[slot][rNev], slot, db, MAX_RACE_CP);
				printf("Szerver: Verseny - %s sikeresen betoltve a(z) %d slotra", Race[slot][rNev], slot);

			} else
				SCM(playerid, COL_LRED, "Nincs ilyen nevû verseny az adatbázisban!");
		}
		case 2://létrehozás
		{
			new nums, fields;
			cache_get_data(nums, fields);

			if(nums)
			{
				new data[3][64];
				mysql_get_string(0, "Nev", data[0]);
				mysql_get_string(0, "Indito", data[1]);
				mysql_get_string(0, "Keszito", data[2]);

				SCM(playerid, COL_LRED, "Már létezik ilyen indítókóddal rendelkezõ pálya. Kérlek válassz másikat!");
				SFM(playerid, COL_LRED, "Név: "#COL_MKEK"%s"#COL_FEHER" | Indítókód: "#COL_MKEK"%s"#COL_FEHER" | Készítõ: "#COL_MKEK"%s", data[0], data[1], data[2]);

			} else {

				PlayerRace[playerid][rEpites][0] = extra;//melyik id-n
				PlayerRace[playerid][rEpites][1] = 0;//melyik cp

				new i = NINCS;
				for(;++i < MAX_RACE_CP;)
				{
					Race[extra][rPosx][i] = 0.0;
					Race[extra][rPosy][i] = 0.0;
					Race[extra][rPosz][i] = 0.0;
				}

				Race[extra][rCelPos] = Float:{0.0, 0.0, 0.0};
				Race[extra][rStatusz] = RACE_EPIT;
				Race[extra][rVan] = true;
				format(Race[extra][rNev], 32, "%s", estr);
				format(Race[extra][rIndito], 32, "%s", estr2);

				SFM(playerid, COL_VZOLD, "Elkezdted építeni a(z) "#COL_MKEK"%s"#COL_FEHER" pályát! CP mentéshez írd be: /verseny CP", estr);
			}
		}
	}

	return true;
}

stock TimeFormat(ido, bool:sort = false)
{
	new string[128];
	if(ido < 60) format(string, sizeof(string), "%d mp", ido);
	else if(ido >= 60 && ido < 3600)
	{
		if(ido % 60 == 0) format(string, sizeof(string), "%d perc", (ido / 60));
		else
		{
			if(!sort) format(string, sizeof(string), "%d perc és %d mp", floatround((ido / 60), floatround_floor), (ido % 60));
			else format(string, sizeof(string), "%dp %dmp", floatround((ido / 60), floatround_floor), (ido % 60));
		}
	}
	else if(ido >= 3600)
	{
		if(ido % 3600 == 0) format(string, sizeof(string), "%d óra", (ido / 3600));
		else
		{
			if(!sort) format(string, sizeof(string), "%d óra és %d perc", floatround((ido / 3600), floatround_floor), floatround((ido % 3600) / 60));
			else format(string, sizeof(string), "%dó %dp", floatround((ido / 3600), floatround_floor), floatround((ido % 3600) / 60));
		}
	}

	return string;
}

stock SetRaceCP(playerid)
{
	new
		id = PlayerRace[playerid][rVersenyen],
		cp = PlayerRace[playerid][rVersenyCP];

	if(cp == RACE_START_CP)
	{
		if(Race[id][rCPdb] > 0)
			SetPlayerRaceCheckpoint(playerid, 0, Race[id][rPosx][0], Race[id][rPosy][0], Race[id][rPosz][0], Race[id][rPosx][1], Race[id][rPosy][1], Race[id][rPosz][1], 20.0);
		else
			SetPlayerRaceCheckpoint(playerid, 0, Race[id][rPosx][0], Race[id][rPosy][0], Race[id][rPosz][0], PosExt(Race[id][rCelPos]), 20.0);
	}
	else if(cp == RACE_CEL_CP)
		SetPlayerRaceCheckpoint(playerid, 1, PosExt(Race[id][rCelPos]), 0.0, 0.0, 0.0, 20.0);
	else
	{
		if((cp + 1) >= Race[id][rCPdb])
			SetPlayerRaceCheckpoint(playerid, 0, Race[id][rPosx][cp], Race[id][rPosy][cp], Race[id][rPosz][cp], PosExt(Race[id][rCelPos]), 20.0);
		else
			SetPlayerRaceCheckpoint(playerid, 0, Race[id][rPosx][cp], Race[id][rPosy][cp], Race[id][rPosz][cp], Race[id][rPosx][cp + 1], Race[id][rPosy][cp + 1], Race[id][rPosz][cp + 1], 20.0);
	}

	return true;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	//SFM(playerid, COL_MKEK, "[DEBUG]: VersenyID: %d | CP-ID: %d", PlayerRace[playerid][rVersenyen], PlayerRace[playerid][rVersenyCP]);
    new
		id = PlayerRace[playerid][rVersenyen],
		cp = PlayerRace[playerid][rVersenyCP],
		stat = Race[id][rStatusz];

	if(!id || stat != RACE_MEGY)
		return true;

	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	if(cp != RACE_CEL_CP)
	{
		if(cp == RACE_START_CP)
		{
			if(Race[id][rCPdb] > 1) PlayerRace[playerid][rVersenyCP] = 1;
			else PlayerRace[playerid][rVersenyCP] = RACE_CEL_CP;

		} else {

			if((cp + 1) == Race[id][rCPdb]) PlayerRace[playerid][rVersenyCP] = RACE_CEL_CP;
			else PlayerRace[playerid][rVersenyCP]++;
		}

		SetRaceCP(playerid);
	}
	else if(cp == RACE_CEL_CP)//itt
	{
		Race[id][rBentvan]++;
		new
			hely = Race[id][rBentvan],
			Szorzok[5] = {35, 30, 25, 20, 15};

		if(hely <= 5)
		{
			new penz = floatround(float(Race[id][rNyeremeny]) * float(Szorzok[hely - 1]) * 0.01);

			nformat(str, 128, "[%d.] "#COL_MKEK"%s"#COL_FEHER" %s alatt teljesítette a(z) "#COL_MKEK"%s"#COL_FEHER"-t!", hely, JatekosNev(playerid), TimeFormat(PlayerRace[playerid][rPIdo]), Race[id][rNev]);
			SendClientMessageToAll(COLOR_WHITE, str);
			format(str, 128, "Nyereménye: "#COL_MKEK"%s"#COL_FEHER"$", FN(penz, 0, ','));
			SendClientMessageToAll(COLOR_WHITE, str);

			PlayerInfo[playerid][pBszPenz] += penz;
			SFM(playerid, COL_VZOLD, "Sikeresen teljesítetted a(z) "#COL_MKEK"%s"#COL_FEHER" versenyt! Nyereményed "#COL_MKEK"%s"#COL_FEHER"$, helyezés - "#COL_MKEK"%d.", Race[id][rNev], FN(penz, 0, ','), hely);

		} else
			SFM(playerid, COL_VZOLD, "Teljesítetted a(z) "#COL_MKEK"%s"#COL_FEHER" versenyt! Helyezés - "#COL_MKEK"%d.", Race[id][rNev], hely);

		/*----------- Verseny vége ------------*/
		new db;
		foreach(Player, x)
		{
			if(x == playerid) continue;
			if(PlayerRace[x][rVersenyen] == id) db++;
			if(PlayerRace[x][rVersenyen] == PlayerRace[playerid][rVersenyen])
			{
				SetPlayerMarkerForPlayer(x, playerid, COLOR_INVISIBLE);
				SetPlayerMarkerForPlayer(playerid, x, COLOR_INVISIBLE);
			}
		}

		DisablePlayerRaceCheckpoint(playerid);
		PlayerRace[playerid][rVersenyen] = 0;

		if(!db)
			Race[id][rStatusz] = RACE_VEGE;
	}
    return true;
}

stock NemMozoghat(playerid,bool:kellkocsi=true)
{
	if(PlayerInfo[playerid][pAnimban][0] == 1)
		return true;

	if(PlayerInfo[playerid][pBilincselve])
		return true;

	if(PlayerInfo[playerid][pMegkotve])
		return true;

	if(PlayerInfo[playerid][pLeutve] == 1)
		return true;

	if(kellkocsi)
	{
		if(IsPlayerInAnyVehicle(playerid))
			return true;
	}
	return false;
}

timer KokainTimer[5000]( playerid, process )
{
	if(!Belepve(playerid))
		return true;

	switch( process )
	{
		case 1:
		{
			Cselekves(playerid, "kiszor egy kis port..");
			PlayerInfo[playerid][pKokain] -= PlayerInfo[playerid][pDrogMuvelet][4];
			PlayerInfo[playerid][pDrogMuvelet][4] = 0;
  		}
		case 2:
		{
			PlayerInfo[playerid][pCuccok][ BL_SZIVOSZAL ]--;
			Cselekves(playerid, "ketté vág egy szívószálat..");
		}
		case 3:
		{
			Cselekves(playerid, "felszívott egy csíkot..");

			PlayerInfo[playerid][pDrogMuvelet][0] = 2;//Kokain
			PlayerInfo[playerid][pDrogMuvelet][1] = false;//mûvelet
			PlayerInfo[playerid][pDrogMuvelet][2]++;//hányszor

			if(PlayerInfo[playerid][pDrogMuvelet][2] >= 3)//túladagolás
			{
				if((PlayerInfo[playerid][pElet] - 20.0) > 0.0)
				SetHealth(playerid, (PlayerInfo[playerid][pElet] - 20.0));
				SCM(playerid, COL_LRED, "Rosszúl érzed magad, szerintem túladagoltad a szert...");
				return true;
			}

			Szukseglet(playerid, -5.0);
			SetHealth(playerid, (PlayerInfo[playerid][pElet] + 15.0));

			LoopingAnim(playerid, "GANGS", "drnkbr_prtl_F", 4.0, 0, 1, 1, 1, -1);
			SetPlayerWeather(playerid, 178);
			//SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 300));

			PlayerInfo[playerid][pDrogMuvelet][3] = (gettime() + (60 * 2));//meddig hat
			defer Eltuntetes[15000](playerid);

			if(ServerInfo[sRL_Time][0] > 19 || ServerInfo[sRL_Time][0] < 8)
				return true;

			return true;
		}
	}

	if(process < 3)
		defer KokainTimer[5000](playerid, (process + 1));

	return true;
}
timer Eltuntetes[15000](playerid)
{
	if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
	SetPlayerWeather(playerid, ServerInfo[sIdojaras]);
	return 1;
}
timer HeroinTimer[5000]( playerid, process )
{
	if(!Belepve(playerid))
		return true;

	switch( process )
	{
		case 1:
		{
			Cselekves(playerid, "kiszór egy kis port egy kanálra..");
			PlayerInfo[playerid][pHeroin] -= PlayerInfo[playerid][pDrogMuvelet][4];
			PlayerInfo[playerid][pDrogMuvelet][4] = 0;
		}
		case 2:
		{
			PlayerInfo[playerid][pCuccok][ BL_KANAL ]--;
			Cselekves(playerid, "meggyújta az öngyújtót és melegíteni kezdi a kanalat");
		}
		case 3:
		{
			Cselekves(playerid, "megpöcökteti a tût és beszúrja...");
			PlayerInfo[playerid][pCuccok][ BL_TU ]--;
			PlayerInfo[playerid][pDrogMuvelet][0] = 3;//Heroin
			PlayerInfo[playerid][pDrogMuvelet][1] = false;//mûvelet
			PlayerInfo[playerid][pDrogMuvelet][2]++;//hányszor

			if(PlayerInfo[playerid][pDrogMuvelet][2] >= 3)//túladagolás
			{
				if((PlayerInfo[playerid][pElet] - 20.0) > 0.0)
				SetHealth(playerid, (PlayerInfo[playerid][pElet] - 20.0));
				SCM(playerid, COL_LRED, "Rosszul érzed magad, szerintem túladagoltad a szert...");
				return true;
			}

			Szukseglet(playerid, -5.0);
			SetHealth(playerid, (PlayerInfo[playerid][pElet] + 15.0));

			LoopingAnim(playerid, "GANGS", "drnkbr_prtl_F", 4.0, 0, 1, 1, 1, -1);
			SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 300));
			SetPlayerWeather(playerid, 190);
			defer Eltuntetes[15000](playerid);

			PlayerInfo[playerid][pDrogMuvelet][3] = (gettime() + (60 * 2));//meddig hat

			if(ServerInfo[sRL_Time][0] > 19 || ServerInfo[sRL_Time][0] < 8)
				return true;

			return true;
		}
	}

	if(process < 3)
		defer HeroinTimer[5000](playerid, (process + 1));

	return true;
}

stock VersenyStatusz( id )
{
	new str[16];
	switch( Race[id][rStatusz] )
	{
		case RACE_VEGE:
			str = "Vége";
		case RACE_INDUL:
			str = "Indítás alatt";
		case RACE_MEGY:
			str = "Aktív";
		case RACE_EPIT:
			str = "Építés alatt";
		case 0:
			str = "Betöltve";
		default:
			str = "N/A";
	}

	return str;
}

stock FrakcioTipus( ertek )
{
	new str[32];
	switch( ertek )
	{
		case 1: str = "Legális";
		case 2: str = "Maffia";
		case 3: str = "Banda";
		case 4: str = "Rendvédelem";
		default: str = "N/A";
	}

	return str;
}

stock CegTulaj( id, bool:extra = false )
{
	new str[32];
	if(CegInfo[ id ][cTulajID] != NINCS)
	{
		if(!extra) format(str, sizeof(str), "%s", CegInfo[ id ][cTulaj]);
		else format(str, sizeof(str), "[%d]%s", CegInfo[ id ][cTulajID], CegInfo[ id ][cTulaj]);
	}
	else if(CegInfo[ id ][cFTulaj])
	{
		if(!extra) format(str, sizeof(str), "%s", FInfo[ CegInfo[ id ][cFTulaj] ][fNev]);
		format(str, sizeof(str), "[%d]%s", CegInfo[ id ][cFTulaj], FInfo[ CegInfo[ id ][cFTulaj] ][fNev]);
	}
	else
		format(str, sizeof(str), "Nincs(Eladó)");
	return str;
}

//Bõvíteni
stock CegTipus( id )
{
	new str[32];
	switch( CegInfo[ id ][cTipus] )
	{
		case 0: str = "N/A";
	}
	return str;
}

stock KozeliCeg( playerid, Float:tav = 3.0 )
{
	new i = NINCS, id = NINCS;
	for(;++i < MAX_CEG;)
	{
		if(CegInfo[i][cVan])
		{
			if(CegInfo[i][cPosBe][0] == 0.0 || !IsPlayerInRangeOfPoint(playerid, tav, PosExt( CegInfo[i][cPosBe] )))
				continue;

			id = i;
			break;
		}
	}

	return id;
}

stock CegPenz( id, ertek, afa = 27 )
{
	if(id >= 0 && id < MAX_CEG && CegInfo[ id ][cVan])
	{
		new tax = floatround((ertek * afa) / 100);

		FInfo[ FRAKCIO_KORMANY ][fPenz] += tax;
		FkUpdate(FRAKCIO_KORMANY, fuPenz);

		CegInfo[ id ][cKassza] += floatround(ertek - tax);
	}
	return true;
}

stock Felrobbant( playerid )
{
	if(!Belepve(playerid) || playerid == INVALID_PLAYER_ID)
		return false;

	new Float:pos[3];

	GetPlayerPos(playerid, PosExt(pos));
	CreateExplosion(PosExt(pos), 12, 8.0);
	SetHealth(playerid, 0.0);
	return true;
}

stock HitmanRang( id )
{
	new str[64];
	switch( PlayerInfo[id][pHitman] )
	{
		case -1: str = "Tag";
		case -2: str = "Director";
		default:
		{
			if(PlayerInfo[id][pHitman] > gettime())
				format(str, sizeof(str), "%s", UnixToTime( PlayerInfo[id][pHitman] ));
			else
				str = "Nincs";
		}
	}

	return str;
}
fpublic Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
	new Float:fDist[3];
	GetPlayerPos(playerid, fDist[0], fDist[1], fDist[2]);

	if( GetPlayerState( playerid ) == PLAYER_STATE_SPECTATING || GetPlayerState( targetid ) == PLAYER_STATE_SPECTATING )
	    return 20000.0;
	else
		return GetPlayerDistanceFromPoint(targetid, fDist[0], fDist[1], fDist[2]);
}

stock KerValtozokNullazasa()
{
	k_ar = 0;
	k_veh = INVALID_VEHICLE_ID;
	//k_elado = INVALID_PLAYER_ID;
	k_kereskedo = INVALID_PLAYER_ID;
	k_uzleteles = 0;
	return true;
}

CMD:tapasztalat(playerid,params[])
{
	new jatekos,fajta[16],mennyit;

	if(sscanf(params,"s[32]ud",fajta,jatekos,mennyit))return SCM(playerid,COL_LKEK,"Használat: /tapasztalat [ fajta ] [ Játékos ] [ összeg ]");
	if(!Admin(playerid,1337))return SCM(playerid,COL_LRED,"Nem vagy fõadmin!");

	if(egyezik(fajta,"legális"))
	{
		PlayerInfo[jatekos][pExp][1] = mennyit;
		SendFormatMessage(playerid,COLOR_WHITE,"Beállítottad %s legális tapasztalat pontját erre: %d",JatekosNev(jatekos),mennyit);
	}
	if(egyezik(fajta,"illegális"))
	{
		PlayerInfo[jatekos][pExp][3] = mennyit;
		SendFormatMessage(playerid,COLOR_WHITE,"Beállítottad %s illegális tapasztalat pontját erre: %d",JatekosNev(jatekos),mennyit);
	}
	if(egyezik(fajta,"autótolvaj"))
	{
	    PlayerInfo[jatekos][pTolvajSkill] = mennyit;
		SendFormatMessage(playerid,COLOR_WHITE,"Beállítottad %s autólopás skilljét erre: %d",JatekosNev(jatekos),mennyit);
	}
	if(egyezik(fajta,"fegyver"))
	{
	    PlayerInfo[jatekos][pFegyverSkill] = mennyit;
		SendFormatMessage(playerid,COLOR_WHITE,"Beállítottad %s fegyver skilljét erre: %d",JatekosNev(jatekos),mennyit);
	}
	return 1;
}
CMD:foci(playerid,params[])
{
	if(Focizik[playerid] == 0)
 	{
    	Focizik[playerid] = 1;
		SendClientMessage(playerid,-1,"Elkezdtél focizni.");
	}else{
		Focizik[playerid] = 0;
		SendClientMessage(playerid,-1,"Befejezted a focit.");
	}
	return 1;
}
CMD:getskin(playerid,params[])
{
	if(!Admin(playerid,1) && !IsHitman(playerid)) return SCM(playerid,COL_LRED,"Ezen a játékoson nem fogom elmondani milyen skin van:P");
	new jatekos;
	if(sscanf(params,"u",jatekos)) return SCM(playerid,COL_LRED,"/getskin [Játékos]");
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos)) return NincsJatekos(playerid);
 	//SCM(playerid,COL_VKEK,"Ezen a játékoson ez a skin van: %d",GetPlayerSkin(jatekos));
	return true;
}
CMD:telefon(playerid,params[])
{
    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		return SendClientMessage(playerid,-1,"Vezetés közben akarsz telefonálni??");
		
	if(Bortonben(playerid))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Telefon","Jelenleg nem használhatod!", "Bezárás", "");

	if(PlayerInfo[playerid][pCuccok][BL_TELEFON] < 1)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Telefon","Neked még nincs telefonod!", "Bezárás", "");
		
    if(PlayerInfo[playerid][pTog][5])
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Telefon","A telefonod ki van kapcsolva!", "Bezárás", "");
		
	if(iPhoneStatus[playerid] == 0)
	{
		loop(0, 22, PHONE) TextDrawShowForPlayer(playerid, g_TextDraw[td_iPhone][PHONE]);
  		iPhoneStatus[playerid] = 1;
  		SendClientMessage(playerid, -1,"Használat: Y - Elfogad/Enter, N - Elutasít/Exit, NUM 4 - BAL, NUM - 6 JOBB");
	}
	else
	{
 		loop(0, sizeof(g_TextDraw[td_iPhone]), PHONE) TextDrawHideForPlayer(playerid, g_TextDraw[td_iPhone][PHONE]);
   		loop(0, PPHONE_SIZE, PPHONE) PlayerTextDrawHide(playerid, g_PlayerTextDraw[ playerid ][ptd_iPhone][PPHONE]);
	    HideIphoneMenu(playerid);
	    iPhoneStatus[playerid] = 0;

	}
	return 1;
}
CMD:van(playerid,params[])
{
	if(!IsLewis(playerid)) return SCM(playerid,COL_LRED,"-.-");
	new jatekos;
	if(sscanf(params,"u",jatekos)) return SCM(playerid,COL_LRED,"/van [Játékos]");
	if(!VanIlyen(jatekos)) return NincsJatekos(playerid);
 	SCM(playerid,COL_VKEK,"Van!");
	return true;
}

CMD:bankkartya(playerid,params[])
{
	if(PlayerInfo[playerid][pCuccok][BL_BANKKARTYA] == 0) return SCM(playerid,COL_LRED,"Nincs bankkártyád!");
	switch(Fizetesmod[playerid])
	{
	    case 0:
	    {
			Fizetesmod[playerid] = 1;
			SCM(playerid,COL_RSARG,"Mostmár bankkártyával fizetsz!");
	    }
	    case 1:
	    {
	        Fizetesmod[playerid] = 0;
	        SCM(playerid,COL_RSARG,"Mostmár készpénzzel fizetsz!");
	    }
	}
	return true;
}
CMD:jelzes(playerid,params[])
{
 	if(!IsLewis(playerid)) return SCM(playerid,COL_LRED,"Hogyne..");
 	new szam,jatekos;
 	if(sscanf(params,"ud",jatekos,szam)) return SCM(playerid,COL_LKEK,"/jelzes [Kinek] [szám] - beállítja");
 	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))    return NincsJatekos(playerid);
 	if(szam < 0) return 1;
	Bejelzett[playerid] = szam;
	SFM(playerid,COL_LKEK,"Kész!",szam);
	if(szam < 1) SetPlayerColor(playerid,COLOR_INVISIBLE);
	return true;
}
CMD:ellopido(playerid,params[])
{
	#pragma unused params
	 if(!IsLewis(playerid)) return SCM(playerid,COL_LRED,"Hogyne..");
	 PlayerInfo[playerid][pLophat] = NINCS;
	 SCM(playerid,COL_LKEK,"Újra lophatsz jármûvet!");
	 return true;
}
CMD:ellopskill(playerid,params[])
{
 	if(!IsLewis(playerid)) return SCM(playerid,COL_LRED,"Hogyne..");
 	new szam;
 	if(sscanf(params,"d",szam)) return SCM(playerid,COL_LKEK,"/ellopskill [szám]");
	PlayerInfo[playerid][pTolvajSkill] = szam;
	SFM(playerid,COL_LKEK,"Autólopási skilled - %d",szam);
	return true;
}
CMD:tolvajkulcs(playerid,params[])
{
 	if(!IsLewis(playerid)) return SCM(playerid,COL_LRED,"Hogyne..");
 	new szam;
 	if(sscanf(params,"d",szam)) return SCM(playerid,COL_LKEK,"/tolvajkulcs [szám]");
	PlayerInfo[playerid][pTolvajKulcs] = szam;
	SFM(playerid,COL_LKEK,"Kaptál %d tolvajkulcsot!",szam);
	return true;
}
CMD:rabolhat(playerid,params[])
{
	#pragma unused params
	if(!IsLewis(playerid)) return SCM(playerid,COL_LRED,"Hogyne..");
	PlayerInfo[playerid][pRabolhat] = NINCS;
	SCM(playerid,COL_LKEK,"Újra rabolhatsz!");
	return true;
}
CMD:feltor(playerid,params[])
{
	if(Szint(playerid) < 5) return SCM(playerid,COL_LRED,"Minimum LVL 5!");
	if(PlayerInfo[playerid][pTolvajKulcs] < 1) return SCM(playerid,COL_LRED,"Nincs nálad tolvajkulcs!");
	if(MunkaFolyamatban[playerid] == 1) return SCM(playerid,COL_LRED,"Már elkezdtél valamilyen munkafolyamatot!");
	if(PlayerInfo[playerid][pLophat] > 0) return SFM(playerid, COL_LRED,"Most nem lophatsz jármûvet! Várnod kell %d másodpercet",PlayerInfo[playerid][pLophat]);
	if(IsPlayerInAnyVehicle(playerid))	return SCM(playerid, COL_LRED, "Kocsiból?");
	new kocsi = GetClosestVehicle(playerid), vid = JarmuID(kocsi,playerid);
	if(GetDistanceToVehicle(playerid,kocsi) > 5) return SCM(playerid,COL_LRED,"Nem vagy elég közel a jármûhöz!");
	if(!IsAKocsi(vid)) return SCM(playerid, COL_LRED, "Ezt nem fogod feltörni!");
	if(VanUtas(vid)) return SCM(playerid,COL_LRED,"Ha ülnek benne ne törd már fel..");
	if(!vInfo[vid][vZarva]) return SCM(playerid,COL_LRED,"Még jó hogy nyitva van..:D");
	if(PlayerInfo[playerid][pTolvajSkill] >= 6)
	{
		OnePlayAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
		OnePlayAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
	    Cselekves(playerid,"betöri a könyökével a jármû ablakát,majd kinyitja az ajtót..");
		SCM(playerid,COL_VZOLD,"Sikeresen feltörted a jármûvet!");
		AjtoZar(playerid,vid,true,true);
	}
	else if(PlayerInfo[playerid][pTolvajSkill] >= 2)
	{
	    Freeze(playerid);
	    SCM(playerid,COL_VZOLD,"Jármû feltörése..");
	    Cselekves(playerid,"elkezdett piszkálni valamit..");
		PlayerInfo[playerid][pTolvajKulcs]--;
		if(PlayerInfo[playerid][pTolvajKulcs] == 0) SCM(playerid,COL_LRED,"Elfogytak a tolvajkulcsaid!");
		defer Feltor[(80000-PlayerInfo[playerid][pTolvajSkill]*10000)](playerid, vid);
	}
	else
	{
		SCM(playerid,COL_LRED,"Nincs elég tapasztalatod így nemtudod ellopni a jármûvet!");
	}
	return true;
}

CMD:ellop(playerid,params[])
{
	if(Szint(playerid) < 5) return SCM(playerid,COL_LRED,"Minimum LVL 5!");
	if(MunkaFolyamatban[playerid] == 1) return SCM(playerid,COL_LRED,"Már elkezdtél valamilyen munkafolyamatot!");
	if(PlayerInfo[playerid][pLophat] > 0) return SFM(playerid, COL_LRED,"Most nem lophatsz jármûvet! Várnod kell %d másodpercet",PlayerInfo[playerid][pLophat]);
	if(GetPlayerVehicleSeat(playerid))	return SCM(playerid, COL_LRED, "Csak sofõrként tudod használni!");
	new kocsi = GetPlayerVehicleID(playerid),	jarmuidje = JarmuID(kocsi, playerid);
	if(IsABicikli(vInfo[jarmuidje][vModel]))	return SCM(playerid, COL_LRED, "Hmm...");
	if(!vInfo[jarmuidje][vUzemanyag])	return SCM(playerid, COL_LRED, "A jármûbõl kifogyott az üzemanyag!");
	if(PlayerInfo[playerid][pTiltasok][TILTAS_AUTO] > 0)	{	SFM(playerid,COL_LRED,"Nem használhatsz jármûvet még %d percig",PlayerInfo[playerid][pTiltasok][TILTAS_AUTO]/60);	return 1;	}
	if(PlayerInfo[playerid][pmotortinditja])	return SCM(playerid, COL_LRED, "A jármû jelenleg is indítás alatt áll!");
	if(GetJarmu(kocsi, KOCSI_MOTOR) == 1) return SCM(playerid, COL_LRED,"Ennek a jármûnek már be van indítva a motorja..");
	new Float:kocsielet;	GetVehicleHealth(kocsi, kocsielet);
	if((100 - (((kocsielet - 350) / 650)) * 100) > 100)	return SCM(playerid, COL_LRED, "A jármû állapota nem teszi lehetõvé a motor indítását!");
	if(vInfo[jarmuidje][vModel] == 427 || vInfo[jarmuidje][vModel] == 428 || vInfo[jarmuidje][vModel] == 528 || vInfo[jarmuidje][vModel] == 425 || vInfo[jarmuidje][vModel] == 432  || vInfo[jarmuidje][vModel] == 520 || vInfo[jarmuidje][vModel] == 601) return SCM(playerid,COL_LRED,"Felejsd el..");

	if(vInfo[jarmuidje][vMunka] && PlayerInfo[playerid][pTolvajSkill] < 15) return SCM(playerid,COL_LRED,"Ezt még nem tudod ellopni mivel nincs elég tapasztalatod hozzá! (15)");
	else if(IsAMotor(vInfo[jarmuidje][vModel]) && PlayerInfo[playerid][pTolvajSkill] < 2) return SCM(playerid,COL_LRED,"Ezt még nem tudod ellopni mivel nincs elég tapasztalatod hozzá! (2)");
	else if(IsAHajo(vInfo[jarmuidje][vModel]) && PlayerInfo[playerid][pTolvajSkill] < 6) return SCM(playerid,COL_LRED,"Ezt még nem tudod ellopni mivel nincs elég tapasztalatod hozzá! (6)");
	else if(IsAHeli(vInfo[jarmuidje][vModel]) && PlayerInfo[playerid][pTolvajSkill] < 8) return SCM(playerid,COL_LRED,"Ezt még nem tudod ellopni mivel nincs elég tapasztalatod hozzá! (8)");
	else if(IsARepulo(vInfo[jarmuidje][vModel]) && PlayerInfo[playerid][pTolvajSkill] < 9) return SCM(playerid,COL_LRED,"Ezt még nem tudod ellopni mivel nincs elég tapasztalatod hozzá! (9)");
	else if(PlayerInfo[playerid][pTolvajSkill] >= 9)
	{
	    SCM(playerid,COL_VZOLD,"Jármû ellopása..");
	    
	    new starttime = (10000-PlayerInfo[playerid][pTolvajSkill]*200);
	    defer JarmuInditas[starttime](playerid, kocsi);
	}
	else
	{
		MunkaFolyamatban[playerid] = 1;
		new asd = random(sizeof(BillentyuInfo));

		Billentyu[playerid] = BillentyuInfo[asd][0][0];
		BillentyuHatra[playerid] = 30-PlayerInfo[playerid][pTolvajSkill];

		SFM(playerid,COL_RSARG,"Nyomd meg a {1E90FF}- %s -{FFFFFF} gombot!", BillentyuInfo[asd][1]);
		PlayerTimers[playerid][PT_LOPAS] = defer Sikertelen[Rand(5000, 10000)](playerid);
	}
	return true;
}
CMD:nullazas(playerid,params[])
{
	if(!IsLewis(playerid)) return SCM(playerid,COL_LRED,"Hogyne drágám..");
	new mi[32];
	if(sscanf(params,"s[32]{}",mi)) return SCM(playerid,COL_LKEK,"Használata: /nullazas [ Swat / Hitman ]");
	if(egyezik(mi,"swat"))
	{
		new szamlalo = 0;
		AdminUzenet(COLOR_PIROS, 1,"MySQL: {FFFFFF}%s nullázta a playerek SWAT tagságát!", returnName(playerid));
		foreach(Player, all)
		{
			PlayerInfo[all][pSWAT] = 0;
			PlayerInfo[all][pSWATRang] = 0;
			szamlalo++;
		}
		if(szamlalo > 0)	SFM(playerid,COL_VKEK,"Nullázás lefutott! - Találatok száma: %d",szamlalo); else SCM(playerid,COL_LRED,"Nullázás lefutott! Nem volt találat!");
		doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pSWAT='0',pSWATRang='0'",0);
	}
	if(egyezik(mi,"hitman"))
	{
		new szamlalo = 0;
		AdminUzenet(COLOR_PIROS, 1,"MySQL: {FFFFFF}%s nullázta a playerek Hitman tagságát!", returnName(playerid));
		foreach(Player, all)
		{
			PlayerInfo[all][pHitman] = 0;
			PlayerInfo[all][pHitmanDuty] = 0;
			szamlalo++;
		}
		if(!szamlalo) SCM(playerid,COL_LRED,"Nullázás lefutott! Nem volt találat!");
		doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET phitman='0'",0);
	}
	return true;
}
CMD:nullaz(playerid,params[])
{
	if(!IsLewis(playerid)) return SCM(playerid,COL_LRED,"Óóóó hogyne..");
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"/nulláz [Ház/Jármû/Fegyverek[ÕSSZES]] [ID]");
		return 1;
	}
	new mi[32],id;
	sscanf(params,"sD(-1){}",mi,id);
	if(egyezik(mi,"Fegyverek"))
	{
		if(!IsScripter(playerid)) return SCM(playerid,COL_LRED,"Ezt a parancsot sokkal magasabb rangon tudod csak használni!");
		SendFormatMessageToAll(COLOR_LIGHTRED,"[Felhívás] %s törölte az ÖSSZES fegyvert a szerverrõl!",JatekosNev(playerid));
		foreach(Player,i)
		{
			Fegyver(i, false);
			new fegyver = 0;
			for(;++fegyver < 13;)
			{
				PlayerInfo[i][pFegyverek][fegyver] = 0;
				PlayerInfo[i][pToltenyek][fegyver] = 0;
			}
   			SetPlayerAttachedWeapon(i, true);
		}
		doQuery("UPDATE `jatekosok` SET `pFegyverek`='0,0,0,0,0,0,0,0,0,0,0,0,%d'",0); //ez így egyszerûbb
		doQuery("UPDATE `jatekosok` SET `pToltenyek`='0,0,0,0,0,0,0,0,0,0,0,0,%d'",0); //ez így egyszerûbb
		for(new cid=0;cid<MAX_VEHICLES;cid++)
		{
			if(vInfo[cid][vHasznalva] == true)
			{
				for(new fegyver = 0;fegyver<5;fegyver++)
				{
					vInfo[cid][vFegyver][fegyver] = 0;
					vInfo[cid][vTolteny][fegyver] = 0;
					vUpdate(cid, vuFegyver);
				}
			}
		}
		for(new i=0;i<MAX_HOUSE;i++)
		{
			if(HazInfo[i][hasznalatban] == true)
			{
				for(new c=0;c<15;c++)
				{
					HazInfo[i][hFegyver][c] = 0;
					HazInfo[i][hTolteny][c] = 0;
				}
			}
		}
		for(new i=0;i<MAX_FRAKCIO;i++)
		{
			for(new c=0;c<50;c++)
			{
				FInfo[i][fFegyverek][c] = 0;
				FInfo[i][fToltenyek][c] = 0;
				FkUpdate(i, fuFegyverek);
			}
		}
		for(new i=0;i<MAX_DROP;i++)
		{
			if(dInfo[i][dTipus] == ELDOB_FEGYVER && dInfo[i][dHasznalva] == true)
			{
				dInfo[i][dTipus] 		= 	0;
				dInfo[i][dFegyver] 	= 	0;
				dInfo[i][dErtek] 		= 	0;
				dInfo[i][dPos][0] 	= 	0.0;
				dInfo[i][dPos][1] 	= 	0.0;
				dInfo[i][dPos][2] 	= 	0.0;
				dInfo[i][dInt] 		= 	0;
				dInfo[i][dVirtual] 	= 	0;
				DestroyDynamicObject(dInfo[i][dObject]);
				DestroyDynamic3DTextLabel(dInfo[i][dText]);
				dInfo[i][dHasznalva]	= 	false;
				doQuery("DELETE FROM `"#MYSQL_CUCCOK_TABLA"` WHERE TorlesiAzonosito = '%d'", dInfo[i][dTorlesiAzonosito]);
				dInfo[i][dTorlesiAzonosito] = 0;
			}
		}
		SCM(playerid,COL_LRED,"Kész!");
		AdatMentesSzerver( true );
		return 1;
	}
	if(egyezik(mi,"Ház"))
	{
		if(id == -1)
		{
			SCM(playerid,COL_LRED,"Ház ID?");
			return 1;
		}
		if(HazInfo[id][hasznalatban] == false) return SCM(playerid,COL_LRED,"Nincs ilyen ház!");
		for(new i=0;i<15;i++)
		{
			HazInfo[id][hFegyver][i] = 0;
			HazInfo[id][hTolteny][i] = 0;
		}
		HazMentes();
		SFM(playerid,COL_LRED,"A %d számú házat nulláztad!",id);
		AdminUzenet(COLOR_LIGHTRED,1,"%s nullázta a %d számú ház fegyvereit",JatekosNev(playerid),id);
		return 1;
	}
	if(egyezik(mi,"Jármû"))
	{
		if(id == -1)
		{
			SCM(playerid,COL_LRED,"Ház ID?");
			return 1;
		}
		if(vInfo[id][vHasznalva] == false) return SCM(playerid,COL_LRED,"Nincs ilyen kocsi!");
		for(new i=0;i<5;i++)
		{
			vInfo[id][vFegyver][i] = 0;
			vInfo[id][vTolteny][i] = 0;
		}
		vUpdate(id, vuFegyver);
		SFM(playerid,COL_LRED,"A %d számú jármûvet!",id);
		AdminUzenet(COLOR_LIGHTRED,1,"%s nullázta a %d számú jármû fegyvereit",JatekosNev(playerid),id);
		JarmuMentes();
		return 1;
	}
	return 1;
}
#if defined KELLDWAYNE
CMD:randomspawn(playerid,params[])
{
	if(!IsLewis(playerid)) return SCM(playerid,COL_LRED,"Óóóóó hogyne drágám..");
	new jatekos = VasarlosNPCK[0];
	if(jatekos == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"A fegyveres NPC nincs csatlakoztatva!");
	if(!IsPlayerNPC(jatekos)) return SCM(playerid,COL_LRED,"Hiba történt! Dwayne Harrison nem NPC!");
	AdminUzenet(RED,1,"%s spawnoltatta a fegyveres NPC-t!",returnName(playerid));
	FegyverNPC(jatekos);
	return true;
}
#endif
CMD:parancsali(playerid,params[])
{
	if(!IsLewis(playerid)) return SCM(playerid,COL_LRED,"Aha..");
	Parancs_Alias();
	SendClientMessageToAll(COLOR_PIROS,"<< Parancsok újratöltése folyamatban! >>");
	return true;
}
CMD:vwbug(playerid,params[])
{
	if(!Admin(playerid, 1) && !IsAS(playerid)) return SCM(playerid,COL_LRED,"Nem vagy admin(segéd)!");
	new jatekos;
	if(sscanf(params,"u",jatekos)) return SCM(playerid,COL_LKEK,"Használat: /vwbug [Játékos]");
	SetVirtualWorld(playerid,0);
	SetInterior(playerid,0);
	AdminUzenet(COLOR_NAR, 1, "%s - /vwbug => %s", JatekosNev(playerid), JatekosNev(jatekos));
	return true;
}
CMD:gazmaszk(playerid,params[])
{
	#pragma unused params
	if(PlayerInfo[playerid][pGazmaszk] == 0) return SCM(playerid,COL_RED,"Nincs nálad gázmaszk!");
	switch(PlayerInfo[playerid][pGazmaszkFenn])
	{
		case false:
		{
			ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
			defer GazmaszkFel[3000](playerid);
		}
		case true:
		{
			PlayerInfo[playerid][pGazmaszkFenn] = false;
			Cselekves(playerid, "levette a gázmaszkját.");
			SCM(playerid, COL_VZOLD,"Levetted a gázmaszkod!");
		}
	}
	return true;
}
CMD:bomba(playerid,params[])
{
	if(Szint(playerid) < 5) return SCM(playerid,COL_LRED,"LVL 5 szükséges a parancs használatához!");
	new param[32];
	if(sscanf(params,"s[32]{}",param))
	{
		if(PlayerInfo[playerid][pSWAT] == 1 || PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA)
			SCM(playerid, COL_LKEK,"Használat: /bomba [ Hatástalanít ]");

		SCM(playerid, COL_LKEK,"Használat: /bomba [ Elõvesz / Elrak / Robbant / Felszerel / Készít / Info ]");
	}
	else if(egyezik(param, "hatástalanít") || egyezik(param, "hatastalanit") || egyezik(param, "Hatastalanit") || egyezik(param, "Hatástalanít"))
	{
		new id = NINCS;
		foreach(Bombak, p)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, posArr{g_Bomba[p][bPos]}))
			{
				id = p;
				break;
			}
		}
		if(id == NINCS)	return SCM(playerid,COL_LRED,"A közeledben nincs bomba!");
		if(id == BombaLerakva[playerid])
		{
   			BombaTorol(BombaLerakva[playerid]);
   			
			BombaKezbe[playerid] = NINCS;
			BombaLerakva[playerid] = NINCS;
			PlayerInfo[playerid][pCuccok][BL_C4] += 1;
			SCM(playerid,COL_VZOLD,"Hatástalanítottad a saját bombád! Újra használhatod!");
			Cselekves(playerid, "hatástalanította a bombát.");
		}
		else if(PlayerInfo[playerid][pSWAT] || PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA)
		{
			if(MunkaFolyamatban[playerid])	return SCM(playerid,COL_LRED,"Már elkezdtél valamilyen munkafolyamatot!");
			Freeze(playerid);
			MunkaFolyamatban[playerid] = 1;
			SCM(playerid,COL_VZOLD,"Megpróbálod hatástalanítani a bombát..");
			Cselekves(playerid, "megpróbál hatástalanítani egy bombát..");
			defer BombaSzerel[30000](playerid, 3, id);
			ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
		}
		else
			return SCM(playerid,COL_LRED,"Nem vagy SWAT Tag & Katona és nem tied a bomba!");
			
		return true;
	}
	else if(egyezik(param,"info"))
	{
		SendClientMessage(playerid, LKEK,"Bomba beszerzése:"#COL_FASZTUDJA" Illegális NPCnél vásárolható - 100 000$");
	//	SendClientMessage(playerid, LKEK,"Bomba hatástalanítása:"#COL_FASZTUDJA" Így kell meg úgy ja meg be kéne ezt fejezni");
	}
	else if(egyezik(param,"kell"))
	{
		if(!IsScripter(playerid)) return SCM(playerid, COL_LRED,"Nem használhatod ezt a parancsot!");
		PlayerInfo[playerid][pCuccok][BL_C4]++;
		SCM(playerid, COL_VZOLD,"Kaptál egy bombát!");
	}
	else if(egyezik(param,"Elõvesz") || egyezik(param,"Elovesz"))
	{
		if(PlayerInfo[playerid][pCuccok][BL_C4] == 0) return SCM(playerid,COL_LRED,"Nincs nálad bomba!");
		new ureskez = UresKez(playerid);
		if(ureskez == -1) return SCM(playerid,COL_LRED,"Nincs szabad kezed!");
		if(BombaKezbe[playerid] != -1) return SCM(playerid,COL_LRED,"Már vettél elõ bombát!");
		Cselekves(playerid,"elõvett valamit..");
		SetPlayerAttachedObject(playerid, ureskez, 1654, 5, 0.0, 0.044200, -0.060892, 156.370300, 0.0, 0.0, 1.0, 1.0, 1.0);//bal kéz
		BombaKezbe[playerid] = ureskez;
	}
	else if(egyezik(param,"Elrak"))
	{
		if(BombaKezbe[playerid] == NINCS) return SCM(playerid,COL_LRED,"Nem vettél elõ bombát!");
		Cselekves(playerid,"elrakott valamit..");
		RemovePlayerAttachedObject(playerid, BombaKezbe[playerid]);
		BombaKezbe[playerid] = -1;
	}
	/*else if(egyezik(param,"Telepít") || egyezik(param,"Telepit"))
	{
		if(MunkaFolyamatban[playerid] == 1) return SCM(playerid,COL_LRED,"Már elkezdtél valamilyen munkafolyamatot!");
		if(!IsHitman(playerid)) return SCM(playerid,COL_LRED,"Nem vagy hitman!");
		if(PlayerInfo[playerid][pCuccok][BL_C4] == 0) return SCM(playerid,COL_LRED,"Nincs nálad bomba!");
		if(BombaKezbe[playerid] != 1) return SCM(playerid,COL_LRED,"Nem vettél elõ bombát!");
		if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COL_LRED, "Nem vagy jármûben!");
		if(Bortonben(playerid) > 0)	return SCM(playerid, COL_LRED, "Börtönben?!");
		if(NemMozoghat(playerid,false)) return SCM(playerid, COL_LRED, "Most nem!");
		if(InditosBomba[GetPlayerVehicleID(playerid)] != NINCS) return SCM(playerid,COL_LRED,"Ebbe a jármûbe már van bomba!");
		if(PlayerInfo[playerid][pMegerosites] != playerid)
		{
			PlayerInfo[playerid][pMegerosites] = playerid;
			SCM(playerid, COL_LRED, "Biztos hogy ide akarod felszerelni? Ha igen,írd be mégegyszer a parancsot!");
			return true;
		}
		MunkaFolyamatban[playerid] = 1;
		Freeze(playerid);
		SCM(playerid, COL_MKEK,"Elkezted a bomba beszerelését..Kb 50másodperc - Várj türelmesen!");
		SetTimerEx("BombaSzerel",50000,false,"dd",playerid, 3);
	}*/
	else if(egyezik(param,"Felszerel"))
	{
	    new azonnal = 0;
	    sscanf(params, "{s[32]}D(0)", azonnal);
	    
		if(MunkaFolyamatban[playerid] == 1) return SCM(playerid,COL_LRED,"Már elkezdtél valamilyen munkafolyamatot!");
		if(PlayerInfo[playerid][pCuccok][BL_C4] == 0) return SCM(playerid,COL_LRED,"Nincs nálad bomba!");
		if(BombaKezbe[playerid] == -1) return SCM(playerid,COL_LRED,"Nem vettél elõ bombát!");
		if(Bortonben(playerid) > 0)	return SCM(playerid, COL_LRED, "Börtönben?!");
		if(NemMozoghat(playerid,false)) return SCM(playerid, COL_LRED, "Most nem!");
		if(BombaLerakva[playerid] != NINCS) return SCM(playerid,COL_LRED,"Már raktál le bombát!");
		if(PlayerInfo[playerid][pMegerosites] != playerid){
			PlayerInfo[playerid][pMegerosites] = playerid;
			SCM(playerid, COL_LRED, "Biztos hogy ide akarod felszerelni? Ha igen,írd be mégegyszer a parancsot!");
			return true;
		}
		if(IsPlayerInAnyVehicle(playerid))
		{
			Freeze(playerid);
			SCM(playerid, COL_MKEK,"Elkezted a bomba beszerelését..Kb 90másodperc - Várj türelmesen!");
			
			if(IsScripter(playerid) && azonnal == 1)
				BombaSzerel(playerid, 2, 0);
			else {
			    defer BombaSzerel[90000](playerid, 2, 0);
			    Cselekves(playerid,"elkezdte beszerelni a bombát a jármûbe...");
			    MunkaFolyamatban[playerid] = 1;
			}
		}
		else {
			Freeze(playerid);
			SCM(playerid, COL_MKEK,"Elkezted a bomba felszerelését..Kb 40másodperc - Várj türelmesen!");
			
			if(IsScripter(playerid) && azonnal == 1)
				BombaSzerel(playerid, 1, 0);
			else {
			    defer BombaSzerel[40000](playerid, 1, 0);
			    ApplyAnimation(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
				MunkaFolyamatban[playerid] = 1;
				Cselekves(playerid,"elkezdte felszerelni a bombát...");
            }
		}
	}
	else if(egyezik(param,"robbant") || egyezik(param,"robbantás"))
	{
		if(BombaLerakva[playerid] == NINCS) return SCM(playerid,COL_LRED,"Nem raktál le bombát!");
		if(g_Bomba[ BombaLerakva[playerid] ][bIdo] > 0) return SCM(playerid,COL_LRED,"A bomba idõzítõje már aktív! Várj amíg robban..");
		ShowPlayerDialog(playerid, DIALOG_BOMBA, DIALOG_STYLE_LIST, "Bomba robbantás", "Azonnali robbantás\n5 másodperces idõzítés\n10 másodperces idõzítés\n15 másodperces idõzítés\n30 másodperces idõzítés\n1 perces idõzítés", "Aktiválás", "Mégse");
	}
	return true;
}
CMD:selfie(playerid,params[])
{
	if(Bortonben(playerid) > 0) return SCM(playerid,COL_LRED,"Börtönben?");
	if(IsPlayerInAnyVehicle(playerid))    return SCM(playerid,COL_LRED,"Kocsiba nem!");
	if(NemMozoghat(playerid)) return SCM(playerid,COL_LRED,"Ejnye..");
	if(PlayerInfo[playerid][pCuccok][BL_TELEFON] == 0)	return SCM(playerid,COL_LRED,"Nincs is telefonod..");
	if(PlayerInfo[playerid][pTog][5] == true) return SCM(playerid,COL_LRED,"A telefonod ki van kapcsolva!");
	switch(KepetCsinal[playerid])
	{
		case 0:
		{
			SCM(playerid,COL_VKEK,"A fejmozgás letiltásához - "#COL_LKEK"/headmove");
			SCM(playerid,COL_VKEK,"A kamerát mozgatni a "#COL_LKEK"NUM4"#COL_FEHER" és "#COL_LKEK"NUM6"#COL_FEHER" gombbal tudod.");
			SCM(playerid,COL_VKEK,"Kilépéshez írd be újra a "#COL_LKEK"/selfie"#COL_FEHER" parancsot.");
			GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			static Float: n1X, Float: n1Y;
			if(Degree[playerid] >= 360) Degree[playerid] = 0;
			Degree[playerid] += SelfieSpeed;
			n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
			n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
			SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
			SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+1);
			SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
			KepetCsinal[playerid] = 1;
			ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
			Cselekves(playerid, "képet csinál magáról..");
		}
		case 1:
		{
			TogglePlayerControllable(playerid,1);
			SetCameraBehindPlayer(playerid);
			KepetCsinal[playerid] = 0;
			ApplyAnimation(playerid, "PED", "ATM", 4.1, 0, 1, 1, 0, 1, 1);
		}
	}
	return true;
}
CMD:apw(playerid, params[])
{
	#pragma unused params
	if(!Admin(playerid, 1))    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	PlayerInfo[playerid][pDefensed][1] = 3;
	ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_FEHER"\nAdd meg jelenlegi jelszavad\naz Adminjelszó váltásához!", "Rendben", "Mégse");
	return true;
}
CMD:leut(playerid,params[])
{
	#pragma unused params
	if(FloodEllenorzes(playerid)) return 1;
	new jatekos = GetClosestPlayer(playerid);
	if(Szint(playerid) < 10) return SCM(playerid,COL_LRED,"LVL 10-tõl!");
	if(!PlayerToPlayer(playerid,jatekos,2)){ 	return SCM(playerid,COL_LRED,"Nincs senki a közeledben!");	}
	if(IsPlayerNPC(jatekos) || PlayerInfo[jatekos][pAduty] || PlayerInfo[jatekos][pASduty]) return SCM(playerid,COL_LRED,"Õt nem ütheted le..");
	if(NemMozoghat(playerid,false))	return SCM(playerid, COL_LRED, "Hogyne..");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COL_LRED,"Jármûben? Ejnye..");
	if(PlayerInfo[jatekos][pAnimban][0] == 1) return SCM(playerid, COL_LRED,"Animba ne üsd már le legyél oly kedves..");
	if(PlayerInfo[jatekos][pLeutve] == 1) return SCM(playerid, COL_LRED,"Õ már le van ütve!");
	if(PlayerInfo[jatekos][pFegyver] != 0) return SCM(playerid, COL_LRED,"Ha fegyver van a kezében nem ütheted le!");
	if(!Leuthetvele(PlayerInfo[playerid][pFegyver])) return SCM(playerid, COL_LRED,"Csak Baseball/Colt/Deagleval üthetsz le!");
	if(Bortonben(playerid)) return SCM(playerid,COL_LRED,"Hogyne..");
	ApplyAnimation(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
	Cselekves(playerid,"leütött valakit..");
	Leut(jatekos,1);
	return true;
}
CMD:irc(playerid,params[])
{
	if(PlayerInfo[playerid][pCuccok][BL_KEZIRADIO] == 0)	return SCM(playerid, COL_LRED,"Nincs rádiód! Vegyél a boltban..");
	if(NemMozoghat(playerid,false)) return SCM(playerid,COL_LRED,"Jelenleg ezt nem használhatod!");
	new parameterek[32];
	if(sscanf(params,"s[32]{}",parameterek)) return SCM(playerid,COL_LKEK,"Használat: /irc [ Connect / Disconnect ]");
	if(egyezik(parameterek,"Connect"))
	{
		new channel;
		if(sscanf(params,"{s[32]}d",channel)) return SCM(playerid,COL_LKEK,"Használat: /irc Connect [Szobaszám]");
		if(channel < 0 || channel > MAX_IRC) return SCM(playerid,COL_LRED,"Nincs ilyen IRC szoba!");
		if(PlayerInfo[playerid][pChannel] == channel) return SCM(playerid, COL_LRED,"Te már ezen a channelen vagy!");
		IRCC(playerid, channel);
	}
	else if(egyezik(parameterek,"Disconnect"))
	{
		if(PlayerInfo[playerid][pChannel] == NINCS) return SCM(playerid, COL_LRED,"Nem vagy IRC channelen!");
		IRCDC(playerid);
	}
	return true;
}
CMD:i(playerid,params[])
{
	if(PlayerInfo[playerid][pCuccok][BL_KEZIRADIO] == 0)	return SCM(playerid, COL_LRED,"Nincs rádiód! Vegyél a boltban..");
	if(NemMozoghat(playerid,false)) return SCM(playerid,COL_LRED,"Jelenleg ezt nem használhatod!");
	new asdadsdsa[128];
	if(sscanf(params,"s[128]",asdadsdsa)) return SCM(playerid,COL_LKEK,"Használat: /i [Üzenet]");
	if(PlayerInfo[playerid][pChannel] == NINCS) return SCM(playerid, COL_LRED,"Nem vagy IRC channelen!");
	format(asdadsdsa,sizeof(asdadsdsa),"%s: %s",returnName(playerid),asdadsdsa);
	IRCuzenet(PlayerInfo[playerid][pChannel],asdadsdsa);
	new str[128];
	format(str, sizeof(str), "[IRC]: %s", asdadsdsa);
	ProxDetector(10.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, false, true);
	return true;
}
CMD:mergezes(playerid,params[])
{
	if(FloodEllenorzes(playerid)) return 1;
	if(!IsHitman(playerid)) return SCM(playerid, COL_LRED,"Nem használhatod ezt a parancsot!");
	if(PlayerInfo[playerid][pFegyver] != 23 && PlayerInfo[playerid][pFegyver] != 34) return SCM(playerid, COL_LRED,"Nincs nálad se sniper se hangtompítós!");
	if(PlayerInfo[playerid][pMergezoLovedekek] < 1) return SCM(playerid, COL_LRED,"Nincs nálad mérgezõ töltet!");
	SFM(playerid,COL_LRED,"pMergezoLovedekek: %d - pMergezoMod: %d",PlayerInfo[playerid][pMergezoLovedekek],PlayerInfo[playerid][pMergezoMod]);

	if(PlayerInfo[playerid][pMergezoMod] == 0)
	{
		PlayerInfo[playerid][pMergezoMod] = 1;
		OnePlayAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
		SCM(playerid,COL_VZOLD,"Mérgezett lövedék betöltve! - Csak hangtompítóssal/sniperrel mûködik");
	}
	else if(PlayerInfo[playerid][pMergezoMod] == 1)
	{
		PlayerInfo[playerid][pMergezoMod] = 0;
		OnePlayAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
		SCM(playerid,COL_VZOLD,"Mérgezett lövedék kikapcsolva!");
	}

	return true;
}
CMD:hitman(playerid, params[])
{
	if(!IsHitman(playerid) && !IsLewis(playerid)) return 1;
	if(isnull(params))
	{
		SCM(playerid, COL_MKEK, "Használat: /hitman [ Felvesz / Kirúg / Lista / Név / Hírdet ]");
		return true;
	}
	new param[24];
	sscanf(params, "s[24]{}", param);

	if(!strcmp(param, "felvesz", true) || !strcmp(param, "kirug", true) || !strcmp(param, "kirúg", true))
	{
		if(!IsLewis(playerid)) return SCM(playerid, COL_MKEK, "Nem használhatod ezt a parancsot!");
		
		new jatekos, eparam[24];
		if(sscanf(params, "{s[24]}us[24]", jatekos, eparam))
			return SFM(playerid, COL_MKEK, "Használat: /hitman %s [Játékos] [ Tag / Director]",param);

		if(jatekos == INVALID_PLAYER_ID || !Belepve(jatekos))
			return NincsJatekos(playerid);

		if(!strcmp(eparam, "director", true) || !strcmp(eparam, "leader", true) && IsLewis(playerid))
		{
			if(!IsHitmanDiri(jatekos))
			{
				PlayerInfo[jatekos][pHitman] = -2;
				SFM(playerid, COL_VZOLD, "Sikeresen felvetted "#COL_MKEK"[%d]%st"#COL_FEHER" Hitman Directornak!", jatekos, JatekosNev(jatekos));
				SCM(jatekos, COL_SARGA, "Hitman Director lettél!");

			} else {

				PlayerInfo[jatekos][pHitman] = 0;
				SFM(playerid, COL_VZOLD, "Elvetted "#COL_MKEK"[%d]%s"#COL_FEHER" Hitman Directorát!", jatekos, JatekosNev(jatekos));
				SCM(jatekos, COL_VZOLD, "A mai naptól nem vagy Hitman Director! A vezetõség aktiválta a beépített önmegsemmisítõdet..");
				Felrobbant( jatekos );
			}
		}
		if(!strcmp(eparam, "tag", true))
		{
			if(!IsHitman(jatekos))
			{
				PlayerInfo[jatekos][pHitman] = -1;
				SFM(playerid, COL_VZOLD, "Sikeresen felvetted "#COL_MKEK"[%d]%st"#COL_FEHER" Hitmannek!", jatekos, JatekosNev(jatekos));
				format(PlayerInfo[jatekos][pHitmanNev], MAX_PLAYER_NAME, "Agent #%d",Rand(1,99));
				SFM(jatekos, COL_SARGA, "Mátol Hitman vagy. A hitman neved "#COL_LKEK"%s",PlayerInfo[jatekos][pHitmanNev]);

			} else {

				PlayerInfo[jatekos][pHitman] = 0;
				SFM(playerid, COL_VZOLD, "Kirúgtad "#COL_MKEK"[%d]%st"#COL_FEHER" a Hitmanektõl!", jatekos, JatekosNev(jatekos));
				SCM(jatekos, COL_VZOLD, "A mai naptól nem vagy Hitman! A vezetõség aktiválta a beépített önmegsemmisítõdet..");
				Felrobbant( jatekos );
			}
		}
	}
	else if(!strcmp(param,"hirdet", true) || !strcmp(param,"hírdet",true))
	{
		SendClientMessageToAll(RED,"<< Gondod van valakivel? Bízd ránk a piszkos munkát! (( /vérdíj rak )) >>");
	}
	else if(!strcmp(param, "név", true) || !strcmp(param, "nev", true))
	{
		if(!IsHitmanDiri(playerid) && !IsLewis(playerid)) return 1;
		new alnev[32], jatekos;
		if(sscanf(params, "{s[24]}us[32]", jatekos, alnev)) return SCM(playerid, COL_MKEK, "Használat: /hitman név [Játékos] [név]");
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))    return NincsJatekos(playerid);
		if(!IsHitman(jatekos)) return SCM(playerid, COL_LRED,"Õ nem hitman!");
		if(IsHitmanDiri(jatekos) && jatekos != playerid)	return SCM(playerid, COL_LRED, "A directornak ne állíts már álnevet..");
		if(strlen(alnev) < 3 || strlen(alnev) > MAX_PLAYER_NAME) return SCM(playerid, COL_LRED,"Ez milyen álnév?");
		format(PlayerInfo[jatekos][pHitmanNev], MAX_PLAYER_NAME, alnev);
		SFM(jatekos, COL_MKEK, "A hitman neved mostantól: "#COL_LRED"%s", alnev);
		SFM(playerid, COL_MKEK, ""#COL_LRED"%s"#COL_LKEK" hitman neve mostantól: "#COL_LRED"%s",JatekosNev(jatekos), alnev);
	}
	else if(!strcmp(param, "lista", true))
	{
		if(!IsHitmanDiri(playerid)) return SCM(playerid, COL_MKEK, "Nem használhatod ezt a parancsot!");
		new db;
		foreach(Player, id)
		{
			if(!Belepve(id)) continue;
			if(IsHitman(id))
			{
				SendFormatMessage(playerid, COLOR_MKEK, "[%d]%s - %s - %s", id, JatekosNev(id, false, true), PlayerInfo[id][pHitmanNev], HitmanRang( id ));
				db++;
			}
		}

		if(!db)
			SCM(playerid, COL_LRED, "Jelenleg nincs online Hitman.");

	}
	return true;
}
CMD:hr(playerid,params[])
{
	if(!IsHitman(playerid) && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /hr [IC Rádió]");
	if(!OOC_Ellenorzes(playerid, "/hr", params))
		return true;
	format(prox, sizeof(prox),"** %s %s: %s ,vége ", HitmanRang(playerid), PlayerInfo[playerid][pHitmanNev], params);

	foreach(Player, p)
    {
        if(Belepve(p) && IsHitman(p))
        {
			SendClientMessage(p, 0xffc400AA, prox);
		}
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, false, true);
	return true;
}
CMD:hrb(playerid,params[])
{
	if(!IsHitman(playerid) && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /hrb [OOC Rádió]");
	if(!OOC_Ellenorzes(playerid, "/srb", params))
		return true;
	format(prox, sizeof(prox),"(( ** %s %s: %s ))", HitmanRang(playerid), PlayerInfo[playerid][pHitmanNev], params);

	foreach(Player, p)
    {
        if(Belepve(p) && IsHitman(p))
        {
			SendClientMessage(p, 0xffc400AA, prox);
		}
    }
    format(prox, sizeof(prox), "(( [Rádió]%s mondja: %s ))", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, false);
	return true;
}
CMD:portable(playerid, params[])
{
	if(!IsHitman(playerid)) return SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
	new param[32];
	if(sscanf(params, "s[32]{}", param)) return SCM(playerid, COL_MKEK, "Használat: /portable [ Munka / Tagok / Rendelés / Csomagom ]");
	if(!strcmp(param, "munka", true))
	{
		switch(PlayerInfo[playerid][pHitmanDuty])
		{
			case 0:
			{
				foreach(Player, x)
				{
					if(IsHitman(x))
					{
						PlayerInfo[playerid][pHitmanDuty] = 1;
						nformat(string, 128, "Ügynökség: # "#COL_FEHER"%s munkába állt #", PlayerInfo[playerid][pHitmanNev]);
						SendClientMessage(x, LKEK, string);
					}
				}
			}
			case 1:
			{
				foreach(Player, x)
				{
					if(IsHitman(x))
					{
						PlayerInfo[playerid][pHitmanDuty] = 0;
						nformat(string, 128, "Ügynökség: # "#COL_FEHER"%s befejezte a munkát #", PlayerInfo[playerid][pHitmanNev]);
						SendClientMessage(x, LKEK, string);
					}
				}
			}
		}
	}
	if(!strcmp(param, "rendelés", true))
	{
		if(PlayerInfo[playerid][pRendelese] != NINCS) return SCM(playerid, COL_LRED,"Te már rendeltél! Vedd fel a csomagod!");
		new rendeles[1024], tmp[128], b = NINCS;
		for(;++b < sizeof(HitmanFegyverek);)
		{
			format(tmp, sizeof(tmp), "\nNév: %s\tLõszer: %ddb\tÁr: %d$", HitmanFegyverek[b][0], HitmanFegyverek[b][2][0],HitmanFegyverek[b][3][0]);
			strcat(rendeles, tmp, sizeof(rendeles));
		}
		ShowPlayerDialog(playerid, DIALOG_HITMAN, DIALOG_STYLE_LIST, "Rendelés",rendeles, "Rendel", "Mégse");
	}
	if(!strcmp(param, "csomagom", true))
	{
		if(PlayerInfo[playerid][pRendelese] == NINCS) return SCM(playerid, COL_LRED,"Te még nem rendeltél!");
		SetPlayerCheckpoint(playerid, PosExt(PlayerInfo[playerid][pRendelesPoz]), 5.0);
		SCM(playerid, COL_VZOLD,"Jelölve a térképen!");
	}
	if(!strcmp(param, "tagok", true))
	{
		new db;
		foreach(Player, id)
		{
			if(!Belepve(id)) continue;
			if(!IsLewis(id) && IsHitman(id))
			{
				SendFormatMessage(playerid, COLOR_MKEK, "[%d]%s - %s - %s", id, JatekosNev(id, false, true), PlayerInfo[id][pHitmanNev], HitmanRang( id ));
				db++;
			}
		}

		if(!db)
			SCM(playerid, COL_LRED, "Jelenleg nincs online Hitman.");
	}
	return true;
}
CMD:verdij(playerid,params[])
{
	if(PlayerInfo[playerid][pjatekosszint] < 3) return SCM(playerid, COL_LRED,"Minimum 3-as szint szükséges!");
	new param[32];
	if(sscanf(params,"s[32]{}",param))
	{
		if(IsHitmanDiri(playerid))
			SCM(playerid, COL_MKEK,"Használat: /vérdíj [ Lista / Célpontok / Töröl]");
		else if(IsHitman(playerid))
			SCM(playerid, COL_MKEK,"Használat: /vérdíj [ Lista / Célpontok ]");
		else
			SCM(playerid, COL_MKEK,"Használat: /vérdíj Rak [Játékos] [Vérdíj] [Oka]");
		return true;
	}
	else if(egyezik(param,"rak"))
	{
		new jatekos,verdij, oka[32];
		if(IsHitman(playerid) && !IsHitmanDiri(playerid)) return SCM(playerid, COL_LRED,"Bérgyilkosként ne rakj már vérdíjat senkire..");
		if(sscanf(params,"{s[32]}uds[32]",jatekos, verdij, oka)) return  SCM(playerid, COL_MKEK,"Használat: /vérdíj Rak [Játékos] [Vérdíj] [Oka]");
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos)) return NincsJatekos(playerid);
		if(strlen(oka) < 5 || strlen(oka) > 32)	return SCM(playerid, COL_LRED,"A vérdíj indoknak minimum 5,maximum 32 karakternek kell lennie!");
		if(verdij < 1000 || verdij > MAX_ERTEK)	return SCM(playerid, COL_LRED,"A vérdíj minimum 1000$!");
		if(PlayerInfo[playerid][ppenz] < verdij)	return SCM(playerid, COL_LRED,"Nincs nálad elegendõ készpénz!");
		if(PlayerInfo[jatekos][pjatekosszint] < 3)	return SCM(playerid, COL_LRED,"A célpont szintje kisebb mint 3,ezért nem rakhatsz rá vérdíjat!");
		if(IsHitman(jatekos)) 	return SCM(playerid, COL_VZOLD,"Sikeresen vérdíjat tettél a játékos fejére!");
		SCM(playerid, COL_VZOLD,"Sikeresen vérdíjat tettél a játékos fejére!");
		format(PlayerInfo[jatekos][pVerdijOk], 32, "%s", oka);
		PlayerInfo[jatekos][pVerdij] += verdij;
		GiveMoney(playerid, -verdij);
		if(!IsHitmanDiri(playerid))
		{
			AdminUzenet(RED,1,"[Vérdíj]%s => %s | Oka: %s | Vérdíj: %s$", JatekosNev(playerid),JatekosNev(jatekos), oka, FN(verdij));
		}
		foreach(Player, x)
		{
			if(IsHitman(x))
			{
				SendClientMessage(x, FEHER,"=====[ "#COL_LKEK"Ügynökség - "#COL_VZOLD"Új megbízás"#COL_FEHER" ]=====");
				SendFormatMessage(x, LKEK,"Célpont: "#COL_FEHER"%s - Vérdíj: %s$ - Oka: %s", JatekosNev(jatekos), FN(PlayerInfo[jatekos][pVerdij]), oka);
			}
		}
	}
	else if(egyezik(param,"töröl"))
	{
		if(!IsHitmanDiri(playerid) && !IsScripter(playerid)) return SCM(playerid,COL_LKEK,"Ezt csak hitman director használhatja!");
		new jatekos;
		if(sscanf(params,"{s[32]}u",jatekos)) return SCM(playerid, COL_MKEK,"Használat: /vérdíj Töröl [Játékos]");
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos)) return NincsJatekos(playerid);
		if(PlayerInfo[jatekos][pVerdij] < 1) return SCM(playerid, COL_LRED,"Rá nem tettek vérdíjat!");
		format(PlayerInfo[jatekos][pVerdijOk], 32, "Nincs");
		PlayerInfo[jatekos][pVerdij] = 0;
		SCM(playerid,COL_LKEK,"Megbízás törölve.");
		foreach(Player, x)
		{
			if(IsHitman(x))
			{
				SendClientMessage(x, FEHER,"=====[ "#COL_LKEK"Ügynökség - Vérdíj "#COL_VZOLD"törölve"#COL_FEHER" ]=====");
				SendFormatMessage(x, LKEK,"A director törölte a "#COL_LRED"%s"#COL_MKEK" fejérõl a vérdíjat!", JatekosNev(jatekos));
			}
		}
	}
	else if(egyezik(param, "célpontok"))
	{
		if(!IsHitman(playerid)) return SCM(playerid,COL_LKEK,"Nincs ilyen parancs!");
		new szamlalo = 0,vdij;
		foreach(Player, x)
		{
		    vdij = PlayerInfo[x][pVerdij];
			if(x != playerid && vdij > 0)
			{
				SetPlayerMarkerForPlayer(playerid,x,COLOR_SZURKE);
				szamlalo++;
			}
		}
		if(szamlalo == 0)
			return SCM(playerid,COL_LRED, "Nincs vérdíj senkin.");
	}
	else if(egyezik(param, "lista"))
	{
		if(!IsHitman(playerid)) return SCM(playerid,COL_LKEK,"Nincs ilyen parancs!");
		new szamlalo = 0,vdij, lista[128];
		foreach(Player, x)
		{
		    vdij = PlayerInfo[x][pVerdij];
			if(x != playerid && vdij > 0)
			{
				format(lista, 128,"%s "#COL_MKEK"Vérdíj: "#COL_LRED"%s$ "#COL_MKEK"Oka: "#COL_LRED"%s", JatekosNev(x), FN(PlayerInfo[x][pVerdij]), PlayerInfo[x][pVerdijOk]);
				SendClientMessage(playerid, RED, lista);
				szamlalo++;
			}
		}
		if(szamlalo == 0)
			return SCM(playerid,COL_LRED, "Nincs vérdíj senkin.");
	}
	return true;
}
CMD:mereg(playerid, params[])
{
	if(!IsLewis(playerid)) return SCM(playerid,COL_LRED,"Lófaszt!");
	new jatekos;
	if(sscanf(params,"u",jatekos)) return SCM(playerid,COL_LRED,"/méreg [JátékosNeve/ID]");
	if(Mergezve[jatekos] > 0) return SCM(playerid, COL_LRED,"Õ már megvan mérgezve!");
	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos)) return NincsJatekos(playerid);
	SetPlayerDrunkLevel(jatekos, 25000);
	defer Mergezes[25000](jatekos,playerid);
	Mergezve[jatekos]++;
	SFM(playerid,COL_VZOLD,"(( Megmérgezted "#COL_LKEK"%st"#COL_FEHER"! A méreg hamarosan kifejti hatását.. ))",JatekosNev(jatekos));
	SCM(jatekos,COL_LRED,"Megmérgeztek! A méreg hamarosan kifejti hatását..");
	return true;
}
CMD:pda(playerid,params[])
{
	#pragma unused params
	if(NemMozoghat(playerid,false)) return SCM(playerid,COL_LRED,"Most nem használhatod!");
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI) return SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
	new szoveg[512], lista = NINCS;
	for(;++lista < sizeof(PDA);)
	{
		if(PlayerInfo[playerid][prang] >= PDA[lista][0][0])
			format(szoveg, sizeof(szoveg), "%s"#COL_VZOLD"%s - [Rang: %d]\n",szoveg, PDA[lista][1], PDA[lista][0]);
		else
			format(szoveg, sizeof(szoveg), "%s"#COL_LRED"%s - [Rang: %d]\n",szoveg, PDA[lista][1], PDA[lista][0]);
	}
	ShowPlayerDialog(playerid, DIALOG_PDA, DIALOG_STYLE_LIST, ""#COL_SARGA"FBI "#COL_KEK"PDA", szoveg, "Kiválaszt", "Mégse");
	return true;
}
CMD:egyenleg(playerid,params[])
{
	new parameterek[32];
	if(sscanf(params,"s[32]{}",parameterek)) return SCM(playerid,COL_LKEK,"Használat: /egyenleg [Lekér / Feltölt]");
	if(PlayerInfo[playerid][pCuccok][BL_TELEFON] == 0) return SCM(playerid,COL_LRED,"Nincs is telefonod..");
	new bool:talalt, k = NINCS;

	k = 0;
	for(;++k < MAX_AUTOMATA;)
		if(AutomataInfo[k][auhasznalva] && AutomataInfo[k][autipus] == 1)
			if(IsPlayerInRangeOfPoint(playerid, 3.0, PosExt(AutomataInfo[k][aupos])))
				talalt = true;

	if(!talalt)	{ SCM(playerid, COL_LRED, "Nem vagy bankautomatánál!");	return true;	}

	else if(egyezik(parameterek,"Lekér"))
	{
		SendFormatMessage(playerid,YER,"Szolgáltató: {FFFFFF}Az Ön egyenlege - %s $!",FN(PlayerInfo[playerid][pTelefonPenz], 0, '.'));
		Cselekves(playerid, "lekérte az egyenlegét...");
	}
	else if(egyezik(parameterek,"Feltölt"))
	{
		new penz;
		if(sscanf(params,"{s[32]}d",penz)) return SCM(playerid,COL_LKEK,"Használat: /egyenleg Feltölt [Összeg]");
		if(PlayerInfo[playerid][pBszPenz] < penz) return SCM(playerid,COL_LRED,"Nincs ennyi pénz a bankszámládon!");
		if(penz > MAX_ERTEK || penz < 10) return SCM(playerid,COL_LRED,"Minimum 10$!");
		if(PlayerInfo[playerid][pTelefonPenz] > 1000) return SCM(playerid,COL_LRED,"Nem töltheted tovább az egyenleged!");
		if(PlayerInfo[playerid][pTelefonPenz]+penz > 1000) return SCM(playerid,COL_LRED,"Ennyit nem tölthetsz fel! Maximum egyenleg - 1 000$!");
		PlayerInfo[playerid][pTelefonPenz] += penz;
		PlayerInfo[playerid][pBszPenz] -= penz;
		SendFormatMessage(playerid,YER,"Szolgáltató: {FFFFFF}Egyenleg feltöltés sikeres! Az Ön új egyenlege - %s $!",FN(PlayerInfo[playerid][pTelefonPenz], 0, '.'));
		Cselekves(playerid, "feltöltötte az egyenlegét...");
	}
	return true;
}

CMD:gcam(playerid,params[])
{
	if(PlayerInfo[playerid][pLeader] == 0 && (PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD) && !IsScripter(playerid))
		SCM(playerid,COL_MKEK,"Sajnos nem használhatod ezt a parancsot!!!");
	else
		ShowPlayerDialog(playerid,DIALOG_MAIN,DIALOG_STYLE_LIST,"{00A5FF}Camera System {FFFFFF}- {FFDC00}Menü","{37FF00}Új Radar\n\nLegközelebbi radar\nLegközelebbi radar figyelése\n{FF1400}Legközelebbi radar törlése\n{FF1400}Minden radar törlése\n{FF1400}Kilépés","OK","");

	return 1;
}

CMD:streaminfo(playerid,params[])
{
	SFM(playerid,COL_MKEK,"A SAMP kliensednek jelenleg be van töltve (streamelve) %d játékos, és %d jármû.",PlayerInfo[playerid][pStreameltplayer],PlayerInfo[playerid][pStreameltvehicle]);
	SFM(playerid,COL_MKEK,"Te jelenleg %d játékosnak vagy bestreamelve.",PlayerInfo[playerid][pMasoknakstreamelt]);
	return 1;
}
CMD:lakcimkartya(playerid,params[])
{
	new param[32];
	if(sscanf(params,"s[32]{}",param)) return SCM(playerid,COL_MKEK,"Használat: /lakcímkártya [Vesz/Felmutat]");
	else if(!strcmp(param,"vesz",true))
	{
	    if(PlayerInfo[playerid][pLakcimkartya] == 1) return SCM(playerid,COL_LRED,"Neked már van!");
	    if(!NincsHaza(playerid)) return SCM(playerid,COL_LRED,"Neked nincs bejelentett lakcímed.");
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1536.4512,1749.3408,10.8323)) return SCM(playerid,COL_LRED,"A Városházán tudsz venni lakcímkártyát.");
	    if(PlayerInfo[playerid][ppenz] < 10) return SCM(playerid,COL_LRED,"10$-ba kerül, nincs ennyi pénzed.");
		PlayerInfo[playerid][ppenz] -= 10;
		Cselekves(playerid,"igényelt egy lakcímkártyát.");
		PlayerInfo[playerid][pLakcimkartya] = 1;
		SCM(playerid,COL_MKEK,"Megkaptad a lakcímkártyát!");
	}
	else if(!strcmp(param,"felmutat",true))
	{
	    if(PlayerInfo[playerid][pLakcimkartya] == 0) return SCM(playerid,COL_LRED,"Nincs lakcímkártyád!");
		if(!NincsHaza(playerid)) return SCM(playerid,COL_LRED,"Neked nincs bejelentett lakcímed.");
		new pid;
		if(sscanf(params,"{s[32]}u",pid)) return SCM(playerid,COL_MKEK,"Használat: /lakcímkártya felmutat [Játékos/ID]");
		else if(pid == INVALID_PLAYER_ID) return NincsJatekos(playerid);
		new Float:ppos[3];
	    new Float:pos[3];
	    GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	    GetPlayerPos(pid,ppos[0],ppos[1],ppos[2]);
	    if(GetDistanceBetweenPoints(pos[0],pos[1],pos[2],ppos[0],ppos[1],ppos[2]) > 5.00) return SCM(playerid,COL_LRED,"Ez a játékos nincs a közeledben.");
	    nformat(dtext,512,""#COL_MKEK"Név: {FFFFFF}%s\n"#COL_MKEK"Bejelentett lakcím:{FFFFFF} San Andreas, See u. %d",JatekosNev(playerid),PlayerInfo[playerid][pHazKulcs][0]);
	    ShowPlayerDialog(pid,DIALOG_LAKCIMKARTYA,DIALOG_STYLE_MSGBOX,"Lakcímkártya",dtext,"Rendben","");
	}
	return 1;
}
CMD:forgalmi(playerid,params[])
{
	new pid;
	new vid;
	new vvid;
	if(sscanf(params,"ud",pid,vid)) return SCM(playerid,COL_MKEK,"Használat: /forgalmi [Játékos/ID] [jármûID]");
	else if(pid == INVALID_PLAYER_ID) return NincsJatekos(playerid);
	else if(vid == INVALID_VEHICLE_ID) return NincsJarmu(playerid);
	else {
	    vvid = vInfoID[vid];
		if(vInfo[vvid][vTulajID] != PlayerInfo[playerid][pID]) return SCM(playerid,COL_LRED,"Ez nem a te jármûved.");
		else {
		    new Float:ppos[3];
		    new Float:pos[3];
		    GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
		    GetPlayerPos(pid,ppos[0],ppos[1],ppos[2]);
		    if(GetDistanceBetweenPoints(pos[0],pos[1],pos[2],ppos[0],ppos[1],ppos[2]) > 5.00) return SCM(playerid,COL_LRED,"Ez a játékos nincs a közeledben.");
			nformat(dtext,1024,""#COL_MKEK"jármû típusa: {FFFFFF}%s\n"#COL_MKEK"jármû rendszáma: {FFFFFF}SEE-%d\n"#COL_MKEK"jármû tulajdonosa: {FFFFFF}%s",VehicleNames[vInfo[vvid][vModel] - 400],vid,JatekosNev(playerid));
			ShowPlayerDialog(pid,DIALOG_FORGALMI,DIALOG_STYLE_MSGBOX,"Forgalmi Engedély",dtext,"Rendben","");
			Cselekves(playerid,"felmutatta a forgalmiját valakinek.");
		}
	}
	return 1;
}
CMD:lotto(playerid,params[])
{
    new i = NINCS, bool:van;
	for(;++i < sizeof(Boltok);)
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Boltok[i][boltX], Boltok[i][boltY], Boltok[i][boltZ]))
			van = true;


	if(!van) return SCM(playerid,COL_LRED,"Nem vagy boltban!");
	new szam;
	if(sscanf(params,"d",szam)) return SCM(playerid,COL_MKEK,"Használat: /lottó [Lottószám(0-99)]");
	if(szam < 0 || szam > 99) return SCM(playerid,COL_LRED,"0-99!");
	if(PlayerInfo[playerid][pLottounix] != NINCS) return SCM(playerid,COL_LRED,"Te már vettél lottószelvényt! Várj a következõ sorsolásig!");
	if(PlayerInfo[playerid][ppenz] < LOTTOARA) return SCM(playerid,COL_LRED,"20$ az ára, nálad nincs ennyi!");
	PlayerInfo[playerid][pLottounix] = szam;
	PlayerInfo[playerid][ppenz] -= LOTTOARA;
	SFM(playerid,COL_MKEK,"Sikeresen vettél egy lottószelvényt - A te számod: %d",szam);
	return 1;
}



CMD:dj(playerid,params[])
{
    if(NemMozoghat(playerid))
        return SCM(playerid, COL_LRED, NEM_MOZOGAT);

    return LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
}
CMD:maszkid(playerid,params[])
{
	if(!Admin(playerid,1) && !IsAS(playerid)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /maszkid [Játékos vagy Maszk ID]");

	new bool:talalt;
	if(IsNumeric(params))
	{
		foreach(Player, i)
		{
			if(!PlayerInfo[i][pMaszkID]) continue;
			if(Belepve(i) && !IsPlayerNPC(i) && PlayerInfo[i][pMaszkID] == strval(params))
			{
				SFM(playerid, COL_MKEK, "Név: %s | MaszkID: %d", JatekosNev(i), PlayerInfo[i][pMaszkID]);
				talalt = true;
				break;
			}
		}
	}

	if(!talalt)
	{
		new jatekos;
		sscanf(params, "u", jatekos);

		if(IsPlayerConnected(jatekos) && jatekos != INVALID_PLAYER_ID && !IsPlayerNPC(jatekos))
		{
			SFM(playerid, COL_MKEK, "Név: %s | MaszkID: %d", JatekosNev(jatekos), PlayerInfo[jatekos][pMaszkID]);
			talalt = true;
		}
	}

	if(!talalt)
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	return true;
}

CMD:w(playerid,params[])
{
	new jatekos, szoveg[128];
	if(sscanf(params, "us[128]", jatekos, szoveg))
		return SCM(playerid, COL_MKEK, "Használat: /w(hisper) [játékos] [Üzenet]");
	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen Játékos!");
	if(jatekos == playerid)
		return SCM(playerid, COL_LRED, "Skizofrén vagy? :D Magaddal ne beszélgess...");
	if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
	if(PlayerInfo[playerid][pAlnevbe] == false)
	{
		new maszkid[24];
		format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
		format(uzenet, sizeof(uzenet), "* %s súgja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), szoveg);
	}
	else
	{
		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			new maszkid[24];
			format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
			format(uzenet, sizeof(uzenet), "* %s súgja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), szoveg);
		}
		else
		{
			format(uzenet, sizeof(uzenet), "* %s súgja: %s", PlayerInfo[playerid][pAlnev], szoveg);
		}
	}
	SendClientMessage(jatekos, 0xffff00AA, uzenet);
	ProxDetector(15.0, playerid, "Valakik összesúgtak...", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, false);
	return true;
}
CMD:tiltasaim(playerid,params[])
{
	new alma = 0;
	if(PlayerInfo[playerid][pTiltasok][TILTAS_AS] > 0)
	{
		SFM(playerid,COL_LRED,"AS Tiltás: %s", UnixToTime( PlayerInfo[playerid][pTiltasok][TILTAS_AS] ));
		alma++;
	}
	if(PlayerInfo[playerid][pTiltasok][TILTAS_FRAKCIO] > 0)
	{
		SFM(playerid,COL_LRED,"Frakció tiltás: %s.", UnixToTime( PlayerInfo[playerid][pTiltasok][TILTAS_FRAKCIO] ));
		alma++;
	}
	if(PlayerInfo[playerid][pTiltasok][TILTAS_REPORT] > 0)
	{
		SFM(playerid,COL_LRED,"Report tiltás: %s.", UnixToTime( PlayerInfo[playerid][pTiltasok][TILTAS_REPORT] ));
		alma++;
	}
	if(PlayerInfo[playerid][pTiltasok][TILTAS_AUTO] > 0)
	{
		SFM(playerid,COL_LRED,"Jármû vezetés tiltás: %s.", UnixToTime( PlayerInfo[playerid][pTiltasok][TILTAS_AUTO] ));
		alma++;
	}
	if(PlayerInfo[playerid][pTiltasok][TILTAS_FEGYVER] > 0)
	{
		SFM(playerid,COL_LRED,"Fegyver tiltás: %s.", UnixToTime( PlayerInfo[playerid][pTiltasok][TILTAS_FEGYVER] ));
		alma++;
	}
	if(PlayerInfo[playerid][pTiltasok][TILTAS_TAXI] > 0)
	{
		SFM(playerid,COL_LRED,"Taxi hívás tiltás: %s.", UnixToTime( PlayerInfo[playerid][pTiltasok][TILTAS_TAXI] ));
		alma++;
	}
	if(alma == 0)
	{
		return SCM(playerid,COL_VZOLD,"Nem vagy eltiltva semmitõl.");
	}
	return 1;
}
CMD:tilt(playerid,params[])
{
	if(!Admin(playerid,FSEGED_SZINT)) return 1;
	if(isnull(params))
	{
		SCM(playerid, COL_MKEK,"/tilt [JátékosID] [Óra] [Frakció / AS / Fegyver / Autó / Report] - LEVENNI CSAK HA TE ADTAD!");
		return 1;
	}
	new id,ora,fpublic[32];
	sscanf(params,"U(-1){}D(-1){}s[32]",id,ora,fpublic);
	if(id == -1) return SCM(playerid,COL_LRED,"ID?");
	if(IsPlayerNPC(id) || !Belepve(id) || id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	if(ora == -1) return SCM(playerid,COL_LRED,"Idõ?");
	if(egyezik(fpublic,"Frakció"))
	{
		if(ora == 0)
		{
			SFM(playerid,COL_LRED,"Levetted a frackiótiltást róla: %s",JatekosNev(id));
			SCM(id,COL_LRED,"Levették a frakciótiltást rólad, ismét csatlakozhatsz frakcióba! Csak okosan.");
			PlayerInfo[id][pTiltasok][TILTAS_FRAKCIO] = 0;
			return 1;
		}
		else
		{
			SFM(playerid,COL_LRED,"Frakciótiltás hozzáadva: %s | Idõ: %d óra.",JatekosNev(id),ora);
			SCM(id,COL_LRED,"Eltiltottak a frakcióba lépéstõl. Információ: /tiltásaim");
			PlayerInfo[id][pTiltasok][TILTAS_FRAKCIO] = (ora*60*60);
		}
		return 1;
	}
	if(egyezik(fpublic,"Report"))
	{
		if(ora == 0)
		{
			SFM(playerid,COL_LRED,"Levetted a reporttiltást róla: %s",JatekosNev(id));
			SCM(id,COL_LRED,"Levették a reporttiltást rólad, ismét írhatsz reportot! Csak okosan.");
			PlayerInfo[id][pTiltasok][TILTAS_REPORT] = 0;
			return 1;
		}
		else
		{
			SFM(playerid,COL_LRED,"Reporttiltás hozzáadva: %s | Idõ: %d óra.",JatekosNev(id),ora);
			SCM(id,COL_LRED,"Eltiltottak a reportolástól. Információ: /tiltásaim");
			PlayerInfo[id][pTiltasok][TILTAS_REPORT] = (ora*60*60);
		}
		return 1;
	}
	if(egyezik(fpublic,"Fegyver"))
	{
		if(ora == 0)
		{
			SFM(playerid,COL_LRED,"Levetted a fegyvertiltást róla: %s",JatekosNev(id));
			SCM(id,COL_LRED,"Levették a fegyvertiltást rólad, ismét használhatsz fegyvert! Csak okosan.");
			PlayerInfo[id][pTiltasok][TILTAS_FEGYVER] = 0;
			return 1;
		}
		else
		{
			SFM(playerid,COL_LRED,"Fegyvertiltás hozzáadva: %s | Idõ: %d óra.",JatekosNev(id),ora);
			SCM(id,COL_LRED,"Eltiltottak a fegyverhasználattól. Információ: /tiltásaim");
			PlayerInfo[id][pTiltasok][TILTAS_FEGYVER] = (ora*60*60);
			return 1;
		}
	}
	if(egyezik(fpublic,"Autó"))
	{
		if(ora == 0)
		{
			SFM(playerid,COL_LRED,"Levetted a kocsitiltást róla: %s",JatekosNev(id));
			SCM(id,COL_LRED,"Levették az autótiltást rólad, ismét vezethetsz kocsikat! Csak okosan.");
			PlayerInfo[id][pTiltasok][TILTAS_AUTO] = 0;
			return 1;
		}
		else
		{
			SFM(playerid,COL_LRED,"Autótiltás hozzáadva: %s | Idõ: %d óra.",JatekosNev(id),ora);
			SCM(id,COL_LRED,"Eltiltottak az autóhasználattól. Információ: /tiltásaim");
			PlayerInfo[id][pTiltasok][TILTAS_AUTO] = (ora*60*60);
			return 1;
		}
	}
	if(egyezik(fpublic,"AS"))
	{
		if(ora == 0)
		{
			SFM(playerid,COL_LRED,"Levetted az adminsegéd tiltást róla: %s",JatekosNev(id));
			SCM(id,COL_LRED,"Levették az adminsegéd tiltást rólad, ismét dolgozhatsz! Csak okosan.");
			PlayerInfo[id][pTiltasok][TILTAS_AS] = 0;
			return 1;
		}
		else
		{
			SFM(playerid,COL_LRED,"Adminsegéd tiltás hozzáadva: %s | Idõ: %d óra.",JatekosNev(id),ora);
            SCM(id,COL_LRED,"Eltiltottak az AS-kedéstõl. Információ: /tiltásaim");
			PlayerInfo[id][pTiltasok][TILTAS_AS] = (ora*60*60);
			return 1;
		}
	}
	if(egyezik(fpublic,"taxi"))
	{
		if(ora == 0)
		{
			SFM(playerid,COL_LRED,"Levetted a taxi tiltást róla: %s",JatekosNev(id));
			SCM(id,COL_LRED,"Levették a taxi tiltást rólad, ismét hívhatsz taxit! Csak okosan.");
			PlayerInfo[id][pTiltasok][TILTAS_AS] = 0;
			return 1;
		}
		else
		{
			SFM(playerid,COL_LRED,"Taxi tiltás hozzáadva: %s | Idõ: %d óra.",JatekosNev(id),ora);
			SCM(id,COL_LRED,"Eltiltottak a taxi hívástól. Információ: /tiltásaim");
			PlayerInfo[id][pTiltasok][TILTAS_AS] = (ora*60*60);
			return 1;
		}
	}
	return 1;
}
CMD:club(playerid,params[])
{
	if(!IsScripter(playerid)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/club [ID]");
		return 1;
	}
	new i;
	sscanf(params,"u",i);
	if(i == INVALID_PLAYER_ID || IsPlayerNPC(i) || !Belepve(i)) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	if(PlayerInfo[i][pClub] == 1)
	{
		PlayerInfo[i][pClub] = 0;
		SFM(playerid,COL_LRED,"Kirúgtad a clubosok közül, már nem tudja használni a parancsot. Név: %s",JatekosNev(i));
		SCM(i,COL_LRED,"Egy Scripter / Tulajdonos kirúgott a Don't Stop - The Club alfrakcióból.");
		return 1;
	}
	if(PlayerInfo[i][pClub] == 0)
	{
		PlayerInfo[i][pClub] = 1;
		SCM(i,COL_MKEK,"Felvettek a Don't Stop - The Club csapatába!");
		SFM(playerid,COL_MKEK,"Sikeresen felvetted a Don't Stop - The Club-ba %s -t!",JatekosNev(playerid));
	}
	return 1;
}
CMD:clubzene(playerid,params[])
{
	if(PlayerInfo[playerid][pClub] == 0) return 1;
	if(!IsPlayerInRangeOfPoint(playerid,3,1171.6571,-1662.3842,22.2744))
	{
		SetPlayerCheckpoint(playerid,1171.6571,-1662.3842,22.2744,5);
		SCM(playerid,COL_LRED,"Nem vagy a DJ pult mögött!");
		return 1;
	}
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/clubzene [Stop / Start]");
		return 1;
	}
	new mi[32],url[256];
	sscanf(params,"s[32]s[256]",mi,url);
	if(egyezik(mi,"Start"))
	{
		if(isnull(url))
		{
			SCM(playerid,COL_LRED,"URL?");
			return 1;
		}
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid,X,Y,Z);
		foreach(Player,i)
		{
			if(IsPlayerInRangeOfPoint(i,65,X,Y,Z))
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i,url,X,Y,Z,65.0,1);
				strmid(SweetRadio,url,0,strlen(url),256);
				strmid(HifiZene[i],url,0,strlen(url),256);
			}
		}
		return 1;
	}
	if(egyezik(mi,"Stop"))
	{
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid,X,Y,Z);
		foreach(Player,i)
		{
			if(IsPlayerInRangeOfPoint(i,65,X,Y,Z))
			{
				StopAudioStreamForPlayer(i);
				strmid(SweetRadio,"-",0,strlen("-"),256);
				strmid(HifiZene[i],"-",0,strlen("-"),256);
			}
		}
	    return 1;
	}
	return 1;
}


CMD:drink(playerid,params[])
{
	if(isnull(params))
	{
		if(GetPlayerDrunkLevel(playerid) > 10000)
		{
			SCM(playerid,COL_LRED,"Haver, a következõ korty már detox lesz. Ésszel öreg!");
			return 1;
		}
		new d=-1;
		for(new i=0;i<MAXDRINK;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,5,DrinkInfo[i][dX],DrinkInfo[i][dY],DrinkInfo[i][dZ]) && DrinkInfo[i][dVan] == 1)
			{
				d = i;
				break;
			}
		}
		if(d == -1)
		{
			return SCM(playerid,COL_LRED,"Nem vagy bárban!");
		}
		new dstr[1024], tmp[128], b = NINCS;
		for(;++b < sizeof(ItalLista);)
		{
			format(tmp, sizeof(tmp), "\n%s\t[%s$]", ItalLista[b][0], FN(ItalLista[b][1][0], 0, ','));
			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid,DIALOG_ITALOK,DIALOG_STYLE_LIST,"Italok",dstr,"Vesz","Mégse");
		return 1;
	}
	new mit[32];
	sscanf(params,"s[32]",mit);
	if(egyezik(mit,"lerak"))
	{
		if(Admin(playerid,AC_SZINT))
		{
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid,X,Y,Z);
			new d = -1;
			for(new i=0;i<MAXDRINK;i++)
			{
				if(DrinkInfo[i][dVan] == 0)
				{
					d = i;
					break;
				}
			}
			if(d == -1)
			{
				SCM(playerid,COL_LRED,"Hibakód 0002");
				return 1;
			}
			DrinkInfo[d][dVan] = 1;
			DrinkInfo[d][dX] = X;
			DrinkInfo[d][dY] = Y;
			DrinkInfo[d][dZ] = Z;
			DrinkInfo[d][dText] = CreateDynamic3DTextLabel("(( /drink ))", COLOR_MKEK, DrinkInfo[d][dX], DrinkInfo[d][dY], DrinkInfo[d][dZ], 20.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 1);
			doQuery("INSERT INTO `"#MYSQL_DRINK_TABLE"`(X, Y, Z) VALUES('%f', '%f', '%f')", X,Y,Z);
			return 1;
		}
	}
	else if(egyezik(mit,"töröl"))
	{
	    if(!Admin(playerid,AC_SZINT)) return SCM(playerid,COL_LRED,"Hogyne..");
 		new d = LegkozelebbiLabel(playerid);
		if(d == NINCS) return SCM(playerid,COL_LRED,"Nincs a közeledben drink pozició!");
		if(!DrinkInfo[d][dVan]) return SCM(playerid,COL_LRED,"Nincs ilyen Drink pozició.");
		
	    SFM(playerid,COL_MKEK,"Drink poz törölve. (%d)",d);
	    nformat(rquery,256,"DELETE FROM `"#MYSQL_DRINK_TABLE"` WHERE ID = '%d'",d);
        mysql_tquery(sql_ID, rquery, "", "");
       	DrinkInfo[d][dVan] = 0;
		DrinkInfo[d][dX] = NINCS;
		DrinkInfo[d][dY] = NINCS;
		DrinkInfo[d][dZ] = NINCS;
		DestroyDynamic3DTextLabel(DrinkInfo[d][dText]);
	}
	return 1;
}

CMD:szonda(playerid,params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");

	new jatekos = KozelbenValaki(playerid, 2.0);

	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
		return SCM(playerid, COL_LRED, "A közeledben nincs senki!");

	Szondaz[jatekos] = playerid;
	Szondaz[playerid] = jatekos;
	new kicsinalja[128];

	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
	}
	SFM(jatekos,COL_MKEK,"%s meg szeretne szondázni ((/elfogad szondázás)).",kicsinalja);
	SCM(playerid,COL_MKEK,"Szondázás kérelem elküldve várj amíg elfogadja!");
	return true;
}
CMD:horgaszat(playerid,params[])
{
 	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"/horgászat [Kezd / Lead]");
		return 1;
	}
	new mi[32];
	sscanf(params,"s[32]",mi);
	if(egyezik(mi,"Kezd"))
	{
	    if(Fishing[playerid] == 1) return SCM(playerid, COL_LRED, "Várjál a kapásra...");

		if(!IsPlayerInRangeOfPoint(playerid,15,381.8778,-2074.4036,7.8359) && !IsPlayerInRangeOfPoint(playerid,15,386.8599,-2084.4265,7.8359))
		{
			new random1 = Rand(1,2);
			switch(random1)
			{
				case 1:
				{
					SetPlayerCheckpoint(playerid,381.8778,-2074.4036,7.8359,15);
				}
				case 2:
				{
					SetPlayerCheckpoint(playerid,386.8599,-2084.4265,7.8359,15);
				}
			}
			SCM(playerid,COL_LRED,"Nem vagy jó helyen!");
			return 1;
		}
		if(PlayerInfo[playerid][pHal] >= 1000) return SCM(playerid, COL_LRED,"Túl sok hal van már nállad!");
		
		new ido = Rand(10000,30000);
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
		HorgaszasAnim(playerid);
		HorgaszasAnim(playerid);
		HorgaszasAnim(playerid);
		Fishing[playerid] = 1;
		HuzzadVaze[playerid] = 0;
		GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~w~Bedobtad a Botot, várj a~g~kapásra...", 10000, 3);
		defer MOST[ido](playerid);
		return 1;
	}
	if(egyezik(mi,"Lead"))
	{
		if(!IsPlayerInRangeOfPoint(playerid,5,2474.0359,-2708.9050,3.0000))
		{
			SetPlayerCheckpoint(playerid,2474.0359,-2708.9050,3.0000,15);
			SCM(playerid,COL_LRED,"Nem vagy jó helyen!");
			return 1;
		}
		if(PlayerInfo[playerid][pHal] < 1000) return SCM(playerid,COL_LRED,"Nincs elég hal nállad! [1.000Kg Minimum!]");
		new osszeg = Rand(150,500);
		SFM(playerid,COL_MKEK,"Rendben %d $ kapsz a halakért!",osszeg);
		PlayerInfo[playerid][pHal] -= 1000;
		GiveMoney(playerid,osszeg);
		return 1;
	}
	return 1;
}

CMD:legtobbfirka(playerid,params[])
{
	if(FInfo[PlayerInfo[playerid][pFrakcio]][fLegalis] != FK_LEGAL && FInfo[PlayerInfo[playerid][pFrakcio]][fLegalis] != FK_REND || IsScripter(playerid))
	{
		new ID = LegtobbTag(0);
		new Frakcio = GetFrakcioByTag(ID);
		new Tagszam = LegtobbTag(1);
		if(Tagszam != NINCS)
		{
			SFM(playerid,COL_MKEK,"Bandák: Los Angeles legnépszerûbb bandája jelenleg: %s | %d firkájuk van!",FInfo[Frakcio][fNev],Tagszam);
		}
		return 1;
	}
	return 1;
}

CMD:lemos(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD)
	{
		SCM(playerid,COL_LRED,"Nem vagy Rendõr!");
		return 1;
	}
	new tag;
	new mehet = 0;
	for(new i=0;i<MAX_TAG;i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,5,TagInfo[i][tPoz][0],TagInfo[i][tPoz][1],TagInfo[i][tPoz][2]) && TagInfo[i][tVan] == 1)
		{
			mehet = 1;
			tag = i;
			break;
		}
	}
	new ellenseg;
	foreach(Player, p)
	{
		if(PlayerInfo[p][pFrakcio] == TagInfo[tag][tTulaj])
		{
			ellenseg++;
		}
	}
	if(mehet == 0 || TagInfo[tag][tFestveVan] == 0) return SCM(playerid,COL_LRED,"Nem vagy firka közelében!");
	if(ellenseg < 2) return SCM(playerid,COL_LRED, "Minimum 2 online tag kell az adott bandából a lemosáshoz.");
	defer Firkalemos[15000](playerid,tag);
	Cselekves(playerid,"elkezdett lemosni egy falfirkát",0);
	SCM(playerid,COL_LRED,"Elkezdted lemosni a falfirkát");
	ApplyAnimation(playerid, "SPRAYCAN","spraycan_full",4.0,1,0,0,1,0);
	return 1;
}

CMD:graffiti(playerid,params[])
{
	if(!IsScripter(playerid)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED, "Lerak - Leraksz vele egy graffiti helyet.");
		SCM(playerid,COL_LRED, "DEBUG - Debugolja a graffitit, ha nem engedné ráfújni.");
		SCM(playerid,COL_LRED, "Töröl - Törlid vele ID alapján a graffitit.");
		SCM(playerid,COL_LRED, "Lista - Kilistázza a graffitiket.");
		return 1;
	}
	new mi[32],id;
	sscanf(params,"s[32]D(-1){}",mi,id);
	if(egyezik(mi, "DEBUG"))
	{
		new tag,Float:tavolsag;
		tag = GetClosestTAG(playerid);
		tavolsag = GetDistanceToTAG(playerid,tag);
		if(tavolsag < 5)
		{
			Tag_Lathato(tag,false);
			TagInfo[tag][tFestveVan] = 1;
			TagInfo[tag][tTulaj] = 4;
			TagInfo[tag][tGraffitiObject] = 18659;
			Tag_Lathato(tag,true);
			TagInfo[tag][tKesz] = TAG_FELFESTESIDO;
			TagUpdateAll(tag);
			SCM(playerid,COL_LRED, "Átírva!");
			return 1;
		}
		else
		{
			SCM(playerid,COL_LRED,"Nincs a közeledben graffiti.");

		}
		return 1;
	}
	if(egyezik(mi,"Lista"))
	{
	    for(new i=0;i<MAX_TAG;i++)
	    {
	        if(TagInfo[i][tVan] == 1)
	        {
	            SFM(playerid,COL_MKEK,"ID: %d | Tulajdonos Frakció ID: %d",TagInfo[i][tID],TagInfo[i][tTulaj]);
	        }
		}
		new tag,Float:tavolsag;
		tag = GetClosestTAG(playerid);
		if(tag != -1)
		{
			tavolsag = GetDistanceToTAG(playerid,tag);
			if(tavolsag < 5)
			{
			    SFM(playerid,COL_MKEK,"Legközelebbi graffiti ID-je: %d",TagInfo[tag][tID]);
			}
			else
			{
			    SCM(playerid,COL_LRED,"Nincs a közeledben Graffiti!");
			}
		}
	    return 1;
	}
	if(egyezik(mi,"Töröl"))
	{
		if(id == -1)
		{
			SCM(playerid,COL_LRED,"IDje?");
			return 1;
		}
		if(TagInfo[id][tVan] == 0) return SCM(playerid,COL_LRED,"Nincs ilyen Graffiti!");
		TagInfo[id][tPoz][0] = 0;
		TagInfo[id][tPoz][1] = 0;
		TagInfo[id][tPoz][2] = -50;
		TagInfo[id][tRot][0] = 0;
		TagInfo[id][tRot][1] = 0;
		TagInfo[id][tRot][2] = 0;
		TagInfo[id][tGraffitiObject] = 0;
		TagInfo[id][tTulaj] = 0;
		TagInfo[id][tVan] = 0;
		if(IsValidDynamicObject(TagInfo[id][tObject]))
		{
			DestroyDynamicObject(TagInfo[id][tObject]);
		}
		DestroyDynamic3DTextLabel(TagInfo[id][tText]);
		SFM(playerid,COL_LRED,"Törölve a %d számú Graffiti!",id);
		doQuery("DELETE FROM `"#MYSQL_SPRAY_TABLA"` WHERE ID = '%d'", id);
		SFM(playerid,COL_LRED,"%d",id);
		return 1;
	}
	if(egyezik(mi, "Lerak"))
	{
		new Float:X,Float:Y,Float:Z,Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		GraffitiObjectLerakas[playerid] = CreateDynamicObject(18659, X,Y,Z, 0.00, 0.00, 0.00);
		EditDynamicObject(playerid, GraffitiObjectLerakas[playerid]);
		return 1;
	}
	return 1;
}


CMD:vasazas(playerid,params[])
{
	if(FInfo[PlayerInfo[playerid][pFrakcio]][fLegalis] == FK_LEGAL || FInfo[PlayerInfo[playerid][pFrakcio]][fLegalis] == FK_REND)
	{
		SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
		return 1;
	}
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"Használata: /vasazas [fel/le/felrak/levesz/lead]");
		return 1;
	}
	new mit[32];
	sscanf(params,"s[32]",mit);
	if(egyezik(mit, "lead"))
	{
		if(VasNala[playerid] != -1) return SCM(playerid,COL_MKEK, "Van nálad vas, rakd le ember!");
		new kocsiidx = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, kocsiidx) < 5)
		{
			if(GetVehicleModel(kocsiidx) == 478)
			{
				if(IsPlayerInRangeOfPoint(playerid,5.0,2128.1072,-1986.2361,13.6039))
				{
					if(KocsinDarab[kocsiidx] == 0) return SCM(playerid,COL_LRED,"Nincs a kocsin semmi!");
					
					new lomimunkaa = KocsinDarab[kocsiidx] * Rand(2, VASSZORZO);
					new penz = Rand(KocsinDarab[kocsiidx]*2,KocsinDarab[kocsiidx]*3);
					
					GiveMoney(playerid,penz);
					PlayerInfo[playerid][pVas] += lomimunkaa;
					SendFormatMessage(playerid, COLOR_GREEN,"Leadtad a méhbe a vasat. Bezúzásra került. %d Kg vasat szereztél belõle és %d $!",lomimunkaa,penz);
					LomisTorol(kocsiidx);
				}
				else
				{
					SetPlayerCheckpoint(playerid,2128.1072,-1986.2361,13.6039,5.0);
					SCM(playerid,COL_MKEK, "Nem vagy a vastelepen.");
				}
			}
			else
			{
				SCM(playerid,COL_MKEK, "Ez nem lomis Kocsi!");
			}
		}
		else
		{
			SCM(playerid,COL_MKEK, "Nincs melleted a lomis kocsi!");
		}
	}
	if(egyezik(mit, "fel"))
	{
		if(VasNala[playerid] != -1)
			return SCM(playerid,COL_MKEK, "Már van nálad vas!");

		new ureskez = UresKez(playerid);
		if(ureskez == -1) return SCM(playerid,COL_MKEK, "Tele a kezed! hogy vennéd fel azt a sz@rt?");
		for(new i = 0; i < MAX_VAS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 4.0,Vas[i][Vasx], Vas[i][Vasy], Vas[i][Vasz]) && Vas[i][vasVan] == 1)
			{
				VasNala[playerid] = ureskez;
				if(Vas[i][vasModelID] == 1208)//Mosógép
				{
					VasPlayerID[playerid] = 1208;
					SetPlayerAttachedObject(playerid,ureskez,1208,6,0.29,0.14,-0.30,0.0,0.0,-222.0,0.94,0.89,0.76);
				}
				else if(Vas[i][vasModelID] == 1738)//Radiátor
				{
					VasPlayerID[playerid] = 1738;
					SetPlayerAttachedObject(playerid,ureskez,1738,6,0.05,0.22,-0.05,1.0,0.0,0.0,0.88,1.00,0.70);
				}
				else if(Vas[i][vasModelID] == 1790)//Rádió
				{
					VasPlayerID[playerid] = 1790;
					SetPlayerAttachedObject(playerid,ureskez,1790,6,-0.05,0.28,0.14,241.0,401.0,100.0,0.94,0.88,1.33);
				}
				else if(Vas[i][vasModelID] == 1791)//TV
				{
					VasPlayerID[playerid] = 1791;
					SetPlayerAttachedObject(playerid,ureskez,1791,6,0.24,0.18,-0.28,-130.0,-110.0,-324.0,0.67,0.67,1.00);
				}
				else if(Vas[i][vasModelID] == 2597)//NAGY TV <<< kiszedve
				{
					VasPlayerID[playerid] = 2597;
					SetPlayerAttachedObject(playerid,ureskez,2597,6,0.00,0.00,-0.30,-25.0,-3.0,-26.0,1.00,1.00,1.00);
				}
				VasTorol(Vas[i][vasVasID]);
				ApplyAnimation(playerid,"BOX","bxhipwlk",1300,1,1,1,1,5000);
				ApplyAnimation(playerid,"BOX","bxhipwlk",1300,1,1,1,1,5000);
				ApplyAnimation(playerid,"BOX","bxhipwlk",1300,1,1,1,1,5000);
				SCM(playerid,COL_MKEK, "Felvetted az ócskavasat! Gyûjtögess tovább!");
			}
		}
	}
	if(egyezik(mit, "le"))
	{
		if(VasNala[playerid] == -1)
			return SCM(playerid,COL_MKEK, "Nincs nálad ócskavas! Mit akarsz lerakni?");
			
		LerakVas(playerid);
		SCM(playerid,COL_MKEK, "Leraktad az ócskavasad a földre!");
		return 1;
	}
	else if(egyezik(mit, "felrak"))
	{
		if(VasNala[playerid] == -1)
			return SCM(playerid,COL_MKEK, "Nincs nálad ócskavas! Mit akarsz felrakni?");
			
		new kocsiidx = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, kocsiidx) < 3.8)
		{
			if(GetVehicleModel(kocsiidx) == 478)
			{
				if(VasPlayerID[playerid] == 1738)//Radiátor  2
				{
					if(Radiator[kocsiidx] < 2)
					{
						KocsinDarab[kocsiidx] ++;
						TorlesPlayerObject(playerid);
						if(Radiator[kocsiidx] == 1)
						{
							KoicsraObject[1][kocsiidx] = CreateDynamicObject(1738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[1][kocsiidx], kocsiidx, -0.514999, -1.884998, 0.424999, 14.070000, -270.043914, -90.047828);//Radiátor  2
						}
						if(Radiator[kocsiidx] == 0)
						{
							KoicsraObject[0][kocsiidx] = CreateDynamicObject(1738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[0][kocsiidx], kocsiidx, -0.844999, -1.884998, 0.419999, 14.070000, -270.043914, -90.047828);//Radiátor  1
						}
						KocsinObject[kocsiidx] ++;
						Radiator[kocsiidx] ++;
						return 1;
					}
					else
					{
						SCM(playerid,COL_MKEK, "Maximum 2 darab radiátor fér fel.");
						return 1;
					}
				}
				if(VasPlayerID[playerid] == 1208)
				{
					if(Mosogep[kocsiidx] < 2)
					{
						KocsinDarab[kocsiidx] ++;
						TorlesPlayerObject(playerid);
						if(Mosogep[kocsiidx] == 0)
						{
							KoicsraObject[3][kocsiidx] = CreateDynamicObject(1208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[3][kocsiidx], kocsiidx, -0.069999, -2.215003, -0.049999, 0.000000, 0.000000, -89.944450);//Mosógép 1
						}
						if(Mosogep[kocsiidx] == 1)
						{
							KoicsraObject[2][kocsiidx] = CreateDynamicObject(1208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[2][kocsiidx], kocsiidx, 0.569999, -2.255004, -0.044999, 0.000000, 0.000000, 0.000000);//mosógép 1
						}
						KocsinObject1[kocsiidx] ++;
						Mosogep[kocsiidx] ++;
						return 1;
					}
					else
					{
						SCM(playerid,COL_MKEK, "Maximum 2 darab mosógép fér fel.");
						return 1;
					}
				}
				if(VasPlayerID[playerid] == 1790)//Videó 3
				{
					if(Video[kocsiidx] < 3)
					{
						KocsinDarab[kocsiidx] ++;
						TorlesPlayerObject(playerid);
						if(Video[kocsiidx] == 2)
						{
							KoicsraObject[6][kocsiidx] = CreateDynamicObject(1790, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[6][kocsiidx], kocsiidx, -0.674999, -0.684999, 0.285, 0.000000, 0.000000, 0.000000);//video 3
						}
						if(Video[kocsiidx] == 1)
						{
							KoicsraObject[5][kocsiidx] = CreateDynamicObject(1790, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[5][kocsiidx], kocsiidx, -0.674999, -0.684999, 0.15, 0.000000, 0.000000, 0.000000);//Videó 2
						}
						if(Video[kocsiidx] == 0)
						{
							KoicsraObject[4][kocsiidx] = CreateDynamicObject(1790, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[4][kocsiidx], kocsiidx, -0.674999, -0.684999, 0.015000, 0.000000, 0.000000, 0.000000);
						}
						KocsinObject2[kocsiidx] ++;
						Video[kocsiidx] ++;
						return 1;
					}
					else
					{
						SCM(playerid,COL_MKEK, "Maximum 3 darab videó fér fel.");
						return 1;
					}
				}

				if(VasPlayerID[playerid] == 1791)
				{
					if(Tv[kocsiidx] < 2)
					{
						KocsinDarab[kocsiidx] ++;
						TorlesPlayerObject(playerid);
						if(Tv[kocsiidx] == 1)
						{
							KoicsraObject[8][kocsiidx] = CreateDynamicObject(1791, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[8][kocsiidx], kocsiidx, -0.564999, -1.084999, -0.090000, 0.000000, 0.000000, 86.027976); //O,M:: 1791 | tv2
						}
						if(Tv[kocsiidx] == 0)
						{
							KoicsraObject[9][kocsiidx] = CreateDynamicObject(1791, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[9][kocsiidx], kocsiidx, -1.009999, -1.084999, -0.085000, 0.000000, 0.000000, 90.047966);
						}
						KocsinObject3[kocsiidx] ++;
						Tv[kocsiidx] ++;
						return 1;
					}
					else
					{
						SCM(playerid,COL_MKEK, "Maximum 2 darab kis TV fér fel.");
						return 1;
					}
				}

				if(VasPlayerID[playerid] == 2597)// Álvány 3
				{
					if(Alvany[kocsiidx] < 3)
					{
						KocsinDarab[kocsiidx] ++;
						TorlesPlayerObject(playerid);
						if(Alvany[kocsiidx] == 2)
						{
							KoicsraObject[12][kocsiidx] = CreateDynamicObject(2597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[12][kocsiidx], kocsiidx, 0.339999, -1.704998, 0.160000, -2.009998, -11.055000, 19.094997); //O,M:: 2597 Álvány 3
						}
						if(Alvany[kocsiidx] == 1)
						{
							KoicsraObject[11][kocsiidx] = CreateDynamicObject(2597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[11][kocsiidx], kocsiidx, 0.264999, -1.319998, 0.160000, -2.009998, -11.055000, 19.094997); //O,M:: 2597 | Vasalvany_2()()
						}
						if(Alvany[kocsiidx] == 0)
						{
							KoicsraObject[10][kocsiidx] = CreateDynamicObject(2597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[10][kocsiidx], kocsiidx, -0.039999, -1.554998, 0.160000, -2.009998, -11.055000, 19.094997); //O,M:: 2597 | Vasalvany_1()()
						}
						KocsinObject4[kocsiidx] ++;
						Alvany[kocsiidx] ++;
						return 1;
					}
					else
					{
						SCM(playerid,COL_MKEK, "Maximum 3 darab álvány fér fel.");
						return 1;
					}
				}
			}
			else
			{
				SCM(playerid,COL_MKEK, "Ez, nem lomtalanítós kocsi.");
			}
		}
		else
		{
			SCM(playerid,COL_MKEK, "Túl messze van a lomis kocsi.");
		}
	}
	return 1;
}


CMD:cctv(playerid,params[])
{
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/cctv [Be/Ki]");
		if(Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Létrehoz + név || ÓVATOSAN!!");
			SCM(playerid,COL_LRED,"Flymodeban használd, ne baszd el!");
			return 1;
		}
		return 1;
	}
	new mi[32],Nev[32];
	sscanf(params,"s[32]s[32]",mi,Nev);
	if(egyezik(mi,"Létrehoz"))
	{
		if(!Admin(playerid,FOADMIN_SZINT)) return 1;
		new Float:X,Float:Y,Float:Z,Float:A,Interior,VW;
		if(isnull(Nev))
		{
			SCM(playerid,COL_MKEK,"Neve?");
			return 1;
		}
		GetPlayerPos(playerid,X,Y,Z);
		GetPlayerFacingAngle(playerid,A);
		Interior = GetPlayerInterior(playerid);
		VW = GetPlayerVirtualWorld(playerid);
		AddCCTV(Nev,X,Y,Z,A,Interior,VW);
		SFM(playerid,COL_MKEK,"Hozzá adtad a %s nevû kamera pontot a Rendõrség CCTV listájához",Nev);
		doQuery("INSERT INTO `"#MYSQL_KAMERA_TABLA"` (Nev, X, Y, Z, A, Interior, VW, Lerako) VALUES ('%s', '%f','%f','%f','%f','%d','%d','%s')",Nev,X,Y,Z,A,Interior,VW,JatekosNev(playerid));
		return 1;
	}
	if(egyezik(mi,"be"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		{
			SCM(playerid,COL_LRED,"Nem vagy Rendõr/Katona/FBI Tag!");
			return 1;
		}
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 215.5018,111.3306,1003.2188))
		{
			SCM(playerid,COL_LRED,"A rendõrség kameraszobájában kell lenned.");
			SetPlayerCheckpoint(playerid,215.5018,111.3306,1003.2188,5.0);
			return 1;
		}
		if(TotalCCTVS == 0) return SCM(playerid,COL_LRED,"Nincs létrehozva kamerapozíció.");
		new uzenets[512];
		for(new i=0;i<TotalCCTVS;i++)
		{
			if(i == 0)
			{
				format(uzenets,512,"%s",CameraName[i]);
			}
			else
			{
				format(uzenets,512,"%s\n%s",uzenets,CameraName[i]);
			}
		}
		ShowPlayerDialog(playerid,DIALOG_CAMERA,DIALOG_STYLE_LIST,"Camerák",uzenets,"OK","Mégse");
		return 1;
	}
	if(egyezik(mi,"ki"))
	{
		if(CurrentCCTV[playerid] > -1)
		{
			SetPos(playerid, 240.3513,81.1932,1005.0391);
			SetPlayerInterior(playerid,6);
			UnFreeze(playerid);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
			stop PlayerTimers[playerid][PT_OPUP];
			SetCameraBehindPlayer(playerid);
			CurrentCCTV[playerid] = -1;

			SCM(playerid,COL_MKEK,"CCTV Kamera Kikapcsolva!");
			return 1;
		}
		else
		{
			SCM(playerid,COL_LRED,"Nem is nézel kamerát...");
		}
	}
	return 1;
}

CMD:garazs(playerid,params[])
{
	new
	    param[64];

	if(sscanf(params, "s[64]{}", param))
	{
		SCM(playerid, COL_MKEK, "Használat: /garázs [ Paraméterek ]");
		if(!Admin(playerid, 3))
			SCM(playerid, COL_MKEK, "[Paraméterek]: Be, Ki, Zár, Vesz, Elad");
		else
		{
		    SCM(playerid, COL_MKEK, "[Paraméterek]: Be, Ki, Zár, Vesz, Elad");
			SCM(playerid, COL_MKEK, "[Admin Paraméterek]: FõAdmin(1339): Új, Töröl | Admin(3): Goto, Zár");
		}
		return true;
	}
	if(egyezik(param,"zar") || egyezik(param, "zár"))
	{
	    new garazsnal = Garazsnal(playerid);
	    if(garazsnal == NINCS)
		{
			garazsnal = Garazsban(playerid);
			if(garazsnal == NINCS)
				return SCM(playerid, COL_MKEK, "Nem vagy garázsnál / garázsban!");
		}
		if(GetPlayerDistanceFromPoint(playerid, posArr{gInfo[garazsnal][gPozBe]}) > 6.0)
		    return SCM(playerid, COL_LRED, "Nem vagy garázs közelében!");
		
	    new bool:ove = false;
		if(gInfo[garazsnal][gHaz] != NINCS)
  		{
			new i = NINCS;
			for(;++i < MAX_HAZ_JARMU;)
			{
				if(PlayerInfo[playerid][pHazKulcs][i] == gInfo[garazsnal][gHaz])
				{
					ove = true;
					break;
				}
			}
  		}
  		else if(gInfo[garazsnal][gTulaj] != NINCS)
		{
		    if(gInfo[garazsnal][gTulaj] == SQLID(playerid))
		        ove = true;
		}
		else if(Admin(playerid, 3))
		    ove = true;
		else
		    return SCM(playerid, COL_MKEK, "Ez a garázs eladó!");
		    
		if(ove)
		{
	        if(gInfo[garazsnal][gZarva] == 1)
	        {
	            gInfo[garazsnal][gZarva] = 0;
	            GameTextForPlayer(playerid, "~w~Garázs ~g~Nyitva", 5000, 6);
	        }
	        else
	        {
	            gInfo[garazsnal][gZarva] = 1;
	            GameTextForPlayer(playerid, "~w~Garázs ~r~Zárva", 5000, 6);
	        }
	        doQuery("UPDATE `"#MYSQL_GARAZS_TABLA"` SET zarva = '%d' WHERE id='%d'", gInfo[garazsnal][gZarva], gInfo[garazsnal][gID]);
		}
		else
		    return SCM(playerid, COL_MKEK, "Ez a garázs nem a tied!");
	}
	else if(egyezik(param, "id"))
	{
	    if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

        new garazsnal = Garazsnal(playerid);
	    if(garazsnal == NINCS)
		{
			garazsnal = Garazsban(playerid);
			if(garazsnal == NINCS)
				return SCM(playerid, COL_MKEK, "Nem vagy garázsnál / garázsban!");
		}
		SFM(playerid, COL_MKEK, "A legközelebbi garázs id-je: %d", garazsnal);
	}
	else if(egyezik(param, "pos"))
	{
	    if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COL_MKEK, "Jármûben használd és úgy állj oda, ahogy szeretnéd, hogy KITELEPORTÁLJA!");
		    
        new garazs;
	    if(sscanf(params,"{s[64]}d", garazs))
	        return SCM(playerid, COL_MKEK, "/garázs bepos [Garázs ID]");

        if(garazs < 0 || garazs >= MAX_GARAZS || !gInfo[garazs][gVan])
		    return SCM(playerid, COL_MKEK, "Nincs ilyen garázs!");
		    
        DestroyDynamicPickup(gInfo[garazs][gPickup]);
        DestroyDynamic3DTextLabel(gInfo[garazs][gText]);

        new Float:x, Float:y, Float:z, Float:angle;
        new kocsi = GetPlayerVehicleID(playerid);
        GetVehiclePos(kocsi, x, y, z);
        GetVehicleZAngle(kocsi, angle);
        
        gInfo[garazs][gPozBe][0] = x;
	    gInfo[garazs][gPozBe][1] = y;
	    gInfo[garazs][gPozBe][2] = z;
	    gInfo[garazs][gPozBe][3] = angle;
	    gInfo[garazs][gZarva] = 1;
	    gInfo[garazs][gPickup] = CreateDynamicPickup(19132, 23, x, y, z, 0, 0, -1);
	    gInfo[garazs][gText] = CreateDynamic3DTextLabel("[GARÁZS]\n{FF6A00}/garázs be",COLOR_WHITE,x, y, z,DEFAULT_LABEL_DISTANCE);
	    
        SCM(playerid, COL_MKEK, "Garázs áthelyezve!");
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s áthelyezett egy garázst! ID:%d", JatekosNev(playerid), garazs);
	}
	else if(egyezik(param, "töröl") || egyezik(param, "torol"))
	{
	    if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
	    new garazsban = Garazsban(playerid);
	    if(garazsban != NINCS) return SCM(playerid, COL_MKEK, "Garázsban nem használhatod!");
	    
	    new garazs;
	    if(sscanf(params,"{s[64]}d", garazs))
	        return SCM(playerid, COL_MKEK, "/garázs töröl [Garázs ID]");

		if(garazs < 0 || garazs >= MAX_GARAZS || !gInfo[garazs][gVan])
		    return SCM(playerid, COL_MKEK, "Nincs ilyen garázs!");
		    

        DestroyDynamicPickup(gInfo[garazs][gPickup]);
        DestroyDynamic3DTextLabel(gInfo[garazs][gText]);
        gInfo[garazs][gVan] = false;
        Iter_Remove(Garazsok, garazs);
        doQuery("DELETE FROM `"#MYSQL_GARAZS_TABLA"` WHERE id='%d'", gInfo[garazs][gID]);
        SCM(playerid, COL_MKEK, "Garázs törölve!");
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s törölt egy garázst! ID:%d", JatekosNev(playerid), garazs);
	}
	else if(egyezik(param, "elad"))
	{
	    new garazsnal = Garazsnal(playerid);
	    if(garazsnal == NINCS || GetPlayerDistanceFromPoint(playerid, posArr{gInfo[garazsnal][gPozBe]}) > 6.0) return SCM(playerid, COL_MKEK, "Nem vagy garázs bejáratánál");
	    new bool:ove = false;
		if(gInfo[garazsnal][gHaz] != NINCS)
			return SCM(playerid, COL_MKEK, "Ezt a garázst csak a házaddal együtt adhatod el!");
			
  		else if(gInfo[garazsnal][gTulaj] != NINCS)
		{
		    if(gInfo[garazsnal][gTulaj] == SQLID(playerid))
		        ove = true;
		}

		if(ove)
		{
	        gInfo[garazsnal][gTulaj] = NINCS;
	        doQuery("UPDATE `"#MYSQL_GARAZS_TABLA"` SET zarva = '%d' WHERE id='%d'", gInfo[garazsnal][gZarva], gInfo[garazsnal][gID]);
	        SCM(playerid, COL_MKEK, "Garázs eladva! Az eredeti értékének a felét kaptad érte!");
	        GiveMoney(playerid, (gInfo[garazsnal][gAr]/2));
		}
		else
		    return SCM(playerid, COL_MKEK, "Ez a garázs nem a tied!");
		    
	}
	else if(egyezik(param, "vesz"))
	{
	    new garazsnal = Garazsnal(playerid);
	    if(garazsnal == NINCS || GetPlayerDistanceFromPoint(playerid, posArr{gInfo[garazsnal][gPozBe]}) > 6.0) return SCM(playerid, COL_MKEK, "Nem vagy garázs bejáratánál");
	    if(gInfo[garazsnal][gHaz] == NINCS && gInfo[garazsnal][gTulaj] == NINCS)
	    {
	        if(PlayerInfo[playerid][ppenz] < gInfo[garazsnal][gAr])
	            return SFM(playerid, COL_MKEK, "%s$ készpénzben!", FN(gInfo[garazsnal][gAr]));
	            
			GiveMoney(playerid, -gInfo[garazsnal][gAr]);
			gInfo[garazsnal][gTulaj] = SQLID(playerid);
			
			doQuery("UPDATE `"#MYSQL_GARAZS_TABLA"` SET tulaj = '%d' WHERE id='%d'", gInfo[garazsnal][gTulaj], gInfo[garazsnal][gID]);
			
			SCM(playerid, COL_MKEK, "Garázs megvéve! Használd egészséggel!");
	    }
	    else
	        return SCM(playerid, COL_MKEK, "Ez a garázs nem eladó!");
	}
	else if(egyezik(param,"be"))
	{
	    new garazsnal = Garazsnal(playerid);
	    if(garazsnal == NINCS || GetPlayerDistanceFromPoint(playerid, posArr{gInfo[garazsnal][gPozBe]}) > 6.0) return SCM(playerid, COL_MKEK, "Nem vagy garázs bejáratánál");
	    if(gInfo[garazsnal][gZarva] == 1) return SCM(playerid, COL_MKEK, "A garázs zárva");
	    new gtipus = gInfo[garazsnal][gTipus];
	    
     	
		SetVirtualWorld(playerid,gInfo[garazsnal][gID]);
		SetInterior(playerid,floatround(g_GarazsInteriorok[gtipus][4]));
				
		if(!IsPlayerInAnyVehicle(playerid))
			SetPlayerPos(playerid,g_GarazsInteriorok[gtipus][0],g_GarazsInteriorok[gtipus][1],g_GarazsInteriorok[gtipus][2]);
		else
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    SetVehicleVirtualWorld(vehicle, gInfo[garazsnal][gID]);
		    LinkVehicleToInterior(vehicle, floatround(g_GarazsInteriorok[gtipus][4]));
		    foreach(Player, i)
	 		{
			 	if(GetPlayerVehicleID(i) != vehicle || playerid == i) continue;

			 	SetVirtualWorld(i,gInfo[garazsnal][gID]);
				SetInterior(i,floatround(g_GarazsInteriorok[gtipus][4]));
			}
		    SetVehiclePos(vehicle, g_GarazsInteriorok[gtipus][0], g_GarazsInteriorok[gtipus][1], g_GarazsInteriorok[gtipus][2]);
		    SetVehicleZAngle(vehicle, g_GarazsInteriorok[gtipus][3]);
		}
	}
	else if(egyezik(param, "goto"))
	{
	    if(!Admin(playerid, 3))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new garazsban;
		if(sscanf(params, "{s[64]}d", garazsban))
		    return SCM(playerid, COL_MKEK, "Használat: /garázs goto [ID]");
		    
		if(garazsban < 0 || garazsban >= MAX_GARAZS || !gInfo[garazsban][gVan])
		    return SCM(playerid, COL_MKEK, "Nincs ilyen garázs");
		    
	    SetVirtualWorld(playerid,0);
		SetInterior(playerid,0);

		if(!IsPlayerInAnyVehicle(playerid))
			SetPlayerPos(playerid, gInfo[garazsban][gPozBe][0], gInfo[garazsban][gPozBe][1], gInfo[garazsban][gPozBe][2]);
		else
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    SetVehicleVirtualWorld(vehicle, 0);
		    LinkVehicleToInterior(vehicle, 0);
		    foreach(Player, i)
	 		{
			 	if(GetPlayerVehicleID(i) != vehicle || playerid == i) continue;

			 	SetVirtualWorld(i, 0);
				SetInterior(i, 0);
			}
		    SetVehiclePos(vehicle, gInfo[garazsban][gPozBe][0], gInfo[garazsban][gPozBe][1], gInfo[garazsban][gPozBe][2]);
		    SetVehicleZAngle(vehicle, gInfo[garazsban][gPozBe][3]);
		}
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s elteleportált egy garázshoz! ID: %d", JatekosNev(playerid), garazsban);
	}
	else if(egyezik(param, "ki"))
	{
	    new garazsban = Garazsban(playerid);
	    if(garazsban == NINCS) return SCM(playerid, COL_MKEK, "Nem vagy garázsban");
	    if(gInfo[garazsban][gZarva] == 1) return SCM(playerid, COL_MKEK, "A garázs zárva");
	    
	    SetVirtualWorld(playerid,0);
		SetInterior(playerid,0);

		if(!IsPlayerInAnyVehicle(playerid))
			SetPlayerPos(playerid, gInfo[garazsban][gPozBe][0], gInfo[garazsban][gPozBe][1], gInfo[garazsban][gPozBe][2]);
		else
		{
		    new vehicle = GetPlayerVehicleID(playerid);
		    SetVehicleVirtualWorld(vehicle, 0);
		    LinkVehicleToInterior(vehicle, 0);
		    foreach(Player, i)
	 		{
			 	if(GetPlayerVehicleID(i) != vehicle || playerid == i) continue;

			 	SetVirtualWorld(i, 0);
				SetInterior(i, 0);
			}
		    SetVehiclePos(vehicle, gInfo[garazsban][gPozBe][0], gInfo[garazsban][gPozBe][1], gInfo[garazsban][gPozBe][2]);
		    SetVehicleZAngle(vehicle, gInfo[garazsban][gPozBe][3]);
		}
	}
	else if(egyezik(param, "uj") || egyezik(param, "új"))
	{
	    if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
		if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COL_MKEK, "Jármûben használd és úgy állj oda, ahogy szeretnéd, hogy KITELEPORTÁLJA!");

		new tipus, haz, tulajdonos, ara;
		if(sscanf(params, "{s[64]}dddd", tipus, haz, tulajdonos, ara))
		{
			SCM(playerid, COL_MKEK, "/garázs új [típus(1- 3)] [ház ID] [tulaj SQLid] [Ár]");
			SCM(playerid, COL_MKEK, "Ház: Ha csak a ház tulajdonosa veheti meg, irj id-t, ha nem: -1");
			SCM(playerid, COL_MKEK, "Tulaj: Ha -1et írsz megvehetõ lesz");
			return 1;
		}
		if(tipus < 1 || tipus > 3) return SCM(playerid, COL_MKEK, "Típus 1 - 2, vagy 3!!!");
		if(ara < 10000) return SCM(playerid, COL_MKEK, "Minimum 10,000$ !");
		
		new Float:pPos[4];
		new vehicle = GetPlayerVehicleID(playerid);
		GetVehiclePos(vehicle, posArr{pPos});
		GetVehicleZAngle(vehicle, pPos[3]);
		
		new id = UjGarazs(tipus, posArr{pPos}, pPos[3], haz, tulajdonos, ara);
		if(id != NINCS)
		{
		    SCM(playerid, COL_MKEK, "Garázs lerakva!");
		    AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s lerakott egy új garázst! Belsõ: %d", JatekosNev(playerid), tipus);
  		}
		else
		    SCM(playerid, COL_MKEK, "Nem rakható le több garázs!");
		
	}
	return 1;
}
CMD:alruha(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_FBI)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 222.598,183.589,1003.031))
			return SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");

		new skinek[299];
		for(new i=0;i<299;i++)
		{
			if(i == 127) continue;
			skinek[i] = i;
		}
		ShowModelSelectionMenuEx(playerid, skinek, sizeof( skinek ), "", FBI_SKIN_VALASZTAS, .dialogBGcolor = 512819010, .previewBGcolor = 80);
	}
	else SCM(playerid, COL_LRED, "Nem használhatod!");
	
	return 1;
}

CMD:undercover(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA && PlayerInfo[playerid][prang] >= 2)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 628.9559,-551.8656,-22.4561))
		{
			if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
			{
				PlayerInfo[playerid][pCP] = CP_GPS;
				SetPlayerCheckpoint(playerid, 628.9559,-551.8656,-22.4561, 5.0);
			}
			SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
			return true;
		}
		new skinek[299];
		for(new i=0;i<299;i++)
		{
			if(i == 127) continue;
			skinek[i] = i;
		}
		ShowModelSelectionMenuEx(playerid, skinek, sizeof( skinek ), "", FBI_SKIN_VALASZTAS, .dialogBGcolor = 512819010, .previewBGcolor = 80);
	}
	return 1;
}
CMD:alnev(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_FBI || IsHitman(playerid))
	{
		if(PlayerInfo[playerid][pAlnevbe] == true)
		{
			PlayerInfo[playerid][pAlnevbe] = false;
			SCM(playerid,COL_VZOLD,"Álnév kikapcsolva!");
			SetPlayerName(playerid,PlayerInfo[playerid][pNev]);
			return 1;
		}
		if(isnull(params))
		{
			SCM(playerid,COL_MKEK,"Használata: /álnév [Név]");
			return 1;
		}
		new nev[128];
		sscanf(params,"s[128]",nev);
		if(strlen(nev) < 4 || strlen(nev) > 20) return SCM(playerid,COL_LRED,"Maximum 20 karakter!");
		PlayerInfo[playerid][pAlnevbe] = true;
		strmid(PlayerInfo[playerid][pAlnev],nev,0,strlen(nev),MAX_PLAYER_NAME);
		SFM(playerid,COL_VZOLD,"Az új álneved : %s",nev);
		SetPlayerName(playerid,nev);
		//SetPlayerName(playerid,PlayerInfo[playerid][pAlnev]);
		if(!IsHitman(playerid) && !IsScripter(playerid))
			AdminUzenet(COLOR_NAR, 1,"[Álnév] - %s => %s",PlayerInfo[playerid][pNev],PlayerInfo[playerid][pAlnev]);
	}
	return true;
}
CMD:setsign(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA || PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[playerid][pFrakcio] == FRAKCIO_LAFD || IsScripter(playerid))
	{
	    if(!OOC_Ellenorzes(playerid, "/setsign", params)) return false;
		
		if(PlayerInfo[playerid][prang] < 2)
			return SCM(playerid, COL_LRED, "Minimum rang 2");
			
		if(isnull(params))
		{
			SCM(playerid,COL_LRED,"HASZNÁLAT: /setsign [név]");
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COL_LRED, "Nem vagy jármûben!");
			
		new kocsi = GetPlayerVehicleID(playerid);
		if(IsValidDynamic3DTextLabel(sign[kocsi]))
		{
			DestroyDynamic3DTextLabel(sign[kocsi]);
		}
		sign[kocsi] = CreateDynamic3DTextLabel( params, -1, -0.599999,-3.099999,-0.100000, 50.0, _, kocsi );
		
		SCM(playerid, COL_LRED, "Sign felrakva!");
	}
	return 1;
}

CMD:setsignoff(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA || PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSPD || IsScripter(playerid))
	{
		if(PlayerInfo[playerid][prang] < 2)
			return SCM(playerid, COL_LRED, "Minimum rang 2");
		if(!IsPlayerInAnyVehicle(playerid))
			return false;
		new kocsi = GetPlayerVehicleID(playerid);
		if ((GetVehicleModel(kocsi) == 596) || (GetVehicleModel(kocsi) == 597) || (GetVehicleModel(kocsi) == 598))
		{
			DestroyDynamic3DTextLabel( sign[kocsi] );
		}
	}
	return 1;
}

CMD:harcstilus(playerid,params[])
{
	if(sscanf(params,"s[32]{}",params)) return SCM(playerid,COL_MKEK,"Használat: /harcstílus [ tanul / vált ]");
	else if(!strcmp(params,"tanul",true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 50.0, 764.8914,5.5307,1000.7176) || GetPlayerInterior(playerid) != 5)
			return SCM(playerid, COL_LRED, "Nem vagy az edzõterembe!");

		if( PlayerInfo[playerid][pHarcstilusTanul] )
		    return SCM(playerid, COL_LRED, "Már tanulsz egy stílust.");

		ShowPlayerDialog(playerid, DIALOG_HTANUL, 2, "Harcstílusok", "Box (2500 $)\nGrabkick(3500 $)\nElbow(4000 $)\nKungfu(5000 $)\nKneehead(6000 $)", "Tanul", "Mégse");
	}
	else if(!strcmp(params,"vált",true) || !strcmp(params,"valt",true))
	{
		ShowPlayerDialog(playerid, DIALOG_HVALT, 2, "Harcstílusok", "Box\nGrabkick\nElbow\nKungfu\nKneehead\nNormál", "Vált", "Mégse");
	}
	return true;
}

CMD:shotgun(playerid,params[])
{
	new kocsi = GetClosestVehicle(playerid);
	if(GetDistanceToVehicle(playerid, kocsi) < 3)
	{
		if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA || PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSPD)
		{
			if(vInfo[kocsi][vMunka] == FRAKCIO_KATONA || vInfo[kocsi][vMunka] == FRAKCIO_LSPD)
			{
				if(Elso[playerid] == 0)
				{
					Elso[playerid] = 1;
					GiveWeapon(playerid, 25, 50, false, true);
					Cselekves(playerid,"kivett a járõrkocsiból egy Remington 870 Shotgunt");
					return 1;
				}
				if(Elso[playerid] == 1)
				{
					new fegyver = PlayerInfo[playerid][pToltenyek][3];
					if(GetPlayerWeapon(playerid) != 25 && fegyver != 0) return SCM(playerid,COL_LRED,"Nem a Shotgun van a kezedben!");
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pToltenyek][3] = 0;
					PlayerInfo[playerid][pFegyverek][3] = 0;
					RemovePlayerAttachedObject(playerid, SLOT_FEGYVER2);
					Elso[playerid] = 0;
					Cselekves(playerid,"berakott a járõrkocsiba egy Remington 870 Shotgunt");
				}
			}
			else
			{
				SCM(playerid,COL_LRED,"Nincs melleted olyan kocsi!");
			}
		}
		else
		{
			SCM(playerid,COL_LRED,"Nem vagy abban a Frakcióban!");
		}
	}
	else
	{
		SCM(playerid,COL_LRED,"Nincs kocsi a környékeden");
	}
	return 1;
}

CMD:oltozo(playerid,params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 5, 1276.2474,-32.5700,1492.9459) || IsPlayerInRangeOfPoint(playerid, 5.0, 255.3863,77.1573,1003.6406) || IsPlayerInRangeOfPoint(playerid, 5.0, 1862.3383,-1721.9015,1206.1860) || IsPlayerInRangeOfPoint(playerid, 5.0, 197.1813,168.3225,1003.0234))
	{
		if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA || PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSPD)
		{
			ShowPlayerDialog(playerid,DIALOG_OLTOZO,DIALOG_STYLE_LIST,"Ruhák","Security Guard\nOfficer Frank Tenpenny\nOfficer Eddie Pulaski\nOfficer Jimmy Hernandez\nLos Angeles Police Officer\nSan Francisco Police Officer\nLas Vegas Police Officer\nCounty Sheriff\nLSPD Motorbike Cop\nDesert Sheriff","Kiválaszt","Mégse");
		}
	}
	return 1;
}

CMD:kocka(playerid,params[])
{
	new rand = random(6);
	switch(rand)
	{
	    case 0: Cselekves(playerid,"egyest dobott a kockával.");
	    case 1: Cselekves(playerid,"kettest dobott a kockával.");
	    case 2: Cselekves(playerid,"hármast dobott a kockával.");
	    case 3: Cselekves(playerid,"négyest dobott a kockával.");
	    case 4: Cselekves(playerid,"ötöst dobott a kockával.");
	    case 5: Cselekves(playerid,"hatost dobott a kockával.");
	}
	return 1;
}
CMD:erme(playerid,params[])
{
	if(PlayerInfo[playerid][ppenz] == 0) return SCM(playerid,COL_LRED,"Nincs nálad pénz!");
	else {
	    new rand = random(2);
	    switch(rand)
	    {
	        case 1: Cselekves(playerid,"feldobott egy érmét, és írás lett!");
	        default: Cselekves(playerid,"feldobott egy érmét, és fej lett!");
	    }
	}
	return 1;
}
CMD:kereskedok(playerid,params[])
{
    SendClientMessage(playerid, 0xffc400AA, "========== [ Használtkereskedés Tagok ] ==========");
	foreach(Player, p)
	{
		if(Belepve(p) && PlayerInfo[p][pKereskedo] >= 1 )
		{
			SendFormatMessage(playerid, 0xffc400AA, "Név: "#COL_MKEK"%s{ffea00} | Rang: [%d]"#COL_MKEK"%s{ffea00}%s", JatekosNev(p), PlayerInfo[p][pKereskedo], KereskedoRangok(PlayerInfo[p][pKereskedo]), (PlayerInfo[p][pSzunetel] ? (" | AFK") : ("")));
		}
	}
	return 1;
}
CMD:k(playerid,params[])
{
	if(PlayerInfo[playerid][pKereskedo] >= 1)
	{
		new param[32];
		if(sscanf(params,"s[32]{}",param)) return SCM(playerid,COL_MKEK,"Használat: /k(ereskedõ) [ Vesz / Elad / Park / Felvesz / Kirúg / R / RB / Lista / Tagok / Rang]");
		else if(!strcmp(param,"vesz",true))
		{
		    if(k_uzleteles == 1) return SCM(playerid,COL_LRED,"Most éppen valaki más üzletel jármûvel.");
			ShowPlayerDialog(playerid,DIALOG_KERESKEDES_VESZ,DIALOG_STYLE_INPUT,"Kereskedés - Vétel","Írd be a játékost, a jármû ID-t és az árat vesszõvel elválasztva!\nPl: Razo_M,644,85000","Mehet","Mégse");
			}
		else if(!strcmp(param,"gov",true))
		{
			new szoveg[128];
			if(PlayerInfo[playerid][pKereskedo] <= 1 && !IsScripter(playerid))	return SCM(playerid,COL_LRED,"Minimum kereskedõi rang - 1");
			if(sscanf(params,"{s[32]}s[128]",szoveg)) 	return SCM(playerid, COL_MKEK, "Használat: /k(ereskedõ) gov [Bejelentés]");
			if(strlen(params) < 20)	return SCM(playerid, COL_LRED, "A bejelentés szövegének legalább 20 karakter hosszúnak kell lennie!");
			if(!OOC_Ellenorzes(playerid, "/kgov", szoveg))	return true;

			SendClientMessageToAll(COLOR_WHITE, "================== [ "#COL_RSARG"Kereskedõk felhívása"#COL_FEHER" ] ==================");
			format(szoveg, sizeof(szoveg), "%s %s: "#COL_RSARG"%s", KereskedoRangok(PlayerInfo[playerid][pKereskedo]), JatekosNev(playerid, true), szoveg);
			SendClientMessageToAll(FEHER, szoveg);
		}
		else if(!strcmp(param,"park",true))
		{
			new car = NINCS;
			car = GetClosestVehicle(playerid);

			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{

				    if(vInfo[vid][vMunka] != 103) return SCM(playerid,COL_LRED,"Ezt nem parkolhatod le.");
					new Float:vinfo[5];
					GetVehicleHealth(car, vinfo[0]);
					GetVehiclePos(car, vinfo[1], vinfo[2], vinfo[3]);
					GetVehicleZAngle(car, vinfo[4]);
					vInfo[vid][vElet] = vinfo[0];
					vInfo[vid][vPosx] = vinfo[1];
					vInfo[vid][vPosy] = vinfo[2];
					vInfo[vid][vPosz] = vinfo[3];
					vInfo[vid][vAngle] = vinfo[4];
					vInfo[vid][vInt] = GetPlayerInterior(playerid);
					vInfo[vid][vVW] = GetPlayerVirtualWorld(playerid);
					
					vUpdate(vid, vuPos);
					vInfo[vid][vMotorelinditva] = false;
					PlayerInfo[playerid][pmotortinditja] = false;
					GetVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
					DestroyVehicle(vInfo[vid][vID]);
					JarmuSpawn(vid, vInfo[vid][vModel], vInfo[vid][vPosx], vInfo[vid][vPosy], vInfo[vid][vPosz], vInfo[vid][vAngle], vInfo[vid][vSzin1], vInfo[vid][vSzin2]);
					SetVehicleHealth(vInfo[vid][vID], vinfo[0]);
					UpdateVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);

					LinkVehicleToInterior(vInfo[vid][vID], vInfo[vid][vInt]);
   			    	SetVehicleVirtualWorld(vInfo[vid][vID],vInfo[vid][vVW]);

					SCM(playerid, COL_MKEK, "Sikeresen leparkoltad a jármûvet!");
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			return true;
		}
		else if(!strcmp(param,"lista",true))
		{
		    foreach(Jarmuvek, veh)
		    {
		        if(vInfo[veh][vMunka] == 103)
		        {
					SFM(playerid,COL_VZOLD,"%s [ID:%d]",VehicleNames[vInfo[veh][vModel] - 400],veh);
		        }
		    }
		}
		else if(!strcmp(param,"tagok",true))
		{
	        SendClientMessage(playerid, 0xffc400AA, "========== [ Használtkereskedés Tagok ] ==========");
			foreach(Player, p)
			{
				if(Belepve(p) && PlayerInfo[p][pKereskedo] >= 1 )
				{
					SendFormatMessage(playerid, 0xffc400AA, "Név: "#COL_MKEK"%s{ffea00} | Rang: [%d]"#COL_MKEK"%s{ffea00}%s", JatekosNev(p), PlayerInfo[p][pKereskedo], KereskedoRangok(PlayerInfo[p][pKereskedo]), (PlayerInfo[p][pSzunetel] ? (" | AFK") : ("")));
				}
			}
		}
		else if(!strcmp(param,"r",true) || !strcmp(param,"rádió",true) || !strcmp(param,"radio",true))
		{
		    new msg[144];
		    if(sscanf(params,"{s[32]}s[144]",msg)) return SCM(playerid,COL_MKEK,"Használat: /k r [Üzenet]");
		    else {
		        foreach(Player, id)
				{
				    if(PlayerInfo[id][pKereskedo] >= 1)
				    {
				        SendFormatMessage(id,0x3ea800AA,"** %s %s mondja: %s",KereskedoRangok(PlayerInfo[playerid][pKereskedo]),JatekosNev(playerid),msg);
				    }
				}
		    }
		}
		else if(!strcmp(param,"rb",true) || !strcmp(param,"oocrádió",true) || !strcmp(param,"oocradio",true))
		{
		    new msg[144];
		    if(sscanf(params,"{s[32]}s[144]",msg)) return SCM(playerid,COL_MKEK,"Használat: /k r [Üzenet]");
			if(!SzidasCheck(playerid, msg))	return true;
		    else {
		        foreach(Player, id)
				{
				    if(PlayerInfo[id][pKereskedo] >= 1)
				    {
				        SendFormatMessage(id,0x3ea800AA,"** (( %s %s mondja OOC: %s ))",KereskedoRangok(PlayerInfo[playerid][pKereskedo]),JatekosNev(playerid),msg);
				    }
				}
		    }
		}
		else if(!strcmp(param,"felvesz",true))
		{
		    if(PlayerInfo[playerid][pKereskedo] == 3)
		    {
			    new id;
			    if(sscanf(params,"{s[32]}u",id)) return SCM(playerid,COL_MKEK,"Használat: /k felvesz [Játékos/ID]");
			    else if(id == INVALID_PLAYER_ID) return NincsJatekos(playerid);
				else {
				    PlayerInfo[id][pKereskedo] = 1;
				    SFM(id,COL_VZOLD,"%s felvett téged a Használtkereskedéshez!",JatekosNev(playerid));
				    SFM(playerid,COL_VZOLD,"Felvetted %st kereskedõnek.",JatekosNev(id));
				}
			}
			else return SCM(playerid,COL_MKEK,"Nem vagy leader!");
		}
		else if(!strcmp(param,"kirúg",true) || !strcmp(param,"kirug",true))
		{
		    if(PlayerInfo[playerid][pKereskedo] == 3)
		    {
			    new id;
			    if(sscanf(params,"{s[32]}u",id)) return SCM(playerid,COL_MKEK,"Használat: /k kirúg [Játékos/ID]");
			    else if(id == INVALID_PLAYER_ID) return NincsJatekos(playerid);
				else {
				    PlayerInfo[id][pKereskedo] = 0;
				    SFM(id,COL_VZOLD,"%s kirúgott a kereskedõktõl!",JatekosNev(playerid));
				    SFM(playerid,COL_VZOLD,"Kirúgtad %st a kereskedõktõl.",JatekosNev(id));
				}
			}
			else return SCM(playerid,COL_MKEK,"Nem vagy leader!");
		}
		else if(!strcmp(param,"rang",true))
		{
		    if(PlayerInfo[playerid][pKereskedo] == 3)
		    {
			    new id;
			    new rang;
			    if(sscanf(params,"{s[32]}ud",id,rang)) return SCM(playerid,COL_MKEK,"Használat: /k rang [Játékos/ID] [Rang]");
			    else if(id == INVALID_PLAYER_ID) return NincsJatekos(playerid);
			    else if(rang < 1 || rang > 3) return SCM(playerid,COL_LRED,"Hibás rang! (1-3)");
			    else {
			        PlayerInfo[id][pKereskedo] = rang;
			        SFM(id,COL_VZOLD,"%s új autókereskedõi rangot adott: %s[%d]",JatekosNev(playerid),KereskedoRangok(rang),rang);
			        SFM(playerid,COL_MKEK,"Új rangot adtál neki: %s. Rang: %s[%d]",JatekosNev(id),KereskedoRangok(rang),rang);
			    }
			}
			else return SCM(playerid,COL_MKEK,"Nem vagy leader!");
		}
		else if(!strcmp(param,"elad",true))
		{
            if(k_uzleteles == 1) return SCM(playerid,COL_LRED,"Most éppen valaki más üzletel jármûvel.");
			ShowPlayerDialog(playerid,DIALOG_KERESKEDES_ELAD,DIALOG_STYLE_INPUT,"Kereskedés - Eladás","Írd be a játékost, a jármû ID-t és az árat vesszõvel elválasztva!\nPl: Razo_M,644,85000","Mehet","Mégse");
		}
	}
	else return SCM(playerid,COL_LRED,"Nem vagy kereskedõ!");
	return 1;
}

CMD:hazassag(playerid,params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 2, 1302.506835, 1430.836425, 10.840437))
	{
		if(isnull(params))
		{
			SCM(playerid,COL_MKEK,"/házasság [JátékosNeve/ID]");
			return 1;
		}
		new kivel;
		sscanf(params,"u",kivel);
		if(IsPlayerNPC(kivel)) return 1;
		if(INVALID_PLAYER_ID == kivel) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
		if(playerid == kivel) return SCM(playerid,COL_LRED,"Te kis huncut!");
		if(GetPlayerDistanceFromPlayer(playerid,kivel) > 1) return SCM(playerid,COL_LRED, "Nincs a közeledben a játékos!");
		//if(egyezik("Senki",PlayerInfo[playerid][pHazasodvaVele])) return SCM(playerid,COL_LRED,"Már van (férjed/feleséged)");
		Hazassag[playerid] = kivel;
		Hazassag[kivel] = playerid;
		SFM(playerid,COL_MKEK,"Felajánlottad %s (nak/nek) hogy elvedd (férjül/feleségül)",JatekosNev(kivel));
		SFM(kivel,COL_MKEK,"Felajánlotta %s hogy elvesz (férjül/feleségel)",JatekosNev(playerid));
	}
	else
	{
		SCM(playerid,COL_LRED,"Nem vagy jó helyen!");
		SetPlayerCheckpoint(playerid,-1988.698, 1117.767, 54.472,5);
	}
	return true;
}
CMD:cuccreset(playerid,params[])
{
	if(!Admin(playerid, 1)) return 1;
	if(isnull(params)) return SCM(playerid,COL_LRED, "/cuccreset [Játékos Neve / ID] [sapka / szemüveg / óra / Maszk]");
	new ki,mit[32];
	sscanf(params,"us[32]",ki,mit);
	if(ki == INVALID_PLAYER_ID) return SCM(playerid,COL_MKEK, "Nincs ilyen játékos!");

	if(egyezik(mit,"sapka"))
	{
		DivatInfo[SLOT_SAPKA][ki][dVan] = 0;
		DivatInfo[SLOT_SAPKA][ki][dPosX] = 0;
		DivatInfo[SLOT_SAPKA][ki][dPosY] = 0;
		DivatInfo[SLOT_SAPKA][ki][dPosZ] = 0;
		DivatInfo[SLOT_SAPKA][ki][dRotX] = 0;
		DivatInfo[SLOT_SAPKA][ki][dRotY] = 0;
		DivatInfo[SLOT_SAPKA][ki][dRotZ] = 0;
		DivatInfo[SLOT_SAPKA][ki][dScaleX] = 0;
		DivatInfo[SLOT_SAPKA][ki][dScaleY] = 0;
		DivatInfo[SLOT_SAPKA][ki][dScaleZ] = 0;
		DivatInfo[SLOT_SAPKA][ki][dmodelid] = 0;
		RemovePlayerAttachedObject(ki,SLOT_SAPKA);
		SCM(playerid, COL_LRED,"Kesz!");
		return 1;
	}

	if(egyezik(mit,"szemüveg"))
	{
		DivatInfo[SLOT_SZEMUVEG][ki][dVan] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dPosX] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dPosY] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dPosZ] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dRotX] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dRotY] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dRotZ] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dScaleX] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dScaleY] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dScaleZ] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dmodelid] = 0;
		RemovePlayerAttachedObject(ki,SLOT_SZEMUVEG);
		SCM(playerid,COL_LRED, "Kesz!");
		return 1;
	}
	if(egyezik(mit,"Maszk"))
	{
		DivatInfo[SLOT_MASZK][ki][dVan] = 0;
		DivatInfo[SLOT_MASZK][ki][dPosX] = 0;
		DivatInfo[SLOT_MASZK][ki][dPosY] = 0;
		DivatInfo[SLOT_MASZK][ki][dPosZ] = 0;
		DivatInfo[SLOT_MASZK][ki][dRotX] = 0;
		DivatInfo[SLOT_MASZK][ki][dRotY] = 0;
		DivatInfo[SLOT_MASZK][ki][dRotZ] = 0;
		DivatInfo[SLOT_MASZK][ki][dScaleX] = 0;
		DivatInfo[SLOT_MASZK][ki][dScaleY] = 0;
		DivatInfo[SLOT_MASZK][ki][dScaleZ] = 0;
		DivatInfo[SLOT_MASZK][ki][dmodelid] = 0;
		RemovePlayerAttachedObject(ki,SLOT_MASZK);
		SCM(playerid,COL_LRED, "Kesz!");
	}
	return 1;
}
CMD:cuccaim(playerid,params[])
{
	ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_EDIT, DIALOG_STYLE_LIST, "Cuccaid", "Sapka/Kalap\nSzemüveg\nMaszk", "Módosítás", "Mégse");
	return 1;
}

CMD:areport(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT)) return SCM(playerid,COL_LRED,NEM_HASZNALHATO);
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"Használat: /areport Belép [ChannelID / All / Off]");
		SCM(playerid,COL_MKEK,"Használat: /areport Tagok [ChannelID]");
 		if(Admin(playerid, FOADMIN_SZINT))
 		{
	 		SCM(playerid,COL_MKEK,"Használat: /areport Set [playerid] [ChannelID / All / Off ]");
 		}
		return 1;
	}

	new mit[32], param[2][50];

	sscanf(params,"s[32]s[50]S[50](fasz)",mit,param[0],param[1]);
    new ch = strval(param[0]);

	if((!strcmp(mit,"belép") || !strcmp(mit,"belep")) && !strcmp(param[1],"fasz"))
	{
	    if( IsNumeric(param[0]) && strval(param[0]) > 0 && strval(param[0]) < 4 )    //egy csenelbe megy be
	    {
			PlayerInfo[playerid][pReport][1] = ch;
			SFM(playerid,COL_MKEK,"Sikeresen csatlakoztál a %d csatornához!",ch);
			AdminUzenet(COLOR_LIGHTRED,1,"%s átlépett a %d channelre",JatekosNev(playerid),ch);
	    }
	    else if( !strcmp(param[0], "all" ) )
	    {
		    if((PlayerInfo[playerid][pallreport] = true - PlayerInfo[playerid][pallreport]))
	        {
	 	       	AdminUzenet(COLOR_LIGHTRED,1,"%s már az összes channelt látja.",JatekosNev(playerid));
				SCM(playerid, COL_MKEK, "Mostantól látod az összes report channelt!");
			}
			else
		    {
			    AdminUzenet(COLOR_LIGHTRED,1,"%s már nem látja az összes channelt.",JatekosNev(playerid));
				SFM(playerid, COL_MKEK, "Mostantól csak a saját report channeled látod! (CH:%d)",PlayerInfo[playerid][pReport][1]);
			}
	    }
	    else if( !strcmp(param[0], "off" ) )
	    {
	        PlayerInfo[playerid][pallreport] = false;
	        PlayerInfo[playerid][pReport][1] = NINCS;
		    AdminUzenet(COLOR_LIGHTRED,1,"%s lecsatlakozott a report channelekrõl.",JatekosNev(playerid));
			SCM(playerid, COL_MKEK, "Mostantól nem látod a report channeleket.");
	    }
	    else
	    {
	        cmd_areport(playerid, "");  //mutassa meg neki az infókat
	    }
	    return true;
	}
	else if(!strcmp(mit,"tagok") && IsNumeric(param[0]) && strval(param[0]) > 0 && strval(param[0]) < 4 && !strcmp(param[1],"fasz") )
	{
		SFM(playerid,COL_MKEK,"%d channelen lévõ adminok:",ch);
		foreach(Player,i)
		{
			if(PlayerInfo[i][pReport][1] == ch)
			{
				SFM(playerid,COL_MKEK,"Admin: %s | Admin Szint: %d | Válasz: %d",JatekosNev(i, true), PlayerInfo[i][padmin], PlayerInfo[i][pValaszok]);
			}
		}
		return true;
	}
	else if( !strcmp(mit,"set") && (strcmp(param[1],"fasz") != 0) )
	{
	    if( IsNumeric(param[1]) && strval(param[1]) > 0 && strval(param[1]) < 3 )
	    {
	        new player = strval(param[0]);
	        if( !IsPlayerConnected(player) )
	            return SCM(playerid, COL_MKEK, "A játékos ezzel az ID-vel nincs felcsatlakozva.");

		    if( IsNumeric(param[1]) && strval(param[1]) > 0 && strval(param[1]) < 4 )    //egy csenelbe megy be
		    {
		        ch = strval(param[1]);
				PlayerInfo[player][pReport][1] = ch;

				SFM(playerid,COL_MKEK,"Sikeresen átcsatlakoztattad %st a %d csatornához!", JatekosNev(player), ch);
				SFM(player,COL_MKEK,"Átcsatlakoztattak a %d csatornához!", ch);
				AdminUzenet(COLOR_LIGHTRED,1,"%s átcsatlakoztatta %st a %d channelre", JatekosNev(playerid), JatekosNev(player),ch);
		    }
		    else if( !strcmp(param[0], "all" ))
		    {
			    if((PlayerInfo[player][pallreport] = true - PlayerInfo[player][pallreport]))
		        {
		 	       	AdminUzenet(COLOR_LIGHTRED,1,"%s megmutatta %s-nek az összes csatornát.", JatekosNev(playerid), JatekosNev(player) );
					SFM(playerid,COL_MKEK,"Sikeresen átcsatlakoztattad %st az összes csatornába!", JatekosNev(player));
					SCM(player,COL_MKEK,"Átcsatlakoztattak az összes csatornába.");
				}
				else
			    {
		 	       	AdminUzenet(COLOR_LIGHTRED,1,"%s kiléptette %st az összes csatornából.", JatekosNev(playerid), JatekosNev(player) );
					SFM(playerid,COL_MKEK,"Sikeresen kiléptetted %st az összes csatornáól!", JatekosNev(player));
					SCM(player,COL_MKEK,"Kiléptettek az összes csatornából.");
				}
		    }
		    else if( !strcmp(param[0], "off" ) )
		    {
		        PlayerInfo[player][pallreport] = false;
		        PlayerInfo[player][pReport][1] = NINCS;
			    AdminUzenet(COLOR_LIGHTRED,1,"%s kikapcsolta %s report channeljeit.",JatekosNev(playerid), JatekosNev(player));
				SCM(player, COL_MKEK, "Lekapcsoltak a report channelekrõl.");
				SFM(playerid, COL_MKEK, "Lekapcsoltad %st a report channelekrõl.", JatekosNev(player));
		    }
		    else
		    {
		        cmd_areport(playerid, "");  //mutassa meg neki az infókat
		    }
		    return true;
	    }
	    else
	    {
	        cmd_areport(playerid,"");   //helpet mutassunk neki
	    }
	}
	return true;
}
CMD:noname(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT)) return SCM(playerid,COL_LRED,NEM_HASZNALHATO);
	if(PlayerInfo[playerid][pNoname] == 1)
	{
		PlayerInfo[playerid][pNoname] = 0;
		SCM(playerid,COL_MKEK,"Mostmár látják a nevedet");
		foreach(Player, x)
		{
			ShowPlayerNameTagForPlayer(x, playerid, 1);
		}
		return 1;
	}
	else
	{
		PlayerInfo[playerid][pNoname] = 1;
		SCM(playerid,COL_MKEK,"Név mutatás kikapcsolva!");
		foreach(Player, x)
		{
			ShowPlayerNameTagForPlayer(x, playerid, 0);
		}
	}
	return true;
}

CMD:fenykard(playerid,params[])
{
	if(!Admin(playerid, SZUPER_SZINT)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"/fenykard [kitol/behuz]");
		return 1;
	}
	new mi[32];
	sscanf(params,"s[32]",mi);
	if(egyezik(mi,"kitol"))
	{
		SetPlayerAttachedObject(playerid, 2, 18648, 6, 0.056999, -0.194000, 0.924000, 103.199966, 0.800001, 0);
		SCM(playerid, COL_MKEK,"Bekapcsóltad a Jedi kardod.");
		return true;
	}
	if(egyezik(mi,"behuz"))
	{
		RemovePlayerAttachedObject(playerid, 2);
		SCM(playerid, COL_MKEK,"Kikapcsóltad a Jedi kardod.");
	}
	return true;
}

CMD:kezetfog(playerid,params[])
{
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"Használat: /kezetfog [Típus] [Játékos Neve / ID]");
		return 1;
	}
	new t,p;
	sscanf(params,"du",t,p);
	if(t < 1 || t > 3)
	{
		SCM(playerid,COL_LRED,"1-3 között!!");
		return 1;
	}
	if(p == INVALID_PLAYER_ID)
	{
		SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
		return 1;
	}
	if(GetPlayerDistanceFromPlayer(playerid,p) > 1) return SCM(playerid,COL_LRED, "Nincs a közeledben a játékos!");
	Kezetfogna[playerid] = p;
	Kezetfogna[p] = playerid;
	KezetfognaStilus[playerid] = t;
	KezetfognaStilus[p] = t;
	new kicsinalja[128];
	new kicsinalja1[128];

	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
	}

	if(PlayerInfo[p][pMaszkVisel] == true)
	{
		format(kicsinalja1, sizeof(kicsinalja1), "Maszk_ID%d", PlayerInfo[p][pMaszkID]);
	}
	if(PlayerInfo[p][pAlnevbe] == true)
	{
		format(kicsinalja1, sizeof(kicsinalja1), "%s", PlayerInfo[p][pAlnev]);
	}
	if(PlayerInfo[p][pAlnevbe] == false && PlayerInfo[p][pMaszkVisel] == false)
	{
		format(kicsinalja1, sizeof(kicsinalja1), "%s", JatekosNev(p));
	}
	SendFormatMessage(p, COLOR_LIGHTBLUE, "* %s kezet fogna veled. /elfogad kézfogás", kicsinalja);
	SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* %s kezet fognál vele", kicsinalja1);
	return 1;
}
CMD:taxi(playerid,params[])
{
	if(PlayerInfo[playerid][pTiltasok][TILTAS_TAXI] != 0)
	    return SFM(playerid, COL_LRED,"El vagy tiltva a taxi hívástól %d percig!",PlayerInfo[playerid][pTiltasok][TILTAS_AUTO]/60);
	    
	TaxiHivas(playerid);
	return 1;
}

CMD:gpscsin(playerid,params[])
{
	if(!Admin(playerid, SZUPER_SZINT))
		return SCM(playerid, COL_LRED, "Nem használhatod ezt a parancsot!");

	new gpsnev[32];
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/gpscsin [GPS Pozíció neve]");
		return 1;
	}
	sscanf(params,"s[32]",gpsnev);
	new
		t = -1,
		gpsid = UjGPSID();

	for(;++t < MAXGPS;)
	{
		if(GPSInfo[t][gHasznalva])
		{
			if(egyezik(gpsnev, GPSInfo[t][gnev]))
			{
				return SCM(playerid, COL_LRED, "Már van ilyen név!");
			}
		}
	}

	if(gpsid > 0)
	{
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid, X,Y,Z);

		GPSInfo[gpsid][gposx] = X;
		GPSInfo[gpsid][gposy] = Y;
		GPSInfo[gpsid][gposz] = Z;
		GPSInfo[gpsid][gHasznalva] = true;
		strmid(GPSInfo[gpsid][gnev], gpsnev,0,strlen(gpsnev),32);
		doQuery("INSERT INTO `"#MYSQL_GPS_TABLA"` (id, posx, posy, posz, gnev) VALUES ('%d', '%f', '%f', '%f','%s')",gpsid, X, Y, Z,gpsnev);
		AdminUzenet(COLOR_LIGHTRED,1, "%s hozzáadott egy új GPS-t a listához, Neve: %s", JatekosNev(playerid), GPSInfo[gpsid][gnev]);
		SendClientMessage(playerid, COLOR_GREEN, "GPS sikeresen létrehozva!");
		return true;
	}
	else
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Elértük a GPS limitet!");
}
CMD:gpstorol(playerid,params[])
{
	if(!Admin(playerid, 5))
		return SendClientMessage(playerid, COLOR_WHITE, "Nem használhatod ezt a parancsot");

	new t = NINCS;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/gpstorol [IDje / Neve]");
		return 1;
	}
	if(IsNumeric(params)) t = strval(params);
	else t = GPSNameToID(params);

	if(t == NINCS || !GPSInfo[t][gHasznalva])
		return SendClientMessage(playerid,COLOR_LIGHTRED,"Hiba történt! Nincs ilyen GPS Bejegyzés létrehozva!");

	GPSInfo[t][gposx] = 0.0;
	GPSInfo[t][gposy] = 0.0;
	GPSInfo[t][gposz] = 0.0;

	doQuery("DELETE FROM `"#MYSQL_GPS_TABLA"` WHERE gnev = '%s'",GPSInfo[t][gnev]);

	AdminUzenet(COLOR_LIGHTRED, 1, "%s törölt egy GPS bejegyzést a listából! Neve: %s", JatekosNev(playerid), GPSInfo[t][gnev]);
	SendClientMessage(playerid,COLOR_GREEN,"GPS bejegyzés sikeresen törölve!");
	GPSInfo[t][gnev] = EOS;
	GPSInfo[t][gHasznalva] = false;
	return true;
}

CMD:csipogo(playerid,params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_MAFFIA) return SCM(playerid,COL_LRED,"Ezt a parancsot csak maffia használhatja!");
	if(PlayerInfo[playerid][pCuccok][BL_CSIPOGO] == 0) return SCM(playerid,COL_LRED,"Nincs csipogód!");
	if(NemMozoghat(playerid,false))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
	Cselekves(playerid, "megnyomta a csipogót.",1);
	CsipogoIdo[playerid] = 240;
	foreach(Player,x)
	{
		if(PlayerInfo[x][pFrakcio] == PlayerInfo[playerid][pFrakcio])
		{
			SetPlayerMarkerForPlayer(x, playerid, COLOR_ORANGE);
			SendFormatMessage(x, COLOR_LIGHTRED, "RIADÓ!! %s megnyomta a veszcsipogót!! Siessetek a segítségére!", JatekosNev(playerid));
		}
	}

	return true;
}

CMD:rabok(playerid,params[])
{
	new szam = 0;
	if(PlayerInfo[playerid][pFrakcio] == 1 || PlayerInfo[playerid][pFrakcio] == 6 || PlayerInfo[playerid][pFrakcio] == 15)
	{
		foreach(Player,i)
		{
			if(PlayerInfo[i][pjail] == 2)
			{
				SFM(playerid,COL_LRED,"Ki: %s | Miért: %s | Mennyi Idõ Múlva Szabadul: %d másodperc",JatekosNev(i),PlayerInfo[i][pJailOk],PlayerInfo[i][pJailIdo]);
			}
			szam++;
		}
		if(szam == 0)
		{
			SCM(playerid,COL_LRED,"Sajnos senki nincs a börtönben!");
		}
	}
	return true;
}
/*
CMD:item(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT)) return SCM(playerid, COL_LRED, NEM_HASZNALHATO);
	
	new param[24];
	if(sscanf(params,"s[24]{}", param))
	    return SCM(playerid, COL_LRED, "/item [lista / give]");
	    
	if(egyezik(param,"lista"))
	{
	    TargyLista[25][6][32]
	    new i = NINCS;
	    new string[BOLT_CUCCOK * 32];
	    for(; ++i < BOLT_CUCCOK;)
	    {
	        if(i == 0)
	            format(string, BOLT_CUCCOK * 32,""#COL_FEHER"[%d]"#COL_MKEK"%s", i, TargyLista[i][0]);
			else
			    format(string, BOLT_CUCCOK * 32,"%s\n"#COL_FEHER"[%d]"#COL_MKEK"%s", string, i, TargyLista[i][0]);
	    }
	    ShowPlayerDialog(playerid,DIALOG_NINCS,DIALOG_STYLE_MSGBOX,"Item lista", string,"Bezárás","");
	}
	else if(egyezik(param, "give"))
	{
	    new itemid, ertek;
	}
	return 1;
}*/
CMD:agl(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT)) return SCM(playerid,COL_LRED,NEM_HASZNALHATO);
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/agl [kinek] [Kresz / Autó / Fegyver / Motor / Kamion]");
		return 1;
	}
	new kinek,mit[32];
	sscanf(params,"us[32]",kinek,mit);
	if(kinek == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	if(IsPlayerNPC(kinek)) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	if(egyezik(mit,"Kresz"))
	{
		PlayerInfo[kinek][pEngedely][0] = VizsgaLista[0][4][0];
		SCM(kinek,COL_MKEK,"Kaptál egy Kresz Vizsgát!");
		SFM(playerid,COL_MKEK,"Adtál egy Kresz vizsgát neki: %s",JatekosNev(kinek));
		return true;
	}
	if(egyezik(mit,"Autó"))
	{
		PlayerInfo[kinek][pEngedely][1] = VizsgaLista[1][4][0];
		SCM(kinek,COL_MKEK,"Kaptál egy Autó Jogosítványt!");
		SFM(playerid,COL_MKEK,"Adtál egy Autó Jogosítványt neki: %s",JatekosNev(kinek));
		return true;
	}
	if(egyezik(mit,"Fegyver"))
	{
		PlayerInfo[kinek][pEngedely][4] = VizsgaLista[4][4][0];
		SCM(kinek,COL_MKEK,"Kaptál egy Fegyver Engedélyt!");
		SFM(playerid,COL_MKEK,"Adtál egy Fegyver Engedélyt neki: %s",JatekosNev(kinek));
		return true;
	}
	if(egyezik(mit,"Motor"))
	{
		PlayerInfo[kinek][pEngedely][2] = VizsgaLista[2][4][0];
		SCM(kinek,COL_MKEK,"Kaptál egy Motor Jogosítványt!");
		SFM(playerid,COL_MKEK,"Adtál egy Motor Jogosítványt neki: %s",JatekosNev(kinek));
		return true;
	}
	if(egyezik(mit,"Kamion"))
	{
		PlayerInfo[kinek][pEngedely][3] = VizsgaLista[3][4][0];
		SCM(kinek,COL_MKEK,"Kaptál egy Kamion Jogosítványt!");
		SFM(playerid,COL_MKEK,"Adtál egy Kamion Jogosítványt neki: %s",JatekosNev(kinek));
	}
	return true;
}

CMD:hp(playerid,params[])
{
	new Float:Elet;
	GetPlayerHealth(playerid,Elet);
	new Float:Armor;
	GetPlayerArmour(playerid,Armor);
	SFM(playerid,COL_MKEK,"Jelenleg: %.0f HP-d van",Elet);
	SFM(playerid,COL_MKEK,"Jelenleg: %.0f Armorod van!",Armor);
	return true;
}
CMD:repa(playerid,params[])
{
	new car = NINCS;
	car = GetClosestVehicle(playerid);
	new vid = JarmuID(car, playerid);
	if(GetDistanceToVehicle(playerid, car) < 5.0)
	{
	GetVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
	SFM(playerid,COL_MKEK,"Jármû: %d | Panelek: %d | Ajtók: %d | Lámpák: %d | Gumik: %d",vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
	} else
	    return SCM(playerid, COL_LRED, "Nincs jármû a közeledben!");
	return true;
}
CMD:szerelok(playerid,params[])
{
	new szam = 0,TelefonSzama[64];
	SCM(playerid,COL_MKEK,"Jelenleg online szerelõk:");
	foreach(Player,i)
	{
		if(PlayerInfo[i][pFrakcio] == FRAKCIO_SZERELO)
		{
			if(PlayerInfo[i][pCuccok][BL_TELEFON] == 0)
			{
				format(TelefonSzama,64,"Nincs Telefonja!",0);
			}
			else
			{
				format(TelefonSzama,64,"%d",PlayerInfo[i][pCuccok][BL_TELEFON]);
			}
			SFM(playerid,COL_MKEK,"Név: %s || TelefonSzám : %s",JatekosNev(i),TelefonSzama);
			szam++;
		}
	}
	if(szam == 0)
	{
	    SCM(playerid,COL_LRED,"Nincs online szerelõ.");
	}
	return true;
}

CMD:zero(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT))
	{
		SCM(playerid,COL_LRED,NEM_HASZNALHATO);
    	return true;
	}
	if(TilosOlni == 0)
	{
		TilosOlni = 1;
		foreach(Player,i)
		{
			TextDrawShowForAll(g_TextDraw[td_Zero]);
			SCM(i,COL_MKEK, "============[ Zero Tolerancia ]============");
			SCM(i,COL_LRED, "* Zero tolerancia bekapcsolva!");
			SCM(i,COL_LRED, "* Amíg ez érvényben van, tilos ölni, aki megszegi automata 1 óra jail!");
		}
		AdminUzenet(COLOR_LIGHTRED, 1, "%s bekapcsolta a Zeró Toleranciát", JatekosNev(playerid));
	}
	else
	{
	    TextDrawHideForAll(g_TextDraw[td_Zero]);
		TilosOlni = 0;
		foreach(Player,i)
		{
			SCM(i,COL_MKEK, "============[ Zero Tolerancia ]============");
			SCM(i,COL_LRED, "* Zero tolerancia kikapcsolva!");
		}
		AdminUzenet(COLOR_LIGHTRED, 1, "%s kikapcsolta a Zeró Toleranciát", JatekosNev(playerid));
	}
	return true;
}

CMD:munkak(playerid,params[])
{
    SCM(playerid,COL_MKEK,"20: Kamionos");
	SCM(playerid,COL_MKEK,"21: Favágó");
	SCM(playerid,COL_MKEK,"22: Kukás");
	SCM(playerid,COL_MKEK,"23: Úttisztító");
	SCM(playerid,COL_MKEK,"24: Fegyvermester");
	SCM(playerid,COL_MKEK,"25: Farmer");
	SCM(playerid,COL_MKEK,"26: Drog díler");
	SCM(playerid,COL_MKEK,"27: Hacker");
	SCM(playerid,COL_MKEK,"28: Árúszállító");
	SCM(playerid,COL_MKEK,"29: Pilóta");
	SCM(playerid,COL_MKEK,"30: Pénzszállító");
	return 1;
}

CMD:carjacked(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"PED","CAR_jackedLHS",4.0,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"PED","CAR_jackedRHS",4.0,0,1,1,1,0);
		default: SCM(playerid, COL_MKEK, "Használat: /carjacked [1/2]");
	}
	return true;
}

CMD:handsup(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0);
}

CMD:wank(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid, "PAULNMAC","wank_loop", 4.0, 0, 0, 0, 0, 0);
}

CMD:cellin(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
}

CMD:cellout(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
}

CMD:drunk(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
}

CMD:fekves(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /fekvés [1/2/3]");
	}
	return true;
}

CMD:guggol(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"CAMERA","camstnd_to_camcrch",4.1,0,1,1,1,1);
}

CMD:ideges(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"CASINO","cards_in",4.1,0,1,1,1,1);
}

CMD:tanc(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"DANCING","dnce_M_d",4.1,0,1,1,1,1);
}

CMD:laza(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.1,0,1,1,1,1);
}

CMD:gyasz(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.1,0,1,1,1,1);
}

CMD:sir(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.1,0,1,1,1,1);
}

CMD:kiss(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid, "KISSING","Grlfrd_Kiss_02",4.0,0,0,0,0,0);
		case 2: LoopingAnim(playerid,"KISSING","Grlfrd_Kiss_03",4.1,0,1,1,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /kiss [1/2]");
	}
	return true;
}

CMD:gurul(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll",4.1,0,1,1,1,1);
}

CMD:mivan(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"RIOT","RIOT_ANGRY",4.1,0,1,1,1,1);
}

CMD:johettek(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"SWAT","swt_lkt",4.1,0,1,1,1,1);
}

CMD:allj(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"SWAT","swt_sty",4.1,0,1,1,1,1);
}

CMD:falhoz(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"SWAT","swt_wllpk_R_back",4.1,0,1,1,1,1);
}

CMD:sleep(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"CRACK","CRCKIDLE2",4.0,1,0,0,0,-1);
		case 2: LoopingAnim(playerid,"CRACK","CRCKIDLE3",4.0,1,0,0,0,-1);
		case 3: LoopingAnim(playerid,"CRACK","CRCKIDLE1",4.0,1,0,0,0,-1);
		default: SCM(playerid, COL_MKEK, "Használat: /sleep [1/2/3]");
	}
	return true;
}

CMD:ground(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"WUZI","WUZI_GRND_CHK",4.0,0,1,0,0,-1);
}

CMD:getup(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"PED", "GETUP_FRONT",4.0,0,1,0,0,-1);
}

CMD:holding(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"MISC", "BMX_IDLELOOP_02",4.0,0,1,0,1,-1);
}

CMD:gyere(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"RYDER", "RYD_BECKON_01",4.0,0,1,0,0,-1);
}

CMD:kezenallas(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"DAM_JUMP", "DAM_Dive_Loop",4.0,0,1,0,1,-1);
}

CMD:calltaxi(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"PED", "IDLE_taxi",4.0,0,0,0,0,-1);
}

CMD:bomb(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0); // Place Bomb
}

CMD:getarrested(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1); // Gun Arrest
}

CMD:laugh(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0); // Laugh
}

CMD:lookout(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
}

CMD:robman(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0); // Rob
}

CMD:crossarms(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1); // Arms crossed
}

CMD:lay(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0); // Lay down
		case 2: LoopingAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
		default: SCM(playerid, COL_MKEK, "Használat: /lay [1/2]");
	}
	return true;
}

CMD:hide(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0); // Taking Cover
}

CMD:vomit(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
}

CMD:eszik(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); // Eat Burger
}

CMD:wave(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0); // Wave
}

CMD:slapass(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0); // Ass Slapping
}

CMD:deal(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0); // Deal Drugs
}

CMD:crack(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0); // Dieing of Crack
}

CMD:smoke(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0); // férfi
		case 2: LoopingAnim(playerid,"SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0); // nõ
		case 3: LoopingAnim(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0); // standing-fucked
		case 4: LoopingAnim(playerid,"SMOKING","M_smk_out", 4.0, 1, 0, 0, 0, 0); // standing
		default: SCM(playerid, COL_MKEK, "Használat: /smoke [1/2/3/4]");
	}
	return true;
}

CMD:gro(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0); // Sit
}

CMD:chat(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
}

CMD:fucku(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
}

CMD:taichi(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
}

CMD:chairsit(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"1-2");
		return 1;
	}
	new id;
	sscanf(params,"d",id);
	if(id != 1 && id != 2)
	{
		SCM(playerid,COL_LRED,"1-2");
		return 1;
	}
	if(id == 1)
	{
		LoopingAnim(playerid,"PED","SEAT_down",4.1,0,1,1,1,0);
		return 1;
	}
	if(id == 2)
	{
		LoopingAnim(playerid,"PED","SEAT_down",4.1,0,1,1,1,1,1);
		return 1;
	}
	return 1;
}

CMD:fall(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
}

CMD:fallback(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
}

CMD:injured(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
}

CMD:sup(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: OnePlayAnim(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
		default: SCM(playerid, COL_MKEK, "Használat: /sup [1/2/3]");
	}
	return true;
}

CMD:rap(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /rap [1/2/3/4]");
	}
	return true;
}
CMD:gang(playerid, params[])
{
        if(NemMozoghat(playerid))
                return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

        switch( strval(params) )
        {
                case 1: OnePlayAnim(playerid,"GHANDS","gsign1LH",4.0,0,0,0,0,0);
        case 2: OnePlayAnim(playerid,"GHANDS","gsign2",4.0,0,0,0,0,0);
        case 3: OnePlayAnim(playerid,"GHANDS","gsign2LH",4.0,0,0,0,0,0);
        case 4: OnePlayAnim(playerid,"GHANDS","gsign4",4.0,0,0,0,0,0);
        case 5: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
        case 6: OnePlayAnim(playerid,"GHANDS","gsign5LH",4.0,0,0,0,0,0);
                default: SCM(playerid, COL_MKEK, "Használat: /gang [1/2/3/4/5/6]");
        }
        return true;
}

CMD:gwalk(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /gwalk [1/2]");
	}
	return true;
}

CMD:push(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
}

CMD:akick(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
}

CMD:lowbodypush(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
}

CMD:spray(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
}

CMD:headbutt(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
}

CMD:medic(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
}

CMD:koface(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
}

CMD:kostomach(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
}

CMD:lifejump(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,0);
}

CMD:leftslap(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
}

CMD:rollfall(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
}

CMD:carlock(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"PED","CAR_doorlocked_LHS",4.0,0,0,0,0,0);
}

CMD:carjack(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: OnePlayAnim(playerid,"PED","CAR_pulloutL_LHS",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"PED","CAR_pulloutL_RHS",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"PED","CAR_pullout_LHS",4.0,0,0,0,0,0);
		case 4: OnePlayAnim(playerid,"PED","CAR_pullout_RHS",4.0,0,0,0,0,0);
		default: SCM(playerid, COL_MKEK, "Használat: /carjack [1/2/3/4]");
	}
	return true;
}

CMD:hoodfrisked(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
}

CMD:lightcig(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0);
}

CMD:tapcig(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
}

CMD:bat(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
}

CMD:chant(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
}

CMD:finger(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"RIOT","RIOT_FUKU",2.0,0,0,0,0,0);
}

CMD:shouting(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,0,0,0,0);
}

CMD:cop(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
}

CMD:elbow(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
}

CMD:kneekick(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"FIGHT_D","FightD_2",4.0,0,1,1,0,0);
}

CMD:fstance(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"FIGHT_D","FightD_IDLE",4.0,1,1,1,1,0);
}

CMD:gpunch(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"FIGHT_B","FightB_G",4.0,0,0,0,0,0);
}

CMD:airkick(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
}

CMD:gkick(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0);
}

CMD:lowthrow(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
}

CMD:highthrow(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return OnePlayAnim(playerid,"GRENADE","WEAPON_throw",4.0,0,0,0,0,0);
}

CMD:dealstance(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	return LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
}

CMD:knife(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.0,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
		case 3: OnePlayAnim(playerid,"KNIFE","KILL_Knife_Player",4.0,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"KNIFE","KILL_Partial",4.0,0,1,1,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /knife [1/2/3/4]");
	}
	return true;
}

CMD:basket(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
		case 2: OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
		default: SCM(playerid, COL_MKEK, "Használat: /basket [1/2/3/4/5/6]");
	}
	return true;
}

CMD:aim(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"PED","gang_gunstand",4.0,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","Driveby_L",4.0,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","Driveby_R",4.0,0,1,1,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /aim [1/2/3]");
	}
	return true;
}

CMD:lean(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
		default: SCM(playerid, COL_MKEK, "Használat: /lean [1/2]");
	}
	return true;
}

CMD:strip(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
		case 2: LoopingAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
		case 3: LoopingAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
		case 4:	LoopingAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
		case 5:	LoopingAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
		case 6:	LoopingAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
		case 7:	LoopingAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
		default: SCM(playerid, COL_MKEK, "Használat: /strip [1/2/3/4/5/6/7]");
	}
	return true;
}

CMD:dance(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4:	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		default: SCM(playerid, COL_MKEK, "Használat: /dance [1/2/3/4]");
	}
	return true;
}

/*---------------- Animok vége --------------*/
CMD:korbevezetes(playerid,params[])
{
	if(PlayerInfo[playerid][pjatekosszint] > 5)return SCM(playerid,COL_LRED,"5-ös szint felett nem kérhetsz körbevezetést, ha mégis ezt szeretnéd, keress fel egy AS-t/S&M tagot!");

	SCM(playerid,COL_MKEK,"Körbevezetést kértél.");
	foreach(Player, p)
	{
	    if(IsAS(p) || PlayerInfo[p][pSM] == 1 || Admin(p,1) || IsScripter(playerid))
	    {
	        SendFormatMessage(p,COLOR_RED,"[%d]%s körbevezetést kért, foglalkozzatok vele!",playerid,JatekosNev(playerid));
	    }
	}
	return 1;
}
CMD:smr(playerid,params[])
{
	if(PlayerInfo[playerid][pSM] == 1)
	{
	    if(isnull(params)) return SCM(playerid,COL_MKEK,"Használat: /smr [Szöveg]");
    	else {
    	    new str[256];
	        switch(PlayerInfo[playerid][pSMrang])
	        {
	            case 1: {
	                format(str,sizeof str,"(( S&M Tag %s: %s ))",JatekosNev(playerid),params);
	                foreach(Player,i)
	                {
						if(PlayerInfo[i][pSM] == 1)
						{
						    SendClientMessage(i,0xd99b0bAA,str);
						}
	                }
	            }
	            case 2: {
	                format(str,sizeof str,"(( S&M Elit %s: %s ))",JatekosNev(playerid),params);
	                foreach(Player,i)
	                {
						if(PlayerInfo[i][pSM] == 1)
						{
						    SendClientMessage(i,0xd99b0bAA,str);
						}
	                }
	            }
	            case 3: {
	                format(str,sizeof str,"(( S&M Vezeto %s: %s ))",JatekosNev(playerid),params);
	                foreach(Player,i)
	                {
						if(PlayerInfo[i][pSM] == 1)
						{
						    SendClientMessage(i,0xd99b0bAA,str);
						}
	                }
	            }
	            case 4: {
	                format(str,sizeof str,"(( S&M Alapító %s: %s ))",JatekosNev(playerid),params);
	                foreach(Player,i)
	                {
						if(PlayerInfo[i][pSM] == 1)
						{
						    SendClientMessage(i,0xd99b0bAA,str);
						}
	                }
	            }
	        }
	    }
	}
	else return SCM(playerid,COL_MKEK,"Csak S&M-nek!");
	return 1;
}


CMD:sm(playerid,params[])
{
	if(PlayerInfo[playerid][pSMrang] >= 3 || IsScripter(playerid))
	{
   		new param[32];
	    new id;
	//	new str[256];
	    if(sscanf(params,"s[32]u",param,id)) return SCM(playerid,COL_MKEK,"Használat: /sm [Felvesz/Kirúg] [Játékos/ID]");
	    else if(!strcmp(param,"felvesz",true))
	    {
	        PlayerInfo[id][pSM] = 1;
	        PlayerInfo[id][pSMrang] = 1;
	        SFM(id,COL_MKEK,"%s felvett téged az S&M-be!",JatekosNev(playerid));
	       // SCM(id,COL_MKEK,str);
	        SFM(playerid,COL_MKEK,"Felvetted %st az S&M-be.",JatekosNev(id));
	        //SCM(playerid,COL_MKEK,str);
	    }
        else if(!strcmp(param,"kirúg",true))
	    {
	        PlayerInfo[id][pSM] = 0;
	        PlayerInfo[id][pSMrang] = 0;
	        SFM(id,COL_MKEK,"%s kirúgott az S&M-bõl!",JatekosNev(playerid));
	       // SCM(id,COL_MKEK,str);
	        SFM(playerid,COL_MKEK,"Kirúgtad %st az S&M-bõl.",JatekosNev(id));
	     //   SCM(playerid,COL_MKEK,str);
	    }
	}
	else return SCM(playerid,COL_MKEK,"Csak S&M Vezetõnek!");
	return 1;
}

CMD:smrang(playerid,params[])
{
    if(PlayerInfo[playerid][pSMrang] >= 3 || IsScripter(playerid))
	{
	    new id;
	    new rang;
	    if(sscanf(params,"ui",id,rang)) return SCM(playerid,COL_MKEK,"Használat: /smrang [Játékos/ID] [Rang]");
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_MKEK,"Nincs ilyen játékos.");
	    else if(rang > 4) return SCM(playerid,COL_MKEK,"Hibás rang!");
	    else if(PlayerInfo[id][pSM] == 0) return SCM(playerid,COL_MKEK,"Õ nem tagja az S&Mnek");
	    else
	    {
	        PlayerInfo[id][pSMrang] = rang;
	//		new str[256];
			SFM(playerid,COL_MKEK,"S&M: %s új rangot adott: %d",JatekosNev(playerid),rang);
		//	SCM(id,COL_MKEK,str);
			SFM(playerid,COL_MKEK,"S&M: Új rangot adtál neki: %s (%d)",JatekosNev(id),rang);
//			SCM(playerid,COL_MKEK,str);
	    }
	}
	else return SCM(playerid,COL_MKEK,"Csak S&M Vezetõnek!");
	return 1;
}

CMD:szg(playerid,params[])
{
	new szam;
	if(sscanf(params,"i",szam)) return SCM(playerid,COL_MKEK,"Használat: /szg [Dollár/Forint érték]");
	else {
		new dollar;
		new forint;
		forint = szam * 235;
		dollar = szam / 235;
		//new str[144];
		SFM(playerid,COL_MKEK,"%d dollár = %.0d forint",szam,forint);
		//SCM(playerid,COL_MKEK,str);
		SFM(playerid,COL_MKEK,"%d forint = %.0d dollár",szam,dollar);
//		SCM(playerid,COL_MKEK,str);
	}
	return 1;
}

CMD:number(playerid, params[])
{
	if(!PlayerInfo[playerid][pCuccok][BL_TELEFONKONYV])
		return SCM(playerid, COL_LRED, "Nincs telefonkönyved!");

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /number [Játékos vagy Telefonszám]");

	new bool:talalt;
	if(IsNumeric(params))
	{
		foreach(Player, i)
		{
			if(!PlayerInfo[i][pCuccok][BL_TELEFON]) continue;
			if(Belepve(i) && !IsPlayerNPC(i) && PlayerInfo[i][pCuccok][BL_TELEFON] == strval(params))
			{
				SFM(playerid, COL_MKEK, "Név: %s | Telefonszám: %d", JatekosNev(i), PlayerInfo[i][pCuccok][BL_TELEFON]);
				talalt = true;
				break;
			}
		}
	}

	if(!talalt)
	{
		new jatekos;
		sscanf(params, "u", jatekos);

		if(IsPlayerConnected(jatekos) && jatekos != INVALID_PLAYER_ID && !IsPlayerNPC(jatekos))
		{
			SFM(playerid, COL_MKEK, "Név: %s | Telefonszám: %d", JatekosNev(jatekos), PlayerInfo[jatekos][pCuccok][BL_TELEFON]);
			talalt = true;
		}
	}

	if(!talalt)
		return SCM(playerid, COL_LRED, "Nincs ilyen találat a telefonkönyvben!");

	return true;
}
#define TSZAM_RIPORTER 103
#define TSZAM_HALOZAT 121
CMD:sms(playerid, params[])
{
	if(Bortonben(playerid))
		return SCM(playerid, COL_LRED, "Jelenleg nem használhatod!");

	new szam, str[1024];

	if(sscanf(params, "ds[1024]", szam, str))
		return SCM(playerid, COL_MKEK, "Használat: /sms [Telefonszám] [Üzenet]");

	if(!OOC_Ellenorzes(playerid, "/sms", str))
		return true;

	if(!PlayerInfo[playerid][pCuccok][BL_TELEFON])
		return SCM(playerid, COL_LRED, "Nincs telefonod!");

	if(PlayerInfo[playerid][pTog][5])
		return SCM(playerid, COL_LRED, "A te telefonod ki van kapcsolva!");

	if(PlayerInfo[playerid][pTelefonPenz] < 1)
		return SCM(playerid, COL_LRED, "Az SMS ára 1$, neked nincs ennyi a telefonodon!");

	if(szam == TSZAM_RIPORTER)
	{
		foreach(Player, i)
		{
		    if(PlayerInfo[i][pFrakcio] != FRAKCIO_RIPORTER) continue;
		    SendFormatMessage(i, COLOR_YELLOW, "[RIPORTER SMS]: %s - Küldõ: %s", str, ToStr(PlayerInfo[playerid][pCuccok][BL_TELEFON], true, '-'));
		}
		SendFormatMessage(playerid, COLOR_YELLOW, "SMS Elküldve - RIPORTER: %s", str);
	    return 1;
	}
	else if(szam == TSZAM_HALOZAT)
	{
		if(egyezik(str, "?"))
		{
	    	SendFormatMessage(playerid, COLOR_YELLOW, "SMS - Szolgáltató: A kártyán található egyenleg összesen %s$", FN(PlayerInfo[playerid][pTelefonPenz], 0, ','));
		}
		else if(egyezik(str, "MYNUM"))
		{
		    SendFormatMessage(playerid, COLOR_YELLOW, "SMS - Szolgáltató: Az ön telefonszáma: %d", PlayerInfo[playerid][pCuccok][BL_TELEFON]);
		}
		else
		    SendClientMessage(playerid, COLOR_YELLOW, "SMS - Szolgáltató: Hibás funkció! Elérhetõ funkciók: '?', 'MYNUM'");
		    
		return 1;
	}
	else
	{
		new jatekos = NINCS;
		foreach(Player, i)
		{
			if(Belepve(i) && PlayerInfo[i][pCuccok][BL_TELEFON] == szam && szam != 0 && !PlayerInfo[i][pTog][5])
			{
				jatekos = i;
				break;
			}
		}
		if(jatekos == NINCS)
		return SCM(playerid, COL_LRED, "Nincs ilyen telefonszám, vagy jelenleg hálózaton kívül van!");

		PlayerInfo[playerid][pTelefonPenz] -= 1;
		SendFormatMessage(jatekos, COLOR_YELLOW, "SMS - %s: %s", ToStr(PlayerInfo[playerid][pCuccok][BL_TELEFON], true, '-'), str);
		SendFormatMessage(playerid, COLOR_YELLOW, "SMS Elküldve - %s: %s", ToStr(szam, true, '-'), str);
		//SendFormatMessage(playerid, COLOR_YELLOW, "SMS ára: 1$ - Fennmaradó telefon egyenleg: %s$", FN(PlayerInfo[playerid][pTelefonPenz], 0, ','));
	}
	return true;
}

CMD:ad(playerid, params[])
{
	if(PlayerInfo[playerid][pCuccok][BL_TELEFON] < 1)
		return SCM(playerid, COL_LRED, "Neked még nincs telefonod!");

	if(PlayerInfo[playerid][pjatekosszint] < 3)
		return SCM(playerid, COL_LRED, "Hirdetéshez legalább hármas szinttel kell rendelkezned!");

	if(Bortonben(playerid) > 0)
		return SCM(playerid, COL_LRED, "Börtönben nem adhatsz fel hírdetést!");

	new result[128],
		hirdetes[85];

	if(sscanf(params, "s[128]", hirdetes))
		return SCM(playerid, COL_MKEK, "Használat: /ad [ Hírdetés szövege]");

	if(strlen(hirdetes) < 10 || strlen(hirdetes) > 85)
		return SFM(playerid, COL_LRED, "Minimum 10 és maximum 85 karakter lehet! Jelenleg %d karakter hosszúságú.", strlen(hirdetes));

	if(!OOC_Ellenorzes(playerid, "/ad", hirdetes))
		return true;

	if(ServerInfo[sHirdetes] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Jelenleg van feladva hírdetés! Próbáld meg kicsit késõbb!");

 	if(strfind(hirdetes, "drog", true) != NINCS || strfind(hirdetes, "heroin", true) != NINCS || strfind(hirdetes, "mati", true) != NINCS || strfind(hirdetes, "bankrob", true) != NINCS)
		return SCM(playerid, COL_LRED, "Nincs illegális hirdetés! Üzletelj az utcán, vagy használj kódneveket!");

	if(strfind(hirdetes, "felmosó", true) != NINCS || strfind(hirdetes, "airsoft", true) != NINCS || strfind(hirdetes, "porcukor", true) != NINCS)
		return SCM(playerid, COL_LRED, "A valóságban sem jönnének rá, hogy mit is hirdetsz valójában.. Ne hirdess ilyet!");

	new osszegperkarakter = CegInfo[ BIZ_HIR ][cBelepo];
	if(osszegperkarakter < 1) osszegperkarakter = 1;
	new osszeg = (floatround((strlen(hirdetes)/5)) * CegInfo[ BIZ_HIR ][cBelepo]);
	if(PlayerInfo[playerid][pBszPenz] < osszeg)
		return SFM(playerid, COL_LRED, "* A hirdetés "#COL_MKEK"%s"#COL_FEHER"$-ba kerül! Neked nincs ennyi a bankszámládon!", FN( osszeg, 0, ',' ));
	
	new timek[3];
	gettime(timek[0], timek[1], timek[2]);
	PlayerInfo[playerid][pBszPenz] -= osszeg;
	CegPenz(BIZ_HIR, osszeg);
	format(result, sizeof(result), "SMS - Hirdetés: %s | Hirdetõ: %s | Tel: %d [%d:%d]",  hirdetes, JatekosNev(playerid), PlayerInfo[playerid][pCuccok][BL_TELEFON], timek[0], timek[1]);
	foreach(Player,i)
	{
		if(!PlayerInfo[i][pTog][11] == true)
		{
			SendClientMessage(i,COLOR_YELLOW, result);
		}
	}
	format(result, sizeof(result), "~r~A hirdetés ára %d$~n~~w~%d karakterbõl állt", osszeg, strlen(hirdetes));
	GameTextForPlayer(playerid, result, 5000, 5);

	defer GTimer[60000](GT_HIRDETES, NINCS);
	ServerInfo[sHirdetes] = true;

	return true;
}
stock UresKosarSlot(playerid)
{
	new i = NINCS, id = NINCS;
	for(;++i < MAX_KOSAR_CUCC;)
	{
		if(BevasarloKosarCuccok[playerid][i] != NINCS) continue;
		id = i;
		break;
	}
	return id;
}
stock KosarnalVan(playerid)
{
	new i = -1, bolt = -1;
	for(; ++i < BOLTOK;)
	{
		if(BoltKosarak[i][0] == 0.0 && BoltKosarak[i][1] == 0.0 && BoltKosarak[i][2] == 0.0) continue;
		if(!IsPlayerInRangeOfPoint(playerid,2.0, BoltKosarak[i][0], BoltKosarak[i][1], BoltKosarak[i][2])) continue;
		bolt = i;
		break;
	}
	return bolt;
}
stock PolcokSzama(bolt)
{
    new i = -1, polcok = 0;
    for(; ++i < MAX_POLC;)
    {
    	if(BoltPolcok[bolt][i][0] == 0.0 && BoltPolcok[bolt][i][1] == 0.0 && BoltPolcok[bolt][i][2] == 0.0) continue;
     	polcok++;
    }
    return polcok;
}
CMD:kosar(playerid, params[])
{
    #pragma unused params
    if(BevasarloKosar[playerid][0] == -1)
    {
		new ureskez = UresKez(playerid);
		if(ureskez == -1) return SCM(playerid, COL_MKEK, "Tele a kezed!");
		new kosarnal = KosarnalVan(playerid);
		if(kosarnal == -1) return SCM(playerid, COL_MKEK, "Nincs kosár a közelben");
		SetPlayerAttachedObject(playerid, ureskez, 1885, 14, 0.865000, -0.005999, -0.028999, 118.300094, -80.400024, -176.199996, 0.605001, 0.506000, 0.848002, 0, 0);

		BevasarloKosar[playerid][0] = ureskez;
		BevasarloKosar[playerid][1] = kosarnal;
		BevasarloKosar[playerid][2] = 0;
		BevasarloKosar[playerid][3] = 0;
		BevasarloPolc[playerid][0] = 0.0, BevasarloPolc[playerid][1] = 0.0, BevasarloPolc[playerid][2] = 0.0;
		SCM(playerid, COL_MKEK, "Felvettél egy kosarat! (( A kosárba a /vesz paranccsal pakolhatsz! ))");
   	}
   	else
	{
		RemovePlayerAttachedObject(playerid, BevasarloKosar[playerid][0]);
		BevasarloKosar[playerid][0] = -1;
		BevasarloKosar[playerid][1] = -1;
		BevasarloKosar[playerid][2] = 0;
		BevasarloKosar[playerid][3] = 0;
		new i = NINCS;
 		for(;++i < MAX_KOSAR_CUCC;)
		{
			BevasarloKosarCuccok[playerid][i] = NINCS;
		}
   	}
   	return 1;
}
			
CMD:fizet(playerid, params[])
{
    #pragma unused params
    if(BevasarloKosar[playerid][0] == -1) return SCM(playerid, COL_MKEK, "Mit akarsz kifizetni? Nincs nálad kosár! (( /kosár ))");

    
	new i = NINCS, bool:van;
	for(;++i < BOLTOK;)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, Boltok[i][boltX], Boltok[i][boltY], Boltok[i][boltZ])) continue;
		van = true;
		break;
	}
			
	if(!van)
	    return SCM(playerid, COL_MKEK, "Nem vagy a kasszánál.");

	i = NINCS, BevasarloKosar[playerid][3] = 0;
	for(;++i < MAX_KOSAR_CUCC;)
	{
	    if(BevasarloKosarCuccok[playerid][i] == NINCS) continue;
		new listitem = BevasarloKosarCuccok[playerid][i];
	    BevasarloKosar[playerid][3] += TargyLista[ listitem ][1][0];
 	}
  	if(BevasarloKosar[playerid][3] == 0) return SCM(playerid, COL_MKEK, "Üres a kosarad...");
  	
    if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < BevasarloKosar[playerid][3])	return SFM(playerid, COL_LRED, "Nincs nálad %s $ készpénz!",FN(BevasarloKosar[playerid][3]));
	else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < BevasarloKosar[playerid][3]) return SFM(playerid, COL_LRED,"Nincs %s $ a bankszámládon!",FN(BevasarloKosar[playerid][3]));

	new nyugta[1024] = "{FFFFFF}\t\tNYUGTA\n";
	
 	i = NINCS;
	for(;++i < MAX_KOSAR_CUCC;)
	{
	    if(BevasarloKosarCuccok[playerid][i] == NINCS) continue;

	    new listitem = BevasarloKosarCuccok[playerid][i];
	    new targy = TargyLista[listitem][2][0];
		new ertek = TargyLista[listitem][3][0];
		new tipus = TargyLista[listitem][4][0];
		new limit = TargyLista[listitem][5][0];

		if(limit != 0 && tipus == CUCC_BL && PlayerInfo[playerid][pCuccok][targy] + ertek > limit)
		{
		    SFM(playerid, COL_LRED, "Maximum %d %s lehet nálad!", limit, TargyLista[listitem][0]);
		    BevasarloKosar[playerid][3] -= ertek;
		    continue;
		}
		
		if(targy == BL_TRAFFIPAX)
		{
		    if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
			{
				SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");
				BevasarloKosar[playerid][3] -= ertek;
				continue;
   			}
		 	PlayerInfo[playerid][pCuccok][targy] += ertek;
		}
		else if(targy == BL_TELEFON)
   		{
			new telefonszamod = UjTelefonSzam();
			PlayerInfo[playerid][pCuccok][BL_TELEFON] = telefonszamod;
			SFM(playerid, COL_MKEK, "Új telefonszámod: %d", telefonszamod);
			nformat(queaary, 512, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pCuccok = '%s' WHERE Id = '%d'", GetPlayerBoltCucc( playerid ), PlayerInfo[playerid][pID]);
			mysql_tquery(sql_ID, queaary, "", "");
		}
		else if(targy == -201)
		{
			PlayerInfo[playerid][pTelefonPenz] += ertek;
		}
		else if(tipus == CUCC_FEGYVER)
		{
			GiveWeapon(playerid, targy, ertek, false, true);
		}
		else
			PlayerInfo[playerid][pCuccok][targy] += ertek;

		format(nyugta, 1024, "%s\n{FFFFFF}%s: "#COL_MKEK"%s$", nyugta, TargyLista[listitem][0], FN(ertek, 0, ','));
		
	}
	format(nyugta, 1024, "%s\n\n{FFFFFF}ÖSSZESEN: "#COL_MKEK"%s$", nyugta, FN(BevasarloKosar[playerid][3], 0, ','));
    ShowPlayerDialog(playerid, DIALOG_NYUGTA, DIALOG_STYLE_MSGBOX, #COL_FEHER"Nyugta", nyugta, "Elrak", "");
    
    PenzHozzaad(playerid,-BevasarloKosar[playerid][3]);
	CegPenz(BIZ_247, BevasarloKosar[playerid][3]);

	RemovePlayerAttachedObject(playerid, BevasarloKosar[playerid][0]);
   	BevasarloKosar[playerid][0] = -1;
 	BevasarloKosar[playerid][1] = -1;
 	BevasarloKosar[playerid][2] = 0;
 	BevasarloKosar[playerid][3] = 0;

 	i = NINCS;
	for(;++i < MAX_KOSAR_CUCC;)
	{
	    BevasarloKosarCuccok[playerid][i] = NINCS;
	}
    DisablePlayerCheckpoint(playerid);

    return 1;
}
#define SKIN_NEM_NINCS 0
#define SKIN_NEM_FERFI 1
#define SKIN_NEM_NOI 2

stock GetSkinGender(skinid)
{
	switch(skinid)
 	{
  		case 74: return SKIN_NEM_NINCS;
    	case 0..8, 14..30, 32..38, 42..52, 57..62, 66..68, 70..73, 78..84, 86, 94..128, 132..137, 142..144, 146, 147, 149, 153..156, 158..168, 170, 171, 173..177, 179..189, 200, 202..204, 206..210, 212, 213, 217, 220.223, 227..230, 234..236, 239..242, 247..250, 252..255, 258..262, 264..297, 299: return SKIN_NEM_FERFI;
     	default: return SKIN_NEM_NOI;
  	}
  	return SKIN_NEM_NINCS;
}
CMD:vesz(playerid, params[])
{
	#pragma unused params
	new i = NINCS, bool:van;
	
	for(;++i < sizeof(RuhaBoltok);)
		if(IsPlayerInRangeOfPoint(playerid, 3.0, RuhaBoltok[i][boltX], RuhaBoltok[i][boltY], RuhaBoltok[i][boltZ]))
			van = true;

	if(van)
	{
	    ShowPlayerDialog(playerid,DIALOG_RUHABOLT,DIALOG_STYLE_LIST,"Ruhabolt","Ruha vásárlás\nHátizsák\nDivatbolt","Ok","Mégse");
		return true;
	}

    new bolt = BevasarloKosar[playerid][1];
    if(bolt != -1)
    {
	    if(BevasarloPolc[playerid][0] != 0.0 && BevasarloPolc[playerid][1] != 0.0 && BevasarloPolc[playerid][2] != 0.0)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, BevasarloPolc[playerid][0], BevasarloPolc[playerid][1], BevasarloPolc[playerid][2]))
			{
			    new dstr[1024], tmp[128], b = NINCS;
			    
			    #if SAMPVER >= 371
			        format(dstr, 1024, "Megnevezés\tÁr");
				#endif
				for(;++b < sizeof(TargyLista);)
				{
					format(tmp, sizeof(tmp), "\n%s\t%s$", TargyLista[b][0], FN(TargyLista[b][1][0], 0, ','));
					strcat(dstr, tmp, sizeof(dstr));
				}
				#if SAMPVER >= 371
					ShowPlayerDialog(playerid, DIALOG_BOLT, DIALOG_STYLE_TABLIST_HEADERS, "24/7 Kínálat", dstr, "Megvesz", "Mégse");
				#else
				    ShowPlayerDialog(playerid, DIALOG_BOLT, DIALOG_STYLE_LIST, "24/7 Kínálat", dstr, "Megvesz", "Mégse");
				#endif
			}
			else SetPlayerCheckpoint(playerid, posArr{BevasarloPolc[playerid]},3.0);
	 	}
	 	else
	 	{
	 	    new randompolc = random(MAX_POLC);
			new polc = NINCS;
			while(polc == NINCS)
			{
			    if(BoltPolcok[bolt][randompolc][0] == 0.0 && BoltPolcok[bolt][randompolc][1] == 0.0 && BoltPolcok[bolt][randompolc][2] == 0.0)
			    {
			        randompolc = random(MAX_POLC);
			    }
			    polc = randompolc;
			    break;
			}
		    SetPlayerCheckpoint(playerid, BoltPolcok[BevasarloKosar[playerid][1]][randompolc][0],BoltPolcok[BevasarloKosar[playerid][1]][randompolc][1],BoltPolcok[BevasarloKosar[playerid][1]][randompolc][2],3.0);
		    BevasarloPolc[playerid][0] = BoltPolcok[BevasarloKosar[playerid][1]][randompolc][0];
		    BevasarloPolc[playerid][1] = BoltPolcok[BevasarloKosar[playerid][1]][randompolc][1];
		    BevasarloPolc[playerid][2] = BoltPolcok[BevasarloKosar[playerid][1]][randompolc][2];
	 	}
	}
    /*i = NINCS;
	for(;++i < sizeof(Boltok);)
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Boltok[i][boltX], Boltok[i][boltY], Boltok[i][boltZ]))
			van = true;
			
	if(van)
	{
		new dstr[1024], tmp[128], b = NINCS;
		for(;++b < sizeof(TargyLista);)
		{
			format(tmp, sizeof(tmp), "\n%s\t[%s$]", TargyLista[b][0], FN(TargyLista[b][1][0], 0, ','));
			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid, DIALOG_BOLT, DIALOG_STYLE_LIST, "24/7 Kínálat", dstr, "Megvesz", "Mégse");
	}*/
	return true;
}

stock MarkPlayer(const kit, const kinek, const color, const bool:forditvais = false, const tipus = JELZES_TOROLHETO)
{
	if((kit == INVALID_PLAYER_ID) || !IsPlayerConnected(kit) || IsPlayerNPC(kit)) return false;
	if((kinek == INVALID_PLAYER_ID) || !IsPlayerConnected(kinek) || IsPlayerNPC(kinek)) return false;
	
    if(color == COLOR_INVISIBLE)
	{
		PlayerInfo[kinek][pRadarJelzes][kit] = false;
		PlayerInfo[kinek][pRadarJelzesCol][kit] = color;
        PlayerInfo[kinek][pRadarJelzesTipus][kit] = JELZES_TOROLHETO;

		if(forditvais)
		{
		    PlayerInfo[kit][pRadarJelzes][kinek] = false;
			PlayerInfo[kit][pRadarJelzesCol][kinek] = color;
			PlayerInfo[kit][pRadarJelzesTipus][kinek] = JELZES_TOROLHETO;
		}
	}
	else
	{
	    PlayerInfo[kinek][pRadarJelzes][kit] = true;
		PlayerInfo[kinek][pRadarJelzesCol][kit] = color;
        PlayerInfo[kinek][pRadarJelzesTipus][kit] = tipus;
		if(forditvais)
		{
		    PlayerInfo[kit][pRadarJelzes][kinek] = true;
			PlayerInfo[kit][pRadarJelzesCol][kinek] = color;
			PlayerInfo[kit][pRadarJelzesTipus][kinek] = tipus;
		}
	}
	StreamUpdate(kit, kinek);
	if(forditvais)
		StreamUpdate(kinek, kit);
		
	return true;
}
CMD:lista(playerid, params[])
{
	new fk = PlayerInfo[playerid][pFrakcio], jatekos, str[128], szam, param[24];
	if(fk != FRAKCIO_LSPD && fk != FRAKCIO_LAFD && fk != FRAKCIO_LSFD && fk != FRAKCIO_FBI && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "A te szervezeted nem vezet listát!");
		
	if(sscanf(params, "s[24]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /lista [ Megnéz / Fogad / Töröl / Mutat(Marker törlése) ]");

	if(!strcmp(param, "mutat"))
	{
		if(PlayerInfo[playerid][pKiertMegy] == NINCS)
			return SCM(playerid, COL_LRED, "Nincs jel a térképen!");

		foreach(Player, p)
		{
			if(PlayerInfo[playerid][pKiertMegy] == p)
			{
			    MarkPlayer(p, playerid, COLOR_INVISIBLE, true);
			}
		}
		PlayerInfo[playerid][pKiertMegy] = NINCS;
		return true;
	}
	else if(!strcmp(param, "megnéz") || !strcmp(param, "megnez"))
	{
		SendClientMessage(playerid, COLOR_WHITE, "======================== [ "#COL_MKEK"Lista"#COL_FEHER" ] ========================");
		foreach(Player, i)
		{
			if(!Belepve(i)) continue;
			if(fk == FRAKCIO_LAFD && PlayerInfo[i][pSegelyhivas] == 102)
				SendFormatMessage(playerid, COLOR_WHITE, "Hívó: "#COL_MKEK"%s"#COL_FEHER" | Oka: "#COL_MKEK"%s", JatekosNev(i, true), PlayerInfo[i][pSegelyhivasOk]), szam++;
			else if(fk == FRAKCIO_LAFD && PlayerInfo[i][pSegelyhivas] == 103)
				SendFormatMessage(playerid, COLOR_WHITE, "Hívó: "#COL_MKEK"%s"#COL_FEHER" | Oka: "#COL_MKEK"%s", JatekosNev(i, true), PlayerInfo[i][pSegelyhivasOk]), szam++;
			else if(fk == FRAKCIO_LSPD && PlayerInfo[i][pSegelyhivas] == 104)
			{
				SendFormatMessage(playerid, COLOR_WHITE, "Bejelentõ: "#COL_MKEK"%s"#COL_FEHER" | Bejelentett személy: "#COL_MKEK"%s", JatekosNev(i, true), PlayerInfo[i][pSegelyhivasOt]);
				SendFormatMessage(playerid, COLOR_WHITE, "Információ: "#COL_MKEK"%s", PlayerInfo[i][pSegelyhivasOk]);
				szam++;
			}
		}

		if(!szam)
			SCM(playerid, COL_LRED, "Jelenleg üres a lista.");
	}
	else if(!strcmp(param, "fogad"))
	{
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /lista fogad [Játékos] | Játékos hívásának fogadása");

		if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(!PlayerInfo[jatekos][pSegelyhivas])
			return SCM(playerid, COL_LRED, "Ez a játékos nem szerepel a listán!");

		if((fk == FRAKCIO_LAFD && PlayerInfo[jatekos][pSegelyhivas] != 102) && (fk == FRAKCIO_LAFD && PlayerInfo[jatekos][pSegelyhivas] != 103) && (fk == FRAKCIO_LAFD && PlayerInfo[jatekos][pSegelyhivas] != 104))
			return SCM(playerid, COL_LRED, "Ez a hívás nem hozzátok futott be!");

		if(fk != FRAKCIO_LSPD)
		{
			format(str, sizeof(str), "** %s "#COL_VKEK"%s"#COL_FEHER" fogadta "#COL_VKEK"%s"#COL_FEHER" hívását!", (fk == FRAKCIO_LAFD ? ("Mentõs") : ("Tûzoltó")), JatekosNev(playerid, true), JatekosNev(jatekos, true));
			SendClientMessageToAll(COLOR_WHITE, str);
			SCM(jatekos, COL_MKEK, "Úton a segítség! Tarts ki!");
		}
		else
		{
			format(str, sizeof(str), "** %s "#COL_VKEK"%s"#COL_FEHER" foglalkozik "#COL_VKEK"%s"#COL_FEHER" bejelentésével!", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), JatekosNev(jatekos, true));
			SendClientMessageToAll(COLOR_WHITE, str);
			SCM(jatekos, COL_MKEK, "A rendõrség foglalkozik a bejelentéseddel!");
		}

		PlayerInfo[jatekos][pSegelyhivas] = 0;
		PlayerInfo[playerid][pKiertMegy] = jatekos;
		MarkPlayer(jatekos, playerid, COLOR_ORANGE, true);
		
		new Float:x,Float:y,Float:z;
		GetPlayerPos(jatekos,x,y,z);
		SetPlayerCheckpoint(playerid,x,y,z,5);
		return true;
	}
	if(!strcmp(param, "töröl") || !strcmp(param, "torol"))
	{
		new ok[64];
		if(sscanf(params, "{s[24]}us[64]", jatekos, ok))
			return SCM(playerid, COL_MKEK, "Használat: /lista töröl [Játékos] [Oka] | Játékos hívásának törlése");

		if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))	return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(!PlayerInfo[jatekos][pSegelyhivas])
			return SCM(playerid, COL_LRED, "Ez a játékos nem szerepel a listán!");

		if((fk == FRAKCIO_LAFD && PlayerInfo[jatekos][pSegelyhivas] != 102) || (fk == FRAKCIO_LAFD && PlayerInfo[jatekos][pSegelyhivas] != 103) || (fk == FRAKCIO_LAFD && PlayerInfo[jatekos][pSegelyhivas] != 104))
			return SCM(playerid, COL_LRED, "Ez a hívás nem hozzátok futott be!");

		if(fk != FRAKCIO_LSPD)
		{
			format(str, sizeof(str), "** %s "#COL_VKEK"%s"#COL_FEHER" törölte "#COL_VKEK"%s"#COL_FEHER" hívását! Oka: %s", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), JatekosNev(jatekos, true), ok);
			SendClientMessageToAll(COLOR_WHITE, str);
			SFM(jatekos, COL_MKEK, "A hívásod törölték! Oka: %s", ok);
		}
		else
		{
			format(str, sizeof(str), "** %s "#COL_VKEK"%s"#COL_FEHER" foglalkozik "#COL_VKEK"%s"#COL_FEHER" bejelentésével!", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), JatekosNev(jatekos, true), ok);
			FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
			SCM(jatekos, COL_MKEK, "A rendõrség foglalkozik a bejelentéseddel!");
		}
		PlayerInfo[jatekos][pSegelyhivas] = 0;
		return true;
	}

	return true;
}
CMD:jelent(playerid, params[])
{
	new bid, oka[64];
	if(sscanf(params, "ds[64]", bid, oka))
		return SCM(playerid, COL_MKEK, "Használat: /jelent [Azonosító] [Oka] | Azonosító az amit a feje felett látsz");

	if(isnull(oka))
		return SCM(playerid, COL_LRED, "Az oka legalább 2 betû kell, hogy legyen!");

	new jatekos = NINCS;
	foreach(Player, i)
	{
		if(!Belepve(i)) continue;
		if(PlayerInfo[i][pBID] == bid)
		{
			jatekos = i;
			break;
		}
	}

	if(jatekos == NINCS || jatekos == playerid)
		return SCM(playerid, COL_LRED, "Nincs ilyen azonosítójú játékos!");

	if(PlayerInfo[playerid][pFigyelmeztetes] > 1)
		return SCM(playerid, COL_LRED, "Már értesítetted az Adminokat kétszer, nem kell floodolni! Használd a /report-ot!");

	PlayerInfo[playerid][pFigyelmeztetes]++;
	AdminUzenet(COLOR_ROZSA, 1001, "[Bejelentés]: [%d]%s -> [%d]%s | Oka: %s", playerid, JatekosNev(playerid), jatekos, JatekosNev(jatekos), oka);
	SCM(playerid, COL_LRED, "Bejelentésed elküldve az Adminok részére!");

	if(PlayerInfo[playerid][pFigyelmeztetes] == 1) //elég csak egyszer jelentenie
	{
		nformat(str, 128, "[%d]%s -> Bid: %d - [uID: %d][%d]%s - Oka: %s", playerid, JatekosNev(playerid), bid, PlayerInfo[jatekos][pID], jatekos, JatekosNev(jatekos), oka);
		Log(FILE_BID, str);
	}

	return true;
}


CMD:idk(playerid, params[])
{
	#pragma unused params
	if(PlayerInfo[playerid][pPaintBall][0] || GetPlayerVirtualWorld(playerid) == WAR_VW)
		return SCM(playerid, COL_LRED, "Paintballban, Warban nem használható!");

	if((PlayerInfo[playerid][pBejelento] = true - PlayerInfo[playerid][pBejelento]))
	{
		FeliratMutat( playerid, true );
		if(!Admin(playerid, 1)) SCM(playerid, COL_MKEK, "Feliratok "#COL_MKEK"30"#COL_FEHER" másodpercre bekapcsolva! Bejelentéshez használd a "#COL_MKEK"/jelent"#COL_FEHER" parancsot!");
		else SCM(playerid, COL_MKEK, "Feliratok bekapcsolva!");

		PlayerInfo[playerid][pFeliratIdo] = (Admin(playerid, 1) ? NINCS : 30);

	} else {

		SCM(playerid, COL_MKEK, "Feliratok kikapcsolva!");
		FeliratMutat( playerid, false );

	}
	Streamer_Update(playerid);
	return true;
}

CMD:nevek(playerid, params[])
{
	#pragma unused params

	if(PlayerInfo[playerid][pNevek]) {
		SCM(playerid, COL_MKEK, "Nevek kikapcsolva!");
		MutatNevek(playerid, false);
		PlayerInfo[playerid][pNevek] = false;
	} else {
		SCM(playerid, COL_MKEK, "Nevek bekapcsolva!");
		MutatNevek(playerid, true);
		PlayerInfo[playerid][pNevek] = true;
	}

	return true;
}

// Matteo új parancsok
CMD:szerel(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_SZERELO && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new param[24];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /szerel [ Motor / Kasztni / Kerekek /Lámpák / Számla / Rendszám / Neon ]");

	sscanf(params, "s[24]{}", param);
	if(!strcmp(param, "szamla", true) || !strcmp(param, "számla", true))
	{
		new jatekos, penz;
		if(sscanf(params, "{s[24]}ud", jatekos, penz))
			return SCM(playerid, COL_MKEK, "Használat: /szerel szamla [Játékos] [Összeg]");

		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(playerid == jatekos)
			return SCM(playerid, COL_LRED, "Jaj te kis huncut, ne számlázz magadnak :3");

		if(penz < 200 || penz > 10000)
			return SCM(playerid, COL_LRED, "A számla összege minimum 200$ és maximum 10 000$ lehet!");

		if(PlayerInfo[jatekos][pBszPenz] < penz)
			return SCM(playerid, COL_LRED, "Ennek a személynek nincs elég pénze a bankszámláján a csekk kifizetéséhez!");

		SFM(playerid, COL_MKEK, "Átadtad a számlát "#COL_MKEK"%s"#COL_FEHER"-t "#COL_MKEK"%s"#COL_FEHER"$-ra (Várj míg elfogadja)", JatekosNev(jatekos, true), FN(penz, 0, ','));
		SFM(jatekos, COL_MKEK, "%s átnyújtott neked egy számlát amely "#COL_MKEK"%s"#COL_FEHER"$-ba kerül!", JatekosNev(playerid, true), FN(penz, 0, ','));
		SCM(jatekos, COL_MKEK, "Amennyiben ki szeretnéd fizetni írd be "#COL_MKEK"/elfogad számla!");
		Cselekves(playerid, "átnyújtott egy számlát valakinek..", 1);
		PlayerInfo[jatekos][pBirsag][0] = playerid;
		PlayerInfo[jatekos][pBirsag][1] = penz;
		PlayerInfo[jatekos][pBirsag][2] = 1;

		return true;
	}
	else if(!strcmp(param, "motor", true) || !strcmp(param, "Motor", true))
	{
		new osszeg, kocsi = GetClosestVehicle(playerid, false), vid = JarmuID(kocsi, playerid);
		new KiszallasOsszeg = 0;

		if(vInfo[vid][vModel] == 525)	//Ha nem ott vette ki ahol szerelni fog akkor itt frissít poz-t
			GetVehiclePos(kocsi,PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]);
		if(vInfo[vid][vModel] == 525 && PozTowtrack[playerid][0] != 1 && !IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))
		{
			Cselekves(playerid, "Levette az alkatrészeket a Towtruck-ról", 0);
			SCM(playerid, COL_MKEK, "Egy autot meg tudsz szerelni, bárhol a Towtruck közelében.");
			GetVehiclePos(kocsi,PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]);
			PozTowtrack[playerid][0] = 1; //Alkatrészeket ad..
			return true;
		}
		if(
		!IsPlayerInRangeOfPoint(playerid, 20, 2025.0708,-2184.6799,13.5607) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 2038.7336,-2185.1816,13.5685) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 1978.47, -2185.54, 13.57) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 1992.26, -2184.63, 13.56) &&
		
		!IsPlayerInRangeOfPoint(playerid, 20, 27.2832,-243.5184,2.7010) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 26.6197,-227.7953,2.7277) &&
		PozTowtrack[playerid][0] != 1 && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nem vagy szerelõ telepen, vagy vegyél le szerszámot és alkatrészt egy Towtruck-ról.");

		if(PozTowtrack[playerid][0] == 1)
			if(!IsPlayerInRangeOfPoint(playerid, 10, PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]))
				return SCM(playerid, COL_LRED, "Túl messze vagy a Towtruck-tól!");

		if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
			return SCM(playerid, COL_LRED, "Kocsi mellett kell állnod");

		if(GetDistanceToCar(playerid,kocsi) > 4.0)
			return SCM(playerid,COL_LRED,"Nincs a közeledben jármû!");

		if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
			return SCM(playerid, COL_LRED, "Járó motornál szerelnél? Nem vagy te szívsebész!!!");

		//Veh fajta ellenõrzés
		if(IsAKocsi(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_KOCSI;
		else if(IsABicikli(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_BICIKLI;
		else if(IsAMotor(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_MOTOR;
		else if(IsARepulo(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_REPULO;
		else
			osszeg = SZERELES_OSSZEG_KOCSI;
		//Ha saját kocsi akkor fele a szerelési díj
		if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
			osszeg = (osszeg / 2);
		//Ha van szerszámos láda és nincs a telepen akkor távolság ellenõrzés a teleptõl és a kiszállás kiszámolása
		if(PozTowtrack[playerid][0] == 1 && !IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))
		{
			new Float:KiszallasiTavolsag = GetPlayerDistanceFromPoint(playerid, 1385.696, -1896.973, 13.494);
			KiszallasOsszeg = (floatround(KiszallasiTavolsag)/10);
		}
		//Player Bsz egyenleg ellenõrzés
		if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] < -50000)
			if(KiszallasOsszeg < 1)
				return SFM(playerid, COL_LRED, "Nincs elegendõ pénzed a széfben(%d-$ + kiszállási díj: %d-$), hogy megjavítsd a kocsit.", osszeg, KiszallasOsszeg);
			else
				return SFM(playerid, COL_LRED, "Nincs elegendõ pénzed a széfben (%d-$), hogy megjavítsd a kocsit.", osszeg);
		PozTowtrack[playerid][0] = 0;	//Elveszi az alkatrészeket
		TogglePlayerControllable(playerid,false);
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
		defer Kocsijavit[20000](playerid,kocsi,vid,osszeg,KiszallasOsszeg);
	}
	else if(!strcmp(param, "kasztni", true) || !strcmp(param, "Kasztni", true))
	{
		new osszeg, kocsi = GetClosestVehicle(playerid, false), vid = JarmuID(kocsi, playerid);
		new KiszallasOsszeg = 0;

		if(vInfo[vid][vModel] == 525)	//Ha nem ott vette ki ahol szerelni fog akkor itt frissít poz-t
			GetVehiclePos(kocsi,PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]);
		if(vInfo[vid][vModel] == 525 && PozTowtrack[playerid][0] != 1 && !IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))
		{
			Cselekves(playerid, "Levette az alkatrészeket a Towtruck-ról", 0);
			SCM(playerid, COL_MKEK, "Egy autot meg tudsz szerelni, bárhol a Towtruck közelében.");
			GetVehiclePos(kocsi,PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]);
			PozTowtrack[playerid][0] = 1; //Alkatrészeket ad..
			return true;
		}
		if(
		!IsPlayerInRangeOfPoint(playerid, 20, 2025.0708,-2184.6799,13.5607) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 2038.7336,-2185.1816,13.5685) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 1978.47, -2185.54, 13.57) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 1992.26, -2184.63, 13.56) &&

		!IsPlayerInRangeOfPoint(playerid, 20, 27.2832,-243.5184,2.7010) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 26.6197,-227.7953,2.7277) &&
		PozTowtrack[playerid][0] != 1 && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nem vagy szerelõ telepen, vagy vegyél le szerszámot és alkatrészt egy Towtruck-ról.");

		if(PozTowtrack[playerid][0] == 1)
			if(!IsPlayerInRangeOfPoint(playerid, 10, PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]))
				return SCM(playerid, COL_LRED, "Túl messze vagy a Towtruck-tól!");

		if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
			return SCM(playerid, COL_LRED, "Kocsi mellett kell állnod");

		if(GetDistanceToCar(playerid,kocsi) > 4.0)
			return SCM(playerid,COL_LRED,"Nincs a közeledben jármû!");

		if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
			return SCM(playerid, COL_LRED, "Járó motornál szerelnél? Nem vagy te szívsebész!!!");

		//Veh fajta ellenõrzés
		if(IsAKocsi(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_KOCSI;
		else if(IsABicikli(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_BICIKLI;
		else if(IsAMotor(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_MOTOR;
		else if(IsARepulo(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_REPULO;
		else
			osszeg = SZERELES_OSSZEG_KOCSI;
		//Ha saját kocsi akkor fele a szerelési díj
		if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
			osszeg = (osszeg / 2);
		//Ha van szerszámos láda és nincs a telepen akkor távolság ellenõrzés a teleptõl és a kiszállás kiszámolása
		if(PozTowtrack[playerid][0] == 1 && !IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))
		{
			new Float:KiszallasiTavolsag = GetPlayerDistanceFromPoint(playerid, 1385.696, -1896.973, 13.494);
			KiszallasOsszeg = (floatround(KiszallasiTavolsag)/10);
		}
		//Player Bsz egyenleg ellenõrzés
		if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] < -50000)
			if(KiszallasOsszeg < 1)
				return SFM(playerid, COL_LRED, "Nincs elegendõ pénzed a széfben(%d-$ + kiszállási díj: %d-$), hogy megjavítsd a kocsit.", osszeg, KiszallasOsszeg);
			else
				return SFM(playerid, COL_LRED, "Nincs elegendõ pénzed a széfben (%d-$), hogy megjavítsd a kocsit.", osszeg);
		PozTowtrack[playerid][0] = 0;	//Elveszi az alkatrészeket
		TogglePlayerControllable(playerid,false);
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
		defer Kasztni[20000](playerid,vid,osszeg,KiszallasOsszeg);
	}
	else if(!strcmp(param, "kerekek", true) || !strcmp(param, "Kerekek", true))
	{
		new osszeg, kocsi = GetClosestVehicle(playerid, false), vid = JarmuID(kocsi, playerid);
		new KiszallasOsszeg = 0;

		if(vInfo[vid][vModel] == 525)	//Ha nem ott vette ki ahol szerelni fog akkor itt frissít poz-t
			GetVehiclePos(kocsi,PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]);
		if(vInfo[vid][vModel] == 525 && PozTowtrack[playerid][0] != 1 && !IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))
		{
			Cselekves(playerid, "Levette az alkatrészeket a Towtruck-ról", 0);
			SCM(playerid, COL_MKEK, "Egy autot meg tudsz szerelni, bárhol a Towtruck közelében.");
			GetVehiclePos(kocsi,PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]);
			PozTowtrack[playerid][0] = 1; //Alkatrészeket ad..
			return true;
		}
		if(
		!IsPlayerInRangeOfPoint(playerid, 20, 2025.0708,-2184.6799,13.5607) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 2038.7336,-2185.1816,13.5685) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 1978.47, -2185.54, 13.57) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 1992.26, -2184.63, 13.56) &&

		!IsPlayerInRangeOfPoint(playerid, 20, 27.2832,-243.5184,2.7010) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 26.6197,-227.7953,2.7277) &&
		PozTowtrack[playerid][0] != 1 && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nem vagy szerelõ telepen, vagy vegyél le szerszámot és alkatrészt egy Towtruck-ról.");

		if(PozTowtrack[playerid][0] == 1)
			if(!IsPlayerInRangeOfPoint(playerid, 10, PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]))
				return SCM(playerid, COL_LRED, "Túl messze vagy a Towtruck-tól!");

		if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
			return SCM(playerid, COL_LRED, "Kocsi mellett kell állnod");

		if(GetDistanceToCar(playerid,kocsi) > 4.0)
			return SCM(playerid,COL_LRED,"Nincs a közeledben jármû!");

		if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
			return SCM(playerid, COL_LRED, "Járó motornál szerelnél? Nem vagy te szívsebész!!!");

		//Veh fajta ellenõrzés
		if(IsAKocsi(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_KOCSI;
		else if(IsABicikli(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_BICIKLI;
		else if(IsAMotor(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_MOTOR;
		else if(IsARepulo(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_REPULO;
		else
			osszeg = SZERELES_OSSZEG_KOCSI;
		//Ha saját kocsi akkor fele a szerelési díj
		if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
			osszeg = (osszeg / 2);
		//Ha van szerszámos láda és nincs a telepen akkor távolság ellenõrzés a teleptõl és a kiszállás kiszámolása
		if(PozTowtrack[playerid][0] == 1 && !IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))
		{
			new Float:KiszallasiTavolsag = GetPlayerDistanceFromPoint(playerid, 1385.696, -1896.973, 13.494);
			KiszallasOsszeg = (floatround(KiszallasiTavolsag)/10);
		}
		//Player Bsz egyenleg ellenõrzés
		if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] < -50000)
			if(KiszallasOsszeg < 1)
				return SFM(playerid, COL_LRED, "Nincs elegendõ pénzed a széfben(%d-$ + kiszállási díj: %d-$), hogy megjavítsd a kocsit.", osszeg, KiszallasOsszeg);
			else
				return SFM(playerid, COL_LRED, "Nincs elegendõ pénzed a széfben (%d-$), hogy megjavítsd a kocsit.", osszeg);
		PozTowtrack[playerid][0] = 0;	//Elveszi az alkatrészeket
		TogglePlayerControllable(playerid,false);
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
		defer Kerekek[20000](playerid,vid,osszeg,KiszallasOsszeg);
	}
	else if(!strcmp(param, "lampak", true) || !strcmp(param, "lámpák", true))
	{
		new osszeg, kocsi = GetClosestVehicle(playerid, false), vid = JarmuID(kocsi, playerid);
		new KiszallasOsszeg = 0;

		if(vInfo[vid][vModel] == 525)	//Ha nem ott vette ki ahol szerelni fog akkor itt frissít poz-t
			GetVehiclePos(kocsi,PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]);
		if(vInfo[vid][vModel] == 525 && PozTowtrack[playerid][0] != 1 && !IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))
		{
			Cselekves(playerid, "Levette az alkatrészeket a Towtruck-ról", 0);
			SCM(playerid, COL_MKEK, "Egy autot meg tudsz szerelni, bárhol a Towtruck közelében.");
			GetVehiclePos(kocsi,PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]);
			PozTowtrack[playerid][0] = 1; //Alkatrészeket ad..
			return true;
		}
		if(
		!IsPlayerInRangeOfPoint(playerid, 20, 2025.0708,-2184.6799,13.5607) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 2038.7336,-2185.1816,13.5685) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 1978.47, -2185.54, 13.57) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 1992.26, -2184.63, 13.56) &&

		!IsPlayerInRangeOfPoint(playerid, 20, 27.2832,-243.5184,2.7010) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 26.6197,-227.7953,2.7277) &&
		PozTowtrack[playerid][0] != 1 && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nem vagy szerelõ telepen, vagy vegyél le szerszámot és alkatrészt egy Towtruck-ról.");

		if(PozTowtrack[playerid][0] == 1)
			if(!IsPlayerInRangeOfPoint(playerid, 10, PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]))
				return SCM(playerid, COL_LRED, "Túl messze vagy a Towtruck-tól!");

		if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
			return SCM(playerid, COL_LRED, "Kocsi mellett kell állnod");

		if(GetDistanceToCar(playerid,kocsi) > 4.0)
			return SCM(playerid,COL_LRED,"Nincs a közeledben jármû!");

		if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
			return SCM(playerid, COL_LRED, "Járó motornál szerelnél? Nem vagy te szívsebész!!!");

		//Veh fajta ellenõrzés
		if(IsAKocsi(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_KOCSI;
		else if(IsABicikli(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_BICIKLI;
		else if(IsAMotor(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_MOTOR;
		else if(IsARepulo(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_REPULO;
		else
			osszeg = SZERELES_OSSZEG_KOCSI;
		//Ha saját kocsi akkor fele a szerelési díj
		if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
			osszeg = (osszeg / 2);
		//Ha van szerszámos láda és nincs a telepen akkor távolság ellenõrzés a teleptõl és a kiszállás kiszámolása
		if(PozTowtrack[playerid][0] == 1 && !IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))
		{
			new Float:KiszallasiTavolsag = GetPlayerDistanceFromPoint(playerid, 1385.696, -1896.973, 13.494);
			KiszallasOsszeg = (floatround(KiszallasiTavolsag)/10);
		}
		//Player Bsz egyenleg ellenõrzés
		if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] < -50000)
			if(KiszallasOsszeg < 1)
				return SFM(playerid, COL_LRED, "Nincs elegendõ pénzed a széfben(%d-$ + kiszállási díj: %d-$), hogy megjavítsd a kocsit.", osszeg, KiszallasOsszeg);
			else
				return SFM(playerid, COL_LRED, "Nincs elegendõ pénzed a széfben (%d-$), hogy megjavítsd a kocsit.", osszeg);
		PozTowtrack[playerid][0] = 0;	//Elveszi az alkatrészeket
		TogglePlayerControllable(playerid,false);
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
		defer Lampak[20000](playerid,vid,osszeg,KiszallasOsszeg);
	}
	else if(!strcmp(param, "rendszám", true) || !strcmp(param, "rendszam", true)) //Ne nagyon variáld - Martin
	{
		if(!IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494) && !IsPlayerInRangeOfPoint(playerid, 20, 72.2621,-334.8489,2.0612) && !IsPlayerInRangeOfPoint(playerid, 20, 27.2832,-243.5184,2.7010) && !IsPlayerInRangeOfPoint(playerid, 20, 26.6197,-227.7953,2.7277))
			return SCM(playerid, COL_LRED, "Nem vagy a szerelõ bázison!");

		new car = GetClosestVehicle(playerid, false);
		if(car == NINCS || GetDistanceToVehicle(playerid, car) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

		new jatekos = GetClosestPlayer(playerid), vid = JarmuID(car, playerid);
		if((jatekos == NINCS) || (vInfo[vid][vTulajID] != PlayerInfo[jatekos][pID]))
			return SCM(playerid, COL_LRED, "A jármû tulaja nincs a közeledben!");

		if(PlayerInfo[jatekos][pPremiumPont] < PremiumPontKell[ADAT_RENDSZAM - 1][1])
			return SCM(playerid, COL_LRED, "Ennek a játékosnak nincs elegendõ Prémium Pontja, hogy egyedi rendszámot csinálhass neki!");

		PlayerInfo[playerid][pProcess][0] = PR_RENDSZAM;
		PlayerInfo[playerid][pProcess][1] = jatekos;
		PlayerInfo[playerid][pProcess][2] = vid;

		nformat(form, 256, ""#COL_FEHER"Kérlek add meg a jármû leendõ rendszámát!\nAktuális rendszám: "#COL_MKEK"%d[%d]"#COL_FEHER"\nTulajdonos: "#COL_MKEK"%s", car, vid, vInfo[vid][vTulaj]);
		ShowPlayerDialog(playerid, DIALOG_RENDSZAM, DIALOG_STYLE_INPUT, "Rendszámváltás", form , "Rendben", "Mégse");
	}
	else if(!strcmp(param, "neon", true))
	{
	//	if(playerid != INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Bocsika de ez a parancs jelenleg kiszedve!");
		if(!IsPlayerInRangeOfPoint(playerid, 20, 2038.9408,-2185.4971,13.5685) && !IsPlayerInRangeOfPoint(playerid, 20, 72.2621,-334.8489,2.0612) && !IsPlayerInRangeOfPoint(playerid, 20, 27.2832,-243.5184,2.7010) && !IsPlayerInRangeOfPoint(playerid, 20, 26.6197,-227.7953,2.7277) && !IsScripter(playerid))
		{
			SCM(playerid, COL_LRED, "Nem vagy a szerelõ bázison!");
			//SetPlayerCheckpoint(playerid,72.2621,-334.8489,2.0612);
			return 1;
		}
		new car = GetClosestVehicle(playerid, false);
		if(car == NINCS || GetDistanceToVehicle(playerid, car) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

		new jatekos = GetClosestPlayer(playerid), vid = JarmuID(car, playerid);
		if(GetPlayerDistanceFromPlayer(playerid,jatekos) > 5)
        {
            SendClientMessage(playerid, COLOR_GREY, "Õ nincs a közeledben!");
            return 1;
        }
		switch(vInfo[vid][vModel])
		{
			case 445,602,429,496,504,401,518,402,541,527,415,542,589,507,562,585,419,526,466,492,474,494,502,503,411,546,559,551,516,467,603,426,436,547,405,580,560,550,506,549,451,558,540,491,477,529:
			{
				PlayerInfo[playerid][pProcess][0] = PR_NEON;
				PlayerInfo[playerid][pProcess][1] = jatekos;
				PlayerInfo[playerid][pProcess][2] = vid;
				PlayerInfo[playerid][pProcess][3] = 1;

				new str[256];
				format(str, sizeof(str), ""#COL_FEHER"Neon leszerelése\n"#COL_PIROS"[1.] Piros\n"#COL_MKEK"[2.] Kék\n"#COL_VZOLD"[3.] Zöld\n"#COL_CITROM"[4.] Sárga\n"#COL_ROZSA"[5.] Rózsaszín\n"#COL_FEHER"[6.] Fehér");
				ShowPlayerDialog(playerid, DIALOG_NEON ,DIALOG_STYLE_LIST, "Neon mûveletek", str, "Mehet", "Mégse");
				return true;
			}
			default:
				return SCM(playerid, COL_LRED, "Erre a jármû nem rakhatsz Neont!");
		}
	}
	return true;
}

CMD:munka(playerid, params[])
{
	if(isnull(params))
	{
		SCM(playerid, COL_MKEK, "Használat: /munka [ Felvesz / Felmond / Kezd / Checkpointom ]");
		return true;
	}
	new param[24], melyik = NINCS, munka;
	sscanf(params, "s[24]D(-1){}", param, melyik);

	if(!strcmp(param,"checkpointom") || !strcmp(param,"Checkpointom"))
	{
	    if(GPSFloodolas[playerid] > 0) return SFM(playerid,COL_LRED,"Várnod kell %d másodpercet,",GPSFloodolas[playerid]);
	    if(MunkaCP[playerid][0] == 0.0 && MunkaCP[playerid][1] == 0.0) return SCM(playerid,COL_LRED,"Neked nincs munkacheckpointod!");
	    if(IsPlayerInRangeOfPoint(playerid, 80.0,MunkaCP[playerid][0], MunkaCP[playerid][1],MunkaCP[playerid][2])) { SeeKick(playerid,"Bugkihasználás"); return false;}
     	SetPlayerCheckpoint(playerid, MunkaCP[playerid][0],MunkaCP[playerid][1],MunkaCP[playerid][2],5.0);
     	SCM(playerid,COL_VZOLD,"Checkpointod jelölve!");
     	GPSFloodolas[playerid]+=300;
	}
	else if(!strcmp(param, "felvesz"))
	{
		new id = NINCS;

		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1539.79, 1749.28, 10.83))
			id = 1; //városháza
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2474.286, -2119.997, 14.756))
			id = 0; //gyár

		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Jelenleg nem vagy egyik munkafelvevõ helyen se! (( /gps városháza / gyár ))");

		if(PlayerInfo[playerid][pMunka1] && PlayerInfo[playerid][pMunka2])
			return SCM(playerid, COL_LRED, "Nem tudsz több munkát elvállalni, kérlek mond fel az egyiket!");

		/*else if(!PlayerInfo[playerid][pMunka1])
			PlayerInfo[playerid][pD_MunkaValt][0] = 1;
		else if(PlayerInfo[playerid][pMunka1] && !PlayerInfo[playerid][pMunka2] && !PlayerInfo[playerid][pFrakcio])//ha frakciós max 1munkája lehet
			PlayerInfo[playerid][pD_MunkaValt][0] = 2;

		PlayerInfo[playerid][pD_MunkaValt][1] = id;//illegál vagy legál meló*/

		SCM(playerid, COL_MKEK, "Jelmagyarázat: "#COL_VZOLD"Zöld"#COL_FEHER" - Van hozzá elegendõ tapasztalatod");
		SCM(playerid, COL_MKEK, "Jelmagyarázat: "#COL_LRED"Piros"#COL_FEHER" - Nincs hozzá elegendõ tapasztalatod");

		////Munka define - Név, Szükséges tehetség pont - Legális? (1 = igen | 0 = nem)
		new lista[512], i = NINCS;
		for(;++i < sizeof(Munkak);)
		{
			if(Munkak[i][3][0] == id)
			{
				if(Munkak[i][2][0] <= PlayerInfo[playerid][pExp][1])
					format(lista, sizeof(lista), "%s"#COL_VZOLD"%s [%d/%d]\n", lista, Munkak[i][1], (!id ? PlayerInfo[playerid][pExp][3] : PlayerInfo[playerid][pExp][1]), Munkak[i][2]);//fel tud venni, van elég tapasztalata
				else
					format(lista, sizeof(lista), "%s"#COL_LRED"%s [%d/%d]\n", lista, Munkak[i][1], (!id ? PlayerInfo[playerid][pExp][3] : PlayerInfo[playerid][pExp][1]), Munkak[i][2]);//nem tudja felvenni
			}
		}

		ShowPlayerDialog(playerid, DIALOG_MUNKA, DIALOG_STYLE_LIST, ""#COL_FEHER"Munkavállalás", lista, "Elvállal", "Mégse");
	}
	else if(!strcmp(param, "felmond"))
	{
		new id = NINCS;
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1539.79, 1749.28, 10.83)) id = 1; //városháza
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2474.286, -2119.997, 14.756)) id = 0; //gyár

		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Jelenleg nem vagy egyik munkafelvevõ helyen se! (( /gps városháza / gyár ))");

		if(!PlayerInfo[playerid][pMunka1] && !PlayerInfo[playerid][pMunka2])
			return SCM(playerid, COL_LRED, "Neked még nincs munkád!");
		if(PlayerInfo[playerid][pMunka1] && !PlayerInfo[playerid][pMunka2]) {

			munka = PlayerInfo[playerid][pMunka1];
			PlayerInfo[playerid][pMunka1] = 0;

		} else {

			if(melyik != 1 && melyik != 2)
				return SCM(playerid, COL_MKEK, "Használat: /munka felmond [1/2] | Válaszd ki melyik munkádat szeretnéd felmondani!");

			if(melyik == 1)
			{
				munka = PlayerInfo[playerid][pMunka1];
				PlayerInfo[playerid][pMunka1] = 0;
			} else {
				munka = PlayerInfo[playerid][pMunka2];
				PlayerInfo[playerid][pMunka2] = 0;
			}
		}

		nformat(str, 128, "\n"#COL_VZOLD"Sikeresen felmondtad a(z)\n"#COL_MKEK"%s"#COL_VZOLD" munkádat!", Munkak[ munka - 20 ][1]);
		Info_Dialog(playerid, ""#COL_FEHER"Felmondás", str);
	}
	else if(!strcmp(param, "befejez"))
	{
	    if(dolgozik[playerid] == 0)
	    {
	        SCM(playerid,COL_LRED,"Te jelenleg nem dolgozol!");
		}
		else if(dolgozik[playerid] == 1)
		{
		    dolgozik[playerid] = 0;
		    SCM(playerid,COL_LRED,"Befejezted a munkát..");
		    PlayerInfo[playerid][pCP] = 0;
		    
		}
	}
	else if(!strcmp(param, "kezd"))
	{
		if(gettime() < PlayerInfo[playerid][pMunkaFlood])
			return SCM(playerid, COL_LRED, "Ne floodold!");

		if(PlayerInfo[playerid][pFizetes] > 10000)
		{
		    return SCM(playerid,COL_LRED,"Most nem dolgozhatsz!");
		}

		if(!PlayerInfo[playerid][pMunka1] && !PlayerInfo[playerid][pMunka2])
			return SCM(playerid, COL_LRED, "Neked még nincs munkád! Kérlek keresd fel a Munkaügyi Központot!");
		if(PlayerInfo[playerid][pMunka1] && !PlayerInfo[playerid][pMunka2])
			munka = PlayerInfo[playerid][pMunka1];
		else
		{
			if(melyik != 1 && melyik != 2)
				return SCM(playerid, COL_MKEK, "Használat: /munka kezd [1/2] | Válaszd ki melyik munkádat szeretnéd elkezdeni!");

			if(melyik == 1)
				munka = PlayerInfo[playerid][pMunka1];
			else
				munka = PlayerInfo[playerid][pMunka2];
		}
		new vid, car;
		if(IsPlayerInAnyVehicle(playerid))
		{
			car = GetPlayerVehicleID(playerid);
			vid = JarmuID(car, playerid);
		}
		dolgozik[playerid] = 1;
		switch( munka )
		{
			case MUNKA_ARU:
			{
				if(!IsPlayerInAnyVehicle(playerid))		return SCM(playerid, COL_LRED, "Nem vagy jármûben!");
				if(vInfo[vid][vMunka] != MUNKA_ARU)		return SCM(playerid, COL_LRED, "Árúszállító jármûben kell ülnöd!");
				SCM(playerid,COL_LKEK,"Pakold fel az árút a jármûvedre!");
				SetPlayerCheckpoint(playerid, 2338.1218,-2071.3381,13.5538, 5.0);
				PlayerInfo[playerid][pCP] = CP_ARU2;
			}
			case MUNKA_PILOTA:
			{
				if(!IsPlayerInAnyVehicle(playerid))		return SCM(playerid, COL_LRED, "Nem vagy jármûben!");
				if(vInfo[vid][vMunka] != MUNKA_PILOTA)		return SCM(playerid, COL_LRED, "Árúszállító repülõgépben kell ülnöd!");
				SCM(playerid,COL_LKEK,"Pakold fel az árút a repülõgéprdre!");
				SetPlayerCheckpoint(playerid, 1617.9362,-2628.5530,13.5469, 15.0);
				PlayerInfo[playerid][pCP] = CP_PILOTA2;
			}
			case MUNKA_UTTISZTITO:
			{
				if(!IsPlayerInAnyVehicle(playerid))		return SCM(playerid, COL_LRED, "Nem vagy jármûben!");
				if(vInfo[vid][vMunka] != MUNKA_UTTISZTITO)	return SCM(playerid, COL_LRED, "Úttisztító jármûben kell ülnöd!");
				new rand = random(sizeof(TisztitoUtak));
				PlayerInfo[playerid][pCP] = CP_UTTISZTITO;
				MunkaCP[playerid][0] = TisztitoUtak[rand][0];
				MunkaCP[playerid][1] = TisztitoUtak[rand][1];
				MunkaCP[playerid][2] = TisztitoUtak[rand][2];
				PlayerInfo[playerid][pTavolsag] = GetPlayerDistanceFromPoint(playerid, PosExt(TisztitoUtak[rand]));
				while(PlayerInfo[playerid][pTavolsag] < 3.0)
					PlayerInfo[playerid][pTavolsag] = GetPlayerDistanceFromPoint(playerid, PosExt(TisztitoUtak[random(sizeof(TisztitoUtak))]));

				SetPlayerCheckpoint(playerid, PosExt(TisztitoUtak[rand]), 5.0);
			}
			case MUNKA_MOWER:
			{
				if(!IsPlayerInAnyVehicle(playerid))		return SCM(playerid, COL_LRED, "Nem vagy jármûben!");
				if(vInfo[vid][vMunka] != MUNKA_MOWER)	return SCM(playerid, COL_LRED, "Fûnyíróban kell ülnöd!");
				new rand = random(sizeof(MowerUtak));
				PlayerInfo[playerid][pCP] = CP_MOWER;
				MunkaCP[playerid][0] = MowerUtak[rand][0];
				MunkaCP[playerid][1] = MowerUtak[rand][1];
				MunkaCP[playerid][2] = MowerUtak[rand][2];
				PlayerInfo[playerid][pTavolsag] = GetPlayerDistanceFromPoint(playerid, PosExt(MowerUtak[rand]));
				while(PlayerInfo[playerid][pTavolsag] < 3.0)
					PlayerInfo[playerid][pTavolsag] = GetPlayerDistanceFromPoint(playerid, PosExt(MowerUtak[random(sizeof(MowerUtak))]));

				SetPlayerCheckpoint(playerid, PosExt(MowerUtak[rand]), 5.0);
			}
			case MUNKA_KUKA:
			{
				if(!IsPlayerInAnyVehicle(playerid))	return SCM(playerid, COL_LRED, "Nem vagy jármûben!");
				if(vInfo[vid][vMunka] != MUNKA_KUKA)		return SCM(playerid, COL_LRED, "Kukás jármûben kell ülnöd!");
				new rand = random(sizeof(KukaPos)),
				Float:cpx = KukaPos[rand][0],
				Float:cpy = KukaPos[rand][1],
				Float:cpz = KukaPos[rand][2],
				Float:cpa = KukaPos[rand][3];
				MunkaCP[playerid][0] = cpx;
				MunkaCP[playerid][1] = cpy;
				MunkaCP[playerid][2] = cpz;
				PlayerInfo[playerid][pCP] = CP_KUKA;
				PlayerInfo[playerid][pKukaIndex] = rand;
				GetInFrontOfXY(cpx, cpy, cpz, cpa, 4.0, true);
				SetPlayerCheckpoint(playerid, cpx, cpy, cpz, 5.0);
			}
			case MUNKA_KAMION:
			{
    			if(!IsPlayerInAnyTruck(playerid))
					return SCM(playerid, COL_LRED, "Kamionban kell ülnöd!");

				if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) != 578))
					return SCM(playerid, COL_LRED, "Nincs felcsatolva a pótkocsi!");

				new start, cel;
				GenerateTruckRoad(start, cel);
				PlayerInfo[playerid][pKamions] = start;
				PlayerInfo[playerid][pKamionc] = cel;

				PlayerInfo[playerid][pCP] = CP_KAMION_KEZD;
				SetPlayerCheckpoint(playerid, PosExt(KamionUtak[start]), 5.0);
				MunkaCP[playerid][0] = KamionUtak[start][0];
				MunkaCP[playerid][1] = KamionUtak[start][1];
				MunkaCP[playerid][2] = KamionUtak[start][2];
				SCM(playerid, COL_MKEK, "Menj a kijelölt területre az áru felpakolásához!");
				Streamer_Update(playerid);
			}
			case MUNKA_FARMER:
			{
				if(!IsPlayerInAnyVehicle(playerid))
					return SCM(playerid, COL_LRED, "Nem vagy jármûben!");

				if((GetVehicleModel(GetPlayerVehicleID(playerid)) != 532) && (GetVehicleModel(GetPlayerVehicleID(playerid)) != 531))
					return SCM(playerid, COL_LRED, "Traktorba, illetve Combine-ba kell ülnöd!");

				if(GetVehicleTrailer(GetPlayerVehicleID(playerid)))
				{
					if(GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid))) == 610)
					{
						return DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					}
				}
				new kocsi = GetClosestVehicle(playerid, false);
				new Float:tavolsag = GetDistanceToCar(playerid, kocsi);

				if(tavolsag <= 5.0)
				{
					if((GetVehicleModel(GetPlayerVehicleID(playerid)) == 531) || (GetVehicleModel(kocsi) == 610))
					{
						return AttachTrailerToVehicle(kocsi, GetPlayerVehicleID(playerid));
					}
				} else
					return SCM(playerid, COL_LRED, "Nincs a közeledben pótkocsi!");
			}
			case MUNKA_FAVAGO:
			{
				if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1547.141, 13.851, 24.140))
				{
					SCM(playerid, COL_LRED, "Nem vagy a fafarmon! GPS-en megjelölve.");
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, 1547.141, 13.851, 24.140, 5.0);
					return true;
				}

				GiveWeapon(playerid, 9, 1);
				SCM(playerid, COL_VKEK, "Felvetted a felszerelésed!");
			}
			default: SCM(playerid, COL_MKEK, "Ezt a munkát nem kell elindítani!");
		}
		PlayerInfo[playerid][pMunkaFlood] = (gettime() + 30);
	}
	return true;
}

CMD:butor(playerid, params[])
{
	new butorszam = ButorSzam(playerid);
	if(butorszam == -2)
		return SCM(playerid, COL_LRED, "Neked még nincs saját házad, mielõtt használnád vegyél egyet!");
	if(butorszam == NINCS)
		return SCM(playerid, COL_LRED, "Csak a saját házadban használhatod!");

	ShowPlayerDialog(playerid, DIALOG_BUTOR, DIALOG_STYLE_LIST, #COL_FEHER"Bútor", "Bútor vétel\nBútor szerkesztés\nBútor lista\nStatisztika\nPrémium slotok vásárlása [1600pp]", "Mehet!", "Kilépés!");
	return true;
}

CMD:maszk(playerid, params[])
{
	if(!PlayerInfo[playerid][pMaszk])
		return SCM(playerid, COL_LRED, "Neked még nincs maszkod, ha szeretnél egyet vegyél az egyik ruhaboltban!");

	LoopingAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
	if(PlayerInfo[playerid][pMaszkVisel])
	{
		SCM(playerid, COL_MKEK, "Levetted a maszkot!");
		RemovePlayerAttachedObject(playerid, SLOT_MASZK);
		PlayerInfo[playerid][pMaszkVisel] = false;
		PlayerInfo[playerid][pNoname] = 0;
		foreach(Player, x)
		{
			ShowPlayerNameTagForPlayer(x, playerid, 1);
		}
	}
	else
	{

		SCM(playerid, COL_VZOLD, "Felvetted a maszkot!");
		new index = SLOT_MASZK;
		new maszk = 100001+random(900000);
		PlayerInfo[playerid][pMaszkID] = maszk;
		SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
		PlayerInfo[playerid][pMaszkVisel] = true;
		PlayerInfo[playerid][pNoname] = 1;
		foreach(Player, x)
		{
			if(!Admin(x,1))
			{
				ShowPlayerNameTagForPlayer(x, playerid, 0);
			}
		}
	}

	return true;
}

CMD:zar(playerid, params[])
{
    new k = NINCS, bool:van;
	for(;++k < MAX_KAPU;)
	{
		if(IsPlayerInRangeOfPoint(playerid, Kapu[k][kTav], PosExt(Kapu[k][kZPos])) || IsPlayerInRangeOfPoint(playerid, Kapu[k][kTav], PosExt(Kapu[k][kNPos])))
		{
			if(Kapu[k][kMozgo])
				MoveDynamicObject(Kapu[k][kOID], PosExt(Kapu[k][kZPos]), Kapu[k][kSpeed]);
			else
			{
				SetDynamicObjectPos(Kapu[k][kOID], PosExt(Kapu[k][kZPos]));
				SetDynamicObjectRot(Kapu[k][kOID], PosExt(Kapu[k][kZRPos]));
			}
			van = true;
			//break;
		}
	}

	if(!van) SCM(playerid, COL_LRED, "Nincs a közeledben kapu!");
	return true;
}

CMD:nyit(playerid, params[])
{
	new k = NINCS, bool:van;
	for(;++k < MAX_KAPU;)
	{
		//if(IsPlayerInRangeOfPoint(playerid, Kapu[k][kTav], PosExt(Kapu[k][kZPos])))
		if(IsPlayerInRangeOfPoint(playerid, Kapu[k][kTav], PosExt(Kapu[k][kZPos]))/* || IsPlayerInRangeOfPoint(playerid, Kapu[k][kTav], PosExt(Kapu[k][kNPos]))*/)
		{
			if(PlayerInfo[playerid][padmin] > 0 || KapuEngedely(playerid, k))
			{
			    if(Kapu[k][kKod] != NINCS)
			    {
			        Szamok[playerid][0] = EOS;
			        for(new i = 0; i < 2; i++)
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Kellek][i]);
					for(new i = 0; i < 10; i++)
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Gombok][i]);
					for(new i = 0; i < 2; i++)
						PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Jelzes][i]);

					PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev]);
					SelectTextDraw(playerid, 0xF7C25EAA);

			        if(Admin(playerid, 1))
						SFM(playerid, COL_MKEK, "A kapu jelszava a következõ: "#COL_MKEK"%d", Kapu[k][kKod]);

			        PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_KapuNev], Kapu[k][kNev]);
                    PlayerInfo[playerid][pValtozott] = false;
					PlayerInfo[playerid][pMelyikKapu] = k;
			        return true;
				}
				if(Kapu[k][kMozgo])
					MoveDynamicObject(Kapu[k][kOID], PosExt(Kapu[k][kNPos]), Kapu[k][kSpeed]);
				else
				{
					SetDynamicObjectPos(Kapu[k][kOID], PosExt(Kapu[k][kNPos]) );
					SetDynamicObjectRot(Kapu[k][kOID], PosExt(Kapu[k][kNRPos]) );
				}
			}
			else
				SCM(playerid, COL_LRED, "Ezt a kaput nem nyithatod ki!");

			van = true;
			//break;
        }
	}
	if(!van) SCM(playerid, COL_LRED, "Nincs a közeledben kapu!");
	return true;
}

CMD:oocki(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(ServerInfo[sOOC])
		ServerInfo[sOOC] = false;
	else
		ServerInfo[sOOC] = true;

	SFM(playerid, COL_LRED, "Globális OOC chat %s", (ServerInfo[sOOC] ? ("bekapcsolva") : ("kikapcsolva")));
	return true;
}

CMD:ooc(playerid, params[])// help-ben mint /o
{
	if(!ServerInfo[sOOC])
		return SCM(playerid, COL_LRED, "A Globális OOC Chat jelenleg nincs bekapcsolva!");

	if(PlayerInfo[playerid][pnemitva])
		return SCM(playerid, COL_LRED, "Nem beszélhetsz, mikor némítva vagy!");

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: (/o)oc [OOC Chat] | Az egész szerver látja, normálisan viselkedj benne!");

	if(!OOC_Ellenorzes(playerid, "/o", params))
		return true;

	nformat(str, 128, "(( %s: %s ))", JatekosNev(playerid, true), params);
	foreach(Player, p)
	{
		if(PlayerInfo[p][pTog][2]) continue;
		SendClientMessage(p, COLOR_LIGHTBLUE, str);
	}

	return true;
}

CMD:kaja(playerid, params[])
{
	if(PlayerInfo[playerid][pCuccok][BL_SZENDVICS] < 1) return SCM(playerid, COL_LRED, "Nincs szendvicsed, vegyél egy boltban!");
	if(NemMozoghat(playerid, false))   return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
	if(GetPlayerSpeed(playerid) > 120 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) return SCM(playerid,COL_LRED,"Ilyen sebességnél van merszed kajálni?:D");
	new Float:elet = PlayerInfo[playerid][pElet];
	if(elet == MAX_HP) return SCM(playerid, COL_LRED, "Nem vagy éhes!");
	if(Zabal[playerid] == 1) return SCM(playerid, COL_LRED,"Már eszel!");

	Zabal[playerid] = 1;
	Cselekves(playerid,"elõvesz egy szendvicset és elkezdi enni..", 0);
	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
	defer Kaja[4500](playerid);
	return true;
}

CMD:megprobal(playerid, params[])
{
	if(ServerInfo[sCsend] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(PlayerInfo[playerid][pTryTime] > gettime())
		return SFM(playerid, COL_LRED, "Leghamarabb "#COL_MKEK"%s"#COL_FEHER" múlva írhatsz megpróbált!", UnixToTime( PlayerInfo[playerid][pTryTime] ));

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /megpróbál [Akció]");

	if(strlen(params) < 5)
		return SCM(playerid, COL_LRED, "Az akciónak legalább 5 karakterbõl kell állnia!");

	if(!OOC_Ellenorzes(playerid, "/megpróbál", params))
		return true;

	PlayerInfo[playerid][pTryTime] = (gettime() + (60 * 1));
	new str[128];
	if(!RandomSiker(50)){
		format(str, sizeof(str), "** %s megpróbál %s, de sajnos nem sikerül neki", JatekosNev(playerid), params);
		ProxDetector(30.0, playerid, str, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
	}
	else
	{
		format(str, sizeof(str), "** %s megpróbál %s és sikerül neki", JatekosNev(playerid), params);
		ProxDetector(30.0, playerid, str, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
	}
	return true;
}

CMD:walk(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /walk [0 - 13]");

	new mennyi = strval(params);
	if(mennyi > 13 || mennyi < 0)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Hiba!","A sétálás típusnak "#COL_MKEK"0 "#COL_FEHER"és "#COL_MKEK"13 "#COL_FEHER"között kell lennie!", "Bezárás", "");
	//SCM(playerid, COL_LRED, "Hiba! A sétálás típusnak "#COL_MKEK"0 "#COL_FEHER"és "#COL_MKEK"13 "#COL_FEHER"között kell lennie!");

	SetPlayerWalkingStyle(playerid, mennyi);
	//SFM(playerid, COL_VZOLD, "Sétálási stílusod: %d", mennyi);
	ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Sétálás","Stílus Beállítva.", "Bezárás", "");
	return true;
}

CMD:megprobalja(playerid, params[])
{
	if(ServerInfo[sCsend] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(PlayerInfo[playerid][pTryTime] > gettime())
		return SFM(playerid, COL_LRED, "Leghamarabb "#COL_MKEK"%s"#COL_FEHER" múlva írhatsz megpróbált!", UnixToTime( PlayerInfo[playerid][pTryTime] ));

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /megpróbál [Akció]");

	if(strlen(params) < 5)
		return SCM(playerid, COL_LRED, "Az akciónak legalább 5 karakterbõl kell állnia!");

	if(!OOC_Ellenorzes(playerid, "/megpróbálja", params))
		return true;

	PlayerInfo[playerid][pTryTime] = (gettime() + (60 * 1));
	new str[128];
	if(!RandomSiker(50)){
		format(str, sizeof(str), "** %s megpróbálja %s, de sajnos nem sikerül neki", JatekosNev(playerid), params);
		ProxDetector(30.0, playerid, str, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
	}
	else
	{
		format(str, sizeof(str), "** %s megpróbálja %s és sikerül neki", JatekosNev(playerid), params);
		ProxDetector(30.0, playerid, str, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
	}
	return true;
}

CMD:b(playerid, params[])//help-ben
{
	new szoveg[128];
	new stringje[256];
	if(ServerInfo[sCsend] && PlayerInfo[playerid][padmin] == 0)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "OOC","Most nem beszélhetsz!", "Bezárás", "");
		//SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(sscanf(params, "s[128]", szoveg))
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "OOC","Használat: /b [OOC beszéd] | Karakteren kívüli beszéd", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /b [OOC beszéd] | Karakteren kívüli beszéd");

	if(!OOC_Ellenorzes(playerid, "/b", szoveg))
		return true;

	if(!Admin(playerid, 1) && !SzidasCheck(playerid, szoveg))
		return true;

	if(PlayerInfo[playerid][pTog][2])
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "OOC","Letiltottad az OOC chatet, ezért nem tudsz írni.", "Bezárás", "");
		//SCM( playerid, COL_MKEK, "Letiltottad az OOC chatet, ezért nem tudsz írni.");

	new kicsinalja[128];

	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
	}

	format(stringje, sizeof(stringje), "%s mondja: OOC: (( %s ))", kicsinalja, szoveg);
	ProxDetectorOOC(15.0, playerid, stringje, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return true;
}

CMD:ds(playerid, params[])
{
	new houseid = KozeliHaz(playerid);
	new nearbydoor[2] = {-1, -1};   //0: ajtó, amihez közel van; 1: beordibál(0), kiordibál(1)

	if(isnull(params))
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Házban kiáltás","Használat: /ds [házba kiáltás szövege]", "Bezárás", "");
		//SCM(playerid, COL_MKEK, "Használat: /ds [házba kiáltás szövege]");

	if(ServerInfo[sCsend] && !Admin(playerid, 1))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Házban kiáltás","Most nem beszélhetsz!", "Bezárás", "");
		//SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	for(new i = 0; i < MAX_AJTO; i++)
	{
	    if(IsPlayerInRangeOfPoint( playerid, 5.0, AjtoInfo[i][abepos][0], AjtoInfo[i][abepos][1], AjtoInfo[i][abepos][2] ))
	    {
	        nearbydoor[0] = i;
	        nearbydoor[1] = 0;
	        break;
	    }
	    if(IsPlayerInRangeOfPoint( playerid, 5.0, AjtoInfo[i][akipos][0], AjtoInfo[i][akipos][1], AjtoInfo[i][akipos][2] ))
	    {
	        nearbydoor[0] = i;
	        nearbydoor[1] = 1;
	        break;
	    }
	}


	new str[128];
	if(PlayerInfo[playerid][pAlnevbe] == false)
	{
		new maszkid[24];
		format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
		format(str, 128, "%s ordítja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
	}
	else
	{
		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			new maszkid[24];
			format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
			format(str, 128, "%s ordítja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
		}
		else
		{
			format(str, 128, "%s ordítja: %s", PlayerInfo[playerid][pAlnev], params);
		}
	}

	if(houseid != NINCS)
	{
		if(PlayerInfo[playerid][phaz] == NINCS)
		{
			new interior2 = HazInfo[houseid][hInterior];
			ProxDetectorEx(30.0, BelsoInterior[interior2][belsox], BelsoInterior[interior2][belsoy], BelsoInterior[interior2][belsoz], str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		} else {
			ProxDetectorEx(30.0, HazInfo[houseid][posx], HazInfo[houseid][posy], HazInfo[houseid][posz], str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		SendClientMessage( playerid, -1, str );
		return 1;
	} else if( nearbydoor[1] == 1 )
	{
	    ProxDetectorEx(30.0, AjtoInfo[nearbydoor[0]][abepos][0], AjtoInfo[nearbydoor[0]][abepos][1], AjtoInfo[nearbydoor[0]][abepos][2], str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	    SendClientMessage( playerid, -1, str );
	    return 1;
	} else if( nearbydoor[1] == 0 )
	{
	    ProxDetectorEx(30.0, AjtoInfo[nearbydoor[0]][akipos][0], AjtoInfo[nearbydoor[0]][akipos][1], AjtoInfo[nearbydoor[0]][akipos][2], str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	    SendClientMessage( playerid, -1, str );
	    return 1;
	} else {
        return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Házban kiáltás","Nem vagy ajtó vagy ház közelében.", "Bezárás", "");
		//SCM(playerid, COL_LRED, "Nem vagy ajtó vagy ház közelében.");
	}
}

CMD:s(playerid, params[])// help-ben
{
	if(ServerInfo[sCsend] && !Admin(playerid, 1))
  		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kiáltás","Most nem beszélhetsz!", "Bezárás", "");
		//SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(isnull(params))
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kiáltás","Használat: /s [Kiáltás szövege]", "Bezárás", "");
		//SCM(playerid, COL_MKEK, "Használat: /s [Kiáltás szövege]");

	if(!OOC_Ellenorzes(playerid, "/s", params))
		return true;

	new str[128];
	if(PlayerInfo[playerid][pAlnevbe] == false)
	{
		new maszkid[24];
		format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
		format(str, 128, "%s ordítja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
	}
	else
	{
		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			new maszkid[24];
			format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
			format(str, 128, "%s ordítja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
		}
		else
		{
			format(str, 128, "%s ordítja: %s", PlayerInfo[playerid][pAlnev], params);
		}
	}
	ProxDetector(30.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return true;
}

CMD:c(playerid, params[])// help-ben
{
	if(ServerInfo[sCsend] && !Admin(playerid, 1))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Suttogás","Most nem beszélhetsz!", "Bezárás", "");
		//SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(isnull(params))
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Suttogás","Használat: /c [Suttogás szövege]", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /c [Suttogás szövege]");

	if(!OOC_Ellenorzes(playerid, "/c", params))
		return true;

	new str[128];
	if(PlayerInfo[playerid][pAlnevbe] == false)
	{
		new maszkid[24];
		format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
		format(str, 128, "%s suttogja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
	}
	else
	{
		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			new maszkid[24];
			format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
			format(str, 128, "%s suttogja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
		}
		else
		{
			format(str, 128, "%s suttogja: %s", PlayerInfo[playerid][pAlnev], params);
		}
	}
	ProxDetector(3.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return true;
}
CMD:accent(playerid, params[])
{
	if(isnull(params))
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Akcentus","Használat: /accent [akcentus]", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /accent [akcentus]");
	if(strlen(params) > 10)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Akcentus","Maximum 10 karakter lehet.", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Maximum 10 karakter lehet.");
	format(PlayerInfo[playerid][pAccent], MAX_PLAYER_NAME, "%s acc.", params);
	//SFM(playerid, COL_MKEK, "Akkcentusod átállítottad erre: "#COL_MKEK"%s", PlayerInfo[playerid][pAccent]);
	ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Akcentus","Akkcentusod átállítva.", "Bezárás", "");
	return true;
}
CMD:l(playerid, params[])// help-ben - kivéve
{
	if(playerid != NINCS)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Ismeretlen Beszéd","Kivéve - Használj maszkot! Ruhaboltban kapható.", "Bezárás", "");
		//SCM(playerid, COL_LRED, "Kivéve - Használj maszkot! Ruhaboltban kapható.");

	if(ServerInfo[sCsend] && !Admin(playerid, 1))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Ismeretlen Beszéd","Most nem beszélhetsz!", "Bezárás", "");
		//SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(isnull(params))
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Ismeretlen Beszéd","Használat: /l [Ismeretlen beszéd]", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /l [Ismeretlen beszéd]");

	if(!OOC_Ellenorzes(playerid, "/l", params))
		return true;

	nformat(str, 128, "Valaki mondja: %s", params);
	ProxDetector(15.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return true;
}

CMD:d(playerid, params[])
{
	if(PlayerInfo[playerid][pAnimban][0] == 1)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","A sokk hatására nem tudod kezelni a rádiód!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");

	if(PlayerInfo[playerid][pCuccok][BL_KEZIRADIO] == 0)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Nincs rádiód! Vegyél a boltban..", "Bezárás", "");
		// SCM(playerid, COL_LRED,"Nincs rádiód! Vegyél a boltban..");

	new fk = PlayerInfo[playerid][pFrakcio];
	if(fk != FRAKCIO_LAFD && fk != FRAKCIO_LSPD && fk != FRAKCIO_KATONA && fk != FRAKCIO_KORMANY && fk != FRAKCIO_LSFD && fk != FRAKCIO_FBI)
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Nem vagy egyik rendvédelmi vagy közigazgatási szerv tagja sem!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Nem vagy egyik rendvédelmi vagy közigazgatási szerv tagja sem!");

	new prox[128];
	if(isnull(params))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Használat: /d [Sürgõsségi rádió] | Csak akkor használd ha tényleg szükség van rá!", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /d [Sürgõsségi rádió] | Csak akkor használd ha tényleg szükség van rá!");
	if(!OOC_Ellenorzes(playerid, "/d", params))
		return true;

	if(fk == FRAKCIO_LSFD)
		format(prox, sizeof(prox),"** Tûzoltó %s %s: %s ,vége ", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);
	else if(fk == FRAKCIO_KORMANY && PlayerInfo[playerid][prang] > 4)
		format(prox, sizeof(prox),"** %s %s: %s ,vége ", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);
	else
		format(prox, sizeof(prox),"** %s %s %s: %s ,vége ", FInfo[PlayerInfo[playerid][pFrakcio]][fNev], Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);

    foreach(Player, p)
    {
		fk = PlayerInfo[p][pFrakcio];
        if(Belepve(p) && PlayerInfo[p][pCuccok][BL_KEZIRADIO] != 0 &&  !PlayerInfo[p][pTog][0] && (fk == FRAKCIO_LAFD || fk == FRAKCIO_LSPD || fk == FRAKCIO_FBI || fk == FRAKCIO_KORMANY || fk == FRAKCIO_LSFD || fk == FRAKCIO_KATONA || PlayerInfo[p][pLehallgat] == fk))
			SendClientMessage(p, COLOR_ALLDEPT, prox);
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}

CMD:r(playerid, params[])
{
	if(!PlayerInfo[playerid][pFrakcio])
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Nem vagy egy szervezet tagja sem!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Nem vagy egy szervezet tagja sem!");
	if(PlayerInfo[playerid][pAnimban][0] == 1)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","A sokk hatására nem tudod kezelni a rádiód!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");
	if(PlayerInfo[playerid][pCuccok][BL_KEZIRADIO] == 0)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Nincs rádiód! Vegyél a boltban..", "Bezárás", "");
		// SCM(playerid, COL_LRED,"Nincs rádiód! Vegyél a boltban..");

	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_MAFFIA || FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_BANDA)
	{
	    ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Használd a telefonodat. Egy banda / maffia nem rádiózik!", "Bezárás", "");
		//SCM(playerid,COL_LRED,"Használd a telefonodat. Egy banda / maffia nem rádiózik!");
		return true;
	}

	new prox[128];
	if(isnull(params))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Használat: /r [IC Rádió]", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /r [IC Rádió]");
	if(!OOC_Ellenorzes(playerid, "/r", params))
		return true;

	format(prox, sizeof(prox),"** %s %s: %s ,vége ", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);

	foreach(Player, p)
    {
        if(Belepve(p) && !PlayerInfo[p][pTog][0] && PlayerInfo[p][pCuccok][BL_KEZIRADIO] != 0 && (PlayerInfo[p][pFrakcio] == PlayerInfo[playerid][pFrakcio]) || PlayerInfo[p][pLehallgat] == PlayerInfo[playerid][pFrakcio])
        {
			SendClientMessage(p, COLOR_RADIO, prox);
		}
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}

CMD:hq(playerid, params[])
{
	if(!PlayerInfo[playerid][pFrakcio])
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Nem vagy egy szervezet tagja sem!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Nem vagy egy szervezet tagja sem!");
	if(PlayerInfo[playerid][pAnimban][0] == 1)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","A sokk hatására nem tudod kezelni a rádiód!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");
	if(PlayerInfo[playerid][pCuccok][BL_KEZIRADIO] == 0)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Nincs rádiód! Vegyél a boltban..", "Bezárás", "");
		// SCM(playerid, COL_LRED,"Nincs rádiód! Vegyél a boltban..");

	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_MAFFIA || FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_BANDA)
	{
		ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Használd a telefonodat. Egy banda / maffia nem rádiózik!", "Bezárás", "");
		//SCM(playerid,COL_LRED,"Használd a telefonodat. Egy banda / maffia nem rádiózik!");
		return true;
	}

	new prox[128];
	if(isnull(params))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Használat: /hq [Leader Rádió]", "Bezárás", "");
		//SCM(playerid, COL_MKEK, "Használat: /hq [Leader Rádió]");
	if(!OOC_Ellenorzes(playerid, "/hq", params))
		return true;

	format(prox, sizeof(prox),"** %s %s: %s ,vége ", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);

	foreach(Player, p)
    {
        if(Belepve(p) && !PlayerInfo[p][pTog][0] && PlayerInfo[p][pCuccok][BL_KEZIRADIO] != 0 && (PlayerInfo[p][pFrakcio] == PlayerInfo[playerid][pFrakcio]) || PlayerInfo[p][pLehallgat] == PlayerInfo[playerid][pFrakcio])
        {
			SendClientMessage(p, COLOR_GREEN, prox);
		}
    }
    format(prox, sizeof(prox), "[Rádió]%s vezetõ mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}

CMD:kr(playerid, params[])
{
	if(!IsPlayerInAnyTruck(playerid))
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "KamionRádió","Nem ülsz kamionban!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Nem ülsz kamionban!");

	new prox[128];
	if(isnull(params))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "KamionRádió","Használat: /kr [IC Kamion Rádió]", "Bezárás", "");
		//SCM(playerid, COL_MKEK, "Használat: /kr [IC Kamion Rádió]");
	if(!OOC_Ellenorzes(playerid, "/kr", params))
		return true;

	format(prox, sizeof(prox),"** Kamionsofõr %s: %s ,vége ", JatekosNev(playerid, true), params);

	foreach(Player, p)
    {
        if(Belepve(p) && !PlayerInfo[p][pTog][0] && IsPlayerInAnyTruck(p))
			SendClientMessage(p, COLOR_RADIO, prox);
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}

CMD:rb(playerid, params[])
{
	if(!PlayerInfo[playerid][pFrakcio])
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Nem vagy egy szervezet tagja sem!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Nem vagy egy szervezet tagja sem!");
	if(PlayerInfo[playerid][pAnimban][0] == 1)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","A sokk hatására nem tudod kezelni a rádiód!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");
	if(PlayerInfo[playerid][pCuccok][BL_KEZIRADIO] == 0)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Nincs rádiód! Vegyél a boltban..", "Bezárás", "");
		// SCM(playerid, COL_LRED,"Nincs rádiód! Vegyél a boltban..");
	new prox[128];
	if(isnull(params))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Rádió","Használat: /rb [OOC Rádió]", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /rb [OOC Rádió]");
	if(!OOC_Ellenorzes(playerid, "/rb", params))
		return true;
	if(!SzidasCheck(playerid, params))
		return true;

	format(prox, sizeof(prox), "** %s %s OOC: (( %s )) **", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);
    foreach(Player, p)
    {
        if(Belepve(p) && !PlayerInfo[p][pTog][0] && PlayerInfo[p][pCuccok][BL_KEZIRADIO] != 0 && (PlayerInfo[p][pFrakcio] == PlayerInfo[playerid][pFrakcio]) || PlayerInfo[p][pLehallgat] == PlayerInfo[playerid][pFrakcio])
        {
			SendClientMessage(p, COLOR_RADIO, prox);
		}
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja OOC: (( %s ))", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}

CMD:call(playerid, params[])
{
	if(Bortonben(playerid))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Telefon","Jelenleg nem használhatod!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Jelenleg nem használhatod!");

	if(PlayerInfo[playerid][pCuccok][BL_TELEFON] < 1)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Telefon","Neked még nincs telefonod!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Neked még nincs telefonod!");

	new telefonszam;
	if(sscanf(params, "d", telefonszam))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Telefon","Használat: /call 911", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /call [telefonszám] | Segélyhívás: 911");

	if(PlayerInfo[playerid][pTelefonPenz] < 5 && telefonszam != 911)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Telefon","Nincs a kártyádon pénz!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Nincs a kártyádon pénz!");

	//PlayerInfo[playerid][pTelefonVonalban] = false;
	if(telefonszam == PlayerInfo[playerid][pCuccok][BL_TELEFON])
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Telefon","Magadat nem hívhatod fel!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Magadat nem hívhatod fel!");

	if(PlayerInfo[playerid][ptelefonal])
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Telefon","Már hívásban vagy!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Már hívásban vagy!");

	if(PlayerInfo[playerid][pTog][5])
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Telefon","A telefonod ki van kapcsolva!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "A telefonod ki van kapcsolva!");

	if(PlayerInfo[playerid][pFrakcio])
	{
		if(telefonszam == DROG_TELEFONSZAM && IsJob(playerid, MUNKA_DROG))
		{
			new randomo = random(sizeof(RandomDrogSz));
			new vanneki = false, i = -1;

			for(;++i < 3;)
				if(ServerInfo[sDrog][i] > 0)
					vanneki += ServerInfo[sDrog][i];

			new str[148];

			format(str, sizeof(str), "[Telefon] Valaki mondja: %s", RandomDrogSz[randomo]);
			SendClientMessage(playerid, COLOR_FADE1, str);

			ProxDetector(15.0, playerid, "[Telefon] Valaki mondja: Kellene egy kis cucc testvér.", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

			switch(vanneki)
			{
				case 6500 .. 7500:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Kurva sok cuccom van még, mi kell? (( Drog, drogmag ))");
				case 5500 .. 6499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Nagyon sok cuccom van még, mi kell? (( Drog, drogmag ))");
				case 4500 .. 5499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Sok cuccom van még, mi kell? (( Drog, drogmag ))");
				case 3500 .. 4499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Még sok cuccom van, mi kell? (( Drog, drogmag ))");
				case 2500 .. 3499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Fogyóban van a cucc, de van még, mi kell? (( Drog, drogmag ))");
				case 1500 .. 2499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Még van pár kiló tartalékban, mi kell? (( Drog, drogmag ))");
				case 500 .. 1499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Még idõben hívtál, van pár cuccom még, mi kell? (( Drog, drogmag ))");
				case 1 .. 499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Nagyon fogyóban vagyok haver, de, mi kell? (( Drog, drogmag ))");
				case 0:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Sajnos kifogytam a cuccokból, csak magom maradt. (( drogmag ))");
			}

			PlayerInfo[playerid][ptelefonaloid] = DROG_TELEFONSZAM;
			PlayerInfo[playerid][ptelefonal] = true;
			return true;
			//ProxDetector(20.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);

		}
	}
	if(telefonszam == 112 || telefonszam == 911)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Központ: Üdvözlöm, kérem válasszon a lehetõségek közül:");
		SendClientMessage(playerid, COLOR_YELLOW, "Autómentõ, Mentõszolgálat, Tûzoltóság, Rendõrség");
		PlayerInfo[playerid][pSegelyhivas] = 1;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		return true;
	}
	
    ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Telefon","Nincs ilyen telefonszám.", "Bezárás", "");
	// SCM(playerid, COL_LRED, "Nincs ilyen telefonszám.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	return true;
}

CMD:eject(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kidobás","Nem vagy jármûben!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Nem vagy jármûben!");

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kidobás","Csak vezetõként dobhatsz ki utast a jármûbõl!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Csak vezetõként dobhatsz ki utast a jármûbõl!");

	new jatekos;
	if(sscanf(params, "u", jatekos))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kidobás","Használat: /eject [JátékosID / JátékosNév]", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /eject [JátékosID / JátékosNév]");

	if(!IsPlayerConnected(jatekos) || jatekos == INVALID_PLAYER_ID || jatekos == playerid)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kidobás","Ez a játékos nincs fent!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Ez a játékos nincs fent!");

	if(!IsPlayerInVehicle(jatekos, GetPlayerVehicleID(playerid)))
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kidobás","Ez a játékos nincs a jármûvedben!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Ez a játékos nincs a jármûvedben!");

	new str[128];
	switch(random(2))
	{
		case 0:
		{
			//Josh Solman megpróbálta kilökni a kocsiból [akit ki akart lökni] -t és sikerült neki.
			format(str, sizeof(str), "** %s megpróbálta kilökni a jármûbõl %st és sikerült neki!", JatekosNev(playerid), JatekosNev(jatekos));
			ProxDetector(30.0, playerid, str, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
			SFM(playerid, COL_VZOLD, "Sikeresen kiraktad "#COL_MKEK"%s"#COL_FEHER"-t!", JatekosNev(jatekos));
			ShowPlayerDialog(jatekos, DIALOG_NINCS, DIALOG_STYLE_MSGBOX,"Kidobás", "A sofõr kidobott a jármûbõl!", "Bezárás", "");
			//SCM(jatekos, COL_LRED, "A sofõr kidobott a jármûbõl!");
			RemovePlayerFromVehicle(jatekos);
			return true;
		}
		case 1:
		{
			format(str, sizeof(str), "** %s megpróbálta kilökni a jármûbõl %st és nem sikerült neki!", JatekosNev(playerid), JatekosNev(jatekos));
			ProxDetector(30.0, playerid, str, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
			return true;
		}
	}

	return true;
}
CMD:me(playerid, params[])// help-ben
{
	new szoveg[128];
	new stringje[256];
	if(ServerInfo[sCsend] && PlayerInfo[playerid][padmin] == 0)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Cselekvés","Most nem beszélhetsz!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(sscanf(params, "s[128]", szoveg))
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Cselekvés","Használat: /me [cselekvés]", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /me [cselekvés]");
	if(!OOC_Ellenorzes(playerid, "/me", szoveg))
		return true;
	new kicsinalja[128];

	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
	}
	format(stringje, sizeof(stringje), "* %s %s", kicsinalja, szoveg);
	ProxDetector(15.0, playerid, stringje, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	return 1;
}

CMD:ame(playerid, params[])// help-ben
{
	new szoveg[128], szoveg2[128], kicsinalja[128];
	if(ServerInfo[sCsend] && PlayerInfo[playerid][padmin] == 0)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Cselekvés","Most nem beszélhetsz!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Most nem beszélhetsz!");
	if(sscanf(params, "s[128]", szoveg))
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Cselekvés","Használat: /ame [cselekvés]", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /ame [cselekvés]");
	if(!OOC_Ellenorzes(playerid, "/ame", szoveg))
		return true;
	format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid, true));
	format(szoveg2, sizeof(szoveg2), "%s %s",kicsinalja, szoveg);
	format(szoveg, sizeof(szoveg), "%s", szoveg);
	ProxDetector(15.0, playerid, szoveg2, 0x6600ffAA,0x6600ffAA,0x6600ffAA,0x6600ffAA,0x6600ffAA);
	SetPlayerChatBubble(playerid, szoveg, 0x6600ffAA, 30.0, 1000*15);
	return 1;
}


CMD:do(playerid, params[])// help-ben
{
	new szoveg[128];
	new stringje[256];
	if(ServerInfo[sCsend] && PlayerInfo[playerid][padmin] == 0)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Történés","Most nem beszélhetsz!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(sscanf(params, "s[128]", szoveg))
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Történés","/do [Történés]", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /do [Történés]");
	if(!OOC_Ellenorzes(playerid, "/do", szoveg))
		return true;
	new kicsinalja[128];

	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid, true));
	}
	format(stringje, sizeof(stringje), "** %s  (( %s ))", szoveg, kicsinalja);
	ProxDetector(15.0, playerid, stringje, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE);
	return 1;
}

CMD:va(playerid, params[])// help-ben
{

	new szoveg[128];

	if(ServerInfo[sCsend] && PlayerInfo[playerid][padmin] == 0)
		return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Történés","Most nem beszélhetsz!", "Bezárás", "");
		// SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(sscanf(params, "s[128]", szoveg))
	    return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Történés","Használat: /va [cselekvés]", "Bezárás", "");
		// SCM(playerid, COL_MKEK, "Használat: /va [cselekvés]");
	if(!OOC_Ellenorzes(playerid, "/va", szoveg))
		return true;

	format(uzenet, sizeof(uzenet), "* Valaki %s", szoveg);
	ProxDetector(15.0, playerid, uzenet, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}
CMD:kanna(playerid,params[])
{
	if(isnull(params))
	{
        ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kanna","/kanna [Állapot / Enged / Feltölt ]","Bezárás", "");
		//SCM(playerid,COL_MKEK,"/kanna [Állapot / Enged / Feltölt ]");
		return 1;
	}
	new mit[64];
	new mennyit;
	sscanf(params,"s[64]d",mit,mennyit);
	if(egyezik(mit,"Állapot"))
	{
		SFM(playerid,COL_MKEK,"A Kannádba %d L benzin van!",PlayerInfo[playerid][pKannaBenzin]);
		return 1;
	}
	if(egyezik(mit,"Feltölt"))
	{
		new benzinkutid = BenzinkutnalVan(playerid);
		if(benzinkutid > 0)
		{
			if(mennyit < 0 || mennyit > 30)
			{
			    ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kanna","0-30 Liter között kell lennie!","Bezárás", "");
				//SCM(playerid,COL_LRED,"0-30 L között!");
				return true;
			}
			if(PlayerInfo[playerid][pKannaBenzin]+mennyit > 30)
			{
				SFM(playerid,COL_LRED,"Ennyi nem fér bele! Még %d L fér bele!",30-PlayerInfo[playerid][pKannaBenzin]);
				return 1;
			}
			if(PlayerInfo[playerid][ppenz] < mennyit*2)
			{
			    ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kanna","Nincs ennyi pénzed!","Bezárás", "");
				//SCM(playerid,COL_LRED,"Nincs ennyi pénzed!");
				return 1;
			}
			PlayerInfo[playerid][pKannaBenzin] += mennyit;
			SFM(playerid,COL_MKEK,"Sikeresen vettél %d L benzint!",mennyit);
			PenzHozzaad(playerid,-(mennyit*2));
			return true;
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kanna","Nem vagy Benzinkútnál!","Bezárás", "");
			//SCM(playerid,COL_LRED,"Nem vagy Benzinkútnál!");
		}
		return true;
	}
	if(egyezik(mit,"Enged"))
	{
		if(mennyit == 0)
		{
		    ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kanna","Hány litert?","Bezárás", "");
			//SCM(playerid,COL_LRED,"Hány litert?");
			return 1;
		}
		if(mennyit > PlayerInfo[playerid][pKannaBenzin])
		{
		    ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kanna","Nincs ennyi benzined!","Bezárás", "");
			//SCM(playerid,COL_LRED,"Nincs ennyi benzined!");
			return 1;
		}
		new kocsi = GetClosestVehicle(playerid);
		new Float:tavolsag = GetDistanceToCar(playerid, kocsi);

		if(tavolsag <= 5.0)
		{
			new vehicleidje = JarmuID(kocsi, playerid);

			if(IsPlayerInVehicle(playerid, kocsi))
				return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kanna","Nincs ennyi benzined!","Bezárás", "");
				//SCM(playerid, COL_LRED, "Letörne a lábad, ha kiszállnál?");
			if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
				return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kanna","Járó motornál tankolnál? Ökröt akarsz sütni?","Bezárás", "");
				// SCM(playerid, COL_LRED, "Járó motornál tankolnál? Ökröt akarsz sütni?");

			if(MAX_Benzin[ vInfo[ vehicleidje ][vModel] - 400 ] < vInfo[vehicleidje][vUzemanyag]+mennyit || mennyit < 0)
				return ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kanna","Ebbe a jármûbe nem fér ennyi üzemanyag!","Bezárás", "");
				//SCM(playerid, COL_LRED, "Ebbe a jármûbe nem fér ennyi üzemanyag!");

			vInfo[vehicleidje][vUzemanyag] += float(mennyit);
			PlayerInfo[playerid][pKannaBenzin] -= mennyit;
			SFM(playerid,COL_LRED,"Beletankoltál a kocsidba %d Liter Benzint! Maradt: %d L",mennyit,PlayerInfo[playerid][pKannaBenzin]);
		}
		else
		{
		    ShowPlayerDialog(playerid, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "Kanna","Nincs jármû a közeledben!","Bezárás", "");
			//SCM(playerid,COL_LRED,"Nincs jármû a közeledben!");
		}
	}
	return true;
}
CMD:tankol(playerid, params[])
{
	new
		parameterek[32],
		benzinkutid = BenzinkutnalVan(playerid);

	if(sscanf(params, "s[32]{}", parameterek))
	{
		SCM(playerid, COL_MKEK, "Használat: /tankol [paraméterek]");
		SCM(playerid, COL_MKEK, "Paraméterek: jármû, árak");
		return true;
	}

	if(benzinkutid > 0)
	{
		if(!strcmp(parameterek, "árak") || !strcmp(parameterek, "arak"))
		{
			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
			SendClientMessage(playerid, COLOR_WHITE, "Jelenlegi üzemanyag árak:");
			SendClientMessage(playerid, COLOR_WHITE, "Diesel jelenlegi ára: 2$");
			SendClientMessage(playerid, COLOR_WHITE, "Benzin jelenlegi ára: 2$");
			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
			return true;
		}
		else if(!strcmp(parameterek, "jármû") || !strcmp(parameterek, "jarmu"))
		{
			new kocsi = GetClosestVehicle(playerid);
			new benzinkut = GetClosestBenzinkut(playerid);
			new Float:tavolsag = GetDistanceToCar(playerid, kocsi);

			if(tavolsag <= 5.0)
			{
				new vehicleidje = JarmuID(kocsi, playerid);

				if(IsPlayerInVehicle(playerid, kocsi))
					return SCM(playerid, COL_LRED, "Letörne a lábad ha kiszállnál?");
				if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
					return SCM(playerid, COL_LRED, "Járó motornál tankolnál? Ökröt akarsz sütni?");

				new benzin, mennyit = floatround(MAX_Benzin[vInfo[vehicleidje][vModel] - 400] - vInfo[vehicleidje][vUzemanyag]);
				if(sscanf(params, "{s[32]}d", benzin))
					return SFM(playerid, COL_MKEK, "Használat: /tankol jármû [Üzemanyag] | Még ennyit tankolhatsz bele: "#COL_MKEK"%d", mennyit);

				if(benzin < 5 || benzin > mennyit)
					return SFM(playerid, COL_LRED, "A tankolható mennyiség "#COL_MKEK"5 "#COL_FEHER"és "#COL_MKEK"%d "#COL_FEHER" liter között kell lennie!", mennyit);

				new uar = (2 * floatround(benzin));
				if(Fizetesmod[playerid] == 0 && KPegyenleg(playerid) < uar)	return SFM(playerid, COL_LRED, "Nincs nálad %s$ készpénz!",FN(uar));
				else if(Fizetesmod[playerid] == 1 && BSZegyenleg(playerid) < uar) return SFM(playerid, COL_LRED,"Nincs a bankszámládon %s$!",FN(uar));

				vInfo[vehicleidje][vUzemanyag] += float(benzin);
				new munka = vInfo[ JarmuID( GetClosestVehicle(playerid), playerid ) ][vMunka];
				if(munka != FRAKCIO_LSPD && munka != FRAKCIO_LSFD && munka != FRAKCIO_KATONA && munka != FRAKCIO_FBI && munka != FRAKCIO_LAFD)
		        {
		            SFM(playerid, COL_MKEK, "Sikeresen megtankoltad a jármûvet "#COL_MKEK"%dl "#COL_FEHER"üzemanyaggal! Összeg: "#COL_MKEK"%s$", benzin, FN(uar, 0, ','));
					Cselekves(playerid, "Megtankolta a jármûvét", 1);
					PenzHozzaad(playerid,-uar);
				}
				else
				{
					SFM(playerid, COL_MKEK, " "#COL_MKEK"%dl "#COL_FEHER"üzemanyagot tankoltál! Összeg: "#COL_MKEK"%s$ amit az állam fizet.", benzin, FN(uar, 0, ','));
		            Cselekves(playerid, "Megtankolta a jármûvét", 1);
				}
				CegPenz(BIZ_OMV, uar);
				BenzinkutInfo[benzinkut][bbenzinmennyiseg] -= benzin; //bvon
				BenzinkutMentes();
				return true;
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû, amibe tankolhatnál!");
		}
	} else
		return SCM(playerid, COL_LRED, "Nem vagy egy benzinkútnál sem!");
	return true;
}

CMD:szamla(playerid, params[])
{
	new parameterek[10];

	if(sscanf(params, "s[10]{}", parameterek))
		return SCM(playerid, COL_MKEK, "Használat: /számla [ Nyit / Utal / Befizet / Kifizet / Info ]");

	new bool:talalt, k = NINCS, bool:automata = false;
	new Float:SzamlaPos[][3] =
	{
		{2307.646, -10.134, 22.819}
	};

	for(;++k < sizeof(SzamlaPos);)
		if(IsPlayerInRangeOfPoint(playerid, 3.0, PosExt(SzamlaPos[k])))
			talalt = true;

	k = 0;
	for(;++k < MAX_AUTOMATA;)
		if(AutomataInfo[k][auhasznalva] && AutomataInfo[k][autipus] == 1)
			if(IsPlayerInRangeOfPoint(playerid, 3.0, PosExt(AutomataInfo[k][aupos])))
				automata = true, talalt = true;

	if(!talalt)
	{
		PlayerInfo[playerid][pCP] = CP_GPS;
		SetPlayerCheckpoint(playerid, PosExt(SzamlaPos[0]), 5.0);
		SCM(playerid, COL_LRED, "Nem vagy bankfiókban vagy ATMnél! (Pozíció térképen jelölve!)");
		return true;
	}

	if(!strcmp(parameterek, "nyit") || !strcmp(parameterek, "Nyit"))
	{
		if(automata)
			return SCM(playerid, COL_LRED, "Automatánál nem nyithatsz bankszámlát!");

		if(!PlayerInfo[playerid][pBsz])
		{
			if(KPegyenleg(playerid) < 50)
				return SCM(playerid, COL_LRED, "Számlanyitáshoz minimum "#COL_VKEK"50"#COL_FEHER"$ szükségeltetik!");

			new szamlaszam = UjSzamlaszam(), pinkod = UjPinkod();

			PlayerInfo[playerid][pBsz] = szamlaszam;
			PlayerInfo[playerid][pBszPenz] += 25;
			PlayerInfo[playerid][pBszPin] = pinkod;
			GiveMoney(playerid, -50);
			SendFormatMessage(playerid, COLOR_WHITE, "Gratulálunk! Sikeresen nyitottál egy új bankszámlát! Számlaszámod: "#COL_VKEK"%d", FN(szamlaszam, 0, '-'));
			SendFormatMessage(playerid, COLOR_WHITE, "Kezdõ egyenleged: "#COL_VKEK"25$"#COL_FEHER" | BankkártyaPIN: "#COL_VKEK"%d", pinkod);

		} else
			return SCM(playerid, COL_LRED, "Neked már van bankszámlád, nem nyithatsz másikat!");
	}
	else if(!strcmp(parameterek, "töröl") || !strcmp(parameterek, "torol"))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return true;

		SCM(playerid, COL_VZOLD, "Bankszámla és tartalma törölve!");
		PlayerInfo[playerid][pBsz] = 0;
		PlayerInfo[playerid][pBszPenz] = 0;
		PlayerInfo[playerid][pBszPin] = 0;
		PlayerInfo[playerid][pCuccok][BL_BANKKARTYA] = 0;
	}
	else if(!strcmp(parameterek, "utal") || !strcmp(parameterek, "Utal"))
	{
		if(automata)
			return SCM(playerid, COL_LRED, "Automatánál nem utalhatsz!");

		if(PlayerInfo[playerid][pZarolva])
			return SCM(playerid, COL_LRED,"A számlád zárolva van!");

		new szamlaszam, osszeg;

		if(sscanf(params, "{s[10]}dd", szamlaszam, osszeg))
			return SCM(playerid, COL_MKEK, "Használat: /számla utal [számlaszám] [összeg]");

		new jatekosid = JatekosIDSzamlaszam(szamlaszam);
		if(jatekosid != NINCS)
		{
			if(osszeg < 50 || osszeg > MAX_ERTEK)
				return SCM(playerid, COL_LRED, "Az utalható minimum összeg "#COL_VKEK"50"#COL_FEHER"$!");

			if(PlayerInfo[playerid][pBszPenz] >= floatround(osszeg + (osszeg * KEZELESI_KOLTSEG)))
			{
				SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen átutaltál "#COL_VKEK"%s"#COL_FEHER" összeget "#COL_VKEK"%s"#COL_FEHER" számlájára!", FN(floatround(osszeg), 0, '.'), JatekosNev(jatekosid, true));
				SendFormatMessage(playerid, COLOR_WHITE, "Regi egyenleg: "#COL_VKEK"%s"#COL_FEHER"$", FN(floatround(PlayerInfo[playerid][pBszPenz]), 0, '.'));
				SendFormatMessage(playerid, COLOR_WHITE, "Új egyenleg: "#COL_VKEK"%s"#COL_FEHER"$ | Kezelési költség: "#COL_VKEK"%s"#COL_FEHER"$ (%d%)", FN(floatround(PlayerInfo[playerid][pBszPenz] - (osszeg + (osszeg * KEZELESI_KOLTSEG))), 0, '.'), FN(floatround(osszeg * KEZELESI_KOLTSEG), 0, '.'), (100 * KEZELESI_KOLTSEG));

				SendFormatMessage(jatekosid, COLOR_WHITE, #COL_VKEK"%s"#COL_FEHER" átutalt a számládra "#COL_VKEK"%s"#COL_FEHER"$-ot!", JatekosNev(playerid, true), FN(floatround(osszeg), 0, '.'));
				SendFormatMessage(jatekosid, COLOR_WHITE, "Regi egyenleg: "#COL_VKEK"%s"#COL_FEHER"$", FN(floatround(PlayerInfo[jatekosid][pBszPenz]), 0, '.'));
				SendFormatMessage(jatekosid, COLOR_WHITE, "Új egyenleg: "#COL_VKEK"%s"#COL_FEHER"$", FN(floatround(PlayerInfo[jatekosid][pBszPenz] + osszeg), 0, '.'));

				PlayerInfo[jatekosid][pBszPenz] += floatround(osszeg);
				PlayerInfo[playerid][pBszPenz] -= floatround(osszeg + (osszeg * KEZELESI_KOLTSEG));
				return true;
			} else {
				SFM(playerid, COL_LRED, "Nincs elegendõ pénz a tranzakció végrehajtásához! Szükséges: "#COL_VKEK"%s"#COL_FEHER"$", FN(osszeg + floatround(osszeg * KEZELESI_KOLTSEG), 0, '.'));
				return true;
			}
		} else
			return SCM(playerid, COL_LRED, "Nincs ilyen számlaszám, kérlek ellenõrizd az adatokat!");
	}
	else if(!strcmp(parameterek, "befizet") || !strcmp(parameterek, "Befizet"))
	{
		if(automata)
			return SCM(playerid, COL_LRED, "Automatánál nem rakhatsz be pénzt!");

		if(PlayerInfo[playerid][pZarolva])
			return SCM(playerid, COL_LRED,"A számlád zárolva van!");

		if(PlayerInfo[playerid][pBsz] > 0)
		{
			new osszeg;
			if(sscanf(params, "{s[10]}d", osszeg))
				return SCM(playerid, COL_MKEK, "Használat: /számla befizet [összeg]");

			if(osszeg < 50 || osszeg > MAX_ERTEK)
				return SCM(playerid, COL_LRED, "A minimum befizethetõ összeg "#COL_VKEK"50"#COL_FEHER"$!");
			if(KPegyenleg(playerid) < osszeg)
				return SCM(playerid, COL_LRED, "Nincs nálad ennyi készpénz!");

			SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen befizettél "#COL_VKEK"%s"#COL_FEHER"$ összeget!", FN(osszeg, 0, '.'));
			SendFormatMessage(playerid, COLOR_WHITE, "Régi egyenleged: "#COL_VKEK"%s"#COL_FEHER"$", FN(PlayerInfo[playerid][pBszPenz], 0, '.'));
			SendFormatMessage(playerid, COLOR_WHITE, "Új egyenleged: "#COL_VKEK"%s"#COL_FEHER"$", FN(PlayerInfo[playerid][pBszPenz] + osszeg, 0, '.'));
			PlayerInfo[playerid][pBszPenz] += osszeg;
			GiveMoney(playerid,-osszeg);
			return true;
		} else
			return SCM(playerid, COL_LRED, "Jelenleg nincs bankszámlád! Amennyiben nyitni szeretnél, menj el egy bankba, és használd a "#COL_VKEK"/számla nyit"#COL_FEHER" parancsot!");
	}
	else if(!strcmp(parameterek, "kifizet") || !strcmp(parameterek, "Kifizet"))
	{
		if(PlayerInfo[playerid][pZarolva])
			return SCM(playerid, COL_LRED,"A számlád zárolva van!");

		if(PlayerInfo[playerid][pBsz] > 0)
		{
			new osszeg;

			if(sscanf(params, "{s[10]}d", osszeg))
				return SCM(playerid, COL_MKEK, "Használat: /számla kifizet [összeg]");

			if(osszeg < 50 || osszeg > MAX_ERTEK)
				return SCM(playerid, COL_LRED, "A kifizethetõ összeg minimum "#COL_VKEK"50"#COL_FEHER"$!");

			if(PlayerInfo[playerid][pBszPenz] < floatround(osszeg + (osszeg * KEZELESI_KOLTSEG)))
			{
				SCM(playerid, COL_LRED, "Nincs a bankszámládon ennyi készpénz!");
				SFM(playerid, COL_LRED, "Maximálisan kivehetõ összeg: "#COL_VKEK"%s"#COL_FEHER"$", FN(floatround(PlayerInfo[playerid][pBszPenz] - (PlayerInfo[playerid][pBszPenz] * KEZELESI_KOLTSEG)), 0, '.'));
				return true;
			}
			SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen kivettél "#COL_VKEK"%s"#COL_FEHER"$ összeget!", FN(osszeg, 0, '.'));
			SendFormatMessage(playerid, COLOR_WHITE, "Régi egyenleged: "#COL_VKEK"%s"#COL_FEHER"$", FN(PlayerInfo[playerid][pBszPenz], 0, '.'));
			SendFormatMessage(playerid, COLOR_WHITE, "Új egyenleged: "#COL_VKEK"%s"#COL_FEHER"$ | Kezelési költség: "#COL_VKEK"%s"#COL_FEHER"$ (%d%)", FN(floatround(PlayerInfo[playerid][pBszPenz] - (osszeg + (osszeg *KEZELESI_KOLTSEG))), 0, '.'), FN(floatround(osszeg * KEZELESI_KOLTSEG), 0, '.'), (100 * KEZELESI_KOLTSEG));
			//SendFormatMessage(playerid, COLOR_WHITE, "Kezelési költség: "#COL_VKEK"%s"#COL_FEHER"$ ("#KEZELESI_KOLTSEG"%)", FN(floatround(osszeg * KEZELESI_KOLTSEG), 0, '.'));
			PlayerInfo[playerid][pBszPenz] -= floatround(osszeg + (osszeg * KEZELESI_KOLTSEG));
			GiveMoney(playerid,osszeg);
			
			return true;
		} else
			return SendClientMessage(playerid, COLOR_WHITE, "Jelenleg nincs bankszámlád! Amennyiben nyitni szeretnél, menj el egy bankba, és használd a "#COL_VKEK"/számla nyit"#COL_FEHER" parancsot!");
	}
	else if(!strcmp(parameterek, "info"))
	{
		if(PlayerInfo[playerid][pBsz] > 0)
		{
			SendFormatMessage(playerid, COLOR_WHITE, "Bankszámlaszám: "#COL_VKEK"%s", FN(PlayerInfo[playerid][pBsz], 0, '-'));
			SendFormatMessage(playerid, COLOR_WHITE, "Bankszámla egyenleg: "#COL_VKEK"%s"#COL_FEHER"$", FN(PlayerInfo[playerid][pBszPenz], 0, '.'));
			SendFormatMessage(playerid, COLOR_WHITE, "BankkártyaPIN: "#COL_VKEK"%d", PlayerInfo[playerid][pBszPin]);
			if(PlayerInfo[playerid][pZarolva])
				SendClientMessage(playerid, COLOR_WHITE, "Bankszámla státusza: "#COL_LRED"Zárolva");
			return true;
		} else
			return SendClientMessage(playerid, COLOR_WHITE, "Jelenleg nincs bankszámlád! Amennyiben nyitni szeretnél, menj el egy bankfiókba, és használd a "#COL_VKEK"/számla nyit"#COL_FEHER" parancsot!");
	}
	return true;
}

CMD:kulcs(playerid, params[])
{
	new param[24];
	if(sscanf(params, "s[24]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /kulcs [ Jármû ]");

	if(!strcmp(param, "jármû", true) || !strcmp(param, "jarmu", true))
	{
		new kulcs, jatekos;
		if(sscanf(params, "{s[24]}ud", jatekos, kulcs))
			return SCM(playerid, COL_MKEK, "Használat: /kulcs jármû [Játékos] [Rendszám] | Stats-ban található rendszám");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos) || playerid == jatekos)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(playerid == jatekos)
			return SCM(playerid, COL_LRED, "Cicaborsó, hány személyiséged van, hogy kölcsön adod magadnak? :D");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 3)
			return SCM(playerid, COL_LRED, "A játékos nincs a közeledben!");

		kulcs = JarmuID(kulcs, playerid);
		new i = NINCS, bool:van = false;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[playerid][pJarmuKulcs][i] != NINCS && PlayerInfo[playerid][pJarmuKulcs][i] == kulcs)
			{
				SFM(playerid, COL_MKEK, "Átadtad a %d számú jármûved kulcsát neki: "#COL_MKEK"%s"#COL_FEHER" | Rendszám: "#COL_MKEK"LS - %d[%d]", (i + 1), JatekosNev(jatekos), vInfo[kulcs][vID], kulcs);
				SFM(jatekos, COL_MKEK, "%s átadta neked a "#COL_MKEK"LS - %d[%d]"#COL_FEHER" rendszámú jármûve kulcsait.", JatekosNev(playerid), vInfo[kulcs][vID], kulcs);
				Cselekves(playerid, "átadta valakinek a jármûve kulcsait..", 1);
				PlayerInfo[jatekos][pJarmuKolcson] = kulcs;
				van = true;
				break;
			}
		}

		if(!van)
			return SCM(playerid, COL_LRED, "Nincs ilyen rendszámú jármûved!");
	}
	return true;
}

CMD:motor(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Csak jármûben használhatod!");

	if(GetPlayerVehicleSeat(playerid))
		return SCM(playerid, COL_LRED, "Csak sofõrként tudod használni!");
		
	if(MunkaFolyamatban[playerid] == 1)
		return SCM(playerid,COL_LRED,"Már elkezdtél valamilyen munkafolyamatot!");

	new
		kocsi = GetPlayerVehicleID(playerid),
		jarmuidje = JarmuID(kocsi, playerid);

	if(IsABicikli(vInfo[jarmuidje][vModel]))
		return SCM(playerid, COL_LRED, "Ez egy bicikli :D Nincs benne motor!");

	if(!vInfo[jarmuidje][vUzemanyag])
		return SCM(playerid, COL_LRED, "A jármûbõl kifogyott az üzemanyag!");

	if(PlayerInfo[playerid][pTiltasok][TILTAS_AUTO] > 0)
	{
		SFM(playerid,COL_LRED,"Nem használhatsz jármûvet még %d percig",PlayerInfo[playerid][pTiltasok][TILTAS_AUTO]/60);
		return 1;
	}

	if(PlayerInfo[playerid][pmotortinditja])
		return SCM(playerid, COL_LRED, "A jármû jelenleg is indítás alatt áll!");

	if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
	{
		SetJarmu(kocsi, KOCSI_MOTOR, 0);
		SendClientMessage(playerid, COLOR_LIGHTRED, "A jármû leállítva!");
		/*Cselekves(playerid, "leállította a jármûvét", 1);*/
		vInfo[jarmuidje][vMotorelinditva] = false;

	} else {

		if(JarmuKulcs(playerid, jarmuidje))
		{
			new kocsiserules, starttime, Float:kocsielet;
			GetVehicleHealth(kocsi, kocsielet);
			if((100 - (((kocsielet - 350) / 650)) * 100) > 100)
				return SCM(playerid, COL_LRED, "A jármû állapota nem teszi lehetõvé a motor indítását!");

			kocsiserules = 1000 - floatround(kocsielet);
			starttime = 1000 + (kocsiserules * 5);
			SendClientMessage(playerid, COLOR_GREEN, "Jármû indítás...");
	    	defer JarmuInditas[starttime](playerid, kocsi);
			PlayerInfo[playerid][pmotortinditja] = true;
		}
		else
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ehhez a jármûhöz nincs kulcsod!");
	}
	return true;
}
CMD:hulla(playerid, params[])
{
	new fparams[24];
	if(sscanf(params, "s[24]{}", fparams))
	{
		if(Admin(playerid, 1)) SCM(playerid, COL_MKEK, "Használat: /hulla [ Megvizsgál / Bepakol / Motoz / Lead / Elvesz / Töröl ]");
		else SCM(playerid, COL_MKEK, "Használat: /hulla [ Megvizsgál / Bepakol / Motoz / Lead / Elvesz ]");
		return true;
	}

	if(!strcmp(fparams, "megvizsgál") || !strcmp(fparams, "megvizsgal"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LAFD)
			return SCM(playerid, COL_LRED, "Te nem vagy a mentõszolgálat vagy a rendõrség tagja!");

		if(PlayerInfo[playerid][pVizsgal])
			return SCM(playerid, COL_LRED, "Egy vizsgálás már folyamatban van!");

		if(IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COL_LRED, "Jármûbõl nem tudod megvizsgálni a hullát!");

		new hulla = GetClosestHulla(playerid);
		if(GetDistanceToHulla(playerid, hulla) < 5.0 || hulla != NINCS)
		{
			if(HullaInfo[hulla][Hvw] != GetPlayerVirtualWorld(playerid))
				return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");

			ApplyPlayerAnimation(playerid, "BOMBER","BOM_Plant_Loop", 4.0, 1, 0, 0, 0, 0, 1);
			ApplyPlayerAnimation(playerid, "BOMBER","BOM_Plant_Loop", 4.0, 1, 0, 0, 0, 0, 1);
			defer VizsgalasVege[15000](playerid, hulla);
			SCM(playerid, COL_MKEK, "Elkezdtél nyomokat keresni a hullán, amibõl rájöhetsz ki is valójában!");
			PlayerInfo[playerid][pVizsgal] = true;
			Cselekves(playerid, "elkezdte megvizsgálni a hullát", 1, false);
			return true;

		} else
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");
	}
	else if(egyezik(fparams,"amegnez") || egyezik(fparams, "amegnéz"))
	{
	    if(!Admin(playerid, 1))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

        new hulla = GetClosestHulla(playerid);
        
        if(GetDistanceToHulla(playerid, hulla) < 5.0 && hulla != NINCS)
			SendFormatMessage(playerid, COLOR_WHITE, "Hulla gyilkosa: %s", HullaInfo[hulla][Hmegolte]);
        else
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");
	}
	else if(!strcmp(fparams, "töröl") || !strcmp(fparams, "torol"))
	{
		if(!Admin(playerid, 1))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new mindd[3];
		if(sscanf(params,"{s[24]}s[3]", mindd))
  		{
  		    hulla_kozelitorol:
				new hulla = GetClosestHulla(playerid);

				if(GetDistanceToHulla(playerid, hulla) < 5.0 && hulla != NINCS)
				{
					HullaTorol(hulla);
					SCM(playerid, COL_VZOLD, "Sikeresen törölted a közeledben lévõ hullát!");
					return true;

				} else
					return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");
  		}
  		else
  		{
  		    if(egyezik(mindd, "all"))
  		    {
  		        new i = NINCS;
  		        for(; ++i < MAX_HULLA;)
  		        {
  		            if(!HullaInfo[i][Hvan]) continue;
  		            HullaTorol(i);
  		        }
  		        SCM(playerid, COL_VZOLD, "Sikeresen törölted az összes hullát a szerveren!");
  		    }
  		    else goto hulla_kozelitorol;
  		}
	}
	else if(!strcmp(fparams, "bepakol"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LAFD)
			return SCM(playerid, COL_LRED, "Te nem vagy a mentõszolgálat vagy a rendõrség tagja!");

		new hulla = GetClosestHulla(playerid);
		if(GetDistanceToHulla(playerid, hulla) > 5.0 || hulla == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");

		new kocsi = GetClosestVehicle(playerid);
		if(HullaInfo[hulla][Hvw] != GetPlayerVirtualWorld(playerid))
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");

		if(GetDistanceToVehicle(playerid, kocsi) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

		new vid = JarmuID(kocsi, playerid);

		if((vInfo[vid][vModel] != 442) && (vInfo[vid][vModel] != 416))
			return SCM(playerid, COL_LRED, "Ebbe a jármûbe nem tudod bepakolni!");

		if(vInfo[vid][vHulla] >= 2)
			return SCM(playerid, COL_LRED, "A jármûbe nem fér több hulla, elõtte add le a meglévõket!");

		vInfo[vid][vHulla]++;
		HullaTorol(hulla);
		SFM(playerid, COL_LRED, "Bepakoltál egy hullát a jármûbe. Jelenleg "#COL_MKEK"%d"#COL_FEHER" van benne.", vInfo[vid][vHulla]);
	}
	else if(!strcmp(fparams, "motoz"))
	{
		new hulla = GetClosestHulla(playerid);
		if(IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COL_LRED, "Jármûbõl akarod átnézni a hullát?");

		if(HullaInfo[hulla][Hvw] != GetPlayerVirtualWorld(playerid))
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");

		if(GetDistanceToHulla(playerid, hulla) > 5.0 || hulla == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");

		SendClientMessage(playerid, COLOR_ORANGE, "======= [ Holttestnél lévõ értékek ] =======");
		SendFormatMessage(playerid, COLOR_WHITE, "Heroin: "#COL_MKEK"%d"#COL_FEHER"g | Kokain: "#COL_MKEK"%d"#COL_FEHER"g | Material: "#COL_MKEK"%d"#COL_FEHER"db",HullaInfo[hulla][HHeroin], HullaInfo[hulla][HKokain], HullaInfo[hulla][HMati]);
		SendFormatMessage(playerid, COLOR_WHITE, "Marihuana: "#COL_MKEK"%d"#COL_FEHER"g | Pénz: "#COL_MKEK"%s"#COL_FEHER"$",HullaInfo[hulla][HMariska], FN( HullaInfo[hulla][HPenz], 0, ',' ));
		SendClientMessage(playerid, COLOR_YELLOW, "(( Ha elszeretnéd venni az értéktárgyakat, használd a /hulla elvesz parancsot! ))");
		Cselekves(playerid, "átkutatott egy holttestet", 1, false);
	}
	else if(!strcmp(fparams, "lead"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LAFD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
			return SCM(playerid, COL_LRED, "Te nem vagy a mentõszolgálat tagja!");

		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1177.910, -1308.433, 13.560))//LS kórház
		{
			if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
			{
				PlayerInfo[playerid][pCP] = CP_GPS;
				SetPlayerCheckpoint(playerid, 1177.910, -1308.433, 13.560, 5.0);
			}
			SCM(playerid, COL_LRED, "Nem vagy a Los Angeles-i Kórháznál! (GPS-en jelölve)");
			return true;
		}

		new kocsi = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, kocsi) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

		new vid = JarmuID(kocsi, playerid);
		if((vInfo[vid][vModel] != 442) && (vInfo[vid][vModel] != 416))
			return SCM(playerid, COL_LRED, "Ebbe a jármûbe nem tudod bepakolni!");

		if(!vInfo[vid][vHulla])
			return SCM(playerid, COL_LRED, "A jármûben nincs leadható hulla!");

		new penz = (vInfo[vid][vHulla] * HULLASZORZO);
		SFM(playerid, COL_VZOLD, "Sikeresen leadtál "#COL_MKEK"%d"#COL_FEHER" holttestet ezért "#COL_MKEK"%s"#COL_FEHER"$ jóváírásra került a bankszámládon!", vInfo[vid][vHulla], FN(penz, 0, ','));
		PlayerInfo[playerid][pBszPenz] += penz;
		vInfo[vid][vHulla] = 0;
	}
	else if(!strcmp(fparams, "elvesz") || !strcmp(fparams, "kirabol"))
	{
		new param[24];
		if(sscanf(params, "{s[24]}s[24]", param))
			return SCM(playerid, COL_MKEK, "Használat: /hulla elvesz [ Material / Heroin / Marihuana / Kokain / Pénz ]");

		if(IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COL_LRED, "Jármûbõl nem használható!");

		new hulla = GetClosestHulla(playerid);

		if(HullaInfo[hulla][Hvw] != GetPlayerVirtualWorld(playerid) || GetDistanceToHulla(playerid, hulla) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben holttest!");

		if(!strcmp(param, "material") || !strcmp(param, "materiál"))
		{
			new mats = PlayerInfo[playerid][pMaterial] + HullaInfo[hulla][HMati];
			if(mats > P_MAX_MATERIAL)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi!");

			if(!HullaInfo[hulla][HMati])
				return SCM(playerid, COL_LRED, "Nincs nála materiál!");

			PlayerInfo[playerid][pMaterial] += HullaInfo[hulla][HMati];
			HullaInfo[hulla][HMati] = 0;
			Cselekves(playerid,  "elvett némi materialt a közelben lévõ holttesttõl", 0);
			return true;
		}
		else if(!strcmp(param, "heroin"))
		{
			new heroin = PlayerInfo[playerid][pHeroin] + HullaInfo[hulla][HHeroin];
			if(heroin > P_MAX_HEROIN)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi!");

			if(!HullaInfo[hulla][HHeroin])
				return SCM(playerid, COL_LRED, "Nincs nála heroin!");

			PlayerInfo[playerid][pHeroin] += HullaInfo[hulla][HHeroin];
			HullaInfo[hulla][HHeroin] = 0;
			Cselekves(playerid,  "elvett némi heroint a közelben lévõ holttesttõl", 0);
			return true;
		}
		else if(!strcmp(param, "marihuana") || !strcmp(param, "marihuána"))
		{
			new mariska = PlayerInfo[playerid][pMarihuana] + HullaInfo[hulla][HMariska];
			if(mariska > P_MAX_MARIHUANA)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi!");

			if(!HullaInfo[hulla][HMariska])
				return SCM(playerid, COL_LRED, "Nincs nála marihuana!");

			PlayerInfo[playerid][pMarihuana] += HullaInfo[hulla][HMariska];
			HullaInfo[hulla][HMariska] = 0;
			Cselekves(playerid,  "elvett némi marihuanát a közelben lévõ holttesttõl", 0);
			return true;
		}
		else if(!strcmp(param, "kokain"))
		{
			new kokain = PlayerInfo[playerid][pKokain] + HullaInfo[hulla][HKokain];
			if(kokain > P_MAX_KOKAIN)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi!.");

			if(!HullaInfo[hulla][HKokain])
				return SCM(playerid, COL_LRED, "Nincs nála kokain!");

			PlayerInfo[playerid][pKokain] += HullaInfo[hulla][HKokain];
			HullaInfo[hulla][HKokain] = 0;
			Cselekves(playerid,  "elvett némi kokaint a közelben lévõ holttesttõl", 0);
			return true;
		}
		else if(!strcmp(param, "pénz") || !strcmp(param, "penz"))
		{
			if(!HullaInfo[hulla][HPenz])
				return SCM(playerid, COL_LRED, "Nincs nála pénz!");

			PlayerInfo[playerid][ppenz] += HullaInfo[hulla][HPenz];
			HullaInfo[hulla][HPenz] = 0;
			Cselekves(playerid,  "elvett némi pénzt a közelben lévõ holttesttõl", 0);
			return true;
		}
	}
	return true;
}
CMD:eldob(playerid, params[])
{
	if(PlayerInfo[playerid][pjail] != 0) return 1;
	if(isnull(params))
	{
		go_help:
		SCM(playerid, COL_MKEK, "Használat: /eldob [ "#COL_MKEK"Tárgyak"#COL_FEHER" ]");
		SCM(playerid, COL_MKEK, "[Tárgyak]: Fegyver, Materiál, Marihuána Kokain, Heroin, Készpénz");
		SCM(playerid, COL_MKEK, "[Tárgyak]: Telefon, GPS, Táska, Maszk, Lõszer");
		return true;
	}
	if(Bortonben(playerid) > 0)
		return SCM(playerid, COL_LRED, "Börtönben nem használhatod!");
		
    if(PlayerInfo[playerid][pjatekosszint] < 3)
		return SCM(playerid,COL_LRED,"Minimum 3 as Szint!");

	new param[24], db = 0;
	sscanf(params, "s[24]D(0){}", param, db);

	if(!strcmp(params, "fegyver", true, 7))
	{
		if(!PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Nincs a kezedben fegyver!");
			
  		if((PlayerInfo[playerid][pFegyver] == 9) && IsJob(playerid, MUNKA_FAVAGO))
		    return SCM(playerid,COL_LRED,"Ezt nem dobhatod el!");

		if(PlayerInfo[playerid][pDuty][0] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND)
			return SCM(playerid, COL_LRED, "Szolgálatban nem használhatod!");

		TargyEldob(playerid, ELDOB_FEGYVER, GetPlayerAmmo(playerid));
		return true;
	}
	else if(!strcmp(param, "material", true) || !strcmp(param, "materiál", true) || !strcmp(param, "mati", true))
	{
		if(!db)
			return SCM(playerid, COL_MKEK, "Használat: /eldob materiál [Mennyit]");

		if(PlayerInfo[playerid][pMaterial] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi materiál!");

		if(db > 15000000 || db < 5)
			return SCM(playerid, COL_LRED, "minimum 5 | maximum 15.000.000g marihuanát dobhatsz el!");

		TargyEldob(playerid, ELDOB_MATERIAL, (db > P_MAX_MATERIAL ? P_MAX_MATERIAL : db));
		return true;
	}
	else if(!strcmp(param, "heroin", true))
	{
		if(!db)
			return SCM(playerid, COL_MKEK, "Használat: /eldob heroin [Mennyit]");

		if(PlayerInfo[playerid][pHeroin] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi heroin!");

		if(db > 15000000 || db < 5)
			return SCM(playerid, COL_LRED, "minimum 5 | maximum 15.000.000g marihuanát dobhatsz el!");

		TargyEldob(playerid, ELDOB_HEROIN, (db > P_MAX_HEROIN ? P_MAX_HEROIN : db));
		return true;
	}
	else if(!strcmp(param, "kokain", true))
	{
		if(!db)
			return SCM(playerid, COL_MKEK, "Használat: /eldob kokain [Mennyit]");

		if(PlayerInfo[playerid][pKokain] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi kokain!");

		if(db > 15000000 || db < 5)
			return SCM(playerid, COL_LRED, "minimum 5 | maximum 15.000.000g marihuanát dobhatsz el!");

		TargyEldob(playerid, ELDOB_KOKAIN, (db > P_MAX_KOKAIN ? P_MAX_KOKAIN : db));
		return true;
	}
	else if(!strcmp(param, "marihuana", true) || !strcmp(param, "marihuána", true) || !strcmp(param, "mariska", true))
	{
		if(!db)
			return SCM(playerid, COL_MKEK, "Használat: /eldob marihuána [Mennyit]");

		if(PlayerInfo[playerid][pMarihuana] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi marihuána!");

		if(db > 15000000 || db < 5)
			return SCM(playerid, COL_LRED, "minimum 5 | maximum 15.000.000g marihuanát dobhatsz el!");

		TargyEldob(playerid, ELDOB_MARI, (db > P_MAX_MARIHUANA ? P_MAX_MARIHUANA : db));
		return true;
	}
	else if(!strcmp(param, "készpénz", true) || !strcmp(param, "keszpenz", true))
	{
        if(PlayerInfo[playerid][pjatekosszint] < 3)
		return SCM(playerid,COL_LRED,"Minimum 3 as Szint!");
		
		if(!db)
		return SCM(playerid, COL_MKEK, "Használat: /eldob készpénz [Mennyit]");

		if(PlayerInfo[playerid][ppenz] < db)
		return SCM(playerid, COL_LRED, "Nincs nálad ennyi készpénz!");

		if(db > 60000 || db < 5)
		return SCM(playerid, COL_LRED, "minimum 5 | maximum 60.000$-t dobhatsz el!");

		TargyEldob(playerid, ELDOB_PENZ, db);
		return true;
	}
	else if(egyezik(param, "lõszer") || egyezik(param, "loszer"))
	{
	    if(PlayerInfo[playerid][pjatekosszint] < 3)
			return SCM(playerid,COL_LRED,"Minimum 3 as Szint!");

		if(!db)
			return SCM(playerid, COL_MKEK, "Használat: /eldob lõszer [mennyit]");
		
		if(PlayerInfo[playerid][pDuty][0] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND)
			return SCM(playerid, COL_LRED, "Szolgálatban nem használhatod!");
			
		TargyEldob(playerid, ELDOB_LOSZER, db);
	}
	else if(!strcmp(param, "telefon", true) || !strcmp(param, "mobil", true))
	{
		//if(!PlayerInfo[playerid][pCuccok][BL_TELEFON])
		if(PlayerInfo[playerid][pCuccok][BL_TELEFON]<1)
			return SCM(playerid, COL_LRED, "Neked nincs is telefonod!");

		SCM(playerid, COL_VZOLD, "Eldobtad a telefonod!");
		Cselekves(playerid, "eldobta a telefonját", 1);
		PlayerInfo[playerid][pCuccok][BL_TELEFON] = 0;
		return true;
	}
	else if(!strcmp(param, "maszk", true))
	{
		if(!PlayerInfo[playerid][pMaszk])
			return SCM(playerid, COL_LRED, "Neked nincs maszkod!");

		RemovePlayerAttachedObject(playerid, SLOT_MASZK);
		SCM(playerid, COL_VZOLD, "Eldobtad a maszkod!");
		Cselekves(playerid, "eldobta a maszkját", 1);
		PlayerInfo[playerid][pMaszk] = 0;
		return true;
	}
	else if(!strcmp(param, "táska", true) || !strcmp(param, "taska", true))
	{
		if(PlayerInfo[playerid][pHatizsak] == 0)
			return SCM(playerid, COL_LRED, "Neked nincs táskád!");

		if(PlayerInfo[playerid][pMegerosites] != playerid)
		{
			PlayerInfo[playerid][pMegerosites] = playerid;
			SCM(playerid, COL_LRED, "Biztos, hogy el szeretnéd dobni a táskád? ((Jelenleg törlõdik)) Ha igen, írd be mégegyszer!");
			return true;
		}

		PlayerInfo[playerid][pMegerosites] = NINCS;

		SCM(playerid, COL_VZOLD, "Eldobtad a táskád!");
		Cselekves(playerid, "eldobta a táskáját", 1);

		PlayerInfo[playerid][pHatizsak] = 0;
		RemovePlayerAttachedObject(playerid, SLOT_HATIZSAK);
		PlayerInfo[playerid][pBMennyi] = 0;
		return true;
	}
	else if(!strcmp(param, "gps", true))
	{
		if(!PlayerInfo[playerid][pCuccok][BL_GPS])
			return SCM(playerid, COL_LRED, "Neked nincs is GPS lokátorod!");

		SCM(playerid, COL_VZOLD, "Eldobtad a GPS lokátorod!");
		Cselekves(playerid, "eldobta a GPS lokátorát", 1);
		PlayerInfo[playerid][pCuccok][BL_GPS] = 0;
		return true;

	} else {

		params[0] = EOS;
		param[0] = EOS;
		goto go_help;
	}
	return true;
}

CMD:felvesz(playerid, params[])
{
	#pragma unused params
	new did = GetNearestObject(playerid);
	if(did == NINCS)
		return SCM(playerid, COL_LRED, "Nincs a közeledben felvehetõ tárgy!");

	TargyFelvesz(playerid, did, dInfo[did][dTipus]);
	return true;
}
stock Lofegyver(weapon)
{
	switch(GetGunSlot(weapon))
 	{
 	    case 2,3,4,5,6,7: return true;
 	}
 	return false;
}
stock Fegyver(playerid, bool:elovesz, weap = NINCS, ammo = NINCS)
{
	if(elovesz)
	{
	    if(weap == NINCS || ammo == NINCS) return false;
	    
		PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
		GivePlayerWeapon(playerid, weap, ammo);
		PlayerInfo[playerid][pFegyver] = weap;
		SetPlayerAttachedWeapon(playerid);
		return true;
    }
    else
    {
        new wep, slot = GetGunSlot(PlayerInfo[playerid][pFegyver]);
        
		GetPlayerWeaponData(playerid, slot, wep, PlayerInfo[playerid][pToltenyek][slot]);
						
        PlayerInfo[playerid][pFegyver] = 0;
		ResetPlayerWeapons(playerid);
		SetPlayerAttachedWeapon(playerid);
		
		return true;
    }
}
CMD:fegyver(playerid, params[])
{
	if(Bortonben(playerid) > 0 && !Admin(playerid, FOADMIN_SZINT))
		return SCM(playerid, COL_LRED, "Börtönben nem használhatod!");

	if(PlayerInfo[playerid][pjatekosszint] < 3 && !PlayerInfo[playerid][pPaintBall][0])
		return SCM(playerid, COL_LRED, "Fegyverhasználat csak 3 szinttõl érhetõ el(Kivétel PaintBallban)!");

	new param[32], param2[32];
	if(sscanf(params, "s[32]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /f(egyver) [ Elõvesz(E) / Elrak(K) / Újratölt(R) / Vesz(V)");

	if(egyezik(param, "elrak") || egyezik(param, "k"))
	{
		if(!PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Nincs a kezedben fegyver!");

		Cselekves(playerid, "elrakta a fegyverét", 1);
		SCM(playerid, COL_MKEK, "Elraktad a fegyvered!");

        Fegyver(playerid, false);
		return true;
	}
	else if(egyezik(param, "vesz") || egyezik(param, "v"))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 15.0, 312.736, -167.765, 999.593) ) return SCM(playerid, COL_LRED, "Nem vagy fegyverboltban!");
		new dstr[1024], tmp[128], b = NINCS;
		for(;++b < sizeof(Fegyver_Lista);)
		{
			format(tmp, sizeof(tmp), "\n%s\t[%s$]", Fegyver_Lista[b][0],
			FN(Fegyver_Lista[b][3][0], 0, ','));
			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid, DIALOG_FEGYVERBOLT, DIALOG_STYLE_LIST, "Fegyverbolt",dstr, "Megvesz", "Mégse");
	}
	else if(egyezik(param, "elõvesz") || egyezik(param, "elovesz") || egyezik(param, "e"))
	{
		if(sscanf(params, "{s[32]}s[32]", param2))
			return SCM(playerid, COL_MKEK, "Használat: /F(egyver) Elõvesz [Fegyver Név / Fegyver ID]");

		if(PlayerInfo[playerid][pAnimban][0] == 1 || PlayerInfo[playerid][pBilincselve] == 1 || PlayerInfo[playerid][pMegkotve] == true)
			return SCM(playerid, COL_LRED, "Jelenleg nem vehetsz elõ fegyvert!");

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			return SCM(playerid, COL_LRED, "Vezetõként nem vehetsz elõ fegyvert!");

		if(PlayerInfo[playerid][pTiltasok][TILTAS_FEGYVER] > 0)
		{
			SFM(playerid,COL_LRED,"Még %d percig nem vehetsz elõ fegyver",PlayerInfo[playerid][pTiltasok][TILTAS_FEGYVER]/60);
			return 1;
		}

		if(PlayerInfo[playerid][pFegyver])
		{
			SCM(playerid, COL_LRED, "Már van a kezedben fegyver!");
			return true;
		}

		new slot, id, fegyo, ammo;
		if(IsNumeric(param2))
		{
			id = strval(param2);

			if(id < 1 || id >= sizeof(aWeaponNames))
				return SCM(playerid, COL_LRED, "Nincs ilyen fegyver!");
		} else {
			id = GetGunID(param2);

			if(id == 0)
				return SCM(playerid, COL_LRED, "Nincs ilyen fegyver!");
		}

		slot = GetGunSlot(id);
		fegyo = PlayerInfo[playerid][pFegyverek][slot];
		ammo = PlayerInfo[playerid][pToltenyek][slot];

		if(fegyo != id || ammo == 0)
			return SCM(playerid, COL_LRED, "Nincs ilyen fegyvered!");

		if(ammo == 1 && Lofegyver(id))
		    return SCM(playerid, COL_LRED, "Nincs benne lõszer!");
		    
		if(IsPlayerInAnyVehicle(playerid) && (id == 22 || id == 23 || id == 24))
			return SCM(playerid, COL_LRED, "Ezt nem veheted elõ jármûben!");

		if(id == PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Ezt a fegyvert már elõvetted!");

		SCM(playerid, COL_VZOLD, "Elõvettél egy fegyvert!");
		Cselekves(playerid, "elõvett egy fegyvert", 1);

		Fegyver(playerid, true, fegyo, ammo);

		if(id >= 24 && id <= 34)
			LoopingAnim(playerid, "UZI", "UZI_reload", 4.0, 0, 0, 0, 0, 0);
	}
	else if(egyezik(param, "újratölt") || egyezik(param, "újra") || egyezik(param, "r"))
	{
		if(!PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Nincs a kezedben fegyver!");

		if(PlayerInfo[playerid][pAnimban][0] == 1 || PlayerInfo[playerid][pBilincselve] == 1 || PlayerInfo[playerid][pMegkotve] == true)
			return SCM(playerid, COL_LRED, "Jelenleg nem töltheted újra a fegyvert!");

		new wep, ammo;

		GetPlayerWeaponData(playerid, aWeaponSlotok[PlayerInfo[playerid][pFegyver]], wep, ammo);
		if(ammo < 1)
			return SCM(playerid, COL_LRED, "Nincs elég lõszer!");

		Cselekves(playerid, "újratöltötte a fegyverét", 1);
		SCM(playerid, COL_MKEK, "Fegyver újratöltve!");

		PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
		GiveWeapon(playerid, PlayerInfo[playerid][pFegyver], 0, true);

		if(24 <= PlayerInfo[playerid][pFegyver] <= 34)
			LoopingAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
			
		return true;
	}
	return true;
}

new g_FDLocker[10][3][32] =
{
    { "Paramedic I.", "Fekete bõr, fehér ing", 274 },
	{ "Paramedic II.", "Hispanic bõr, kék ing", 275 },
	{ "Paramedic III.", "Fehér bõr, világoszöld ing", 276 },
	{ "Paramedic IV.", "Nõ, fehér bõr, fehér póló", 91 },
	{ "Firefighter I.", "Hispanic bõr, zöld ruha", 277 },
	{ "Firefighter II.", "Fekete bõr, Sárgászöld ruha", 278 },
	{ "Firefighter III.", "Fehér bõr, Fekete ruha", 279 },
	{ "Engineer", "Szürke munkásruha", 50 },
	{ "Hospital Section", "Fehér bõr, fehér köpeny", 70 },
	{ "High-Command", "Fehér bõr, öltöny, headset", 164 }
};
Dialog:FDLocker(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		format(uzenet, sizeof(uzenet), "[HQ]: %s felvette a(z) %s öltözéket!", g_FDLocker[listitem][0]);
        FrakcioUzenet(COLOR_SZURKE, PlayerInfo[playerid][pFrakcio], uzenet);
        SetPlayerSkin(playerid, g_FDLocker[listitem][2][0]);
        Cselekves(playerid, "kivett a polcról valamit...");
	}
}
CMD:locker(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LAFD) return SCM(playerid, COL_LRED, "Nem vagy a LAFD tagja!");
	
	new car = GetClosestVehicle(playerid);
	new model = GetVehicleModel(car);
	if(GetDistanceToVehicle(playerid, car) > 10.0 || model != 544 && model != 407) return SCM(playerid, COL_LRED, "Nincs a közelben tûzoltó jármû");
	new i = NINCS, dialogstr[1024];
	for(;++i < sizeof(g_FDLocker);)
	{
	    if(i == 0)
	        format(dialogstr, 512, "%s (%s)", g_FDLocker[i][0], g_FDLocker[i][1]);
		else
		    format(dialogstr, 512, "%s\n%s (%s)", dialogstr, g_FDLocker[i][0], g_FDLocker[i][1]);
	}
	Dialog_Show(playerid, FDLocker, DIALOG_STYLE_LIST, "Tûzoltóság - Öltözékek", dialogstr, "Felvesz", "Mégse");
	return true;
}
CMD:duty(playerid, params[])
{
	#pragma unused params
	if(!PlayerInfo[playerid][pFrakcio])
		return SCM(playerid, COL_LRED, "Nem vagy egyik szervezet tagja sem!");

	new skin = PlayerInfo[playerid][pskin];
	if(!PlayerInfo[playerid][pDuty][0])
	{
		if(PlayerInfo[playerid][pDuty][1] > gettime())
			return SFM(playerid, COL_LRED, "Nemrégiben léptél szolgálatba! Még várnod kell "#COL_MKEK"%d"#COL_FEHER" percet!", ((PlayerInfo[playerid][pDuty][1] - gettime()) / 60));

		if(!PlayerInfo[playerid][pDutySkin])
		{
		    new i = NINCS, max_skin = NINCS, var_id = NINCS;
			for(;++i < FK_SKINEK;){
				if(FrakcioSkinek[i][0] == PlayerInfo[playerid][pFrakcio]){
				    max_skin = FrakcioSkinek[i][1];
				    var_id = i;
				    break;
				}
			}
			if(max_skin != NINCS && var_id != NINCS)
			{
				new slot = PlayerInfo[playerid][prang] + 2;
			   	if(slot >= max_skin) slot = (max_skin - 1) + 2;

				skin = FrakcioSkinek[ var_id ][ slot ];
	  		}
	  					
		} else
			skin = PlayerInfo[playerid][pDutySkin];
	}

	switch( PlayerInfo[playerid][pFrakcio] )
	{
		case FRAKCIO_LSPD: //rendõrség
		{
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, 267.5132,119.1876,1004.6172) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1862.3383,-1721.9015,1206.1860) && !IsPlayerInRangeOfPoint(playerid, 5.0, 197.1813,168.3225,1003.0234))//LSPD bázis duty hely
   			{
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}

			if(!PlayerInfo[playerid][pDuty][0])
			{
				PlayerInfo[playerid][pDuty][0] = true;
				if(PlayerInfo[playerid][prang] == 1 || PlayerInfo[playerid][prang] == 2 || PlayerInfo[playerid][prang] == 3  || PlayerInfo[playerid][prang] == 4)
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24,100, false,true);//deagle
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					SetArmor(playerid, MAX_ARMOR);
					SetHealth(playerid, MAX_HP);
				}
				if(PlayerInfo[playerid][prang] == 5 || PlayerInfo[playerid][prang] == 6 || PlayerInfo[playerid][prang] == 7 || PlayerInfo[playerid][prang] == 8)
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24,100, false,true);//deagle
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					GiveWeapon(playerid, 29, 120, false, true);//mp5
					SetArmor(playerid, MAX_ARMOR);
					SetHealth(playerid, MAX_HP);
				}
				if(PlayerInfo[playerid][prang] >= 9)
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24,100, false,true);//deagle
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					GiveWeapon(playerid, 31, 150, false,true);//m4
					GiveWeapon(playerid, 34, 25, false, true);//sniper
					SetArmor(playerid, MAX_ARMOR);
					SetHealth(playerid, MAX_HP);
				}
				
				new sr[128];
				format(sr, sizeof(sr), "[Központ]: {1e90FF}%s szolgálatba lépett.", JatekosNev(playerid, true));
				FrakcioUzenet(RED, PlayerInfo[playerid][pFrakcio], sr);
				foreach(Player,p)
				{
					SetPlayerMarkerForPlayer(p, playerid, 00);
				}
			}
			else
			{

				PlayerInfo[playerid][pDuty][0] = false;
				SetArmor(playerid, 0.0);
				DeleteWeapon(playerid);
				//SetPlayerColor(playerid,COLOR_INVISIBLE);
			}
		}
		case FRAKCIO_SZERELO: //Szerelõk
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2006.6515,-2179.8318,13.5747))
			{
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}
			if(SzereloDuty[playerid] == false)
			{
				SzereloDuty[playerid] = true;
				SCM(playerid,COL_MKEK,"Szolgálatba léptél!");
				SetPlayerSkin(playerid,50);
				SetPlayerColor(playerid, 0x14cf27AA & 0xFFFFFF00);
				/*foreach(Player,p)
				{
					SetPlayerMarkerForPlayer(p, playerid, 00);
				}*/
				return true;
			}
			if(SzereloDuty[playerid] == true)
			{
				SzereloDuty[playerid] = false;
				SCM(playerid,COL_MKEK,"Vissza öltöztél!");
				SetPlayerSkin(playerid,PlayerInfo[playerid][pskin]);
				//SetPlayerColor(playerid,COLOR_INVISIBLE);
				return true;
			}
		}
		case FRAKCIO_EPITESZ: //Építész
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, -92.999, -1596.466, 2.834))
			{
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}
			if(EpiteszDuty[playerid] == false)
			{
				EpiteszDuty[playerid] = true;
				SCM(playerid,COL_MKEK,"Szolgálatba léptél!");
				SetPlayerSkin(playerid,50);
				SetPlayerColor(playerid, 0x14cf27AA & 0xFFFFFF00);
				GiveWeapon(playerid,6, 1, false, true);//deagle
				return true;
			}
			if(EpiteszDuty[playerid] == true)
			{
				EpiteszDuty[playerid] = false;
				SCM(playerid,COL_MKEK,"Vissza öltöztél!");
				SetPlayerSkin(playerid,PlayerInfo[playerid][pskin]);
				DeleteWeapon(playerid);
				return true;
			}
		}
		case FRAKCIO_KATONA: //katonasag
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 188.418, 1927.125, 17.664) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1862.3383,-1721.9015,1206.1860) && !IsPlayerInRangeOfPoint(playerid, 5.0, 197.1813,168.3225,1003.0234))//LSPD bázis duty hely
			{
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}

			if(!PlayerInfo[playerid][pDuty][0])
			{
				PlayerInfo[playerid][pDuty][0] = true;
				SetArmor(playerid, MAX_ARMOR);
				SCM(playerid, COL_LRED, "Ne felejsd el a felszerelésed felvenni! (( /felszereles ))");
				new sr[128];
				format(sr, sizeof(sr), "[Központ]: {1e90FF}%s szolgálatba lépett.", JatekosNev(playerid, true));
				FrakcioUzenet(RED, PlayerInfo[playerid][pFrakcio], sr);
				foreach(Player,p)
				{
					SetPlayerMarkerForPlayer(p, playerid, 00);
				}
			}
			else
			{

				PlayerInfo[playerid][pDuty][0] = false;
				SetArmor(playerid, 0.0);
				DeleteWeapon(playerid);
			}
		}
		/*case FRAKCIO_LSFD: //tûzoltóság
		{
		    new car = GetClosestCar(playerid);
			new model = GetVehicleModel(car);
			if((!IsPlayerInRangeOfPoint(playerid, 5.0, 1279.9231,-1791.1005,13.6140) && GetDistanceToCar(playerid, car) > 10.0) || (!IsPlayerInRangeOfPoint(playerid, 5.0, 1279.9231,-1791.1005,13.6140) && model != 544 && model != 407))//LSFD bázis duty hely
			{
				if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
				{
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, 1279.9231,-1791.1005,13.6140, 5.0);
				}
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél, vagy tûzoltóautó közelében!");
				return true;
			}

			if(!PlayerInfo[playerid][pDuty][0])
			{
				PlayerInfo[playerid][pDuty][0] = true;
				SetArmor(playerid, MAX_ARMOR);
			} else {

				PlayerInfo[playerid][pDuty][0] = false;
				SetPlayerSkin(playerid,PlayerInfo[playerid][pskin]);
				DeleteWeapon(playerid);
				SetArmor(playerid, 0.0);
			}
		}*/
		case FRAKCIO_LAFD: //mentõsök
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 254.9977,74.6731,1003.6406))//LSMD bázis duty hely
			{
				if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
				{
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, 254.9977,74.6731,1003.6406, 5.0);
				}
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}

			if(!PlayerInfo[playerid][pDuty][0])
			{
				PlayerInfo[playerid][pDuty][0] = true;
				GiveWeapon(playerid, 41, 3000, false, true);//spray
				PlayerInfo[playerid][pCuccok][BL_KOTSZER] = P_MAX_KOTSZER;
				SetPlayerColor(playerid, 0xd93f3fAA & 0xFFFFFF00);
				SendClientMessageToAll(VKEK,"LSMD"#COL_FEHER" szolgálatban! Segítségért - "#COL_VKEK"/call 911");
			} else {

				PlayerInfo[playerid][pDuty][0] = false;
				DeleteWeapon(playerid);
				SetPlayerColor(playerid, COLOR_INVISIBLE);
			}
		}
		case FRAKCIO_KORMANY: //kormány
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1526.3164,1736.2405,10.8323))//önkori inti
			{
				if(PlayerInfo[playerid][pvirtualworld] == 1003)
				{
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, 1526.3164,1736.2405,10.8323, 5.0);
				}
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}

			if(!PlayerInfo[playerid][pDuty][0])
			{
				PlayerInfo[playerid][pDuty][0] = true;

				if(PlayerInfo[playerid][prang] == 1)
				{
					SetArmor(playerid, MAX_ARMOR);
					GiveWeapon(playerid, 24, 50, false, true);//deagle
				}
				if(PlayerInfo[playerid][prang] == 3)
				{
					SetArmor(playerid, MAX_ARMOR);
					GiveWeapon(playerid, 24, 80, false, true);//deagle
					GiveWeapon(playerid, 29, 150, false, true);//mp5
				}
				if(PlayerInfo[playerid][prang] == 4)
				{
					SetArmor(playerid, MAX_ARMOR);
					GiveWeapon(playerid, 3, 1, false, true);//rendbot
					GiveWeapon(playerid, 24, 80, false, true);//deagle
				}

			} else {

				PlayerInfo[playerid][pDuty][0] = false;
				DeleteWeapon(playerid);
			}
		}
		case FRAKCIO_FBI: //ATF - NAV
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 222.598,183.589,1003.031))
			{
				if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
				{
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, 2804.7485,-1443.0769,24.2052, 3.0);
				}
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}

			if(!PlayerInfo[playerid][pDuty][0])
			{
				PlayerInfo[playerid][pDuty][0] = true;
				SetArmor(playerid, MAX_ARMOR);

				//GiveWeapon(playerid, fegyver, loszer, bool:ujratolt = false, bool:set = false)
				/*---- ATF fegyver beállítás ----*/
				GiveWeapon(playerid, 3, 1, false, true);//rendbot
				GiveWeapon(playerid, 41, 3000, false, true);//spray
				if(PlayerInfo[playerid][prang] >= 1)
					GiveWeapon(playerid, 24, 80, false, true);//deagle

				if(PlayerInfo[playerid][prang] >= 2)
					GiveWeapon(playerid, 29, 300, false, true); //mp5

				if(PlayerInfo[playerid][prang] >= 3)
					GiveWeapon(playerid, 31, 400, false, true);//M4

                if(PlayerInfo[playerid][prang] >= 4)
					GiveWeapon(playerid, 34, 100, false, true);//sniper
					
                new sr[128];
				format(sr, sizeof(sr), "[Központ]: {1e90FF}%s %s szolgálatba lépett.", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true));
				FrakcioUzenet(RED, PlayerInfo[playerid][pFrakcio], sr);
			}
			else
			{
				PlayerInfo[playerid][pDuty][0] = false;
				SetArmor(playerid, 0.0);
				DeleteWeapon(playerid);
			}
		}
		default:
			return SCM(playerid, COL_LRED, "Neked nem kell szolgálatba lépned!");
	}

	//Utcai, szolgálati skin állítás
	SetHealth(playerid, MAX_HP);
	SetSkin(playerid, skin, false);

	if(PlayerInfo[playerid][pDuty][0])
	{
		SCM(playerid, COL_VZOLD, "Szolgálatba léptél!");
		PlayerInfo[playerid][pDuty][1] = (gettime() + (3 * 60));

	} else {

		SCM(playerid, COL_VZOLD, "Kiléptél a szolgálatból!");
		DeleteWeapon(playerid);
	}
	return true;
}

CMD:utzar(playerid, params[])
{
	#pragma unused params
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");

	if(Utzarak[playerid][uVan])
		return SCM(playerid, COL_LRED, "Már raktál le útzárat!");

	new Float:pPosok[4];
	GetPlayerPos(playerid, PosExt(pPosok));
	GetXYInFrontOfPlayer(playerid, pPosok[0], pPosok[1], 2.0);
	GetPlayerFacingAngle(playerid, pPosok[3]);

	new felirat[64];
	format(felirat, 64, "[Útzár - Szögesdrót]\n%s", JatekosNev(playerid));
	Utzarak[playerid][uText] = CreateDynamic3DTextLabel(felirat, COLOR_LIGHTBLUE, PosExt(pPosok)+0.5, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, NINCS, NINCS, NINCS, 50.0);

	pPosok[2] -= 0.85;
	if(pPosok[3] >= 270.0) pPosok[3] -= 90.0;
	else pPosok[3] += 90.0;

	new Float:dis1 = floatsin(-pPosok[3], degrees), Float:dis2 = floatcos(-pPosok[3], degrees);

	Utzarak[playerid][uVan] = true;
	//Utzarak[playerid][uTipus] = UTZAR_KICSI;
	Utzarak[playerid][uHely][0] = pPosok[0];
	Utzarak[playerid][uHely][1] = pPosok[1];
	Utzarak[playerid][uHely][2] = pPosok[2];
	Utzarak[playerid][uHely][3] = pPosok[3];

	Utzarak[playerid][uObject] = CreateDynamicObject(2899, PosExt(pPosok), 0.0, 0.0, pPosok[3]);
	Utzarak[playerid][uPickup][0] = CreateDynamicPickup(1007, 14, pPosok[0]+(1.5*dis1), pPosok[1]+(1.5*dis2), pPosok[2], 0);
	Utzarak[playerid][uPickup][1] = CreateDynamicPickup(1007, 14, pPosok[0]-(1.5*dis1), pPosok[1]-(1.5*dis2), pPosok[2], 0);

	Streamer_Update(playerid);

	defer MuveletTimer[30000](playerid, T_UTZAR, NINCS, NINCS);

	SCM(playerid, COL_MKEK, "Útzár sikeresen lerakva!");
	Cselekves(playerid, "lerakott egy szögesdrótot");

	UnFreeze(playerid);
	ClearAnimations(playerid);

	return 1;
}

CMD:hack(playerid, params[])
{
	if(!IsJob(playerid, MUNKA_HACK))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /hack [ Lézer / Hátsóajtó ]");

	if(!strcmp(params, "Lézer", true) || !strcmp(params, "Lezer", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 1.5, 2319.5166,-6.9896,22.8317))
			return SCM(playerid, COL_LRED, "Nem vagy a kezelõfelületnél!");
		new i = -1;
		for(;++i < 5;)
			PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_SzamJegy][i]);

		i = -1;
		for(;++i < 3;)
			PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Hatter][i]);

		i = -1;
		for(;++i < 5;)
			PlayerTextDrawShow(playerid, g_PlayerTextDraw[playerid][ptd_Elerte][i]);

		TogglePlayerControllable(playerid, false);
		LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
		PlayerTimers[playerid][PBHACK] = repeat MuveletTimer[2000](playerid, T_HACKPANEL, NINCS, NINCS);
		return true;
	}
	else if(!strcmp(params, "hatsoajto", true) || !strcmp(params, "hátsóajtó", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 1.5, 2319.5166,-6.9896,22.8317))
			return SCM(playerid, COL_LRED, "Nem vagy a kezelõfelületnél!");

		if(BankInfo[bBankSZLezerK] == true)
		{
			ShowPlayerDialog(playerid, DIALOG_BANKROBP1, DIALOG_STYLE_INPUT, "Bankrablás: Másodlagos Ajtó Kiiktatás", "Írd a lentebbi mezõbe a bankártól kapott kódot:", "Mehet", "Mégse");
		}
		else
		{
			SCM(playerid,COL_LRED,"Még nem nyithatod ki!");
		}
		return true;
	}
	return true;
}

CMD:zsak(playerid, params[])
{
	//CreateObject(18659, 2466.36499, -2066.45044, 15.10067,   0.00000, 0.00000, 90.00000);

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /zsák [ Megpakol / Kipakol / Stop]");


	if(!strcmp(params, "Stop", true))
	{
		TogglePlayerControllable(playerid, true);
		SCM(playerid, COL_MKEK, "Befejezted a pénz pakolását!");

		SetPlayerAttachedObject(playerid, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
		DestroyDynamicObject(PlayerInfo[playerid][pHatizsakO]);
		PlayerInfo[playerid][pHatizsakO] = -1;
        PenztRabol[playerid] = 0;
		return true;
	}
	if(!strcmp(params, "kipakol", true))
	{
		if(!PlayerInfo[playerid][pBMennyi])
			return SCM(playerid, COL_MKEK, "A zsák már üres!");

		if(!PlayerInfo[playerid][pFrakcio])
			return SCM(playerid, COL_LRED, "Nem vagy frakcióban!");

		new bool:van;
		if(PlayerInfo[playerid][phaz] != NINCS)
		{
			new hazszef = HazSzef(playerid);
			if(hazszef > NINCS)
			{
				van = true;
			}
		}

		if((!PlayerInfo[playerid][pFrakcio] || (!IsPlayerInRangeOfPoint(playerid, 2.0, PosExt(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefPos])) && FInfo[PlayerInfo[playerid][pFrakcio]][fSzefObject]) || !FInfo[PlayerInfo[playerid][pFrakcio]][fSzefObject]) && !van)
			return SCM(playerid, COL_MKEK, "Nem vagy a frakció, vagy házszéfed közelében!");

		if(van) HazInfo[ PlayerInfo[playerid][phaz] ][hazSzef][0] += PlayerInfo[playerid][pBMennyi];
		else
		{
			FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] += PlayerInfo[playerid][pBMennyi];
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuPenz);
		}

		SFM(playerid, COL_VZOLD, "Bepakoltál a széfbe "#COL_MKEK"%s"#COL_FEHER"$-ot!", FN(PlayerInfo[playerid][pBMennyi], 0, ','));
		PlayerInfo[playerid][pBMennyi] = 0;
		return true;
	}
	else if(!strcmp(params, "megpakol", true))
	{
		if(PlayerInfo[playerid][pHatizsak] == 0)
			return SCM(playerid, COL_LRED, "Nincs hátizsákod!");

		if(PlayerInfo[playerid][pBMennyi] > 1000)
			return SCM(playerid, COL_LRED, "Már tele van!");

		if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2325.4519,-6.5052,22.8317))
			return SCM(playerid, COL_LRED, "Itt nem tudsz pénz pakolni!");

		RemovePlayerAttachedObject(playerid, SLOT_HATIZSAK);
		TogglePlayerControllable(playerid, false);
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop", 4.0, 1, 0, 0, 1, 0);

		new Float:hopos[4];

		GetPlayerPos(playerid, PosExt(hopos));
		GetPlayerFacingAngle(playerid, hopos[3]);

		GetXYInFrontOfPoint(hopos[0], hopos[1], hopos[3], 0.8);
		PlayerInfo[playerid][pHatizsakO] = CreateDynamicObject(371, PosExt(hopos) - 0.9, 0.0, 0.0, hopos[3] + 180.0);
		Streamer_Update(playerid);
		SCM(playerid, COL_MKEK, "Elkezdted a pénz pakolást!");
		PenztRabol[playerid] = 1;
		return true;
	}

	return true;
}

CMD:keszit(playerid, params[])
{
	new param[32];
	if(sscanf(params,"s[32]{}", param)) return SCM(playerid, COL_MKEK, "Használat: /készít [ Drog/Mati/Fegyver ]");
	
	if(!strcmp(param, "drog", true))
	{
		if(!IsJob(playerid, MUNKA_DROG))
			return SCM(playerid, COL_LRED, "Te nem vagy drogdíler!");

		if(PlayerInfo[playerid][pFoglalt])
			return SCM(playerid, COL_LRED, "Jelenleg el vagy foglalva!");

		new Float:ra[][3] =
		{
			{2517.3887, -2018.6632, 820.8762},
			{2514.6597, -2018.7422, 820.8762},
			{2511.7322, -2018.8101, 820.8762},
			{2510.4680, -2019.2963, 820.8762},
			{2510.4551, -2021.9458, 820.8762}
		};

		new i = -1, ret = -1;
		for(;++i < sizeof(ra);)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, PosExt(ra[i])))
			{
				ret = i;
				break;
			}
		}

		if(ret == -1)
			return SCM(playerid, COL_LRED, "Nem vagy a drog készítõ helyen!");

		if((ret != -1) && (GetPlayerInterior(playerid) != 3) && (GetPlayerVirtualWorld(playerid) != 1001))
			return SCM(playerid, COL_LRED, "Nem vagy a drog készítõ helyen!");

		new form[256];

		format(form, sizeof(form), "Marihuana [%dg]\nKokain [%dg]\nHeroin [%dg]", PlayerInfo[playerid][pDrogAnyag][0], PlayerInfo[playerid][pDrogAnyag][1], PlayerInfo[playerid][pDrogAnyag][2]);
		ShowPlayerDialog(playerid, DIALOG_DROGKESZIT, DIALOG_STYLE_LIST, "Drog készítés", form, "Mehet", "Mégse");
		return true;
	}
	if(!strcmp(param, "mati") || !strcmp(param, "material"))
	{
	    new mennyi;
		if(sscanf(params,"{s[32]}d", mennyi)) return SCM(playerid, COL_MKEK, "Használat: /készít [ Drog/Mati/Fegyver ] [Mennyi vasból?]");
		
		if(!IsJob(playerid, MUNKA_FEGYVER))
			return SCM(playerid, COL_LRED, "Te nem vagy fegyvermester!");

		if(PlayerInfo[playerid][pFoglalt])
			return SCM(playerid, COL_LRED, "Jelenleg el vagy foglalva!");

		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2474.7732, -2121.0085, 14.7563))
			return SCM(playerid, COL_LRED, "Nem vagy a kijelölt helyen!");

		if(PlayerInfo[playerid][pVas] < 1)
			return SCM(playerid, COL_LRED, "Nincsen feldolgozható vasad!");
			
		if(mennyi > PlayerInfo[playerid][pVas])
		    return SCM(playerid, COL_LRED, "Nincs ennyi vas nálad!");
		    
        if(mennyi < 1) return SCM(playerid, COL_LRED, "Ne szórakozz a rendszerrel!");
        
		new i = -1, ido = 0;

		for(; ++i < mennyi;)
			ido += random(6) + 10;

		ClearAnimations(playerid, 1);
		LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
		Freeze(playerid);
		PlayerInfo[playerid][pFoglalt] = true;
        
		SFM(playerid, COL_MKEK, "Elkezdted a material gyártását! Idõ: kb "#COL_MKEK"%d"#COL_FEHER" másodperc", ido);
		defer MuveletTimer[(ido * 1000)](playerid, T_MATIKESZITES, NINCS, mennyi);
	}
	else if(!strcmp(param, "fegyver"))
	{
		if(!IsJob(playerid, MUNKA_FEGYVER))
			return SCM(playerid, COL_LRED, "Te nem vagy fegyvermester!");

		/*if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_MAFFIA)
			return SCM(playerid, COL_LRED, "Csak illegális frakció használhatja!");*/

		if(PlayerInfo[playerid][pFoglalt])
			return SCM(playerid, COL_LRED, "Jelenleg el vagy foglalva!");

		new i = -1, form[70], nagystring[2048];
		new k = -1, bool:talalt = false;

		new Float:MatiFegyverPos[][3] =
		{
			{2474.8521,-2111.5298,14.7563},
			{2474.8633,-2116.5559,14.7563},
			{2474.9290,-2121.0369,14.7563}
		};

		for(;++k < sizeof(MatiFegyverPos);)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, PosExt(MatiFegyverPos[k])))
				talalt = true;
		}

		if(!talalt)
			return SCM(playerid, COL_LRED, "Nem vagy a fegyverkészítõ asztalnál!");

		new szin[8 + 1];

		for(;++i < sizeof(Fegyverek);)
		{
			//50										150
			if((PlayerInfo[playerid][pFegyverSkill] - Fegyverek[i][fSkill]) >= 50)
				szin = COL_SZURKE;
			else if((PlayerInfo[playerid][pFegyverSkill] >= Fegyverek[i][fSkill]) && ((Fegyverek[i][fSkill] - PlayerInfo[playerid][pFegyverSkill]) <= 49))
				szin = COL_MKEK;
			else if(PlayerInfo[playerid][pFegyverSkill] <= Fegyverek[i][fSkill])
				szin = COL_LRED;
			//COL_SZURKE
			format(form, sizeof(form), "%s%s [%d] | Skill: %d\n", szin, Fegyverek[i][fNev], Fegyverek[i][fMati], Fegyverek[i][fSkill]);
			strins(nagystring, form, strlen(nagystring));
		}

		strdel(nagystring, strlen(nagystring) - 2, strlen(nagystring));
		ShowPlayerDialog(playerid, DIALOG_FEGYVERKESZITES, DIALOG_STYLE_LIST, "Fegyver Készítés", nagystring, "Készítés", "Mégse");
	}
	return true;
}

CMD:vas(playerid, params[])
{
	#pragma unused params
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Ezt a parancsot jármûben nem használhatod!");
	if(PlayerInfo[playerid][pFoglalt])
		return SCM(playerid, COL_LRED, "Jelenleg elvagy foglalva!");

	if(PlayerInfo[playerid][pVas] >= P_MAX_VAS)
		return SFM(playerid, COL_LRED, "Már gyûjtöttél %dkg vasat!", PlayerInfo[playerid][pVas]);

	new Float:RandomCP[][3] = {
		{2590.2905, -1998.4435, 3.8594}, // mati1
		{2585.5579, -1995.1437, 3.8594}, // mati2
		{2580.3745, -1991.3811, 3.8594}, // mati3
		{2576.0833, -1988.3070, 3.8594}, // mati4
		{2571.5779, -1985.3274, 3.8594}, // mati5
		{2583.4058, -1970.7137, 3.8594}, // mati6
		{2604.7412, -1955.9238, 3.8594}, // mati7
		{2603.9919, -1968.3732, 3.8594}, // mati8
		{2586.4185, -1974.0426, 3.8594}, // mati9
		{2609.8213, -2047.1803, 5.3703} // mati10
	};

	new rand = random(sizeof(RandomCP));
	//PlayerInfo[playerid][pVasCP] = CreateDynamicCP(RandomCP[rand][0], RandomCP[rand][1], RandomCP[rand][2], 2.0, -1, -1, playerid, 30000.0);
	//PlayerInfo[playerid][pVasCP] = CreateCP(playerid, CP_VAS, RandomCP[rand][0], RandomCP[rand][1], RandomCP[rand][2], 2.0);
	//Streamer_Update(playerid);
	PlayerInfo[playerid][pCP] = CP_VAS;
	SetPlayerCheckpoint(playerid, RandomCP[rand][0], RandomCP[rand][1], RandomCP[rand][2], 2.0);
	CPbe[playerid][0] = RandomCP[rand][0];
	CPbe[playerid][1] = RandomCP[rand][1];
	CPbe[playerid][2] = RandomCP[rand][2];

	SCM(playerid, COL_MKEK, "Menj a checkpointba!");
	return true;
}

CMD:keres(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /keres [ Tû ]");

	if(!strcmp(params, "tû", true) || !strcmp(params, "tu", true))
	{
		if(PlayerInfo[playerid][pTimerFut])
			return SCM(playerid, COL_LRED, "Türelem, ne siess ennyire..");

		if(KozeliObject( playerid, 3 ) == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben Kuka!");

		PlayerInfo[playerid][pTimerFut] = true;
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
		Cselekves(playerid, "elkezdett turkálni az egyik kukában..");
		defer MuveletTimer[10000](playerid, T_TUKERES, NINCS, NINCS);
		return true;
	}

	return true;
}

CMD:heroin(playerid, params[])
{
	if(PlayerInfo[playerid][pDrogMuvelet][1])
		return SCM(playerid, COL_LRED, "Ne siess haver...");

	
	if(!PlayerInfo[playerid][pCuccok][ BL_TU ])
		return SCM(playerid, COL_LRED, "Nincs nálad tû, keress egyet a kórház kukáiban...");

	if(!PlayerInfo[playerid][pCuccok][ BL_GYUJTO ])
		return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");

	if(!PlayerInfo[playerid][pCuccok][ BL_KANAL ])
		return SCM(playerid, COL_LRED, "Nincs nálad kanál, vegyél egyet a közeli HotDog standnál.");

	if(!PlayerInfo[playerid][pHeroin])
		return SCM(playerid, COL_LRED, "Nincs nálad egy milligram heroin se..");

    new mennyiseg;
	if(sscanf(params, "d", mennyiseg)) return SCM(playerid, COL_LRED, "/heroin [mennyiség (milligram)]");
	if(mennyiseg > PlayerInfo[playerid][pHeroin])
	    return SCM(playerid, COL_LRED, "Nincs nálad ennyi heroin!");
	    
	if(mennyiseg < 1) return SCM(playerid, COL_LRED, "Ne szórakozz a rendszerrel!");
	if(mennyiseg > 30)
	    return SCM(playerid, COL_LRED, "Maximum 30 milligram!");

    PlayerInfo[playerid][pDrogMuvelet][3] = mennyiseg;
    
	SCM(playerid, COL_VZOLD, "Elõvettél egy kis heroint...");

	PlayerInfo[playerid][pDrogMuvelet][1] = true;
	
	    
	defer HeroinTimer[5000](playerid, 1);
	return true;
}

CMD:kokain(playerid, params[])
{
	if(PlayerInfo[playerid][pDrogMuvelet][1])
		return SCM(playerid, COL_LRED, "Ne siess haver...");

	if(!PlayerInfo[playerid][pCuccok][ BL_SZIVOSZAL ])
		return SCM(playerid, COL_LRED, "Nincs nálad szívószál, vegyél egyet a közeli HotDog standnál.");

	if(!PlayerInfo[playerid][pSzemelyi] && PlayerInfo[playerid][pCuccok][BL_BANKKARTYA] == 0)
		return SCM(playerid, COL_LRED, "Nincs nálad személyi, vagy bankkártya!");

	if(!PlayerInfo[playerid][pKokain])
		return SCM(playerid, COL_LRED, "Nincs nálad egy gramm kokain se..");

	new mennyiseg;
	if(sscanf(params, "d", mennyiseg)) return SCM(playerid, COL_LRED, "/kokain [mennyiség (milligram)]");
	if(mennyiseg < 1) return SCM(playerid, COL_LRED, "Ne szórakozz a rendszerrel!");

	if(mennyiseg > PlayerInfo[playerid][pKokain])
	    return SCM(playerid, COL_LRED, "Nincs nálad ennyi kokain!");

    if(mennyiseg > 30)
	    return SCM(playerid, COL_LRED, "Maximum 30 milligram!");
	    
    PlayerInfo[playerid][pDrogMuvelet][4] = mennyiseg;
	SCM(playerid, COL_VZOLD, "Elõvettél egy kis kokaint...");

	PlayerInfo[playerid][pDrogMuvelet][1] = true;
	defer KokainTimer[5000](playerid, 1);
	return true;
}

CMD:megkot(playerid, params[])
{
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /megköt [ Játékos ]");

	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SCM(playerid, COL_LRED, "Egy jármû vezetõ ülésén kell ülnöd!");

	if(!IsPlayerInVehicle(jatekos, GetPlayerVehicleID(playerid)))
		return SCM(playerid, COL_LRED, "Ez a játékos nem ül a jármûvedben!");

	if(PlayerInfo[jatekos][pBilincselve])
		return SCM(playerid, COL_LRED, "Ezen a játékosok bilincs van!");

	new veh, model;
	veh = GetPlayerVehicleID(playerid);
	model = GetVehicleModel(veh);
	if(model == 420 || model == 438)
	    return SCM(playerid,COL_LRED,"Taxisként biztos nem!");

	if(!PlayerInfo[jatekos][pMegkotve])
	{
		Freeze(jatekos, 0);
		PlayerInfo[jatekos][pMegkotve] = true;
		Cselekves(playerid, "megkötözött valakit..");
		GameTextForPlayer(jatekos, "~r~Megkötöztek!", 2500, 3);

	} else {

		Freeze(jatekos, NINCS);
		PlayerInfo[jatekos][pMegkotve] = false;
		Cselekves(playerid, "kikötözött valakit..");
		GameTextForPlayer(jatekos, "~r~Kikötöztek!", 2500, 3);
	}

	return true;
}

CMD:cigi(playerid, params[])
{
	//elqrtam a parancsot, így egyszerûbb volt - krisk
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /cigi [ Szív / Papír / Pipa / Bong ]");

	if(!strcmp(params, "szív") || !strcmp(params, "sziv"))
	{
		if(!PlayerInfo[playerid][pCuccok][ BL_CIGI ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigi, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pCuccok][ BL_GYUJTO ])
			return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");

		PlayerInfo[playerid][pCuccok][ BL_CIGI ] --;
		Cselekves(playerid, "meggyújtott egy cigit");
	} else if(!strcmp(params, "papír") || !strcmp(params, "papir"))
	{
		if(!PlayerInfo[playerid][pCuccok][ BL_PAPIR ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigipapír, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pCuccok][ BL_CIGI ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigi, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pCuccok][ BL_GYUJTO ])
			return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");

		PlayerInfo[playerid][pCuccok][ BL_PAPIR ] --;
		PlayerInfo[playerid][pCuccok][ BL_CIGI ] --;

		Cselekves( playerid, "elovesz egy cigipapírt, beletekeri a dohányt, majd meggyújtja.");
	} else if(!strcmp(params, "pipa"))
	{
		if(!PlayerInfo[playerid][pCuccok][ BL_PIPA ])
			return SCM(playerid, COL_LRED, "Nincs nálad pipa, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pCuccok][ BL_CIGI ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigi, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pCuccok][ BL_GYUJTO ])
			return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");

		PlayerInfo[playerid][pCuccok][ BL_CIGI ] --;
		Cselekves(playerid, "eloveszi a pipáját, teletömi dohánnyal, majd meggyújtja.");
	} else if(!strcmp(params, "bong"))
	{
		if(!PlayerInfo[playerid][pCuccok][ BL_BONG ])
			return SCM(playerid, COL_LRED, "Nincs nálad bong, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pCuccok][ BL_CIGI ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigi, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pCuccok][ BL_GYUJTO ])
			return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");

		PlayerInfo[playerid][pCuccok][ BL_CIGI ] --;
		Cselekves(playerid, "eloveszi a bongot, belerakja a dohányt, majd meggyújtja.");
	} else {
		return 1;
	}

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	LoopingAnim(playerid, "GANGS", "drnkbr_prtl_F", 4.0, 0, 1, 1, 1, -1);
	return true;
}

CMD:joint(playerid, params[])
{
	new param[32], timerparam;
	if(isnull(params) || sscanf(params,"s[32]{}", param)) return SCM(playerid, COL_MKEK, "Használat: /joint [ CP / Pipa / Bong ]");
	
	if(PlayerInfo[playerid][pJoint][1])
		return SCM(playerid, COL_LRED, "Ne siess haver...");

	if(PlayerInfo[playerid][pJoint][0])
		return SCM(playerid, COL_LRED, "Haver te nagyon be vagy kenve, most is van a kezedben egy cigi :D");

	if(!strcmp(param, "cp") || !strcmp(param, "cigipapir") || !strcmp(param, "cigipapír"))
	{
		if(!PlayerInfo[playerid][pCuccok][ BL_PAPIR ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigipapír, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pCuccok][ BL_CIGI ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigi, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pCuccok][ BL_GYUJTO ])
			return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pMarihuana])
			return SCM(playerid, COL_LRED, "Nincs nálad egy gramm marihuána se.");
			
		new mennyit;
		if(sscanf(params,"{s[32]}d", mennyit)) return SCM(playerid, COL_MKEK, "Használat: /joint cigipapír [gramm]");
		if(PlayerInfo[playerid][pMarihuana] < mennyit) return SCM(playerid, COL_LRED, "Nincs nálad ennyi!");
		if(mennyit < 1) return SCM(playerid, COL_LRED, "Ne szórakozz a rendszerrel!");
		if(mennyit >= 10)
		    return SCM(playerid, COL_LRED, "Mennyit akarsz te szívni tesó? Meg akarsz halni?!");
		    
        PlayerInfo[playerid][pJoint][3] = mennyit;
        
        timerparam = JOINT_CP;
	}
	else if(!strcmp(param, "pipa"))
	{
		if(!PlayerInfo[playerid][pCuccok][ BL_PIPA ])
			return SCM(playerid, COL_LRED, "Nincs nálad pipa, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pMarihuana])
			return SCM(playerid, COL_LRED, "Nincs nálad egy gramm marihuána se.");
			
        new mennyit;
		if(sscanf(params,"{s[32]}d", mennyit)) return SCM(playerid, COL_MKEK, "Használat: /joint cigipapír [gramm]");
		if(PlayerInfo[playerid][pMarihuana] < mennyit) return SCM(playerid, COL_LRED, "Nincs nálad ennyi!");
		if(mennyit < 1) return SCM(playerid, COL_LRED, "Ne szórakozz a rendszerrel!");
		if(mennyit > 10)
		    return SCM(playerid, COL_LRED, "Mennyit akarsz te szívni tesó? Meg akarsz halni?!");
		    
        PlayerInfo[playerid][pJoint][3] = mennyit;
        
        timerparam = JOINT_PIPA;

	}
	else if(!strcmp(param, "bong"))
	{
		if(!PlayerInfo[playerid][pCuccok][ BL_BONG ])
			return SCM(playerid, COL_LRED, "Nincs nálad bong, vegyél egyet az egyik boltban.");

		if(!PlayerInfo[playerid][pMarihuana])
			return SCM(playerid, COL_LRED, "Nincs nálad egy gramm marihuána se.");
			
        new mennyit;
		if(sscanf(params,"{s[32]}d", mennyit)) return SCM(playerid, COL_MKEK, "Használat: /joint cigipapír [gramm]");
		if(PlayerInfo[playerid][pMarihuana] < mennyit) return SCM(playerid, COL_LRED, "Nincs nálad ennyi!");
		if(mennyit < 1) return SCM(playerid, COL_LRED, "Ne szórakozz a rendszerrel!");
		if(mennyit > 10)
		    return SCM(playerid, COL_LRED, "Mennyit akarsz te szívni tesó? Meg akarsz halni?!");
		    
        PlayerInfo[playerid][pJoint][3] = mennyit;
        
        timerparam = JOINT_BONG;
	} else { return 1; }

	PlayerInfo[playerid][pJoint][1] = true;
	defer JointTimer[5000](playerid, 1, timerparam );
	Cselekves(playerid,"belenyúl a zsebébe és keres valamit...");
	return true;
}

CMD:drog(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /drog [ Fogyaszt / Készít / Arat ]");

	new param[24];
	sscanf(params, "s[24]{}", param);
	if(!strcmp(param, "készít") || !strcmp(param, "keszit"))
	{
		if(!IsJob(playerid, MUNKA_DROG))
			return SCM(playerid, COL_LRED, "Te nem vagy drogdíler!");

		new num = HazUltetvenySzam( PlayerInfo[playerid][phaz] );
		switch( PlayerInfo[playerid][pPremiumCsomag] )
		{
			case 0, 400, 800:
			{
				if((num + 1) > 15)
				{
					drog_nincstobb:

					new str[512];
					format(str, sizeof(str), ""#COL_FEHER"Kedves "#COL_MKEK"%s!"#COL_FEHER"\nSajnos elérted a maximálisan ültethetõ cserjék számát!\n", JatekosNev(playerid, true));
					format(str, sizeof(str), "%sAmennyiben többet szeretnél ültetni kérlek támogasd\na szervert.\n", str);
					format(str, sizeof(str), "%sTovábbi cserjék ültetéséhez {FFD700}Arany"#COL_FEHER" vagy {00FFFF}Gyémánt"#COL_FEHER"\ntámogatói státusz szükséges. ", str);
					format(str, sizeof(str), "%sEzt a funkciót a\n{FFA500}UserCP => Támogatás"#COL_FEHER" menüpontja alatt találod.", str);
					Info_Dialog(playerid, "Ez egy Prémium Slot!", str);
					return true;
				}
			}
			case 1600:
			{
				if((num + 1) > 25)
				{
					if(PlayerInfo[playerid][pPremiumIdo] < gettime())
						goto drog_nincstobb;

					new str[512];
					format(str, sizeof(str), ""#COL_FEHER"Kedves "#COL_MKEK"%s!"#COL_FEHER"\nSajnos elérted a maximálisan ültethetõ cserjék számát!\n", JatekosNev(playerid, true));
					format(str, sizeof(str), "%sAmennyiben többet szeretnél ültetni kérlek támogasd\na szervert.\n", str);
					format(str, sizeof(str), "%sTovábbi cserjék ültetéséhez {00FFFF}Gyémánt"#COL_FEHER"\ntámogatói státusz szükséges. ", str);
					format(str, sizeof(str), "%sEzt a funkciót a\n{FFA500}UserCP => Támogatás"#COL_FEHER" menüpontja alatt találod.", str);
					Info_Dialog(playerid, "Ez egy Prémium Slot!", str);
					return true;
				}
			}
		}

		new ret = NearestPlant(playerid);
		if(ret == -1)
			return SCM(playerid, COL_LRED, "Nem vagy ültetvény közelében!");

		if(HazInfo[ PlayerInfo[playerid][phaz] ][hTulajID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COL_LRED, "Csak a saját házadban ültethetsz!");

		if(HazInfo[ PlayerInfo[playerid][phaz] ][hDrogMi][ret] > 0)
			return SCM(playerid, COL_LRED, "Ide már ültettél!");

		ShowPlayerDialog(playerid, DIALOG_DROGULT, DIALOG_STYLE_LIST, "Válassz, milyen drogot szeretnél készíteni.", "Marihuana\nKokain\nHeroin", "Mehet", "Mégse");

		//SFM(playerid, COL_MKEK, "Ennél vagy: %d", ret);
		return true;
	}
	else if(!strcmp(param, "arat"))
	{
		if(PlayerInfo[playerid][phaz] == -1)
			return SCM(playerid, COL_MKEK, "Nem tartózkodsz házban!");

		if(!IsJob(playerid, MUNKA_DROG))
			return SCM(playerid, COL_LRED, "Te nem vagy Drog díler!");

		new ret = NearestPlant(playerid);

		if(ret == -1)
			return SCM(playerid, COL_LRED, "Nem vagy palánta közelében!");

		if(HazInfo[ PlayerInfo[playerid][phaz] ][hTulajID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COL_LRED, "Csak a saját házadban arathatsz!");

		if(HazInfo[PlayerInfo[playerid][phaz]][hDrogAllapot][ret] < 100)
			return SCM(playerid, COL_LRED, "Ez a palánta, még nem nõtt ki teljesen!");

		//Marihuana [%dg]\n%sKokain [%dg]\n%sHeroin [%dg]
		PlayerInfo[playerid][pDrogAnyag][ (HazInfo[ PlayerInfo[playerid][phaz] ][hDrogMi][ret] - 1) ] += HazInfo[ PlayerInfo[playerid][phaz] ][hDrogMennyi][ret];
		UpdateDynamic3DTextLabelText(HazInfo[PlayerInfo[playerid][phaz]][hDrogHely][ret], 0xFFFFFFFF, "[Drog hely]\nSzabad");

		SFM(playerid, COL_MKEK, "Sikeresen leszedtél "#COL_MKEK"%dg"#COL_FEHER" alapanyagot!", HazInfo[PlayerInfo[playerid][phaz]][hDrogMennyi][ret]);

		HazInfo[PlayerInfo[playerid][phaz]][hDrogAllapot][ret] = 0;
		HazInfo[PlayerInfo[playerid][phaz]][hDrogMennyi][ret] = 0;
		HazInfo[PlayerInfo[playerid][phaz]][hDrogMi][ret] = 0;
		return true;
	}
	else if(!strcmp(param, "fogyaszt", true))
	{
		SCM(playerid, COL_MKEK, ""#COL_MKEK"Marihuána:"#COL_FEHER" /joint | "#COL_MKEK"Heroin:"#COL_FEHER" /heroin | "#COL_MKEK"Kokain:"#COL_FEHER" /kokain");
	}
	return true;
}

CMD:gyogyszer(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LAFD)
		return SCM(playerid, COL_LRED, "Te nem vagy mentõs!");

	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /gyógyszer [Játékos]");

	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 3)
		return SCM(playerid, COL_LRED, "A játékos nincs a közeledben!");

	if(PlayerInfo[jatekos][pElet] >= MAX_HP)
		return SCM(playerid, COL_LRED, "Ez a játékos nem szorul ellátásra!");

	SFM(playerid, COL_MKEK, "Meggyógyítottad "#COL_MKEK"%st", JatekosNev(jatekos, true));
	SFM(jatekos, COL_MKEK, ""#COL_MKEK"%s"#COL_FEHER" meggyógyított téged!", JatekosNev(playerid, true));
	Cselekves(playerid,"beadott a mellette lévõnek egy gyógyszert..");
	FInfo[ FRAKCIO_LAFD ][fPenz] -= 5;
	GiveHealth(jatekos, 30.0);
	
	new i = 0; for(; ++i < 8;){
	    PlayerInfo[jatekos][pAnimban][i] = 0;
	}
	return true;
}

CMD:gov(playerid, params[])
{
	new id = PlayerInfo[playerid][pFrakcio];
	if(id != FRAKCIO_LAFD && id != FRAKCIO_LSPD && id != FRAKCIO_KORMANY && id != FRAKCIO_LSFD && id != FRAKCIO_KATONA && id != FRAKCIO_FBI && id != FRAKCIO_SZERELO && id != FRAKCIO_EPITESZ)
		return SCM(playerid, COL_LRED, "A te szervezeted nem jogosult bejelentésre!");

	if(PlayerInfo[playerid][prang] < 2)
		return SFM(playerid, COL_LRED, "Minimum ["#COL_MKEK"2"#COL_FEHER"]"#COL_MKEK"%s"#COL_FEHER" rang szükséges a bejelentés használatához!", Rangok(2, PlayerInfo[playerid][pFrakcio]));

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /gov [Bejelentés szövege] | Nem hírdetésre van");

	if(strlen(params) < 20)
		return SCM(playerid, COL_LRED, "A bejelentés szövegének legalább 20 karakter hosszúnak kell lennie!");

	if(!OOC_Ellenorzes(playerid, "/gov", params))
		return true;

	new str[128];
	//format(str, sizeof(str), "================== [ "#COL_VKEK"%s felhívása"#COL_FEHER" ] ==================", FInfo[PlayerInfo[playerid][pFrakcio]][fNev]);
	//SendClientMessageToAll(COLOR_YELLOW2, str);
	format(str, sizeof(str), "(( %s ))"#COL_VKEK"%s felhívása: "#COL_FEHER"%s", JatekosNev(playerid, true), FInfo[PlayerInfo[playerid][pFrakcio]][fNev], params);
	SendClientMessageToAll(COLOR_YELLOW2, str);
	return true;
}

CMD:atad(playerid, params[])
{
	if(PlayerInfo[playerid][pAnimban][0] == 1)
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudsz átadni semmit!");
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /átad [ Kaja / Pénz / Material / Heroin / Kokain / Marihuana / Vas / Kötszer / Fegyver / Mag / C4 ]");

	new param[24], jatekos = NINCS, ertek = NINCS;
	sscanf(params, "s[24]U(-1)D(-1)", param, jatekos, ertek);
	if(ertek > MAX_ERTEK)
		return true;

	if(!strcmp(param, "kaja", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad kaja [Játékos] [Mennyit]");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(PlayerInfo[playerid][pCuccok][BL_SZENDVICS] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi kaja!");

		if((PlayerInfo[jatekos][pCuccok][BL_SZENDVICS] + ertek) > 6)
			return SCM(playerid, COL_LRED, "Maximum 6 db kaja fér el nála!");

		PlayerInfo[playerid][pCuccok][BL_SZENDVICS] -= ertek;
		PlayerInfo[jatekos][pCuccok][BL_SZENDVICS] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"db szendvicset!", JatekosNev(playerid, true), FN(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"db szendvicset!", JatekosNev(jatekos, true), FN(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek egy szendvicset...");
	}
	else if(!strcmp(param, "penz", false) || !strcmp(param, "pénz", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad pénz [Játékos] [Mennyit]");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(PlayerInfo[playerid][ppenz] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi pénz!");

		if(PlayerInfo[playerid][pjatekosszint] < 3)
		{
			return SCM(playerid,COL_LRED,"Minimum 3 as Szint!");
		}

		if(ertek > 4500 || ertek < 1)
			return SCM(playerid, COL_LRED, "Egyszerre maximum 4500$ készpénzt adhatsz át!");

		GiveMoney(jatekos,ertek);
		GiveMoney(playerid,-ertek);
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"$ készpénzt!", JatekosNev(playerid, true), FN(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"$ készpénzt!", JatekosNev(jatekos, true), FN(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi készpénzt..");
	}
	else if(!strcmp(param, "fegyver", false))
	{
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_MKEK, "Használat: /átad fegyver [Játékos]");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return NincsItt(playerid);

		if(!PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Nincs a kezedben fegyver amit átadhatnál!");
			
		if((PlayerInfo[playerid][pFegyver] == 9) && IsJob(playerid, MUNKA_FAVAGO))
		    return SeeKick(playerid,"Bugot akarsz kihasználni?[1]");

		if(PlayerInfo[jatekos][pFegyver])
			return SCM(playerid, COL_LRED, "Van a kezében fegyver, így nem tudja átvenni!");

		if(PlayerInfo[jatekos][pjatekosszint] < 3)
			return SCM(playerid, COL_LRED, "Fegyverhasználat csak 3 szinttol érheto el ezért nem adhatsz neki át fegyvert!");

		//if(PlayerInfo[playerid][pDuty][0] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND)
			//return SCM(playerid, COL_LRED, "Nem ezért kapsz fegyvert szolgálatban :D");

		new slot = GetGunSlot( PlayerInfo[playerid][pFegyver] );
		new fegyo = PlayerInfo[playerid][pFegyverek][slot];
		new ammo;

		ammo = PlayerInfo[playerid][pToltenyek][slot];

		PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
		PlayerInfo[playerid][pToltenyek][slot] -= ammo;
		if(PlayerInfo[playerid][pToltenyek][slot] == 0)
		{
			PlayerInfo[playerid][pFegyverek][slot] = 0;
		}
		Fegyver(playerid, false);
		GiveWeapon(jatekos, fegyo, ammo);
		SetPlayerAttachedWeapon(jatekos);
		SFM(jatekos, COL_MKEK, "%s átadott neked egy "#COL_VKEK"%s"#COL_FEHER" fegyvert %d loszerrel!", JatekosNev(playerid, true), aWeaponNames[fegyo], ammo);
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER" fegyvert %d loszerrel", JatekosNev(jatekos, true), aWeaponNames[fegyo], ammo);
		Cselekves(playerid, "átadott valakinek némi fegyvert");
	}
	else if(!strcmp(param, "vas", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad vas [Játékos] [Mennyit]");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(PlayerInfo[playerid][pVas] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi vas!");

		if((PlayerInfo[jatekos][pVas] + ertek) > P_MAX_VAS)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_VAS"kg vas fér el nála!");

		PlayerInfo[playerid][pVas] -= ertek;
		PlayerInfo[jatekos][pVas] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"kg vasat!", JatekosNev(playerid, true), FN(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"kg vasat!", JatekosNev(jatekos, true), FN(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi vasat");
	}
	else if(!strcmp(param, "c4", false) || !strcmp(param, "bomba", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad Bomba [Játékos] [Mennyit]");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(PlayerInfo[playerid][pCuccok][BL_C4] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi bomba!");

		if((PlayerInfo[jatekos][pCuccok][BL_C4] + ertek) > P_MAX_C4)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_C4"db bomba fér el nála!");

		PlayerInfo[playerid][pCuccok][BL_C4] -= ertek;
		PlayerInfo[jatekos][pCuccok][BL_C4] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"db bombát!", JatekosNev(playerid, true), FN(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"db bombát!", JatekosNev(jatekos, true), FN(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek valamit...");
	}
	else if(!strcmp(param, "kötszer", false) || !strcmp(param, "kotszer", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad kötszer [Játékos] [Mennyit]");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(PlayerInfo[playerid][pCuccok][BL_KOTSZER] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi kötszer!");

		if((PlayerInfo[jatekos][pCuccok][BL_KOTSZER] + ertek) > P_MAX_KOTSZER)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_KOTSZER"kg vas fér el nála!");

		PlayerInfo[playerid][pCuccok][BL_KOTSZER] -= ertek;
		PlayerInfo[jatekos][pCuccok][BL_KOTSZER] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"kg kötszert!", JatekosNev(playerid, true), FN(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"kg kötszert!", JatekosNev(jatekos, true), FN(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi kötszert");
	}
	else if(!strcmp(param, "mati", false) || !strcmp(param, "material", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad material [Játékos] [Mennyit]");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(PlayerInfo[playerid][pMaterial] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi Material!");

		if((PlayerInfo[jatekos][pMaterial] + ertek) > P_MAX_MATERIAL)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_MATERIAL"kg vas fér el nála!");

		PlayerInfo[playerid][pMaterial] -= ertek;
		PlayerInfo[jatekos][pMaterial] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"db Materialt!", JatekosNev(playerid, true), FN(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"db Materialt!", JatekosNev(jatekos, true), FN(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi materialt");
	}
	else if(!strcmp(param, "heroin", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad heroin [Játékos] [Mennyit]");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(PlayerInfo[playerid][pHeroin] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi heroin!");

		if((PlayerInfo[jatekos][pHeroin] + ertek) > P_MAX_HEROIN)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_HEROIN"kg vas fér el nála!");

		PlayerInfo[playerid][pHeroin] -= ertek;
		PlayerInfo[jatekos][pHeroin] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"g Heroint!", JatekosNev(playerid, true), FN(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"g Heroint!", JatekosNev(jatekos, true), FN(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi heroint");
	}
	else if(!strcmp(param, "kokain", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad kokain [Játékos] [Mennyit]");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(PlayerInfo[playerid][pKokain] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi heroin!");

		if((PlayerInfo[jatekos][pKokain] + ertek) > P_MAX_KOKAIN)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_KOKAIN"kg vas fér el nála!");

		PlayerInfo[playerid][pKokain] -= ertek;
		PlayerInfo[jatekos][pKokain] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"g Kokaint!", JatekosNev(playerid, true), FN(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"g Kokaint!", JatekosNev(jatekos, true), FN(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi kokaint");
	}
	else if(!strcmp(param, "marihuana", false) || !strcmp(param, "mariska", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad marihuana [Játékos] [Mennyit]");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(PlayerInfo[playerid][pMarihuana] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi marihuána!");

		if((PlayerInfo[jatekos][pKokain] + ertek) > P_MAX_MARIHUANA)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_MARIHUANA"kg vas fér el nála!");

		PlayerInfo[playerid][pMarihuana] -= ertek;
		PlayerInfo[jatekos][pMarihuana] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"g Marihuánát!", JatekosNev(playerid, true), FN(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"g Marihuánát!", JatekosNev(jatekos, true), FN(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi marihuánát");
	}
	else if(!strcmp(param, "mag", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad mag [Játékos] [Mennyit]");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(PlayerInfo[jatekos][pDrogAnyag][0] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi mag!");

		PlayerInfo[playerid][pDrogAnyag][0] -= ertek;
		PlayerInfo[jatekos][pDrogAnyag][0] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"db magot!", JatekosNev(playerid, true), FN(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"db magot!", JatekosNev(jatekos, true), FN(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi marihuánát");
	}
	else
		SCM(playerid, COL_MKEK, "Használat: /átad [ Pénz / Material / Heroin / Kokain / Marihuana / Vas / Kötszer / Fegyver / Mag ]");
	return true;
}


CMD:negy(playerid, params[])
{
	new szam;
	if( sscanf( params, "i", szam ) ) return SCM( playerid, COL_MKEK, "Használat: /negy [szám]");

	if( szam % 4 == 0 )
	    return SCM( playerid, COL_MKEK, "A szám osztható NÉGY-gyel.");
	else
	    return SCM( playerid, COL_MKEK, "A szám NEM osztható NÉGY-gyel.");
}

CMD:elvesz(playerid, params[])
{
	new param[24];
	if(NemMozoghat(playerid,false))	return SCM(playerid, COL_LRED, "A sokk hatására nem tudsz elvenni semmit!");
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COL_LRED,"Jármûben nem vehetsz el semmit!");
	new jatekos = GetClosestPlayer(playerid);
	if(!PlayerToPlayer(playerid,jatekos,2))
 		return SCM(playerid,COL_LRED,"Nincs senki a közeledben!");

	if(Szint(jatekos) < 2) return SCM(playerid,COL_LRED,"Kezdõt nem rabolhatsz!");

	if(!NemMozoghat(jatekos, false))
		return SCM(playerid, COL_LRED, "Nem tudsz elvenni tõle semmit!");

	if(sscanf(params, "s[24]", param))
	{
		SCM(playerid, COL_MKEK, "Használat: /elvesz [ Pénz / Fegyver / Material / Heroin / Kokain / Marihuana / Mag ]");
		if( FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND )
			SCM(playerid, COL_MKEK, "Használat: /elvesz [ KRESZ / Autójogsi / Motorjogsi / Kamionjogsi / Fegyverengedély ]");
		return 1;
	}
	if(!strcmp(param, "gázmaszk", true) || !strcmp(param, "gazmaszk", true))
	{
		if(PlayerInfo[jatekos][pGazmaszk] == 0) return SCM(playerid,COL_LRED,"A játékosnál nincs gázmaszk.");
		if(PlayerInfo[playerid][pGazmaszk] == 1) return SCM(playerid,COL_LRED,"Nálad már van gázmaszk!");
		PlayerInfo[playerid][pGazmaszk] = 1;		PlayerInfo[jatekos][pGazmaszk] = 0;
		PlayerInfo[jatekos][pGazmaszkFenn] = false;
		SCM(playerid,COL_MKEK,"Elvettél tõle egy gázmaszkot!");
		SCM(jatekos,COL_LRED,"Elvettek tõled egy gázmaszkot!");
		Cselekves(playerid, "elvette valakinek a gázmaszkját");
	}
	if(!strcmp(param, "penz", true) || !strcmp(param, "pénz", true))
	{
		if(!PlayerInfo[jatekos][ppenz])
			return SCM(playerid, COL_LRED, "Ennél a játékosnál nincs készpénz!");

		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"$ készpénzt!", FN(PlayerInfo[jatekos][ppenz], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"$ készpénzt! ", FN(PlayerInfo[jatekos][ppenz], 0, ','));


		GiveMoney(playerid,PlayerInfo[jatekos][ppenz]);
		PlayerInfo[jatekos][ppenz] = 0;
		Cselekves(playerid, "elvett valakitõl némi készpénzt..");
	}
	else if(!strcmp(param, "fegyver", true))
	{
		if(PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Elõször rakd el a fegyvered!");

		if(PlayerInfo[jatekos][pFegyver])
			cmd_fegyver(jatekos, "elrak");

		if((PlayerInfo[jatekos][pFegyver] == 9) && IsJob(jatekos, MUNKA_FAVAGO))
		    return SCM(playerid, COL_LRED, "Ezt a fegyvert nem veheted el tõle!");

		new fegyver = NINCS, bool:van;
		for(;++fegyver < 13;)
		{
			if(PlayerInfo[ jatekos ][pFegyverek][ fegyver ] && PlayerInfo[ jatekos ][pToltenyek][ fegyver ] && !SameWeaponSlot( PlayerInfo[playerid][pFegyverek][ fegyver ], PlayerInfo[jatekos][pFegyverek][ fegyver ] ))
			{
				van = true;
				PlayerInfo[playerid][pFegyverek][ fegyver ] = PlayerInfo[jatekos][pFegyverek][ fegyver ];
				PlayerInfo[playerid][pToltenyek][ fegyver ] += PlayerInfo[jatekos][pToltenyek][ fegyver ];

				PlayerInfo[jatekos][pFegyverek][ fegyver ] = 0;
				PlayerInfo[jatekos][pToltenyek][ fegyver ] = 0;

				ResetPlayerWeapons(jatekos);
			}
		}

		if(!van)
			return SCM(playerid, COL_LRED, "Ennél a játékosnál nincs egy fegyver se vagy nálad már van hasonló típusú fegyver!");

		SetPlayerAttachedWeapon(jatekos);
		SetPlayerAttachedWeapon(playerid);
		SCM(jatekos, COL_MKEK, "Valaki elvette tõled az összes fegyvered!");
		SCM(playerid, COL_MKEK, "Elvetted tõle az összes fegyverét!");
		Cselekves(playerid, "elvette valakitõl az összes fegyverét..");
	}
	else if(!strcmp(param, "mati", true) || !strcmp(param, "material", true))
	{
		if(!PlayerInfo[jatekos][pMaterial])
			return SCM(playerid, COL_LRED, "Nincs nála material!");

		if((PlayerInfo[playerid][pMaterial] + PlayerInfo[jatekos][pMaterial]) > P_MAX_MATERIAL)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_MATERIAL"db material fér el nálad!");

		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"db materialt!", FN(PlayerInfo[jatekos][pMaterial], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"db materialt! ", FN(PlayerInfo[jatekos][pMaterial], 0, ','));

		PlayerInfo[playerid][pMaterial] += PlayerInfo[jatekos][pMaterial];
		PlayerInfo[jatekos][pMaterial] = 0;

		Cselekves(playerid, "elvett valakitõl némi materialt..");
	}
	else if(!strcmp(param, "heroin", true))
	{
		if(!PlayerInfo[jatekos][pHeroin])
			return SCM(playerid, COL_LRED, "Nincs nála heroin!");

		if((PlayerInfo[playerid][pHeroin] + PlayerInfo[jatekos][pHeroin]) > P_MAX_HEROIN)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_HEROIN"g heroin fér el nálad!");

		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"g heroint!", FN(PlayerInfo[jatekos][pHeroin], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"g heroint! ", FN(PlayerInfo[jatekos][pHeroin], 0, ','));

		PlayerInfo[playerid][pHeroin] += PlayerInfo[jatekos][pHeroin];
		PlayerInfo[jatekos][pHeroin] = 0;

		Cselekves(playerid, "elvett valakitõl némi heroint..");
	}
	else if(!strcmp(param, "kokain", true))
	{
		if(!PlayerInfo[jatekos][pKokain])
			return SCM(playerid, COL_LRED, "Nincs nála kokain!");

		if((PlayerInfo[playerid][pKokain] + PlayerInfo[jatekos][pKokain]) > P_MAX_KOKAIN)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_KOKAIN"g kokain fér el nálad!");

		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"g kokaint!", FN(PlayerInfo[jatekos][pKokain], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"g kokaint! ", FN(PlayerInfo[jatekos][pKokain], 0, ','));

		PlayerInfo[playerid][pKokain] += PlayerInfo[jatekos][pKokain];
		PlayerInfo[jatekos][pKokain] = 0;

		Cselekves(playerid, "elvett valakitõl némi kokaint..");
	}
	else if(!strcmp(param, "marihuana", true) || !strcmp(param, "mariska", true))
	{
		if(!PlayerInfo[jatekos][pMarihuana])
			return SCM(playerid, COL_LRED, "Nincs nála marihuana!");

		if((PlayerInfo[playerid][pMarihuana] + PlayerInfo[jatekos][pMarihuana]) > P_MAX_MARIHUANA)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_MARIHUANA"g marihuana fér el nálad!");

		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"g marihuanat!", FN(PlayerInfo[jatekos][pMarihuana], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"g marihuanat! ", FN(PlayerInfo[jatekos][pMarihuana], 0, ','));

		PlayerInfo[playerid][pMarihuana] += PlayerInfo[jatekos][pMarihuana];
		PlayerInfo[jatekos][pMarihuana] = 0;

		Cselekves(playerid, "elvett valakitõl némi marihuanat..");
	}
	else if(!strcmp(param, "mag", true))
	{
		if(!PlayerInfo[jatekos][pDrogAnyag][0])
			return SCM(playerid, COL_LRED, "Nincs nála marihuana!");

		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"db magot!", FN(PlayerInfo[jatekos][pMarihuana], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"db magot! ", FN(PlayerInfo[jatekos][pMarihuana], 0, ','));

		PlayerInfo[playerid][pDrogAnyag][0] += PlayerInfo[jatekos][pDrogAnyag][0];
		PlayerInfo[jatekos][pDrogAnyag][0] = 0;

		Cselekves(playerid, "elvett valakitõl némi magot.");
	}
	else if(!strcmp(param, "KRESZ", true))
	{
   		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		    return SCM( playerid, COL_LRED, "Nem vagy a rendvédelem tagja.");

	    if(!PlayerInfo[jatekos][pEngedely][0])
	        return SCM( playerid, COL_LRED, "Nincs KRESZ-vizsgája.");

		PlayerInfo[jatekos][pEngedely][0] = 0;

		SCM(jatekos, COL_MKEK, "Valaki érvénytelenítette a KRESZ-vizsgádat.");
        SCM(playerid, COL_MKEK, "Elvetted a KRESZ-vizsgáját.");
	}
	else if(!strcmp(param, "autójogsi") || !strcmp(param, "autojogsi"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		    return SCM( playerid, COL_LRED, "Nem vagy a rendvédelem tagja.");

	    if(!PlayerInfo[jatekos][pEngedely][1])
	        return SCM( playerid, COL_LRED, "Nincs jogosítványa.");

		PlayerInfo[jatekos][pEngedely][1] = 0;

		SCM(jatekos, COL_MKEK, "Valaki elvette az autójogosidat.");
        SCM(playerid, COL_MKEK, "Elvetted az autójogsiját.");
	}
	else if(!strcmp(param, "motorjogsi"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		    return SCM( playerid, COL_LRED, "Nem vagy a rendvédelem tagja.");

	    if(!PlayerInfo[jatekos][pEngedely][2])
	        return SCM( playerid, COL_LRED, "Nincs jogosítványa.");

		PlayerInfo[jatekos][pEngedely][2] = 0;

		SCM(jatekos, COL_MKEK, "Valaki elvette a motorjogsidat.");
        SCM(playerid, COL_MKEK, "Elvetted az autójogsiját.");
	}
	else if(!strcmp(param, "kamionjogsi"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		    return SCM( playerid, COL_LRED, "Nem vagy a rendvédelem tagja.");

	    if(!PlayerInfo[jatekos][pEngedely][3])
	        return SCM( playerid, COL_LRED, "Nincs jogosítványa.");

		PlayerInfo[jatekos][pEngedely][3] = 0;

		SCM(jatekos, COL_MKEK, "Valaki elvette a kamionjogsidat.");
        SCM(playerid, COL_MKEK, "Elvetted a kamionjogsidat.");
	}
	else if(!strcmp(param, "fegyverengedély") || !strcmp(param, "fegyverengedely"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		    return SCM( playerid, COL_LRED, "Nem vagy a rendvédelem tagja.");

	    if(!PlayerInfo[jatekos][pEngedely][4])
	        return SCM( playerid, COL_LRED, "Nincs fegyverengedélye.");

		PlayerInfo[jatekos][pEngedely][4] = 0;

		SCM(jatekos, COL_MKEK, "Valaki elvette a fegyverengedélyed.");
        SCM(playerid, COL_MKEK, "Elvetted a fegyverengedélyét.");
	}
	else
	{
		SCM(playerid, COL_MKEK, "Használat: /elvesz [ Pénz / Fegyver / Material / Heroin / Kokain / Marihuana / Mag ]");
		if( FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND )
			SCM(playerid, COL_MKEK, "Használat: /elvesz [ KRESZ / Autójogsi / Motorjogsi / Kamionjogsi / Fegyverengedély ]");
		return 1;
	}
	return true;
}

CMD:kiszed(playerid, params[])
{
	new jatekos = KozelbenValaki(playerid, 2.5);

	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS || !IsPlayerInAnyVehicle(jatekos) || jatekos == 0)
		return SCM(playerid, COL_LRED, "A közeledben nincs senki akit kirángathatnál!");

	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben vagy, mégis, hogy akarod kirángatni?");

    if(PlayerInfo[jatekos][pAduty] || PlayerInfo[jatekos][pASduty])
        return SCM(playerid, COL_LRED, "Adminszolgálatost?!");
        
	new vid = JarmuID( GetClosestVehicle(jatekos), jatekos );
	if(vInfo[vid][vZarva])
		return SCM(playerid, COL_LRED, "Ez a jármû be van zárva, így nem tudod kirángatni!");

	new Float:pos[3];
	GetPlayerPos(playerid, PosExt(pos));
	SetPos(jatekos, pos[0]+ 0.5, pos[1] + 0.5, pos[2], .update = true);

	if(GetPlayerState(jatekos) == PLAYER_STATE_DRIVER)
		Freeze(jatekos, NINCS);

	Cselekves(playerid, "kirángatott valakit a jármûböl");
	return true;
}
CMD:ls(playerid, params[])
{
    new lsString[128],
    Float:fOriginX, Float:fOriginY, Float:fOriginZ,
    Float:fHitPosX, Float:fHitPosY, Float:fHitPosZ;

    GetPlayerLastShotVectors(playerid, fOriginX, fOriginY, fOriginZ, fHitPosX, fHitPosY, fHitPosZ);
    format(lsString, 128, "Last Shot Information: Origin: %f, %f, %f. Hit position: %f, %f, %f", fOriginX, fOriginY, fOriginZ, fHitPosX, fHitPosY, fHitPosZ);
    SendClientMessage(playerid, -1, lsString);
		
    return 1;
}
CMD:segit(playerid, params[])
{
	if(PlayerInfo[playerid][pTimerFut])
		return SCM(playerid, COL_MKEK, "Várj míg ellátod a sebet!");
		
	if(PlayerInfo[playerid][pCuccok][BL_KOTSZER] < 1)
		return SCM(playerid, COL_LRED, "Nincs elég kötszered, hogy felgyógyítsd!");

	new jatekos = GetClosestPlayer(playerid);
	if(!PlayerToPlayer(playerid,jatekos,2))
	{
 		return SCM(playerid,COL_LRED,"Nincs senki a közeledben!");
	}
	if(PlayerInfo[jatekos][pAnimban][0] == 0)
		return SCM(playerid, COL_LRED, "Ez a játékos nem szorul ellátásra!");

    if(isLottSeb(jatekos))
    {
        new munka = NINCS, mentosjarmuid = GetPlayerVehicleID(playerid);
		if(IsPlayerInAnyVehicle(playerid))
			munka = vInfo[ JarmuID( mentosjarmuid, playerid ) ][vMunka];
        
        if(!IsPlayerInAnyVehicle(playerid) || !IsPlayerInAnyVehicle(jatekos) || mentosjarmuid != GetPlayerVehicleID(jatekos) || munka != FRAKCIO_LAFD)
		    return SCM(playerid, COL_LRED, "Csak mentõszolgálati jármûben tudod ellátni! (/berak)");
		else
		    return SCM(playerid, COL_LRED, "Lõtt sebei vannak! Adj neki gyógyszert, hogy el tudd látni!");
	}

	Freeze(playerid, 40000);
	Freeze(jatekos, 40000);
	PlayerInfo[playerid][pTimerFut] = true;
	PlayerInfo[jatekos][pTimerFut] = true;

	defer MuveletTimer[40000](jatekos, T_SEGIT, playerid, NINCS);
	LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0, 1, 0, 0, 1, 0, 1);
	LoopingAnim(jatekos, "CRACK", "crckidle4", 4.0, 1, 0, 0, 0, 0);
	//return true;
	if(!strcmp(params, "magam"))
	{
	    if(isLottSeb(playerid)) return SCM(playerid, COL_LRED, "Lõtt sebbre?! A-a!");
	    
		if(PlayerInfo[playerid][pCuccok][BL_KOTSZER] < 2)
			return SCM(playerid, COL_LRED, "Nincs elég kötszered, hogy felgyógyítsd magad!");

		new db, szdb;
		foreach(Player, i)
		{
			if(PlayerInfo[i][pFrakcio] == FRAKCIO_LAFD && PlayerInfo[i][pDuty][0])
				szdb++;
			if(PlayerInfo[i][pFrakcio] == FRAKCIO_LAFD)
				db++;
		}

		if(db > 3 || szdb > 1 && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LAFD)//ha mentõs csak eltudja
			return SCM(playerid, COL_LRED, "Jelenleg van elég elérhetõ mentõs! Hívd a 112-es telefonszámot!");

		Freeze(playerid, 0);
		PlayerInfo[playerid][pTimerFut] = true;
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0, 1 ,0, 0, 1, 0, 1);
		defer MuveletTimer[60000](playerid, T_MSEGIT, NINCS, NINCS);
		Cselekves(playerid, "ellátja a sérüléseit..");
		return true;
	}
	return true;
}
CMD:benzin(playerid,params[])
{
	if(IsJob(playerid, MUNKA_KAMION))
	{
	    new parameterek[24];
	    if(sscanf(params,"s[54]{}",parameterek))
	    {
	        SCM(playerid,COL_MKEK,"Használat: /benzin [paraméterek]");
	        SCM(playerid,COL_MKEK,"Paraméterek: szállít, feltölt,");
	        return true;
		}
		if(!strcmp(parameterek, "szállít", false) || !strcmp(parameterek, "szallit", false))
		{
		    new benzinkut = GetClosestBenzinkut(playerid);
			if(BenzinSzallit[playerid] == 1)
		    {
				new benzinkutid = BenzinkutnalVan(playerid);
				if(benzinkutid > 0)
				{
					if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) != 584))
						return SCM(playerid, COL_LRED, "Pótkocsi holmaradt? :O");

		            defer MunkaTimer[30000](playerid);
		            
		            funkcio[playerid] = 4;
                    SCM(playerid,COL_LRED,"Tartály leengedése folyamatban..!");
                    BenzinkutInfo[benzinkut][bbenzinmennyiseg] += 150;

				}else { SCM(playerid,COL_MKEK,"Nem vagy egy benzinkút közelében sem!"); }
			} else { SCM(playerid,COL_MKEK,"Nincs feltöltve a tartályod!"); }
		}
		if(!strcmp(parameterek,"feltölt",false) || !strcmp(parameterek,"feltolt",false))
		{
		    if(PlayerInfo[playerid][ppenz] < 279)
				return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
	 		if(BenzinSzallit[playerid] == 1)
	 		    return SCM(playerid,COL_LRED,"Már szállítassz benzint!");
		    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2453.23, -2642.96, 13.66))
		    {
		        SetPlayerCheckpoint(playerid, 2453.23, -2642.96, 13.66, 3);
		        SCM(playerid,COL_LRED,"Menj a kijelölt helyre!");
		    }
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) != 584))
				return SCM(playerid, COL_LRED, "Nincs felcsatolva a pótkocsi!");

            defer MunkaTimer[30000](playerid);
            
            funkcio[playerid] = 3;
			SCM(playerid,COL_LRED,"Tartály feltöltése folyamatban..!");
			TogglePlayerControllable(playerid, false);

		}
	}
	return 1;
}

CMD:motoz(playerid, params[])
{
	#pragma unused params
	if(PlayerInfo[playerid][pAnimban][0] == 1)
		return SCM(playerid, COL_LRED, "Animban nem tudsz megmotozni senkit se!");
		
	new jatekos = KozelbenValaki(playerid, 2.0);

	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
		return SCM(playerid, COL_LRED, "A közeledben nincs senki!");

	Megmotozna[jatekos] = playerid;
	Megmotozna[playerid] = jatekos;
	new kicsinalja[128];

	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
	}
	SFM(jatekos,COL_MKEK,"Megmotozna %s || /elfogad motozás",kicsinalja);
	SCM(playerid,COL_MKEK,"Motozás kérelem elküldve várj amíg elfogadja!");
	return true;
}

CMD:roadblock(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LAFD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && PlayerInfo[playerid][pFrakcio] != FRAKCIO_EPITESZ)
		return SCM(playerid, COL_LRED, "Te nem vagy se tuzoltó, se rendor!");
	new rb;
	if(sscanf(params, "u", rb))
		return SendClientMessage(playerid, 0x00ffffAA, "Használat: /roadblock [ Útzár ID ]");
	if(rb == 1)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(1459,plocx,plocy,plocz,ploca);
		SendClientMessage(playerid, 0xffff00AA, "Leraktál egy kicsi útzárat!");
	}
	else if(rb == 2)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(978,plocx,plocy,plocz,ploca);
		SendClientMessage(playerid, 0xffff00AA, "Leraktál egy közepes útzárat!");
	}
	else if(rb == 3)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(981,plocx,plocy,plocz,ploca);
		SendClientMessage(playerid, 0xffff00AA, "Leraktál egy nagy útzárat!");
	}
	else {	SendClientMessage(playerid, 0x00ffffAA, "1 - Kicsi útzár | 2 - Közepes útzár | 3 - Nagy útzár");	}
	return true;
}

CMD:removerb(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LAFD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && PlayerInfo[playerid][pFrakcio] != FRAKCIO_EPITESZ)
		return SCM(playerid, COL_LRED, "Te nem vagy se tuzoltó, se rendor!");
	DeleteClosestRoadblock(playerid);
	return true;
}

CMD:removeallrb(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LAFD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && PlayerInfo[playerid][pFrakcio] != FRAKCIO_EPITESZ)
		return SCM(playerid, COL_LRED, "Te nem vagy se tuzoltó, se rendor!");
	DeleteAllRoadblocks(playerid);
	foreach(Player, id)
	{
		if(PlayerInfo[id][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[id][pFrakcio] == FRAKCIO_LAFD || PlayerInfo[id][pFrakcio] == FRAKCIO_LAFD || PlayerInfo[id][pFrakcio] == FRAKCIO_KATONA)
		{
			new string1[128];
			format(string1, sizeof(string1), "(( %s törölte az össze útzárat! ))", JatekosNev(playerid, true));
			SendClientMessage(id, 0xff6347AA, string1);
		}
	}
	return true;
}

CMD:boja(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LAFD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && PlayerInfo[playerid][pFrakcio] != FRAKCIO_EPITESZ)
		return SCM(playerid, COL_LRED, "Te nem vagy se tûzoltó, se rendõr!");
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /bója [ Lerak / Felvesz ]");

	if(!strcmp(params, "lerak"))
	{
		new id = NINCS, Float:pos[4], i = NINCS;
		for(;++i < MAX_BOJA;)
		{
			if(Bojak[playerid][i][boposx] == 0.0)
			{
				id = i;
				break;
			}
		}

		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nem tudsz több bóját lerakni!");

		GetPlayerPos(playerid, PosExt(pos));
		GetPlayerFacingAngle(playerid, pos[3]);

		pos[2] -= 0.6;

		Bojak[playerid][id][boObj] = CreateDynamicObject(1238, PosExt(pos), 0.0, 0.0, 0.0);
		Bojak[playerid][id][boposx] = pos[0];
		Bojak[playerid][id][boposy] = pos[1];
		Bojak[playerid][id][boposz] = pos[2];

		//SCM(playerid, COL_MKEK, "Sikeresen leraktál egy bóját!");
		Cselekves(playerid, "lehelyezett egy bóját");

		Streamer_Update(playerid);
	}
	else if(!strcmp(params, "felvesz"))
	{
		new Float:pos[4], id = NINCS, i = NINCS;
		GetPlayerPos( playerid, PosExt( pos ) );

		for(;++i < MAX_BOJA;)
		{
			if(Bojak[playerid][i][boposx] == 0.0) continue;
			if(GetDistance( Bojak[playerid][i][boposx], Bojak[playerid][i][boposy], Bojak[playerid][i][boposz], PosExt( pos ) ) < 5.0)
			{
				id = i;
				break;
			}
		}

		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben felvehetõ bója!");

		DestroyDynamicObject( Bojak[playerid][id][boObj] );
		Bojak[playerid][id][boposx] = 0.0;
		Bojak[playerid][id][boposy] = 0.0;
		Bojak[playerid][id][boposz] = 0.0;
		Bojak[playerid][id][boObj] = INVALID_OBJECT_ID;

		//SCM(playerid, COL_MKEK, "Sikeresen felvettél egy bóját!");
		Cselekves(playerid, "felvett egy bóját a földrõl");
	}
	return true;
}

CMD:hir(playerid, params[])//ah-ban
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_RIPORTER)
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(PlayerInfo[playerid][pTog][8])
		return SCM(playerid, COL_LRED, "Elõször kapcsold be riportokat, hogy lásd! (( /tog riporter ))");

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /hír [Üzenet] | Hírek bemondása");

	if(!OOC_Ellenorzes(playerid, "/hír", params))
		return true;
		
    if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_RIPORTER)
		return SCM(playerid, COL_LRED, "Te nem vagy riporter!");

	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Csak riporter jármûben használhatod!");

	new munka = vInfo[ JarmuID( GetPlayerVehicleID(playerid), playerid ) ][vMunka];
	if(munka != FRAKCIO_RIPORTER)
		return SCM(playerid, COL_LRED, "Csak RIPORTER jármûben használhatod!");

	foreach(Player, i)
	if(IsPlayerConnected(i) && !PlayerInfo[i][pTog][8])
		SendFormatMessage(i, COLOR_SZURKE, "** Riporter %s: %s", JatekosNev(playerid, true), params);

	if(IsPlayerInRangeOfPoint(playerid, 40.0, 245.2307, 304.7632, 999.1484))
	{
		foreach(Player, i)
		if(IsPlayerConnected(i) && !PlayerInfo[i][pTog][8])
			SendFormatMessage(i, COLOR_ORANGE, "** Riporter %s: %s", JatekosNev(playerid, true), params);

	}
	return true;
}
CMD:zene(playerid, params[])//ah-ban
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_RIPORTER && !Admin(playerid, FOADMIN_SZINT))    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(PlayerInfo[playerid][pTog][8])	return SCM(playerid, COL_LRED, "Elõször kapcsold be riportokat, hogy lásd! (( /tog riporter ))");
	if(isnull(params)) return SCM(playerid, COL_MKEK, "Használat: /zene [ URL (.mp3, .pls, .ogg végzõdéssel) / Stop ] | Zene indítása és leállítása");
	if(!IsPlayerInAnyVehicle(playerid) && strcmp(params, "stop", true) != 0 && !Admin(playerid, FOADMIN_SZINT))return SCM(playerid, COL_LRED, "Nem vagy riporter jármûben!");
	new id = JarmuID(GetPlayerVehicleID(playerid), playerid);
	if(strcmp(params, "stop", true) != 0 && !Admin(playerid, FOADMIN_SZINT) && ((vInfo[id][vModel] != 488 && vInfo[id][vModel] != 582) || vInfo[id][vMunka] != FRAKCIO_RIPORTER))	return SCM(playerid, COL_LRED, "Nem vagy riporter jármûben!");
	if(!strcmp(params, "stop", true))
	{
		foreach(Player, i)
		{
			if(!Belepve(i)) continue;
			if(!PlayerInfo[i][pTog][8] && !PlayerInfo[i][pMP3_Megy] && !PlayerInfo[i][pJarmuZene])
				StopAudioStreamForPlayer(i);
		}

		ServerInfo[sZene][0] = EOS;
		return true;
	}
//	if(!OOC_Ellenorzes(playerid, "/zene", params))	return true;
	foreach(Player, i)
	{
		if(!Belepve(i)) continue;
		if(!PlayerInfo[i][pTog][8] && !PlayerInfo[i][pMP3_Megy] && !PlayerInfo[i][pJarmuZene])
		{
			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, params);
		}
	}
	format(ServerInfo[sZene], 128, "%s", params);
	return true;
}

CMD:live(playerid, params[])
{
	new string[128], playerb;
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_RIPORTER)
		return SendClientMessage(playerid, COLOR_GREY, "Nem vagy riporter");
	if(Live[playerid])
	{
	    foreach(Player, i)
	    {
	        if(Live[i] && i != playerid) playerb = i;
	    }
	    Live[playerid] = 0;
	    Live[playerb] = 0;
	    LiveConference = 0;
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Lezártad az élõ közvetítést.");
	    SendClientMessage(playerb, COLOR_LIGHTRED, "Az élõ közvetítés bezárult.");
	}
	else
	{
	    if(LiveRequest[playerid]) return SendClientMessage(playerid, COLOR_GREY, "Te már felajánlottad valakinek az élõ konferenciát.");
	    if(LiveConference) return SendClientMessage(playerid, COLOR_GREY, "Már megy egy élõkonferencia.");
		if(sscanf(params, "u", playerb)) return SendClientMessage(playerid, COLOR_WHITE, "[Használat]: /live [játékosid]");
		if(playerb == playerid) return SendClientMessage(playerid, COLOR_GREY, "Magaddal akarsz beszélgetni? Gyökér.");
		if(LiveBy[playerb] != -1) return SendClientMessage(playerid, COLOR_GREY, "Játékosnak már felajánlottak élõ konferenciát.");
		LiveBy[playerb] = playerid;
		LiveRequest[playerid] = 1;
		format(string, sizeof(string), " Felajánlottad %s -nek/nak az élõ konferenciát.", JatekosNev(playerb));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " Riporter %s felajánlotta neked az élõ konferenciát (/elfogad live) (/elutasit live)", JatekosNev(playerid));
		SendClientMessage(playerb, COLOR_LIME, string);
	}
	return 1;
}


CMD:buntetesem(playerid, params[])
{
	#pragma unused params
	if(!Bortonben(playerid))
		return SCM(playerid, COL_MKEK, "Te jelenleg nem vagy büntetésben!");

	SendClientMessage(playerid, COLOR_WHITE, "============ [ "#COL_MKEK"Büntetésem"#COL_FEHER" ] ============");
	SendFormatMessage(playerid, COLOR_WHITE, "Jelenleg "#COL_MKEK"%s"#COL_FEHER" vagy", BortonNev( Bortonben(playerid), true));
	SendFormatMessage(playerid, COLOR_WHITE, "Oka: "#COL_MKEK"%s", PlayerInfo[playerid][pJailOk]);
	SendFormatMessage(playerid, COLOR_WHITE, "Adta: "#COL_MKEK"%s", PlayerInfo[playerid][pJailAdta]);
	SendFormatMessage(playerid, COLOR_WHITE, "Idõ: még "#COL_MKEK"%s", TimeFormat(PlayerInfo[playerid][pJailIdo]));
	return true;
}

CMD:korozes(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Nem vagy a rendvédelem tagja!");
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /körözés [ Kiad / Töröl / Lista ]");

	new jatekos, oka[64], param[24];
	sscanf(params, "s[24]{}", param);

	if(!strcmp(param, "kiad"))
	{
		if(sscanf(params, "{s[24]}us[64]", jatekos, oka))
			return SCM(playerid, COL_MKEK, "Használat: /körözés kiad [Játékos] [Hivatali Indok]");
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		if(!OOC_Ellenorzes(playerid, "/körözés", oka))
			return true;
		if(Karakter_Ellenorzes(oka))
			return SCM(playerid, COL_LRED, "Az indok nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");
		if(strlen(oka) > 63)
			return SCM(playerid, COL_LRED, "Az indok maximum 63 karakter lehet!");

		SCM(playerid, COL_LRED, "Országos körözés kiadva! (( Körözési lista: /körözés lista ))");
		Korozes_Kiad(jatekos, playerid, oka, 1);
	}
	else if(!strcmp(param, "töröl") || !strcmp(param, "torol"))
	{
		if(sscanf(params, "{s[24]}us[64]", jatekos, oka))
			return SCM(playerid, COL_MKEK, "Használat: /körözés töröl [Játékos] [Oka]");
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		if(!OOC_Ellenorzes(playerid, "/körözés", oka))
			return true;
		if(Karakter_Ellenorzes(oka))
			return SCM(playerid, COL_LRED, "Az indok nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");
		if(strlen(oka) > 63)
			return SCM(playerid, COL_LRED, "Az indok maximum 63 karakter lehet!");
		if(!Korozes[jatekos][krSzint])
			return SCM(playerid, COL_LRED, "Ezen a játékoson nincs körözés!");

		SCM(playerid, COL_LRED, "Országos körözés törölve! (( Körözési lista: /körözés lista ))");
		Korozes_Torol(jatekos, playerid, oka);
	}
	else if(!strcmp(param, "lista"))
	{
		new db;
		SendClientMessage(playerid, COLOR_WHITE, "================ [ "#COL_MKEK"Körözött személyek"#COL_FEHER" ] ================");
		foreach(Player, i)
		{
			if(Belepve(i) && Korozes[i][krSzint])
			{
				db++;
				SendFormatMessage(playerid, COLOR_WHITE, "Körözött személy: "#COL_MKEK"%s"#COL_FEHER" | Kiadta: "#COL_MKEK"%s", Korozes[i][krNev], Korozes[i][krKiadta]);
				SendFormatMessage(playerid, COLOR_WHITE, "Körözés oka: "#COL_MKEK"%s", Korozes[i][krOka]);
			}
		}
		if(!db)
			SCM(playerid, COL_LRED, "Jelenleg nincsenek körözött személyek!");
	}
	return true;
}

CMD:mp3(playerid, params[])
{
	#pragma unused params
	if(!PlayerInfo[playerid][pCuccok][ BL_MP3 ])
		return SCM(playerid, COL_LRED, "Neked még nincs MP3 lejátszód! Ha szeretnél egyet, vegyél a boltban.");

	new dstr[1024], tmp[128], i = NINCS;
	format(dstr, sizeof(dstr), #COL_VZOLD"Rádió kikapcsolása");
	for(;++i < sizeof(RadioLista);)
	{
		if(i % 2 == 1) format(tmp, sizeof(tmp), "\n"#COL_MKEK"%s", RadioLista[i][1]);
		else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s", RadioLista[i][1]);
		strcat(dstr, tmp, sizeof(dstr));
	}
	ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_LIST, "MP3 - Rádió lista", dstr, "Hallgat", "Mégse");

	return true;
}

CMD:sk(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /(s)ebesség(k)orlát [(50 - 130)km/h | 0 = Kikapcsolás]");

	if(!PlayerInfo[playerid][pJarmuben])
		return SCM(playerid, COL_LRED, "Csak jármûben használható!");

	if(IsABicikli( vInfo[ PlayerInfo[playerid][pJarmuben] ][vModel] ))
		return SCM(playerid, COL_LRED, "A bicikli sebességét nem módosíthatod!");

	new ertek = strval(params);
	if(ertek > 130 || (ertek < 50 && ertek != 0))
		return SCM(playerid, COL_LRED, "Hibás érték! Minimum 50Km/h maximum 130Kh/h | 0 = kikapcsol");

	PlayerInfo[playerid][pSK] = ertek;
	SFM(playerid, COL_VZOLD, "** Sebességkorlát beállítva %dKm/h-ra!", ertek);
	return true;
}
CMD:vontat(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Nem ülsz jármûben!");
	if(GetPlayerVehicleSeat(playerid))
		return SCM(playerid, COL_LRED, "Vezetõnek kell lenned, hogy vontathass!");

	new id = NINCS, essid;

	if(!isnull(params) && IsNumeric(params))
		id = strval(params);

	new bool:ok, i = NINCS;
	if(vInfo[ PlayerInfo[playerid][pJarmuben] ][vModel] != 525)//ha nem vontatós kocsi
	{
		if(!PlayerInfo[playerid][pCuccok][ BL_VONTATO ])
			return SCM(playerid, COL_LRED, "Neked nincs vontatóköteled! Vegyél egyet valamelyik boltban.");

		for(;++i < sizeof(NemVontatoJarmu);) {
			if(NemVontatoJarmu[i] == vInfo[ PlayerInfo[playerid][pJarmuben] ][vModel]) {
				ok = true;
				break;
			}
		}

		if(ok)
			return SCM(playerid, COL_LRED, "Ezzel a jármûvel nem vontathatsz!");
	}

	if(id == NINCS)
	{
		id = GetClosestVehicle(playerid, false);
		SCM(playerid, COL_MKEK, "Használat: /vontat vagy /vontat [JármûID] | Alap esetben a legközelebbi jármûvet vontatja!");
	}
	if(!IsVehicleConnected(id) && (id > MAX_VEHICLES || id < 0) || GetDistanceToVehicle(playerid, id) > 10)
		return SCM(playerid, COL_LRED, "Nincs ilyen jármû a közeledben!");

	essid = vInfo[ PlayerInfo[playerid][pJarmuben] ][vID];

	new model = GetVehicleModel(id);
	i = NINCS, ok = false;
	for(;++i < sizeof(NemVontathatoJarmu);) {
		if(NemVontathatoJarmu[i] == model) {
			ok = true;
			break;
		}
	}

	if(ok)
		return SCM(playerid, COL_LRED, "Ezt a jármûvet nem vontathatod!");

	if(!GetVehicleTrailer(essid)) AttachTrailerToVehicle(id, essid);
	else DetachTrailerFromVehicle(essid);

	SetVehicleVirtualWorld(id, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(id, GetPlayerInterior(playerid));
	SFM(playerid, COL_VZOLD, "Elkezdted vontatni a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûvet!", id, JarmuID(id, playerid));
	return true;
}

CMD:lenyomoz(playerid, params[])
{
	if(!Admin(playerid, 3) && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && !IsHitman(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(!Admin(playerid, 3) && !IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Rendõr jármûben kell ülnöd!");

	new vm = vInfo[ JarmuID( GetPlayerVehicleID(playerid), playerid ) ][vMunka];
	if(!Admin(playerid, 3) && vm != FRAKCIO_LSPD && vm != FRAKCIO_KATONA && vm != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Rendõr jármûben kell ülnöd!");

	new param[24];
	if(sscanf(params, "s[24]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /lenyomoz [ Játékos / Jármû / Befejez ]");

	if(PlayerInfo[playerid][pLenyomoz] > gettime())
		return SFM(playerid, COL_LRED, "Következõ lenyomozásig még várnod kell "#COL_MKEK"%d"#COL_FEHER" másodpercet!", (PlayerInfo[playerid][pLenyomoz] - gettime()));

	if(!strcmp(param, "játékos", true) || !strcmp(param, "jatekos", true))
	{
		new jatekos;
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /lenyomoz játékos [Játékos Név/ID]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos) || !Belepve(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][pCuccok][BL_TELEFON] == 0 || PlayerInfo[jatekos][pTog][5])
		{
			if(Admin(playerid, 1))
				SCM(playerid, COL_LRED, "Jelenleg nincs, vagy ki van kapcsolva a telefonja, de mivel Admin vagy így látod a pozícióját!");
			else
			{
				GameTextForPlayer(playerid, "~b~Lenyomozás sikertelen...", 2500, 3);
				SCM(playerid, COL_LRED, "Célszemély bemérése sikertelen, legközelebb 20 másodperc múlva próbálkozhatsz.");
				PlayerInfo[playerid][pLenyomoz] = (gettime() + 20);
				return true;
			}
		}

		GameTextForPlayer(playerid, "~b~Lenyomozás folyamatban...", 2500, 3);
		SCM(playerid, COL_VZOLD, "Célszemély pillanatnyi koordinátái betáplálva a GPS-be!");
		new Float:pos[3];
		GetPlayerPos(jatekos, PosExt(pos));
		SetPlayerCheckpoint(playerid, PosExt(pos), 5.0);
		PlayerInfo[playerid][pCP] = CP_LENYOMOZ;
	}
	else if(!strcmp(param, "jármû", true) || !strcmp(param, "jarmu", true))
	{
		new car;
		if(sscanf(params, "{s[24]}d", car))
			return SCM(playerid, COL_MKEK, "Használat: /lenyomoz jármû [Rendszám]");

		if(!car || car > MAX_VEHICLES || !IsVehicleConnected(car))
			return SCM(playerid, COL_LRED, "Nincs ilyen jármû!");

		GameTextForPlayer(playerid, "~b~Lenyomozás folyamatban...", 2500, 3);
		SCM(playerid, COL_VZOLD, "Jármû pillanatnyi koordinátái betáplálva a GPS-be!");
		new Float:pos[3];
		GetVehiclePos(car, PosExt(pos));
		SetPlayerCheckpoint(playerid, PosExt(pos), 5.0);
		PlayerInfo[playerid][pCP] = CP_LENYOMOZ;
	}
	else if(!strcmp(param, "befejez", true))
	{
		if(PlayerInfo[playerid][pCP] != CP_LENYOMOZ)
			return SCM(playerid, COL_LRED, "Jelenleg nincs megjelölt cél a GPS-en!");

		DisablePlayerCheckpoint(playerid);
		PlayerInfo[playerid][pCP] = 0;
		SCM(playerid, COL_VZOLD, "GPS jelölés kikapcsolva!");
	}

	return true;
}


CMD:ticket(playerid, params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos, penz,oka[40];
	if(sscanf(params, "uds[40]", jatekos, penz,oka))
		return SCM(playerid, COL_MKEK, "Használat: /ticket [Játékos] [Összeg] [ Oka ]");

	if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

	if(playerid == jatekos)
		return SCM(playerid, COL_LRED, "Magadat akarod megbüntetni?");

	if(penz < 10 || penz > 10000)
		return SCM(playerid, COL_LRED, "A bírság összege minimum 10$ és maximum 10000$ lehet!");


	SFM(playerid, COL_MKEK, "Megbírsálgoltad %s-t, összeg: %d vád: %s", JatekosNev(jatekos, true), FormatNumber(penz, 0, ','),oka);
	SFM(jatekos, COL_MKEK, " %s megbírságolt téged, összeg: %d, Vád:%s",JatekosNev(playerid,true),FormatNumber(penz, 0, ','),oka);
	Cselekves(playerid, "átnyújtott egy bírságot valakinek..", 1);
	Cselekves(jatekos, "kifizette a bírságot.");
	PlayerInfo[jatekos][ppenz] -= penz;
    FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] += penz;
	return true;
}

CMD:elutasit(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /elutasít [ Csere / live ]");
		
    if(!strcmp(params, "live", true))
	{
		new playerb = LiveBy[playerid], string[256];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Senki nem ajánlott neked konferenciát.");
		LiveBy[playerid] = -1;
		LiveRequest[playerb] = 0;
		Live[playerid] = 0;
		Live[playerb] = 0;
		format(string, sizeof(string), " Te eltuasítottad %s'konferencia felkérését.", JatekosNev(playerb));
		SendClientMessage(playerid, COLOR_LIME, string);
		format(string, sizeof(string), " %s elutasítottad a konferencia felkérést.", JatekosNev(playerid));
		SendClientMessage(playerb, COLOR_LIME, string);
	}
	return true;
}

CMD:elfogad(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /elfogad [ Bírság / Számla / Csere / Házasság / Kézfogás / Motozás / live / ujjlenyomat]");

	if(egyezik(params, "ujjlenyomat"))
	{
	    if(Kerelem[playerid][KERELEM_UJJLENYOMAT] == NINCS)
	         return SCM(playerid,COL_LRED,"Tõled nem akar senki ujjlenyomatot venni!");

        new kikerte = Kerelem[playerid][KERELEM_UJJLENYOMAT];
        if(strlen(PlayerInfo[playerid][pUjjlenyomat]) < 1)
        {
			foreach(Player, i)
			{
			    if(i == NINCS)
			        format(PlayerInfo[playerid][pUjjlenyomat], MAX_PLAYER_NAME, "%d", random(9));
				else
				    format(PlayerInfo[playerid][pUjjlenyomat], MAX_PLAYER_NAME, "%s%d", PlayerInfo[playerid][pUjjlenyomat], random(9));
			}
			SCM(kikerte, COL_FEHER, "PDA: Ujjlenyomat hozzáadva az adatbázishoz!");
			SFM(kikerte, COL_FEHER, "Név: {ff0000}%s{ffffff} Lenyomat:{ff0000}%s{ffffff}", JatekosNev(playerid), PlayerInfo[playerid][pUjjlenyomat]);
		}
		else
		{
		    SCM(kikerte, COL_FEHER, "PDA: Ujjlenyomat Azonosítva!");
			SFM(kikerte, COL_FEHER, "Név: {ff0000}%s{ffffff} Lenyomat:{ff0000}%s{ffffff}", JatekosNev(playerid), PlayerInfo[playerid][pUjjlenyomat]);
  		}
		    
		
		Cselekves(kikerte, "odanyújtja a PDA-t valakinek");
		Cselekves(playerid, "ujjlenyomatot adott");
		
		SFM(kikerte, COL_FEHER, "PDA: Ujjlenyomatvétel sikeres! Lenyomat:{ff0000}%s{ffffff}", PlayerInfo[playerid][pUjjlenyomat]);
     	Kerelem[kikerte][KERELEM_UJJLENYOMAT] = NINCS;
     	Kerelem[playerid][KERELEM_UJJLENYOMAT] = NINCS;
     	
     	return true;
	}

	if(!strcmp(params, "szondázás", true) || !strcmp(params, "szondazas", true))
	{
		if(Szondaz[playerid] == -1) return SCM(playerid,COL_LRED,"Senki sem szondázna meg!");
		if(GetPlayerDrunkLevel(playerid) == 0)
		{
			SendClientMessage(Szondaz[playerid], COLOR_WHITE, "DIAGNÓZIS: Az illetõ {ff0000}nem{ffffff} fogyasztott alkoholt.");
			return true;
		}
		else
		{
			new text[64];
			format(text, sizeof(text), "DIAGNÓZIS: Az illetõ véralkohol szintje {ff0000}magas{ffffff}.");
			SendClientMessage(Szondaz[playerid], COLOR_WHITE, text);
		}
		Szondaz[Szondaz[playerid]] = NINCS;
		Szondaz[playerid] = NINCS;
		return true;
	}
	if(!strcmp(params, "Motozás", true) || !strcmp(params, "motozas", true))
	{
		if(Megmotozna[playerid] == -1) return SCM(playerid,COL_LRED,"Senki sem motozna meg!");
		OnePlayAnim(Megmotozna[playerid],"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
		OnePlayAnim(Megmotozna[playerid],"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);

		new bool:van;
		SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "=====[ "#COL_MKEK"Az illetõnél lévõ tárgyak"#COL_FEHER" ]=====");

		if(PlayerInfo[Megmotozna[playerid]][pMarihuana] > 0 || PlayerInfo[Megmotozna[playerid]][pKokain] > 0 || PlayerInfo[Megmotozna[playerid]][pHeroin] > 0)
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Némi drog");
			van = true;
		}

		if(PlayerInfo[Megmotozna[playerid]][pMaterial]> 0)
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Materiál");
			van = true;
		}
		if(PlayerInfo[Megmotozna[playerid]][pCuccok][BL_C4] > 0)
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "C4/Bomba");
			van = true;
		}
		if(PlayerInfo[Megmotozna[playerid]][pVas]> 0)
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Néhány kilogramm vas");
			van = true;
		}
		if(PlayerInfo[Megmotozna[playerid]][pCuccok][BL_TELEFON])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Mobiltelefon");
			van = true;
		}
		if(PlayerInfo[playerid][pCuccok][ BL_MP3 ])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "MP3 lejátszó");
			van = true;
		}
		if(PlayerInfo[Megmotozna[playerid]][pCuccok][BL_GPS])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "GPS lokátor");
			van = true;
		}
		if(PlayerInfo[Megmotozna[playerid]][ppenz] > 0)
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Némi készpénz");
			van = true;
		}
		if(PlayerInfo[Megmotozna[playerid]][pCuccok][BL_LAMPA])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Lámpa");
			van = true;
		}

		if(PlayerInfo[Megmotozna[playerid]][pDrogAnyag][0])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Marihuána mag");
			van = true;
		}

		if(PlayerInfo[playerid][pCuccok][ BL_BONG ])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Bong");
			van = true;
		}

		if(PlayerInfo[playerid][pCuccok][ BL_PIPA ])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Pipa");
			van = true;
		}

		new i = -1, num = 0, fegyverek[128] = "Fegyver(ek):";
		for(;++i < 13;)
		{
			if(PlayerInfo[playerid][pFegyverek][i] && PlayerInfo[playerid][pToltenyek][i])
			{
				format(fegyverek, sizeof(fegyverek), "%s %s,", fegyverek, aWeaponNames[PlayerInfo[playerid][pFegyverek][i]]);
				num++;
			}
		}

		if(num)
		{
			fegyverek[strlen(fegyverek) - 1] = '\0';
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, fegyverek);
			van = true;
		}

		if(!van)
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Nincs nála semmi értéktárgy..");

		Cselekves(Megmotozna[playerid], "megmotozott valakit..");
		Megmotozna[Megmotozna[playerid]] = NINCS;
		Megmotozna[playerid] = NINCS;
		return 1;
	}
	if(!strcmp(params, "kézfogás", true) || !strcmp(params, "kezfogas", true))
	{
		if(Kezetfogna[playerid] == -1) return SCM(playerid,COL_LRED,"Senki nem fogna veled kezet!");
		new p = Kezetfogna[playerid];
		if(p == INVALID_PLAYER_ID)
		{
			SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
			return 1;
		}
		if(GetPlayerDistanceFromPlayer(playerid,p) > 1) return SCM(playerid,COL_LRED, "Nincs a közeledben a játékos!");
		switch(KezetfognaStilus[playerid])
		{
			case 1:
			{
				OnePlayAnim(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
				OnePlayAnim(p,"GANGS","hndshkba",4.0,0,0,0,0,0);
			}
			case 2:
			{
				OnePlayAnim(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
				OnePlayAnim(p,"GANGS","hndshkda",4.0,0,0,0,0,0);
			}
			case 3:
			{
				OnePlayAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
				OnePlayAnim(p,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
			}
		}
		Cselekves(playerid, "kezetfogott valakivel.", 1);
		Kezetfogna[p] = NINCS;
		Kezetfogna[playerid] = NINCS;
		KezetfognaStilus[p] = NINCS;
		KezetfognaStilus[playerid] = NINCS;
		return 1;
	}
	if(!strcmp(params, "számla", true) || !strcmp(params, "szamla", true))
	{
		if(PlayerInfo[playerid][pBirsag][0] == NINCS || !PlayerInfo[playerid][pBirsag][1] || PlayerInfo[playerid][pBirsag][2] != 1)
				return SCM(playerid, COL_LRED, "Neked még nem nyújtottak át számlát!");

		new jatekos = PlayerInfo[playerid][pBirsag][0];

		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs a közeledben aki a számlát odaadta!");

		if(PlayerInfo[playerid][pBszPenz] < PlayerInfo[playerid][pBirsag][1])
		{
			SCM(playerid, COL_LRED, "Nincs nálad elegendõ készpénz, hogy ezt ki tudd fizetni!");
			SFM(jatekos, COL_LRED, "%s nem rendelkezik elegendõ készpénzzel, hogy ezt ki tudja fizetni!", JatekosNev(playerid, true));
			goto osszeg_nullaz;
		}

		PlayerInfo[playerid][pBszPenz] -= PlayerInfo[playerid][pBirsag][1];
		if(PlayerInfo[jatekos][pFrakcio] == FRAKCIO_SZERELO)
		{
			FInfo[ PlayerInfo[jatekos][pFrakcio] ][fPenz] += PlayerInfo[playerid][pBirsag][1];
		}
		else
		{
			PlayerInfo[jatekos][pBszPenz] += PlayerInfo[playerid][pBirsag][1];
		}
		SFM(playerid, COL_VZOLD, "Számla kifizetve! Összeg: "#COL_MKEK"%s"#COL_FEHER"$", FN(PlayerInfo[playerid][pBirsag][1], 0, ','));
		SFM(jatekos, COL_VZOLD, "%s kifizette a számlát! Összeg: "#COL_MKEK"%s"#COL_FEHER"$ átutalva a számládra.",JatekosNev(playerid, true), FN(PlayerInfo[playerid][pBirsag][1], 0, ','));

		osszeg_nullaz:
		PlayerInfo[playerid][pBirsag][0] = NINCS;
		PlayerInfo[playerid][pBirsag][1] = 0;
		PlayerInfo[playerid][pBirsag][2] = 0;
		return true;
	}
	else if(!strcmp(params, "házasság", true) || !strcmp(params, "hazassag", true))
	{
		if(Hazassag[playerid] == -1) return SCM(playerid,COL_LRED,"Senki nem kérte meg a kezed!");
		new kivel = Hazassag[Hazassag[playerid]];
		if(!IsPlayerConnected(kivel)) return 1;
		if(GetPlayerDistanceFromPlayer(playerid, kivel) > 4)
		{
			return SCM(playerid, COL_LRED, "Nincs a közeledben!!");
		}
		SendFormatMessage(playerid, COLOR_WHITE, "Pap: %s, valóban %st akarod férjednek? Örökké szeretned kell, es hûséget kell fogadnod neki!", JatekosNev(playerid), JatekosNev(kivel));
		SendClientMessage(playerid, COLOR_WHITE, "Ha igen, ird be, hogy 'igen', bármi mást írsz be, azzal visszautasítod!");
		Beirhatjahogyigen[playerid]  = 1;
		return true;
	}
	else if(!strcmp(params, "bírság", true) || !strcmp(params, "birsag", true))
	{
		if(PlayerInfo[playerid][pBirsag][0] == NINCS || !PlayerInfo[playerid][pBirsag][1] || PlayerInfo[playerid][pBirsag][2] != 2)
			return SCM(playerid, COL_LRED, "Neked még nem nyújtottak át bírságot!");

		new jatekos = PlayerInfo[playerid][pBirsag][0];

		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs a közeledben aki a bírságot kiszabta!");

		GiveMoney(playerid,-PlayerInfo[playerid][pBirsag][1]);
		FInfo[ PlayerInfo[jatekos][pFrakcio] ][fPenz] += PlayerInfo[playerid][pBirsag][1];
		SFM(playerid, COL_VZOLD, "Bírság kifizetve! Összeg: "#COL_MKEK"%s"#COL_FEHER"$", FN(PlayerInfo[playerid][pBirsag][1], 0, ','));
		SFM(jatekos, COL_VZOLD, "%s kifizette a helyszíni bírságot! Összeg: "#COL_MKEK"%s"#COL_FEHER"$ átutalva a rendõrségnek.",JatekosNev(playerid, true), FN(PlayerInfo[playerid][pBirsag][1], 0, ','));

		PlayerInfo[playerid][pBirsag][0] = NINCS;
		PlayerInfo[playerid][pBirsag][1] = 0;
	}
	else if(!strcmp(params, "live", true))
	{
		new playerb = LiveBy[playerid];
		if(playerb == -1) return SendClientMessage(playerid, COLOR_GREY, "Nem ajánlott senki neked élõközvetítést.");
		LiveBy[playerid] = -1;
		LiveRequest[playerb] = 0;
		Live[playerid] = 1;
		Live[playerb] = 1;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Adásba kerültél, ha a chatbe írsz azt mindenki látja.");
		SendClientMessage(playerb, COLOR_LIGHTBLUE, "Adásba kerültél, ha a chatbe írsz azt mindenki látja. (/live) a konferencia lezáráshoz.");
	}
	else if(!strcmp(params, "csere", true))
	{
		if(PlayerInfo[playerid][pProcess][0] != PR_CSERE_HAZ && PlayerInfo[playerid][pProcess][0] != PR_CSERE_JARMU)
			return SCM(playerid, COL_LRED, "Még senki se kínált fel cserét a számodra!");

		new jatekos = PlayerInfo[playerid][pProcess][1];

		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !IsPlayerConnected(jatekos))
			return SCM(playerid, COL_LRED, "A másik fél nincs a közeledben!");

		if(PlayerInfo[jatekos][pProcess][0] != PR_CSERE_HAZ && PlayerInfo[jatekos][pProcess][0] != PR_CSERE_JARMU)
			return SCM(playerid, COL_LRED, "Hiba történt! Ez a játékos nem kínált fel számodra cserét!");

		if(PlayerInfo[playerid][pBszPenz] < 550)
		{
			SCM(playerid, COL_LRED, "Az átiratás költsége "#COL_MKEK"550"#COL_FEHER"$ neked nincs ennyi a bankszámládon!");
			SFM(jatekos, COL_LRED, "Az átiratás költsége "#COL_MKEK"550"#COL_FEHER"$, %s nem rendelkezik ekkora összeggel!", JatekosNev(playerid, true));
			goto PR_HJ_NULL;
		}

		switch(PlayerInfo[playerid][pProcess][0])
		{
			case PR_CSERE_HAZ:
			{
				new i = NINCS;
				for(;++i < MAX_HAZ_JARMU;)
				{
					if(PlayerInfo[playerid][pHazKulcs][i] == PlayerInfo[playerid][pProcess][3])
						PlayerInfo[playerid][pHazKulcs][i] = PlayerInfo[playerid][pProcess][2];

					if(PlayerInfo[jatekos][pHazKulcs][i] == PlayerInfo[playerid][pProcess][2])
						PlayerInfo[jatekos][pHazKulcs][i] = PlayerInfo[playerid][pProcess][3];
				}

				HazInfo[ PlayerInfo[playerid][pProcess][2] ][hTulajID] = PlayerInfo[playerid][pID];
				HazInfo[ PlayerInfo[playerid][pProcess][3] ][hTulajID] = PlayerInfo[jatekos][pID];

				doQuery("UPDATE `"#MYSQL_HAZ_TABLA"` SET TulajID = '%d', tulaj = '%s' WHERE id = '%d'", PlayerInfo[playerid][pID], JatekosNev(playerid, false, true), PlayerInfo[playerid][pProcess][2]);
				doQuery("UPDATE `"#MYSQL_HAZ_TABLA"` SET TulajID = '%d', tulaj = '%s' WHERE id = '%d'", PlayerInfo[jatekos][pID], JatekosNev(jatekos, false, true), PlayerInfo[playerid][pProcess][3]);

				Adat_Update( playerid, ADAT_HAZ_EX );
				Adat_Update( playerid, ADAT_HAZ_EX );

				SCM(playerid, COL_VZOLD, "Házaitok sikeresen elcseréve! Az átiratás össszege "#COL_MKEK"550"#COL_FEHER"$ levonva a bankszámládról!");
				SCM(jatekos, COL_VZOLD, "Házaitok sikeresen elcserélve!");
			}
			case PR_CSERE_JARMU:
			{
				new i = NINCS;
				for(;++i < MAX_HAZ_JARMU;)
				{
					if(PlayerInfo[playerid][pJarmuKulcs][i] == PlayerInfo[playerid][pProcess][3])
						PlayerInfo[playerid][pJarmuKulcs][i] = PlayerInfo[playerid][pProcess][2];

					if(PlayerInfo[jatekos][pJarmuKulcs][i] == PlayerInfo[playerid][pProcess][2])
						PlayerInfo[jatekos][pJarmuKulcs][i] = PlayerInfo[playerid][pProcess][3];
				}

				vInfo[ PlayerInfo[playerid][pProcess][2] ][vTulajID] = PlayerInfo[playerid][pID];
				vInfo[ PlayerInfo[playerid][pProcess][3] ][vTulajID] = PlayerInfo[jatekos][pID];

				doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET TulajID = '%d', Tulaj = '%s' WHERE ID = '%d'", PlayerInfo[playerid][pID], JatekosNev(playerid, false, true), PlayerInfo[playerid][pProcess][2]);
				doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET TulajID = '%d', Tulaj = '%s' WHERE ID = '%d'", PlayerInfo[jatekos][pID], JatekosNev(jatekos, false, true), PlayerInfo[playerid][pProcess][3]);

				Adat_Update( playerid, ADAT_JARMU_EX );
				Adat_Update( playerid, ADAT_JARMU_EX );

				SCM(playerid, COL_VZOLD, "Jármûveitek sikeresen elcseréve! Az átiratás össszege "#COL_MKEK"550"#COL_FEHER"$ levonva a bankszámládról!");
				SCM(jatekos, COL_VZOLD, "Jármûveitek sikeresen elcserélve!");
			}
		}


		PlayerInfo[playerid][pBszPenz] -= 550;
		PlayerInfo[jatekos][pBszPenz] -= 550;
		FInfo[ FRAKCIO_KORMANY ][fPenz] += 1000;

		PR_HJ_NULL:
		PlayerInfo[jatekos][pProcess][0] = 0;
		PlayerInfo[playerid][pProcess][0] = 0;
	}
	else if(!strcmp(params, "szerzõdés", true) || !strcmp(params, "szerzodes", true))
	{
		if(PlayerInfo[playerid][pProcess][0] != PR_ELAD_HAZ)
			return SCM(playerid, COL_LRED, "Senki sem kínált fel szmodra adásvételi szerzõdést!");

		if(PlayerInfo[playerid][pBszPenz] < PlayerInfo[playerid][pProcess][2])
			return SCM(playerid, COL_LRED, "Nincs elegendõ pénz a bankszámládon, hogy ezt megvehesd!");

		if(!IsPlayerConnected(PlayerInfo[playerid][pProcess][1]) || HazInfo[PlayerInfo[playerid][pProcess][3]][hTulajID] != PlayerInfo[PlayerInfo[playerid][pProcess][1]][pID])
		{
			SCM(playerid, COL_LRED, "Egy hiba történt! A másik fél nincs fent a szerveren!");
			PlayerInfo[playerid][pProcess][0] = 0;
			PlayerInfo[playerid][pProcess][1] = NINCS;
			PlayerInfo[playerid][pProcess][2] = 0;
			return 1;
		}


		new ki = PlayerInfo[playerid][pProcess][1],mennyit = PlayerInfo[playerid][pProcess][2],melyik = PlayerInfo[playerid][pProcess][3];

		PlayerInfo[playerid][pBszPenz] -= mennyit;
		PlayerInfo[ki][pBszPenz] += mennyit;
		HazInfo[melyik][hTulajID] = PlayerInfo[playerid][pID];
		Adat_Update( playerid, ADAT_HAZ );
		SFM(playerid,COL_MKEK,"Megvetted a házat %d $ ért",mennyit);
		SFM(ki,COL_MKEK,"Megvették tõlled a házad %d $ ért",mennyit);
		PlayerInfo[playerid][pProcess][0] = 0;
		PlayerInfo[playerid][pProcess][1] = NINCS;
		PlayerInfo[playerid][pProcess][2] = 0;
	}
	return true;
}

CMD:katonasag(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	//if(IsPlayerInRangeOfPoint(playerid, 25.0, Race[i][rPosx][0],  Race[i][rPosy][0],  Race[i][rPosz][0]);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /katonasag [ Engedélyez, Felvesz ]");

	if(!strcmp(params, "engedelyez", true) || !strcmp(params, "engedélyez", true))
	{
	    // ez az a parancs, amit krook (Daniel Risk) sosem fog használni
		if(PlayerInfo[playerid][pLeader] == 0)
			return SCM(playerid, COL_LRED, "Csak leader!!");

		new dstr[1024], tmp[128], i = NINCS;
		for(;++i < sizeof(Katona_Engedelyek);)
		{
			if(Katona_Engedelyek[i][1][0]) format(tmp, sizeof(tmp), "\n"#COL_VZOLD"%s",Katona_Engedelyek[i][0]);
			else format(tmp, sizeof(tmp), "\n"#COL_PIROS"%s", Katona_Engedelyek[i][0]);

			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid, DIALOG_KATONA_ENGEDELY, DIALOG_STYLE_LIST, "Felszerelések", dstr, "Végrehajt", "Mégse");
	}
	else if(!strcmp(params, "felvesz", true))
	{
		new dstr[1024], tmp[128], i = NINCS;
		for(;++i < sizeof(Katona_Engedelyek);)
		{
			if(Katona_Engedelyek[i][1][0]) format(tmp, sizeof(tmp), "\n"#COL_MKEK"%s",Katona_Engedelyek[i][0]);
			else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s", Katona_Engedelyek[i][0]);

			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid, DIALOG_KATONA_FELVESZ, DIALOG_STYLE_LIST, "Felszerelések", dstr, "Felvesz", "Mégse");
	}
	return true;
}
CMD:fbi(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 222.598,183.589,1003.031))
	{
		if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
		{
			PlayerInfo[playerid][pCP] = CP_GPS;
			SetPlayerCheckpoint(playerid, 222.598,183.589,1003.031, 5.0);
		}
		SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
		return true;
	}

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /fbi [ Engedélyez, Felvesz ]");

	if(!strcmp(params, "engedelyez", true) || !strcmp(params, "engedélyez", true))
	{
		if(PlayerInfo[playerid][pLeader] == 0)
			return SCM(playerid, COL_LRED, "Csak leader!!");

		new dstr[1024], tmp[128], i = NINCS;
		for(;++i < sizeof(FBI_Engedely);)
		{
			if(Katona_Engedelyek[i][1][0]) format(tmp, sizeof(tmp), "\n{ffffff}%s",FBI_Engedely[i][0]);
			else format(tmp, sizeof(tmp), "\n"#COL_PIROS"%s", FBI_Engedely[i][0]);

			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid, DIALOG_FBI_ENGEDELY, DIALOG_STYLE_LIST, "Felszerelések", dstr, "Végrehajt", "Mégse");
	}
	else if(!strcmp(params, "felvesz", true))
	{
		new dstr[1024], tmp[128], i = NINCS;
		for(;++i < sizeof(FBI_Engedely);)
		{
			if(FBI_Engedely[i][1][0]) format(tmp, sizeof(tmp), "\n"#COL_MKEK"%s",FBI_Engedely[i][0]);
			else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s", FBI_Engedely[i][0]);

			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid, DIALOG_FBI_FELVESZ, DIALOG_STYLE_LIST, "Felszerelések", dstr, "Felvesz", "Mégse");
	}
	return true;
}

CMD:pee(playerid, params[])
{
	#pragma unused params
	if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid, COL_LRED, "Kocsiban?!");
	if(PlayerInfo[playerid][pVizelet] < 10.0)	return SCM(playerid, COL_LRED, "Még nem kell ürítened!");

	if(PlayerInfo[playerid][pPisil] == true)
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	else
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
		PlayerInfo[playerid][pPisil] = true;
	}
	return true;
}

CMD:menu(playerid, params[])
{
	#pragma unused params
	if(KozeliObject( playerid, 2 ) == NINCS)
		return SCM(playerid, COL_LRED, "Nincs a közeledben HotDog stand!");

	new dstr[1024], tmp[128], i = NINCS;
	for(;++i < sizeof(Etel_Menu);)
	{
		if(KPegyenleg(playerid) >= Etel_Menu[i][1][0]) format(tmp, sizeof(tmp), "\n"#COL_VZOLD"%s\t[ %d$ ]", Etel_Menu[i][0], Etel_Menu[i][1][0]);
		else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s\t[ %d$ ]", Etel_Menu[i][0], Etel_Menu[i][1][0]);

		strcat(dstr, tmp, sizeof(dstr));
	}
	ShowPlayerDialog(playerid, DIALOG_HOTDOG_MENU, DIALOG_STYLE_LIST, "Menü", dstr, "Megvesz", "Mégse");

	return true;
}

CMD:cuff(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && !IsHitman(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos = (isnull(params) ? GetClosestPlayer(playerid) : sscanf(params, "u", jatekos));
	if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 2) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "A közeledben nincs senki! Lehetõségek: /bilincs [Játékos]");
	    
	if(playerid == jatekos)
		return SCM(playerid, COL_LRED, "Magadat nem bilincselheted meg!");

	if(!PlayerInfo[jatekos][pBilincselve])
	{
		if(IsPlayerInAnyVehicle(playerid))	return SCM(playerid, COL_LRED, "Jármûben nem bilincselhetsz!");
		if(GetPlayerWeapon(jatekos))	return SCM(playerid, COL_LRED, "Ha van a kezébe fegyver nem bilincselheted meg!");
		if(Bejelzett[jatekos] > 0) 	Bejelzett[jatekos] = 0; SetPlayerColor(jatekos,COLOR_INVISIBLE);
		SCM(jatekos, COL_LRED, "Megbilincseltek!");
		SCM(playerid, COL_SARG, "Megbilincselted!");
		Cselekves(playerid, "megbilincseli a célszemélyt.", 0);
		GameTextForPlayer(jatekos, "~r~Megbilincseltek", 2500, 3);
		Bilincs(jatekos, 2);
		SetPlayerSpecialAction(jatekos, SPECIAL_ACTION_CUFFED);

	} else {

		SCM(jatekos, COL_SARG, "Levették rólad a bilincseket!");
		SCM(playerid, COL_SARG, "Levetted a bilincsét!");
		Bilincs(jatekos, 0);
		if(PlayerInfo[playerid][pVisz] != NINCS)   PlayerInfo[playerid][pVisz] = NINCS; SCM(playerid,COL_RSARG,"(( /visz kikapcsolva! ))");
	}

	return true;
}

CMD:berak(playerid, params[])
{
	new ules, jatekos;
	if(sscanf(params, "ud", jatekos, ules))
		return SCM(playerid, COL_MKEK, "Használat: /berak [Játékos] [Ülés(1-3)]");

	if(ules < 1 || ules > 3)
		return SCM(playerid, COL_LRED, "Hibás ülés! 1 - 3 lehet!");

	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(jatekos == playerid)
		return SCM(playerid, COL_VZOLD, "Cicaborsó, magadat nem tudod berakni :D");

	if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 5)
		return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

	if(IsPlayerInAnyVehicle(jatekos))
		return SCM(playerid, COL_LRED, "A játékos jelenleg is jármûben van!");

	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben ülsz, így nem tudod berakni!");

	if(PlayerInfo[playerid][pBilincselve])
		return SCM(playerid, COL_LRED, "Így nem hiszem, hogy sikerülne...");

	if(!PlayerInfo[jatekos][pBilincselve] && !PlayerInfo[jatekos][pAnimban][0] && !PlayerInfo[jatekos][pLeutve])
		return SCM(playerid, COL_LRED, "Nincs megbilincselve vagy leütve, így nem tudod berakni...");

	new car = GetClosestVehicle(playerid);
	if(GetDistanceToVehicle(playerid, car) > 5.0)
		return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

	if(IsABicikli(vInfo[JarmuID(car, playerid)][vModel]))
		return SCM(playerid, COL_LRED, "Cicaborsó, biciklin mégis, hogy akarsz egyensúlyozni? :D");

	ClearAnimations(jatekos);
	if(PlayerInfo[jatekos][pBilincselve])
		TogglePlayerControllable(jatekos, false);

	PutPlayerInVehicle(jatekos, car, ules);
	Cselekves(playerid, "berakott valakit a jármûbe");
	SCM(playerid, COL_VZOLD, "Beraktad a jármûbe!");
	return true;
}

CMD:visz(playerid, params[])
{
	new jatekos;
	if(isnull(params))
		jatekos = GetClosestPlayer(playerid);
	else sscanf(params, "u", jatekos);

	if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 2) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos)
		return SCM(playerid, COL_LRED, "A közeledben nincs senki!");

	if(PlayerInfo[jatekos][pjail] && PlayerInfo[jatekos][pjail] != 1)
		return SCM(playerid, COL_LRED, "Persze... Nem fogod rácson keresztül!");

	if(PlayerInfo[jatekos][pBilincselve])
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
			return SCM(playerid, COL_LRED, "Ez a játékos bilincsben van, csak rendõr vagy katona viheti el!");

	if(!PlayerInfo[jatekos][pBilincselve] && !PlayerInfo[jatekos][pAnimban][0] && !PlayerInfo[jatekos][pLeutve])
		return SCM(playerid, COL_LRED, "Ez a játékos nincs megbilincselve/leütve/megsérülve!");

	if(PlayerInfo[jatekos][pBilincselve])
		TogglePlayerControllable(jatekos, false);

	if(PlayerInfo[playerid][pVisz] == NINCS)
	{
		PlayerInfo[playerid][pVisz] = jatekos;
		SCM(playerid, COL_MKEK, "Megfogtad, most már viheted..");

	} else {

		PlayerInfo[playerid][pVisz] = NINCS;
		SCM(playerid, COL_MKEK, "Elengedted..");
	}

	return true;
}
stock Cellanal(playerid)
{
    if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 10)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 215.4485,114.8402,999.0156)) return FRAKCIO_LSPD;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 219.3819,114.5232,999.0156)) return FRAKCIO_LSPD;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 223.4443,114.5498,999.0156)) return FRAKCIO_LSPD;
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 227.3065,114.4797,999.0156)) return FRAKCIO_LSPD;
		
	}
	else if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 3)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 10.0, 198.2061,178.4478,1003.0234)) return FRAKCIO_FBI;
	}
	
	
	return NINCS;
}
CMD:arrest(playerid,params[])
{
	new ido,indok[50],birsag;
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos = GetClosestPlayer(playerid);
	if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 3) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || Bortonben(jatekos))
		return SCM(playerid, COL_LRED, "A közeledben nincs senki!");

    if(PlayerInfo[jatekos][pBilincselve] == 0)
        return SCM(playerid,COL_VKEK,"Ez a játékos nincs megbilincselve!");

	new cella = Cellanal(playerid);
    if(cella == NINCS)
        return SCM(playerid,COL_VKEK,"Nem vagy a cellák közelében!");

	if(PlayerInfo[playerid][pFrakcio] != cella && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
	    return SFM(playerid,COL_VKEK,"Ez a(z) %s cellája, te ide nem zárhatsz be senkit!", FInfo[ cella ][fNev]);
	    
	if(sscanf(params,"dds[50]",ido,birsag,indok))
	    return SCM(playerid,COL_MKEK,"Használat: /arrest [ idõ(percben) ] [ Bírság ] [ Indok ]");

	if(ido < 1 || ido > 60)
		return SCM(playerid,COL_MKEK,"Az idõ minmimum 1perc, és maximum 1 óra lehet!");

    
	new b = fBortonID(cella);
	if(b != NINCS)
	{
	    Bilincs(jatekos, 0);
	    PlayerInfo[jatekos][pVisz] = NINCS;
		PlayerInfo[jatekos][pjail] = 2;
		PlayerInfo[jatekos][ppenz] -= birsag;
		FInfo[ cella ][fPenz] += birsag;
		PlayerInfo[jatekos][pJailIdo] = ( ido * 60 );
		BortonInfo(jatekos, JatekosNev(playerid), indok);
		SendFormatMessageToAll(COLOR_YELLOW, "<< %s letartóztatta %s-t, vád: %s >>",JatekosNev(playerid),JatekosNev(jatekos),indok);
		Korozes_Torol(jatekos, playerid, "Letartóztatva.");
		Borton(jatekos, 2);
 	}
	else
	    SCM(playerid,COL_MKEK,"Script hiba, jelentsd a fórumon!");

	    
	return 1;
}
stock TuzoltoKocsiFelszereles(vehicleid)
{
	new vid = JarmuID(vehicleid, NINCS);
	
	vInfo[vid][vFegyver][0] = 42;
	vInfo[vid][vTolteny][0] = 10000;
	
	vInfo[vid][vFegyver][1] = 42;
	vInfo[vid][vTolteny][1] = 10000;
	
	vInfo[vid][vFegyver][2] = 42;
	vInfo[vid][vTolteny][2] = 10000;
	
	vInfo[vid][vFegyver][3] = 42;
	vInfo[vid][vTolteny][3] = 10000;
	
	vInfo[vid][vFegyver][4] = 9;
	vInfo[vid][vTolteny][4] = 1;
		
}
CMD:bepakol(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /bepakol [ Vas / Materiál / Heroin / Kokain / Marihuána / Fegyver ]");

	new car = GetClosestVehicle(playerid);
	if(GetDistanceToVehicle(playerid, car) > 5.0)
		return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
		

	if(PlayerInfo[playerid][pFoglalt] == true)
	{
		SCM(playerid,COL_LRED,"Várj 1 picit!");
		return 1;
	}

	new param[24], db = 0, vid = JarmuID(car, playerid), ok = true, i = NINCS;

	for(;++i < sizeof(PakolhatoJarmu);) {
		if(PakolhatoJarmu[i] == vInfo[ vid ][vModel]) {
			ok = false;
			break;
		}
	}
	
	if(!IsAKocsi(vInfo[vid][vModel]))
		return SCM(playerid, COL_LRED, "Ennek a jármûnek nincs csomagtartója!");

	if(ok)
		return SCM(playerid, COL_LRED, "Ebbe a jármûbe nem pakolhatsz!");

	sscanf(params, "s[24]D(0){}", param, db);
	if(db > MAX_ERTEK || db < 0)
		return SCM(playerid, COL_LRED, "Hibás érték!");

	if(vInfo[vid][vZarva])
		return SCM(playerid, COL_LRED, "Ez a jármû zárva van! Így nem tudsz belepakolni.");

	if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 0)
		return SCM(playerid, COL_LRED, "A jármû csomagtartója zárva van! Így nem tudsz belepakolni.");


	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben vagy, így nem tudsz belepakolni!");


	if(!strcmp(param, "fegyver", false))
	{
	    if(PlayerInfo[playerid][pDuty][0] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND)
				return SCM(playerid, COL_LRED, "Szolgálatban nem használhatod!");
		if(!PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Nincs a kezedben fegyver!");
			
		if((PlayerInfo[playerid][pFegyver] == 9) && IsJob(playerid, MUNKA_FAVAGO))
		    return SeeKick(playerid,"Bugot akarsz kihasználni?[2]");
		    
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol fegyver [Slot(1-5)]");

		if(db > 5 || db < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 5!");

		PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
		if(vInfo[vid][vFegyver][db - 1] != 0 || vInfo[vid][vTolteny][db - 1] != 0)
			return SCM(playerid, COL_LRED, "Ezen a sloton már van fegyver!");

		new wid 	=	GetPlayerWeapon(playerid);
		new ammo	=	GetPlayerAmmo(playerid);

		if(!wid || !ammo)
		{
			PlayerInfo[playerid][pFegyverek][ aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ] ] = 0;
			PlayerInfo[playerid][pToltenyek][ aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ] ] = 0;
			
			Fegyver(playerid, false);
			SCM(playerid, COL_LRED, "Egy hiba történt!");
			return true;
		}

		SFM(playerid, COL_VZOLD, "Bepakoltál egy "#COL_MKEK"%s"#COL_FEHER" típusú fegyvert %d tölténnyel a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", aWeaponNames[wid], ammo, car, vid);
		Cselekves(playerid, "bepakolt egy fegyvert az egyik jármûbe", 1);

		vInfo[vid][vFegyver][db - 1] = wid;
		vInfo[vid][vTolteny][db - 1] = ammo;
		vUpdate(vid, vuFegyver);

		PlayerInfo[playerid][pFegyverek][ aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ] ] = 0;
		PlayerInfo[playerid][pToltenyek][ aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ] ] = 0;
		
		Fegyver(playerid, false);
	}
	else if(!strcmp(param, "vas", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol vas [Mennyit]");

		if(PlayerInfo[playerid][pVas] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi vas!");

		if((vInfo[vid][vVas] + db) > J_MAX_VAS)
			return SCM(playerid, COL_LRED, "Ennyit nem tudsz bepakolni a jármûbe! Maximum "#J_MAX_VAS"kg lehet!");

		PlayerInfo[playerid][pVas] -= db;
		vInfo[vid][vVas] += db;
		vUpdate(vid, vuVas);
		SFM(playerid, COL_VZOLD, "Bepakoltál "#COL_MKEK"%s"#COL_FEHER"kg vasat a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", FN(db, 0, ','), car, vid);
		Cselekves(playerid, "bepakolt némi vasat az egyik jármûbe", 1);
	}
	else if(!strcmp(param, "material", false) || !strcmp(param, "materiál", false) || !strcmp(param, "mati", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol materiál [Mennyit]");

		if(PlayerInfo[playerid][pMaterial] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi materiál!");

		if((vInfo[vid][vMaterial] + db) > J_MAX_MATERIAL)
			return SCM(playerid, COL_LRED, "Ennyit nem tudsz bepakolni a jármûbe! Maximum "#J_MAX_MATERIAL"db lehet!");

		PlayerInfo[playerid][pMaterial] -= db;
		vInfo[vid][vMaterial] += db;
		vUpdate(vid, vuMaterial);
		SFM(playerid, COL_VZOLD, "Bepakoltál "#COL_MKEK"%s"#COL_FEHER"db materiált a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", FN(db, 0, ','), car, vid);
		Cselekves(playerid, "bepakolt némi materiált az egyik jármûbe", 1);
	}
	else if(!strcmp(param, "heroin", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol heroin [Mennyit]");

		if(PlayerInfo[playerid][pHeroin] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi heroin!");

		if((vInfo[vid][vHeroin] + db) > J_MAX_HEROIN)
			return SCM(playerid, COL_LRED, "Ennyit nem tudsz bepakolni a jármûbe! Maximum "#J_MAX_HEROIN"g lehet!");

		PlayerInfo[playerid][pHeroin] -= db;
		vInfo[vid][vHeroin] += db;
		vUpdate(vid, vuHeroin);
		SFM(playerid, COL_VZOLD, "Bepakoltál "#COL_MKEK"%s"#COL_FEHER"g heroint a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", FN(db, 0, ','), car, vid);
		Cselekves(playerid, "bepakolt némi heroint az egyik jármûbe", 1);
	}
	else if(!strcmp(param, "kokain", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol kokain [Mennyit]");

		if(PlayerInfo[playerid][pKokain] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi kokain!");

		if((vInfo[vid][vKokain] + db) > J_MAX_KOKAIN)
			return SCM(playerid, COL_LRED, "Ennyit nem tudsz bepakolni a jármûbe! Maximum "#J_MAX_KOKAIN"g lehet!");

		PlayerInfo[playerid][pKokain] -= db;
		vInfo[vid][vKokain] += db;
		vUpdate(vid, vuKokain);
		SFM(playerid, COL_VZOLD, "Bepakoltál "#COL_MKEK"%s"#COL_FEHER"g kokaint a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", FN(db, 0, ','), car, vid);
		Cselekves(playerid, "bepakolt némi kokaint az egyik jármûbe", 1);
	}
	else if(!strcmp(param, "marihuána", false) || !strcmp(param, "marihuana", false) || !strcmp(param, "mariska", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol marihuána [Mennyit]");

		if(PlayerInfo[playerid][pMarihuana] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi marihuána!");

		if((vInfo[vid][vMarihuana] + db) > J_MAX_MARIHUANA)
			return SCM(playerid, COL_LRED, "Ennyit nem tudsz bepakolni a jármûbe! Maximum "#J_MAX_MARIHUANA"g lehet!");

		PlayerInfo[playerid][pMarihuana] -= db;
		vInfo[vid][vMarihuana] += db;
		vUpdate(vid, vuMarihuana);
		SFM(playerid, COL_VZOLD, "Bepakoltál "#COL_MKEK"%s"#COL_FEHER"g marihuánát a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", FN(db, 0, ','), car, vid);
		Cselekves(playerid, "bepakolt némi marihuánát az egyik jármûbe", 1);
	}
	return true;
}

CMD:kipakol(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /kipakol [ Vas / Materiál / Heroin / Kokain / Marihuána / Fegyver ]");

	new car = GetClosestVehicle(playerid);
	if(GetDistanceToVehicle(playerid, car) > 5.0)
		return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

	new param[24], db = 0, vid = JarmuID(car, playerid);
	sscanf(params, "s[24]D(0){}", param, db);
	if(db > MAX_ERTEK || db < 0)
		return SCM(playerid, COL_LRED, "Hibás érték!");

	if(vInfo[vid][vZarva])
		return SCM(playerid, COL_LRED, "Ez a jármû zárva van! Így nem tudsz kipakolni semmit se.");
		

	if(!IsAKocsi(vInfo[vid][vModel]))
		return SCM(playerid, COL_LRED, "Ennek a jármûnek nincs csomagtartója!");

	if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 0)
		return SCM(playerid, COL_LRED, "A jármû csomagtartója zárva van! Így nem tudsz kipakolni semmit se.");

	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben vagy, így nem tudsz kipakolni semmit se!");

	if(!strcmp(param, "fegyver", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol fegyver [Slot(1-5)]");

		if(db > 5 || db < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 5!");

		if(!vInfo[vid][vFegyver][db - 1] || !vInfo[vid][vTolteny][db - 1])
			return SCM(playerid, COL_LRED, "Ezen a sloton nincs fegyver!");

		if(PlayerInfo[playerid][pFegyver])
			if(SameWeaponSlot(PlayerInfo[playerid][pFegyverek][aWeaponSlotok[ vInfo[vid][vFegyver][db - 1] ]], vInfo[vid][vFegyver][db - 1]))
				return SCM(playerid, COL_MKEK, "Már van ilyen típusú fegyvered!");

		PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
		ResetPlayerWeapons(playerid);
		GiveWeapon(playerid, vInfo[vid][vFegyver][db - 1], vInfo[vid][vTolteny][db - 1]);

		SetPlayerAttachedWeapon(playerid);

		SFM(playerid, COL_VZOLD, "Kivéttél egy "#COL_MKEK"%s"#COL_FEHER" típusú fegyvert %d tölténnyel a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", aWeaponNames[ vInfo[vid][vFegyver][db - 1] ], vInfo[vid][vTolteny][db - 1], car, vid);
		Cselekves(playerid, "kivett egy fegyvert az egyik jármûbõl", 1);

		vInfo[vid][vFegyver][db - 1] = 0;
		vInfo[vid][vTolteny][db - 1] = 0;
		vUpdate(vid, vuFegyver);
	}
	else if(!strcmp(param, "vas", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol vas [Mennyit]");

		if((PlayerInfo[playerid][pVas] + db) > P_MAX_VAS)
			return SCM(playerid, COL_LRED, "Ennyi nem fér el nálad! Maximum "#P_MAX_VAS"kg lehet nálad!");

		if(vInfo[vid][vVas] < db)
			return SCM(playerid, COL_LRED, "Nincs ennyi vas a jármûben!");

		PlayerInfo[playerid][pVas] += db;
		vInfo[vid][vVas] -= db;
		vUpdate(vid, vuVas);
		SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s"#COL_FEHER"kg vasat a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", FN(db, 0, ','), car, vid);
		Cselekves(playerid, "kipakolt némi vasat az egyik jármûbõl", 1);
	}
	else if(!strcmp(param, "material", false) || !strcmp(param, "materiál", false) || !strcmp(param, "mati", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol material [Mennyit]");

		if((PlayerInfo[playerid][pMaterial] + db) > P_MAX_MATERIAL)
			return SCM(playerid, COL_LRED, "Ennyi nem fér el nálad! Maximum "#P_MAX_MATERIAL"db lehet nálad!");

		if(vInfo[vid][vMaterial] < db)
			return SCM(playerid, COL_LRED, "Nincs ennyi materiál a jármûben!");

		PlayerInfo[playerid][pMaterial] += db;
		vInfo[vid][vMaterial] -= db;
		vUpdate(vid, vuMaterial);
		SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s"#COL_FEHER"db materiált a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", FN(db, 0, ','), car, vid);
		Cselekves(playerid, "kipakolt némi materiált az egyik jármûbõl", 1);
	}
	else if(!strcmp(param, "heroin", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol heroin [Mennyit]");

		if((PlayerInfo[playerid][pHeroin] + db) > P_MAX_HEROIN)
			return SCM(playerid, COL_LRED, "Ennyi nem fér el nálad! Maximum "#P_MAX_HEROIN"g lehet nálad!");

		if(vInfo[vid][vHeroin] < db)
			return SCM(playerid, COL_LRED, "Nincs ennyi heroin a jármûben!");

		PlayerInfo[playerid][pHeroin] += db;
		vInfo[vid][vHeroin] -= db;
		vUpdate(vid, vuHeroin);
		SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s"#COL_FEHER"g heroint a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", FN(db, 0, ','), car, vid);
		Cselekves(playerid, "kipakolt némi heroint az egyik jármûbõl", 1);
	}
	else if(!strcmp(param, "kokain", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol kokain [Mennyit]");

		if((PlayerInfo[playerid][pKokain] + db) > P_MAX_KOKAIN)
			return SCM(playerid, COL_LRED, "Ennyi nem fér el nálad! Maximum "#P_MAX_KOKAIN"g lehet nálad!");

		if(vInfo[vid][vKokain] < db)
			return SCM(playerid, COL_LRED, "Nincs ennyi heroin a jármûben!");

		PlayerInfo[playerid][pKokain] += db;
		vInfo[vid][vKokain] -= db;
		vUpdate(vid, vuKokain);
		SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s"#COL_FEHER"g kokaint a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", FN(db, 0, ','), car, vid);
		Cselekves(playerid, "kipakolt némi kokaint az egyik jármûbõl", 1);
	}
	else if(!strcmp(param, "marihuána", false) || !strcmp(param, "marihuana", false) || !strcmp(param, "mariska", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol marihuana [Mennyit]");

		if((PlayerInfo[playerid][pMarihuana] + db) > P_MAX_MARIHUANA)
			return SCM(playerid, COL_LRED, "Ennyi nem fér el nálad! Maximum "#P_MAX_MARIHUANA"g lehet nálad!");

		if(vInfo[vid][vMarihuana] < db)
			return SCM(playerid, COL_LRED, "Nincs ennyi marihuána a jármûben!");

		PlayerInfo[playerid][pMarihuana] += db;
		vInfo[vid][vMarihuana] -= db;
		vUpdate(vid, vuMarihuana);
		SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s"#COL_FEHER"g marihuánát a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", FN(db, 0, ','), car, vid);
		Cselekves(playerid, "kipakolt némi marihuánát az egyik jármûbõl", 1);
	}
	return true;
}

CMD:rendszam(playerid, params[])
{
	new car = NINCS;
	car = GetClosestVehicle(playerid);

	if(!IsVehicleConnected(car) || car == NINCS || GetDistanceToVehicle(playerid, car) > 5.0)
		return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

	new vid = JarmuID(car, playerid);
	if(!vid || !vInfo[vid][vHasznalva])
		return SCM(playerid, COL_LRED, "Egy hiba történt!");

	if(strlen(vInfo[vid][vRendszam]) < 4) SFM(playerid, COL_MKEK, "A "#COL_MKEK"%s"#COL_FEHER" típusú jármû rendszáma: "#COL_MKEK"See-%d[%d]", VehicleNames[vInfo[vid][vModel] - 400], car, vid);
	else SFM(playerid, COL_MKEK, "A "#COL_MKEK"%s"#COL_FEHER" típusú jármû rendszáma: "#COL_MKEK"%s ( %d[%d] )", VehicleNames[vInfo[vid][vModel] - 400], vInfo[vid][vRendszam], car, vid);
	return true;
}

CMD:atnez(playerid, params[])
{
    /*if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");*/
						
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /átnéz [ Jármû / Ház ]");

	if(!strcmp(params, "jármû", false) || !strcmp(params, "jarmu", false))
	{
		new car = NINCS;
		car = GetClosestVehicle(playerid);

		if(!IsVehicleConnected(car) || car == NINCS || GetDistanceToVehicle(playerid, car) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

		new vid = JarmuID(car, playerid);
		if(!vid || !vInfo[vid][vHasznalva])
			return SCM(playerid, COL_LRED, "Egy hiba történt!");

		if(vInfo[vid][vZarva])
			return SCM(playerid, COL_LRED, "Ez a jármû zárva van!");

		SendFormatMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ LS - %d[%d] Tartalma ]"#COL_FEHER" ===================", car, vid);
		SendFormatMessage(playerid, COLOR_WHITE, "Vas: "#COL_MKEK"%d/%dKg"#COL_FEHER" | Material: "#COL_MKEK"%d/%ddb", vInfo[vid][vVas], J_MAX_VAS, vInfo[vid][vMaterial], J_MAX_MATERIAL);
		SendFormatMessage(playerid, COLOR_WHITE, "Heroin: "#COL_MKEK"%d/%dg"#COL_FEHER" | Kokain: "#COL_MKEK"%d/%dg"#COL_FEHER" | Marihuana: "#COL_MKEK"%d/%dg", vInfo[vid][vHeroin], J_MAX_HEROIN, vInfo[vid][vKokain], J_MAX_KOKAIN, vInfo[vid][vMarihuana], J_MAX_MARIHUANA);

		new i = -1, num = 0, fegyverek[128] = "Fegyverek:";
		for(;++i < 5;)
		{
			if(vInfo[vid][vFegyver][i] > 47) { vInfo[vid][vFegyver][i] = 0; vInfo[vid][vTolteny][i] = 0; }
			if((vInfo[vid][vFegyver][i] && !vInfo[vid][vTolteny][i]) || (!vInfo[vid][vFegyver][i] && vInfo[vid][vTolteny][i]))
			{
				vInfo[vid][vFegyver][i] = 0;
				vInfo[vid][vTolteny][i] = 0;
			}

			if(vInfo[vid][vFegyver][i] && vInfo[vid][vTolteny][i])
			{
				format(fegyverek, sizeof(fegyverek), "%s [ID:%d]%s(%d),", fegyverek, vInfo[vid][vFegyver][i], aWeaponNames[ vInfo[vid][vFegyver][i] ], vInfo[vid][vTolteny][i]);
				num++;
			}
		}
		if(!num) format(fegyverek, sizeof(fegyverek), "%s Nincs", fegyverek);
		else fegyverek[strlen(fegyverek) - 1] = '\0';
		SendClientMessage(playerid, COLOR_WHITE, fegyverek);
	}
	else if(!strcmp(params, "ház", true) || !strcmp(params, "haz", true))
	{
	    new haz = PlayerInfo[playerid][phaz];
	    if( haz == NINCS) return SCM(playerid, COL_LRED, "Nem vagy házban!");
		new string[512];
		format(string, 512, "\t\tSee utca %d\n\
			Pénz: %s\n\
			Kokain: %s\n\
			Heroin: %s\n\
			Marihuana: %s\n\
			Material: %s", FN(HazInfo[haz][hazSzef][0], 0, '.'), HazInfo[haz][hazSzef][1], HazInfo[haz][hazSzef][2], HazInfo[haz][hazSzef][3], HazInfo[haz][hazSzef][4]);

        ShowPlayerDialog(playerid,DIALOG_NINCS,DIALOG_STYLE_MSGBOX,"Ház átnézés", string,"Bezárás","");
	}
	return true;
}


CMD:csere(playerid, params[])
{
	if(isnull(params))
	{
		sh_help:
		return SCM(playerid, COL_MKEK, "Használat: /csere [ Ház / Jármû ] [Játékos] [ Mit? (ID) ] [ Mire? (ID) ]");
	}

	new jatekos, param[24], mit = NINCS, mire = NINCS;
	sscanf(params, "s[24]uD(-1)D(-1){}", param, jatekos, mit, mire);

	if(!strcmp(param, "haz", true) || !strcmp(param, "ház", true))
	{
		if(mit == NINCS && mire == NINCS)
			return SCM(playerid, COL_MKEK, "Használat: /csere Ház [Játékos] [ Házszámod ] [ Játékos házszáma ] | /stats-ban találjátok");

		if(playerid == jatekos)
			return SCM(playerid, COL_LRED, "Cicaborsó saját házad ne cseréld már el magaddal! :D");

		if(!Belepve(jatekos) || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(mit == NINCS)
			return SCM(playerid, COL_MKEK, "Add meg a cserélendõ házad házszámát! (( /stats-ban látod! ))");

		if(mire == NINCS)
			return SCM(playerid, COL_MKEK, "Add meg a másik fél cserélni kívánt házszámát! (( /stats-ban látja a másik fél! ))");

		new bool:van[2], i = NINCS;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[playerid][pHazKulcs][i] == mit)
				van[0] = true;

			if(PlayerInfo[jatekos][pHazKulcs][i] == mire)
				van[1] = true;
		}

		if(!van[0])
			return SCM(playerid, COL_LRED, "Ez a ház nem a tiéd! (( /stats-ban ellenõrízd a házszámot! ))");

		if(!van[1])
			return SCM(playerid, COL_LRED, "Ez a ház nem a másik fél tulajdona! (( /stats-ban ellenõrizze a másik fél a házszámot! ))");

		SendFormatMessage(playerid, COLOR_ORANGE, "Felajánlottad %s számára, hogy elcseréled a See utca %d házad a See utca %d házára.", JatekosNev(jatekos, true), mit, mire);
		SendFormatMessage(jatekos, COLOR_ORANGE, "%s felajánlotta, hogy elcserélné veled a See utca %d házát a See utca %d házadra.", JatekosNev(jatekos, true), mit, mire);
		SCM(jatekos, COL_MKEK, "Ha elszeretnéd fogadni a cserét kérlek írd be, hogy /elfogad csere, elutasításhoz /elutasít csere");

		PlayerInfo[playerid][pProcess][0] = PR_CSERE_HAZ;
		PlayerInfo[jatekos][pProcess][0] = PR_CSERE_HAZ;
		PlayerInfo[jatekos][pProcess][1] = playerid;
		PlayerInfo[jatekos][pProcess][2] = mit;
		PlayerInfo[jatekos][pProcess][3] = mire;
	}
	else if(!strcmp(param, "jarmu", true) || !strcmp(param, "jármû", true))
	{
		if(mit == NINCS && mire == NINCS)
			return SCM(playerid, COL_MKEK, "Használat: /csere Jármû [Játékos] [ Jármûved rendszáma ] [ Játékos jármûvének rendszám ] | /stats-ban találjátok");

		if(playerid == jatekos)
			return SCM(playerid, COL_LRED, "Cicaborsó saját jármûved ne cseréld már el magaddal! :D");

		if(!Belepve(jatekos) || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(mit == NINCS)
			return SCM(playerid, COL_MKEK, "Add meg a cserélendõ jármûved rendszámát! (( /stats-ban látod! ))");

		if(mire == NINCS)
			return SCM(playerid, COL_MKEK, "Add meg a másik fél cserélni kívánt jármûvének rendszámát! (( /stats-ban látja a másik fél! ))");

		new bool:van[2], i = NINCS;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[playerid][pJarmuKulcs][i] == JarmuID(mit, playerid))
				van[0] = true;

			if(PlayerInfo[jatekos][pJarmuKulcs][i] == JarmuID(mire, playerid))
				van[1] = true;
		}

		if(!van[0])
			return SCM(playerid, COL_LRED, "Ez a jármû nem a tiéd! (( /stats-ban ellenõrízd a rendszámot! ))");

		if(!van[1])
			return SCM(playerid, COL_LRED, "Ez a jármû nem a másik fél tulajdona! (( /stats-ban ellenõrizze a másik fél a rendszámot! ))");

		SendFormatMessage(playerid, COLOR_ORANGE, "Felajánlottad %s számára, hogy elcseréled a See-%d[%d] rendszámú jármûved a See-%d[%d] rendszámú jármûvére!", JatekosNev(jatekos, true), mit, JarmuID(mit, playerid), mire, JarmuID(mire, playerid));
		SendFormatMessage(jatekos, COLOR_ORANGE, "%s felajánlotta, hogy elcserélné veled a See-%d[%d] rendszámú jármûvét a See-%d[%d] rendszámú jármûvedre!", JatekosNev(playerid, true), mit, JarmuID(mit, playerid), mire, JarmuID(mire, playerid));
		SCM(jatekos, COL_MKEK, "Ha elszeretnéd fogadni a cserét kérlek írd be, hogy /elfogad csere, elutasításhoz /elutasít csere");

		PlayerInfo[playerid][pProcess][0] = PR_CSERE_JARMU;
		PlayerInfo[jatekos][pProcess][0] = PR_CSERE_JARMU;
		PlayerInfo[jatekos][pProcess][1] = playerid;
		PlayerInfo[jatekos][pProcess][2] = JarmuID(mit, playerid);
		PlayerInfo[jatekos][pProcess][3] = JarmuID(mire, playerid);
	} else goto sh_help;
	return true;
}

CMD:v(playerid, params[]) // jármû rendszer kezelés
{
	new param[64], fparam[32];

	if(sscanf(params, "s[64]{}", param))
	{
	    SCM(playerid, COL_MKEK, "Használat: /v [ Paraméterek ]");
		if(!Admin(playerid, 2))
		{
			SCM(playerid, COL_MKEK, "[Paraméterek]: Öv, Ablak, Vesz, Elad, Park, Szín, Lámpa, Mh, Cst, Zár, Rádió, Frakció, Neon");
			SCM(playerid, COL_MKEK, "[Paraméterek]: Tuning, Matrica");
		}
		else
		{
		    SCM(playerid, COL_MKEK, "[Paraméterek]: Öv, Ablak, Vesz, Elad, Park, Szín, Lámpa, Mh, Cst, Zár, Rádió, Frakció, Neon, Tuning, Matica");
			SCM(playerid, COL_MKEK, "[Admin]: Admin(1): Info | Admin(2): Park | Admin(3): Zár | Admin(4): (Ale)foglal");
			SCM(playerid, COL_MKEK, "[Admin]: Admin(5): Töröl | FõAdmin: Aelad, Set, Ár, Név, Atuning, AMatrica");
		}
		return true;
	} else {
		if(!strcmp(param, "frakcio", false) || !strcmp(param, "frakció", false) || !strcmp(param, "fk", false) || !strcmp(param, "f", false))
		{
			if(!PlayerInfo[playerid][pFrakcio])
				return SCM(playerid, COL_LRED, "Nem vagy egyik frakció tagja sem!");

			if(sscanf(params, "{s[64]}s[32]{}", fparam))
			{
		        SCM(playerid, COL_MKEK, "Használat: /v frakció [ Paraméterek ]");
				SCM(playerid, COL_MKEK, "[Paraméterek]: lista, helyzet | Leader:  rang, vesz");
				return true;
			} else {
				if(!strcmp(fparam, "lista", false))
				{
					SendFormatMessage(playerid, COLOR_SZURKE, "========= [ "#COL_MKEK"%s jármûvei"#COL_SZURKE" ] =========", FInfo[PlayerInfo[playerid][pFrakcio]][fNev]);
					new szamlalo = 0;

					foreach(Jarmuvek, id)
					{
						new idx = JarmuID(id, playerid);
						if(vInfo[idx][vHasznalva])
						{
							if((vInfo[idx][vMunka] == PlayerInfo[playerid][pFrakcio]))
							{
								szamlalo++;
								SendFormatMessage(playerid, COLOR_WHITE, "[%d] Típus: %s | Rendszám: %d[%d] | Rang: %s", szamlalo, VehicleNames[GetVehicleModel(vInfo[idx][vID]) - 400], vInfo[idx][vID], idx, ToStr(vInfo[idx][vRang]));
							}
						}
					}
					if(!szamlalo)
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "A frakciódnak még nincs jármûve!");
					//SendClientMessage(playerid, COLOR_SZURKE, "=======================================");
				}
				else if(!strcmp(fparam, "rang", false))
				{
					new rang;
					if(sscanf(params, "{s[64]s[32]}d", rang))
						return SCM(playerid, COL_MKEK, "Használat: /v frakció rang [szám]");

					if(rang < 0 || rang > FInfo[PlayerInfo[playerid][pFrakcio]][fMaxRang])
						return SFM(playerid, COL_LRED, "A rangnak 0 és %d között kell lennie!",FInfo[ PlayerInfo[playerid][pFrakcio] ][fMaxRang]);

					new car = NINCS;
					car = GetClosestVehicle(playerid);

					if(GetDistanceToVehicle(playerid, car) < 5.0)
					{
						new vehicleidje = JarmuID(car, playerid);

                        if(vInfo[vehicleidje][vMunka] != PlayerInfo[playerid][pFrakcio])
						    return SCM(playerid, COL_LRED, "Ez a jármû nem a te frakciódé.");

						if(PlayerInfo[playerid][pLeader] != 1)
						    return SCM(playerid, COL_LRED, "Te nem vagy (Al)Leader!");

						SendFormatMessage(playerid, COLOR_LBLUE, ""#COL_VKEK"%s"#COL_FEHER" típusú jármû rangja átírva! | Régi "#COL_VKEK"%d"#COL_FEHER" | Új: "#COL_VKEK"%d"#COL_FEHER" | JármûID: "#COL_VKEK"%d[%d]", VehicleNames[GetVehicleModel(car) - 400], vInfo[vehicleidje][vRang], rang, car, vehicleidje);
						vInfo[vehicleidje][vRang] = rang;
						vUpdate(vehicleidje, vuRang);
					}
				}
				else if(!strcmp(fparam, "vesz", false))
				{
					if(IsPlayerInAnyVehicle(playerid))
					{
					    if(PlayerInfo[playerid][pLeader] != 1)
						    return SCM(playerid, COL_LRED, "Te nem vagy Leader!");

						new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
						if(vid > 0)
						{
							if(!vInfo[vid][vInsert])
								return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, nem veheted meg!");

							if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] >= vInfo[vid][vAr])
							{
								if(vInfo[vid][vMunka] == 0 && vInfo[vid][vTulajID] == NINCS)
								{
									format(uzenet, sizeof(uzenet), "Gratulálunk! Sikeresen megvettél egy %s típusú jármûvet a frakciód számára! Ára: %d $", VehicleNames[GetVehicleModel(vInfo[vid][vID])-400], vInfo[vid][vAr]);
									SendClientMessage(playerid, COLOR_LBLUE, uzenet);

									FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] -= vInfo[vid][vAr];
									CegPenz(BIZ_JARMU, vInfo[vid][vAr]);
									vInfo[vid][vMunka] = PlayerInfo[playerid][pFrakcio];
									vUpdate(vid, vuMunka);

									doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET Munka = '%d' WHERE ID = '%d'", vInfo[vid][vMunka], vid);

									Cselekves(playerid, "aláírta az adásvételi szerzõdést", 1);
								} else
									return SCM(playerid, COL_LRED, "Ez a jármû már valaki tulajdona, nem veheted meg!");
							} else
								return SCM(playerid, COL_LRED, "Nincs elegendõ pénz a frakciód széfében, hogy ezt megvehesd!");
						} else
							return SCM(playerid, COL_LRED, "Ezt a jármûvet nem veheted meg!");
					} else
					    return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");
				}
			}
		}
		else if(!strcmp(param, "ablak", true))
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");

			new vid = JarmuID( GetPlayerVehicleID(playerid), playerid );

			if(!IsAKocsi(vInfo[vid][vModel]))
				return SCM(playerid, COL_LRED, "Autón kívûl nincs biztonsági öv!");

			if(vInfo[vid][vAblakLetekerve])
			{
				vInfo[vid][vAblakLetekerve] = false;
				SCM(playerid, COL_VZOLD, "Ablak feltekerve!");
				Cselekves(playerid, "feltekerte az ablakot.", 0);
				#if SAMPVER >= 374
					SetVehicleParamsCarWindows(vInfo[vid][vID], 1, 1, 1, 1);
				#endif
				
			} else {
				vInfo[vid][vAblakLetekerve] = true;
				SCM(playerid, COL_VZOLD, "Ablak letekerve!");
				Cselekves(playerid, "letekerte az ablakot.", 0);
				#if SAMPVER >= 374
					SetVehicleParamsCarWindows(vInfo[vid][vID], 0, 0, 0, 0);
				#endif
				
			}
			//newvAblak
			return true;
		}
		else if(!strcmp(param, "öv", false) || !strcmp(param, "ov", false))
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");

			new vid = JarmuID( GetPlayerVehicleID(playerid), playerid );

			if(!IsAKocsi(vInfo[vid][vModel]))
				return SCM(playerid, COL_LRED, "Autón kívûl nincs biztonsági öv!");

			if(PlayerInfo[playerid][pOv])
			{
				SCM(playerid, COL_VZOLD, "Öv sikeresen kikapcsolva!");
				Cselekves(playerid, "kikapcsolta a biztonsági övét.", 0);
				PlayerInfo[playerid][pOv] = false;
			} else {
				SCM(playerid, COL_VZOLD, "Öv sikeresen bekapcsolva!");
				Cselekves(playerid, "bekapcsolta a biztonsági övét.", 0);
				PlayerInfo[playerid][pOv] = true;
			}
			return true;
		}
		else if(!strcmp(param, "radio", false) || !strcmp(param, "rádió", false))
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");

			if(NincsBenne_Radio( vInfo[ JarmuID( GetPlayerVehicleID(playerid), playerid ) ][vModel] ))
				return SCM(playerid, COL_LRED, "Ebben a jármûben nincs rádió!");

			new dstr[1024], tmp[128], i = NINCS;
			format(dstr, sizeof(dstr), #COL_VZOLD"Rádió kikapcsolása");
			for(;++i < sizeof(RadioLista);)
			{
				if(i % 2 == 1) format(tmp, sizeof(tmp), "\n"#COL_MKEK"%s", RadioLista[i][1]);
				else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s", RadioLista[i][1]);
				strcat(dstr, tmp, sizeof(dstr));
			}
			ShowPlayerDialog(playerid, DIALOG_RADIO_JARMU, DIALOG_STYLE_LIST, "Jármû - Rádió lista", dstr, "Hallgat", "Mégse");
		}
		else if(!strcmp(param, "neon", true))
		{
		//	if(playerid != INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Bocsika de ez a parancs jelenleg kiszedve!");
			if(!IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");

			new vid = JarmuID( GetPlayerVehicleID(playerid), playerid);

			if(!JarmuKulcs(playerid, vid))
				return SCM(playerid, COL_LRED, "Ehhez a jármûhöz nincs kulcsod!");

			if(!vInfo[vid][vNeon][0])
				return SCM(playerid, COL_LRED, "Ebben a jármûben nincs Neon!");

			if(!vInfo[vid][vNeon][4])
			{
				SetVehicleNeon(vid, vInfo[vid][vNeon]);
				SCM(playerid, COL_VZOLD, "Neon bekapcsolva!");

			} else {

				SetVehicleNeon(vid, 0);
				SCM(playerid, COL_VZOLD, "Neon kikapcsolva!");
			}

			Streamer_Update(playerid);
		}
		else if(!strcmp(param,"tuning",false))
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
			new vehiclemodel = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(vehiclemodel < 400 || vehiclemodel > 611) return SCM(playerid,COL_LRED, "Ezt a kocsit nem tuningolhatod!");
			if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_SZERELO) return SCM(playerid,COL_LRED,"Csak szerelõ tuningolhatja a kocsidat!");
			if(PlayerInfo[playerid][prang] < 4) return SCM(playerid,COL_LRED,"Minimum 4 es Rang!");
			if(!IsPlayerInRangeOfPoint(playerid, 20, 1992.26, -2184.63, 13.56) && !IsPlayerInRangeOfPoint(playerid, 20, 1978.47, -2185.54, 13.57) && !IsPlayerInRangeOfPoint(playerid, 20, 27.2832,-243.5184,2.7010) && !IsPlayerInRangeOfPoint(playerid, 20, 26.6197,-227.7953,2.7277))
			{
				SetPlayerCheckpoint(playerid,1992.26, -2184.63, 13.56,5.0);
				SCM(playerid,COL_LRED,"Itt nem tuningolhatsz! Menj a kijelölt helyre!");
				return 1;
			}
			new tuningstr[3012];
			new component;
			TuningSzamolo[playerid] = 1;
			while(GetVehicleCompatibleUpgrades(vehiclemodel, TuningSzamolo[playerid], component))
			{
				if(TuningSzamolo[playerid] <= MAX_KOMPONENS)
				{
					if(TuningSzamolo[playerid] == 1) format(tuningstr, sizeof(tuningstr), "Tuning Neve: %s | Ára: %d $", GetComponentName(component),(KomponensAra(component))/235);
					else format(tuningstr, sizeof(tuningstr), "%s\nTuning Neve: %s | Ára: %d $", tuningstr, GetComponentName(component),(KomponensAra(component)/235));
					KomponensID[playerid][TuningSzamolo[playerid]-1] = component;
					TuningSzamolo[playerid]++;
				}
				else break;
			}
			new cim[80];
			format(cim,80, ":: Elérhetõ Tuning alkatreszek a jármûhöz {FF6400}(%d)", VehicleNames[vehiclemodel-400]);
			ShowPlayerDialog(playerid, DIALOG_TUNING, DIALOG_STYLE_LIST, cim, tuningstr, "Felszerel", "Mégse");
			return true;
		}
		else if(!strcmp(param,"matrica",false))
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
			new vehiclemodel = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(vehiclemodel < 400 || vehiclemodel > 611) return SCM(playerid,COL_LRED, "Ezt a kocsit nem tuningolhatod!");
			if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_SZERELO) return SCM(playerid,COL_LRED,"Csak szerelõ tuningolhatja a kocsidat!");
		//	if(PlayerInfo[playerid][pBszPenz] < 30000) return SCM(playerid, COL_LRED, "30.000$ szükséges (Bankszámlán!)"); Kérték h szedjem ki hogy megtudják mutatni a matricát..
			if(!IsPlayerInRangeOfPoint(playerid,5.0,1992.26, -2184.63, 13.56))
			{
				SetPlayerCheckpoint(playerid,1992.26, -2184.63, 13.56,5.0);
				SCM(playerid,COL_LRED,"Itt nem tuningolhatsz! Menj a kijelölt helyre!");
				return 1;
			}
			new hanyas = NINCS;
			sscanf(params,"{s[64]}D(-1)",hanyas);
			if(hanyas == NINCS)
			{
				SCM(playerid,COL_MKEK,"Használat: /v matrica [1-4]");
				return true;
			}
			if(hanyas < 1 || hanyas > 4) return SCM(playerid,COL_LRED,"1-4 között!");
			new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
			if(vInfo[vid][vSzin1] == 0 || vInfo[vid][vSzin2] == 0) return SCM(playerid,COL_LRED,"Nem lehet fekete a jármû fesd át fehérre!!");
			Tuningol[playerid] = 1;
			hanyas = hanyas-1;
			vInfo[vid][vMatrica] = hanyas;
		//	PlayerInfo[playerid][pBszPenz] -= 30000;
			ChangeVehiclePaintjob(vInfo[vid][vID],hanyas);
			vUpdate(vid,vuMatrica);
			return true;
		}
		else if(!strcmp(param, "color", false) || !strcmp(param, "szin", false) || !strcmp(param, "szín", false))
		{
			new bool:talalt = false, k = NINCS;
			new Float:FestoPos[][3] =
			{
				{1992.26, -2184.63, 13.56},
				{1978.47, -2185.54, 13.57},
				{1024.939453, -1024.406738, 31.798025},
				{720.166687, -457.286499, 16.032396},
				{-2425.677734, 1022.328552, 50.080821},
				{-1904.543579, 282.904937, 40.743328}
			};

			for(;++k < sizeof(FestoPos);)
				if(IsPlayerInRangeOfPoint(playerid, 5.0, PosExt(FestoPos[k])))
					talalt = true;

			if(!talalt && !Admin(playerid, FOADMIN_SZINT) && PlayerInfo[playerid][pFrakcio] != FRAKCIO_SZERELO) return SCM(playerid, COL_LRED, "Nem vagy Pay 'n' Spray vagy Tuning mûhelyben, vagy szerelõnél!");

			new car = (IsPlayerInAnyVehicle(playerid) ? GetPlayerVehicleID(playerid) : GetClosestVehicle(playerid));
			if(!IsPlayerInAnyVehicle(playerid) && GetDistanceToVehicle(playerid, car) > 5.5)
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

			new vid = JarmuID(car, playerid), szin1, szin2;
			if(!vid)
				return SCM(playerid, COL_LRED, "Egy hiba történt!");

			if(FrakcioJarmu(playerid, vid) || PlayerInfo[playerid][pFrakcio] == FRAKCIO_SZERELO || vInfo[vid][vTulajID] == PlayerInfo[playerid][pID] || Admin(playerid, FOADMIN_SZINT))
			{
				if(sscanf(params, "{s[64]}dd", szin1, szin2))
					return SCM(playerid, COL_MKEK, "Használat: /v szín [Szín1] [Szín2]");
				if(szin1 < 0 && szin1 > 126)
					return SCM(playerid, COL_LRED, "A szín minimum 0 és max 126 lehet!");
				if(szin2 < 0 && szin2 > 126)
					return SCM(playerid, COL_LRED, "A szín minimum 0 és max 126 lehet!");


				if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pFrakcio] == FRAKCIO_SZERELO)
				{

					if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_SZERELO && IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))	//Szerelõk is tudnak festeni
					{
						if(PlayerInfo[playerid][pBszPenz] < 255)
							return SCM(playerid, COL_LRED, "A festés költsége 255$! Neked nincs ennyi a bankszámládon!");

//						PlayerInfo[playerid][pBszPenz] -= 255;
						GameTextForPlayer(playerid, "~w~Festés elkészült!", 5000, 1);
					}
					else
					{
						if(PlayerInfo[playerid][pBszPenz] < 550)
							return SCM(playerid, COL_LRED, "A festés költsége 550$! Neked nincs ennyi a bankszámládon!");

					//	PlayerInfo[playerid][pBszPenz] -= 550;
						GameTextForPlayer(playerid, "~w~Festés elkészült!", 5000, 1);
					}
				}
				else if(FrakcioJarmu(playerid, vid))
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] < 550)
						return SCM(playerid, COL_LRED, "A festés költsége 550$! Nincs ennyi pénz a frakciód széfében!");

					nformat(str, 128, "<< %s átfestett egy %s típusú frakciós jármûvet 550$-ért! >>", JatekosNev(playerid, true), VehicleNames[vInfo[vid][vModel] - 400]);
					FrakcioUzenet(COLOR_YELLOW, PlayerInfo[playerid][pFrakcio], str);
					GameTextForPlayer(playerid, "~w~Festés elkészült!", 5000, 1);
				} else
					GameTextForPlayer(playerid, "~w~Festés elkészült!", 5000, 1);

				vInfo[vid][vSzin1] = szin1;
				vInfo[vid][vSzin2] = szin2;
				vUpdate(vid, vuSzin);
				ChangeVehicleColor(car, szin1, szin2);
			}
			else
				SCM(playerid,COL_LRED,"Ez nem a te jármûved / Nem vagy szerelõ / nem frakciójármû!");
			return true;
		}
		else if(!strcmp(param, "damage"))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return false;

			new closestcar = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, closestcar) < 5.0)
			{
				new vid = JarmuID(closestcar, playerid);

				AdminUzenet(COLOR_LIGHTRED, 1, "%s használtá alakított egy %s típusú jármûvet! JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[GetVehicleModel(closestcar) - 400], closestcar, vid, JarmuTulaj(vid));
				SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen használtá tettél egy %s típusú jármûvet! Tulaj: %s", VehicleNames[GetVehicleModel(closestcar) - 400], JarmuTulaj(vid));
				UpdateVehicleDamageStatus(closestcar, 204801046, 67372036, 0, 0);
				vInfo[vid][vPanels] = 204801046;
				vInfo[vid][vDoors] = 67372036;
				SetVehicleHealth(vInfo[vid][vID], (vInfo[vid][vElet] = 500.0));

			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			return true;
		}
		else if(!strcmp(param, "aelad", false))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

			new closestcar = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, closestcar) < 5.0)
			{
				new vid = JarmuID(closestcar, playerid);
				if(!vInfo[vid][vInsert])
					return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, ezért nem tudod eladni!");

				if(!strcmp("Nincs_Tulaj", vInfo[vid][vTulaj]) && vInfo[vid][vMunka] == 0 && vInfo[vid][vTulajID] == NINCS)
					return SCM(playerid, COL_LRED, "Ennek a jármûnek nincs tulaja!");

				AdminUzenet(COLOR_LIGHTRED,1, "%s eladott egy %s típusú jármûvet! JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[GetVehicleModel(closestcar) - 400], closestcar, vid, JarmuTulaj(vid));
				SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen eladtál egy "#COL_MKEK"%s"#COL_FEHER" típusú jármûvet! Tulaj: %s", VehicleNames[GetVehicleModel(closestcar) - 400], JarmuTulaj(vid));

				format(vInfo[vid][vTulaj], MAX_PLAYER_NAME, "Nincs_Tulaj");
				vInfo[vid][vMunka] = 0;
				vInfo[vid][vTulajID] = NINCS;
				vUpdate(vid, vuTulaj, vuMunka);

				doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET Tulaj = 'Nincs_Tulaj', TulajID = '-1', Munka = '0'  WHERE ID = '%d'", vid);

			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

 		}
		else if(!strcmp(param, "atuning", false))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
			new vehiclemodel = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(vehiclemodel < 400 || vehiclemodel > 611) return SCM(playerid,COL_LRED, "Ezt a kocsit nem tuningolhatod!");
			new tuningstr[3012];
			new component;
			TuningSzamolo[playerid] = 1;
			while(GetVehicleCompatibleUpgrades(vehiclemodel, TuningSzamolo[playerid], component))
			{
				if(TuningSzamolo[playerid] <= MAX_KOMPONENS)
				{
					if(TuningSzamolo[playerid] == 1) format(tuningstr, sizeof(tuningstr), "Tuning Neve: %s", GetComponentName(component));
					else format(tuningstr, sizeof(tuningstr), "%s\nTuning Neve: %s", tuningstr, GetComponentName(component));
					KomponensID[playerid][TuningSzamolo[playerid]-1] = component;
					TuningSzamolo[playerid]++;
				}
				else break;
			}
			new cim[80];
			format(cim,80, ":: Elérhetõ Tuning alkatreszek a jármûhöz {FF6400}(%d)", VehicleNames[vehiclemodel-400]);
			ShowPlayerDialog(playerid, DIALOG_TUNING_V2, DIALOG_STYLE_LIST, cim, tuningstr, "Felszerel", "Mégse");
			return true;
 		}
		else if(!strcmp(param, "amatrica",false))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
			new hanyas = NINCS;
			sscanf(params,"{s[64]}D(-1)",hanyas);
			if(hanyas == NINCS)
			{
				SCM(playerid,COL_MKEK,"Használat: /v amatrica [1-4]");
				return true;
			}
			if(hanyas < 1 || hanyas > 4) return SCM(playerid,COL_LRED,"1-4 között!");
			new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
			Tuningol[playerid] = 1;
			hanyas = hanyas-1;
			vInfo[vid][vMatrica] = hanyas;
			ChangeVehiclePaintjob(vInfo[vid][vID],hanyas);
			vUpdate(vid,vuMatrica);
			return true;
		}
		else if(!strcmp(param, "info", false))
		{
			if(!Admin(playerid, 1))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

			new id = NINCS;
			sscanf(params, "{s[64]}D(-1)", id);
			if(id == NINCS)
			{
				SCM(playerid, COL_MKEK, "Használat: /v info [JármûID] | Alap esetben a közeledben lévõt veszi figyelembe");
				id = GetClosestVehicle(playerid);
				if(GetDistanceToVehicle(playerid, id) > 6.0)
					return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			}

			new vid = JarmuID(id, playerid);
			SendFormatMessage(playerid, COLOR_WHITE, "Model: "#COL_MKEK"%s"#COL_FEHER" ("#COL_MKEK"%d"#COL_FEHER") | JármûID: "#COL_MKEK"%d[ SQL: %d ]", VehicleNames[vInfo[vid][vModel] - 400], vInfo[vid][vModel], id, vid);
			SendFormatMessage(playerid, COLOR_WHITE, "Tulaj: "#COL_MKEK"%s"#COL_FEHER" | Ára: "#COL_MKEK"%s$", JarmuTulaj(vid), FN(vInfo[vid][vAr], 0, ','));
		}
		else if(!strcmp(param, "vesz", false))
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");

			new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
			if(vid > 0)
			{
				if(!vInfo[vid][vInsert])
					return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, nem veheted meg!");

				if(KPegyenleg(playerid) >= vInfo[vid][vAr])
				{
					if(vInfo[vid][vMunka] == 0 && vInfo[vid][vTulajID] == NINCS)
					{
						new db = Adat_Num( playerid, ADAT_JARMU );
						if(!db || ((db + 1) <= MAX_HAZ_JARMU && PlayerInfo[playerid][pPremiumPont] >= PremiumPontKell[ADAT_JARMU - 1][1]))
						{
							if(db != 0)
							{
								if(PlayerInfo[playerid][pMegerosites] != playerid)
								{
									PlayerInfo[playerid][pMegerosites] = playerid;
									SFM(playerid, COL_LRED, "Biztos, hogy %d. jármûre szeretnéd költeni a Prémium Pontod? Ha igen, írd be mégegyszer!", (db + 1));
									return true;
								}

								PlayerInfo[playerid][pMegerosites] = NINCS;
								PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_JARMU - 1][1];
								nformat(str, 128, "[Jármû]: %s | %s - %d[%d] | %s$ | Maradék PP: %d", JatekosNev(playerid), VehicleNames[ vInfo[vid][vModel] - 400 ], vInfo[vid][vID], vid, FN(vInfo[vid][vAr], 0, ','), PlayerInfo[playerid][pPremiumPont]);
								Log(FILE_PREMIUM, str);
							}

							SendFormatMessage(playerid, COLOR_WHITE, "Gratulálunk! Sikeresen megvettél egy "#COL_MKEK"%s"#COL_FEHER" típusú jármûvet! Ára: "#COL_MKEK"%s"#COL_FEHER" $", VehicleNames[vInfo[vid][vModel] - 400], FN(vInfo[vid][vAr], 0, ','));
							GiveMoney(playerid,-vInfo[vid][vAr]);
							CegPenz(BIZ_JARMU,-vInfo[vid][vAr]);

							format(vInfo[vid][vTulaj], MAX_PLAYER_NAME, JatekosNev(playerid));
							vInfo[vid][vTulajID] = PlayerInfo[playerid][pID];

							Adat_Update( playerid, ADAT_JARMU );

							doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET Tulaj = '%s', TulajID = '%d' WHERE ID = '%d'", JatekosNev(playerid, false, true), PlayerInfo[playerid][pID], vid);

							Cselekves(playerid, "aláírta az adásvételi szerzõdést", 1);
						} else
							return SCM(playerid, COL_LRED, "Elérted a maximális megvehetõ jármûvek számát, ha többet szeretnél támogasd a szervert! (UserCP -> Támogatás)");
					} else
						return SCM(playerid, COL_LRED, "Ez a jármû már valaki tulajdona, nem veheted meg!");
				} else
					return SCM(playerid, COL_LRED, "Nincs elég pénzed a jármû megvételéhez!");
			} else
				return SCM(playerid, COL_LRED, "Ezt a jármûvet nem veheted meg!");
			return true;
		}
		else if(!strcmp(param, "elad", false))
		{
			new car = NINCS, jatekosid, kocsiar;
			car = GetClosestVehicle(playerid);

			if(sscanf(params, "{s[64]}ud", jatekosid, kocsiar))
				return SCM(playerid, COL_MKEK, "Használat: /v elad [Játékos] [Összeg]");
			if((jatekosid == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekosid))
				return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			if((jatekosid == playerid))
				return SCM(playerid, COL_LRED, "Nem adhatod el saját magadnak a kocsit!");
			if(kocsiar < 500 || kocsiar > 500000)
				return SendClientMessage(playerid, COLOR_WHITE, "Az árnak "#COL_VKEK"650 "#COL_FEHER"és "#COL_VKEK"500 000 "#COL_FEHER"között kell lennie!");

			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
					{
						if(vInfo[vid][vMunka] != 0)
							return SCM(playerid, COL_LRED, "Frakciós jármûvet nem adhatsz el!");

						new Float:vevopos[3];
						GetPlayerPos(jatekosid, vevopos[0], vevopos[1], vevopos[2]);
						if(!IsPlayerInRangeOfPoint(playerid, 5.0, vevopos[0], vevopos[1], vevopos[2]))
							return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

						new msgbox[512];
						vInfo[vid][vAr] = kocsiar;
						PlayerInfo[jatekosid][peladojarmu] = vid;
						PlayerInfo[jatekosid][peladokitol] = playerid;
						format(msgbox, sizeof(msgbox), #COL_CITROM"Jármû adásvételi szerzõdése\n\n"#COL_VKEK"%s "#COL_FEHER"felajánlotta, hogy eladja számodra a "#COL_VKEK"%s "#COL_FEHER"típusú jármûvét\n"#COL_VKEK"%s "#COL_FEHER"$-ért. Ha meg szeretnéd venni, kattints az "#COL_VKEK"ALÁÍR "#COL_FEHER"gombra!\nRendszáma: "#COL_VKEK"%d[%d]", \
						JatekosNev(playerid), VehicleNames[GetVehicleModel(vInfo[vid][vID])-400], FN(kocsiar, 0, ','), car, vid);
						ShowPlayerDialog(jatekosid, DIALOG_ELADAS, DIALOG_STYLE_MSGBOX, "Adásvételi szerzõdés", msgbox, "Aláír", "Mégse");
						format(uzenet, sizeof(uzenet), "átnyújta az adásvételi szerzõdést %s-nak/nek", JatekosNev(jatekosid));
						Cselekves(playerid, uzenet);
					} else
						return SCM(playerid, COL_LRED, "Ez a jármû már valaki tulajdona, nem veheted meg!");
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
		}
		else if(!strcmp(param, "set", false))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

			new car = NINCS, tipusa;
			car = GetClosestVehicle(playerid);

			if(sscanf(params, "{s[64]}d", tipusa))
				return SCM(playerid, COL_MKEK, "Használat: /v set [Típus (MunkaID | 0 = Eladó | 100 = Bérelhetõ | 101 = Oktatós | 102 = SKV | 103 = Használt)]");

			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!vInfo[vid][vInsert])
						return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, ezért nem konfigurálhatod!");

				    if(vInfo[vid][vTulajID] == NINCS)
					{
					    SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen átállítottad egy "#COL_VKEK"%s "#COL_FEHER"típusú jármû munkáját!", VehicleNames[GetVehicleModel(car) - 400]);
					    SendFormatMessage(playerid, COLOR_WHITE, "Régi: "#COL_VKEK"%s "#COL_FEHER"| Új: "#COL_VKEK"%s "#COL_FEHER"| JármûID: "#COL_VKEK"%d[%d]"#COL_FEHER"",  TipusToNev(vInfo[vid][vMunka]), TipusToNev(tipusa), car, vid);
					    if(vInfo[vid][vMunka] == 101)
							DestroyDynamic3DTextLabel(vInfo[vid][vOktato]);

						vInfo[vid][vMunka] = tipusa;
						vUpdate(vid, vuMunka);

						doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET vMunka = '%d' WHERE ID = '%d'", tipusa, vid);

						if(tipusa == 101)
							vInfo[vid][vOktato] = CreateDynamic3DTextLabel("Tanulókocsi", COLOR_MKEK, vInfo[vid][vPosx], vInfo[vid][vPosy], vInfo[vid][vPosz]+0.75, 20.0, .attachedvehicle = vInfo[vid][vID]);
						if(tipusa == 102 && !SKVkocsi(vid))
						    vInfo[vid][vMunka] = 102;
						if(tipusa == 103)
							vInfo[vid][vMunka] = 103;
							//else vInfo[vid][vMunka] = 0;

					} else
						return SCM(playerid, COL_LRED, "Ez a jármû már valaki tulajdona, nem állíthatod át a típusát!");
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			return true;
		}
		else if(!strcmp(param, "ár", false) || !strcmp(param, "ar", false))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

			new car = NINCS,tipusa;
			car = GetClosestVehicle(playerid);

			if(sscanf(params, "{s[64]}d", tipusa))
				return SCM(playerid, COL_MKEK, "Használat: /v ár [Érték] | Ezen az áron lehet majd bérelni, megvenni");

			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!vInfo[vid][vInsert])
						return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, ezért nem konfigurálhatod!");

				    if(vInfo[vid][vTulajID] == NINCS)
					{
					    SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen átállítottad egy "#COL_VKEK"%s "#COL_FEHER"típusú jármû (bérlési / megvételi) árát!", VehicleNames[GetVehicleModel(car) - 400]);
					    SendFormatMessage(playerid, COLOR_WHITE, "Régi: "#COL_VKEK"%s"#COL_FEHER"$ | Új: "#COL_VKEK"%s"#COL_FEHER"$ | JármûID: "#COL_VKEK"%d[%d]"#COL_FEHER"",  FN(vInfo[vid][vAr], 0, ','), FN(tipusa, 0, ','), car, vid);
					    vInfo[vid][vAr] = tipusa;
						vUpdate(vid, vuAr);

					} else
						return SCM(playerid, COL_LRED, "Ez a jármû már valaki tulajdona, nem állíthatod át az árát!");
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			return true;
		}
		else if(!strcmp(param, "park", false))
		{
			new car = NINCS;
			car = GetClosestVehicle(playerid);

			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!vInfo[vid][vInsert])
						return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, ezért nem parkolhatod!");

					if(Admin(playerid, 2) || (FrakcioJarmu(playerid, vid) && PlayerInfo[playerid][prang] >= 9) || vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
					{
						if(vInfo[vid][vMunka] > MAX_FRAKCIO && !Admin(playerid, FOADMIN_SZINT))
							return SCM(playerid, COL_LRED, "Ezt a jármûvet csak FõAdmin parkolhatja el!");

						new Float:vinfo[5];

						GetVehicleHealth(car, vinfo[0]);
						GetVehiclePos(car, vinfo[1], vinfo[2], vinfo[3]);
						GetVehicleZAngle(car, vinfo[4]);

						vInfo[vid][vElet] = vinfo[0];
						vInfo[vid][vPosx] = vinfo[1];
						vInfo[vid][vPosy] = vinfo[2];
						vInfo[vid][vPosz] = vinfo[3];
						vInfo[vid][vAngle] = vinfo[4];
						vInfo[vid][vInt] = GetPlayerInterior(playerid);
						vInfo[vid][vVW] = GetPlayerVirtualWorld(playerid);
						vUpdate(vid, vuPos);
						vInfo[vid][vMotorelinditva] = false;
						PlayerInfo[playerid][pmotortinditja] = false;

						GetVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
						DestroyVehicle(vInfo[vid][vID]);

						JarmuSpawn(vid, vInfo[vid][vModel], vInfo[vid][vPosx], vInfo[vid][vPosy], vInfo[vid][vPosz], vInfo[vid][vAngle], vInfo[vid][vSzin1], vInfo[vid][vSzin2]);
						TuningBetolt(car);
						SetVehicleHealth(vInfo[vid][vID], vinfo[0]);
						UpdateVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);

                        LinkVehicleToInterior(vInfo[vid][vID], vInfo[vid][vInt]);
   			    		SetVehicleVirtualWorld(vInfo[vid][vID],vInfo[vid][vVW]);

						if(vInfo[vid][vTulajID] != PlayerInfo[playerid][pID] && Admin(playerid, 2))
							SFM(playerid, COL_MKEK, "Sikeresen leparkoltad "#COL_MKEK"%s"#COL_FEHER" jármûvét!", JarmuTulaj(vid));
						else if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
							SCM(playerid, COL_MKEK, "Sikeresen leparkoltad a jármûvet!");
					} else
						return SCM(playerid, COL_LRED, "Ezt a jármûvet nem parkolhatod le!");
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			return true;
		}
		else if(!strcmp(param, "lefoglal", false) || !strcmp(param, "lf", false))
		{
			if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && !PlayerInfo[playerid][pSWAT])
				return SCM(playerid, COL_LRED, "Nem vagy FBI / SWAT tagja!");

			if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_FBI && PlayerInfo[playerid][prang] < 3 && !PlayerInfo[playerid][pSWAT])
			    return SCM(playerid, COL_LRED, "3-as rangtól!");
			    
			new car = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new id = IsSeatTaken(car, 0);
				if(id != playerid && id != NINCS)
					return SCM(playerid, COL_LRED, "A vezetõ ülés foglalt!");

				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!IsScripter(playerid) || (!IsScripter(playerid) && vInfo[vid][vInsert]))
						AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "FBI/SWAT %s lefoglalt egy %s típusú jármûvet! JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[vInfo[vid][vModel] - 400], car, vid, JarmuTulaj(vid));

					SCM(playerid, COL_MKEK, "Jármû sikeresen lefoglalva!");

					if(id == NINCS)
						PutPlayerInVehicle(playerid, car, 0);

					SetJarmu(car, KOCSI_MOTOR, 1);
					vInfo[vid][vMotorelinditva] = true;
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs jármû a közeledben!");
			return true;
		}
		else if(!strcmp(param, "alefoglal", false) || !strcmp(param, "ale", false))
		{
			if(!Admin(playerid, 4))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

			new car = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new id = IsSeatTaken(car, 0);
				if(id != playerid && id != NINCS)
					return SCM(playerid, COL_LRED, "A vezetõ ülés foglalt!");

				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!IsScripter(playerid) || (!IsScripter(playerid) && vInfo[vid][vInsert]))
						AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s lefoglalt egy %s típusú jármûvet! JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[vInfo[vid][vModel] - 400], car, vid, JarmuTulaj(vid));

					SCM(playerid, COL_MKEK, "Jármû sikeresen lefoglalva!");

					if(id == NINCS)
						PutPlayerInVehicle(playerid, car, 0);

					SetJarmu(car, KOCSI_MOTOR, 1);
					vInfo[vid][vMotorelinditva] = true;
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs jármû a közeledben!");
			return true;
		}
		else if(!strcmp(param, "töröl", true) || !strcmp(param, "torol", false))
		{
			if(!Admin(playerid, 5))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

			new car = NINCS;
			car = GetClosestVehicle(playerid);
			if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COL_LRED,"Szállj ki a jármûbõl!");
			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!Admin(playerid, FOADMIN_SZINT) && vInfo[vid][vInsert])
						return SCM(playerid, COL_LRED, "Megvehetõ vagy megvett jármûvet nem törölhetsz, csak is lehívottat!");

					if(vInfo[vid][vInsert])
						AdminUzenet(COLOR_LIGHTRED,1, "%s törölt egy %s típusú jármûvet! JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[GetVehicleModel(car) - 400], car, vid, JarmuTulaj(vid));

					SCM(playerid, COL_MKEK, "Jármû sikeresen törölve!");

					JarmuNullazas(vid);

					DestroyVehicle(vInfo[vid][vID]);
					Iter_Remove(Jarmuvek, vInfo[vid][vID]);

					vInfoID[vInfo[vid][vID]] = 0;
					vInfo[vid][vID] = 0;

					if(vInfo[vid][vInsert])
					{
						doQuery("DELETE FROM `"#MYSQL_JARMU_TABLA"` WHERE id = '%d'", vid);
						vInfo[vid][vInsert] = false;
					}
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs jármû a közeledben!");
			return true;
		}
		else if(!strcmp(param, "lámpa", true) || !strcmp(param, "lampa", false))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				if(!GetPlayerVehicleSeat(playerid))
				{
					new jarmu = GetPlayerVehicleID(playerid);
					if(GetJarmu(jarmu, KOCSI_LAMPA) == 1)
					{
						SetJarmu(jarmu, KOCSI_LAMPA, 0);
						Cselekves(playerid, "lekapcsolta a jármû lámpáját", 1);
					}
					else
					{
						SetJarmu(jarmu, KOCSI_LAMPA, 1);
						Cselekves(playerid, "felkapcsolta a jármû lámpáját", 1);
					}
				}
			}
			return true;
		}
		else if(!strcmp(param, "mh", false))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				if(!GetPlayerVehicleSeat(playerid))
				{
					new jarmu = GetPlayerVehicleID(playerid);
					new vid = JarmuID(jarmu, playerid);
					if(!IsAKocsi(vInfo[vid][vModel])) return SCM(playerid,COL_LRED,"Ennek nincs csomagtartója!");
					if(GetJarmu(jarmu, KOCSI_MOTORHAZTETO) == 1)
					{
						SetJarmu(jarmu, KOCSI_MOTORHAZTETO, 0);
						Cselekves(playerid, "bezárta a motorháztetõt", 1);
					}
					else
					{
						SetJarmu(jarmu, KOCSI_MOTORHAZTETO, 1);
						Cselekves(playerid, "kinyitotta a motorháztetõt", 1);
					}
				}
			}
			return true;
		}
		else if(!strcmp(param, "cst", false))
		{
			new car = NINCS;
			car = GetClosestVehicle(playerid);
			new vid = JarmuID(car, playerid);
			if(!IsAKocsi(vInfo[vid][vModel])) return SCM(playerid,COL_LRED,"Ennek nincs csomagtartója!");

			new funk[32];
			if(sscanf(params, "{s[64]}s[32]", funk))
			if(isnull(funk))
			{
				SCM(playerid,COL_LRED,"/v cst [Nyit / Zár / Enter / Exit]");
				return 1;
			}
			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				if(egyezik(funk,"Nyit"))
				{
					if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 1) return SCM(playerid,COL_LRED,"Már nyitva van!");
					SetJarmu(car, KOCSI_CSOMAGTARTO, 1);
					Cselekves(playerid, "kinyitotta a jármû csomagtartóját", 1);
					return 1;
				}
				if(egyezik(funk,"Zár"))
				{
					if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 0) return SCM(playerid,COL_LRED,"Már zárva van!");
					SetJarmu(car, KOCSI_CSOMAGTARTO, 0);
					Cselekves(playerid, "becsukta a jármû csomagtartóját", 1);
					return 1;
				}
				if(egyezik(funk,"Enter"))
				{
					if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0)
					{
						SCM(playerid,COL_LRED,"Csak 0ás INT es 0ás VW!");
						return 1;
					}
					if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 1)
					{
						Cselekves(playerid, "bemászott a csomagtartóba");
						Freeze(playerid,5000);
						SetInterior(playerid,1);
						SetVirtualWorld(playerid,car);
						SetPlayerPos(playerid,1659.5399,221.7910,-82.2500);
						ApplyAnimation(playerid,"CRACK","crckdeth2",4.1,0,1,1,1,0);
					}
					else
					{
						SCM(playerid,COL_LRED,"A csomagtartó zárva van!");
					}
					return 1;
				}
			}
			if(egyezik(funk,"exit"))
			{
				if(!IsPlayerInRangeOfPoint(playerid,10,1659.5399,221.7910,-82.2500)) return SCM(playerid,COL_LRED,"Nem vagy csomagtartóban!");
				car = GetPlayerVirtualWorld(playerid);

				if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 1)
				{
					new Float:Poz[3];
					GetVehiclePos(car,Poz[0],Poz[1],Poz[2]);
					GetXYBehindVehicle(car,Poz[0],Poz[1],4.0);
					SetPlayerPos(playerid,Poz[0],Poz[1],Poz[2]);
					Cselekves(playerid, "kimászott a csomagtartóból");
					SetInterior(playerid,0);
					SetVirtualWorld(playerid,0);
				}
				else
				{
					SCM(playerid,COL_LRED,"A csomagtartó zárva van!");
				}
				return 1;
			}

			return true;
		}
		else if(!strcmp(param, "zár", true) || !strcmp(param, "zar", false))
		{
			new car = NINCS;
			car = GetClosestVehicle(playerid);

			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(FrakcioJarmu(playerid, vid) || Admin(playerid, 3) || vInfo[vid][vTulajID] == PlayerInfo[playerid][pID] || (PlayerInfo[playerid][pBereltJarmu] != 0 && PlayerInfo[playerid][pBereltJarmu] == vid) ||
				PlayerInfo[playerid][pJarmuKolcson] == vid || (PlayerInfo[playerid][pKereskedo] > 0 && vInfo[vid][vMunka] == 103))
				{
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

					if(!vInfo[vid][vZarva])
					{
						if(IsABicikli(vInfo[vid][vModel]))
							SetJarmu(car, KOCSI_MOTOR, 0);

						AjtoZar(playerid, vid);
					}
					else
						AjtoZar(playerid, vid, true);

					vUpdate(vid, vuZarva);
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs jármû a közeledben!");
			return true;
		}
		else if(!strcmp(param, "bérel", false) || !strcmp(param, "berel", false))
		{
			if(!PlayerInfo[playerid][pJarmuben])
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd ha ki szeretnéd bérelni!");

			new id = PlayerInfo[playerid][pJarmuben];
			if(vInfo[id][vMunka] != 100)
				return SCM(playerid, COL_LRED, "Ez a jármû nem bérelhetõ!");

			if(!vInfo[id][vBerelt])
			{
				if(PlayerInfo[playerid][ppenz] < vInfo[id][vAr])
					return SFM(playerid, COL_LRED, "Nincs elegendõ készpénzed a jármû kibérléséhez! A bérlés összege "#COL_MKEK"%s"#COL_FEHER"$!", FN(vInfo[id][vAr], 0, ','));

				GiveMoney(playerid,-vInfo[id][vAr]);
				PlayerInfo[playerid][pBereltJarmu] = id;
				vInfo[id][vBerelt] = true;

				SFM(playerid, COL_MKEK, "Sikeresen kibéreltél egy "#COL_MKEK"%s"#COL_FEHER" típusú jármûvet "#COL_MKEK"%s"#COL_FEHER"$-ért! Vigyázz rá!", VehicleNames[vInfo[id][vModel] - 400], FN(vInfo[id][vAr], 0, ','));
				return true;

			} else {

				if(PlayerInfo[playerid][pBereltJarmu] != id)
					return SCM(playerid, COL_LRED, "Ezt a jármûvet már bérli valaki, válassz másikat!");

				if(!IsPlayerInRangeOfPoint(playerid, 20.0, vInfo[id][vPosx], vInfo[id][vPosy], vInfo[id][vPosz]))
				{
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, vInfo[id][vPosx], vInfo[id][vPosy], vInfo[id][vPosz], 5.0);

					SCM(playerid, COL_LRED, "Itt nem mondhatod vissza a bérlést. Vidd vissza a telephelyre!");
					return true;
				}

				vInfo[ PlayerInfo[playerid][pBereltJarmu] ][vBerelt] = false;
				SetVehicleToRespawn(vInfo[ PlayerInfo[playerid][pBereltJarmu] ][vID]);
				PlayerInfo[playerid][pBereltJarmu] = 0;

				SCM(playerid, COL_MKEK, "Jármû bérlés visszamondva!");
			}
			return true;
		}
		else if(!strcmp(param, "nev", false) || !strcmp(param, "név", false))
		{
			if(!IsScripter(playerid))
				return SCM(playerid, COL_LRED, "Csak Scripter nevezheti át a jármûveke!");

			new id, nev[32];
			if(sscanf(params, "{s[24]}ds[32]", id, nev))
				return SCM(playerid, COL_MKEK, "Használat: /v név [Jármû Model] [Új név] | Jármû model számban értendõ!");

			if(id < 400 || id > 611)
				return SCM(playerid, COL_LRED, "Hibás jármû model! 400 és 611 között kell, hogy legyen!");

			id = (id - 400);

			new regi[32];
			if(strlen(JarmuAdat[id][jUjNev]) > 2) regi = JarmuAdat[id][jUjNev];
			else regi = JarmuAdat[id][jNev];

			SFM(playerid, COL_VZOLD, "Jármû név váltása sikeres! Régi: "#COL_MKEK"%s"#COL_FEHER" => Új: %s", regi, nev);

			JarmuAdat[id][jUjNev] = nev;
			doQuery("UPDATE `"#MYSQL_JARMUADAT_TABLA"` SET ujnev = '%s' WHERE id = '%d'", nev, id);
			return true;
		}
	}
	return true;
}

CMD:haz(playerid, params[])
{
	new
	    param[64],
	    houseid = KozeliHaz(playerid);

	if(sscanf(params, "s[64]{}", param))
	{
		SCM(playerid, COL_MKEK, "Használat: /ház [ Paraméterek ]");
		if(!Admin(playerid, 3))
			SCM(playerid, COL_MKEK, "[Paraméterek]: Be, Ki, Zár, Vesz, Széf, Pince");
		else
		{
		    SCM(playerid, COL_MKEK, "[Paraméterek]: Be, Ki, Zár, Vesz, Széf, Pince");
			SCM(playerid, COL_MKEK, "[Admin Paraméterek]: FõAdmin(1339): Töröl, Interior, Ár, Típus | Admin(3): Goto, Zár | Admin(6): Bejárat");
		}
		return true;
	}

	if(!strcmp(param, "töröl", true))
	{
		if(!Admin(playerid, AC_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		else if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");
		else {
			new i = -1;

			for(;++i < MAXBUTORSZAM;)
			{
				if((ButorInfo[i][butorHasznalva] == true) && (ButorInfo[i][butorVW] == houseid))
				{
					ButorInfo[i][butorPosX] = 0.0;
					ButorInfo[i][butorPosY] = 0.0;
					ButorInfo[i][butorPosZ] = 0.0;
					ButorInfo[i][butorPosRX] = 0.0;
					ButorInfo[i][butorPosRY] = 0.0;
					ButorInfo[i][butorPosRZ] = 0.0;
					ButorInfo[i][butorModel] = 0;
					ButorInfo[i][butorVW] = 0;
					ButorInfo[i][butorInterior] = 0;
					ButorInfo[i][butorHasznalva] = false;
					ButorInfo[i][butorMegveve] = false;
					DestroyDynamicObject(ButorInfo[i][butorObject]);
					ButorInfo[i][butorObject] = 0;
					ButorInfo[i][butorTipus] = 0;
					ButorInfo[i][butorListitem] = NINCS;
				}
			}

			i = NINCS;
			for(;++i < 50;)
			{
				HazInfo[houseid][hDrogMi][i] = 0;
				HazInfo[houseid][hDrogAllapot][i] = 0;
				HazInfo[houseid][hDrogMennyi][i] = 0;

				if(IsValidDynamic3DTextLabel( HazInfo[houseid][hDrogHely][i] ))
					DestroyDynamic3DTextLabel( HazInfo[houseid][hDrogHely][i] );
			}

			new querly[128];
			mysql_tquery(sql_ID, (format(querly, 128, "DELETE FROM `"#MYSQL_BUTOR_TABLA"` WHERE butorVW = '%d'", houseid), querly), "", "");

			DestroyDynamicPickup(HazInfo[houseid][pickup]);
			HazInfo[houseid][hazar] = 0;
			HazInfo[houseid][hasznalatban] = false;
			HazInfo[houseid][posx] = 0.0;
			HazInfo[houseid][posy] = 0.0;
			HazInfo[houseid][posz] = 0.0;
			DestroyDynamic3DTextLabel(HazInfo[houseid][belsolabel]);
			DestroyDynamicPickup(HazInfo[houseid][belsopickup]);
			HazInfo[houseid][belsopickup] = -1;
			HazInfo[houseid][tulaj] = EOS;
			HazInfo[houseid][hInterior] = 0;
			Streamer_Update(playerid);
			for(new ih = 0; ih <= 14; ih++)
			{
				HazInfo[houseid][hFegyver][ih] = 0;
				HazInfo[houseid][hTolteny][ih] = 0;
			}
			for(new ih2 = 0; ih2 <= 4; ih2++){ HazInfo[houseid][hazSzef][ih2] = 0; }
			mysql_tquery(sql_ID, (format(querly, 128, "DELETE FROM `"#MYSQL_HAZ_TABLA"` WHERE id = '%d'", houseid), querly), "", "");
			SCM(playerid, COL_MKEK, "Ház sikeresen törölve!");
		}
		return true;
	}
	else if(!strcmp(param, "bejarat", true) || !strcmp(param, "bejárat", true))
	{
		if(!Admin(playerid, AC_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id;
		if(sscanf(params, "{s[64]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /haz bejárat [Házszám] | Bejárat áthelyezése");

		if(id > MAX_HOUSE || id < 0 || !HazInfo[id][hasznalatban])
			return SCM(playerid, COL_LRED, "Nincs ilyen ház!");

		new Float:pos[3];
		GetPlayerPos(playerid, PosExt(pos));

		DestroyDynamicPickup(HazInfo[id][pickup]);

		HazInfo[id][posx] = pos[0];
		HazInfo[id][posy] = pos[1];
		HazInfo[id][posz] = pos[2];

		if(HazInfo[id][hTulajID] == NINCS)
		{
			SFM(playerid, COL_VZOLD, "Ház sikeresen áthelyezve! ID: "#COL_MKEK"%d"#COL_FEHER" | Tulaj: "#COL_MKEK"Nincs"#COL_FEHER" | Ára: "#COL_MKEK"%s$", id, FN(HazInfo[id][hazar], 0, ','));
			format(uzenet, sizeof(uzenet), "Házszám: ~g~%d.~n~~w~Ár: ~g~%s$.~n~~w~Tulaj: ~g~Senki.", id, FN(HazInfo[id][hazar], 0, '.'));

		} else {

			SFM(playerid, COL_VZOLD, "Ház sikeresen áthelyezve! ID: "#COL_MKEK"%d"#COL_FEHER" | Tulaj: "#COL_MKEK"[%d]%s", id, HazInfo[id][hTulajID], HazInfo[id][tulaj]);
			format(uzenet, sizeof(uzenet), "Házszám: ~g~%d.~n~~w~Tulaj: ~g~%s.", id, HazInfo[id][tulaj]);
		}

		SpawnHouse(id, uzenet, (HazInfo[id][hTulajID] == NINCS ? HAZ_MEGVEHETO_MODEL : HAZ_MEGVETT_MODEL));
		BelsoPickup(id, HazInfo[id][hInterior]);
		doQuery("UPDATE `"#MYSQL_HAZ_TABLA"` SET poziciox = '%f', pozicioy = '%f', pozicioz = '%f' WHERE id = '%d'", PosExt(pos), id);
	}
	else if(!strcmp(param, "tipus", true) || !strcmp(param, "típus", true))
	{
		if(!Admin(playerid, AC_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id, tipus;
		if(sscanf(params, "{s[64]}dd", id, tipus))
			return SCM(playerid, COL_MKEK, "Használat: /haz típus [Házszám] [Típus] | 1 = Lakás, 2 = GN, 3 = LS, 4 = Gettó, 5 = Falu");

		if(id > MAX_HOUSE || id < 0 || !HazInfo[id][hasznalatban])
			return SCM(playerid, COL_LRED, "Nincs ilyen ház!");

		if(tipus > 5 || tipus < 1)
			return SCM(playerid, COL_LRED, "Hibás típus! 1 = Lakás, 2 = GN, 3 = LS, 4 = Gettó, 5 = Falu");

		SFM(playerid, COL_VZOLD, "Ház típusa sikeresen frissítve! Régi: %d => Új: %d", HazInfo[id][hTipus], tipus);
		HazInfo[id][hTipus] = tipus;
		doQuery("UPDATE `"#MYSQL_HAZ_TABLA"` SET hTipus = '%d' WHERE id = '%d'", tipus, id);
	}
	else if(!strcmp(param, "elad", true))
	{
		new penz;
		if(sscanf(params, "{s[64]}d", penz))
			return SCM(playerid, COL_MKEK, "Használat: /haz elad [Ára] | Saját ház eladása");

		new jatekos = GetClosestPlayer(playerid);
		if(!PlayerToPlayer(playerid,jatekos,5))
		{
			return SCM(playerid,COL_LRED,"Nincs senki a közeledben!");
		}

		if(houseid == NINCS && PlayerInfo[playerid][phaz] == NINCS)
			return SCM(playerid, COL_LRED, "Nem vagy sem a házadban sem a bejáratnál!");

		if(houseid == NINCS)
			houseid = PlayerInfo[playerid][phaz];

		if(penz < MIN_HAZ_AR)
		{
			SFM(playerid,COL_LRED,"Minimum %s$", FN(MIN_HAZ_AR, 0, ','));
			return 1;
		}


		new i = NINCS, bool:oks;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[playerid][pHazKulcs][i] == houseid)
			{
				oks = true;
				break;
			}
		}

		if(!oks)
			return SCM(playerid, COL_LRED, "Cicaborsó, ez nem a te házad. Ne add már el :D");

		SFM(playerid, COL_MKEK, "Felajánlottad, hogy eladod a See utca "#COL_MKEK"%d."#COL_FEHER" házad neki: "#COL_MKEK"%s"#COL_FEHER" | Ára: "#COL_MKEK"%s$", houseid, JatekosNev(jatekos, true), FN(penz, 0, ','));
		SFM(jatekos, COL_MKEK, ""#COL_MKEK"%s"#COL_FEHER" felajánlotta neked, hogy eladja a See utca "#COL_MKEK"%d."#COL_FEHER" házát. | Ára: "#COL_MKEK"%s$", JatekosNev(playerid, true), houseid, FN(penz, 0, ','));
		SCM(jatekos, COL_MKEK, "Ha meg szeretnéd venni írd be, hogy "#COL_MKEK"/elfogad szerzõdés");
		Cselekves(playerid, "átnyújtotta valakinek az adásvételi szerzõdést..");

		PlayerInfo[jatekos][pProcess][0] = PR_ELAD_HAZ;
		PlayerInfo[jatekos][pProcess][1] = playerid;
		PlayerInfo[jatekos][pProcess][2] = penz;
		PlayerInfo[jatekos][pProcess][3] = houseid;
		return true;
	}
	else if(!strcmp(param, "goto", true))
	{
		new hazszam;
		if(!Admin(playerid, 3))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		if(sscanf(params, "{s[64]}d", hazszam))
			return SCM(playerid, COL_MKEK, "Használat: /haz goto [Házszám]");
		if(!HazInfo[hazszam][hasznalatban])
			return SCM(playerid, COL_LRED, "Nincs ilyen ház!");

		SetPos(playerid, HazInfo[hazszam][posx], HazInfo[hazszam][posy], HazInfo[hazszam][posz]);
		SFM(playerid, COL_VZOLD, "Sikeresen teleportáltál a "#COL_MKEK"%d"#COL_FEHER" házszámhoz! Ház tulaj: "#COL_MKEK"%s", hazszam, HazInfo[hazszam][tulaj]);
		return true;
	}
	else if(!strcmp(param, "be", true))
	{
		if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");

		if(PlayerInfo[playerid][phaz] != NINCS)
			return SCM(playerid, COL_LRED, "Jelenleg is házban tartózkodsz!");

		if(HazInfo[houseid][hZarva])
			return SCM(playerid, COL_LRED, "Az ajtó zárva van!");

		PutPlayerInHouse(playerid, houseid);
	}
	else if(!strcmp(param, "ki", true))
	{
		new hid = PlayerInfo[playerid][phaz];
		if(hid == NINCS)
			return SCM(playerid, COL_LRED, "Jelenleg nem tartózkodsz egy házban sem, hová szeretnél kimenni?");
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, BelsoInterior[HazInfo[ hid ][hInterior]][belsox], BelsoInterior[HazInfo[ hid ][hInterior]][belsoy], BelsoInterior[HazInfo[ hid ][hInterior]][belsoz]))
		{
			if(HazInfo[hid][hZarva] && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
				return SCM(playerid, COL_LRED, "Az ajtó zárva van!");

			RemovePlayerFromHouse(playerid, hid);
		} else return SCM(playerid, COL_LRED, "Nem vagy kijárat közelben!");
	}
	else if(!strcmp(param, "zar", true) || !strcmp(param, "zár", true))
	{
		if(houseid == NINCS)
			houseid = PlayerInfo[playerid][phaz];

		if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");

		if(HazInfo[houseid][hTulajID] != PlayerInfo[playerid][pID] && !Admin(playerid, 3))
			return SCM(playerid, COL_LRED, "Ehhez a házhoz nincs kulcsod.");

		if((HazInfo[houseid][hZarva] = true - HazInfo[houseid][hZarva]))
		{
			GameTextForPlayer(playerid, "~w~Ház ~r~Zárva", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			Cselekves(playerid, "bezárta a háza ajtaját..");

		} else {

			GameTextForPlayer(playerid, "~w~Ház ~g~Nyitva", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			Cselekves(playerid, "kinyitotta a háza ajtaját..");
		}
	}
	else if(!strcmp(param, "pince", false))
	{
		new melyik = 0;
		if(PlayerInfo[playerid][phaz] == -1)
			return SCM(playerid, COL_LRED, "Jelenleg nem tartózkodsz egy házban sem, hová szeretnél kimenni?");

		if(!HazInfo[ PlayerInfo[playerid][phaz] ][hTipus])
			return SCM(playerid, COL_LRED, "Az Adminisztrátorok még nem állították be a házad típusát, használat elõtt kérlek értesítsd õket.");

		if(HazInfo[ PlayerInfo[playerid][phaz] ][hTipus] == 1)
			return SCM(playerid, COL_LRED, "Ebben a ház típusban nem használható a pince!");

		if(!HazInfo[ PlayerInfo[playerid][phaz] ][hPince] && (PlayerInfo[playerid][pMegerosites] == NINCS || PlayerInfo[playerid][pMegerosites] == playerid))
		{
			if(PlayerInfo[playerid][pMegerosites] == playerid)
			{
				if(PlayerInfo[playerid][pBszPenz] < 22000)
					SCM(playerid, COL_LRED, "Neked nincs $ a bankszámládon, ezért ezt nem tudod kifizetni!");
				else
				{
					SCM(playerid, COL_VZOLD, "22 000$ levonva a bankszámládról! (( Pince használata: /ház pince ))");
					PlayerInfo[playerid][pBszPenz] -= 22000;
					HazInfo[ PlayerInfo[playerid][phaz] ][hPince] = 1;
					doQuery("UPDATE `"#MYSQL_HAZ_TABLA"` SET hPince = '1' WHERE id = '%d'", PlayerInfo[playerid][phaz]);
				}

				PlayerInfo[playerid][pMegerosites] = NINCS;
				return true;
			}

			SCM(playerid, COL_VZOLD, "Biztos vagy benne, hogy pincét szeretnél építtetni 22 000$-ért?");
			SCM(playerid, COL_VZOLD, "Ha igen, írd be újra a parancsot! (( Az összeg bankszámláról kerül levonásra! ))");
			PlayerInfo[playerid][pMegerosites] = playerid;
			return true;
		}

		if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1954.5481, -2362.2747, 17.8566) && !IsPlayerInRangeOfPoint(playerid, 1.0, BelsoInterior[HazInfo[PlayerInfo[playerid][phaz]][hInterior]][belsox], BelsoInterior[HazInfo[PlayerInfo[playerid][phaz]][hInterior]][belsoy], BelsoInterior[HazInfo[PlayerInfo[playerid][phaz]][hInterior]][belsoz]))
			return SCM(playerid, COL_LRED, "Nem vagy kijárat közelben!");

		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1954.5481, -2362.2747, 17.8566))
			melyik = 1;
		else
			melyik = 2;

		switch(melyik)
		{
			case 1:
				return PutPlayerInHouse(playerid, PlayerInfo[playerid][phaz]);
			case 2:
			{
				SetPlayerPos(playerid, 1954.5481, -2362.2747, 17.8566);
				SetVirtualWorld(playerid, PlayerInfo[playerid][phaz]);
				SetPlayerInterior(playerid, 123);

				PlayerInfo[playerid][pobjectbetoltes] = true;
				TogglePlayerControllable(playerid, 0);
				defer UnFreeze[ 3000 ](playerid);

				Streamer_Update(playerid);
				return true;
			}
		}
		return true;
	}
	else if(!strcmp(param, "interior", true))
	{
		new id, query[128];
		if(!Admin(playerid, AC_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");
		if(sscanf(params, "{s[64]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /haz interior [0-18]");
		if(id < 0 || id > 19)
			return SCM(playerid, COL_MKEK, "Hibás érték! Minimum 0 és maximum 18 lehet!");

		mysql_tquery(sql_ID, (format(query, 128, "UPDATE `"#MYSQL_HAZ_TABLA"` SET interior = '%d' WHERE id = '%d'", id, houseid), query), "", "");
		SFM(playerid, COL_VZOLD, "Ház interiorja sikeresen átállítva! Régi: %d -> Új: %d", HazInfo[houseid][hInterior], id);
		HazInfo[houseid][hInterior] = id;
		DestroyDynamicPickup(HazInfo[houseid][belsopickup]);
		HazInfo[houseid][belsopickup] = CreateDynamicPickup(1318,23,BelsoInterior[id][belsox],BelsoInterior[id][belsoy],BelsoInterior[id][belsoz],houseid,BelsoInterior[id][bInterior],-1);

		return true;
	}
	else if(!strcmp(param, "ar", true) || !strcmp(param, "ár", true))
	{
		new id, query[128];
		if(!Admin(playerid, AC_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");
		if(sscanf(params, "{s[64]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /haz ár [Érték]");
		if(id < 1 || id > 200000000)
			return SCM(playerid, COL_MKEK, "Hibás érték! Minimum 1 és maximum 200 000 000 lehet!");

		SFM(playerid, COL_VZOLD, "Ház ára sikeresen átállítva! Régi: %s$ -> Új: %s$", FN(HazInfo[houseid][hazar], 0, ','), FN(id, 0, ','));
		mysql_tquery(sql_ID, (format(query, 128, "UPDATE `"#MYSQL_HAZ_TABLA"` SET ar = '%d' WHERE id = '%d'", id, houseid), query), "", "");
		HazInfo[houseid][hazar] = id;

		if(HazInfo[houseid][hTulajID] == NINCS)
		{
			nformat(str, 128, "Házszám: %d.\nÁr: %d.\nTulaj: Senki.", houseid, HazInfo[houseid][hazar]);
			UpdateDynamic3DTextLabelText(HazInfo[houseid][label], 0xFFFFFF, str);
		}

		return true;
	}
	else if(!strcmp(param, "vesz", true))
	{
		if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");
		if(HazInfo[houseid][hTulajID] != NINCS)
			return SCM(playerid, COL_LRED, "Ez a ház már valaki tulajdona, ezért nem veheted meg!");
		if(PlayerInfo[playerid][pBszPenz] < HazInfo[houseid][hazar])
			return SCM(playerid, COL_LRED, "Nincs elég pénz a bankszámládon, hogy megvehesd!");

		new db = Adat_Num( playerid, ADAT_HAZ );
		if(!db || ((db + 1) <= MAX_HAZ_JARMU && PlayerInfo[playerid][pPremiumPont] >= PremiumPontKell[ADAT_HAZ - 1][1]))
		{
			if(db != 0)
			{
				if(PlayerInfo[playerid][pMegerosites] != playerid)
				{
					PlayerInfo[playerid][pMegerosites] = playerid;
					SFM(playerid, COL_LRED, "Biztos, hogy %d. házra szeretnéd költeni a Prémium Pontod? Ha igen, írd be mégegyszer!", (db + 1));
					return true;
				}

				PlayerInfo[playerid][pMegerosites] = NINCS;
				PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_HAZ - 1][1];
				nformat(str, 128, "[Ház]: %s | %d | %s$ | Maradék PP: %d", JatekosNev(playerid), houseid, FN(HazInfo[houseid][hazar], 0, ','), PlayerInfo[playerid][pPremiumPont]);
				Log(FILE_PREMIUM, str);
			}

			new query[256];
			format(query, sizeof(query), "UPDATE `"#MYSQL_HAZ_TABLA"` SET tulaj = '%s', TulajID = '%d' WHERE id = '%d'",JatekosNev(playerid), PlayerInfo[playerid][pID], houseid);
			mysql_tquery(sql_ID, query, "", "");

			HazInfo[houseid][hTulajID] = PlayerInfo[playerid][pID];
			PlayerInfo[playerid][pBszPenz] -= HazInfo[houseid][hazar];

			SFM(playerid, COL_MKEK, "Sikeresen megvetted a házat "#COL_MKEK"%s"#COL_FEHER"$-ért!", FN(HazInfo[houseid][hazar], 0, ','));

			format(HazInfo[houseid][tulaj], MAX_PLAYER_NAME, JatekosNev(playerid));

			DestroyDynamicPickup(HazInfo[houseid][pickup]);
			HazInfo[houseid][pickup] = CreateDynamicPickup(HAZ_MEGVETT_MODEL,23,HazInfo[houseid][posx],HazInfo[houseid][posy],HazInfo[houseid][posz],0,0,-1);
			Streamer_Update(playerid);
			Adat_Update( playerid, ADAT_HAZ );

		} else
			return SCM(playerid, COL_LRED, "Elérted a maximális megvehetõ házak számát, ha többet szeretnél támogasd a szervert! (UserCP -> Támogatás)");
		return true;
	}
	else if(!strcmp(param, "széf", true) || !strcmp(param, "szef", true))
	{
		if(!Admin(playerid, AC_SZINT) && !PlayerInfo[playerid][pAduty] || !IsScripter(playerid))
		{
			new hazszef = HazSzef(playerid);

			if(hazszef == -2)
				return SCM(playerid, COL_LRED, "Neked még nincs házad!");
			if(hazszef == NINCS)
				return SCM(playerid, COL_LRED, "Nem vagy a házadban!");
			if(hazszef == -3)
				return SCM(playerid, COL_LRED, "Még nem vettél széfet! (( /bútor ))");

		}

		if(PlayerInfo[playerid][phaz] == NINCS)
			return SCM(playerid, COL_LRED, "Nem vagy házban!");

		ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF, DIALOG_STYLE_LIST, #COL_NARANCS"Széf "#COL_SZURKE"kezelés: "#COL_FEHER"Válassz a listából!", \
		"Pénz\nKokain\nHeroin\nMarihuana\nMaterial\nFegyver széf\nStatisztika", "Mehet", "Mégse");
		//ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF, DIALOG_STYLE_LIST, #COL_NARANCS"Széf "#COL_SZURKE"kezelés", "Lerak\nTörlés\nÁthelyezés", "Mehet", "Mégse");
		return true;
	}
	return true;
}

CMD:szef(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new i = -1, num = 0, form[128], frakciok[512];

	for(;++i < MAX_FRAKCIO;)
	{
		if(FInfo[i][fVan])
		{
			format(form, sizeof(form), "%s\n", FInfo[i][fNev]);
			strins(frakciok, form, strlen(frakciok));
			num++;
		}
	}
	if(!num)
		return SCM(playerid, COL_MKEK, "Nincs frakció létrehozva!");

	ShowPlayerDialog(playerid, DIALOG_FRAKCIO_VALASZTAS, DIALOG_STYLE_LIST, #COL_NARANCS"Frakció "#COL_SZURKE"kezelés", frakciok, "Mehet", "Mégse");

	return true;
}

CMD:frakcio(playerid, params[])///fr fegyver
{
	if(!Admin(playerid, 1) && !PlayerInfo[playerid][pFrakcio])
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
	{
	    SCM(playerid, COL_MKEK, "Használat: /(f)ra(k)ció [ Paraméterek ]");
	    if(Admin(playerid,AC_SZINT)) {
		    SCM(playerid, COL_MKEK, "[Paraméterek]: Tagok, Széf, Fegyver, Lista, Nevek | Leader: Rang, Felvesz, Kirúg, RangNév, Fizetés, MaxRang, SMS");
			SCM(playerid, COL_MKEK, "[Admin Paraméterek]: FrakcióNév, Új, Töröl, Tipus, Limit");
		} else
		    SCM(playerid, COL_MKEK, "[Paraméterek]: Tagok, Széf, Fegyver, Lista, Nevek | Leader: Rang, Felvesz, Kirúg, RangNév, Fizetés, MaxRang, SMS");

		return true;
	}

	new param[24];
	sscanf(params, "s[24]{}", param);

	if(!strcmp(param, "új", true) || !strcmp(param, "uj", true))
	{
		if(!IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Csak Scripter hozhat létre új frakciót!");

		new nev[20], tipus;
		if(sscanf(params, "{s[24]}ds[20]", tipus, nev))
			return SCM(playerid, COL_MKEK, "Használat: /(f)ra(k)ció [Tipus(1 = Legális | 2 = Maffia | 3 = Banda | 4 = Rendvédelem)] [FrakcióNév]");

		if(tipus != 1 && tipus != 2 && tipus != 3 && tipus != 4)
			return SCM(playerid, COL_LRED, "Hibás típus! 1 = Legális | 2 = Maffia | 3 = Banda | 4 = Rendvédelem");

		new k = 0, u = -1;
		for(;++k < MAX_FRAKCIO;)
		{
			if(!FInfo[k][fVan])
			{
				u = k;
				break;
			}
		}

		if(u == -1)
			return SCM(playerid, COL_LRED, "Nem tudsz több frakciót létrehozni!");

		new f = 0, num = 1, rangok[20];

		for(;++f < 11;)
		{
			format(rangok, 20, "Rang%d", num);
			format(FInfo[u][fkInfo:f], 20, rangok);
			num++;
		}

		if(Karakter_Ellenorzes(nev))
			return SCM(playerid, COL_LRED, "Helytelen karakterek a szövegben! ( /,|,*,', stb)");

		format(FInfo[u][fNev], 20, nev);
		FInfo[u][fLegalis] = tipus;
		FInfo[u][fVan] = true;

		nformat(fquery, 256, "INSERT INTO `"#MYSQL_FRAKCIO_TABLA"` (ID, FNev, Legalis) VALUES ('%d', '%s', '%d')", u, nev, FInfo[u][fLegalis]);
		mysql_tquery(sql_ID, fquery, "", "");

		SendFormatMessage(playerid, COLOR_MKEK, "Sikeresen létrehoztad a(z) %s nevû frakciót! [SQLID: %d | Típus: %s]", nev, u, FrakcioTipus( FInfo[u][fLegalis] ) );
		return true;
	}
	else if(!strcmp(param, "töröl", true) || !strcmp(param, "torol", true))
	{
		if(!IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Csak Scripter törölhet frakciót!");

		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /(f)ra(k)ció töröl [Frakció ID]");

		if(!FInfo[id][fVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen frakció létrehozva!");

		if(PlayerInfo[playerid][pMegerosites] == NINCS)
		{
			SCM(playerid, COL_LRED, "Biztos, hogy törölni szeretnéd a frakciót? Ha igen, írd be újra!");
			PlayerInfo[playerid][pMegerosites] = playerid;
			return true;
		}

		PlayerInfo[playerid][pMegerosites] = NINCS;

		doQuery("DELETE FROM `"#MYSQL_FRAKCIO_TABLA"` WHERE ID = '%d'", id);
		doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pfrakcio = '0', prang = '0' WHERE pfrakcio = '%d'", id);

		foreach(Player, i)
		{
			if(!Belepve(i)) continue;
			if(PlayerInfo[i][pFrakcio] == id)
			{
				SFM(i, COL_LRED, "%s %s törölte a frakciódat ezért a rendszer automatikusan kirúgott!", AdminRang(playerid), JatekosNev(playerid));
				PlayerInfo[i][pFrakcio] = 0;
				PlayerInfo[i][prang] = 0;
			}
		}

		SendFormatMessage(playerid, COLOR_MKEK, "Frakció sikeresen törölve! Név: %s | Adatbázis ID: %d", FInfo[id][fNev], id);
		FInfo[id][fVan] = false;
		return true;
	}
	else if(!strcmp(param, "nevek", true)) return cmd_nevek(playerid, "");
	else if(!strcmp(param, "fegyver", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, PosExt(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefPos])))
			return SCM(playerid, COL_MKEK, "Nem vagy széf közelben!");

		new fegyv[1024], form[64], i = -1; //Név [lõszer]

		PlayerInfo[playerid][pSzefFegyver] = 0;

		for(;++i < 10;)
		{
			if(FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][i])
				format(form, 64, #COL_VZOLD"[%d] %s [%d]\n", i, aWeaponNames[FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][i]], FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][i]);
			else
				format(form, 64, #COL_VKEK"[%d] Üres\n", i);

			strins(fegyv, form, strlen(fegyv));
		}
		strins(fegyv, "Tovább", strlen(fegyv));

		new cim[64];
		format(cim, 64, #COL_NARANCS"Válassz "#COL_SZURKE"fegyvert! "#COL_FEHER"(%d/5)", (PlayerInfo[playerid][pSzefFegyver] + 1));

		ShowPlayerDialog(playerid, DIALOG_FRAKCIO_FEGYVEREK, DIALOG_STYLE_LIST, cim, fegyv, "Mehet", "Mégse");
		return true;
	}
	else if(!strcmp(param, "széf", true) || !strcmp(param, "szef", true))
	{
		if(!PlayerInfo[playerid][pFrakcio])
			return SCM(playerid, COL_LRED, "Nem vagy frakcióban!");

		if((!IsPlayerInRangeOfPoint(playerid, 2.0, PosExt(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefPos])) && FInfo[PlayerInfo[playerid][pFrakcio]][fSzefObject]) || !FInfo[PlayerInfo[playerid][pFrakcio]][fSzefObject])
			return SCM(playerid, COL_MKEK, "Nem vagy széf közelben!");

		ShowPlayerDialog(playerid, DIALOG_FRAKCIO_SZEF, DIALOG_STYLE_LIST, #COL_FEHER"Válassz a listából!", \
		"Pénz\nKokain\nHeroin\nMarihuana\nMaterial\ntraffipax\nStatisztika\nMinimum rang", "Mehet", "Mégse");

		return true;
	}
	else if(!strcmp(param, "fizetesek", true) || !strcmp(param, "fizetések", true))
	{
		if(!PlayerInfo[playerid][pFrakcio])
			return SCM(playerid, COL_LRED, "Nem vagy egyik szervezet tagja sem!");

		new i = NINCS;
		for(;++i < 16;)
			SendFormatMessage(playerid, COLOR_WHITE, "[%d]%s - "#COL_MKEK"%s"#COL_FEHER"$", (i + 1), Rangok((i + 1), PlayerInfo[playerid][pFrakcio]), FN(FInfo[ PlayerInfo[playerid][pFrakcio] ][fFizetes][i], 0, ','));
	}
	else if(!strcmp(param, "maxrang", true))
	{
		if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, AC_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");
		new mennyi;
		if(sscanf(params,"{s[24]}d",mennyi)) return SCM(playerid,COL_LRED,"Használat: /frakcio maxrang [ összeg ]");
		if(mennyi > 16 || mennyi < 0) return SCM(playerid,COL_LRED,"0-16 között!");
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fMaxRang] = mennyi;
		FkUpdate(PlayerInfo[playerid][pFrakcio],fmaxrang);
		SFM(playerid,COL_MKEK,"Átállítottad a frakciód max rangját %d -re",mennyi);
		return true;
	}
	else if(!strcmp(param, "fizetés", true) || !strcmp(param, "fizetes", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, AC_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");

		new rang, ertek;
		if(sscanf(params, "{s[24]}dd", rang, ertek))
			return SCM(playerid, COL_MKEK, "Használat: /frakcio Fizetés [Rang(1-16)] [Összeg]");
		if(rang < 1 || rang > 16)
			return SCM(playerid, COL_LRED, "A rang minimum 1 és maximum 16 lehet!");
	    if(ertek < 0 || ertek > 2200)
			return SCM(playerid, COL_LRED, "A fizetés összege minimum 0 és maximum 2 200$ lehet!");

		rang -= 1;

		SFM(playerid, COL_MKEK, "Átállítottad a(z) [%d]%s rang fizetését! Régi: %s$ | Új: %s$", (rang + 1), Rangok((rang + 1), PlayerInfo[playerid][pFrakcio]), FN(FInfo[ PlayerInfo[playerid][pFrakcio] ][fFizetes][rang], 0, ','), FN(ertek, 0, ','));
		nformat(str, 256, "<< "#COL_MKEK"%s"#COL_FEHER" átállította a(z) %s rang fizetését! Régi: %s$ | Új: %s$ >>", JatekosNev(playerid, true), Rangok((rang + 1), PlayerInfo[playerid][pFrakcio]), FN(FInfo[PlayerInfo[playerid][pFrakcio]][fFizetes][rang], 0, ','), FN(ertek, 0, ','));
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fFizetes][rang] = ertek;
		FkUpdate(PlayerInfo[playerid][pFrakcio], fuFizetes);
		FrakcioUzenet(COLOR_WHITE, PlayerInfo[playerid][pFrakcio], str);
	}
	else if(!strcmp(param, "típus", true) || !strcmp(param, "tipus", true))
	{
	    if(!Admin(playerid, AC_SZINT))
			return SCM(playerid, COL_LRED, "Csak Scripter állíthatja át a frakció típusát!");

		new fk, ertek;
		if(sscanf(params, "{s[24]}dd", fk, ertek))
			return SCM(playerid, COL_MKEK, "Használat: /frakcio típus [FrakcióID] [Típus(1 = Legális | 2 = Maffia | 3 = Banda | 4 = Rendvédelem)]");
		if(ertek != 1 && ertek != 2 && ertek != 3 && ertek != 4)
			return SCM(playerid, COL_LRED, "Hibás típus! 1 = Legális | 2 = Maffia | 3 = Banda | 4 = Rendvédelem");
	    if(fk < 1 || fk > MAX_FRAKCIO || !FInfo[fk][fVan])
			return SCM(playerid, COL_LRED, "Hibás frakció!");

		//(ertek == 1 ? ("Legális") : (ertek == 2 ? ("Maffia") : ("Banda")))
		SFM(playerid, COL_MKEK, "%s frakció típusa átváltva erre: "#COL_MKEK"%s", FInfo[fk][fNev], FrakcioTipus( ertek ));
		FInfo[fk][fLegalis] = ertek;
		FkUpdate(fk, fuLegalis);
	}
	else if(!strcmp(param, "limit", true))
	{
	    if(!Admin(playerid, AC_SZINT))
			return SCM(playerid, COL_LRED, "Admincontroller adminszinttõl!");

		new fk, ertek;
		if(sscanf(params, "{s[24]}dd", fk, ertek))
			return SCM(playerid, COL_MKEK, "Használat: /frakcio limit [FrakcióID] [Limit (10 - 50)]");
		if(ertek > 50 || ertek < 10)
			return SCM(playerid, COL_LRED, "Hibás limit! Minimum 10 és maximum 50 lehet!");
	    if(fk < 1 || fk > MAX_FRAKCIO || !FInfo[fk][fVan])
			return SCM(playerid, COL_LRED, "Hibás frakció!");

		SFM(playerid, COL_MKEK, "%s frakció limit frissítve! Régi: "#COL_MKEK"%d"#COL_FEHER" | Új: "#COL_MKEK"%s", FInfo[fk][fNev], FInfo[fk][fLimit], ertek);
		FInfo[fk][fLimit] = ertek;
		FkUpdate(fk, fuLimit);
	}
    else if(!strcmp(param, "rang", true) || !strcmp(param, "giverank", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");

		new rang, jatekos, oka[64];
		if(sscanf(params, "{s[24]}uds[64]", jatekos, rang, oka))
			return SFM(playerid, COL_MKEK, "Használat: /frakcio rang [Játékos] [Rang (1-%d)] [Oka]",FInfo[ PlayerInfo[playerid][pFrakcio] ][fMaxRang]);
		if(!OOC_Ellenorzes(playerid, "/frakció rang", oka))
			return true;
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		if(rang < 1 || rang > FInfo[ PlayerInfo[playerid][pFrakcio] ][fMaxRang])
			return SFM(playerid, COL_LRED, "A rang minimum 1 és maximum %d lehet!",FInfo[ PlayerInfo[playerid][pFrakcio] ][fMaxRang]);
	    if(strlen(oka) > 64)
			return SCM(playerid, COL_LRED, "Az ok maximum 64 karakter lehet!");
		if(PlayerInfo[jatekos][pFrakcio] != PlayerInfo[playerid][pFrakcio])
		    return SCM(playerid, COL_LRED, "Ez a játékos nem tagja a frakciódnak!");

		PlayerInfo[jatekos][prang] = rang;
		SFM(jatekos, COL_VZOLD, "Új rangot kaptál tõle: %s | Rang: [%d]%s | Oka: %s", JatekosNev(playerid), rang, Rangok(rang, PlayerInfo[jatekos][pFrakcio]), oka);
		SFM(playerid, COL_VZOLD, "Új rangot adnál neki: %s | Rang: [%d]%s | Oka: %s", JatekosNev(jatekos), rang, Rangok(rang, PlayerInfo[jatekos][pFrakcio]), oka);
	}
	else if(!strcmp(param, "kirúg", true) || !strcmp(param, "kirug", true) || !strcmp(param, "uninvite", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");

		new jatekos;
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /frakció Kirúg [Játékos]");
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][pFrakcio] != PlayerInfo[playerid][pFrakcio])
		    return SCM(playerid, COL_LRED, "Ez a játékos nem a frakciód tagja!");

        if(PlayerInfo[jatekos][prang] == 10 && !Admin(playerid, FOADMIN_SZINT))
		    return SCM(playerid, COL_LRED, "Frakció leadert nem rúghatsz ki!");

		if(IllegalisFrakcioTag(jatekos) && PlayerInfo[jatekos][pVerdij] < 1)
		{
			format(PlayerInfo[jatekos][pVerdijOk], 32, "Likvidálás(R)");
			PlayerInfo[jatekos][pVerdij] += (Rand(10000,15000));
		}
		PlayerInfo[jatekos][prang] = 0;
		PlayerInfo[jatekos][pFrakcio] = 0;
		PlayerInfo[jatekos][pDutySkin] = 0;
		PlayerInfo[jatekos][pLeader] = 0;
		SFM(jatekos, COL_VZOLD, "%s kirúgott téged a frakcióbol!", JatekosNev(playerid));
		SFM(playerid, COL_VZOLD, "Kirúgtad %st a frakcióbol!", JatekosNev(jatekos));
	}
	else if(!strcmp(param, "felvesz", true) || !strcmp(param, "invite", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");

		new jatekos;
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /frakció Felvesz [Játékos]");
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][pFrakcio] == PlayerInfo[playerid][pFrakcio])
		    return SCM(playerid, COL_LRED, "Ez a játékos jelenleg is a frakciód tagja!");

        if(PlayerInfo[jatekos][pFrakcio] != 0)
		    return SCM(playerid, COL_LRED, "Ez a játékos már tagja egy szervezetnek!");

		if(PlayerInfo[jatekos][pTiltasok][TILTAS_FRAKCIO] > 0)
		{
			return SFM(playerid,COL_LRED,"Ezt a játékost nem veheted fel mivel még %d percig Frakció csatlakozási tiltása van!",PlayerInfo[jatekos][pTiltasok][TILTAS_FRAKCIO]/60);
		}
		PlayerInfo[jatekos][prang] = 1;
		PlayerInfo[jatekos][pFrakcio] = PlayerInfo[playerid][pFrakcio];
		PlayerInfo[jatekos][pLeader] = 0;

		SFM(jatekos, COL_VZOLD, "%s felvett téged a(z) %s frakcióba!", JatekosNev(playerid), FInfo[ PlayerInfo[playerid][pFrakcio] ]);
		SFM(playerid, COL_VZOLD, "Felvetted õt: %s a frakcióba!", JatekosNev(jatekos));
	}
	else if(!strcmp(param, "rangnév", true) || !strcmp(param, "rangnev", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, RENDSZG_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");

	    new rang, rangnev[20];
	    if(sscanf(params, "{s[24]}ds[20]", rang, rangnev))
			return SCM(playerid, COL_MKEK, "Használat: /frakció RangNév [Rang] [Neve]");
		if(strlen(rangnev) > 18)
		    return SCM(playerid, COL_LRED, "A rang neve maximum 18 karakter lehet!");
		if(!OOC_Ellenorzes(playerid, "/frakció rangnév", rangnev))
			return true;

		if(Karakter_Ellenorzes(rangnev))
			return SCM(playerid, COL_LRED, "Helytelen karakterek a szövegben! ( /,|,*,', stb)");

		new frakcio = PlayerInfo[playerid][pFrakcio];
		switch( rang )
		{
			case 1: { FInfo[frakcio][fRang1] = rangnev; FkUpdate(frakcio, fuRang1); }
			case 2: { FInfo[frakcio][fRang2] = rangnev; FkUpdate(frakcio, fuRang2); }
			case 3: { FInfo[frakcio][fRang3] = rangnev; FkUpdate(frakcio, fuRang3); }
			case 4: { FInfo[frakcio][fRang4] = rangnev; FkUpdate(frakcio, fuRang4); }
			case 5: { FInfo[frakcio][fRang5] = rangnev; FkUpdate(frakcio, fuRang5); }
			case 6: { FInfo[frakcio][fRang6] = rangnev; FkUpdate(frakcio, fuRang6); }
			case 7: { FInfo[frakcio][fRang7] = rangnev; FkUpdate(frakcio, fuRang7); }
			case 8: { FInfo[frakcio][fRang8] = rangnev; FkUpdate(frakcio, fuRang8); }
			case 9: { FInfo[frakcio][fRang9] = rangnev; FkUpdate(frakcio, fuRang9); }
			case 10: { FInfo[frakcio][fRang10] = rangnev; FkUpdate(frakcio, fuRang10); }
			case 11: { FInfo[frakcio][fRang11] = rangnev; FkUpdate(frakcio, fuRang11); }
			case 12: { FInfo[frakcio][fRang12] = rangnev; FkUpdate(frakcio, fuRang12); }
			case 13: { FInfo[frakcio][fRang13] = rangnev; FkUpdate(frakcio, fuRang13); }
			case 14: { FInfo[frakcio][fRang14] = rangnev; FkUpdate(frakcio, fuRang14); }
			case 15: { FInfo[frakcio][fRang15] = rangnev; FkUpdate(frakcio, fuRang15); }
			case 16: { FInfo[frakcio][fRang16] = rangnev; FkUpdate(frakcio, fuRang16); }
			default: return SCM(playerid, COL_LRED, "Helytelen rang, minimum 1 és maximum 16 lehet!");
		}

		SFM(playerid, COL_MKEK, "Rangnév váltás sikeres! Rang: "#COL_MKEK"%d"#COL_FEHER" | Neve: "#COL_MKEK"%s", rang, rangnev);
	}
	else if(!strcmp(param, "frakciónév", true) || !strcmp(param, "frakcionev", true))
	{
	    if(!Admin(playerid, AC_SZINT))
			return SCM(playerid, COL_LRED, "Csak Scripter nevezhet át frakciót!");

	    new frakcio, fneve[32];
	    if(sscanf(params, "{s[24]}ds[32]", frakcio, fneve))
			return SCM(playerid, COL_MKEK, "Használat: /frakció FrakcióNév [FrakcióID] [Neve]");

		if(strlen(fneve) > 20)
		    return SCM(playerid, COL_LRED, "A rang neve maximum 20 karakter lehet!");

        if(!FInfo[frakcio][fVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen frakció betöltve!");

		if(Karakter_Ellenorzes(fneve))
			return SCM(playerid, COL_LRED, "Helytelen karakterek a szövegben! ( /,|,*,', stb)");

        FInfo[frakcio][fNev] = fneve;
		FkUpdate(frakcio, fuNev);
		SFM(playerid, COL_MKEK, "Frakciónév váltás sikeres! Frakció: "#COL_MKEK"%d"#COL_FEHER" | Neve: "#COL_MKEK"%s", frakcio, fneve);
	}
	else if(!strcmp(param, "lista", true))
	{
	    new ls = 0, str[1024];
		new cnt = 0;
	    for(;++ls < MAX_FRAKCIO;)
	    {
	        if(!FInfo[ls][fVan]) continue;

           	if(cnt == 0)
 				format(str,sizeof(str),"ID: %d | Név: %s | Típus: %s | Limit: %d",ls,FInfo[ls][fNev], FrakcioTipus( FInfo[ls][fLegalis] ), FInfo[ls][fLimit]);
			else
			    format(str,sizeof(str),"%s\n ID: %d | Név: %s | Típus: %s | Limit: %d",str, ls,FInfo[ls][fNev], FrakcioTipus( FInfo[ls][fLegalis] ), FInfo[ls][fLimit]);
				    
			cnt++;
	    }
	    ShowPlayerDialog(playerid,DIALOG_NINCS,DIALOG_STYLE_MSGBOX,"Frakciók",str,"Bezárás", "");
	}
	else if(!strcmp(param, "tagok", true))
	{
	    new frakcio = NINCS;
	    if(Admin(playerid, 1))
		{
	        SCM(playerid, COL_MKEK, "Használat: /frakció Tagok [FrakcióID] (Admin funkció)");
			sscanf(params, "{s[24]}D(-1)", frakcio);
		}
	    if(frakcio == NINCS) frakcio = PlayerInfo[playerid][pFrakcio];
	    if(!FInfo[frakcio][fVan])
			return SCM(playerid, COL_LRED, "Hibás frakció!");

	    SendFormatMessage(playerid, COLOR_WHITE, "========== [ "#COL_MKEK"%s tagok"#COL_FEHER" ] ==========", FInfo[frakcio][fNev]);
	    foreach(Player, p)
	    {
	        if(Belepve(p) && PlayerInfo[p][pFrakcio] == frakcio)
	        {
	        	SendFormatMessage(playerid, COLOR_WHITE, "Név: "#COL_MKEK"%s"#COL_FEHER" | Rang: [%d]"#COL_MKEK"%s"#COL_FEHER"%s | Telefonszám: %d", JatekosNev(p), PlayerInfo[p][prang], Rangok(PlayerInfo[p][prang], PlayerInfo[p][pFrakcio]), (PlayerInfo[p][pSzunetel] ? (" | AFK") : ("")),PlayerInfo[p][pCuccok][BL_TELEFON]);
			}
	    }

	}
	else if(!strcmp(param, "SMS", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 &&  !Admin(playerid, AC_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");

	    new text[256];
	    if(sscanf(params, "{s[24]}s[20]", text))
			return SCM(playerid, COL_MKEK, "Használat: /frakció SMS [SMS szövege]");

	    new frakcio = NINCS;
	    if(frakcio == NINCS) frakcio = PlayerInfo[playerid][pFrakcio];
	    if(!FInfo[frakcio][fVan])
			return SCM(playerid, COL_LRED, "Hibás frakció!");

        if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] < 10)
            return SCM( playerid, COL_LRED, "Nincs elég pénz a frakciód széfjében (min. $10.)");

	    foreach(Player, p)
	    {
	        if(Belepve(p) && PlayerInfo[p][pFrakcio] == frakcio && PlayerInfo[p][pCuccok][BL_TELEFON] != 0 && p != playerid && !PlayerInfo[playerid][pTog][5])
	        {
	        	SendFormatMessage(p, COLOR_YELLOW, "FSMS: %s", text);
	        }
		}
		SendFormatMessage(playerid, COLOR_YELLOW, "KörSMS elküldve: %s", text);
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] -= 10;
	}
	return true;
}

CMD:war(playerid, params[])
{

	if(!PlayerInfo[playerid][pFrakcio] || FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_LEGAL)
		return SCM(playerid, COL_LRED, "Nem vagy egyik banda tagja sem!");

	if(PlayerInfo[playerid][pLeader] == 0)
		return SCM(playerid, COL_LRED, "Csak Leader vagy AlLeader indíthatja el!");

	new teruletek = FrakcioTeruletek( PlayerInfo[playerid][pFrakcio] );
	if(teruletek >= MAX_FRAKCIO_TERULET)
		return SFM(playerid, COL_MKEK, "Jelenleg "#COL_MKEK"%d"#COL_FEHER"db területetek van! Maximum "#COL_MKEK"%d"#COL_FEHER"db területet birtokolhattok!", teruletek, MAX_FRAKCIO_TERULET);

	new terulet = TeruletArenaID(playerid);
	if(terulet == NINCS)
		return SCM(playerid, COL_MKEK, "Nem vagy egyik területen se, így nem indíthatod el a harcot!");

	if(tInfo[terulet][tHarcFolyik])
		return SCM(playerid, COL_MKEK, "Ezen a területen jelenleg harcolnak, így nem indíthatod el a harcot!");

	if(tInfo[terulet][tFrakcio] == PlayerInfo[playerid][pFrakcio])
		return SCM(playerid, COL_MKEK, "Saját területeden nem indíthatsz wart!");

	if(FInfo[ tInfo[terulet][tFrakcio] ][fLegalis] != FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis])
		return SCM(playerid, COL_MKEK, "Ezt a területet nem támadhatjátok be! Banda csak bandával, Maffia csak maffiával harcolhat!");

	if(ServerInfo[sHarcVan] != NINCS)
		return SCM(playerid, COL_MKEK, "Amíg egy területen harc folyik, nem indíthatot el!");

	new kulonbseg = (gettime() - FInfo[ PlayerInfo[playerid][pFrakcio] ][fUtolsoTamadas]);
	if(kulonbseg < TERULET_VARAKOZAS_FRAKCIO)
		return SFM(playerid, COL_MKEK, "Nem rég harcoltatok! A következõ támadás "#COL_MKEK"%d"#COL_FEHER"perc múlva indítható!",(TERULET_VARAKOZAS_FRAKCIO - kulonbseg) / 60);

	new barat, ellenseg;
	foreach(Player, p)
	{
		if(!Belepve(p))
			continue;

		if(PlayerInfo[p][pFrakcio] == PlayerInfo[playerid][pFrakcio])
			barat++;
		else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tFrakcio])
			ellenseg++;
	}

    if(barat < MIN_WAR_EMBER)
		return SFM(playerid, COL_MKEK, "A harc indításához legalább "#COL_MKEK"%d"#COL_FEHER" ember szükséges, jelenleg "#COL_MKEK"%d"#COL_FEHER"fõ van.", MIN_WAR_EMBER, barat);

	if(ellenseg < MIN_WAR_EMBER)
		return SFM(playerid, COL_MKEK, "A harc indításához legalább "#COL_MKEK"%d"#COL_FEHER" ember szükséges az ellenféltõl is!", MIN_WAR_EMBER);

	new mikor = (gettime() - tInfo[terulet][tFoglalasIdo]);
	new mennyi = TERULET_VARAKOZAS - mikor;

	if(mikor < TERULET_VARAKOZAS)
		return SFM(playerid, COL_MKEK, "A területet nem régiben (%d perce) foglalták el! Legközelebb "#COL_MKEK"%d"#COL_FEHER" perc múlva lesz lehetséges a foglalás.", (mikor / 60), (mennyi / 60));

	//if(!strval(params) || (strval(params) != 0 && strval(params) != 1))
		//return SendClientMessage(playerid, COLOR_WHITE, "Használat: /war [Típus (0 = Ököl) / (1 = Fegyver)]");

	tInfo[terulet][tVarakozasIdo] = 900;//900 - 15p
	tInfo[terulet][tHarcolok][VEDOK] = tInfo[terulet][tFrakcio]; // Védõk
	tInfo[terulet][tHarcolok][TAMADOK] = PlayerInfo[playerid][pFrakcio]; // Támadók
	//tInfo[terulet][tTipus] = strval(params);
	tInfo[terulet][tTipus] = 1;//fegyveres harc

	foreach(Player, play)
	{
	    if(!Belepve(play)) continue;
		if(PlayerInfo[play][pFrakcio] == tInfo[terulet][tFrakcio])
		{
			SendClientMessage(play, COLOR_WHITE, "==========[ "#COL_MKEK"MEGTÁMADTAK!"#COL_FEHER" ]==========");
			SendFormatMessage(play, COLOR_LIGHTRED, "%s megtámadta a(z) %s területeteket!", FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev], tInfo[terulet][tNev]);
			SendFormatMessage(play, COLOR_LIGHTRED, "Ha nem megy oda legalább egy tagotok akkor %s megszerzi a területet!", FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev]);
			//SendClientMessage(play, COLOR_LIGHTRED, (tInfo[terulet][tTipus] ? ("Fegyveres háború lesz!") : ("Fegyvernélküli háború lesz!")));
		}
		else if(PlayerInfo[play][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
		{
			SendClientMessage(play, COLOR_WHITE, "==========[ "#COL_MKEK"FIGYELEM!"#COL_FEHER" ]==========");
			SendFormatMessage(play, COLOR_LIGHTRED, "Megtámadtátok a(z) %s területet - A területet jelenleg a(z) %s birtokolja!", tInfo[terulet][tNev], FInfo[ tInfo[terulet][tHarcolok][VEDOK] ][fNev]);
			SendFormatMessage(play, COLOR_LIGHTRED, "Ha nem mentek harcolni a(z) %s terület %s birtokában marad!", tInfo[terulet][tNev], FInfo[ tInfo[terulet][tHarcolok][VEDOK] ][fNev]);
			//SendClientMessage(play, COLOR_LIGHTRED, (tInfo[terulet][tTipus] ? ("Fegyveres háború lesz!") : ("Fegyvernélküli háború lesz!")));
		}
	}

	ServerInfo[sHarcVan] = terulet;
	FInfo[ PlayerInfo[playerid][pFrakcio] ][fUtolsoTamadas] = gettime();

	return true;

}

CMD:gps(playerid, params[])
{
	if(!PlayerInfo[playerid][pCuccok][BL_GPS])
		return SCM(playerid, COL_LRED, "Még nem vettél GPS-t!");

	if(dolgozik[playerid] == 1)
	    return SCM(playerid,COL_LRED,"Jelenleg nem használhatod, elõször /munka befejez!");
	if(isnull(params))
	{
		SCM(playerid, COL_MKEK, "Használat: /gps [ Lista / Kocsim / Verseny / Töröl ]");
		return true;
	}
	if(!strcmp(params, "töröl") || !strcmp(params, "torol"))
	{
		RemovePlayerMapIcon(playerid, CP_GPS);
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		PlayerInfo[playerid][pCP] = 0;
		return true;
	}
	else if(!strcmp(params, "kocsim", true, 6))
	{
		if(!Adat_Num( playerid, ADAT_JARMU ))
			return SCM(playerid, COL_LRED, "Neked nincs jármûved!");

		new db = 1;
		sscanf(params, "{s[6]}D(1)", db);
		if(db > 3 || db < 1)
			return SCM(playerid, COL_LRED, "Hibás érték! (1/2/3) (( /gps kocsim [Száma] ))");

		if(PlayerInfo[playerid][pJarmuKulcs][db - 1] == NINCS || !vInfo[ PlayerInfo[playerid][pJarmuKulcs][db - 1] ][vHasznalva])
			return SFM(playerid, COL_LRED, "Neked nincs "#COL_MKEK"%d."#COL_FEHER" számú jármûved!", db);

		new Float:pos[3];
		GetVehiclePos(vInfo[ PlayerInfo[playerid][pJarmuKulcs][db - 1] ][vID], PosExt(pos));

		PlayerInfo[playerid][pCP] = CP_GPS;
		SetPlayerCheckpoint(playerid, PosExt(pos), 3);
		SCM(playerid, COL_VZOLD, "Jármûved koordinátái megjelölve a GPS-en!");
		return true;
	}
	else if(!strcmp(params, "verseny", true, 7))
	{
		new id;
		if(sscanf(params, "{s[7]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /gps verseny [Slot] | Lista: /verseny lista");

		if(id > MAX_RACE || id < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 4!");

		if(!Race[id][rVan] || Race[id][rStatusz] != RACE_INDUL)
			return SCM(playerid, COL_LRED, "Nincs ilyen induló verseny!");

		PlayerInfo[playerid][pCP] = CP_GPS;
		SetPlayerCheckpoint(playerid, Race[id][rPosx][0], Race[id][rPosy][0], Race[id][rPosz][0], 10);
		return 1;
	}
	else if(!strcmp(params, "ház", true, 3) || !strcmp(params, "haz", true, 3))
	{
		new hazszam;
		if(sscanf(params, "{s[3]}d", hazszam))
			return SCM(playerid, COL_MKEK, "Használat: /gps ház [házszám]");

		if(hazszam < 0 || hazszam >= sizeof(HazInfo))
			return SCM(playerid, COL_LRED, "Nincs ilyen ház!");

		if(!HazInfo[hazszam][hasznalatban])
			return SCM(playerid, COL_LRED, "Nincs ilyen ház!");

		PlayerInfo[playerid][pCP] = CP_GPS;
		SetPlayerCheckpoint(playerid, HazInfo[hazszam][posx], HazInfo[hazszam][posy], HazInfo[hazszam][posz], 3);
		return true;
	}
	else if(!strcmp(params,"lista",true,3))
	{
		new
			i = -1,
			listitemid = 0,
			gps[128],
			gpsek[2048];

		for(;++i < MAXGPS;)
		{
			if(GPSInfo[i][gHasznalva])
			{
				GPSInfo[i][listid] = listitemid;
				if(PlayerInfo[playerid][padmin] >= FOADMIN_SZINT)
					format(gps, sizeof(gps), "[%d] %s\n",i, GPSInfo[i][gnev]);
				else
					format(gps, sizeof(gps), "%s\n", GPSInfo[i][gnev]);

				strins(gpsek, gps, strlen(gpsek));
				listitemid++;
			}
		}
		ShowPlayerDialog(playerid, DIALOG_GPSEK, DIALOG_STYLE_LIST, "GPS System", gpsek, "Tervezés", "Mégse");
		return true;
	}
	/*------------------------- Munkák vége ----------------------------*/
	return true;
}

CMD:tog(playerid, params[])
{
	if(isnull(params))
	{
	    new funkciok[2][ 128 ];
		format(funkciok[0], 128, "Rádió / OOC / Beszédanim / Telefon / Riporter / B(folyamatos OOC) / Hírdetés / Ajtó / AdminCPk");
		if(Admin(playerid, 1))
  		{
            if(!IsScripter(playerid) && PlayerInfo[playerid][padmin] == 4) //Ha 4-es admin
			    format(funkciok[1], 128, "Válaszok / Admin / Report / Alefoglal");
			else if(Admin(playerid, 5) && !IsScripter(playerid))
				format(funkciok[1], 128, "Válaszok / Admin / Report / Alefoglal");
			else if(Admin(playerid,FOADMIN_SZINT) && !IsScripter(playerid))
                format(funkciok[1], 128, "Válaszok / Admin / Report / Alefoglal / PM");
			else if(IsScripter(playerid))
				format(funkciok[1], 128, "Válaszok / Admin / Report / Alefoglal / PM / Törés");
		}
		else if(IsAS(playerid)) //Ha adminsegéd
			format(funkciok[1], 128, "Válaszok");
			
  		SFM(playerid, COL_LKEK, "Használat: /tog [ %s ]", funkciok[0]);
  		if(strlen(funkciok[1]) > 0)
  		    SFM(playerid, COL_LKEK, "[ADMIN / AS]Használat: /tog [ %s ]", funkciok[1]);
  		    
		return true;
	}

	if(!strcmp(params, "rádió", true) || !strcmp(params, "radio", true))
	{
		if(!PlayerInfo[playerid][pFrakcio])
			return SCM(playerid, COL_LRED, "Te nem vagy frakcióban, így nem tudod kikapcsolni a rádiódat!");

		if((PlayerInfo[playerid][pTog][0] = true - PlayerInfo[playerid][pTog][0]))
			SCM(playerid, COL_MKEK, "Mostantól nem látod a frakciós IC és OOC rádiókat!");
		else
			SCM(playerid, COL_MKEK, "Ismét látod a frakciós IC és OOC rádiókat!");
	}
	else if(!strcmp(params, "telefon", true) || !strcmp(params, "phone", true))
	{
		if(PlayerInfo[playerid][pCuccok][BL_TELEFON] < 1)
			return SCM(playerid, COL_LRED, "Neked még nincs telefonod!");

		if((PlayerInfo[playerid][pTog][5] = true - PlayerInfo[playerid][pTog][5]))
			SCM(playerid, COL_MKEK, "Mostantól nem tudnak hívni amíg be nem kapcsolod a telefonod!");
		else
			SCM(playerid, COL_MKEK, "Ismét tudnak hívni!");
	}
	else if(!strcmp(params, "riporter", true))
	{
		if((PlayerInfo[playerid][pTog][8] = true - PlayerInfo[playerid][pTog][8]))
		{
			if(!PlayerInfo[playerid][pMP3_Megy] && !PlayerInfo[playerid][pJarmuZene])
				StopAudioStreamForPlayer(playerid);

			SCM(playerid, COL_MKEK, "Mostantól nem látod és hallod a riportokat!");

		} else {

			if(!PlayerInfo[playerid][pMP3_Megy] && !PlayerInfo[playerid][pJarmuZene] && strlen(ServerInfo[sZene]) > 10)
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, ServerInfo[sZene]);
			}

			SCM(playerid, COL_MKEK, "Ismét látod és hallod a riportokat!");
		}
	}
	else if(!strcmp(params, "b", true))
	{
		if((PlayerInfo[playerid][pTog][9] = true - PlayerInfo[playerid][pTog][9]))
			SCM(playerid, COL_MKEK, "Átváltottál folyamatos OOC beszédre!");
		else
			SCM(playerid, COL_MKEK, "Átváltottál folyamatos IC beszédre!");
	}
	else if(!strcmp(params, "válaszok", true) || !strcmp(params, "valaszok", true))
	{
		if(!Admin(playerid, 1) && !IsAS(playerid))
			return SCM(playerid, COL_LRED, "Te nem vagy Admin / Adminsegéd, így nem tudod kikapcsolni mások válaszait!");

		if((PlayerInfo[playerid][pTog][1] = true - PlayerInfo[playerid][pTog][1]))
			SCM(playerid, COL_MKEK, "Mostantól nem látod mások válaszait a reporton!");
		else
			SCM(playerid, COL_MKEK, "Ismét látod mások válaszait a reporton!");
	}
	else if(!strcmp(params, "report", true))
	{
		if(!Admin(playerid, 1))
			return SCM(playerid, COL_LRED, "Te nem vagy Admin!");

		if((PlayerInfo[playerid][pTog][6] = true - PlayerInfo[playerid][pTog][6]))
			SCM(playerid, COL_MKEK, "Mostantól nem látod mit írnak a report channelre!");
		else
			SCM(playerid, COL_MKEK, "Ismét látod mit írnak a report channelre!");
	}
	else if(!strcmp(params, "pm", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SCM(playerid, COL_LRED, "Neked ezt nem!");

		if((PlayerInfo[playerid][pTog][7] = true - PlayerInfo[playerid][pTog][7]))
			SCM(playerid, COL_MKEK, "Mostantól a játékosok nem tudnak neked privát üzenetet küldeni.");
		else
			SCM(playerid, COL_MKEK, "A játékosok ismét tudnak neked üzenetet küldeni.");
	}
	else if(!strcmp(params, "ooc", true))
	{
		if((PlayerInfo[playerid][pTog][2] = true - PlayerInfo[playerid][pTog][2]))
			SCM(playerid, COL_MKEK, "Mostantól nem látod a OOC Chatet!");
		else
			SCM(playerid, COL_MKEK, "Ismét látod a OOC Chatet!");
	}
	else if(!strcmp(params, "admin", true) || !strcmp(params, "as", true))
	{
		if(!Admin(playerid, 1) && !IsAS(playerid))
			return SCM(playerid, COL_LRED, "Te nem vagy Admin / Adminsegéd, így nem tudod kikapcsolni az Admin infókat!");

		if((PlayerInfo[playerid][pTog][3] = true - PlayerInfo[playerid][pTog][3]))
			SCM(playerid, COL_MKEK, "Mostantól nem látod az Admin / AS figyelmeztetéseket!");
		else
			SCM(playerid, COL_MKEK, "Ismét látod az Admin / AS figyelmeztetéseket!");
	}
	else if(!strcmp(params, "beszédanim", true) || !strcmp(params, "beszedanim", true))
	{
		if((PlayerInfo[playerid][pTog][4] = true - PlayerInfo[playerid][pTog][4]))
			SCM(playerid, COL_MKEK, "Beszéd animálás bekapcsolva!");
		else
			SCM(playerid, COL_MKEK, "Beszéd animálás kikapcsolva!");
	}

	else if(!strcmp(params, "hirdetés", true) || !strcmp(params, "hirdetes",true) || !strcmp(params, "hírdetés", true))
	{
		if((PlayerInfo[playerid][pTog][11] = true - PlayerInfo[playerid][pTog][11]))
			SCM(playerid, COL_MKEK, "Hírdetések(/ad) kikapcsolva!");
		else
			SCM(playerid, COL_MKEK, "Hírdetések(/ad) bekapcsolva!");
	}
	else if(!strcmp(params, "tores", true) || !strcmp(params, "törés", true))
	{
		if(!Admin(playerid, SZUPER_SZINT))
			return SCM(playerid, COL_LRED, "Te nem vagy SzuperAdmin!");

		if((PlayerInfo[playerid][pTog][12] = true - PlayerInfo[playerid][pTog][12]))
			SCM(playerid, COL_MKEK, "Törés kikapcsolva, a jármû már nem sebzõdik!");
		else
			SCM(playerid, COL_MKEK, "Törés bekapcsolva, a jármû ismét sebzõdik!");
	}
	else if(!strcmp(params, "alefoglal", true) || !strcmp(params, "ale", true))
	{
	    if(!Admin(playerid, 4))
			return SCM(playerid, COL_LRED, "Nem használhatod!");
				
		if((PlayerInfo[playerid][pTog][13] = true - PlayerInfo[playerid][pTog][13]))
			SCM(playerid, COL_MKEK, "Alefoglal gyorsgomb kikapcsolva.");
		else
			SCM(playerid, COL_MKEK, "Alefoglal gyorsgomb bekapcsolva. | Gyorsgomb: H betû");
	}
	if(!strcmp(params, "ajtó", true) || !strcmp(params, "ajto", true))
	{
		if((PlayerInfo[playerid][pTog][14] = true - PlayerInfo[playerid][pTog][14]))
			SCM(playerid, COL_MKEK, "Mostantól nem nem mész be autómatikusan az ajtókon! ((F Gombal tudsz be / ki menni))");
		else
			SCM(playerid, COL_MKEK, "Mostantól ismét autómatikusan mész be az ajtókon!");
	}
    if(!strcmp(params, "admincpk", true) || !strcmp(params, "acpk", true))
	{
		if((PlayerInfo[playerid][pTog][15] = true - PlayerInfo[playerid][pTog][15]))
			SCM(playerid, COL_MKEK, "Mostantól nem látod a térképen az adminokat!");
		else
			SCM(playerid, COL_MKEK, "Mostantól ismét látod a térképen az adminokat!");
			
		foreach(Player, i)
		{
		    StreamUpdate(playerid, i);
		    StreamUpdate(i, playerid);
		}
	}
	return true;
}

CMD:id(playerid, params[])
{
	new id;
	if(sscanf(params, "u", id))
		return SCM(playerid, COL_MKEK, "Használat: /id [Játékos neve vagy ID-je]");

	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || IsPlayerNPC(id))
		return SCM(playerid, COL_LRED, "Nincs találat!");

	SFM(playerid, COL_MKEK, "Játékos: [%d]%s | Szint: %d", id, JatekosNev(id), PlayerInfo[id][pjatekosszint]);
	return true;
}

/*
enum erace
{
	rStatusz,
	rNevezes,
	Float:rSzorzo,
	rIdo,
	rNyeremeny,
	rBentvan,
	rIdoHatra
};
*/

CMD:verseny(playerid, params[])
{
	new param[24];
	if(sscanf(params, "s[24]{}", param))
	{
		go_help:
		SCM(playerid, COL_MKEK, "Használat: /verseny [ Nevez / Felad / Lista ]");
		if(Admin(playerid, FOADMIN_SZINT))
			SCM(playerid, COL_MKEK, "Egyéb: /verseny [ Új / CP / Ment / Betölt / Stop / Start / Ürít ]");
		return true;
	}

	if(!strcmp(param, "új", true) || !strcmp(param, "uj", true))
	{
		if(!Admin(playerid, AC_SZINT))
			return SendClientMessage(playerid, COLOR_LIGHTRED, NEM_HASZNALHATO);

		new indito[32], nev[32];
		if(sscanf(params, "{s[24]}s[32]s[32]", indito, nev))
			return SCM(playerid, COL_MKEK, "Használat: /verseny új [Indítókód] [Pálya neve] | Speciális karaktereket mellõzd!");

		if(strlen(nev) < 4 || strlen(nev) > 32)
			return SCM(playerid, COL_LRED, "A pálya neve legalább 4 és maximum 32 karakter lehet!");

		if(strlen(indito) < 4 || strlen(indito) > 32)
			return SCM(playerid, COL_LRED, "A pálya neve legalább 4 és maximum 32 karakter lehet!");

		if(Karakter_Ellenorzes(indito))
			return SCM(playerid, COL_LRED, "Az indítókód nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");

		if(Karakter_Ellenorzes(nev))
			return SCM(playerid, COL_LRED, "A név nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");

		new i, id;
		for(;++i < MAX_RACE;)
		{
			if(!Race[i][rVan] && Race[i][rPosx] == 0.0)
			{
				id = i;
				break;
			}
		}

		if(!id)
			return SCM(playerid, COL_LRED, "Nem készíthetsz több pályát mert az összes slot foglalt!");

		nformat(sql, 128, "SELECT * FROM `"#MYSQL_RACE_TABLA"` WHERE Indito = '%s'", indito);
		mysql_tquery(sql_ID, sql, "preProcessing", "iiiss", playerid, 2, id, nev, indito);
		return true;
	}
	else if(!strcmp(param, "nevez", true))
	{
//		if(GetPlayerVehicleSeat(playerid) != 0)
//			return SCM(playerid, COL_LRED, "Csak sofõrként tudsz benevezni!");

		if(PlayerRace[playerid][rVersenyen])
			return SCM(playerid, COL_LRED, "Már neveztél egy versenyre, ha fel akarod adni, írd be: /verseny felad");

		new i, id;
		for(;++i < MAX_RACE;)
		{
			if(!Race[i][rVan] || Race[i][rStatusz] != RACE_INDUL) continue;
			if(IsPlayerInRangeOfPoint(playerid, 25.0, Race[i][rPosx][0],  Race[i][rPosy][0],  Race[i][rPosz][0]))
			{
				id = i;
				break;
			}
		}

		if(!id)
			return SCM(playerid, COL_LRED, "Nem vagy egy verseny kezdõpontjánál se!");

		if(Race[id][rIdo] > 300)
			return SCM(playerid, COL_LRED, "A verseny indulását megelõzõ 3 percben csatlakozhatsz csak!");

		if(PlayerInfo[playerid][pBszPenz] < Race[id][rNevezes])
			return SFM(playerid, COL_LRED, "A nevezés díja "#COL_MKEK"%s"#COL_FEHER"$, neked nincs ennyi a bankszámládon!", FN(Race[id][rNevezes], 0, ','));

		PlayerRace[playerid][rVersenyen] = id;
		PlayerRace[playerid][rVersenyCP] = RACE_START_CP;
		PlayerInfo[playerid][pBszPenz] -= Race[id][rNevezes];
		Race[id][rNyeremeny] += floatround(float(Race[id][rNevezes]) * Race[id][rSzorzo]);

		SetRaceCP(playerid);
		SFM(playerid, COL_VZOLD, "Sikeresen beneveztél a versenyre! A nevezés díja "#COL_MKEK"%s"#COL_FEHER"$ levonva a bankszámládról!", FN(Race[id][rNevezes], 0, ','));
		Cselekves(playerid, "benevezett egy versenyre");
		return true;
	}
	else if(!strcmp(param, "felad", true))
	{
		if(!PlayerRace[playerid][rVersenyen])
			return SCM(playerid, COL_LRED, "Jelenleg nem vagy versenyen!");

		PlayerRace[playerid][rVersenyen] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		SCM(playerid, COL_VZOLD, "Feladtad a versenyt!");
		return true;
	}
	else if(!strcmp(param, "start", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_LIGHTRED, NEM_HASZNALHATO);

		new slot, dij, perc, Float:szor;
		if(sscanf(params, "{s[24]}dddf", slot, perc, dij, szor))
			return SCM(playerid, COL_MKEK, "Használat: /verseny start [Slot] [Idõ(Percben)] [Nevezési díj] [Szorzó]");

		if(slot > MAX_RACE || slot < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 4!");

		if(Race[slot][rStatusz] == RACE_EPIT)
			return SCM(playerid, COL_LRED, "Ez a pálya jelenleg építés alatt áll! Ürítsd a slotot vagy várd meg míg befejezi az építõ.");

		if(Race[slot][rStatusz] == RACE_MEGY)
			return SCM(playerid, COL_LRED, "Ez a verseny jelenleg aktív, épp verseny folyik rajta.");

		if(Race[slot][rStatusz] == RACE_INDUL)
			return SCM(playerid, COL_LRED, "Ez a verseny jelenelg indítás alatt van, újra indításhoz elõször állítsd le a folyamatot.");

		if(!Race[slot][rVan])
			return SCM(playerid, COL_LRED, "Ezen a sloton nincs betöltött verseny!");

		if(dij < 25 || dij > 500)
			return SCM(playerid, COL_LRED, "A nevezési díj minimum 25$ és maximum 500$ lehet!");

		if(perc < 2 || perc > 60)
			return SCM(playerid, COL_LRED, "Az idõ minimum 2 perc és maximum 60 perc lehet!");

		if(szor < 1.0 || szor > 5.0)
			return SCM(playerid, COL_LRED, "A szorzó minimum 1.0 és maximum 5.0 lehet!");

		foreach(Player, p)
		{
			if(!Belepve(p)) continue;
			SendClientMessage(p, COLOR_WHITE, "============= [ "#COL_VZOLD"Racing Team"#COL_FEHER" ] =============");
			SendFormatMessage(p, COLOR_WHITE, "Verseny: "#COL_MKEK"%s"#COL_FEHER" | Ellenörzõ pontok száma: "#COL_MKEK"%d"#COL_FEHER"db", Race[slot][rNev], Race[slot][rCPdb]);
			SendFormatMessage(p, COLOR_WHITE, "Nevezési díj: "#COL_MKEK"%s"#COL_FEHER"$ | Szorzó: "#COL_MKEK"%.1f", FN(dij, 0, ','), szor);

			if(Race[slot][rCPdb] > 0)
				SetPlayerRaceCheckpoint(p, 0, Race[slot][rPosx][0], Race[slot][rPosy][0], Race[slot][rPosz][0], Race[slot][rPosx][1], Race[slot][rPosy][1], Race[slot][rPosz][1], 20.0);
			else
				SetPlayerRaceCheckpoint(p, 0, Race[slot][rPosx][0], Race[slot][rPosy][0], Race[slot][rPosz][0], PosExt(Race[slot][rCelPos]), 20.0);
		}

		Race[slot][rStatusz] = RACE_INDUL;
		Race[slot][rSzorzo] = szor;
		Race[slot][rNevezes] = dij;
		Race[slot][rIdo] = (perc * 60);
		Race[slot][rNyeremeny] = 0;
		Race[slot][rBentvan] = 0;
		Race[slot][rIdoHatra] = 0;
		return true;
	}
	else if(!strcmp(param, "stop", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_LIGHTRED, NEM_HASZNALHATO);

		new slot;
		if(sscanf(params, "{s[24]}d", slot))
			return SCM(playerid, COL_MKEK, "Használat: /verseny stop [Slot]");

		if(slot > MAX_RACE || slot < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 4!");

		if(Race[slot][rStatusz] != RACE_MEGY && Race[slot][rStatusz] != RACE_INDUL)
			return SCM(playerid, COL_LRED, "Ezen a sloton nincs elindítva verseny!");

		Race[slot][rStatusz] = 0;
		foreach(Player, x)
		{
			if(PlayerRace[x][rVersenyen] == slot)
			{
				PlayerRace[x][rVersenyen] = 0;
				DisablePlayerRaceCheckpoint(x);
			}
		}

		SCM(playerid, COL_VZOLD, "Verseny leállítva!");
	}
	else if(!strcmp(param, "ürít", true) || !strcmp(param, "urit", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_LIGHTRED, NEM_HASZNALHATO);

		new slot;
		if(sscanf(params, "{s[24]}d", slot))
			return SCM(playerid, COL_MKEK, "Használat: /verseny ürít [Slot] | Slot felszabadítása");

		if(slot > MAX_RACE || slot < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 4!");

		if(Race[slot][rStatusz] == RACE_MEGY || Race[slot][rStatusz] == RACE_INDUL)
			return SCM(playerid, COL_LRED, "Ezen a sloton verseny folyik, elõször állítsd le!");

		new i = NINCS;
		for(;++i < MAX_RACE_CP;)
		{
			Race[slot][rPosx][i] = 0.0;
			Race[slot][rPosy][i] = 0.0;
			Race[slot][rPosz][i] = 0.0;
		}

		Race[slot][rCelPos] = Float:{0.0, 0.0, 0.0};
		Race[slot][rVan] = false;
		Race[slot][rNev][0] = EOS;
		Race[slot][rIndito][0] = EOS;
		Race[slot][rCPdb] = 0;
		Race[slot][rSzorzo] = 0;
		Race[slot][rNyeremeny] = 0;
		Race[slot][rBentvan] = 0;
		Race[slot][rIdoHatra] = 0;

		SCM(playerid, COL_VZOLD, "Slot sikeresen ürítve!");
		return true;
	}
	else if(!strcmp(param, "betölt", true) || !strcmp(param, "betolt", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_LIGHTRED, NEM_HASZNALHATO);

		new nev[32];
		if(sscanf(params, "{s[24]}s[32]", nev))
			return SCM(playerid, COL_MKEK, "Használat: /verseny betölt [Pálya indítókódja]");

		if(strlen(nev) < 4 || strlen(nev) > 32)
			return SCM(playerid, COL_LRED, "A pálya indítókódja legalább 4 és maximum 32 karakter lehet!");

		if(Karakter_Ellenorzes(nev))
			return SCM(playerid, COL_LRED, "Az indítókód nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");

		new i, id;
		for(;++i < MAX_RACE;)
		{
			if(!Race[i][rVan] && Race[i][rPosx][0] == 0.0)
			{
				id = i;
				break;
			}
		}

		if(!id)
			return SCM(playerid, COL_LRED, "Jelenleg nincs szabad slot amire betölthetnéd a pályát!");

		Race[id][rStatusz] = 0;
		nformat(sql, 128, "SELECT * FROM `"#MYSQL_RACE_TABLA"` WHERE Indito = '%s'", nev);
		mysql_tquery(sql_ID, sql, "preProcessing", "iiiss", playerid, 1, id, "", "");
		return true;
	}
	else if(!strcmp(param, "cp", true))
	{
		if(!PlayerRace[playerid][rEpites][0])
			return SCM(playerid, COL_LRED, "Jelenleg nem vagy építés módban!");

		if(PlayerRace[playerid][rEpites][1] >= MAX_RACE_CP)
			return SCM(playerid, COL_LRED, "Elérted a maximálisan létrehozható CP-k számát! Mentéshez írd be: /verseny ment");

		new Float:pos[3];
		GetPlayerPos(playerid, PosExt(pos));
		SetPlayerRaceCheckpoint(playerid, 2, PosExt(pos), 0.0, 0.0, 0.0, 20.0);

		new
			id = PlayerRace[playerid][rEpites][0],//id
			cp = PlayerRace[playerid][rEpites][1];//cp

		Race[id][rPosx][cp] = pos[0];
		Race[id][rPosy][cp] = pos[1];
		Race[id][rPosz][cp] = pos[2];

		if((PlayerRace[playerid][rEpites][1] + 1) < MAX_RACE_CP)
		{
			PlayerRace[playerid][rEpites][1]++;//kövi cp
			SFM(playerid, COL_VZOLD, "Ellenörzõ pont mentve! Jöhet a következõ - %d/%d | Mentés: /verseny ment", PlayerRace[playerid][rEpites][1], MAX_RACE_CP);
		} else
			SCM(playerid, COL_VZOLD, "Ellenörzõ pont mentve! Mivel elérted a maximális CP számot így mentened kell! /verseny ment");

		return true;
	}
	else if(!strcmp(param, "ment", true))
	{
		if(!PlayerRace[playerid][rEpites][0])
			return SCM(playerid, COL_LRED, "Jelenleg nem vagy építés módban, így nincs mit elmenteni!");

		new i = NINCS, cp, sql[128], id = PlayerRace[playerid][rEpites][0];
		format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_RACE_TABLA"` (Nev, Indito, Keszito) VALUES ('%s', '%s', '%s')", Race[id][rNev], Race[id][rIndito], JatekosNev(playerid));
		mysql_tquery(sql_ID, sql, "", "");
		sql[0] = EOS;

		for(;++i < MAX_RACE_CP;)//0-49
		{
			if(Race[id][rPosx][i] == 0.0) continue;
			format(sql, sizeof(sql), "UPDATE `"#MYSQL_RACE_TABLA"` SET CP%d = '%f,%f,%f' WHERE Indito = '%s'", (i + 1), Race[id][rPosx][i], Race[id][rPosy][i], Race[id][rPosz][i], Race[id][rIndito]);
			mysql_tquery(sql_ID, sql, "", "");
			cp++;
		}

		Race[id][rCelPos][0] = Race[id][rPosx][cp - 1];
		Race[id][rCelPos][1] = Race[id][rPosy][cp - 1];
		Race[id][rCelPos][2] = Race[id][rPosz][cp - 1];

		Race[id][rCPdb] = cp;
		Race[id][rStatusz] = 0;
		AdminUzenet(COLOR_LIGHTRED, 1, "%s létrehozott egy %s nevû pályát %d ellenörzõponttal! | Indítókód: %s", JatekosNev(playerid), Race[id][rNev], cp, Race[id][rIndito]);
		SFM(playerid, COL_VZOLD, "Sikeresen elmentetted a(z) "#COL_MKEK"%s"#COL_FEHER" nevû pályát! CP: %d/%d | Indítókód: "#COL_MKEK"%s", Race[id][rNev], cp, MAX_RACE_CP, Race[id][rIndito]);

		PlayerRace[playerid][rEpites][0] = 0;
		PlayerRace[playerid][rEpites][1] = 0;
		return true;
	}
	else if(!strcmp(param, "lista", true))
	{
		SendClientMessage(playerid, COLOR_WHITE, "========== [ "#COL_MKEK"Betöltött versenyek"#COL_FEHER" ] ==========");
		new i, db;
		for(;++i < MAX_RACE;)
		{
			if(Race[i][rPosx][0] == 0.0) continue;
			SendFormatMessage(playerid, COLOR_WHITE, "Slot: %d | Név: "#COL_MKEK"%s"#COL_FEHER" | CP szám: "#COL_MKEK"%d"#COL_FEHER" | Státusz: "#COL_MKEK"%s ", i, Race[i][rNev], Race[i][rCPdb], VersenyStatusz(i));
			db++;
		}

		if(!db)
			return SCM(playerid, COL_LRED, "Nincs betöltve egy pálya sem!");

		SCM(playerid, COL_MKEK, "Ha megszeretnél keresni egy versenyt használd a /gps verseny parancsot!");
	}
	else
		goto go_help;

	return true;
}

CMD:vizsga(playerid, params[])
{
	#pragma unused params
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2334.5764, -1991.8934, 13.5435))//oktató hq
	{
		if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
		{
			PlayerInfo[playerid][pCP] = CP_GPS;
			SetPlayerCheckpoint(playerid, 2334.5764, -1991.8934, 13.5435, 5.0);
		}
		SCM(playerid, COL_LRED, "Nem vagy a Los Angeles Autósiskola irodájában!");
		return true;
	}

	new dstr[1024], tmp[128], i = NINCS;
	for(;++i < sizeof(VizsgaLista)-1;)
	{
		if(i % 2 == 1) format(tmp, sizeof(tmp), "\n"#COL_MKEK"%s - %s$", VizsgaLista[i][0], FN(VizsgaLista[i][1][0], 0, ','));
		else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s - %s$", VizsgaLista[i][0], FN(VizsgaLista[i][1][0], 0, ','));
		strcat(dstr, tmp, sizeof(dstr));
	}

	ShowPlayerDialog(playerid, DIALOG_VIZSGA_LISTA, DIALOG_STYLE_LIST, "Los Angeles - Autósiskola", dstr, "Mehet", "Mégse");
	return true;
}

CMD:leaderek(playerid, params[])
{
	#pragma unused params
	new str[MAX_FRAKCIO * MAX_PLAYER_NAME], db;
	//SendClientMessage(playerid, COLOR_WHITE, "============= "#COL_MKEK"[ Frakcióvezetõk ]"#COL_FEHER" =============");
	foreach(Player, i)
	{
		if(!Belepve(i) || !PlayerInfo[i][pFrakcio]) continue;
		//[Típus(1 = Legális | 2 = Maffia | 3 = Banda)
		if((FInfo[PlayerInfo[i][pFrakcio]][fLegalis] == FK_LEGAL || FInfo[PlayerInfo[i][pFrakcio]][fLegalis] == FK_REND) && PlayerInfo[i][pLeader] == 1)
		{
		    format(str, MAX_FRAKCIO * MAX_PLAYER_NAME,"%s\n"#COL_FEHER"%s - %s",str, JatekosNev(i),FInfo[PlayerInfo[i][pFrakcio]][fNev]);
			db++;
		}
	}
	if(db < 1)
	{
  		format(str, MAX_FRAKCIO * MAX_PLAYER_NAME, #COL_LRED"Jelenleg nincs elérhetõ leader!");
	}
	ShowPlayerDialog(playerid,DIALOG_NINCS,DIALOG_STYLE_MSGBOX,"Online Leaderek", str,"Bezárás","");
		
	return true;
}

CMD:enter(playerid, params[])
{
	#pragma unused params
	new m = GetClosestVehicle(playerid);
	if(GetVehicleModel(m) == 519)
	{
		SetPlayerPos(playerid, 1.808619,32.384357,1199.593750);
		SetInterior(playerid, 1);
		Freeze(playerid, 5000);
		SetVirtualWorld(playerid, (m + 100));
		Cselekves(playerid,"felszállt a repülõre..");
		return true;
	}
	new i = NINCS, id = NINCS;
	for(;++i < MAX_CEG;)
	{
		if(CegInfo[i][cVan])
		{
			if(CegInfo[i][cPosBe][0] == 0.0 || !IsPlayerInRangeOfPoint(playerid, 5, PosExt( CegInfo[i][cPosBe] )))
				continue;

			if(CegInfo[i][cVw][0] != GetPlayerVirtualWorld(playerid) || CegInfo[i][cInt][0] != GetPlayerInterior(playerid))
				continue;

			id = i;
			break;
		}
	}
	if(id != NINCS)
	{
		switch( id )
		{
			case BIZ_PB:
			{
				if(PlayerInfo[playerid][ppenz] < CegInfo[id][cBelepo])
					return SFM(playerid, COL_MKEK, "Egy PaintBall játék ára "#COL_MKEK"%s"#COL_FEHER"$! Nálad nincs ennyi.", FN(CegInfo[id][cBelepo], 0, ','));

				new db;
				foreach(Player, p)
				{
					if(!Belepve(p) || PlayerInfo[p][pPaintBall][0] != 1)
						continue;

					db++;
				}

				if(!db)
				{
					ServerInfo[sPaintBall][0] = 0;
					ServerInfo[sPaintBall][2] = 30;//ha nem lesz jelentkezõ kidobja
					ServerInfo[sPaintBall][4] = 900;//meddig tart egy adott meccs

					SCM(playerid, COL_VZOLD, "A pályán jelenleg nincs egy játékos se!");
					SCM(playerid, COL_VZOLD, "Ha 30 másodpercen belül nem lesz még egy játékos, a rendszer automatikusa kirak.");
					Freeze(playerid, 0);
				}
				else if((db + 1) == 2)
				{
					ServerInfo[sPaintBall][2] = 0;
					ServerInfo[sPaintBall][3] = 20;//mikor indul a meccs
					Freeze(playerid, 0);

				} else {

					if(PlayerInfo[playerid][pMegerosites] != playerid)
					{
						SFM(playerid, COL_MKEK, "A pályán jelenleg "#COL_MKEK"%d"#COL_FEHER" játékos van, és a meccs még "#COL_MKEK"%d"#COL_FEHER" másodpercig tart.", db, ServerInfo[sPaintBall][4]);
						SCM(playerid, COL_LRED, "Biztos, hogy be akarsz nevezni? Ha igen, írd be újra a parancsot!");
						PlayerInfo[playerid][pMegerosites] = playerid;
						return true;
					}

					Freeze(playerid, 2000);
				}

				PaintBallMuvelet(playerid, 3);
				PlayerInfo[playerid][pPaintBall][0] = 1;
				PlayerInfo[playerid][pMegerosites] = NINCS;
				GiveMoney(playerid,-CegInfo[id][cBelepo]);
				CegPenz(id, CegInfo[id][cBelepo]);
			}
			default:
			{
				if(CegInfo[id][cPosKi][0] == 0.0)
					return SCM(playerid, COL_LRED, "Ennek a cégnek még nincs lehelyezett kijárata!");

				if(PlayerInfo[playerid][ppenz] < CegInfo[id][cBelepo])
					return SFM(playerid, COL_MKEK, "A belépõ ára "#COL_MKEK"%s"#COL_FEHER"$! Nálad nincs ennyi.", FN(CegInfo[id][cBelepo], 0, ','));

				if(CegInfo[id][cBelepo] > 0) CegPenz(id, CegInfo[id][cBelepo]);
				SetPos(playerid, PosExt(CegInfo[id][cPosKi]), CegInfo[id][cPosKi][3]);

				SetVirtualWorld(playerid, CegInfo[id][cVw][1]);
				SetInterior(playerid, CegInfo[id][cInt][1]);

				Freeze(playerid, 2500);
			}

		}
		return true;
	}
	cmd_haz(playerid, "be");
	cmd_garazs(playerid, "be");
	return true;
}

CMD:exit(playerid, params[])
{
	#pragma unused params

	new i = NINCS, id = NINCS;
	for(;++i < MAX_CEG;)
	{
		if(CegInfo[i][cVan])
		{
			if(CegInfo[i][cPosKi][0] == 0.0 || !IsPlayerInRangeOfPoint(playerid, (i == BIZ_PB ? 100.0 : 3.0), PosExt( CegInfo[i][cPosKi] )))
				continue;

			if(CegInfo[i][cVw][1] != GetPlayerVirtualWorld(playerid) || CegInfo[i][cInt][1] != GetPlayerInterior(playerid))
				continue;

			id = i;
			break;
		}
	}
	if(id != NINCS)
	{
		switch( id )
		{
			case BIZ_PB:
			{
				Freeze(playerid, 2000);
				PaintBallMuvelet(playerid, 2);
				SetPos(playerid, PosExt(CegInfo[id][cPosBe]), CegInfo[id][cPosBe][3]);
				SetVirtualWorld(playerid, CegInfo[id][cVw][0]);
				SetInterior(playerid, CegInfo[id][cInt][0]);
				SCM(playerid, COL_MKEK, "Befejezted a meccset! További szép napot!");
			}
			default:
			{
				if(CegInfo[id][cPosKi][0] == 0.0)
					return SCM(playerid, COL_LRED, "Ennek a cégnek még nincs lehelyezett kijárata!");

				//SetPos(playerid, PosExt(CegInfo[id][cPosKi]), CegInfo[id][cPosKi][3]);

				SetPlayerPos(playerid, CegInfo[id][cPosBe][0], CegInfo[id][cPosBe][1], CegInfo[id][cPosBe][2]);
				SetPlayerFacingAngle(playerid,CegInfo[id][cPosBe][3]);
				//SetVirtualWorld(playerid, CegInfo[id][cVw][1]);
				//SetInterior(playerid, CegInfo[id][cInt][1]);
				SetInterior(playerid,0);
				SetVirtualWorld(playerid,0);
				Freeze(playerid, 2500);
			}
		}
		return true;
	}
	else if(IsPlayerInRangeOfPoint(playerid,4.0, 1.808619,32.384357,1199.593750) && GetPlayerInterior(playerid) == 1)
	{
		for(new k = 0; k < MAX_VEHICLES; k++)
		{
			new m = GetVehicleModel(k);
			if(m == 519)
			{
				if((k + 100) == GetPlayerVirtualWorld(playerid))
				{
					new Float:x, Float:y, Float:z;
					Freeze(playerid, 2000);
					GetVehiclePos(k, x, y, z);
					SetVirtualWorld(playerid, 0);
					SetInterior(playerid, 0);
					SetPlayerPos(playerid, x+3, y, z);
					Cselekves(playerid,"leszállt a repülõröl...");
				}
			}
		}
		return true;
	}
	cmd_haz(playerid, "ki");
	return true;
}

CMD:oldcar(playerid, params[])
{
	new jatekos, id;
	if(Admin(playerid, 1))
	{
		if(isnull(params))
		{
			SCM(playerid, COL_MKEK, "Használat: /oldcar [Játékos] | Admin funkció");
			jatekos = playerid;
		}
		else
		{
			sscanf(params, "u", jatekos);
			if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos))	return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			id = PlayerInfo[jatekos][pJarmubenUlt];
			if(!id) return SCM(playerid, COL_LRED, "Még nem ült jármûben!");
			SFM(playerid, COL_MKEK, "Utoljára egy "#COL_MKEK"%s"#COL_FEHER" típusú jármûben ült melynek rendszáma: "#COL_MKEK"%d[%d]", VehicleNames[vInfo[id][vModel] - 400], vInfo[id][vID], id);
		}
	}
	id = PlayerInfo[jatekos][pJarmubenUlt];
	if(!id) return SCM(playerid, COL_LRED, "Még nem ültél jármûben a csatlakozásod óta!");
	SFM(playerid, COL_MKEK, "Utoljára egy "#COL_MKEK"%s"#COL_FEHER" típusú jármûben ültél melynek rendszáma: ""%d[%d]", VehicleNames[vInfo[id][vModel] - 400], vInfo[id][vID], id);
	return true;
}
CMD:zuhanok(playerid, params[])
{
	#pragma unused params

	if(PlayerInfo[playerid][pFigyelmeztetes] > 1)
		return SCM(playerid, COL_LRED, "Már értesítetted az Adminokat kétszer, nem kell floodolni! Használd a /report-ot!");

	PlayerInfo[playerid][pFigyelmeztetes]++;
	AdminUzenet(COLOR_ROZSA, 1, "[%d]%s zuhanást jelentett ezért a rendszer fagyasztotta! Kérlek foglalkozzatok vele!", playerid, JatekosNev(playerid));
	SCM(playerid, COL_LRED, "Fagyasztva! Várj, amíg egy Admin segít! Ha kihasználtad a parancsot, banolva leszel!");
	Freeze(playerid, 0);

	return true;
}

CMD:aide(playerid, params[])
{
	#pragma unused params

	if(PlayerInfo[playerid][pFigyelmeztetes] > 1)
		return SCM(playerid, COL_LRED, "Már értesítetted az Adminokat kétszer, nem kell floodolni! Használd a /report-ot!");
	/*
	if(Iter_Count(Adminok) > 0)
	{*/
	PlayerInfo[playerid][pFigyelmeztetes]++;
	AdminUzenet(COLOR_ROZSA, 1, "[%d]%s azonnali segítséget kért, egy Admin foglalkozzon vele!", playerid, JatekosNev(playerid));
	SCM(playerid, COL_LRED, "Online Adminok értesítve!");
	/*} else
		SCM(playerid, COL_LRED, "Jelenleg nincs Online Admin!");
	*/
	return true;
}

CMD:lsttagok(playerid,params[])
{
    SendClientMessage(playerid,0xff1e00AA,"========== [ See Közlekedési Vállalat ] ==========");
    foreach(Player,p)
    {
        if(Belepve(p) && PlayerInfo[p][pSKV] == 1)
        {
            SendFormatMessage(playerid,0xd99b0bAA,"Név: "#COL_MKEK"%s{ffea00} | Rang: %s",JatekosNev(p),SKVrangok(PlayerInfo[p][pSKVrang]));
        }
    }
	return 1;
}

CMD:lstr(playerid,params[])
{
	if(isnull(params)) return SCM(playerid,COL_LRED,"Használat: /lstr [IC Üzenet]");
    else if(PlayerInfo[playerid][pSKV] == 0) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else {
	    new str[256];
	    format(str,256,"** LST %s %s: %s **",SKVrangok(PlayerInfo[playerid][pSKVrang]),JatekosNev(playerid),params);
		foreach(Player,p)
		{
		    if(PlayerInfo[p][pSKV] == 1/* && playerid != p*/)
		    {
		        SendClientMessage(p,0xffc400AA,str);
		    }
		}
	}
	return 1;
}
CMD:lstrb(playerid,params[])
{
	if(isnull(params)) return SCM(playerid,COL_LRED,"Használat: /lstrb [OOC Üzenet]");
	else if(PlayerInfo[playerid][pSKV] == 0) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else {
	    new str[256];
	    format(str,256,"**(( LST %s %s OOC: %s ))**",SKVrangok(PlayerInfo[playerid][pSKVrang]),JatekosNev(playerid),params);
		foreach(Player,p)
		{
		    if(PlayerInfo[p][pSKV] == 1/* && playerid != p*/)
		    {
		        SendClientMessage(p,0xffc400AA,str);
		    }
		}
	}
	return 1;
}
CMD:buszjegy(playerid,params[])
{

	new veh, model;
	veh = GetPlayerVehicleID(playerid);
	model = GetVehicleModel(veh);

    new taxikocsi = TaxiLampa(playerid, false, true);
    if(model != 437 && !taxikocsi) return SCM(playerid,COL_MKEK,"Csak buszban használható!");

	new id;
	if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /buszjegy [Játékos/ID]");
	else if(PlayerInfo[playerid][pSKV] != 1) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	else
	{
 		new vehidt = GetPlayerVehicleID(playerid);
 		new vehidh = GetPlayerVehicleID(id);
		if(vehidt != vehidh) return SCM(playerid,COL_LRED,"Õ nincs veled egy buszban.");
		else
		{
			PlayerInfo[id][pTaxiban] = 1;
			PlayerInfo[id][pTaxisid] = playerid;
			TaxiOraIndit(playerid,id);
		}
	}
	return 1;
}
CMD:taxiora(playerid,params[])
{

    new veh, model;
	veh = GetPlayerVehicleID(playerid);
	model = GetVehicleModel(veh);
	
    new taxikocsi = TaxiLampa(playerid, false, true); 
    if(model != 420 && !taxikocsi) return SCM(playerid,COL_MKEK,"Csak hivatalos taxi jelzésû jármûben használható!");
	
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /taxióra [Játékos/ID]");
	else if(PlayerInfo[playerid][pSKV] != 1) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	else if(id == playerid) return SCM(playerid,COL_LRED,"Magadnak?");
	else if(PlayerInfo[id][pTaxioraMegy]) return SCM(playerid,COL_LRED,"Valaki már elindította neki a taxiórát");
	else
	{
 		new vehidt = GetPlayerVehicleID(playerid);
 		new vehidh = GetPlayerVehicleID(id);
		if(vehidt != vehidh) return SCM(playerid,COL_LRED,"Õ nincs veled egy kocsiban.");
		else
		{
			PlayerInfo[id][pTaxiban] = 1;
			PlayerInfo[id][pTaxisid] = playerid;
			TaxiOraIndit(playerid,id);
		}
	}
	
	return 1;
}

CMD:lstgov(playerid,params[])
{
	if(PlayerInfo[playerid][pSKVrang] < 5) return SCM(playerid,COL_LRED,"Csak LST leader!");
	new str[144];
	if(strlen(params) < 10) return SCM(playerid,COL_LRED,"Minimum 10 karakter!");
   	format(str, sizeof(str), "================== [ "#COL_VKEK"See Közlekedési Vállalat"#COL_FEHER" ] ==================");
	SendClientMessageToAll(COLOR_YELLOW2, str);
	format(str, sizeof(str), "%s %s: %s", SKVrangok(PlayerInfo[playerid][pSKVrang]), JatekosNev(playerid, true), params);
	SendClientMessageToAll(COLOR_YELLOW2, str);
	return 1;
}

CMD:lstrang(playerid,params[])
{
	if(PlayerInfo[playerid][pSKVrang] >= 5)
	{
	    new id;
		new rang;
	    if(sscanf(params,"ud",id,rang)) return SCM(playerid,COL_MKEK,"Használat: /skvrang [Játékos] [Rang]");
	    else if(PlayerInfo[playerid][pSKVrang] < 5) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	    else if(rang > 6) return SCM(playerid,COL_LRED,"Max. 6!");
	    else {
			PlayerInfo[id][pSKVrang] = rang;
			SFM(id,COL_MKEK,"LST: %s új rangot adott: %d",JatekosNev(playerid),rang);
			SFM(playerid,COL_MKEK,"LST: Új rangot adtál neki: %s [%d]",JatekosNev(id),rang);
		}
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}

CMD:lst(playerid,params[])
{
	if(PlayerInfo[playerid][pSKV] == 1)
	{
	    if(isnull(params)) return SCM(playerid,COL_MKEK,"Használat: /lst [ Felvesz/ Kirúg / Elfogad / Lemond / Lista /Lámpa]");
	    
	    new param[24];
		sscanf(params, "s[24]{}", param);
	
	    
	    if(egyezik(param,"felvesz"))
	    {
	        if(PlayerInfo[playerid][pSKVrang] < 5) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	        
	        new id;
	        if(sscanf(params, "{s[24]}u", id))
				return SCM(playerid, COL_MKEK, "Használat: /lst felvesz [Játékos]");
			
	        if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	        PlayerInfo[id][pSKV] = 1;
	        PlayerInfo[id][pSKVrang] = 1;
	        SFM(id,COL_MKEK,"%s felvett téged az LST-ba!",JatekosNev(playerid));
	       // SCM(id,COL_MKEK,str);
	        SFM(playerid,COL_MKEK,"Felvetted %st az LST-ba.",JatekosNev(id));
	        //SCM(playerid,COL_MKEK,str);
	    }
        else if(egyezik(param,"kirúg") || egyezik(param,"kirug"))
	    {
	        if(PlayerInfo[playerid][pSKVrang] < 5) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	        
	        new id;
	        if(sscanf(params, "{s[24]}u", id))
				return SCM(playerid, COL_MKEK, "Használat: /lst kirúg [Játékos]");
				
	        if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	        PlayerInfo[id][pSKV] = 0;
	        PlayerInfo[id][pSKVrang] = 0;
	        SFM(id,COL_MKEK,"%s kirúgott az LST-ból!",JatekosNev(playerid));
	       // SCM(id,COL_MKEK,str);
	        SFM(playerid,COL_MKEK,"Kirúgtad %st az LST-ból.",JatekosNev(id));
	     //   SCM(playerid,COL_MKEK,str);
	    }
	    else if(egyezik(param,"elfogad"))
	    {
	        new id;
	        if(sscanf(params, "{s[24]}u", id))
				return SCM(playerid, COL_MKEK, "Használat: /lst elfogad [Játékos]");
				
	        if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");

			new veh, model;
			veh = GetPlayerVehicleID(playerid);
			model = GetVehicleModel(veh);

    		new taxikocsi = TaxiLampa(playerid, false, true);

    		if(model != 420 && !taxikocsi) return SCM(playerid,COL_MKEK,"Csak hivatalos jelzésû jármûben használható!");
    		
			new fogadva = TaxiHivasFogadva(playerid);
	        if(fogadva != NINCS) return SFM(playerid,COL_MKEK,"Te már elfogadtál egy hívást! Ha már nem szeretnél menni érte: /lst lemond %d", fogadva);
	        else if(PlayerInfo[id][pTaxithivott] == 0) return SCM(playerid,COL_MKEK,"Nem hívott taxit.");
	        else TaxiHivasFogad(playerid,id);
	    }
	    else if(egyezik(param,"lemond"))
	    {
	        new fogadva = TaxiHivasFogadva(playerid);
	        if(fogadva == NINCS) return SCM(playerid, COL_MKEK, "Nem fogadtál el hívást!");
	        
	        SFM(fogadva,COL_MKEK,"Taxi: %s lemondta a fuvart!",JatekosNev(playerid));
	        SFM(playerid,COL_MKEK,"Taxi: lemondtad %s hívását!",JatekosNev(fogadva));
	        
	        MarkPlayer(fogadva, playerid, COLOR_INVISIBLE, true);
	    }
	    else if(egyezik(param, "lista"))
	    {
	    
			new veh, model;
			veh = GetPlayerVehicleID(playerid);
			model = GetVehicleModel(veh);

    		new taxikocsi = TaxiLampa(playerid, false, true);
    		
    		if(model != 420 && !taxikocsi) return SCM(playerid,COL_MKEK,"Csak hivatalos taxi jelzésû jármûben használható!");
			
	        SendClientMessage(playerid, COLOR_WHITE, "======================== [ "#COL_MKEK"Híváslista"#COL_FEHER" ] ========================");
			new szam;
			foreach(Player, i)
			{
			    if(!Belepve(i)) continue;
				if(PlayerInfo[i][pTaxithivott] != 1) continue;
			    
				SendFormatMessage(playerid, COLOR_WHITE, "Hívó: "#COL_MKEK"%s"#COL_FEHER" | Elfogadás: "#COL_MKEK"/lst elfogad %d", JatekosNev(i, true), i), szam++;
                szam++;
			}
			if(!szam)
				SCM(playerid, COL_LRED, "Jelenleg nincs hívás.");
	    }
	    else if(egyezik(param, "lámpa") || egyezik(param, "lampa"))
	    {
	        new felle[12];
	        if(sscanf(params, "{s[24]}s[12]", felle))
				return SCM(playerid, COL_MKEK, "Használat: /lst lámpa [felrak / levesz]");
				
	        if(egyezik(felle, "felrak"))
			{
			    new response = TaxiLampa(playerid, true);
			    switch(response)
				{
				    case -2: SCM(playerid, COL_MKEK, "Nincs felrakva a lámpa!");
				    case -1: SCM(playerid, COL_MKEK, "Már felvan rakva a taxi lámpa!");
				    case 0: SCM(playerid, COL_MKEK, "Ezen az autón alapból van taxi lámpa!");
				}
			}
			else if(egyezik(felle, "levesz"))
			{
			    new response = TaxiLampa(playerid, false);
			    switch(response)
				{
				    case -2: SCM(playerid, COL_MKEK, "Nincs felrakva a lámpa!");
				    case -1: SCM(playerid, COL_MKEK, "Már felvan rakva a taxi lámpa!");
				    case 0: SCM(playerid, COL_MKEK, "Ezen az autón alapból van taxi lámpa!");
				}
			    
			}
			else
			    return SCM(playerid, COL_MKEK, "Használat: /lst lámpa [felrak / levesz]");
	    }
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}

CMD:engedely(playerid, params[])
{
	new jatekos;
	if(isnull(params))
	{
		go_help:
		return SCM(playerid, COL_MKEK, "Használat: /engedély [ Felmutat / Megnéz / Kiad / Elvesz ]");
	}

	new param[24];
	sscanf(params, "s[24]{}", param);

	if(!strcmp(param, "kiad", true))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA )
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(PlayerInfo[playerid][pLeader] == 0)
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new eparam[24];
		if(sscanf(params, "{s[24]}us[24]", jatekos, eparam))
			return SCM(playerid, COL_MKEK, "Használat: /engedély kiad [Játékos] [ Engedély(Fegyver) ]");

		if(jatekos == INVALID_PLAYER_ID || !Belepve(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(!strcmp(eparam, "fegyver", true))
		{
			if(PlayerInfo[playerid][pMegerosites] != playerid)
			{
				PlayerInfo[playerid][pMegerosites] = playerid;
				SFM(playerid, COL_MKEK, "Biztos, hogy fegyverengedélyt szeretnél kiállítani %s számára? Ha igen, írd be újra!", JatekosNev(playerid, true));
				return true;
			}

			PlayerInfo[playerid][pMegerosites] = NINCS;
			if(PlayerInfo[jatekos][ppenz] < VizsgaLista[4][1][0])
				return SFM(playerid, COL_LRED, "A játékosnak nincs "#COL_MKEK"%s"#COL_FEHER"$ készpénze, hogy ezt kifizesse!", FN(VizsgaLista[4][1][0], 0, ','));

			PlayerInfo[jatekos][ppenz] -= VizsgaLista[4][1][0];
			new penz = floatround(VizsgaLista[4][1][0] / 2);
			SFM(playerid, COL_VZOLD, "Sikeresen kiállítottál egy fegyverengedélyt %s számára! A rendõrség ebbõl %s$ juttatást kapott!", JatekosNev(jatekos, true), FN(penz, 0, ','));
			SFM(jatekos, COL_VZOLD, "Rendõr %s fegyverengedélyt állított ki számodra! Érvényes: %d napig ((óráig)) | Ára: %s$", JatekosNev(playerid, true), VizsgaLista[4][4][0], FN(VizsgaLista[4][1][0], 0, ','));
			FInfo[FRAKCIO_LSPD][fPenz] += penz;
			PlayerInfo[jatekos][pEngedely][4] = VizsgaLista[4][4][0];

		} else
			SCM(playerid, COL_LRED, "Nincs ilyen engedély! Lehetõségek: Fegyver");

		return true;
	}
	else if(egyezik(param, "elvesz"))
	{
	    if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
			return SCM(playerid,COL_LRED,"Nem vagy Rendõr / FBI!");

		if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSPD && PlayerInfo[playerid][prang] < 2)
		    return SCM(playerid, COL_LRED, "2-es rangtól!");
		    
	    new kinek,mit[32];
		if(sscanf(params, "{s[24]}us[24]", kinek, mit))
		    SCM(playerid, COL_MKEK, "/engedély elvesz [JátékosID/Név] [Kresz / Autó / Fegyver / Motor / Kamion / Mindd]");
		
		if(kinek == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
		if(IsPlayerNPC(kinek)) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
		if(egyezik(mit,"kresz"))
		{
			PlayerInfo[kinek][pEngedely][0] = 0;
			SCM(kinek,COL_MKEK,"Elvették a KRESZ vizsgád!");
			SFM(playerid,COL_MKEK,"Elvetted %s KRESZ vizsgáját!",JatekosNev(kinek));
			return true;
		}
		else if(egyezik(mit,"autó") || egyezik(mit,"auto"))
		{
			PlayerInfo[kinek][pEngedely][1] = 0;
			SCM(kinek,COL_MKEK,"Elvették az autó jogsid!");
			SFM(playerid,COL_MKEK,"Elvetted %s autó jogosítványát!",JatekosNev(kinek));
			return true;
		}
		else if(egyezik(mit,"fegyver"))
		{
			PlayerInfo[kinek][pEngedely][4] = 0;
			SCM(kinek,COL_MKEK,"Elvették a fegyvertartási engedélyed!");
			SFM(playerid,COL_MKEK,"Elvetted %s fegyvertartási engedélyét!",JatekosNev(kinek));
			return true;
		}
		else if(egyezik(mit,"motor"))
		{
			PlayerInfo[kinek][pEngedely][2] = 0;
			SCM(kinek,COL_MKEK,"Elvették a motor jogsid!");
			SFM(playerid,COL_MKEK,"Elvetted %s motor jogosítványát!",JatekosNev(kinek));
			return true;
		}
		else if(egyezik(mit,"kamion"))
		{
			PlayerInfo[kinek][pEngedely][3] = VizsgaLista[3][4][0];
			SCM(kinek,COL_MKEK,"Elvették a kamion jogsid!");
			SFM(playerid,COL_MKEK,"Elvetted %s kamion jogosítványát!",JatekosNev(kinek));
		}
		else if(egyezik(mit,"mindd"))
		{
			new i = NINCS;
			for(;++i < MAX_ENGEDELY;)
			{
				if(PlayerInfo[kinek][pEngedely][i])
				{
					PlayerInfo[kinek][pEngedely][i] = 0;
				}
			}
				
			SCM(kinek,COL_MKEK,"Elvették az engedélyeid!");
			SFM(playerid,COL_MKEK,"Elvetted %s összes engedélyét!",JatekosNev(kinek));
		}
	}
	else if(!strcmp(param, "felmutat", true))
	{
		jatekos = GetClosestPlayer(playerid);
		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 3) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || Bortonben(jatekos))
			return SCM(playerid, COL_LRED, "A közeledben nincs senki!");

		Cselekves(playerid, "felmutatta az engedélyeit valakinek");
	}
	else if(!strcmp(param, "megnéz", true) || !strcmp(param, "megnéz", true))
	{
		jatekos = playerid;
		Cselekves(playerid, "megnézte az engedélyeit");

	} else
		goto go_help;

	SendFormatMessage(jatekos, COLOR_WHITE, "============ [ "#COL_MKEK"%s engedélyei"#COL_FEHER" ] ============", JatekosNev(playerid, true));

	new i = NINCS;
	for(;++i < sizeof(VizsgaLista);)
	{
		if(PlayerInfo[playerid][pEngedely][i])
			SendFormatMessage(jatekos, COLOR_WHITE, ""#COL_MKEK"%s"#COL_FEHER" - még "#COL_MKEK"%d"#COL_FEHER" napig((óráig)) érvényes", VizsgaLista[i][0], PlayerInfo[playerid][pEngedely][i]);
		else
			SendFormatMessage(jatekos, COLOR_WHITE, ""#COL_MKEK"%s"#COL_FEHER" - "#COL_PIROS"Lejárt", VizsgaLista[i][0]);
	}

	return true;
}

CMD:m(playerid, params[])
{
	if(ServerInfo[sCsend] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LAFD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && !IsHitman(playerid))
		return SCM(playerid, COL_LRED, "Te nem vagy se a rendõrség se a tûzoltóság tagja!");

	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Csak Rendõrségi és Tûzoltósági jármûben használhatod!");

	new munka = vInfo[ JarmuID( GetPlayerVehicleID(playerid), playerid ) ][vMunka];
	if(munka != FRAKCIO_LSPD && munka != FRAKCIO_LAFD && munka != FRAKCIO_KATONA && munka != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Csak Rendõrségi, Tûzoltósági, Katona és ATF jármûben használhatod!");

	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "Használat: /m [Megaphone]");

	if(!OOC_Ellenorzes(playerid, "/m", params))
		return true;

	nformat(str, 128, "[ %s o< %s ]", JatekosNev(playerid, true), params);
	ProxDetector(70.0, playerid, str, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	//SetPlayerChatBubble(playerid, str, COLOR_YELLOW, 30.0, 5000);
	return true;
}
CMD:medo(playerid, params[])
{
	if(!strlen(PlayerInfo[playerid][pCharLeiras]))
	    return SCM(playerid, COL_LRED, "Nincs beállítva karakter leírás! Ezt UCP-n megteheted! www."#WEBOLDAL"/ucp");
	    
    SetPlayerChatBubble(playerid, PlayerInfo[playerid][pCharLeiras], COLOR_PURPLE, 30.0, 60000);
    SCM(playerid, COL_LKEK, "Karakter leírás megjelenítve!");
    return 1;
}
CMD:jelveny(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos;
	if(isnull(params))
	{
		go_help:
		return SCM(playerid, COL_MKEK, "Használat: /jelvény [ Felmutat / Megnéz ]");
	}

	if(!strcmp(params, "felmutat", false))
	{
		jatekos = GetClosestPlayer(playerid);
		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 2) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || Bortonben(jatekos))
			return SCM(playerid, COL_LRED, "A közeledben nincs senki!");

		Cselekves(playerid, "felmutatta a jelvényét valakinek");
	}
	else if(!strcmp(params, "megnéz", false) || !strcmp(params, "megnéz", false))
	{
		jatekos = playerid;
		Cselekves(playerid, "megnézte a jelvényét");

	} else
		goto go_help;

	SendClientMessage(jatekos, COLOR_WHITE, "========= [ "#COL_MKEK"Jelvény"#COL_FEHER" ] =========");
	SendFormatMessage(jatekos, COLOR_WHITE, "* Név: "#COL_MKEK"%s", JatekosNev(playerid, true));
	SendFormatMessage(jatekos, COLOR_WHITE, "* Szervezet: "#COL_MKEK"%s", FInfo[PlayerInfo[playerid][pFrakcio]][fNev]);
	SendFormatMessage(jatekos, COLOR_WHITE, "* Beosztás: "#COL_MKEK"%s", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]));

	return true;
}
CMD:kartya(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_RIPORTER)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos;
	if(isnull(params))
	{
		go_help:
		return SCM(playerid, COL_MKEK, "Használat: /kártya [ Felmutat / Megnéz ]");
	}

	if(!strcmp(params, "felmutat", false))
	{
		jatekos = GetClosestPlayer(playerid);
		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 2) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || Bortonben(jatekos))
			return SCM(playerid, COL_LRED, "A közeledben nincs senki!");

		Cselekves(playerid, "felmutatta a sajtó kártyát valakinek");
	}
	else if(!strcmp(params, "megnéz", false) || !strcmp(params, "megnéz", false))
	{
		jatekos = playerid;
		Cselekves(playerid, "megnézte a sajtó kártyáját");

	} else
		goto go_help;

	SendClientMessage(jatekos, COLOR_WHITE, "========= [ "#COL_MKEK"Sajtó Kártya"#COL_FEHER" ] =========");
	SendFormatMessage(jatekos, COLOR_WHITE, "* Név: "#COL_MKEK"%s", JatekosNev(playerid, true));
	SendFormatMessage(jatekos, COLOR_WHITE, "* Szervezet: "#COL_MKEK"%s", FInfo[PlayerInfo[playerid][pFrakcio]][fNev]);
	SendFormatMessage(jatekos, COLOR_WHITE, "* Beosztás: "#COL_MKEK"%s", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]));

	return true;
}

CMD:help(playerid, params[])
{
	#pragma unused params
	#define PRA(%1,%2,%3) SendClientMessage(%1, COLOR_WHITE, #%2"Általános:"#COL_FEHER" "#%3)
	#define MK(%1,%2,%3) SendClientMessage(%1, COLOR_WHITE, #%2"**Munka -"#COL_FEHER" "#%3)
	#define HH(%1,%2,%3) SendClientMessage(%1, COLOR_WHITE, #%2"**Hitman -"#COL_FEHER" "#%3)
	//,ruha(tesztfázis),telefon hulla
	PRA(playerid, COL_MKEK, "/b /s /o /me /do /va /l /stats /eldob /felvesz /szamla /poz /engedély");
	PRA(playerid, COL_MKEK, "/ház /butor /v /motor /tankol /nyit /zár /call /(p)ickup /(h)angup /number");
	PRA(playerid, COL_MKEK, "/nevek /segít /átad /animok /tog /mp3 /vontat /kiszed /személyi /hirdet");
	PRA(playerid, COL_MKEK, "/zsebem /id /berak /visz /motoz /(s)ebesség(k)orlát /bepakol /kipakol /horgaszat");
	PRA(playerid, COL_MKEK, "/eject /megpróbál /walk /eladóházak /átnéz /elvesz /elfogad /jelszovaltas");
	PRA(playerid, COL_MKEK, "/elutasít /kulcs /skill /csere /drog /joint /kokain /heroin /keres /cég /zsák");
	PRA(playerid, COL_MKEK, "/sms /oldcar /kezetfog "#COL_MKEK"Segítségkérés:"#COL_LRED" /zuhanok /aide /report /jelent");
	PRA(playerid, COL_MKEK, "/érme /dobókocka /garázs /streaminfo /házasság /egyenleg /irc /i /ellop /feltör /bankkártya");



    if(PlayerInfo[playerid][pSKV] == 1)
	  MK(playerid, COL_MKEK, "SKV:  /lst /lstgov /lstrang /taxióra /buszjegy /lstr /lstrb");

	if(IsJob(playerid, MUNKA_PILOTA))
		MK(playerid, COL_MKEK, "Pilóta: /munka kezd,befejez");
		
	if(IsJob(playerid, MUNKA_KUKA))
		MK(playerid, COL_MKEK, "Kukás: /munka kezd,befejez");

	if(IsJob(playerid, MUNKA_FAVAGO))
		MK(playerid, COL_MKEK, "Favágó: /munka kezd,befejez");

	if(IsJob(playerid, MUNKA_KAMION))
		MK(playerid, COL_MKEK, "Kamion: /munka kezd,befejez /kr /benzin");

	if(IsJob(playerid, MUNKA_UTTISZTITO))
		MK(playerid, COL_MKEK, "Úttisztító: /munka kezd,befejez");
		
    if(IsJob(playerid, MUNKA_MOWER))
		MK(playerid, COL_MKEK, "Fûnyíró: /munka kezd,befejez");

	if(IsJob(playerid, MUNKA_FEGYVER))
		MK(playerid, COL_MKEK, "Fegyvermester: /vas /vasazas /készít");

	if(IsJob(playerid, MUNKA_FARMER))
		MK(playerid, COL_MKEK, "Farmer: /munka kezd,befejez");

	if(IsJob(playerid, MUNKA_DROG))
		MK(playerid, COL_MKEK, "Drog díler: /készít /drog");

	if(IsJob(playerid, MUNKA_HACK))
		MK(playerid, COL_MKEK, "Hacker: /hack");

	if(IsJob(playerid, MUNKA_ARU))
		MK(playerid, COL_MKEK, "Árúszállító: /munka");
		
    if(IsJob(playerid, MUNKA_PENZSZALLITO))
		MK(playerid, COL_MKEK, "Pénzszállító: /atm");

	new fk = PlayerInfo[playerid][pFrakcio];
	switch( fk )
	{
		case FRAKCIO_LSPD: //1
		{
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /lista /duty /útzár /bója /körözés /bilincs /lecsuk /gov /d /r /rb /frakció /berak /visz", FInfo[fk][fNev]);
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /lenyomoz /ticket /jelvény /m /engedély /uzemmod /alruha /hq /szonda /jelvény /lemos", FInfo[fk][fNev]);
		}
		case FRAKCIO_LSFD: //2
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /lista /duty /bója /gov /d /r /rb /frakció /m", FInfo[fk][fNev]);
		case FRAKCIO_LAFD: //3
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /gyógyszer /segit /duty /lista /gov /d /r /rb /frakció /lista /duty /bója /porolto /furesz", FInfo[fk][fNev]);
		case FRAKCIO_GSF: //4
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_KORMANY: //5
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /gov /d /r /rb /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_KATONA: //6
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /nevek /frakció /katonasag /duty /uzemmod", FInfo[fk][fNev]);
		case FRAKCIO_BALLAS: //8
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_BRATVA: //9
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_SZERELO: //10
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /szerel [ jármû | számla ] /v tuning)", FInfo[fk][fNev]);
		case FRAKCIO_IMPERIAL: //11
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_RIPORTER: //12
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /hír", FInfo[fk][fNev]);
		case FRAKCIO_LCN: //13
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_YAKUZA: //14
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_FBI: //15
		{
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /lista /duty /útzár /bója /sokk /körözés /bilincs /lecsuk /gov /d /r /rb /frakció /berak /visz", FInfo[fk][fNev]);
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /lenyomoz /ticket /jelvény /m /uzemmod", FInfo[fk][fNev]);
		}
		case FRAKCIO_CRIMINALS: //17
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_IRA: //18
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_STOCKWELL: //19
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_IMPERIALG: //20
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
        case FRAKCIO_EPITESZ: //21
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /frakció /roadblock /removerb /boja /gov", FInfo[fk][fNev]);
	}

	if(IsHitman(playerid))
		HH(playerid,COL_LKEK,"/portable /vérdíj /mérgezés");

	if(PlayerInfo[playerid][pMapper] >= 1)
	{
	    MK(playerid, COL_MKEK, "Mapper: /flymode | /mark | /gotomark | /pos | /mapper | /gotopos | /vhspawn");
	    MK(playerid, COL_MKEK, "Mapper: /pacsi | /bal | /jobb | /fel | /le | /goto | /tv");
	}
	
	if(PlayerInfo[playerid][pSWAT] == 1)
	{
	    MK(playerid, COL_MKEK, "SWAT: /sr /srb /sd /sinv /srang /sgov /stagok");
	}
	return true;
}
CMD:pos(playerid)
{
	if(PlayerInfo[playerid][pMapper] >= 1 || Admin(playerid,5))
	{
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid,X,Y,Z);
		SendFormatMessage(playerid,RSARG,"X: %f | Y: %f | Z:%f",X,Y,Z);
	}
	return 1;
}
CMD:animok(p, params[])
{
	#pragma unused params
	SendClientMessage(p, COLOR_WHITE, "========================== [ "COL_MKEK"Anim lista"#COL_FEHER" ] ==========================");
	SendClientMessage(p, COLOR_WHITE, "Animok: /carjacked /handsup /wank /cellin /cellout /drunk /fekvés /guggol");
	SendClientMessage(p, COLOR_WHITE, "Animok: /ideges /tánc /laza /gyász /sír /kiss /gurul /mivan /jöhettek /állj /falhoz");
	SendClientMessage(p, COLOR_WHITE, "Animok: /sleep /ground /getup /holding /gyere /kézenállás /calltaxi /bomb /getarrested");
	SendClientMessage(p, COLOR_WHITE, "Animok: /laugh /lookout /robman /crossarms /lay /hide /vomit /eszik /wave /slapass /deal");
	SendClientMessage(p, COLOR_WHITE, "Animok: /crack /smoke /gro /chat /fucku /taichi /chairsit /fall /fallback /injured /sup");
	SendClientMessage(p, COLOR_WHITE, "Animok: /rap /push /akick /lowbodypush /spray /headbutt /medic /koface /kostomach /lifejump");
	SendClientMessage(p, COLOR_WHITE, "Animok: /leftslap /rollfall /carlock /carjack /hoodfrisked /lightcig /tapcig /bat /chant");
	SendClientMessage(p, COLOR_WHITE, "Animok: /finger /shouting /cop /elbow /kneekick /fstance /gpunch /airkick /gkick");
	SendClientMessage(p, COLOR_WHITE, "Animok: /lowthrow /highthrow /dealstance /knife /basket /aim /lean /strip /dance /dj");
	return true;
}

CMD:ah(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1) && !IsAS(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	#define ASH(%1,%2,%3) SendClientMessage(%1, COLOR_WHITE, #%2"Adminsegéd:"#COL_FEHER" "#%3)
	#define AH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"Admin("#%3"):"#COL_FEHER" "#%4)
	#define FSAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"FõAdminSegéd("#%3"):"#COL_FEHER" "#%4)
	#define FAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"FõAdmin("#%3"):"#COL_FEHER" "#%4)
	#define SAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"SuperAdmin("#%3"):"#COL_FEHER" "#%4)
	#define CAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"AdminController("#%3"):"#COL_FEHER" "#%4)
	#define SZKR(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"Szkripter("#%3"):"#COL_FEHER" "#%4)
	#define FEAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"Fejlesztõ("#%3"):"#COL_FEHER" "#%4)
	#define TAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"Tulajdonos("#%3"):"#COL_FEHER" "#%4)

	if(IsAS(playerid)) {
		ASH(playerid, COL_NARANCS, "/as /warn /set /(u)n(f)reeze /respawn /vhspawn /asayn /vá /tv /tog /asduty /vwbug");
	}
    if(Admin(playerid, 1)) {
		AH(playerid, COL_MKEK, 1, "/a /asay(n) /kick /warn /respawn /tele /crs /admins /set /aka /asegit /tv");
		AH(playerid, COL_MKEK, 1, "/(un)freeze /jail /aduty /check /bal /jobb /fel /le /vá /(f)ra(k)ció");
		AH(playerid, COL_MKEK, 1, "/nevek /ahegy /apw /vhspawn /pacsi /tog /goto /enged /gethp /get /bid /cc");
		AH(playerid, COL_MKEK, 1, "/w(ay)p(oint) /mark /gotomark /setint /setvw /cuccreset /maszkid /flymode");
		AH(playerid, COL_MKEK, 1, "/korhazban /ajailosok /pacsi /getskin");
	}
   	if(Admin(playerid, 2)) {
		AH(playerid, COL_MKEK, 2, "/v /ipban /ban /flip /getip");
	}
    if(Admin(playerid, 3)) {
		AH(playerid, COL_MKEK, 3, "/gotocar /getcar /ház /dmoff /auncuff /lenyomoz");
	}
	if(Admin(playerid, 4)) {
		AH(playerid, COL_MKEK, 4, "/gotopos /mindenthall /statisztika /set /x /y /z");
	}
	if(Admin(playerid, 5)) {
		AH(playerid, COL_MKEK, 5, "/helper /unban /v töröl /veh /atankol /destroycars /cég /kocsiba /vr /sban");
	}
	if(Admin(playerid, FSEGED_SZINT)) {
		FSAH(playerid, COL_GREEN, FSEGED_SZINT, "/ház bejárat, /napszak, /idojaras, /névváltás, /zene, /tilt");
	}
	if(Admin(playerid, FOADMIN_SZINT)) {
		FAH(playerid, COL_GREEN, FOADMIN_SZINT, " /eladókocsik, /ajtó, /megtankol, /desync");
		FAH(playerid, COL_GREEN, FOADMIN_SZINT, "/object, /telecsin, /teletorol, /pozmentes, /tûz, /oocki, /cég");
		FAH(playerid, COL_GREEN, FOADMIN_SZINT, "/ujház, /terület, /fa, /széf, /inaktiv, /areport");
		FAH(playerid, COL_GREEN, FOADMIN_SZINT, "/robbant, /agl, /zeró, /fuelcars, /noname, /gpscsin, /gpstorol");
		FAH(playerid, COL_GREEN, FOADMIN_SZINT, "/újgarázs, /nullaz, /startlotto");
	}
	if(Admin(playerid, SZUPER_SZINT)) {
		SAH(playerid, COL_NARANCS, SZUPER_SZINT, "/benzinkút, /gmx, /kapu, /ujmodel, /tog törés, /jetpack, /fenykard");
	}
	if(Admin(playerid, AC_SZINT)) {
		CAH(playerid, COL_ROZSA, AC_SZINT, "/makeadmin,, /makeleader, /ujkocsi, /debugcrs, /vr all, /verseny, /fonduty, /smindenthall, /drink lerak /cég");
	}
	if(Admin(playerid, FEJLESZTO_SZINT)) {
	    FEAH(playerid,COL_SZURKE, FEJLESZTO_SZINT, "/godmode /objectresi");
	}
	if(Admin(playerid, TULAJ_SZINT)) {
		TAH(playerid, COL_SZURKE, TULAJ_SZINT, "/debug, /adatmentes, /cég, /tog");
	}
	if(IsScripter(playerid)) {
		SendClientMessage(playerid, COLOR_YELLOW,"Scripter:{FFFFFF} /faset /debug, /damaged, /damage, /pedanim, /sound, /ho");
		SendClientMessage(playerid, COLOR_YELLOW,"Scripter:{FFFFFF} /kleader /graffiti /cctv, /smleader, /lstleader, /sinv /3dtext");
	}
	if(IsLewis(playerid)) {
		SendClientMessage(playerid, YER,"Szerverkezelõ:{FFFFFF} /cmd /text /crash /randomspawn /parancsali /objectresi /nulláz /nullazas /tmentes");
	}
	return true;
}

new g_premiumCuccok[2][2][28] =
{
 	{"Névváltás", 400},
 	{"Egyedi telefonszám", 400}
};
Dialog:PPMenu(playerid, response, listitem, inputtext[])
{
    if (response)
    {
        if(listitem == 1 && PlayerInfo[playerid][pCuccok][BL_TELEFON] == 0) return SCM(playerid, COL_LRED, "Nincs telefonod!");
        
        new ar = g_premiumCuccok[listitem][1][0];
        if(Megerosit(playerid, false, MG_DIALOG, listitem)) {
			if(GivePP(playerid, -ar)){
				SFM(playerid, COL_MKEK, "Sikeresen megvetted a következõt: %s! %dpp levonva!", g_premiumCuccok[listitem][0], ar);

				switch(listitem)
				{
				    case 0:
					{
					    SCM(playerid, COL_MKEK, "Használat: /nevvaltas [Új név]");
					    PlayerInfo[playerid][pAEnged][1] = true;
					}
					case 1:
					{
					    SCM(playerid, COL_MKEK, "Használat: /vált telefonszám [Új telefonszám]");
					    PlayerInfo[playerid][pAEnged][2] = true;
					}
				}
			}
			else
				SFM(playerid, COL_LRED, "Nincs elég prémiumpontod ahhoz, hogy ezt megvedd! (%dpp)", ar);
		}
		else {
			cmd_premium(playerid, "");
			SFM(playerid, COL_LRED, "Biztos, hogy ezt akarod megvenni %dprémiumpontér? Ha igen, válaszd ki újból!", ar);
		}
    }
    else
        Megerosit(playerid, false, NINCS, NINCS);
        
    return 1;
}
CMD:premium(playerid, params[])
{
    Dialog_Show(playerid, PPMenu, DIALOG_STYLE_LIST, "Prémiummenü", "Névváltás\t400pp", "Megvesz", "Mégse");
	return true;
}
CMD:stats(playerid, params[])
{
	new bool:dbg;
	if(!strcmp(params, "debug")) { dbg = true; }
	//SendClientMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ Személyes Adataid ]"#COL_FEHER" ===================");
	ShowStats(playerid, playerid, dbg);
	return true;
}

CMD:skill(playerid, params[])
{
	SendClientMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ Tapasztalat pontjaid ]"#COL_FEHER" ===================");
	ShowSkill(playerid, playerid);
	return true;
}

CMD:szemelyi(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /személyi [ Megnéz / Felmutat / Vesz ]");

	if(!strcmp(params, "megnéz", true) || !strcmp(params, "megnez", true))
	{
		Cselekves(playerid, "megnézte a személyiét");
		SendClientMessage(playerid, COLOR_WHITE, "============= [ "#COL_MKEK"Személyi igazolvány"#COL_FEHER" ] =============");
		if(!PlayerInfo[playerid][pSzemelyi]) return SCM(playerid, COL_LRED, "A személyi igazolványod érvénytelen, kérlek igényelj újat! (( /személyi vesz ))");
		SendFormatMessage(playerid, COLOR_YELLOW2, "Név: %s | Életkor: %d | Származás: %s", JatekosNev(playerid, true), PlayerInfo[playerid][peletkor], Szarmazas(PlayerInfo[playerid][pszarmazas]));
	}
	else if(!strcmp(params, "felmutat", true) || !strcmp(params, "mutat", true))
	{
		if(!PlayerInfo[playerid][pSzemelyi])
			return SCM(playerid, COL_LRED, "A személyi igazolványod érvénytelen, kérlek igényelj újat! (( /személyi vesz ))");

		new jatekos = KozelbenValaki(playerid, 4.0);
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "A közeledben nincs senki!");

		Cselekves(playerid, "felmutatta a személyiét valakinek");
		SendClientMessage(jatekos, COLOR_WHITE, "============= [ "#COL_MKEK"Személyi igazolvány"#COL_FEHER" ] =============");
		SendFormatMessage(jatekos, COLOR_YELLOW2, "Név: %s | Életkor: %d | Származás: %s", JatekosNev(playerid, true), PlayerInfo[playerid][peletkor], Szarmazas(PlayerInfo[playerid][pszarmazas]));
	}
	else if(!strcmp(params, "vesz", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1538.98, 1744.11, 10.83))
			return SCM(playerid, COL_LRED, "Nem vagy a városházán!");

		if(PlayerInfo[playerid][pSzemelyi])
			return SCM(playerid, COL_LRED, "Neked már van Személyi igazolványod!");

		if(PlayerInfo[playerid][ppenz] < 50)
			return SCM(playerid, COL_LRED, "A szeméyi igazolvány ára 50$. Nincs nálad ennyi készpénz!");

		PlayerInfo[playerid][ppenz] -= 50;
		PlayerInfo[playerid][pSzemelyi] = 50;
		SCM(playerid,COL_VZOLD,"Vettél egy személyit!");
	}
	return true;
}

CMD:zsebem(playerid, params[])
{
	SendClientMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ Zsebed tartalma ]"#COL_FEHER" ===================");
	ShowZseb(playerid, playerid);
	return true;
}
CMD:3dtext(playerid,params[])
{
	if(!IsScripter(playerid)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	new param[32];
	if(sscanf(params,"s[32]{}",param)) return SCM(playerid,COL_VZOLD,"Használat: /3DText [ Új / Közeli / Töröl ]");
	else if(!strcmp(param,"új",true))
	{
	    new text[128], color, Float:x, Float:y, Float:z;
	    if(sscanf(params,"{s[32]}ds[128]",color,text)) return SCM(playerid,COL_VZOLD,"Használat: /3dtext új [Színek: 0: Zöld | 1: Sárga | 2: Piros | 3: Kék] [Szöveg]");
	    else if(color < 0 || color > 3) return SCM(playerid,COL_LRED,"Színek: 0: Zöld | 1: Sárga | 2: Piros | 3: Kék");
	    else if(strlen(text) > 128) return SCM(playerid,COL_LRED,"Max. 128 karakter!");
	    else
	    {
	        new ccolor;
	        new lid = UjLabelID();
	        GetPlayerPos(playerid,x,y,z);
	        LabelInfo[lid][lVan] = 1;
	        LabelInfo[lid][lx] = x;
	        LabelInfo[lid][ly] = y;
	        LabelInfo[lid][lz] = z;
			LabelInfo[lid][lText] = text;
			LabelInfo[lid][lszin] = color;
			new querycske[2048];
        	/*format(querycske, sizeof(querycske), "INSERT INTO `"#MYSQL_LABEL_TABLA"` (ID, X, Y, Z, Text, szin)");
			format(querycske, sizeof(querycske), "%s VALUES('%d',", querycske, lid);
			format(querycske, sizeof(querycske), "%s'%f','%f',", querycske, LabelInfo[lid][lx], LabelInfo[lid][ly]);
			format(querycske, sizeof(querycske), "%s'%f','%s',", querycske, LabelInfo[lid][lz], LabelInfo[lid][lText]);
			format(querycske, sizeof(querycske), "%s'%d')",querycske, LabelInfo[lid][lszin]);*/
			format(querycske,sizeof querycske, "INSERT INTO `"#MYSQL_3DTEXT_TABLA"` (ID, X, Y, Z, Text, szin) VALUES('%d','%f','%f','%f','%s','%d')",lid,LabelInfo[lid][lx], LabelInfo[lid][ly], LabelInfo[lid][lz], LabelInfo[lid][lText], LabelInfo[lid][lszin]);
			mysql_tquery(sql_ID, querycske, "", "");
			switch(LabelInfo[lid][lszin])
			{
			    case 0: ccolor = COLOR_GREEN;
			    case 1: ccolor = COLOR_YELLOW;
				case 2: ccolor = COLOR_RED;
				case 3: ccolor = LKEK;
			}
			dynlabels[lid] = CreateDynamic3DTextLabel(LabelInfo[lid][lText],ccolor,LabelInfo[lid][lx],LabelInfo[lid][ly],LabelInfo[lid][lz],DEFAULT_LABEL_DISTANCE);
	    }
	}
	else if(!strcmp(param,"közeli",true))
	{
	    new id = LegkozelebbiLabel(playerid);
		SFM(playerid,COL_VZOLD,"A hozzád legközelebb eso 3DText ID-je: %d. (Felirat: %s)",id,LabelInfo[id][lText]);
	}
	else if(!strcmp(param,"töröl",true))
	{
		new id;
		if(sscanf(params,"{s[32]}d",id)) return SCM(playerid,COL_VZOLD,"Használat: /3dtext töröl [ID]");
		else if(LabelInfo[id][lVan] == 0) return SCM(playerid,COL_LRED,"Nincs ilyen 3DTextLabel.");
		else {
		    SFM(playerid,COL_MKEK,"3DTextLabel törölve. (%d)",id);
		    nformat(rquery,256,"DELETE FROM `"#MYSQL_3DTEXT_TABLA"` WHERE ID = '%d'",id);
            mysql_tquery(sql_ID, rquery, "", "");
            LabelInfo[id][lVan] = 0;
			DestroyDynamic3DTextLabel(dynlabels[id]);
		}
	}
	return 1;
}
/*CMD:ept(playerid,params[])
{
	new id = PlayerInfo[playerid][pFrakcio];
	if(id != FRAKCIO_EPITESZ)
		return SCM(playerid, COL_LRED, "A te szervezeted nem jogosult erre!");

	if(PlayerInfo[playerid][prang] < 6)
		return SFM(playerid, COL_LRED, "Minimum ["#COL_MKEK"6"#COL_FEHER"]"#COL_MKEK"%s"#COL_FEHER" rang szükséges a használatához!", Rangok(6, PlayerInfo[playerid][pFrakcio]));

	new param[32];
	if(sscanf(params,"s[32]{}",param)) return SCM(playerid,COL_VZOLD,"Használat: /ept [ Új / Közeli / Töröl ]");
	else if(!strcmp(param,"új",true))
	{
	    new text[128], color, Float:x, Float:y, Float:z;
		color = 2;

	    if(sscanf(params,"{s[32]}ds[128]",color,text)) return SCM(playerid,COL_VZOLD,"Használat: /ept új");
	    else if(strlen(text) > 128) return SCM(playerid,COL_LRED,"Max. 128 karakter!");
	    else
	    {
	        new ccolor;
	        new lid = UjLabelID();
	        GetPlayerPos(playerid,x,y,z);
	        LabelInfo[lid][lVan] = 1;
	        LabelInfo[lid][lx] = x;
	        LabelInfo[lid][ly] = y;
	        LabelInfo[lid][lz] = z;
			LabelInfo[lid][lText] = text;
			LabelInfo[lid][lszin] = color;
			new querycske[2048];
			format(querycske,sizeof querycske, "INSERT INTO `"#MYSQL_3DTEXT_TABLA"` (ID, X, Y, Z, Text, szin) VALUES('%d','%f','%f','%f','%s','%d')",lid,LabelInfo[lid][lx], LabelInfo[lid][ly], LabelInfo[lid][lz], LabelInfo[lid][lText], LabelInfo[lid][lszin]);
			mysql_tquery(sql_ID, querycske, "", "");
			switch(LabelInfo[lid][lszin])
			{
			    case 0: ccolor = COLOR_GREEN;
			    case 1: ccolor = COLOR_YELLOW;
				case 2: ccolor = COLOR_RED;
				case 3: ccolor = LKEK;
			}
			dynlabels[lid] = CreateDynamic3DTextLabel(LabelInfo[lid][lText],ccolor,LabelInfo[lid][lx],LabelInfo[lid][ly],LabelInfo[lid][lz],DEFAULT_LABEL_DISTANCE);
	    }
	}
	return 1;
}*/
CMD:vdebug(playerid,params[])
{
	new vid = GetPlayerVehicleID(playerid);
	if(vid == INVALID_VEHICLE_ID) return SCM(playerid,COL_MKEK,"Nincs ilyen kocsi.");
	new veh = JarmuID(vid,playerid);
	SFM(playerid,COL_MKEK,"Debug infó: %s[%d] SQL: %d",VehicleNames[vInfo[veh][vModel] -400],vid,veh);
	return 1;
}
CMD:ap(playerid,params[])
{
	if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	new eparam[32];
	if(sscanf(params,"s[32]{}",eparam)) return SCM(playerid,COL_MKEK,"Használat: /a(dmin)p(arkoló) [ Berak / Kiszed / Lista]");
	else if(!strcmp(eparam,"berak",true))
	{
		new vid;
		if(sscanf(params,"{s[32]}d",vid)) return SCM(playerid, COL_MKEK, "Használat: /ap berak [JármûID]");
		else if(vid == INVALID_VEHICLE_ID) return SCM(playerid,COL_LRED,"Nincs ilyen jármû!");
		new veh;
		veh = JarmuID(vid,playerid);
		if(vInfo[veh][vApben] == 1) return SCM(playerid,COL_LRED,"Ez a jármû már APben van.");
		else {
			vInfo[veh][vApben] = 1;
			vUpdate(veh, vuApben);
			AdminUzenet(COLOR_LIGHTRED,1,"%s AdminParkolóba rakott egy %s tipusú jármûvet. ID: %d",JatekosNev(playerid),VehicleNames[vInfo[veh][vModel] -400],vid);
			SetVehicleVirtualWorld(vid,AP_VW);
			SetVehicleToRespawn(vid);
		}
	}
	else if(!strcmp(eparam,"kiszed",true))
	{
		new vid;
		if(sscanf(params,"{s[32]}d",vid)) return SCM(playerid, COL_MKEK, "Használat: /ap kiszed [JármûID]");
		else if(vid == INVALID_VEHICLE_ID) return SCM(playerid,COL_LRED,"Nincs ilyen jármû!");
		new veh = JarmuID(vid,playerid);
		if(vInfo[veh][vApben] == 0) return SCM(playerid,COL_LRED,"Ez a jármû nincs AP-ben.");
		else {
			vInfo[veh][vApben] = 0;
			vUpdate(veh, vuApben);
			AdminUzenet(COLOR_LIGHTRED,1,"%s kivett az AdminParkolóból egy %s tipusú jármûvet. ID: %d",JatekosNev(playerid),VehicleNames[vInfo[veh][vModel] -400],vid);
			SetVehicleVirtualWorld(vid,0);
			SetVehicleToRespawn(vid);
		}
	}
	else if(!strcmp(eparam,"lista",true))
	{
		new i = 0,lista[128],talalt;
		for(;++i < MAX_VEHICLES;)
		{
			if(vInfo[i][vApben])
			{
				format(lista, 128,"Jármû ID: %d - Model: %s - Tulajdonos: %s",vInfo[i][vID],VehicleNames[vInfo[i][vModel] - 400], vInfo[i][vTulaj]);
				SendClientMessage(playerid, COLOR_LBLUE, lista);
				talalt++;
			}
		}
		if(!talalt) return SCM(playerid,COL_LRED,"Jelenleg nincs admin által lefoglalt jármû!");
	}
	return 1;
}
CMD:objectresi(playerid,params[])
{
	if(!IsLewis(playerid)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	new melyik[32];
	if(sscanf(params,"s[32]",melyik)) return SCM(playerid,COL_LKEK,"/objectresi [Alap/Frakció]");
	if(egyezik(melyik,"alap"))
	{
		GameTextForAll("~r~Object restart",20000,3);
		foreach(Player,x)
		{
			if(GetPlayerVirtualWorld(x) != 0)
			{
				Freeze(x,20000);
				SCM(x,COL_RSARG,"15másodpercig lefagyasztottalak az object újratöltés miatt!(1)");
			}
		}
		SendRconCommand("reloadfs objectek");
	}
	else if(egyezik(melyik,"frakció"))
	{
		GameTextForAll("Object restart",20000,3);
		foreach(Player,x)
		{
			if(GetPlayerVirtualWorld(x) != 0)
			{
				Freeze(x,20000);
				SCM(x,COL_RSARG,"15másodpercig lefagyasztottalak az object újratöltés miatt!(2)");
			}
		}
		SendRconCommand("reloadfs objectek_frakcio");
	}
	return 1;
}
CMD:kleader(playerid,params[])
{
	if(Admin(playerid,AC_SZINT))
	{
	    new id;
	    if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /kleader [Játékos]");
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	    else {
			PlayerInfo[id][pKereskedo] = 3;
			SFM(playerid,COL_MKEK,"Kinevezted %st kereskedõ leaderré.",JatekosNev(id));
			SFM(id,COL_MKEK,"%s kinevezett kereskedõ leaderré.",JatekosNev(playerid));
	    }
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}
CMD:godmode(playerid,params[])
{
	if(Admin(playerid,FEJLESZTO_SZINT))
	{
		switch(PlayerInfo[playerid][pGodmode])
		{
		    case 0: {
		        PlayerInfo[playerid][pGodmode] = 1;
		        SCM(playerid,COL_MKEK,"Godmode bekapcsolva.");
		        SetHealth(playerid, MAX_HP, true);
				SetArmor(playerid, MAX_ARMOR, true);
		    }
		    case 1: {
				SetHealth(playerid, MAX_HP, true);
				SetArmor(playerid, MAX_ARMOR, true);
		        PlayerInfo[playerid][pGodmode] = 0;
		        SCM(playerid,COL_MKEK,"Godmode kikapcsolva.");
		    }
		}
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}
CMD:cmd(playerid,params[])
{
	if(Admin(playerid,FEJLESZTO_SZINT))
	{
	    new id;
	    new cmdt[144];
	    if(sscanf(params,"us[144]",id,cmdt)) return SCM(playerid,COL_MKEK,"Használat:{FFFFFF} /cmd [Játékos] [Parancs] || A parancsot a játékos küldi el, mintha õ írta volna.");
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs {FFFFFF}ilyen játékos.");
		else if(IsLewis(id)) return SCM(playerid,COL_LRED,"Felejsd el..");
	    else {
	        CallRemoteFunction("OnPlayerCommandText","is",id,cmdt);
	        SCM(playerid,COL_VZOLD,"Elküldve ;)");
		}
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}

CMD:fonduty(playerid,params[])
{
	if(Admin(playerid,AC_SZINT))
	{
	    new id;
	    new cmdt[144]="/aduty";
	    if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat:{FFFFFF} /fonduty [AdminNév] || A parancs ondutyba állítja az adott admint!");
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs {FFFFFF}ilyen játékos.");
	    else if(!Admin(id,1)) return SCM(playerid,COL_LRED,"Õ nem adminisztrátor.");
	    else if(IsLewis(id)) return SCM(playerid,COL_LRED,"Felejsd el..");
	    else {
	        CallRemoteFunction("OnPlayerCommandText","is",id,cmdt);
	        SCM(playerid,COL_VZOLD,"Ondutyba állítva!");
		}
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}

CMD:text(playerid,params[])
{
	if(Admin(playerid,FEJLESZTO_SZINT))
	{
	    new id;
	    new cmdt[144];
	    if(sscanf(params,"us[144]",id,cmdt)) return SCM(playerid,COL_MKEK,"Használat:{FFFFFF} /text [Játékos] [Szöveg] || A szöveget a játékos küldi el, mintha õ írta volna.");
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs {FFFFFF}ilyen játékos.");
		else if(IsLewis(id)) return SCM(playerid,COL_LRED,"Felejsd el..");
	    //else if(IsScripter(id)) return SCM(playerid,COL_LR
	    else {
	        CallRemoteFunction("OnPlayerText","is",id,cmdt);
	        SCM(playerid,COL_VZOLD,"Elküldve ;)");
		}
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}

CMD:setint(playerid,params[])
{
	new szam;
    if(sscanf(params,"d",szam)) return SCM(playerid,COL_MKEK,"Használat: /setint [Érték]");
	else if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else {
		SetPlayerInterior(playerid,szam);
		SFM(playerid,COL_MKEK,"Új interiorod: %d", szam);
	}
	return 1;
}
CMD:setvw(playerid,params[])
{
	new szam;
    if(sscanf(params,"d",szam)) return SCM(playerid,COL_MKEK,"Használat: /setvw [Érték]");
	else if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else {
		SetVirtualWorld(playerid,szam);
		SFM(playerid,COL_MKEK,"Új VW-d: %d", szam);
	}
	return 1;
}
CMD:lstleader(playerid,params[])
{
    new id;
	if(!Admin(playerid, AC_SZINT)) return SCM(playerid,COL_LRED,"Csak AC rakhat be SKV leadert.");
	else if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /lstleader [Játékos/ID]");
	else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_MKEK,"Nincs ilyen játékos.");
	else {
//	    new str[144];
		PlayerInfo[id][pSKV] = 1;
		PlayerInfo[id][pSKVrang] = 6;
		SFM(playerid,COL_MKEK,"Kinevezted %st LST leaderré.",JatekosNev(id));
		SFM(id,COL_MKEK,"%s kinevezett LST leadernek.",JatekosNev(playerid));
	}
	return 1;
}
CMD:smleader(playerid,params[])
{
	new id;
	if(!Admin(playerid, AC_SZINT)) return SCM(playerid,COL_LRED,"Csak Scripter rakhat be S&M leadert.");
	else if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /smleader [Játékos/ID]");
	else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_MKEK,"Nincs ilyen játékos.");
	else {
		PlayerInfo[id][pSM] = 1;
		PlayerInfo[id][pSMrang] = 3;
		SFM(playerid,COL_MKEK,"Kinevezted %st S&M Vezetõvé.",JatekosNev(id));
		SFM(id,COL_MKEK,"%s kinevezett S&M vezetõnek.",JatekosNev(playerid));
	}
	return 1;
}
CMD:mark(playerid,params[])
{
	if(!Admin(playerid,1) && !PlayerInfo[playerid][pMapper]) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else {
	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid,x,y,z);
	    PlayerInfo[playerid][pMarkx] = x;
	    PlayerInfo[playerid][pMarky] = y;
	    PlayerInfo[playerid][pMarkz] = z;
	    PlayerInfo[playerid][pMarkjelolve] = 1;
	    SCM(playerid,COL_MKEK,"Leraktad. A teleportáláshoz használd a /gotomark-ot.");
	}
	return 1;
}

CMD:gotomark(playerid,params[])
{
    if(!Admin(playerid,1) && !PlayerInfo[playerid][pMapper]) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else if(PlayerInfo[playerid][pMarkjelolve] == 0) return SCM(playerid,COL_LRED,"Nem tettél le magadnak /mark-ot.");
	else if(IsPlayerInAnyVehicle(playerid))
	{
	    new veh = GetPlayerVehicleID(playerid);
	    SetVehiclePos(veh,PlayerInfo[playerid][pMarkx],PlayerInfo[playerid][pMarky],PlayerInfo[playerid][pMarkz]);
	    SCM(playerid,COL_MKEK,"Teleportálva.");
	}
	else {
		SetPlayerPos(playerid,PlayerInfo[playerid][pMarkx],PlayerInfo[playerid][pMarky],PlayerInfo[playerid][pMarkz]);
		SCM(playerid,COL_MKEK,"Teleportálva.");
	}
	if(PlayerInfo[playerid][pMapper] > 0)
	{
		AdminUzenet(RED, 1, "Mapper"#COL_LKEK" %s elteleportált a mentett helyére ( /gotomark )!", JatekosNev(playerid));
	}
	return 1;
}

CMD:wp(playerid,params[])
{
	if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else if(PlayerInfo[playerid][pWPjelolve] == 0) return SCM(playerid,COL_LRED,"Nem jelöltél ki WayPointot a térképen.");
	else if(IsPlayerInAnyVehicle(playerid))
	{
	    new veh = GetPlayerVehicleID(playerid);
	    SetVehiclePos(veh,PlayerInfo[playerid][pWPX],PlayerInfo[playerid][pWPY],PlayerInfo[playerid][pWPZ]+5.00);
	    SCM(playerid,COL_MKEK,"Teleportálva.");
	}
	else {
		SetPlayerPos(playerid,PlayerInfo[playerid][pWPX],PlayerInfo[playerid][pWPY],PlayerInfo[playerid][pWPZ]+5.00);
		SCM(playerid,COL_MKEK,"Teleportálva.");
	}
	return 1;
}

CMD:enged(playerid, params[])
{
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new param[32];
	
	if(sscanf(params,"s[32]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /enged [ Goto / Névváltás]");

	if(egyezik(param, "goto"))
	{
  		if((PlayerInfo[playerid][pAEnged][0] = true - PlayerInfo[playerid][pAEnged][0]))
			SCM(playerid, COL_VZOLD, "Engedélyezted, hogy kisebb Admin is teleportálhasson hozzád!");
		else
			SCM(playerid, COL_MKEK, "Tiltottad, hogy kisebb Admin is teleportálhasson hozzád!");
	}
	else if(egyezik(param, "névváltás") || egyezik(param, "nevvaltas"))
	{
	    if(!Admin(playerid, 3)) return SCM(playerid, COL_MKEK, "Neked ezt nem szabad., :(");
	    
	    new jatekos;
	    if(sscanf(params,"{s[32]}u", jatekos)) return SCM(playerid, COL_MKEK, "Használat: /enged névváltás [JátékosID / Név]");
	    else if(jatekos == INVALID_PLAYER_ID) return SCM(playerid,COL_MKEK,"Nincs ilyen játékos.");
	    
		if((PlayerInfo[jatekos][pAEnged][1] = true - PlayerInfo[jatekos][pAEnged][1]))
			SFM(playerid, COL_VZOLD, "Engedélyezted %s számára a névváltást!", returnName(jatekos)), SCM(jatekos, COL_VZOLD, "Egy admin engedélyezte neked a névváltást!");
		else
			SFM(playerid, COL_MKEK, "Tiltottad %s számára a névváltást!", returnName(jatekos)), SCM(jatekos, COL_MKEK, "Egy admin tiltotta neked a névváltást!");
	}
	return true;
}

//Tûz rendszer by Martin
CMD:tuz(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT) && PlayerInfo[playerid][pLeader] != FRAKCIO_LAFD)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
	{
		//if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSFD && !Admin(playerid, SZUPER_SZINT))
			//SCM(playerid, COL_MKEK, "Használat: /tûz [ Indít ]");
		//if(Admin(playerid, SZUPER_SZINT))
		SCM(playerid, COL_MKEK, "Használat: /tûz [ Új / Töröl / Mutat / Go / Indít / Stop / Info ]");
		return true;
	}

	new bool:jog = true;
	//if(Admin(playerid, SZUPER_SZINT)) jog = true;

	new param[24], extra = NINCS;
	sscanf(params, "s[24]D(-1){}", param, extra);
	if(!strcmp(param, "indít", false) || !strcmp(param, "indit", false))
	{
		/*if((PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSFD) && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Csak Leader és AlLeader indíthat akciót!");*/

		if(ServerInfo[sTuzIdo][2] > gettime() && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Kevesebb mint 10 perce volt tûz, nem kell ilyen sûrûn gyakorolni...");

		if(OnlineTagok(FRAKCIO_LAFD, true) < TUZ_MINTAG)
			return SCM(playerid, COL_LRED, "Nincs elegendõ szolgálatban lévõ tûzoltó az akció indításához!");

		if(ServerInfo[sTuzVan])
		{
			SCM(playerid, COL_LRED, "Jelenleg van valahol tûz, így nem indíthatsz akciót!");
			return true;
		}

		ServerInfo[sTuzIdo][2] = (gettime() + (10 * 60));
		SCM(playerid, COL_VZOLD, "Tûz akció indítása - Generálás");
		TuzGeneral( true );
		return true;
	}
	else if((!strcmp(param, "info", false) || !strcmp(param, "infó", false)) && jog)
		return SendFormatMessage(playerid, COLOR_WHITE, "Jelenleg %s"#COL_FEHER" tûz | Tûz idõ: "#COL_MKEK"%d"#COL_FEHER"mp | Következõ tûz várhatóan: "#COL_MKEK"%d"#COL_FEHER"mp", (ServerInfo[sTuzVan] ? (""#COL_VZOLD"van") : (""#COL_PIROS"nincs")), ServerInfo[sTuzIdo][0], ServerInfo[sTuzIdo][1]);
	else if(!strcmp(param, "stop", false) && jog)
	{
		if(!ServerInfo[sTuzVan])
			return SCM(playerid, COL_LRED, "Jelenleg nincs tûz akció elindítva!");

		TuzMuvelet( 4, playerid );
	}
	else if(!strcmp(param, "go", false) && jog)
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		if(extra == NINCS)
			return SCM(playerid, COL_MKEK, "Használat: /tûz go [TûzID]");
		if(extra < 0 || extra >= TUZ_MAX_POZ || TuzPoz[extra][tPoz][0] == 0.0)
			return SCM(playerid, COL_LRED, "Ez a Tûz ID nem létezik!");

		SetPos(playerid, PosExt(TuzPoz[extra][tPoz]));
		SCM(playerid, COL_MKEK, "Sikeresen teleportáltál a tûz pozíciójára! /tûz mutat");
	}
    else if((!strcmp(param, "uj", false) || !strcmp(param, "új", false)) && jog)
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		new id = NINCS, van = NINCS, k = 0;
		for(;++k < TUZ_MAX_POZ;)
		{
			if(GetDistanceToPointEx(playerid, PosExt( TuzPoz[k][tPoz] )) < 10) {
				van = k;
				break;
			}
			if(TuzPoz[k][tPoz][0] == 0.0) {
				id = k;
				break;
			}
		}

		if(van != NINCS)
			return SFM(playerid, COL_LRED, "A környéken már van lementve tûz pozíció! (ID: %d)", van);
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs több szabad tûz slot! Törölj néhányat mielõtt létrehoznál!");

		new Float:pos[3];
		GetPlayerPos(playerid, PosExt(pos));

		TuzPoz[id][tPoz][0] = pos[0];
		TuzPoz[id][tPoz][1] = pos[1];
		TuzPoz[id][tPoz][2] = pos[2];
		TuzMuvelet(2, id);//mentés

		SFM(playerid, COL_VZOLD, "Tûz pozíció létrehozva! ID: "#COL_MKEK"%d", id);

		TuzPoz[id][tMapID] = CreateDynamicMapIcon(PosExt(TuzPoz[id][tPoz]), 36, 0, NINCS, NINCS, NINCS, TUZ_MUTAT_TAV);
		Streamer_SetIntData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_STYLE, 3);//ez globál
		if(Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS))
			Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS);

		if(PlayerInfo[playerid][pTuzMutat] && !Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, playerid) )
		{
			Streamer_AppendArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, playerid);
			Streamer_Update( playerid );
		}
		return true;
	}
	else if((!strcmp(param, "torol", false) || !strcmp(param, "töröl", false)) && jog)
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		new van = NINCS, k = 0;
		for(;++k < TUZ_MAX_POZ;) {
			if(TuzPoz[k][tPoz][0] != 0.0 && (GetDistanceToPointEx(playerid, PosExt( TuzPoz[k][tPoz] )) < 10)) {
				van = k;
				break;
			}
		}

		if(van == NINCS)
			return SCM(playerid, COL_LRED, "Ezen a helyen nincs lementett tûz pozíció!");

		TuzPoz[van][tPoz] = Float:{ 0.0, 0.0, 0.0 };

		DestroyDynamicMapIcon( TuzPoz[van][tMapID] );
		TuzPoz[van][tMapID] = 0;
		TuzMuvelet(3, van);
		SCM(playerid, COL_LRED, "Közeledben lévû tûz sikeresen törölve az adatbázisból!");

		if(PlayerInfo[playerid][pTuzMutat])
			Streamer_Update(playerid);
		return true;
	}
	else if(!strcmp(param, "mutat", false) && jog)
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		if(PlayerInfo[playerid][pTuzMutat]) {

			PlayerInfo[playerid][pTuzMutat] = false;

			new k = 0;
			for(;++k < TUZ_MAX_POZ;)
			{
				if(TuzPoz[k][tPoz][0] != 0.0 && TuzPoz[k][tMapID] && Streamer_IsInArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[k][tMapID], E_STREAMER_PLAYER_ID, playerid) )
					Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[k][tMapID], E_STREAMER_PLAYER_ID, playerid);
			}

			Streamer_Update(playerid);
			SCM(playerid, COL_MKEK, "Tûz pozíciók elrejtve!");

		} else {

			PlayerInfo[playerid][pTuzMutat] = true;

			new k = 0;
			for(;++k < TUZ_MAX_POZ;)
			{
				if(TuzPoz[k][tPoz][0] != 0.0 && !Streamer_IsInArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[k][tMapID], E_STREAMER_PLAYER_ID, playerid) )
					Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[k][tMapID], E_STREAMER_PLAYER_ID, playerid);
			}

			Streamer_Update(playerid);
			SCM(playerid, COL_MKEK, "Tûz pozíciók megjelölve a radaron!");
		}
	}
	return true;
}

CMD:check(playerid, params[])
{
	new jatekos, param[24];
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "us[24]", jatekos, param))
		return SCM(playerid, COL_MKEK, "Használat: /check [Játékos] [ Zseb / Stats ] | Játékos adatainak megtekintése");

	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(!strcmp(param, "stats", false))
	{
		SendFormatMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ %s adatai ]"#COL_FEHER" ===================", JatekosNev(jatekos, true));
		ShowStats(playerid, jatekos);
	}
	else if(!strcmp(param, "zseb", false))
	{
		SendFormatMessage(playerid, COLOR_WHITE, "================ "#COL_MKEK"[ %s zsebe ]"#COL_FEHER" ================", JatekosNev(jatekos, true));
		ShowZseb(playerid, jatekos);
	}
	return true;
}

CMD:damage(playerid, params[])
{
	if(!IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Hiba: Nem vagy jármûben!");

	new param[64];
	if(sscanf(params, "s[64]{}", param))
		return SendClientMessage(playerid, COLOR_WHITE, "Használat: /damage [panels / doors / lights / tires]");

	if(!strcmp(param, "panels"))
	{
		new FrontLeft, FrontRight, RearLeft, RearRight, WindShield, FrontBumper, RearBumper;
		if(sscanf(params, "{s[64]}ddddddd", FrontLeft, FrontRight, RearLeft, RearRight, WindShield, FrontBumper, RearBumper))
			return SendClientMessage(playerid, COLOR_WHITE, "Használat: /damage panels [FL / FR /RL / RR / WS / FR / RB]");

		UpdateVehiclePanelsDamageStatus(GetPlayerVehicleID(playerid), FrontLeft, FrontRight, RearLeft, RearRight, WindShield, FrontBumper, RearBumper);
		return true;
	}
	else if(!strcmp(param, "doors"))
	{
		new Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight;
		if(sscanf(params, "{s[64]}dddddd", Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight))
			return SendClientMessage(playerid, COLOR_WHITE, "Használat: /damage doors [Bonnet / Boot /FL / FR / RL / RR]");

		UpdateVehicleDoorsDamageStatus(GetPlayerVehicleID(playerid), Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight);
		return true;
	}
	else if(!strcmp(param, "lights"))
	{
		new First, Second, Third, Fourth;
		if(sscanf(params, "{s[64]}dddd", First, Second, Third, Fourth))
			return SendClientMessage(playerid, COLOR_WHITE, "Használat: /damage lights [First / Second / Third / Fourth]");

		UpdateVehicleLightsDamageStatus(GetPlayerVehicleID(playerid), First, Second, Third, Fourth);
		return true;
	}
	else if(!strcmp(param, "tires"))
	{
		new FrontLeft, FrontRight, RearLeft, RearRight;
		if(sscanf(params, "{s[64]}dddd", FrontLeft, FrontRight, RearLeft, RearRight))
			return SendClientMessage(playerid, COLOR_WHITE, "Használat: /damage tires [FL / FR / RL / RR]");

		UpdateVehicleTiresDamageStatus(GetPlayerVehicleID(playerid), FrontLeft, FrontRight, RearLeft, RearRight);
		return true;
	}
	return true;
}

CMD:damaged(playerid, params[])
{
	if(!IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "Nem vagy jármûben!");

	new panel, door, light, tire;

	/*new panels = encode_panels(3, 3, 3, 3, 3, 3, 3); // fix all panels //fell off - (3, 3, 3, 3, 3, 3, 3)
    new doors = encode_doors(4, 4, 4, 4, 0, 0); // fix all doors //fell off - (4, 4, 4, 4, 0, 0)

	UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, 0, 0);*/
	GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panel, door, light, tire);
	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
	SendFormatMessage(playerid, -1, "Panel: %d| Ajtó: %d| Világítás: %d| Gumi: %d", panel, door, light, tire);
	return true;
}

CMD:asegit(playerid, params[])
{
	new jatekos;

	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /asegit [Játékos]");

	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(PlayerInfo[jatekos][pAnimban][0] == 0)
		return SCM(playerid, COL_LRED, "Ez a játékos nincs a animban!");

	SFM(playerid, COL_MKEK, "Felsegitetted %st!", JatekosNev(jatekos));
	Anim(jatekos, 0);
	SetHealth(jatekos, MAX_HP);

	if(!IsScripter(playerid))
		AdminUzenet(COLOR_LIGHTRED, 1, "%s felsegítette %st!", JatekosNev(playerid), JatekosNev(jatekos));

	return true;
}

CMD:statisztika(playerid, params[])
{
	if(!Admin(playerid, 4))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /(stat)isztika [ Szerver / Streamer / MySQL ]");

	if(!strcmp(params, "szerver") || !strcmp(params, "server"))
	{
		new i = -1, hdb, kdb, tdb, adb, fdb, tzdb, dropdb, hulladb;
		for(;++i < MAX_HOUSE;)
		{
			if(HazInfo[i][hasznalatban])
				hdb++;
		}

		i = -1;
		for(;++i < MAX_KAPU;)
		{
			if(Kapu[i][kVan])
				kdb++;
		}

		i = -1;
		for(;++i < MAX_TERULET;)
		{
			if(tInfo[i][tVan])
				tdb++;
		}

		i = 0;
		for(;++i < MAX_AJTO;)
		{
			if(AjtoInfo[i][ahasznalva])
				adb++;
		}

		i = -1;
		for(;++i < MAX_FRAKCIO;)
		{
			if(FInfo[i][fVan])
				fdb++;
		}
		i = 0;
		for(;++i < TUZ_MAX_POZ;)
		{
			if(TuzPoz[i][tPoz][0] != 0.0)
				tzdb++;
		}

		i = NINCS;
		for(;++i < MAX_DROP;)
		{
			if(dInfo[i][dHasznalva])
				dropdb++;
		}

		i = NINCS;
		for(;++i < MAX_HULLA;)
		{
			if(HullaInfo[i][Hvan])
				hulladb++;
		}

		SendClientMessage(playerid, COLOR_WHITE, "================= [ "#COL_MKEK"Szerver statisztika"#COL_FEHER" ] =================");
		SendClientMessage(playerid, COLOR_YELLOW,"Betöltött objektum szám / definiált limit");
		SendFormatMessage(playerid, COLOR_WHITE, "Házak: %d/%d | Jármûvek: %d/%d | Kapuk: %d/%d", hdb, MAX_HOUSE, Iter_Count(Jarmuvek), MAX_VEHICLES, kdb, MAX_KAPU);
		SendFormatMessage(playerid, COLOR_WHITE, "Teruletek: %d/%d | Ajtók: %d/%d | Frakciók: %d/%d", tdb, MAX_TERULET, adb, MAX_AJTO, fdb, MAX_FRAKCIO);
		SendFormatMessage(playerid, COLOR_WHITE, "Tûz pozíciók: %d/%d | LiteSQL adatbázis: %s", tzdb, TUZ_MAX_POZ, (fexist(LSQL_ADATBAZIS) ? (""#COL_VZOLD"csatlakoztatva") : (""#COL_PIROS"lecsatolva")));
		SendFormatMessage(playerid, COLOR_WHITE, "Eldobott tárgyak: %d/%d | Hullák: %d/%d | NPC: %d/%d", dropdb, MAX_DROP, hulladb, MAX_HULLA, Iter_Count(Bot), MAX_PLAYERS);
	}
	else if(!strcmp(params, "streamer"))
	{
		SendClientMessage(playerid, COLOR_WHITE, "================= [ "#COL_MKEK"Streamer statisztika"#COL_FEHER" ] =================");
		SendClientMessage(playerid, COLOR_MKEK, "Felsõ korlát / Létrehozott / Számodra látható");
		SendFormatMessage(playerid, COLOR_YELLOW, "[Object] %d | %d | %d", 	Streamer_GetUpperBound(STREAMER_TYPE_OBJECT), 		 CountDynamicObjects(), 	Streamer_CountVisibleItems(playerid, STREAMER_TYPE_OBJECT));
		SendFormatMessage(playerid, COLOR_YELLOW, "[Pickup] %d | %d | %d", 	Streamer_GetUpperBound(STREAMER_TYPE_PICKUP), 		 CountDynamicPickups(), 	Streamer_CountVisibleItems(playerid, STREAMER_TYPE_PICKUP));
		SendFormatMessage(playerid, COLOR_YELLOW, "[CP] %d | %d | %d", 		Streamer_GetUpperBound(STREAMER_TYPE_CP), 			 CountDynamicCPs(), 		Streamer_CountVisibleItems(playerid, STREAMER_TYPE_CP));
		SendFormatMessage(playerid, COLOR_YELLOW, "[RaceCP] %d | %d | %d", 	Streamer_GetUpperBound(STREAMER_TYPE_RACE_CP), 		 CountDynamicRaceCPs(), 	Streamer_CountVisibleItems(playerid, STREAMER_TYPE_RACE_CP));
		SendFormatMessage(playerid, COLOR_YELLOW, "[MapIcon] %d | %d | %d", Streamer_GetUpperBound(STREAMER_TYPE_MAP_ICON), 	 CountDynamicMapIcons(), 	Streamer_CountVisibleItems(playerid, STREAMER_TYPE_MAP_ICON));
		SendFormatMessage(playerid, COLOR_YELLOW, "[3DText] %d | %d | %d", 	Streamer_GetUpperBound(STREAMER_TYPE_3D_TEXT_LABEL), CountDynamic3DTextLabels(),Streamer_CountVisibleItems(playerid, STREAMER_TYPE_3D_TEXT_LABEL));
		SendFormatMessage(playerid, COLOR_YELLOW, "[Area] %d | %d | %d", 	Streamer_GetUpperBound(STREAMER_TYPE_AREA), 		 CountDynamicAreas(), 		Streamer_CountVisibleItems(playerid, STREAMER_TYPE_AREA));
	}
	else if(!strcmp(params, "mysql"))
	{
		new str[256];
		mysql_stat(str);
		SendClientMessage(playerid, COLOR_WHITE, "================= [ "#COL_MKEK"MySQL statisztika"#COL_FEHER" ] =================");
		SendClientMessage(playerid, COLOR_WHITE, str);
	}
	return true;
}

CMD:freeze(playerid, params[])
{
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /freeze [Játékos]");
	if(!IsPlayerConnected(jatekos))
		return SCM(playerid, COL_MKEK, "Nincs ilyen játékos!");

	TogglePlayerControllable(jatekos, false);
	SendClientMessage(playerid, COLOR_MKEK, "Játékos sikeresen freezelve!");
	AdminUzenet(COLOR_LIGHTRED,1, "%s lefagyasztotta %st!", JatekosNev(playerid), JatekosNev(jatekos));

	return true;
}
CMD:jelszovaltas(playerid,params[])
{
	new jelszo[52],asd[52];
	if(sscanf(params,"s[52]",jelszo))return SCM(playerid,COL_LKEK,"Használat: /jelszóváltás [ új jelszó ]");
	if(Karakter_Ellenorzes(jelszo)) return SCM(playerid,COL_LKEK,"Speciális karaktereket nem tartalmazhat!"); // SQL miatt
	if(strval(jelszo) < 3 )
	{
		asd = MD5_Hash(jelszo);
//			nformat(banned, 512, "INSERT INTO `"#MYSQL_BAN_TABLA"` (Cim, Tipus, UIdo, Banolta, Oka, Mikor) VALUES ('%s', '%s', '%d', '%s', '%s', '%d/%02d/%02d')",cim, tipus, uIdo, bannolo, oka, year, month, day);
		nformat(string, 256, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET jelszo = '%s' WHERE id = '%d'", asd, PlayerInfo[playerid][pID]);
		mysql_tquery(sql_ID, string, "", "");
		Adat_Update( playerid, ADAT_MINDEN );
		SCM(playerid,COL_LRED,"Jelszóváltás sikeres!");
	} else { SCM(playerid,COL_LRED,"Minimum 3 karakter, számokkal és betûkkel!"); }
	return 1;
}
CMD:atm(playerid,params[])
{
	if(IsJob(playerid,MUNKA_PENZSZALLITO))
	{
		new Parameterek[24];
		new rand = random(sizeof(ATMPoz));
		if(sscanf(params,"s[54]{}",Parameterek))
		{
			SCM(playerid,COL_MKEK,"Használat: /atm [paraméterek]");
			SCM(playerid,COL_MKEK,"Paraméterek: feltölt, felvesz, gps");
			return true;
		}
		if(egyezik(Parameterek,"felvesz"))
		{
			if(TrezorAD[playerid] == 1)
			    return SCM(playerid,COL_LRED,"Elõször add le a trezort!");
			    
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2308.5896,-8.7938,22.8197))
		    {
		        SCM(playerid,COL_LRED,"Nem vagy a bankba");
		    }
			else
			{
			    SCM(playerid,COL_LRED,"Bankár: Itt a trezor!");
			    Trezor[playerid] = 1;
			    SetPlayerAttachedObject(playerid, 4,1210,5,0.3,0.1,0.0,0.0,270.0,0.0);
			    
				//SetPlayerCheckpoint(playerid, PosExt(ATMPoz[rand]), 5.0);
				
				TrezorAD[playerid] = 1;
			}
		}
		if(egyezik(Parameterek,"feltölt"))
		{
			SetPlayerCheckpoint(playerid, PosExt(ATMPoz[rand]), 5.0);
		}
	}else { SCM(playerid,COL_LRED,"Nem vagy pénzszállító!"); }
	return 1;
}
CMD:ajailosok(playerid, params[])
{
	#pragma unused params

	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	SendClientMessage(playerid, COLOR_WHITE, "============= [ "#COL_MKEK"AdminJail"#COL_FEHER" ] =============");
	SendClientMessage(playerid, COLOR_MKEK, "Név / Bezárta / Idõ / Oka");

	foreach(Player, i)
	{
		if(!Belepve(i) || Bortonben(i) != 3) continue;
		SendFormatMessage(playerid, COLOR_YELLOW2, "[%d]%s - %s - %dmp - %s", i, JatekosNev(i), PlayerInfo[i][pJailAdta], PlayerInfo[i][pJailIdo], PlayerInfo[i][pJailOk]);
	}
	return true;
}

CMD:korhazban(playerid, params[])
{
	#pragma unused params

	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	SendClientMessage(playerid, COLOR_WHITE, "============= [ "#COL_MKEK"Kórházban"#COL_FEHER" ] =============");
	SendClientMessage(playerid, COLOR_MKEK, "Név / Bezárta / Idõ / Oka");

	foreach(Player, i)
	{
		if(!Belepve(i) || Bortonben(i) != 1) continue;
		SendFormatMessage(playerid, COLOR_YELLOW2, "[%d]%s - %s - %dmp - %s", i, JatekosNev(i), PlayerInfo[i][pJailAdta], PlayerInfo[i][pJailIdo], PlayerInfo[i][pJailOk]);
	}
	return true;
}

CMD:bid(playerid, params[])
{
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /bid [Azonosító] | 4 jegyû random azonosító");

	new jatekos = NINCS;
	foreach(Player, i)
	{
		if(!Belepve(i)) continue;
		if(PlayerInfo[i][pBID] == strval(params))
		{
			jatekos = i;
			break;
		}
	}

	if(jatekos == NINCS)
		return SCM(playerid, COL_LRED, "Nincs ilyen azonosítójú játékos!");

	SFM(playerid, COL_VZOLD, "Játékos: [%d]%s - uID: %d", PlayerInfo[jatekos][pBID], JatekosNev(jatekos, false, true), PlayerInfo[jatekos][pID]);
	return true;
}

stock clearChat(playerid)
{
    new i = NINCS;
	if(playerid == NINCS)
	    for(; ++i < 100;) SendClientMessageToAll(COLOR_WHITE, " ");
	else
	    for(; ++i < 100;) SendClientMessage(playerid, COLOR_WHITE, " ");
}
CMD:cc(playerid, params[])
{
	#pragma unused params

	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(PlayerInfo[playerid][pMegerosites] != playerid)
	{
		SCM(playerid, COL_MKEK, "Biztos, hogy meg akarod tisztítani a ChatBox-ot? Ha igen, írd be újra!");
		PlayerInfo[playerid][pMegerosites] = playerid;
		return true;
	}

	PlayerInfo[playerid][pMegerosites] = NINCS;
    clearChat(NINCS);
	AdminUzenet(COLOR_LIGHTRED, 1, "%s megtisztította a ChatBox-ot!", JatekosNev(playerid));
	return true;
}

CMD:jail(playerid, params[])
{
	new jatekos, mennyi, hova[32], indok[48];
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(sscanf(params, "us[32]ds[48]", jatekos, hova, mennyi, indok))
		return SCM(playerid, COL_MKEK, "Használat: /jail [Játékos] [ Admin / Kórház / PD / Null(Kivétel) / Katonasag / FBI] [Idõ (Perc)] [Oka]");
	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(mennyi < 0 || mennyi > 300)
		return SCM(playerid, COL_LRED, "Az idõ minimum 1 és maximum 300 perc lehet! | 0 = kivétel");

	mennyi = (mennyi * 60);
	new borton = BortonID(hova);
	if(borton == NINCS)
		return SCM(playerid, COL_LRED, "Nincs ilyen börtön! Lehetõségek: Admin / Kórház / PD / Null(Kivétel) / Katonasag / FBI");

	if(Karakter_Ellenorzes(indok))
		return SCM(playerid, COL_LRED, "Az indok nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");

	if(borton == 3)
	{
		if(mennyi < 900)
		{
			return SCM(playerid,COL_LRED,"Admin Jail kiosztás esetén minimum idõ 15 perc!");
		}
	}

	if((PlayerInfo[jatekos][pjail] != 0) && (PlayerInfo[jatekos][pJailIdo] > 0))
	{
		if((PlayerInfo[playerid][pMegerosites] == NINCS) || (PlayerInfo[playerid][pMegerosites] != jatekos))
		{
			new ido = PlayerInfo[jatekos][pJailIdo];
			ido = floatround(ido / 60);
			SendFormatMessage(playerid, COLOR_GREEN, "[Hiba]: Ez a játékos jelenleg %s van még %d percig, biztos, hogy végrehajtod?", BortonNev(Bortonben(jatekos), true), ido);
			SendClientMessage(playerid, COLOR_WHITE, "[Info]: Ha igen, írd be mégegyszer a parancsot.");
			PlayerInfo[playerid][pMegerosites] = jatekos;
			return true;
		}

		PlayerInfo[playerid][pMegerosites] = NINCS;
	}

	if(borton == 0)
	{
	   /* if(!egyezik(JatekosNev(playerid),PlayerInfo[jatekos][pJailAdta]) && !Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Nem te raktad be az illetõt ezért nem tudod kivenni!");
			return true;
		}*/
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s nullázta %s büntetését! | Oka: %s", JatekosNev(playerid), JatekosNev(jatekos), indok);
		SFM(jatekos, COL_MKEK, "Admin %s nullázta a büntetésed | Oka: %s", JatekosNev(playerid), indok);
		Borton(jatekos, 0);
		return true;
	}

	BortonInfo(jatekos, JatekosNev(playerid), indok);

	PlayerInfo[jatekos][pjail] = borton;
	PlayerInfo[jatekos][pJailIdo] = mennyi;
	PlayerInfo[jatekos][phaz] = -1;
	mennyi = (mennyi / 60);

	if(borton == 3)
	{
		nformat(str, 128, ""#PREFIX": Admin %s AdminJailt adott neki: %s | Oka: %s", JatekosNev(playerid), JatekosNev(jatekos), indok);
		SendClientMessageToAll(COLOR_LIGHTRED, str);
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s %d perc AdminJailt adott neki: %s! | Oka: %s", JatekosNev(playerid), mennyi, JatekosNev(jatekos), indok);

	} else {

		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s %d percre bezárta ide: %s õt: %st | Oka: %s", JatekosNev(playerid), mennyi, BortonNev(borton), JatekosNev(jatekos), indok);
		SFM(jatekos, COL_MKEK, "Admin %s bezárt téged ide: %s | %d percre", JatekosNev(playerid), BortonNev(borton), mennyi);
	}
	new date[3],time[3];
	getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'AJail')", JatekosNev(playerid), PosExt(date), time[0], time[1]);

	Borton(jatekos, borton);
	return true;
}

CMD:unfreeze(playerid, params[])
{
	if(!Admin(playerid, 1) && !IsAS(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /(u)n(f)reeze [Játékos] | Játékos kiolvasztása");
	if(!IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	TogglePlayerControllable(jatekos, true);
	SCM(playerid, COL_MKEK, "Játékos kiolvasztva!");

	AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s kiolvasztotta %st!", JatekosNev(playerid), JatekosNev(jatekos));
	return true;
}
CMD:aduty(playerid, params[])
{
	#pragma unused params
	if(!Admin(playerid, 1))	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	//SendClientMessageToAll(COLOR_WHITE, "======================= [ "#COL_VZOLD"Adminszolgálat"#COL_FEHER" ] ========================");
	if((PlayerInfo[playerid][pAduty] = true - PlayerInfo[playerid][pAduty]))
	{
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Adutybe')", JatekosNev(playerid, false, true), PosExt(date), time[0], time[1]);
		SendFormatMessageToAll(LKEK, "==== %s, %s {ffffff}adminszolgálatba lépett, így segítséget kérhetsz tõle - /pm {1e90ff}%d ====", AdminRang(playerid), JatekosNev(playerid, true), playerid);
		nformat(form, 128, "(( Adminszolgálat ))", playerid);
		PlayerInfo[playerid][pDutyText] = CreateDynamic3DTextLabel(form, LKEK, 0.0, 0.0, 0.0, 40.0, playerid, INVALID_VEHICLE_ID, 1);
		PlayerInfo[playerid][pAduty] = true;
	}
	else
	{
		SendFormatMessageToAll(LKEK, "%s {ffffff}kilépett az adminszolgálatból!", JatekosNev(playerid, true));
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pDutyText]);
		PlayerInfo[playerid][pDutyText] = INVALID_3D_TEXT_ID;
		PlayerInfo[playerid][pAduty] = false;
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Adutyki')", JatekosNev(playerid, false, true), PosExt(date), time[0], time[1]);
	}
	foreach(Player, i)
	{
	    StreamUpdate(playerid, i);
	}
	return true;
}

CMD:asduty(playerid, params[])
{
	#pragma unused params
	if(!IsAS(playerid))		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(Bejelzett[playerid] > 0) return SCM(playerid,COL_LRED,"Amíg jelzés van rajtad nem léphetsz adminsegéd szolgálatba!");

	//new str[32];

	//SendClientMessageToAll(COLOR_WHITE, "======================= [ "#COL_VZOLD"Adminsegéd szolgálat"#COL_FEHER" ] ========================");
	if((PlayerInfo[playerid][pASduty] = true - PlayerInfo[playerid][pASduty]))
	{

		SendFormatMessageToAll(VKEK, "==== %s {ffffff}Adminsegéd szolgálatba lépett, segítséget kérhetsz tõle -> /pm {ffffff} %d ====",JatekosNev(playerid, true), playerid);
		nformat(form, 128, "(( Adminsegéd szolgálat ))", playerid);
		PlayerInfo[playerid][pASDutyText] = CreateDynamic3DTextLabel(form, VKEK, 0.0, 0.0, 0.0, 40.0, playerid, INVALID_VEHICLE_ID, 1);
        SetPlayerColor(playerid, VKEK);
		PlayerInfo[playerid][pASduty] = true;

	} else {

		SendFormatMessageToAll(VKEK, "==== %s {ffffff}kilépett az Adminsegéd szolgálatból.Segítségért - /report ====",JatekosNev(playerid, true));
		SetPlayerColor(playerid, COLOR_INVISIBLE);
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pASDutyText]);
		PlayerInfo[playerid][pASDutyText] = INVALID_3D_TEXT_ID;
		PlayerInfo[playerid][pASduty] = false;
	}
	return true;
}
CMD:valt(playerid, params[])
{
	new param[24];
	if(sscanf(params,"s[24]{}", param)) return SCM(playerid, COL_LRED, "/vált [Telefonszám]");
	
	if(egyezik(param,"telefonszam") || egyezik(param,"telszam") || egyezik(param,"telszám") || egyezik(param,"telefonszám"))
	{
	    if(PlayerInfo[playerid][pCuccok][BL_TELEFON] == 0) return SCM(playerid, COL_LRED, "Nincs telefonod!");
	    new ujszam;
		if(sscanf(params,"{s[24]}d", ujszam)) return SCM(playerid, COL_LRED, "/vált telefonszám [új szám]");

		if(ujszam < 1 || ujszam > MAX_ERTEK)
		     return SCM(playerid, COL_LRED, "Érvénytelen telefonszám!");
		     
        PlayerInfo[playerid][pCuccok][BL_TELEFON] = ujszam;
		SFM(playerid, COL_LRED, "Megváltoztattad a telefonszámod! Új számod: %s", ToStr(PlayerInfo[playerid][pCuccok][BL_TELEFON], true, '-'));
		
        PlayerInfo[playerid][pAEnged][2] = false;
	}
	return 1;
}
CMD:nevvaltas(playerid, params[])
{
	if(!PlayerInfo[playerid][pAEnged][1] && !Admin(playerid, 1)) return SCM(playerid, COL_MKEK, "Nem engedélyezték számodra a névváltást!");
	
	new nev[MAX_PLAYER_NAME], form[128];
	if(sscanf(params, "s["#MAX_PLAYER_NAME"]", nev)) return SCM(playerid, COL_MKEK, "Használat: /nevvaltas [Új neved]");
	if(egyezik(nev,"Dwayne_Harrison")) return SCM(playerid,COL_LRED,"NPC nevet nem!");
	new newcheck = HelyesNevString(nev);
	if(newcheck != 1)
    {
		if(newcheck != 1)
		{
			if(newcheck == -1)
			    format(uzenet, sizeof(uzenet), "A névnek nagy betûvel kell kezdõdnie!");
			else if(newcheck == -2)
			    format(uzenet, sizeof(uzenet), "A név nem tartalmazhat számokat!");
		 	else if(newcheck == -3)
			    format(uzenet, sizeof(uzenet), "A név nem tartalmazhat speciális karaktereket!");
		    else if(newcheck == -4)
			    format(uzenet, sizeof(uzenet), "A név elsõ betûi lehetnek csak nagy betûk!");
		    else if(newcheck == -5)
			    format(uzenet, sizeof(uzenet), "A név max. "#MAX_ALSOVONAS" alsóvonást tartalmazhat!");
			else if(newcheck == -6)
			    format(uzenet, sizeof(uzenet), "Az alsóvonás után nagy kezdõbetû kell!");
		    else if(newcheck == -7)
			    format(uzenet, sizeof(uzenet), "A névnek legalább 2részbõl kell állnia! (Vezetéknév_Keresztnév)");
            else if(newcheck == -7)
			    format(uzenet, sizeof(uzenet), "A név min. 6, max "#MAX_PLAYER_NAME" karakter hosszúságúnak kell lenni!");
		}
  		return SCM(playerid, COL_LRED, uzenet);
  	}
	format(form, sizeof(form), "SELECT nev FROM `"#MYSQL_JATEKOS_TABLA"` WHERE nev='%s'", nev);
	mysql_tquery(sql_ID, form, "GlobalNevValtas", "sdd", nev, playerid, playerid);
	return true;
}
CMD:knevvaltas(playerid, params[])
{
	if(!Admin(playerid, FSEGED_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new nev[MAX_PLAYER_NAME], jatekos, form[128];
	if(sscanf(params, "us[24]", jatekos, nev))		return SCM(playerid, COL_MKEK, "Használat: /nevvaltas [Játékos] [JátékosNév]");
	if(egyezik(nev,"Dwayne_Harrison")) return SCM(playerid,COL_LRED,"NPC nevet nem!");

	new newcheck = HelyesNevString(nev);
	if(newcheck != 1)
    {
		if(newcheck != 1)
		{
			if(newcheck == -1)
			    format(uzenet, sizeof(uzenet), "A névnek nagy betûvel kell kezdõdnie!");
			else if(newcheck == -2)
			    format(uzenet, sizeof(uzenet), "A név nem tartalmazhat számokat!");
		 	else if(newcheck == -3)
			    format(uzenet, sizeof(uzenet), "A név nem tartalmazhat speciális karaktereket!");
		    else if(newcheck == -4)
			    format(uzenet, sizeof(uzenet), "A név elsõ betûi lehetnek csak nagy betûk!");
		    else if(newcheck == -5)
			    format(uzenet, sizeof(uzenet), "A név max. "#MAX_ALSOVONAS" alsóvonást tartalmazhat!");
			else if(newcheck == -6)
			    format(uzenet, sizeof(uzenet), "Az alsóvonás után nagy kezdõbetû kell!");
		    else if(newcheck == -7)
			    format(uzenet, sizeof(uzenet), "A névnek legalább 2részbõl kell állnia! (Vezetéknév_Keresztnév)");
            else if(newcheck == -7)
			    format(uzenet, sizeof(uzenet), "A név min. 6, max "#MAX_PLAYER_NAME" karakter hosszúságúnak kell lenni!");
		}
  		return SCM(playerid, COL_LRED, uzenet);
  	}
	format(form, sizeof(form), "SELECT nev FROM `"#MYSQL_JATEKOS_TABLA"` WHERE nev='%s'", nev);
	mysql_tquery(sql_ID, form, "GlobalNevValtas", "sdd", nev, jatekos, playerid);
	return true;
}

CMD:unban(playerid, params[])
{
	if(!Admin(playerid, 5))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new cim[24];
	if(sscanf(params, "s[24]", cim))
		return SCM(playerid, COL_MKEK, "Használat: /unban [ Játékos név / IP cím ]");

	if((strlen(cim) > 24) || (strlen(cim) < 6))
		return SCM(playerid, COL_LRED, "Helytelen hossz! Minimum 6 és maximum 24 karakter lehet!");

	
	nformat(form, 128, "SELECT Cim, Banolta, Oka FROM `"#MYSQL_BAN_TABLA"` WHERE Cim='%s'", cim);
	mysql_tquery(sql_ID, form, "BanTorles", "d", playerid);
	return true;
}
CMD:debug(playerid, params[])
{
	if(!IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
	{
		SCM(playerid, COL_MKEK, "Használat: /debug [update / whitelist / jarmû / aka / pb / pbspawn / arg / adatupdate / maxv / neon / sscanf / thaszon / UCP_Check]");
		SCM(playerid, COL_MKEK, "Használat: /debug [StatMentes]");
		return true;
	}

	new param[24], jatekos, extra;
	sscanf(params, "s[24]{}", param);

	if(egyezik(param, "ucpcheck"))
	{
	    t_UCPCheck();
	}
	if(!strcmp(param, "StatMentes"))
	{
		StatMentes(playerid);
		SCM(playerid,COL_LRED,"Kész!");
		return 1;
	}
	if(!strcmp(param, "Time"))
	{
		SendFormatMessage(playerid, COLOR_WHITE, "UnixTime = %d", UnixTime);
		return 1;
	}
	if(egyezik(param, "playsound"))
	{
	    new soundid;
	    if(sscanf(params, "{s[24]}d", soundid))
	        return SCM(playerid, COL_LKEK, "/debug playsound soundid");
	        
	    new Float:pposdata[3];
	    GetPlayerPos(playerid, posArr{pposdata});
	    
	    foreach(Player, i)
	    	PlayerPlaySound(i, soundid, posArr{pposdata});
	}
	#if SAMPVER >= 371
	if(egyezik(param, "ept"))
	{
	    new enable;
	    if(sscanf(params, "{s[24]}ud", jatekos, enable))
	        return SCM(playerid, COL_LKEK, "/debug ept [0/1]");
	        
		if(enable != 0 && enable != 1)
		    return SCM(playerid, COL_LKEK, "/debug ept [0/1]");
		    
	    EnablePlayerCameraTarget(jatekos, enable);
	    SCM(playerid,COL_LRED,"Kész!");
	}
 	#endif
 	
	#if UCPKONZOL == true
		if(egyezik(param, "socket"))
		{
		    new string[128];
		    if(sscanf(params, "{s[24]}s[128]", string)) return SCM(playerid, COL_MKEK, "/debug socket [uzenet]");

            WSStringFix(string);
			WSServerSentToAll(ServerInfo[sUCPServer], string);

			SFM(playerid, COL_MKEK, "Socket küldés: %s", string);
		}
		if(egyezik(param, "socketto"))
		{
		    new ws_connection:con, string[128];
		    if(sscanf(params, "{s[24]}ds[128]", con, string)) return SCM(playerid, COL_MKEK, "/debug socket [con] [üzenet]");

			UCPSendMessage(ServerInfo[sUCPServer], con, string);
			SFM(playerid, COL_MKEK, "Socket küldés: %s", string);
		}

	#endif
	if(!strcmp(param, "whitelist"))
	{
		if(ServerInfo[sWhiteList])
		{
			ServerInfo[sWhiteList] = false;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: WhiteList kikapcsolva!");
		} else {
			ServerInfo[sWhiteList] = true;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: WhiteList bekapcsolva!");
		}
	}
	else if(!strcmp(param, "thaszon"))
	{
		TeruletHaszon( true );
		SCM(playerid, COL_VZOLD, "Mûvelet futtatva!");
	}
/*	else if(!strcmp(param, "hirdetes"))
	{
		RandomHirdetes();
		SCM(playerid, COL_VZOLD, "Hirdetes futtatva!");
	}*/
	else if(!strcmp(param, "maxv"))
	{
		foreach(Jarmuvek, db)
			SFM(playerid, COL_MKEK, "ID: %d", db);
	}
	else if(!strcmp(param, "bankrob"))
	{
		BankBotok[bankAnim] = false;
		SCM(playerid, COL_MKEK, "Bankrob adatai nullázva!");
	}
	else if(!strcmp(param, "pbspawn"))
	{
		if(ServerInfo[sKellPB])
		{
			ServerInfo[sKellPB] = false;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: PB-Spawn kikapcsolva!");
		} else {
			ServerInfo[sKellPB] = true;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: PB-Spawn bekapcsolva!");
		}
	}
	else if(!strcmp(param, "neon"))
	{
	//	if(playerid != INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Bocsika de ez a parancs jelenleg kiszedve!");
		new orok;
		if(sscanf(params, "{s[24]}dd", extra, orok))
			return SCM(playerid, COL_MKEK, "Használat: /debug neon [0 = kikapcsol | 1 - 6] [Örök? (Igen = 1 / Nem = 0)]");

		if(extra > 6 || extra < 0)
			return SCM(playerid, COL_LRED, "0 = kikapcsol | 1 - 6 neon");

		if(orok != 0 && extra != 1)
			return SCM(playerid, COL_LRED, "Örök neon? 1 = igen | 0 = nem");

		if(!IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COL_LRED, "Nem ülsz kocsiban!");

		new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
		switch(vInfo[vid][vModel])
		{
			case 445,602,429,496,504,401,518,402,541,527,415,542,589,507,562,585,419,526,466,492,474,494,502,503,411,546,559,551,516,467,603,426,436,547,405,580,560,550,506,549,451,558,540,491,477,529:
				SetVehicleNeon(vid, extra);

			default:
				return SCM(playerid, COL_LRED, "Erre a jármû nem rakhatsz Neont!");
		}

		if(orok)
		{
			vInfo[ vid ][vNeon][0] = extra;
			vUpdate(vid, vuNeon);
		}

		SCM(playerid, COL_VZOLD, "Neon mûvelet futtatva!");
		Streamer_Update(playerid);
	}
	else if(!strcmp(param, "sscanf"))
	{
		new str[64];
		if(sscanf(params, "{s[24]}uu", extra, str))
			return SCM(playerid, COL_MKEK, "Használat: /debug sscanf [játékos] [játékos]");

		SFM(playerid, COL_VZOLD, "%d | %s", extra, str);
	}
	else if(!strcmp(param, "pb"))
	{
		//new melyik, mennyi;
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /debug pb [Játékos] | Mérkõzés indítása");

		if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][pPaintBall][0] == 0)
		{
			SCM(playerid, COL_VZOLD, "[DEBUG]: Mûvelet végrehajtva - PaintBall start");
			PaintBallMuvelet(jatekos, 1);
			SpawnPlayer(jatekos);

		} else {

			SCM(playerid, COL_VZOLD, "[DEBUG]: Mûvelet végrehajtva - PaintBall stop");
			PlayerInfo[jatekos][pPaintBall][0] = 0;
			SpawnPlayer(jatekos);
		}

		return true;
	}
	else if(egyezik(param, "loopanim"))
	{
	    new animlib[24];
	    new animname[24];
	    if(sscanf(params, "{s[24]}s[24]{}", animlib))
			return SCM(playerid, COL_MKEK, "Használat: /debug loopanim [lib] [name]");//remélem jók lesznek. xd baszd már fel tesztre akarok kúszást beraknik

        if(sscanf(params, "{s[24]s[24]}s[24]", animname))
			return SCM(playerid, COL_MKEK, "Használat: /debug loopanim [lib] [name]");

	    LoopingAnim(playerid, animlib, animname, 4.1, 1, 1, 1, 1, 1);
	}
	else if(egyezik(param, "oneplayanim"))
	{
	    new animlib[24];
	    new animname[24];
	    if(sscanf(params, "{s[24]}s[24]{}", animlib))
			return SCM(playerid, COL_MKEK, "Használat: /debug loopanim [lib] [name]");

        if(sscanf(params, "{s[24]s[24]}s[24]", animname))
			return SCM(playerid, COL_MKEK, "Használat: /debug loopanim [lib] [name]");

	    OnePlayAnim(playerid, animlib, animname, 4.1, 1, 1, 1, 1, 1);
	}
	else if(!strcmp(param, "aka"))
	{
		if(ServerInfo[sAka])
		{
			ServerInfo[sAka] = false;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: Aka System kikapcsolva!");
		} else {
			ServerInfo[sAka] = true;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: Aka System bekapcsolva!");
		}
	}
	else if(!strcmp(param, "szintlepes"))
	{
		new melyik, mennyi;
		if(sscanf(params, "{s[24]}dd", melyik, mennyi))
			return SCM(playerid, COL_MKEK, "Használat: /debug szintlepes [1 - szintlepesperc, 2 - szintlepesora, 3 - szintlepeshez] [0-60]");

		if(mennyi > 60 || mennyi < 0)
			return SCM(playerid, COL_LRED, "Hiba: A mennyiségnek 0 és 60 között kell lennie!");

		switch(melyik)
		{
			case 1: PlayerInfo[playerid][pszintlepesperc] = mennyi;
			case 2: PlayerInfo[playerid][pszintlepesora] = mennyi;
			case 3: PlayerInfo[playerid][pszintlepeskell] = mennyi;
		}
		SCM(playerid, COL_MKEK, "Szintlépés futtatva!");
		return true;
	}
	else if(!strcmp(param, "update"))
	{
		if(sscanf(params, "{s[24]}ud", jatekos, extra))
			return SCM(playerid, COL_MKEK, "Használat: /debug update [Játékos] [Mit(0/1/2)] | 0 = Minden, 1 = Ház, 2 = Jármû");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Nincs ilyen játékos!");

		if(extra != 0 && extra != 1 && extra != 2)
			return SCM(playerid, COL_MKEK, "0 = Minden, 1 = Ház, 2 = Jármû");

		Adat_Update( jatekos, extra );
		SCM(playerid, COL_MKEK, "Update futtatva!");
	}
	else if(!strcmp(param, "jarmu") || !strcmp(param, "jármû"))
	{
		if(sscanf(params, "{s[24]}d", extra))
			return SCM(playerid, COL_MKEK, "Használat: /debug jarmû [JármûID] | Jármû használati idejének nullázása");

		vInfo[ JarmuID(extra, playerid) ][vLastActive] = 0;
		SFM(playerid, COL_MKEK, "JármûID: %d használati ideje nullázva!", extra);
	}
	else if(!strcmp(param, "arg"))
	{
		if(sscanf(params, "{s[24]}d", extra))
			return SCM(playerid, COL_MKEK, "Használat: /debug arg [JármûID(SQL)] | Jármû update argumentum teszt");

		vUpdate(extra, vuTulaj, vuHiba);
		SCM(playerid, COL_MKEK, "Funkció futtatva!");
	}
	//vUpdate(id, ...)
	else if(!strcmp(param, "prémium") || !strcmp(param, "premium"))
	{
		if(sscanf(params, "{s[24]}ud", jatekos, extra))
			return SCM(playerid, COL_MKEK, "Használat: /debug prémium [Játékos] [Csomag (400 / 800 / 1600 / 4000 / 0 = Nulláz)] | Beállítja, nem hozzáadja!");

		switch(extra)
		{
			case 0:
			{
				PlayerInfo[jatekos][pPremiumPont] = 0;
				PlayerInfo[jatekos][pPremiumIdo] = 0;
			}
			case 400:
			{
				PlayerInfo[jatekos][pPremiumPont] = 400;
				PlayerInfo[jatekos][pPremiumIdo] = (gettime() + ((7 * 24) * 3600));//napok * órák * 1h másodpercben
			}
			case 800:
			{
				PlayerInfo[jatekos][pPremiumPont] = 1000;
				PlayerInfo[jatekos][pPremiumIdo] = (gettime() + ((14 * 24) * 3600));//napok * órák * 1h másodpercben
			}
			case 1600:
			{
				PlayerInfo[jatekos][pPremiumPont] = 2000;
				PlayerInfo[jatekos][pPremiumIdo] = (gettime() + ((28 * 24) * 3600));//napok * órák * 1h másodpercben
			}
			case 4000:
			{
				PlayerInfo[jatekos][pPremiumPont] = 6000;
				PlayerInfo[jatekos][pPremiumIdo] = (gettime() + ((42 * 24) * 3600));//napok * órák * 1h másodpercben
			}
			default: return SCM(playerid, COL_LRED, "Hibás csomag! 400 / 800 / 1600 / 4000 lehet! 0 = Nullázás");
		}

		new query[128];
		mysql_tquery(sql_ID, (format(query, 128, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pPremiumIdo = '%d', pPremiumCsomag = '%d' WHERE id = '%d'", PlayerInfo[jatekos][pPremiumIdo], PlayerInfo[jatekos][pPremiumCsomag], PlayerInfo[jatekos][pID]), query), "", "");
		PlayerInfo[jatekos][pPremiumCsomag] = extra;
		SFM(playerid, COL_VZOLD, "Csomag: "#COL_MKEK"%d"#COL_FEHER" beállítva neki: "#COL_MKEK"%s", extra, JatekosNev(jatekos));
	}

	return true;
}

CMD:atankol(playerid, params[])
{
	if(!Admin(playerid, 5))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new liter, id = NINCS, biedf;
	if(sscanf(params, "dD(-1)", liter, id))
		return SCM(playerid, COL_MKEK, "Használat: /atankol [Liter] [JármuID]");


	if(id != NINCS) biedf = JarmuID( id, playerid );
	else biedf = JarmuID(GetPlayerVehicleID(playerid), playerid);

	if(!biedf)
		return NincsJarmu(playerid);

	if(liter > MAX_Benzin[ vInfo[ biedf ][vModel] - 400 ] || liter < 0)
		return SCM(playerid, COL_LRED, "Ebbe a jármube nem fér ennyi üzemanyag!");

	AdminUzenet(COLOR_LIGHTRED, 1, "%s átállította egy %s típusú jármû üzemanyag szintjét! Régi: %.1f Új: %.1f | JármuID: %d[%d]", JatekosNev(playerid, false, true), VehicleNames[ vInfo[ biedf ][vModel] - 400 ], vInfo[ biedf ][vUzemanyag], float(liter), vInfo[ biedf ][vID], biedf);
	vInfo[ biedf ][vUzemanyag] = float(liter);
	return true;
}
CMD:aka(pid, params[])
{
	if(!Admin(pid, 1))
		return SendClientMessage(pid, COLOR_WHITE, NEM_HASZNALHATO);

	new id;
	if(sscanf(params, "u", id))
		return SCM(pid, COL_MKEK, "Használat: /aka [Játékos] | Játékos csatlakozásainak lekérdezése.");

	if(id == INVALID_PLAYER_ID)
		return SCM(pid, COL_MKEK, "Nincs ilyen játékos!");

	nformat(sql, 128, "SELECT Nev FROM `"#MYSQL_AKA_SYSTEM"` WHERE IP='%s'", JatekosIP(id));
	//mysql_function_query(sql_ID, sql, true, "AkaMuvelet", "ddd", id, pid ,2);
	mysql_tquery(sql_ID, sql, "AkaMuvelet", "ddd", id, pid, 2);
	return true;
}
CMD:dmoff(playerid,params[])
{
	if(!Admin(playerid,3)) return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(dmoff == 1)
	{
	    AdminUzenet(COLOR_LIGHTRED, 1, "%s kikapcsolta a DM védelmet!", JatekosNev(playerid));
	    dmoff = 0;
	}
	else {
	    AdminUzenet(COLOR_LIGHTRED, 1, "%s bekapcsolta a DM védelmet! Ha a játékos Adminszolgálatost sebez, kirúgja a rendszer", JatekosNev(playerid));
	    dmoff = 1;
	}
	return 1;
}

CMD:jetpack(playerid, params[])
{
	#pragma unused params

	if(!Admin(playerid, SZUPER_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(PlayerInfo[playerid][pjetpack] == false)
	{
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
		SCM(playerid, COL_VZOLD, "Dobtam egy Jetpack-et!");
		PlayerInfo[playerid][pjetpack] = true;

	} else {
        SetPlayerSpecialAction(playerid,0);
		SCM(playerid, COL_MKEK, "Oké-oké, már nincs Jetpack-ed!");
		PlayerInfo[playerid][pjetpack] = false;
	}
	return true;
}

CMD:gethp(playerid, params[])
{
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /gethp [Játékos]");

	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	new Float:hp, Float:am;
	GetPlayerHealth(jatekos, hp);
	GetPlayerArmour(jatekos, am);

	SendFormatMessage(playerid, COLOR_WHITE, "================ "#COL_MKEK"[%d]%s"#COL_FEHER" ================", jatekos, JatekosNev(jatekos));
	SendFormatMessage(playerid, COLOR_WHITE, "Health - Kliens oldalon: "#COL_MKEK"%.1f"#COL_FEHER" | Szerver oldalon: "#COL_MKEK"%.1f"#COL_FEHER" | Differencia: "#COL_MKEK"%.1f", hp, PlayerInfo[jatekos][pElet], (hp - PlayerInfo[jatekos][pElet]));
	SendFormatMessage(playerid, COLOR_WHITE, "Armour - Kliens oldalon: "#COL_NARANCS"%.1f"#COL_FEHER" | Szerver oldalon: "#COL_NARANCS"%.1f"#COL_FEHER" | Differencia: "#COL_NARANCS"%.1f", am, PlayerInfo[jatekos][pPancel], (am - PlayerInfo[jatekos][pPancel]));
	return true;
}


CMD:set(playerid, params[])
{
	if(!Admin(playerid, 1) && !IsAS(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
	{
		go_shelp:
	    SCM(playerid, COL_MKEK, "Használata: /set [Paraméter] [Játékos] [Érték] [Extra]");
	    SCM(playerid, COL_MKEK, "[Paraméterek]: VW, Int,");
	  	if(PlayerInfo[playerid][padmin] >= 4) {
			SCM(playerid, COL_MKEK, "Admin(4): HP, Skin, Nem");
		}
		if(PlayerInfo[playerid][padmin] >= FOADMIN_SZINT) {
			SFM(playerid, COL_MKEK, "FõAdmin(%d): Szint, Bankpénz, KP, Munka, páncél", FOADMIN_SZINT);
			SFM(playerid, COL_MKEK, "FõAdmin(%d): Material, Heroin, Kokain, Marihuana, HeroinMag, KokainMag, MarihuánaMag, Házasság", FOADMIN_SZINT);
		}
		if(PlayerInfo[playerid][padmin] >= FOADMIN_SZINT)
			SCM(playerid, COL_MKEK, "FõAdmin: Prémium, TelefonSzam, BankSzámla, Tapasztalat");
		if(PlayerInfo[playerid][padmin] >= TULAJ_SZINT)
			SCM(playerid, COL_MKEK, "Tulajdonos: Fegyverskill , Fizetés");

		return true;
	}
	new param[24], jatekos, ertek = NINCS, extra[16];
	sscanf(params, "s[24]uD(-1)s[16]{}", param, jatekos, ertek, extra);

	if(!strcmp(param, "munka", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || !strlen(extra))
		{
			SCM(playerid, COL_MKEK, "Használat: /set munka [Játékos] [MunkaID] [Munka(1/2)]");

			new i = NINCS, idx, str[256];
			for(;++i < sizeof(Munkak);)
			{
				idx++;
				format(str, sizeof(str), "%s%s - %d, ", str, Munkak[i][1], Munkak[i][0][0]);
				if(idx == 4)
				{
					str[strlen(str) - 2] = EOS;
					SendFormatMessage(playerid, COLOR_MKEK, "Munkák:"#COL_FEHER" %s", str);

					str[0] = EOS;
					idx = 0;
				}
			}
			return true;
		}
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		if(ertek < 20 || ertek > Munkak[ MAX_MUNKA - 1 ][0][0])
			return SFM(playerid, COL_MKEK, "A munkaidõnek minimum 20 és max %d között kell lennie!", Munkak[ MAX_MUNKA - 1 ][0][0]);

		new id;
		if(!strcmp(extra, "1", false))
		{
			id = PlayerInfo[jatekos][pMunka1];
			PlayerInfo[jatekos][pMunka1] = ertek;
		}
		else if(!strcmp(extra, "2", false))
		{
			id = PlayerInfo[jatekos][pMunka2];
			PlayerInfo[jatekos][pMunka2] = ertek;
		} else
			return SCM(playerid, COL_LRED, "Hibás slot! Melyik munkáját akarod átírni? 1/2");

		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s munkáját! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), id, ertek);
		return true;
	}
    else if(!strcmp(param, "vw", true) || !strcmp(param, "virtualworld", true))
	{
		if(!Admin(playerid, 1) && PlayerInfo[playerid][pTV][0] == NINCS)
			return SCM(playerid, COL_LRED, "Csak megfigyelés közben állíthatsz Virtual World-öt!");

        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set VirtualWorld [Játékos] [Érték]");

		if(ertek == WAR_VW && !Admin(playerid, TULAJ_SZINT))
			return SCM(playerid, COL_MKEK, "Lófaszt! War VirtualWorld-be nem rakod át magad!");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s VirtualWorldjét! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), GetPlayerVirtualWorld(jatekos), ertek);
        SetVirtualWorld(jatekos, ertek);
        PlayerInfo[jatekos][pvirtualworld] = ertek;
		return true;
	}
	else if(!strcmp(param, "int", true) || !strcmp(param, "interior", true))
 	{
		if(!Admin(playerid, 1) && PlayerInfo[playerid][pTV][0] == NINCS)
			return SCM(playerid, COL_LRED, "Csak megfigyelés közben állíthatsz Virtual World-öt!");

        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set Interior [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s Interiorját! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), GetPlayerInterior(jatekos), ertek);
        SetPlayerInterior(jatekos, ertek);
        PlayerInfo[jatekos][pinterior] = ertek;
		return true;
	}
	else if(!strcmp(param, "TelefonSzam", true) || !strcmp(param, "TelefonSzám", true))
	{
		if(!Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
			return true;
		}
        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set TelefonSzám [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

        if(ertek < 0)
			return SCM(playerid, COL_LRED, "[Hiba]: Az érték minimum 0 kell, hogy legyen!");

        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s TelefonSzámát! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pCuccok][BL_TELEFON], ertek);
		PlayerInfo[jatekos][pCuccok][BL_TELEFON] = ertek;
		return true;
	}
	else if(!strcmp(param, "Fizetés", true) || !strcmp(param, "Fizetes", true))
	{
		if(!Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
			return true;
		}
        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set Fizetés [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

        if(ertek < 0)
			return SCM(playerid, COL_LRED, "[Hiba]: Az érték minimum 0 kell, hogy legyen!");

        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s Következõ Fizetési Összegét! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pFizetes], ertek);
		PlayerInfo[jatekos][pFizetes] = ertek;
		return true;
	}
	else if(!strcmp(param, "Házasság", true) || !strcmp(param, "Hazassag", true))
	{
		if(!Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
			return true;
		}
		if(jatekos == -1)
		{
			SCM(playerid,COL_LRED,"ID?");
			return 1;
		}
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s törölte %s -(nak/nek) a házasságát", JatekosNev(playerid), JatekosNev(jatekos));
		strmid(PlayerInfo[jatekos][pHazasodvaVele],"Senki",0,strlen("Senki"),MAX_PLAYER_NAME);
		return true;
	}
	else if(!strcmp(param, "Bankszámla", true) || !strcmp(param, "Bankszamla", true))
	{
		if(!Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
			return true;
		}
        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set Bankszámla [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

        if(ertek < 0)
			return SCM(playerid, COL_LRED, "[Hiba]: Az érték minimum 0 kell, hogy legyen!");

        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s BankSzámla Számát! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pBsz], ertek);
		PlayerInfo[jatekos][pBsz] = ertek;

		return true;
	}
	else if(!strcmp(param, "hp", true) || !strcmp(param, "health", true) || !strcmp(param, "élet", true) || !strcmp(param, "elet", true))
	{
	    if(!Admin(playerid, 4))
	    	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set Health [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

        if(ertek > MAX_HP || ertek < 0)
			return SCM(playerid, COL_LRED, "[Hiba]: Az érték minimum 0 és maximum "#MAX_HP" között kell, hogy legyen!");

		new Float:hpja = PlayerInfo[jatekos][pElet];
        SetHealth(jatekos, float(ertek));

		if(ertek > 100)
		{
			PlayerInfo[jatekos][pEhseg] = 0.0;
			PlayerInfo[jatekos][pVizelet] = 0.0;

			//Progressbar-ok beállítása
			if(EhsegBar[jatekos] != INVALID_PLAYER_BAR_ID)
			{
				SetPlayerProgressBarValue(jatekos, EhsegBar[jatekos], 0.0);
				//UpdatePlayerProgressBar(jatekos, EhsegBar[jatekos]);
			}
			if(VizeletBar[jatekos] != INVALID_PLAYER_BAR_ID)
			{
				SetPlayerProgressBarValue(jatekos, VizeletBar[jatekos], 0.0);
				//UpdatePlayerProgressBar(jatekos, VizeletBar[jatekos]);
			}
		}

        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s életét! Régi: %.1f | Új: %.1f", JatekosNev(playerid), JatekosNev(jatekos), hpja, float(ertek));
		return true;
	}
	else if(!strcmp(param, "armour", true) || !strcmp(param, "armor", true) || !strcmp(param, "páncél", true) || !strcmp(param, "pancel", true))
	{
	    if(!Admin(playerid, FOADMIN_SZINT))
	    	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set Armour [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

        if(ertek > MAX_ARMOR || ertek < 0)
			return SCM(playerid, COL_LRED, "[Hiba]: Az érték minimum 0 és maximum "#MAX_ARMOR" között kell, hogy legyen!");

		new Float:armor;
		GetPlayerArmour(playerid, armor);
        SetArmor(jatekos, float(ertek));
        if(!IsLewis(playerid))
        {
			nformat(log, 128, "%s átállította %s páncélját! Régi: %.1f | Új: %.1f", JatekosNev(playerid), JatekosNev(jatekos), armor, float(ertek));
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
  		}
		return true;
	}
	else if(!strcmp(param, "skin", true) || !strcmp(param, "ruha", true))
	{
	    if(!Admin(playerid, 3))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /set Skin [Játékos] [SkinID] [Frakciós (Ha igen írj 1-et]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		if((ertek > 312 || ertek < 1) || ertek == 74)
		    return SCM(playerid, COL_LRED, "Érvénytelen SkinID! 1 és 299 között kell, hogy legyen!");

		new bool:az;
		//AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s skinjét! Régi: %d | Új: %d %s", JatekosNev(playerid), JatekosNev(jatekos), GetPlayerSkin(jatekos), ertek, (az ? ("| Szolgálati") : ("")));
		SFM(playerid,COL_VKEK,"Átállítottad %s skinjét! Régi: %d | Új: %d %s", JatekosNev(jatekos), GetPlayerSkin(jatekos), ertek, (az ? ("| Szolgálati") : ("")));
		SFM(jatekos,COL_VKEK,"%s átállította a skined! Régi: %d | Új: %d %s", JatekosNev(playerid), GetPlayerSkin(jatekos), ertek, (az ? ("| Szolgálati") : ("")));
		if(strlen(extra) == 1 && strval(extra) == 1)
		{
			if(PlayerInfo[jatekos][pFrakcio] != 0)
			{
				az = true;
				PlayerInfo[jatekos][pDutySkin] = ertek;
				SetPlayerSkin(jatekos, ertek);

			} else
				return SCM(playerid, COL_LRED, "Ez a játékos nincs frakcióban, így nem állíthatsz be neki Duty skint!");
		} else
			SetSkin(jatekos, ertek);
		return true;
	}
	else if(!strcmp(param, "szint", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 100)
			return SCM(playerid, COL_MKEK, "Használat: /set szint [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		nformat(log, 128, "%s átállította %s szintjét! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pjatekosszint], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);

		PlayerInfo[jatekos][pjatekosszint] = ertek;
		PlayerInfo[jatekos][pszintlepeskell] = PlayerInfo[jatekos][pjatekosszint] * 4;
		SetPlayerScore(jatekos, ertek);
		return true;
	}
	else if(!strcmp(param, "fegyverskill", true))
	{
		if(!IsScripter(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 500)
			return SCM(playerid, COL_MKEK, "Használat: /set fegyverskill [Játékos] [Érték] | Max 500 lehet");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		nformat(log, 128, "%s átállította %s fegyver tapasztalatát! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pFegyverSkill], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pFegyverSkill] = ertek;
		return true;
	}
	else if(!strcmp(param, "material", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set meterial [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		nformat(log, 128, "%s átállította %s értékeit! Érték: Material | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pMaterial], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pMaterial] = ertek;
		return true;
	}
	else if(!strcmp(param, "heroin", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set heroin [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		nformat(log, 128, "%s átállította %s értékeit! Érték: Heroin | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pHeroin], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pHeroin] = ertek;
		return true;
	}
	else if(!strcmp(param, "kokain", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set kokain [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		nformat(log, 128, "%s átállította %s értékeit! Érték: Kokain | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pKokain], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pKokain] = ertek;
		return true;
	}
	else if(!strcmp(param, "marihuana", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set marihuana [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		nformat(log, 128, "%s átállította %s értékeit! Érték: Marihuana | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pMarihuana], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pMarihuana] = ertek;
		return true;
	}
	else if(!strcmp(param, "marihuanamag", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set marihuanamag [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		nformat(log, 128, "%s átállította %s értékeit! Érték: MarihuanaMag | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pDrogAnyag][0], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pDrogAnyag][0] = ertek;
		return true;
	}
	else if(!strcmp(param, "kokainmag", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set kokainmag [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		nformat(log, 128, "%s átállította %s értékeit! Érték: KokainMag | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pDrogAnyag][1], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pDrogAnyag][1] = ertek;
		return true;
	}
	else if(!strcmp(param, "heroinmag", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set marihuana [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

 		nformat(log, 128, "%s átállította %s értékeit! Érték: HeroinMag | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pDrogAnyag][2], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pDrogAnyag][2] = ertek;
		return true;
	}
	else if(!strcmp(param, "nem", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 1 || ertek > 2)
			return SCM(playerid, COL_MKEK, "Használat: /set nem [Játékos] [1 = Férfi / 2 = Nõ]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s nemét! Régi: %s -> Új: %s", JatekosNev(playerid), JatekosNev(jatekos), NemVizsgalat(PlayerInfo[jatekos][pnem]), NemVizsgalat(ertek));
		PlayerInfo[jatekos][pnem] = ertek;
		return true;
	}
	else if(!strcmp(param, "kp", true) || !strcmp(param, "keszpenz", true) || !strcmp(param, "készpénz", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || !strlen(extra))
		{
			SCM(playerid, COL_MKEK, "Használat: /set készpénz [Játékos] [Érték] [Operátor(+/-/b)]");
			SCM(playerid, COL_MKEK, "Operátorok: +/h = Érték hozzáadása | -/l = Érték levonása | =/b = Érték beállítása");
			return true;
		}
		if(ertek > 1000 && !Admin(playerid,SZUPER_SZINT)) return SCM(playerid,COL_LRED,"Maximum 1000$!");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		new kp = PlayerInfo[jatekos][ppenz];
		if(!strcmp(extra, "+", false) || !strcmp(extra, "h", false))
		{
			new uj = PlayerInfo[jatekos][ppenz];
			GiveMoney(jatekos,ertek);
			kp = PlayerInfo[jatekos][ppenz];
			nformat(log, 128, "%s hozzáadott %s készpénzéhez! Régi: %s$ Új: %s$ Érték: +%s$", JatekosNev(playerid) ,JatekosNev(jatekos), FN(uj, 0, ','), FN(kp, 0, ','), FN(ertek, 0, ','));
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}
		if(!strcmp(extra, "-", false) || !strcmp(extra, "l", false))
		{
			new uj = PlayerInfo[jatekos][ppenz];
			GiveMoney(jatekos,-ertek);
			kp = PlayerInfo[jatekos][ppenz];
			nformat(log, 128, "%s elvett %s készpénzébõl! Régi: %s$ Új: %s$ Érték: -%s$", JatekosNev(playerid) ,JatekosNev(jatekos),FN(uj, 0, ','),FN(kp, 0, ','), FN(ertek, 0, ','));
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}
		if(!strcmp(extra, "=", false) || !strcmp(extra, "b", false))
		{
			new uj = ertek;
			nformat(log, 128, "%s beállította %s készpénzét! Régi: %s$ Új: %s$", JatekosNev(playerid) ,JatekosNev(jatekos), FN(kp, 0, ','), FN(uj, 0, ','));
			PlayerInfo[jatekos][ppenz] = ertek;
			kp = PlayerInfo[jatekos][ppenz];
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}

		SCM(playerid, COL_LRED, "Adj meg egy operátort! ( +(h)ozzáad / -(l)evon / =(b)eállít )");
		return true;
	}
	else if(!strcmp(param, "bankpenz", true) || !strcmp(param, "bankpénz", true) || !strcmp(param, "bszp", true))
	{
		if(!Admin(playerid, SZUPER_SZINT) && !IsLewis(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek == NINCS || !strlen(extra))
		{
			SCM(playerid, COL_MKEK, "Használat: /set bankpénz [Játékos] [Érték] [Operátor(+/-/b)]");
			SCM(playerid, COL_MKEK, "Operátorok: +/h = Érték hozzáadása | -/l = Érték levonása | =/b = Érték beállítása");
			return true;
		}

		new bsz = PlayerInfo[jatekos][pBszPenz];
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		if(!strcmp(extra, "+", false) || !strcmp(extra, "h", false))
		{
			new uj = (PlayerInfo[jatekos][pBszPenz] += ertek);
			nformat(log, 128, "%s hozzáadott %s banki pénzéhez! Régi: %s$ Új: %s$ Érték: +%s$", JatekosNev(playerid) ,JatekosNev(jatekos), FN(bsz, 0, ','), FN(uj, 0, ','), FN(ertek, 0, ','));
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}
		if(!strcmp(extra, "-", false) || !strcmp(extra, "l", false))
		{
			new uj = (PlayerInfo[jatekos][pBszPenz] -= ertek);
			nformat(log, 128, "%s elvett %s banki pénzébõl! Régi: %s$ Új: %s$ Érték: -%s$", JatekosNev(playerid) ,JatekosNev(jatekos), FN(bsz, 0, ','), FN(uj, 0, ','), FN(ertek, 0, ','));
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}
		if(!strcmp(extra, "=", false) || !strcmp(extra, "b", false))
		{
			new uj = (PlayerInfo[jatekos][pBszPenz] = ertek);
			nformat(log, 128, "%s beállította %s banki pénzét! Régi: %s$ Új: %s$", JatekosNev(playerid) ,JatekosNev(jatekos), FN(bsz, 0, ','), FN(uj, 0, ','));
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}

		SCM(playerid, COL_LRED, "Adj meg egy operátort! ( +(h)ozzáad / -(l)evon / =(b)eállít )");
		return true;
	}
	else if(!strcmp(param, "prémium", true) || !strcmp(param, "premium", true) || !strcmp(param, "pp", true))
	{
		if(!Admin(playerid, SCRIPTER_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || !strlen(extra))
		{
			SCM(playerid, COL_MKEK, "Használat: /set pp [Játékos] [Érték] [Operátor(+/-/b)]");
			SCM(playerid, COL_MKEK, "Operátorok: +/h = Érték hozzáadása | -/l = Érték levonása | =/b = Érték beállítása");
			return true;
		}
		if(ertek > 1000 && !Admin(playerid,SZUPER_SZINT)) return SCM(playerid,COL_LRED,"Maximum 1000$!");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		new kp = PlayerInfo[jatekos][pPremiumPont];
		if(!strcmp(extra, "+", false) || !strcmp(extra, "h", false))
		{
			new uj = PlayerInfo[jatekos][pPremiumPont];
            PlayerInfo[jatekos][pPremiumPont] += ertek;
			kp = PlayerInfo[jatekos][pPremiumPont];
			nformat(log, 128, "%s hozzáadott %s ppjéhez! Régi: %d Új: %d Érték: +%s$", JatekosNev(playerid) ,JatekosNev(jatekos), uj, kp, ertek);
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			Log(FILE_PREMIUM, log);
			return true;
		}
		if(!strcmp(extra, "-", false) || !strcmp(extra, "l", false))
		{
			new uj = PlayerInfo[jatekos][pPremiumPont];
            PlayerInfo[jatekos][pPremiumPont] -= ertek;
			kp = PlayerInfo[jatekos][pPremiumPont];
			nformat(log, 128, "%s elvett %s ppjébõl! Régi: %d Új: %d Érték: -%d", JatekosNev(playerid), JatekosNev(jatekos), uj, kp, ertek);
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			Log(FILE_PREMIUM, log);
			return true;
		}
		if(!strcmp(extra, "=", false) || !strcmp(extra, "b", false))
		{
			new uj = ertek;
			nformat(log, 128, "%s beállította %s ppjét! Régi: %d Új: %d", JatekosNev(playerid) ,JatekosNev(jatekos), kp, uj);
			PlayerInfo[jatekos][pPremiumPont] = ertek;
			kp = PlayerInfo[jatekos][pPremiumPont];
			
			kp = PlayerInfo[jatekos][ppenz];
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			Log(FILE_PREMIUM, log);
			return true;
		}

		SCM(playerid, COL_LRED, "Adj meg egy operátort! ( +(h)ozzáad / -(l)evon / =(b)eállít )");
		return true;
	}
	else goto go_shelp;
	return true;
}

CMD:report(playerid, params[])
{
	if((gettime() - PlayerInfo[playerid][pReport][0]) < 5)
		return SCM(playerid, COL_LRED, "Kérlek várj egy kicsit, kevesebb mint 5 másodperc telt el az elõzõ report óta!");
	if(PlayerInfo[playerid][pTiltasok][TILTAS_REPORT] > 0)
	{
		return SFM(playerid,COL_LRED,"Még %d percig nem írhatsz üzenetet!",PlayerInfo[playerid][pTiltasok][TILTAS_REPORT]/60);
	}
	new str[128], rstr[128], num = 0, id;
	if(sscanf(params, "ds[128]", id, str))
	{
		SendClientMessage(playerid, COLOR_YELLOW, "0 = Adminsegédek | 1 = Adminok | 2 = FõAdminok | 3 = Tulajok / Scripterek");
		SCM(playerid, COL_MKEK, "Használat: /report [Channel (0/1/2/3)] [Üzeneted]");
		return true;
	}

	if(id < 0 || id > 3)
		return SCM(playerid, COL_LRED, "Nincs ilyen report szoba! Használat: /report [Channel (0/1/2/3)] [Üzeneted]");

    if(!SzidasCheck(playerid, str))	return true;
	format(rstr, sizeof(rstr), "[Channel %d]: [%d]%s - %s", id, playerid, JatekosNev(playerid), str);
	foreach(Player, i)
	{
		//if((PlayerInfo[i][pReport][1] && Admin(i, 1)) || (PlayerInfo[i][pReport][1] && IsAS(i)))
		//if(PlayerInfo[i][pSzunetel]) continue;
		if((PlayerInfo[i][pReport][1] == id || PlayerInfo[i][pallreport]==true) && !PlayerInfo[i][pTog][6] && (Admin(i, 1) || IsAS(i)))
		{
			SendClientMessage(i, COLOR_LIGHTGREEN, rstr);
			num++;
		}
	}

	if(!num)
	{
		SCM(playerid, COL_LRED, "Sajnáljuk, de jelenleg nincs senki a reporton.");
		SCM(playerid, COL_MKEK, "Kérlek várj türelmesen, vagy keress fel egy Admint /pm-be!");

	} else {

		PlayerInfo[playerid][pReport][0] = gettime();
		SendFormatMessage(playerid, COLOR_YELLOW, "Üzeneted elküldve: %s", str);
	}
	return true;
}
CMD:pm(playerid, params[])
{
	new jatekos, pmsz[128];
	if(sscanf(params, "us[128]", jatekos, pmsz))	return SCM(playerid, COL_MKEK, "Használat: /pm [Adminisztrátor] [Üzenet]");
	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos))	return NincsJatekos(playerid);
	if(jatekos == playerid)	return SCM(playerid, COL_LRED, "Nee:(");
	if(!Admin(playerid, 1) && !Admin(jatekos, 1) && !IsAS(jatekos))	return  SCM(playerid, COL_LRED, "Ez az Admin(segéd) nincs szolgálatban!");
	if(!PlayerInfo[jatekos][pAduty] && !PlayerInfo[jatekos][pASduty] && !Admin(playerid, 1))	return  SCM(playerid, COL_LRED, "Ez az Admin(segéd) nincs szolgálatban!");
	if(PlayerInfo[jatekos][pTog][7] && !Admin(playerid, 1))	return SCM(playerid, COL_LRED, "Ez az Admin(segéd)  jelenleg elfoglalt, kérlek várj egy kicsit.");
	if(!SzidasCheck(playerid, pmsz))	return true;
	if(PlayerInfo[jatekos][pSzunetel])	SCM(playerid, COL_MKEK, "Õ)  épp szünetelteti a játékot ezért lehetséges, hogy nem fog egybol válaszolni.");
	SendFormatMessage(jatekos, VKEK, "[%d]%s üzeni: %s", playerid, JatekosNev(playerid), pmsz);
	SendFormatMessage(playerid, COLOR_YELLOW2, "Üzeneted neki: %s - %s", JatekosNev(jatekos), pmsz);
	StatInfo[playerid][pPM]++;
	foreach(Player, id)
	{
		if(PlayerInfo[id][psmindenthall]==true)
		{
			SendFormatMessage(id, COLOR_YELLOW2, "[SMH] %s-->%s - %s", JatekosNev(playerid), JatekosNev(jatekos), pmsz);
		}
	}
	if(Admin(playerid,1))
	{
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'PM')", JatekosNev(playerid, false, true), PosExt(date), time[0], time[1]);
	}
	return true;
}

CMD:valasz(playerid, params[])
{
	new jatekos, pmsz[128], str[128];
	if(!Admin(playerid, 1) && !IsAS(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	    
	if(sscanf(params, "us[128]", jatekos, pmsz))
		return SCM(playerid, COL_MKEK, "Használat: /vá(lasz) [Játékos] [Üzenet]");
		
	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
	if(jatekos == playerid)
		return SCM(playerid, COL_LRED, "Cicaborsó, magadnak nem fogsz válaszolni! :D");
		
	if(!OOC_Ellenorzes(playerid, "/vá", pmsz) && !Admin(playerid, 1))
		return true;
		
	if((strlen(pmsz) > 10))
	{
		StatInfo[playerid][pVA]++;
		PlayerInfo[playerid][pValaszok]++;
	}

	format(str, sizeof(str), "%s %s válaszolt neki: %s - %s", (Admin(playerid, 1) ? ("Admin") : ("AS")), JatekosNev(playerid), JatekosNev(jatekos), pmsz);
	foreach(Player, p)
	{
		if(p == playerid || PlayerInfo[p][pTog][1]) continue;
		if((PlayerInfo[playerid][padmin] != 0 && (PlayerInfo[p][padmin] >= PlayerInfo[playerid][padmin])) || (PlayerInfo[p][padmin] && IsAS(playerid)) || (IsAS(p) && IsAS(playerid)))
			SendClientMessage(p, COLOR_YELLOW, str);
	}

	if(Admin(playerid,1) || IsAS(playerid))
	{
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Valasz')", JatekosNev(playerid), PosExt(date), time[0], time[1]);
	}

	SendFormatMessage(playerid, COLOR_YELLOW2, "Válaszod neki: [%d]%s - %s", jatekos, JatekosNev(jatekos), pmsz);
	SendFormatMessage(jatekos, COLOR_MKEK, "%s [%d]%s üzeni: %s", (Admin(playerid, 1) ? ("Admin") : ("Adminsegéd")), playerid, JatekosNev(playerid), pmsz);
	return true;
}

CMD:desync(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos;
	if(sscanf(params, "u", jatekos))
	    return SCM(playerid, COL_MKEK, "Használat: /desync [Jatekos]");

    if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(!PlayerInfo[jatekos][pDesync])
	{
	    PlayerInfo[jatekos][pDesync] = true;
	    SFM(playerid, COL_MKEK, "Szinkronizálás (OnPlayerUpdate) kikapcsolva rajta: "#COL_MKEK"%s", JatekosNev(jatekos));
	} else if(PlayerInfo[jatekos][pDesync])
	{
	    PlayerInfo[jatekos][pDesync] = false;
	    SFM(playerid, COL_MKEK, "Szinkronizálás (OnPlayerUpdate) bekapcsolva rajta: "#COL_MKEK"%s", JatekosNev(jatekos));
	}
	return true;
}
CMD:desynctrue(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos;
	if(sscanf(params, "u", jatekos))
	    return SCM(playerid, COL_MKEK, "Használat: /desynctrue [Jatekos]");

    if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(!PlayerInfo[jatekos][pDesyncTrue])
	{
	    PlayerInfo[jatekos][pDesyncTrue] = true;
	    SFM(playerid, COL_MKEK, "Szinkronizálás (OnPlayerUpdate) kikapcsolva rajta: "#COL_MKEK"%s", JatekosNev(jatekos));
	} else if(PlayerInfo[jatekos][pDesyncTrue])
	{
	    PlayerInfo[jatekos][pDesyncTrue] = false;
	    SFM(playerid, COL_MKEK, "Szinkronizálás (OnPlayerUpdate) bekapcsolva rajta: "#COL_MKEK"%s", JatekosNev(jatekos));
	}
	return true;
}
CMD:srcon(playerid, params[])
{
	if(!IsLewis(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new sron[128];
    if(sscanf(params, "s[128]", sron))
        return SCM(playerid, COL_MKEK, "Használata: /srcon [Paraméterek]");

	AdminUzenet(COLOR_LIGHTRED, FOADMIN_SZINT, "!!! ADMIN: %s SRCON PARANCSOT AKART HASZNÁLNI !!! (%s)", JatekosNev(playerid), sron);
    return true;
}

CMD:gun(playerid, params[])
{
    if(!Admin(playerid, SZUPER_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /gun [Játékos] [Fegyver] [Lõszer] | /gun töröl");

	new param[16], uid;
	sscanf(params, "s[24]{}", param);
	if(egyezik(param, "töröl") || egyezik(param, "torol"))
	{
	    if(sscanf(params, "{s[24]}u", uid))
			return SCM(playerid, COL_MKEK, "Használat: /gun töröl [Játékos] | Játékos fegyvereinek törlése");

        if((uid == INVALID_PLAYER_ID) || !IsPlayerConnected(uid) || IsPlayerNPC(uid))
		    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		Fegyver(uid, false);
		new fegyver = -1;
		for(;++fegyver < 13;)
		{
			PlayerInfo[uid][pFegyverek][fegyver] = 0;
			PlayerInfo[uid][pToltenyek][fegyver] = 0;
		}

		SetPlayerAttachedWeapon(uid, true);

		if(/*IsScripter(playerid) && (playerid != uid) || */!IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT)
			AdminUzenet(COLOR_LIGHTRED,1, "%s törölte %s zsebében lévõ fegyvereket!", JatekosNev(playerid), JatekosNev(uid));

		SFM(playerid, COL_MKEK, "Törölted "#COL_MKEK"%s"#COL_FEHER" zsebében lévõ fegyvereket!", JatekosNev(uid));

	} else {

		new fid[16], ammo, id;
		if(sscanf(params, "us[16]d", uid, fid, ammo))
			return SCM(playerid, COL_MKEK, "Használat: /gun [Játékos] [Fegyver] [Lõszer]");

        if((uid == INVALID_PLAYER_ID) || !IsPlayerConnected(uid) || IsPlayerNPC(uid))
		    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(IsNumeric(fid))
		{
			id = strval(fid);

			if(id < 1 || id >= sizeof(aWeaponNames))
				return SCM(playerid, COL_LRED, "Nincs ilyen fegyver!");
		} else {
			id = GetGunID(fid);

			if(id == 0)
				return SCM(playerid, COL_LRED, "Nincs ilyen fegyver!");
		}

		PlayerInfo[uid][pFegyverMuvelet] = (gettime() + 2);
		if(SameWeaponSlot(PlayerInfo[uid][pFegyverek][aWeaponSlotok[id]], id))
			return SCM(playerid, COL_LRED, "A játékosnak ezen a sloton már van fegyvere!");

		if(PlayerInfo[uid][pFegyver] == id)
			ResetPlayerWeapons(uid);

		//Beállítja a lõszert, nem hozzádja!
		GiveWeapon(uid, id, ammo, false, true);
		SetPlayerAttachedWeapon(uid);

		if(/*IsScripter(playerid) && (playerid != uid) || */!IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT)
			AdminUzenet(COLOR_LIGHTRED,1, "%s fegyvert adott neki: %s | Fegyver: [%d]%s | Töltény: %d", JatekosNev(playerid), JatekosNev(uid), id, aWeaponNames[id], ammo);

		SFM(playerid, COL_MKEK, "Fegyver adtál neki: %s | Fegyver: [%d]%s | Töltény: %d", JatekosNev(uid), id, aWeaponNames[id], ammo);
	}
	return true;
}

CMD:kapu(playerid, params[])
{
	if(!Admin(playerid, SZUPER_SZINT) && !PlayerInfo[playerid][pKapuKezeles])
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
	{
		if(IsScripter(playerid)) SCM(playerid, COL_MKEK, "Használat: /kapu [ Kezelés / Go ] | Ha nem adsz meg paramétert, alapértelmezett a dialog!");
		else SCM(playerid, COL_MKEK, "Használat: /kapu [ Go ] | Ha nem adsz meg paramétert alapértelmezett a dialog!");
		ShowPlayerDialog(playerid, DIALOG_KAPU_STATISZTIKA, DIALOG_STYLE_LIST, #COL_FEHER"Kapu "#COL_VKEK"statisztika", "Új kapu létrehozása\nKözeli kapu szerkesztése\nKözeli kapu információi", "Mehet!", "Mégse!");
		return true;
	}

	new param[24];
	sscanf(params, "s[24]{}", param);
	if(!strcmp(param, "go", false))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /kapu go [Kapu SQLID]");

		if(id > MAX_KAPU || !id || !Kapu[id][kVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen kapu az adatbázisban!");

		SetPos(playerid, Kapu[id][kPos], (Kapu[id][kPos] + 2), Kapu[id][kPos]);
		SFM(playerid, COL_VZOLD, "Sikeresen teleportáltál a "#COL_MKEK"%s"#COL_FEHER" nevû kapuhoz!", Kapu[id][kNev]);
		return true;
	}
	else if(!strcmp(param, "kezelés", false) || !strcmp(param, "kezeles", false))
	{
		new jatekos;
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /kapu kezelés [Játékos] | Kezelési engedély adása");

		if(!IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Lófaszt.. Te nem fogod osztogatni -.-");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if((PlayerInfo[jatekos][pKapuKezeles] = true - PlayerInfo[jatekos][pKapuKezeles]))
		{
			SFM(playerid, COL_MKEK, "Engedélyezted "#COL_MKEK"%s"#COL_FEHER" számára a kapukezelést!", JatekosNev(jatekos));
			SFM(jatekos, COL_MKEK, "Admin "#COL_MKEK"%s"#COL_FEHER" engedélyezte számodra a kapukezelést! Használata: /kapu", JatekosNev(playerid));
		} else
			SFM(playerid, COL_MKEK, "Tiltottad "#COL_MKEK"%s"#COL_FEHER" számára a kapukezelést!", JatekosNev(jatekos));
	}
	return true;
}

CMD:terulet(playerid, params[])
{
	if(isnull(params) && IsScripter(playerid))
		return SCM(playerid, COL_MKEK, "(Scripter)Használata: /terület [ Új / Töröl / Lista / Tulaj / Haszon / Kezelés ]");

	new param[24];
	sscanf(params, "s[24]{}", param);

	if(!strcmp(param, "tulaj", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT) && !PlayerInfo[playerid][pTeruletKezeles])
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new fid, tid;

		if(sscanf(params, "{s[24]}dd", tid, fid))
			return SCM(playerid, COL_MKEK, "Használat: /terulet tulaj [TerületID] [FrakcióID]");

		if((fid > MAX_FRAKCIO || fid < 1 ) || !FInfo[fid][fVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen frakció!");

		/*if(FInfo[fid][fLegalis] == FK_LEGAL)
			return SCM(playerid, COL_LRED, "Csak illegális frakciónak lehet hozzáadni!");*/

		if((tid > MAX_TERULET || tid < 0 ) || !tInfo[tid][tVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen terület!");

		tInfo[tid][tFrakcio] = fid;
		TeruletFrissites();

		if(PlayerInfo[playerid][padmin])
			AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította a(z) %s nevû terület tulaját erre: [%d]%s", JatekosNev(playerid), tInfo[tid][tNev], fid, FInfo[fid][fNev]);

		SFM(playerid, COL_VZOLD, "%s nevû terület tulaja átállítva erre: [%d]%s", tInfo[tid][tNev], fid, FInfo[fid][fNev]);
		return true;
	}
	else if(!strcmp(param, "kezelés", true) || !strcmp(param, "kezeles", true))
	{
		if(!IsScripter(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id;
		if(sscanf(params, "{s[24]}u", id))
			return SCM(playerid, COL_MKEK, "Használat: /terület kezelés [Játékos]");

		if(id == INVALID_PLAYER_ID || !Belepve(id))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[id][pTeruletKezeles])
		{
			SFM(playerid, COL_VZOLD, "Terület kezelési engedély visszavonva tõle: "#COL_MKEK"[%d]%s", id, JatekosNev(id));
			PlayerInfo[id][pTeruletKezeles] = false;

		} else {

			SFM(playerid, COL_VZOLD, "Terület kezelési engedély "#COL_MKEK"[%d]%s"#COL_FEHER" számára!", id, JatekosNev(id));
			SFM(id, COL_VZOLD, "Admin "#COL_MKEK"%s"#COL_FEHER" engedélyezte számodra a terület kezelést! Használata: "#COL_MKEK"/terület", JatekosNev(playerid));
			PlayerInfo[id][pTeruletKezeles] = true;
		}

		return true;
	}
	else if(!strcmp(param, "töröl", true) || !strcmp(param, "torol", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT) && !PlayerInfo[playerid][pTeruletKezeles])
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /terület töröl [TerületID]");

		/*new k = -1, u = -1;

		for(;++k < MAX_TERULET;)
		{
			if(tInfo[k][tVan])
			{
				if(!strcmp(tInfo[k][tNev], nev))
				{
					u = k;
					break;
				}
			}
		}

		if(u == -1)
			return SFM(playerid, COL_LRED, "Nincs ilyen területnév! (%s)", nev);

		if((id > MAX_TERULET || id < 0 ) || !tInfo[id][tVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen terület!");

		if(PlayerInfo[playerid][padmin])
			AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s törölte a(z) %s nevû területet!", JatekosNev(playerid), tInfo[id][tNev]);

		SFM(playerid, COL_VZOLD, "%s nevû terület sikeresen törölve!", tInfo[id][tNev]);

		tInfo[id][tVan] = false;
		tInfo[id][tNev][0] = EOS;
		GangZoneDestroy(tInfo[id][tZone]);
		DestroyDynamicArea(tInfo[id][tArea]);
		tInfo[id][tMinPos][0] = 0.0;
		tInfo[id][tMinPos][1] = 0.0;
		tInfo[id][tMaxPos][0] = 0.0;
		tInfo[id][tMaxPos][1] = 0.0;
		tInfo[id][tFrakcio] = 0;
		tInfo[id][tHaszon][0] = 0;
		tInfo[id][tHaszon][1] = 0;
		tInfo[id][tHaszon][2] = 0;
		tInfo[id][tHaszon][3] = 0;
		tInfo[id][tHaszon][4] = 0;
		tInfo[id][tHaszonIdo] = 0;
		tInfo[id][tHarcFolyik] = false;
		tInfo[id][tTipus] = 0;
		tInfo[id][tHarcolok][VEDOK] = 0;
		tInfo[id][tHarcolok][TAMADOK] = 0;
		tInfo[id][tVarakozasIdo] = 0;

		doQuery("DELETE FROM `"#MYSQL_TERULET_TABLA"` WHERE ID = '%d'", id);
		return true;*/
	}
	else if(!strcmp(param, "lista", true))
	{
		SendClientMessage(playerid, COLOR_WHITE, "========== [ "#COL_MKEK"Területek"#COL_FEHER" ] ==========");
		new u = -1, str[256], db, fks[32];

		SendClientMessage(playerid, COLOR_YELLOW2, "ID - Frakció | Pénz / Kokain / Heroin / Marihuana / Material");
		for(;++u < MAX_TERULET;)
		{
			if(tInfo[u][tVan])
			{
				if(FInfo[ tInfo[u][tFrakcio] ][fVan]) format(fks, sizeof(fks), "%s", FInfo[ tInfo[u][tFrakcio] ][fNev]);
				else format(fks, sizeof(fks), "Nincs");
				format(str, sizeof(str), "[%d]%s - %s | %s$, %dg, %dg, %dg, %ddb", u, tInfo[u][tNev], fks, FN(tInfo[u][tHaszon][0], 0, ','), tInfo[u][tHaszon][1], tInfo[u][tHaszon][2], tInfo[u][tHaszon][3], tInfo[u][tHaszon][4]);
				SendClientMessage(playerid, COLOR_MKEK, str);
				db++;
			}
		}

		if(!db)
			SCM(playerid, COL_LRED, "Jelenleg nincs létrehozva terület!");
		return true;
	}
	else if(!strcmp(param, "új", true) || !strcmp(param, "uj", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT) && !PlayerInfo[playerid][pTeruletKezeles])
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new nev[40];
		if(sscanf(params, "{s[24]}s[40]", nev))
			return SCM(playerid, COL_MKEK, "Használat: /terület új [Terület Név]");

		if(strlen(nev) < 5 || strlen(nev) > 40)
			return SCM(playerid, COL_LRED, "A teürlet név 5 és 40 karakter között lehet!");

		new k = -1, u = -1;
		for(;++k < MAX_TERULET;)
		{
			if(!tInfo[k][tVan])
			{
				u = k;
				break;
			}
		}

		format(tInfo[u][tNev], 40, nev);
		tInfo[u][tVan] = true;
		doQuery("INSERT INTO `"#MYSQL_TERULET_TABLA"` (ID, Nev) VALUES ('%d', '%s')", u, nev);

		PlayerInfo[playerid][pTeruletSzerkeszt] = true;
		PlayerInfo[playerid][pTerulet] = u;

		new Float:pZ;

		GetPlayerPos(playerid, tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1], pZ);
		GetPlayerPos(playerid, tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1], pZ);

		tInfo[PlayerInfo[playerid][pTerulet]][tZone] = GangZoneCreate(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1]);
		tInfo[PlayerInfo[playerid][pTerulet]][tArea] = CreateDynamicRectangle(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1]);

		if(PlayerInfo[playerid][padmin])
			AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s létrehozott egy %s nevû területet!", JatekosNev(playerid), nev);

		SendClientMessage(playerid, COLOR_GREEN, "Terület létrehozásához használd a W-A-S-D gombokat! Mentéshez nyomd meg az ENTER gombot.");
		return true;
	}
	else if(!strcmp(param, "haszon", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT) && !PlayerInfo[playerid][pTeruletKezeles])
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new hparam[24], val, id;
		if(sscanf(params, "{s[24]}s[24]dd", hparam, id, val))
			return SCM(playerid, COL_MKEK, "Használat: /terület haszon [ Pénz / Kokain / Heroin / Marihuana / Material ] [TerületID] [Érték]");

		if((id > MAX_TERULET || id < 0 ) || !tInfo[id][tVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen terület!");

		if(val < 0 || val > 600000)
			return SCM(playerid, COL_MKEK, "Hibás érték! Minimum 0 és maximum 600,000 lehet!");

		if(!strcmp(hparam, "penz", true) || !strcmp(hparam, "pénz", true))
			tInfo[ id ][tHaszon][0] = val;
		else if(!strcmp(hparam, "kokain", true))
			tInfo[ id ][tHaszon][1] = val;
		else if(!strcmp(hparam, "heroin", true))
			tInfo[ id ][tHaszon][2] = val;
		else if(!strcmp(hparam, "marihuana", true))
			tInfo[ id ][tHaszon][3] = val;
		else if(!strcmp(hparam, "material", true))
			tInfo[ id ][tHaszon][4] = val;
		else
			return SCM(playerid, COL_LRED, "Hibás paraméter! Lehetõségek: Pénz / Kokain / Heroin / Marihuana / Material");

		nformat(str, 128, "Terület: [%d]%s => Pénz: %s$ | Kokain: %sg | Heroin: %sg | Marihuana: %sg | Material: %sdb", id, tInfo[id][tNev], FN(tInfo[ id ][tHaszon][0], 0, ','), FN(tInfo[ id ][tHaszon][1], 0, ','), FN(tInfo[ id ][tHaszon][2], 0, ','), FN(tInfo[ id ][tHaszon][3], 0, ','), FN(tInfo[ id ][tHaszon][4], 0, ','));
		SendClientMessage(playerid, COLOR_MKEK, str);
	}
	return true;
}

CMD:faset(playerid, params[])
{
	if(!IsScripter(playerid))
		return false;

	new Float:frot[3], Float:speed, fid;
	if(sscanf(params, "df(0.09f(0.0)f(0.0)", fid, speed, PosExt(frot)))
		return SendClientMessage(playerid, COLOR_WHITE, "Használata: /faset [faid] [speed] [rotx] [roty] [rotz]");

	if(fid >= sizeof(FaHelyek))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Túl nagy!");

	if(fid < 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Túl kicsi!");

	new Float:opos[3];
	GetDynamicObjectPos(FaObjectek[fid], PosExt(opos));

	MoveDynamicObject(FaObjectek[fid], PosExt(opos) + 0.0001, speed, PosExt(frot));

	SendClientMessage(playerid, COLOR_MKEK, "Sikeresen elmozgatva!");

	return true;
}

CMD:ceg(playerid, params[])
{
	if(isnull(params))
	{
		SCM(playerid, COL_MKEK, "Használat: /cég [ Lista / Név / Vesz / Belépõ / Széf ]");
		if(Admin(playerid, 5))
			SCM(playerid, COL_MKEK, "Admin 5: Go, Info | Scripter: Ár, Aelad, Új, Töröl, Bejárat, Kijárat, Típus");
		return true;
	}

	new param[24];
	sscanf(params, "s[24]{}", param);

	if(!strcmp(param, "új", true) || !strcmp(param, "uj", true))
	{
		if(!Admin(playerid, AC_SZINT))	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new aanev[20], nev[32], ar;
		if(sscanf(params, "{s[24]}s[20]s[32]d", aanev, nev, ar))
			return SCM(playerid, COL_MKEK, "Használat: /cég [Alap név] [Név] [Ára]");

		new c = NINCS, u = -1;
		for(;++c < MAX_CEG;)
		{
			if(!CegInfo[c][cVan])
			{
				u = c;
				break;
			}
		}

		if(u == NINCS)
			return SCM(playerid, COL_LRED, "Nem tudsz több céget létrehozni!");

		if(ar < 43000)
			return SCM(playerid, COL_LRED, "Az ár nem lehet kisebb mint 43 000$!");

		if(Karakter_Ellenorzes(aanev) || Karakter_Ellenorzes(nev))
			return SCM(playerid, COL_LRED, "Az név nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");

		CegInfo[u][cVan] = true;
		CegInfo[u][cTulajID] = NINCS;
		format(CegInfo[u][cNev], 32, "%s", nev);
		format(CegInfo[u][cANev], 20, "%s", aanev);
		CegInfo[u][cAr] = ar;

		GetPlayerPos(playerid, PosExt(CegInfo[ u ][cPosBe]));
		GetPlayerFacingAngle(playerid, CegInfo[ u ][cPosBe][3]);

		CegInfo[u][cVw][0] = GetPlayerVirtualWorld(playerid);
		CegInfo[u][cInt][0] = GetPlayerInterior(playerid);

		if(IsValidDynamicPickup( CegInfo[u][cPickup] )) DestroyDynamicPickup( CegInfo[u][cPickup] );
		CegInfo[u][cPickup] = CreateDynamicPickup(1239, 23, PosExt(CegInfo[u][cPosBe]), CegInfo[u][cVw][0], CegInfo[u][cInt][0], NINCS);

		doQuery("INSERT INTO `"#MYSQL_CEGEK_TABLA"` (Id, Anev, Nev, Ar, PosBe, Vw, Inte) VALUES ('%d', '%s', '%s', '%d', '%f,%f,%f,%f', '%d,%d', '%d,%d')", u, aanev, nev, ar, PosExt(CegInfo[ u ][cPosBe]), CegInfo[ u ][cPosBe][3], CegInfo[u][cVw][0], CegInfo[u][cVw][1], CegInfo[u][cInt][0], CegInfo[u][cInt][1]);
		SendFormatMessage(playerid, COLOR_MKEK, "Sikeresen létrehoztad a(z) %s nevû céget! [SQLID: %d | Ára: %s$]", nev, u, FN(ar, 0, ','));
		return true;
	}
	else if(!strcmp(param, "bejárat", true) || !strcmp(param, "bejarat", true))
	{
		if(!Admin(playerid, AC_SZINT))	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /cég bejárat [CégID] | Bejárat áthelyezése");

		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");

		GetPlayerPos(playerid, PosExt(CegInfo[ id ][cPosBe]));
		GetPlayerFacingAngle(playerid, CegInfo[ id ][cPosBe][3]);

		CegInfo[id][cVw][0] = GetPlayerVirtualWorld(playerid);
		CegInfo[id][cInt][0] = GetPlayerInterior(playerid);

		if(IsValidDynamicPickup( CegInfo[id][cPickup] )) DestroyDynamicPickup( CegInfo[id][cPickup] );
		CegInfo[id][cPickup] = CreateDynamicPickup(1239, 23, PosExt(CegInfo[id][cPosBe]), CegInfo[id][cVw][0], CegInfo[id][cInt][0], NINCS);

		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET PosBe = '%f,%f,%f,%f', Vw = '%d,%d', Inte = '%d,%d' WHERE Id = '%d'", PosExt(CegInfo[ id ][cPosBe]), CegInfo[ id ][cPosBe][3], CegInfo[id][cVw][0], CegInfo[id][cVw][1], CegInfo[id][cInt][0], CegInfo[id][cInt][1], id);
		SendFormatMessage(playerid, COLOR_MKEK, "Cég bejárata sikeresen áthelyezve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s", id, CegInfo[id][cNev], CegTulaj(id));
		return true;
	}
	else if(!strcmp(param, "kijárat", true) || !strcmp(param, "kijarat", true))
	{
		if(!Admin(playerid, AC_SZINT))	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /cég kijárat [CégID] | Kijárat áthelyezése");

		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");

		GetPlayerPos(playerid, PosExt(CegInfo[ id ][cPosKi]));
		GetPlayerFacingAngle(playerid, CegInfo[ id ][cPosKi][3]);

		CegInfo[id][cVw][1] = GetPlayerVirtualWorld(playerid);
		CegInfo[id][cInt][1] = GetPlayerInterior(playerid);

		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET PosKi = '%f,%f,%f,%f', Vw = '%d,%d', Inte = '%d,%d' WHERE Id = '%d'", PosExt(CegInfo[ id ][cPosKi]), CegInfo[ id ][cPosKi][3], CegInfo[id][cVw][0], CegInfo[id][cVw][1], CegInfo[id][cInt][0], CegInfo[id][cInt][1], id);
		SendFormatMessage(playerid, COLOR_MKEK, "Cég kijárata sikeresen áthelyezve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s", id, CegInfo[id][cNev], CegTulaj(id));
		return true;
	}
	else if(!strcmp(param, "ár", true) || !strcmp(param, "ar", true))
	{
		if(!Admin(playerid, AC_SZINT))	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id, ar;
		if(sscanf(params, "{s[24]}dd", id, ar))
			return SCM(playerid, COL_MKEK, "Használat: /cég ár [CégID] [Ár]");

		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");

		if(ar < 1 || ar > 3000000)
			return SCM(playerid, COL_LRED, "A cég ára minimum 1 és maximum 2 000 000$ lehet!");

		CegInfo[ id ][cAr] = ar;

		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET Ar = '%d' WHERE Id = '%d'", ar, id);
		SendFormatMessage(playerid, COLOR_MKEK, "Cég sikeresen szerkesztve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s"#COL_FEHER" - Ár: %s$", id, CegInfo[id][cNev], CegTulaj(id), FN(ar, 0, ','));
		return true;
	}
	else if(!strcmp(param, "név", true) || !strcmp(param, "nev", true))
	{
		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");

		if(CegInfo[ id ][cTulajID] != PlayerInfo[playerid][pID] && !Admin(playerid, FOADMIN_SZINT))
			return SCM(playerid, COL_LRED, "Csak a saját céged nevezheted át!");

		new nev[32];
		if(sscanf(params, "{s[24]}s[32]", nev))
			return SCM(playerid, COL_MKEK, "Használat: /cég név [Név]");

		if(Karakter_Ellenorzes(nev))
			return SCM(playerid, COL_LRED, "Az név nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");

		format(CegInfo[ id ][cNev], 32, "%s", nev);
		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET Nev = '%s' WHERE Id = '%d'", nev, id);
		SendFormatMessage(playerid, COLOR_MKEK, "Cég sikeresen szerkesztve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s", id, CegInfo[id][cNev], CegTulaj(id));
		return true;
	}
	else if(!strcmp(param, "aelad", true))
	{
		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");

		if(!Admin(playerid, AC_SZINT))	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		SendFormatMessage(playerid, COLOR_MKEK, "Cég sikeresen eladva! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s", id, CegInfo[id][cNev], CegTulaj(id));
		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET TulajID = '-1', Tulaj = 'Nincs_Tulaj' WHERE Id = '%d'", id);
		CegInfo[ id ][cTulajID] = NINCS;
		CegInfo[ id ][cTulaj][0] = EOS;
		CegInfo[ id ][cFTulaj] = 0;
		return true;
	}
	else if(!strcmp(param, "széf", true) || !strcmp(param, "szef", true))
	{
		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");

		if(CegInfo[ id ][cTulajID] != PlayerInfo[playerid][pID] && !Admin(playerid, FOADMIN_SZINT))
			return SCM(playerid, COL_LRED, "Csak a saját céged nevezheted át!");

		new eparam[16];
		if(sscanf(params, "{s[24]}s[16]{}", eparam))
			return SCM(playerid, COL_MKEK, "Használat: /cég széf [ Megnéz / Utal / Betesz ]");

		if(!strcmp(eparam, "set", true))
		{
			if(!Admin(playerid, AC_SZINT))	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

			new penz;
			if(sscanf(params, "{s[24]}{s[16]}d", penz))
				return SCM(playerid, COL_MKEK, "Használat: /cég széf set [Összeg]");

			SFM(playerid, COL_VZOLD, "Cég: "#COL_MKEK"%s"#COL_FEHER" sikeresen szerkesztve! Régi egyenleg: "#COL_MKEK"%s"#COL_FEHER"$ | Új egyenleg: "#COL_MKEK"%s"#COL_FEHER"$", CegInfo[id][cANev], FN(CegInfo[id][cKassza], 0, ','), FN(penz, 0, ','));
			CegInfo[id][cKassza] = penz;
			return true;
		}
		else if(!strcmp(eparam, "betesz", true))
		{
		    new osszeg;
		    if(sscanf(params, "{s[24]}{s[16]}d",osszeg))
		        return SCM(playerid,COL_MKEK,"Használat: /cég széf betesz [Összeg]");
			else if(osszeg > 25000)
			    return SCM(playerid,COL_LRED,"Max. 25000$!");
			else if(PlayerInfo[playerid][ppenz] < osszeg)
			    return SCM(playerid,COL_LRED,"Nincs ennyi pénz nálad!");
			else {
				CegInfo[id][cKassza] += osszeg;
				GiveMoney(playerid,-osszeg);
				SFM(playerid,COL_MKEK,"Beraktál %d$-t a cég széfjébe.",osszeg);
			}
		}
		else if(!strcmp(eparam, "megnéz", true) || !strcmp(eparam, "megnez", true))
		{
			SendClientMessage(playerid, COLOR_WHITE, "============== [ "#COL_MKEK"Széf"#COL_FEHER" ] ==============");
			SendFormatMessage(playerid, COLOR_WHITE, "Széf tartalma: "#COL_MKEK"%s"#COL_FEHER"$", FN(CegInfo[id][cKassza], 0, ','));
			return true;
		}
		else if(!strcmp(eparam, "utal", true))
		{
			new bsz, penz;
			if(sscanf(params, "{s[24]}{s[16]}dd", bsz, penz))
				return SCM(playerid, COL_MKEK, "Használat: /cég széf utal [Bankszámlaszám] [Összeg]");

			if(penz < 3 || penz > 450000)
				return SCM(playerid, COL_LRED, "Hibás összeg! Az összeg minimum 3$ és maximum 45 000$ lehet!");

			if((CegInfo[id][cKassza] - 215) < penz)
				return SCM(playerid, COL_LRED, "Nincs ennyi pénz a kasszában! Minimum 215$-nak maradni kell a széfben!");

			new player = NINCS;
			foreach(Player, pid)
			{
				if(!Belepve(pid))
					continue;

				if(PlayerInfo[pid][pBsz] == bsz)
				{
					player = pid;
					break;
				}
			}

			if(player == NINCS)
				return SCM(playerid, COL_LRED, "Ez a bankszámlaszám nem található a rendszerben!");

			SendFormatMessage(playerid, COLOR_WHITE, "Összeg kiutalva a "#COL_MKEK"%s"#COL_FEHER" bankszámlaszámra! Összeg: "#COL_MKEK"%s"#COL_FEHER"$", FN(bsz, 0, '-'), FN(CegInfo[id][cKassza], 0, ','));
			SendFormatMessage(player, COLOR_WHITE, "Utalás történt a bankszámládra! Feladó: "#COL_MKEK"%s"#COL_FEHER" | Összeg: "#COL_MKEK"%s"#COL_FEHER"$", CegInfo[id][cANev], FN(CegInfo[id][cKassza], 0, ','));

			PlayerInfo[player][pBszPenz] += penz;
			CegInfo[id][cKassza] -= penz;
		}
		return true;
	}
	else if(!strcmp(param, "belépõ", true) || !strcmp(param, "belepo", true))
	{
		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");

		if(CegInfo[ id ][cTulajID] != PlayerInfo[playerid][pID] && !Admin(playerid, FOADMIN_SZINT))
			return SCM(playerid, COL_LRED, "Csak a saját céged belépõjét állíthatod át!");

		new ar;
		if(sscanf(params, "{s[24]}d", ar))
			return SCM(playerid, COL_MKEK, "Használat: /cég belépõ [Összeg]");

		if(id == BIZ_HIR && (ar < 1 || ar > 120))
			return SCM(playerid, COL_LRED, "Egy hírdetés ára maximum 120$ lehet!");
		else if(ar < 1 || ar > 1000)
			return SCM(playerid, COL_LRED, "A cég belépõje minimum 1 és maximum 1000$ lehet!");

		CegInfo[ id ][cBelepo] = ar;
		SendFormatMessage(playerid, COLOR_MKEK, "Cég sikeresen szerkesztve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s"#COL_FEHER" Belépõ: "#COL_MKEK"%s$", id, CegInfo[id][cNev], CegTulaj(id), FN(ar, 0, ','));
		return true;
	}
	else if(!strcmp(param, "vesz", true))
	{
		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");

		if(CegInfo[ id ][cTulajID] != NINCS)
			return SCM(playerid, COL_LRED, "Ennek a cégnek már van tulaja!");

		if(CegInfo[id][cAr] > PlayerInfo[playerid][pBszPenz])
			return SFM(playerid, COL_LRED, "A cég ára "#COL_MKEK"%s"#COL_FEHER"$, neked nincs ennyi a bankszámládon!", FN(CegInfo[id][cAr], 0, ','));

		PlayerInfo[playerid][pBszPenz] -= CegInfo[id][cAr];
		CegInfo[ id ][cTulajID] = PlayerInfo[playerid][pID];
		Adat_Update( playerid, ADAT_CEG );
		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET Tulaj = '%s', TulajID = '%d' WHERE Id = '%d'", PlayerInfo[playerid][pNev], PlayerInfo[playerid][pID], id);
		SendFormatMessage(playerid, COLOR_MKEK, "Sikeresen megvetted a(z) "#COL_MKEK"%s"#COL_FEHER" nevû céget! Ára: "#COL_MKEK"%s"#COL_FEHER"$", id, CegInfo[id][cNev], FN(CegInfo[id][cAr], 0, ','));
		return true;
	}
	else if(!strcmp(param, "töröl", true) || !strcmp(param, "torol", true))
	{
		if(!Admin(playerid, AC_SZINT))	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");

		if(CegInfo[ id ][cTulajID] != NINCS && PlayerInfo[playerid][pMegerosites] != playerid)
		{
			PlayerInfo[playerid][pMegerosites] = playerid;
			SCM(playerid, COL_LRED, "Ennek a cégnek már van tulaja! Biztos, hogy törölni szeretnéd? Ha igen írd be újra!");
			return true;
		}

		PlayerInfo[playerid][pMegerosites] = NINCS;
		doQuery("DELETE FROM `"#MYSQL_CEGEK_TABLA"` WHERE Id = '%d'", id);

		SendFormatMessage(playerid, COLOR_MKEK, "Sikeresen törölted a(z) "#COL_MKEK"%s"#COL_FEHER" nevû céget!", id, CegInfo[id][cNev]);
		if(IsValidDynamicPickup( CegInfo[id][cPickup] )) DestroyDynamicPickup( CegInfo[id][cPickup] );
		for(new i = NINCS; ++i != sizeof(CegInfo[]);) CegInfo[id][ceginfo:i] = EOS;
		CegInfo[id][cVan] = false;
		return true;
	}
	else if(!strcmp(param, "típus", true) || !strcmp(param, "tipus", true))
	{
		if(!Admin(playerid, AC_SZINT))	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id, tipus;
		if(sscanf(params, "{s[24]}dd", id, tipus))
			return SCM(playerid, COL_MKEK, "Használat: /cég típus [CégID] [Típus]");

		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");

		if(tipus < 1 || tipus > 100)
			return SCM(playerid, COL_LRED, "A cég típusa minimum 1 és maximum 100 lehet!");

		CegInfo[ id ][cTipus] = tipus;

		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET Tipus = '%d' WHERE Id = '%d'", tipus, id);
		SendFormatMessage(playerid, COLOR_MKEK, "Cég sikeresen szerkesztve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s"#COL_FEHER" - Típus: %s", id, CegInfo[id][cNev], CegTulaj(id), CegTipus(tipus));
		return true;
	}
	else if(!strcmp(param, "infó", true) || !strcmp(param, "info", true))
	{
		if(!Admin(playerid, 5))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /cég info [CégID] | Információk lekérése");

		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");

		SendClientMessage(playerid, COLOR_WHITE, "=================== ["#COL_MKEK" Céginformáció "#COL_FEHER"] ===================");
		SendFormatMessage(playerid, COLOR_WHITE, "Cég: "#COL_MKEK"%s"#COL_FEHER" | Rövid név: "#COL_MKEK"%s", CegInfo[id][cNev], CegInfo[id][cANev]);
		SendFormatMessage(playerid, COLOR_WHITE, "Tulaj: "#COL_MKEK"%s"#COL_FEHER" | Kassza tartalma: "#COL_MKEK"%s$", CegTulaj(id, true), FN(CegInfo[id][cKassza], 0, ','));
		SendFormatMessage(playerid, COLOR_WHITE, "Ára: "#COL_MKEK"%s$", FN(CegInfo[id][cAr], 0, ','));
		return true;
	}
	else if(!strcmp(param, "go", true) || !strcmp(param, "goto", true))
	{
		if(!Admin(playerid, 5))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new id, mi[4];
		if(sscanf(params, "{s[24]}s[4]d", mi, id))
			return SCM(playerid, COL_MKEK, "Használat: /cég go [ Ki / Be ] [CégID]");

		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");

		if(!strcmp(mi, "ki", true))
		{
			if(CegInfo[ id ][cPosKi][0] == 0.0)
				return SCM(playerid, COL_LRED, "Ennek a cégnek nincs lehelyezett kijárata!");

			SetPos(playerid, PosExt(CegInfo[ id ][cPosKi]));
			SetPlayerFacingAngle(playerid, CegInfo[ id ][cPosKi][3]);
		}
		else if(!strcmp(mi, "be", true))
		{
			if(CegInfo[ id ][cPosBe][0] == 0.0)
				return SCM(playerid, COL_LRED, "Ennek a cégnek nincs lehelyezett bejárata!");

			SetPos(playerid, PosExt(CegInfo[ id ][cPosBe]));
			SetPlayerFacingAngle(playerid, CegInfo[ id ][cPosBe][3]);

		} else
			return SCM(playerid, COL_LRED, "Hibás paraméter! Ki vagy bejárat?");

		SFM(playerid, COL_VZOLD, "Sikeresen teleportálva! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s", id, CegInfo[id][cNev], CegTulaj(id));
		return true;
	}
	else if(!strcmp(param, "lista", true))
	{
		new c = NINCS;
		for(;++c < MAX_CEG;)
		{
			if(!CegInfo[c][cVan]) continue;
			SendFormatMessage(playerid, COLOR_WHITE, "Id: "#COL_MKEK"%d"#COL_FEHER" | Cég: "#COL_MKEK"%s"#COL_FEHER" | Tulaj: "#COL_MKEK"%s"#COL_FEHER" | Kassza: "#COL_MKEK"%s", c, CegInfo[c][cNev], CegTulaj( c ), FN(CegInfo[c][cKassza], 0, ','));
		}

		return true;
	}
	return true;
}

CMD:megtankol(playerid, params[])
{
	#pragma unused params
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new vid;
	foreach(Jarmuvek, id)
	{
		vid = JarmuID(id, playerid);
		if(vInfo[vid][vHasznalva])
		{
			vInfo[vid][vUzemanyag] = MAX_Benzin[vInfo[vid][vModel] - 400];
		}
	}

	AdminUzenet(COLOR_LIGHTRED, 1, "%s megtankolta az összes jármûvet!", JatekosNev(playerid));
	SendClientMessage(playerid, COLOR_WHITE, "Minden jármû sikeresen megtankolva!");
	return true;
}

CMD:le(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1))
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPos(playerid, slx, sly, slz-2);
	} else {
		new Float:slx, Float:sly, Float:slz;
		GetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz);
		SetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz-2);
	}
	return true;
}

CMD:fel(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1))
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPos(playerid, slx, sly, slz+2);
	} else {
		new Float:slx, Float:sly, Float:slz;
		GetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz);
		SetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz+2);
	}
	return true;
}

CMD:bal(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1))
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPos(playerid, slx-2, sly, slz);
	} else {
		new Float:slx, Float:sly, Float:slz;
		GetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz);
		SetVehiclePos(GetPlayerVehicleID(playerid), slx-2, sly, slz);
	}
	return true;
}

CMD:jobb(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1))
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPos(playerid, slx, sly+2, slz);
	} else {
		new Float:slx, Float:sly, Float:slz;
		GetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz);
		SetVehiclePos(GetPlayerVehicleID(playerid), slx, sly+2, slz);
	}
	return true;
}

CMD:crs(playerid, params[])
{
    if(!Admin(playerid, 1))
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new car = NINCS;
	if(isnull(params))
	{
		if(!IsPlayerInAnyVehicle(playerid))
			car = GetClosestVehicle(playerid);
		else
			car = GetPlayerVehicleID(playerid);

		if(GetDistanceToVehicle(playerid, car) > 5.0)	return SCM(playerid, COL_MKEK, "Nincs a közeledben jármû! Lehetõségek: /crs [ JármûID / All ]");
	} else {
		new param[24], extra = NINCS;
		sscanf(params, "s[24]D(-1)", param, extra);

		if(Admin(playerid, FOADMIN_SZINT))
		{
			if(!strcmp(param, "all"))
			{
				if(extra == NINCS)// extra = 0;
					return SCM(playerid, COL_MKEK, "Használat: /crs all [0/1] | 0 = Javítás nélkül, 1 = Javítás");

				if(extra != 0 && extra != 1)
					return SCM(playerid, COL_LRED, "Hibás érték! 0 = Jármûvek nem javulnak meg, 1 = Jármûvek megjavulnak");

				ServerInfo[sCarResi][0] = 30;// másodperc múlva jármû respawn
				ServerInfo[sCarResi][1] = extra;// jármûvek javuljanak-e vagy sem
				AdminUzenet(COLOR_LIGHTRED, 1, "%s elindította a jármû respawnt! Hátralévõ idõ: %dmp (Jármûvek %s)",JatekosNev(playerid), ServerInfo[sCarResi][0], (extra ? ("javulnak") : ("nem javulnak")));
				return true;
			}
		}
		car = strval(param);
		if(car < 1 || car > MAX_VEHICLES || !IsVehicleConnected(car))
			return SCM(playerid, COL_LRED, "Ez a Jármû ID nincs spawnolva!");
	}
	new vid = JarmuID(car, playerid ), Float:HP;
	GetVehicleHealth(car, HP);
	if(HP < 350) HP = 350.0;

	if(vInfo[vid][vMunka] < 20)
		GetVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);

	SetVehicleToRespawn(vInfo[vid][vID]);
	if(vInfo[vid][vMunka] < 20)
	{
		SetVehicleHealth(vInfo[vid][vID], HP);
		vInfo[vid][vElet] = HP;
		vehicleh[vInfo[vid][vID]] = HP;
		UpdateVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
	} else {
		vInfo[vid][vElet] = 1000.0;
		vehicleh[vInfo[vid][vID]] = 1000.0;
	}
	SendFormatMessage(playerid, COLOR_GREEN, "Respawnoltál egy %s típusú jármûvet! Tulaj: %s | JármûID: %d[%d]", VehicleNames[GetVehicleModel(car) - 400], JarmuTulaj(vid), car, vid);
	return true;
}

CMD:flymode(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1)&& !PlayerInfo[playerid][pMapper])
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(IsPlayerInAnyVehicle(playerid))	return SCM(playerid, COL_LRED, "Jármûben nem használhatod!");
	if(PlayerInfo[playerid][pTV][0] != NINCS)	return SCM(playerid, COL_LRED, "Megfigyelés közben nem használhatod!");
	if(Bortonben(playerid))	return SCM(playerid, COL_LRED, "Börtönben nem használhatod!");
    if(GetPVarType(playerid, "FlyMode"))
    {
		GetPlayerPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz]);
		PlayerInfo[playerid][pinterior] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pvirtualworld] = GetPlayerVirtualWorld(playerid);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pangle]);

        CancelFlyMode(playerid);
		if(!Admin(playerid, FOADMIN_SZINT))
			AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s kilépett a FlyModeból!", JatekosNev(playerid));

        SCM(playerid, COL_MKEK, "Teleportálva FlyMode-ból!");

	} else {

		if(!Admin(playerid, FOADMIN_SZINT))
			AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s FlyModeba lépett!", JatekosNev(playerid));

        SCM(playerid, COL_MKEK, "Flymodeba léptél! Ahol kilépsz belõle oda fogsz teleportálni.");
		GetPlayerPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz]);
	    FlyMode(playerid);
	}
	return true;
}

CMD:tele(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new
	    i = -1,
		listitemid = 0,
		teleport[128],
		teleportok[2048];

	for(;++i < MAX_TELEPORT;)
	{
	    if(TPInfo[i][tphasznalva])
	    {
	        TPInfo[i][listid] = listitemid;
	        if(PlayerInfo[playerid][padmin] >= FOADMIN_SZINT)
	        	format(teleport, sizeof(teleport), "[%d] %s\n",i, TPInfo[i][tpnev]);
			else
			    format(teleport, sizeof(teleport), "%s\n", TPInfo[i][tpnev]);

	        strins(teleportok, teleport, strlen(teleportok));
	        listitemid++;
	    }
	}
	ShowPlayerDialog(playerid, DIALOG_TELEPORTOK, DIALOG_STYLE_LIST, "Teleportok", teleportok, "Tele", "Mégse");
	return true;
}

CMD:telecsin(playerid, params[])
{
    if(!IsLewis(playerid) && !Admin(playerid,SCRIPTER_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new teleportnev[32];
	if(sscanf(params, "s[32]", teleportnev))
		return SCM(playerid, COL_MKEK, "Használat: /telecsin [Teleport neve]");

	new
	    t = -1,
	    teleportid = UjTeleportID();

	for(;++t < MAX_TELEPORT;)
    {
        if(TPInfo[t][tphasznalva])
        {
            if(!strcmp(teleportnev, TPInfo[t][tpnev], true))
            {
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Már van ilyen név!");
            }
        }
    }

	if(teleportid > 0)
	{
		new Float:tppos[4], pint = GetPlayerInterior(playerid), pvw = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, tppos[0], tppos[1], tppos[2]);
		GetPlayerFacingAngle(playerid, tppos[3]);

		TPInfo[teleportid][tposx] = tppos[0];
		TPInfo[teleportid][tposy] = tppos[1];
		TPInfo[teleportid][tposz] = tppos[2];
		TPInfo[teleportid][tangle] = tppos[3];
		TPInfo[teleportid][tinterior] = pint;
		TPInfo[teleportid][tvw] = pvw;
		TPInfo[teleportid][tphasznalva] = true;
		format(TPInfo[teleportid][tpnev], 32, teleportnev);

		doQuery("INSERT INTO `"#MYSQL_TELEPORT_TABLA"` (id, tposx, tposy, tposz, tangle, tpnev, tinterior, tvw) VALUES ('%d', '%f', '%f', '%f', '%f', '%s', '%d', '%d')", teleportid, tppos[0], tppos[1], tppos[2], tppos[3], teleportnev, pint, pvw);

		AdminUzenet(COLOR_LIGHTRED,PlayerInfo[playerid][padmin], "%s hozzáadott egy új teleportot a listához, Neve: %s", JatekosNev(playerid), TPInfo[teleportid][tpnev]);
		SendFormatMessage(playerid, COLOR_GREEN, "Teleport sikeresen létrehozva! Interior: %d | VirtualWorld: %d", pint, pvw);
		return true;
	} else
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Elértük a teleport limitet!");
}

CMD:teletorol(playerid, params[])
{
    if(!IsLewis(playerid) && !Admin(playerid,SCRIPTER_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

 	new t = NINCS;
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /teletorol [Teleport neve vagy ID-je]");

	if(IsNumeric(params)) t = strval(params);
	else t = TeleNameToID(params);

	if(t == NINCS || !TPInfo[t][tphasznalva])
    	return SendClientMessage(playerid,COLOR_LIGHTRED,"Hiba történt! Nincs ilyen teleport létrehozva!");

    TPInfo[t][tposx] = 0.0;
	TPInfo[t][tposy] = 0.0;
	TPInfo[t][tposz] = 0.0;
	TPInfo[t][tangle] = 0.0;
	TPInfo[t][listid] = 0;
	TPInfo[t][tinterior] = 0;
	TPInfo[t][tvw] = 0;

	doQuery("DELETE FROM `"#MYSQL_TELEPORT_TABLA"` WHERE tpnev = '%s'", TPInfo[t][tpnev]);

	AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s törölt egy teleportot a listából! Neve: %s", JatekosNev(playerid), TPInfo[t][tpnev]);
	SendClientMessage(playerid,COLOR_GREEN,"Teleport sikeresen törölve!");
	TPInfo[t][tpnev] = EOS;
	TPInfo[t][tphasznalva] = false;
	return true;
}

CMD:flip(playerid, params[])//ah-ban
{
	#pragma unused params
    if(!Admin(playerid, 2))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
 	if(!IsPlayerInAnyVehicle(playerid))
	    return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");

	new currentveh;
	new Float:angle;
	currentveh = GetPlayerVehicleID(playerid);
	GetVehicleZAngle(currentveh, angle);
	SetVehicleZAngle(currentveh, angle);
	SCM(playerid, COL_VZOLD, "Jármûved felállítva!");
	return true;
}

CMD:vr(playerid, params[])//ah-ban
{
	#pragma unused params
	if(!Admin(playerid, 5))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(!isnull(params) && !strcmp(params, "all", true))
	{
		if(!Admin(playerid, AC_SZINT))	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		foreach(Jarmuvek, id)
		{
			new vid = JarmuID(id, playerid);
			vehicleh[ id ] = 1000.0;
			RepairVehicle( id );

			vInfo[vid][vElet] = 1000.0;
			vUpdate(vid, vuElet);
		}
		AdminUzenet(COLOR_LIGHTRED, 1, "%s megjavította az összes jármûvet!", JatekosNev(playerid));

	} else {
		new car = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, car) > 5.0 && !IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

		SetHealth(playerid,MAX_HP);
		SCM(playerid, COL_VZOLD, "Sikeresen megjavítottad a jármûvet!");

		new
			v_id = 0,
			vid = JarmuID(v_id, playerid);

		if(IsPlayerInAnyVehicle(playerid))
		{
			v_id = GetPlayerVehicleID(playerid);
		}
		else
		{
			v_id = car;
		}
		vInfo[vid][vElet] = 1000.0;
		vehicleh[ v_id ] = 1000.0;
		RepairVehicle( v_id );
		vUpdate(vid, vuElet);
	}
	return true;
}

CMD:ujhaz(playerid, params[])
{
    new price, belso, tipus;
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "ddd", belso, price, tipus))
		return SCM(playerid, COL_MKEK, "Használat: /ujhaz [Interior(0-18)] [Ár] [Típus] | 1 = Lakás, 2 = GN, 3 = LS, 4 = Gettó, 5 = Falu");

	if(tipus > 5 || tipus < 1)
			return SCM(playerid, COL_LRED, "Hibás típus! 1 = Lakás, 2 = GN, 3 = LS, 4 = Gettó, 5 = Falu");

	if(belso > 18 || belso < 0)
		return SCM(playerid, COL_LRED, "Hibás interior! 0 és 18 között lehet!");

	if(price < MIN_HAZ_AR || price > MAX_ERTEK)
		return SFM(playerid, COL_LRED, "Helytelen érték! Az ára minimum %s és maximum %s dollár lehet!", FN(MIN_HAZ_AR, 0, ','), FN(MAX_ERTEK, 0, ','));

	new houseid = GetNewHouseID();
	if(houseid == NINCS)
		return SCM(playerid, COL_LRED, "Nem lehetett létrehozni több házat, mert a házak száma elérte a limitet! ("#MAX_HOUSE" db)");

	new Float:pos[3];
	GetPlayerPos(playerid, PosExt(pos));
	format(uzenet, sizeof(uzenet), "Házszám: ~g~%d.~n~~w~Ár: ~g~%d.~n~~w~Tulaj: ~g~Senki.", houseid, price);

	HazInfo[houseid][hasznalatban] = true;
	HazInfo[houseid][butorsz] = 25;
	HazInfo[houseid][hazar] = price;
	HazInfo[houseid][hTulajID] = NINCS;
	HazInfo[houseid][posx] = pos[0];
	HazInfo[houseid][posy] = pos[1];
	HazInfo[houseid][posz] = pos[2];
	HazInfo[houseid][hTipus] = tipus;

	SpawnHouse(houseid, uzenet, HAZ_MEGVEHETO_MODEL);
	BelsoPickup(houseid, belso);
	UjUltetveny( houseid );

	nformat(querycs, 1024, "INSERT INTO `"#MYSQL_HAZ_TABLA"` (id, tulaj, TulajID, poziciox, pozicioy, pozicioz, interior, ar, hTipus) VALUES ('%d', 'Nincs_Tulaj', '-1', '%f', '%f', '%f', '%d', '%d', '%d')", houseid, HazInfo[houseid][posx], HazInfo[houseid][posy], HazInfo[houseid][posz], belso, price, tipus);
	mysql_tquery(sql_ID, querycs, "", "");

	SFM(playerid, COL_VZOLD, "Ház létrehozva! ID: %d. Ár: %s$ Interior: %d.", houseid, FN(price, 0, ','), belso);
	Streamer_Update(playerid);
	return true;
}

CMD:ban(playerid, params[])//ah-ban
{
	if(FloodEllenorzes(playerid)) return 1;
    new player, ido, oka[32];
	if(!Admin(playerid, 2))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "uds[32]", player, ido, oka))
	    return SCM(playerid, COL_MKEK, "Használat: /ban [Játékos] [Idõ(óra) | 0 = örök] [Oka]");

	if(player == INVALID_PLAYER_ID|| !IsPlayerConnected(player))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(IsPlayerNPC(player))
	    return SCM(playerid, COL_LRED, "NPC-t ne banold!");

    if((player == playerid) && !IsScripter(playerid))
	    return SCM(playerid, COL_LRED, "Cicaborsó magadat nem fogod banolni!");

	if(strlen(oka) > 50 || strlen(oka) < 3)
	    return SCM(playerid, COL_LRED, "Minimum 3 és maximum 51 karakter lehet!");

 	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin])
    {
    	SendClientMessage(playerid, COLOR_WHITE, "Nagyobb Admint nem banolhatsz! Mégis mit képzelsz?");
    	SendFormatMessage(player, COLOR_WHITE, "%s banolni akart téged!", JatekosNev(playerid));
    	AdminUzenet(COLOR_LIGHTRED, 1001, "[Admin]!! [%s]%s bannolni akarta [%s]%st! !!", playerid, JatekosNev(playerid), player, JatekosNev(player));
    	return true;

	}

	//new uIdo = 0;
	//if(ido) uIdo = (gettime() + (60 * 60 * ido));
	new date[3],time[3];
	getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Ban')", JatekosNev(playerid), PosExt(date), time[0], time[1]);

    ServerBan(player, ido, oka, playerid, false, true, true);
 	return true;
}

CMD:ipban(playerid, params[])//ah-ban
{

    new player, ido, oka[32];
	if(!Admin(playerid, 2))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "uds[32]", player, ido, oka))
	    return SCM(playerid, COL_MKEK, "Használat: /ipban [Játékos] [Idõ(óra) | 0 = örök] [Oka]");

	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || IsPlayerNPC(player))
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "Nincs ilyen játékos!");

    if((player == playerid) && !IsScripter(playerid))
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "Cicaborsó magadat nem fogod banolni!");

	if(strlen(oka) > 50 || strlen(oka) < 3)
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "Minimum 3 és maximum 51 karakter lehet!");

 	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
    {
    	SendClientMessage(playerid, COLOR_WHITE, "Nagyobb Admint nem banolhatsz! Mégis mit képzelsz?");
    	SendFormatMessage(player, COLOR_WHITE, "%s banolni akart téged!", JatekosNev(playerid));
    	return true;

	}

	new uIdo = 0;
	if(ido) uIdo = gettime() + (60*60*ido);

	AdminUzenet(COLOR_LIGHTRED, 1, "%s IP-re tiltotta %st %s Oka: %s", JatekosNev(playerid), JatekosNev(player), BanIdo(ido, true), oka);
	//ServerBan(kit, ido = 0, oka[], tilto = NINCS, bool:ipban = false, bool:kick = true, bool:szoveg = false)
    ServerBan(player, uIdo, oka, playerid, true, true, false);
 	return true;
}

CMD:object(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new param[24];
	if(sscanf(params, "s[24]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /object [ Lerak / Szerkeszt / Töröl / Közel / Go ]");

	if(!strcmp(param, "lerak"))
	{
		new parame[24];
		if(sscanf(params, "{s[24]}s[10]", parame))
			return SCM(playerid, COL_MKEK, "Használat: /object lerak [ ATM / HotDog / Kuka ]");

		new aid = UjAutomataID(), oid, tipus;
		if(!aid)
			return SCM(playerid, COL_LRED, "Nem tudsz több autómatát lerakni!");

		//Hotdog: 1340, | Italautomata: 1775 | Csokiautomata: 1776 | Szerencsegép: 2754 | Telefon: 1216
		if(!strcmp(parame, "atm", true))
		{
			tipus = 1;
			oid = 2942;//atm object
			AutomataInfo[aid][autipus] = 1;
		}
		else if(!strcmp(parame, "hotdog", true))
		{
			tipus = 2;
			oid = 1340;//hotdog object
			AutomataInfo[aid][autipus] = 2;
		}
		else if(!strcmp(parame, "kuka", true))
		{
			tipus = 3;
			oid = 1227;//zöld kuka object
			AutomataInfo[aid][autipus] = 3;
		}
		else if(!oid) return true;

		new Float:pos[3], vw = GetPlayerVirtualWorld(playerid), int = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, PosExt(pos));

		AutomataInfo[aid][aupos][0] = pos[0];
		AutomataInfo[aid][aupos][1] = pos[1];
		AutomataInfo[aid][aupos][2] = pos[2];
		AutomataInfo[aid][auVW] = vw;
		AutomataInfo[aid][auInt] = int;
		AutomataInfo[aid][aupenz] = (tipus == 1 ? 100000 : 0);
		AutomataInfo[aid][auhasznalva] = true;

		if(!fexist(LSQL_ADATBAZIS))
		{
			print("Szerver: Kritikus hiba történt a cmd_object funkcióban! Oka: Hiányzó adatbázis!");
			SCM(playerid, COL_LRED, "Kritikus adatbázis hiba történt!");
			return true;
		}

		nformat(qry, 1024, "INSERT INTO `"#LSQL_AUTOMATA_TABLA"` (id, autipus, aupenz, auposx, auposy, auposz, aurotx, auroty, aurotz, vw, int) VALUES ('%d', '%d', '%d', '%f', '%f', '%f', '0.0', '0.0', '0.0', '%d', '%d')", aid, tipus, (tipus == 1 ? 5000000 : 0), PosExt(pos), vw, int);

		new DB:db = db_open(LSQL_ADATBAZIS);
		db_free_result(db_query(db, qry));
		db_close(db);

		AutomataID[playerid] = aid;
		//CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 200.0);
		AutomataInfo[aid][auobject] = CreateDynamicObject(oid, pos[0], pos[1] + 1.0, pos[2] - 0.4, 0.0, 0.0, 0.0, vw, int);
		Streamer_Update(playerid);
		EditDynamicObject(playerid, AutomataInfo[aid][auobject]);

		SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
		SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");

		return true;
	}
	else if(!strcmp(param, "szerkeszt", true))
	{
		new parame[32];

		if(sscanf(params, "{s[24]}s[10]", parame))
		{
			SCM(playerid, COL_MKEK, "Használat: /object szerkeszt [paraméterek]");
			SCM(playerid, COL_MKEK, "Paraméterek: pozicio, tipus");
			return true;
		}

		new automata = KozeliObject( playerid );
		if(automata == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egy automata se!");

		if(!strcmp(parame, "pozicio") || !strcmp(parame, "pozíció"))
		{
			SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
			SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");

			EditDynamicObject(playerid, AutomataInfo[automata][auobject]);
			AutomataInfo[automata][auszerkeszti] = true;
			AutomataID[playerid] = automata;
			return true;
		}
		else if(!strcmp(parame, "tipus") || !strcmp(parame, "típus"))
		{
			new tipusid;

			if(sscanf(params, "{s[24]s[10]}d", tipusid))
				return SendClientMessage(playerid, COLOR_WHITE, "Használat: /object szerkeszt tipus [1-4]");
			if(tipusid < 1 || tipusid > 4)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "A típusnak 1 és 4 között kell lennie!");
			AutomataInfo[automata][autipus] = tipusid;
			SendFormatMessage(playerid, COLOR_WHITE, "Automata típusa sikeresen beállítva %d-ra/re!", tipusid);
			DestroyDynamicObject(AutomataInfo[automata][auobject]);
			AutomataInfo[automata][auobject] = CreateDynamicObject(AutomataModel(tipusid), AutomataInfo[automata][aupos][0], AutomataInfo[automata][aupos][1], AutomataInfo[automata][aupos][2] - 0.4, AutomataInfo[automata][aupos][3], AutomataInfo[automata][aupos][4], AutomataInfo[automata][aupos][5]);

			//SendClientMessage(playerid, COLOR_WHITE, "Lehetõséged adódik, hogy változtass az automata pozícióján! Amennyiben tökéletesnek találod, csak kattints a Mentés (Floppy) gombra!");
			//EditDynamicObject(playerid, AutomataInfo[automata][auobject]);
			return true;
		}
		return true;
	}
	else if(!strcmp(param, "töröl", true) || !strcmp(param, "torol", true))
	{
		new id = KozeliObject( playerid );
		if(id == NINCS || GetDistanceToAutomata(playerid, id) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben szerkeszthetõ automata!");

		if(!fexist(LSQL_ADATBAZIS))
		{
			print("Szerver: Kritikus hiba történt a cmd_object funkcióban! Oka: Hiányzó adatbázis!");
			SCM(playerid, COL_LRED, "Kritikus adatbázis hiba történt!");
			return true;
		}

		if(AutomataInfo[id][autipus] == 2 && IsValidDynamic3DTextLabel(AutomataInfo[id][autext]))
			DestroyDynamic3DTextLabel(AutomataInfo[id][autext]);

		DestroyDynamicObject(AutomataInfo[id][auobject]);
		AutomataInfo[id][auszerkeszti] = false;
		AutomataInfo[id][aupenz] = 0;
		AutomataInfo[id][aupos] = Float:{0.0, 0.0, 0.0, 0.0, 0.0, 0.0};

		nformat(query, 256, "DELETE FROM `"#LSQL_AUTOMATA_TABLA"` WHERE id = '%d'", id);
		new DB:oDB = db_open(LSQL_ADATBAZIS);
		db_free_result(db_query(oDB, query));
		db_close(oDB);

		SFM(playerid, COL_VZOLD, "Sikeresen töröltél egy automatát! Id: %d", id);
		return true;
	}
	if(!strcmp(param, "go"))
	{
		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /object go [AutomataID]");

		if(id < 0 || id > MAX_AUTOMATA || !AutomataInfo[id][auhasznalva])
			return SCM(playerid, COL_LRED, "Nincs ilyen automata létrehozva!");

		SetPos(playerid, AutomataInfo[id][aupos][0], (AutomataInfo[id][aupos][0] + 2), AutomataInfo[id][aupos][0]);
		SetVirtualWorld(playerid, AutomataInfo[id][auVW]);
		SetInterior(playerid, AutomataInfo[id][auInt]);
		SFM(playerid, COL_VZOLD, "Sikeresen elteleportálál az Automatára! ID: %d", id);
	}
	return true;
}

CMD:ajto(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new
	    parameterek[64],
		formazas[54 + 1];

	if(sscanf(params, "s[64]{}", parameterek))
	{
	    SCM(playerid, COL_MKEK, "Használat: /ajtó [paraméterek]");
		SCM(playerid, COL_MKEK, "[Paraméterek]: új, töröl, goto, info, zár");
		return true;
	} else {
		if(!strcmp(parameterek, "új", true) || !strcmp(parameterek, "uj", true))
		{
		    new bevagyki[4], ajnev[32], freeze, jarmu;
		    if(sscanf(params, "{s[64]}s[4]{}", bevagyki))
		        return SCM(playerid, COL_MKEK, "Használat: /ajtó új [be/ki] [név]");

			new Float:jpos[4];
			GetPlayerPos(playerid, jpos[0], jpos[1], jpos[2]);
			GetPlayerFacingAngle(playerid, jpos[3]);

		    if(!strcmp(bevagyki, "be", true))
		    {
				if(sscanf(params, "{s[64]s[4]}s[32]dd", ajnev, freeze, jarmu))
					return SCM(playerid, COL_MKEK, "Használat: /ajtó új be [Név vagy ID] [Freeze idõ (ms)] [jármû(0/1)]");

				if((strlen(ajnev) > 12) || (strlen(ajnev) < 1))
					return SCM(playerid, COL_LRED, "Az ajtónak 1 és 12 karakter között kell lennie!");


				new bool:van, ajtoid = AjtoKereses(ajnev);
				if(ajtoid != NINCS) van = true;
				else
				{
					if(!IsNumeric(ajnev))
						ajtoid = UjAjtoID();
					else
					{
						ajtoid = strval(ajnev);
						if(ajtoid != NINCS && ajtoid < MAX_AJTO && AjtoInfo[ajtoid][ahasznalva])
							van = true;
					}
				}

				if(ajtoid < 0 || ajtoid >= MAX_AJTO)
					return SCM(playerid, COL_LRED, "Nem lehetett lerakni az ajtót, mert a maximális ("#MAX_AJTO") limitet elérte vagy hibás ID-t adtál meg!");

				if(PlayerInfo[playerid][pMegerosites] != playerid && van) {

					PlayerInfo[playerid][pMegerosites] = playerid;
					SCM(playerid, COL_LRED, "Ez az ajtónév már létezik. Biztos, hogy át szeretnéd helyezni? Ha igen írd be megint!");
					return true;

				} else {

					PlayerInfo[playerid][pMegerosites] = NINCS;

					if(!van)
						format(AjtoInfo[ajtoid][anev], 32, "%s", ajnev);

					AjtoInfo[ajtoid][abepos][0] = jpos[0];
					AjtoInfo[ajtoid][abepos][1] = jpos[1];
					AjtoInfo[ajtoid][abepos][2] = jpos[2];
					AjtoInfo[ajtoid][abepos][3] = jpos[3];

					AjtoInfo[ajtoid][afreeze] = freeze;
					AjtoInfo[ajtoid][anyitva] = true;
					AjtoInfo[ajtoid][ajarmu] = jarmu ? true : false;
					AjtoInfo[ajtoid][abeinterior] = GetPlayerInterior(playerid);
					AjtoInfo[ajtoid][abevw] = GetPlayerVirtualWorld(playerid);
					AjtoInfo[ajtoid][ahasznalva] = true;

					format(formazas, sizeof(formazas), #COL_NARANCS"[Bejárat]\n"#COL_SKEK"%s", AjtoInfo[ajtoid][anev]);
					if(!van) {

						AjtoInfo[ajtoid][abelabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, jpos[0], jpos[1], jpos[2]+0.75,20, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
						AjtoInfo[ajtoid][abepickup] = CreateDynamicPickup(1318, 23, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						if(AjtoInfo[ajtoid][ajarmu])
							AjtoInfo[ajtoid][abepickupk] = CreateDynamicPickup(1007, 14, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

					} else {

						DestroyDynamic3DTextLabel(AjtoInfo[ajtoid][abelabel]);
						AjtoInfo[ajtoid][abelabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, jpos[0], jpos[1], jpos[2]+0.75,20, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));

						DestroyDynamicPickup(AjtoInfo[ajtoid][abepickup]);
						AjtoInfo[ajtoid][abepickup] = CreateDynamicPickup(1318, 23, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

						if(AjtoInfo[ajtoid][ajarmu]) {
							DestroyDynamicPickup(AjtoInfo[ajtoid][abepickupk]);
							AjtoInfo[ajtoid][abepickupk] = CreateDynamicPickup(1007, 14, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						}
					}

					new query[1024];
					if(!van)
					{
						format(query, sizeof(query), "INSERT INTO `"#MYSQL_AJTO_TABLA"` (id, anev, abeposx, abeposy, abeposz, abeangle, afreeze, ajarmu, abeinterior, abevw) VALUES ('%d', '%s', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d')", ajtoid, AjtoInfo[ajtoid][anev], jpos[0], jpos[1], jpos[2], jpos[3], freeze, jarmu, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
						mysql_tquery(sql_ID, query, "", "");
						AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s hozzáadott egy új bejáratot a listához, Neve: %s", JatekosNev(playerid), AjtoInfo[ajtoid][anev]);
					} else {
						format(query, sizeof(query), "UPDATE `"#MYSQL_AJTO_TABLA"` SET");
						format(query, sizeof(query), "%s abeposx = '%f',", query, jpos[0]);
						format(query, sizeof(query), "%s abeposy = '%f',", query, jpos[1]);
						format(query, sizeof(query), "%s abeposz = '%f',", query, jpos[2]);
						format(query, sizeof(query), "%s abeangle = '%f',", query, jpos[3]);
						format(query, sizeof(query), "%s afreeze = '%d',", query, freeze);
						format(query, sizeof(query), "%s ajarmu = '%d',", query, jarmu);
						format(query, sizeof(query), "%s abeinterior = '%d',", query, GetPlayerInterior(playerid));
						format(query, sizeof(query), "%s abevw = '%d'", query, GetPlayerVirtualWorld(playerid));
						format(query, sizeof(query), "%s WHERE id = '%d'", query, ajtoid);
						mysql_tquery(sql_ID, query, "", "");
						AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s áthelyezett egy bejáratot! Neve: %s", JatekosNev(playerid), AjtoInfo[ajtoid][anev]);
					}
					SendFormatMessage(playerid, COLOR_GREEN, "Ajtó sikeresen létrehozva! Int: %d | VW: %d | Freeze: %d | Jármû: %d | [%d]%s", GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), freeze, jarmu, ajtoid, AjtoInfo[ajtoid][anev]);

					return true;
				}
		    }
			else if(!strcmp(bevagyki, "ki", true))
		    {
				if(sscanf(params, "{s[64]s[4]}s[32]", ajnev))
					return SCM(playerid, COL_MKEK, "Használat: /ajtó új ki [Név vagy ID]");

				if(!IsNumeric(ajnev) && (strlen(ajnev) > 12) || (strlen(ajnev) < 1))
					return SCM(playerid, COL_LRED, "Az ajtónak 1 és 12 karakter között kell lennie!");

				new ajtoid2, bool:van;
				if(!IsNumeric(ajnev)) ajtoid2 = AjtoKereses(ajnev);
				else ajtoid2 = strval(ajnev);

				if(ajtoid2 < 0 || ajtoid2 >= MAX_AJTO || !AjtoInfo[ajtoid2][ahasznalva])
					return SCM(playerid, COL_LRED, "Elõször rakj le egy bejáratot!");

				if(AjtoInfo[ajtoid2][akipos][0] != 0.0)
					van = true;

				if(PlayerInfo[playerid][pMegerosites] != playerid && van)
				{
					PlayerInfo[playerid][pMegerosites] = playerid;
					SCM(playerid, COL_LRED, "Ez az ajtónév már létezik. Biztos, hogy át szeretnéd helyezni? Ha igen írd be megint!");
					return true;

				} else {

					PlayerInfo[playerid][pMegerosites] = NINCS;
					format(AjtoInfo[ajtoid2][anev], 32, ajnev);

					AjtoInfo[ajtoid2][akipos][0] = jpos[0];
					AjtoInfo[ajtoid2][akipos][1] = jpos[1];
					AjtoInfo[ajtoid2][akipos][2] = jpos[2];
					AjtoInfo[ajtoid2][akipos][3] = jpos[3];

					AjtoInfo[ajtoid2][akiinterior] = GetPlayerInterior(playerid);
					AjtoInfo[ajtoid2][akivw] = GetPlayerVirtualWorld(playerid);
					AjtoInfo[ajtoid2][anyitva] = true;

					format(formazas, sizeof(formazas), #COL_NARANCS"[Kijárat]\n"#COL_SKEK"%s", AjtoInfo[ajtoid2][anev]);

					if(!van) {

						AjtoInfo[ajtoid2][akilabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, jpos[0], jpos[1], jpos[2]+0.75,20, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
						AjtoInfo[ajtoid2][akipickup] = CreateDynamicPickup(1318, 23, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						if(AjtoInfo[ajtoid2][ajarmu])
							AjtoInfo[ajtoid2][akipickupk] = CreateDynamicPickup(1007, 14, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

					} else {

						DestroyDynamic3DTextLabel(AjtoInfo[ajtoid2][akilabel]);
						AjtoInfo[ajtoid2][akilabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, jpos[0], jpos[1], jpos[2]+0.75,20, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));

						DestroyDynamicPickup(AjtoInfo[ajtoid2][akipickup]);
						AjtoInfo[ajtoid2][akipickup] = CreateDynamicPickup(1318, 23, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

						if(AjtoInfo[ajtoid2][ajarmu])
						{
							DestroyDynamicPickup(AjtoInfo[ajtoid2][akipickupk]);
							AjtoInfo[ajtoid2][akipickupk] = CreateDynamicPickup(1007, 14, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						}
					}

					new query[512];
					format(query, sizeof(query), "UPDATE `"#MYSQL_AJTO_TABLA"` SET");
					format(query, sizeof(query), "%s akiposx = '%f',", query, jpos[0]);
					format(query, sizeof(query), "%s akiposy = '%f',", query, jpos[1]);
					format(query, sizeof(query), "%s akiposz = '%f',", query, jpos[2]);
					format(query, sizeof(query), "%s akiangle = '%f',", query, jpos[3]);
					format(query, sizeof(query), "%s akiinterior = '%d',", query, GetPlayerInterior(playerid));
					format(query, sizeof(query), "%s akivw = '%d'", query, GetPlayerVirtualWorld(playerid));
					format(query, sizeof(query), "%s WHERE id = '%d'", query, ajtoid2);
                    mysql_tquery(sql_ID, query, "", "");

					if(!van) AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s hozzáadott egy új kijáratot a listához, Neve: %s", JatekosNev(playerid), AjtoInfo[ajtoid2][anev]);
					else AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s áthelyezett egy kijáratot! Neve: %s", JatekosNev(playerid), AjtoInfo[ajtoid2][anev]);

					SendFormatMessage(playerid, COLOR_GREEN, "Ajtó sikeresen létrehozva! Int: %d | VW: %d | [%d]%s", GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), ajtoid2, AjtoInfo[ajtoid2][anev]);
				}

				return true;
		    }
			return true;
		} else if(!strcmp(parameterek, "töröl", true))
		{
			new ajtonev[32], ajtoidje;

			if(sscanf(params, "{s[64]}s[32]", ajtonev))
				return SCM(playerid, COL_MKEK, "Használat: /ajtó töröl [Név vagy ID]");

			if(!IsNumeric(ajtonev)) ajtoidje = AjtoKereses(ajtonev);
			else ajtoidje = strval(ajtonev);

			if(ajtoidje < MAX_AJTO && ajtoidje > NINCS)
			{
				AjtoInfo[ajtoidje][anev] = EOS;
				AjtoInfo[ajtoidje][abepos][0] = 0.0;
				AjtoInfo[ajtoidje][abepos][1] = 0.0;
				AjtoInfo[ajtoidje][abepos][2] = 0.0;
				AjtoInfo[ajtoidje][abepos][3] = 0.0;
				AjtoInfo[ajtoidje][akipos][0] = 0.0;
				AjtoInfo[ajtoidje][akipos][1] = 0.0;
				AjtoInfo[ajtoidje][akipos][2] = 0.0;
				AjtoInfo[ajtoidje][akipos][3] = 0.0;
				AjtoInfo[ajtoidje][afreeze] = 0;
				AjtoInfo[ajtoidje][anyitva] = false;
				AjtoInfo[ajtoidje][ajarmu] = false;
				AjtoInfo[ajtoidje][abeinterior] = 0;
				AjtoInfo[ajtoidje][akiinterior] = 0;
				AjtoInfo[ajtoidje][abevw] = 0;
				AjtoInfo[ajtoidje][akivw] = 0;
				AjtoInfo[ajtoidje][ahasznalva] = false;
				DestroyDynamic3DTextLabel(AjtoInfo[ajtoidje][abelabel]);
				DestroyDynamic3DTextLabel(AjtoInfo[ajtoidje][akilabel]);
				DestroyDynamicPickup(AjtoInfo[ajtoidje][abepickup]);
				DestroyDynamicPickup(AjtoInfo[ajtoidje][akipickup]);

				nformat(queryn, 128, "DELETE FROM `"#MYSQL_AJTO_TABLA"` WHERE anev = '%s'", ajtonev);
                mysql_tquery(sql_ID, queryn, "", "");
				AdminUzenet(COLOR_LIGHTRED,1, "%s törölt egy ajtót a listából! Neve: %s", JatekosNev(playerid), ajtonev);
				SCM(playerid, COL_MKEK, "Ajtó sikeresen törölve!");
				return true;
			}
			SCM(playerid, COL_LRED, "Nincs ilyen ajtó létrehozva!");
		} else if(!strcmp(parameterek, "zár", true))
		{
			new kozeliajto = KozeliAjto(playerid), qajuery[128];
			if(kozeliajto > 0)
			{
				if(AjtoInfo[kozeliajto][anyitva])
				{
					format(qajuery, sizeof(qajuery), "UPDATE `"#MYSQL_AJTO_TABLA"` SET anyitva = '0' WHERE id = '%d'", kozeliajto);
					mysql_tquery(sql_ID, qajuery, "", "");
					AjtoInfo[kozeliajto][anyitva] = false;
					SFM(playerid, COL_MKEK, "Ajtó bezárva! Név: %s", AjtoInfo[kozeliajto][anev]);
				} else {
					format(qajuery, sizeof(qajuery), "UPDATE `"#MYSQL_AJTO_TABLA"` SET anyitva = '1' WHERE id = '%d'", kozeliajto);
					mysql_tquery(sql_ID, qajuery, "", "");
					AjtoInfo[kozeliajto][anyitva] = true;
					SFM(playerid, COL_MKEK, "Ajtó kinyitva! Név: %s", AjtoInfo[kozeliajto][anev]);
				}
				return true;
			}
		} else if(!strcmp(parameterek, "goto", true))
		{
			new bevagyki[4 + 1], ajnev[32 + 1];
			if(sscanf(params, "{s[64]}s[4]s[32]", bevagyki, ajnev))
				return SCM(playerid, COL_MKEK, "Használat: /ajtó goto [be/ki] [név]");

			new ajto;
			if(!IsNumeric(ajnev)) ajto = AjtoKereses(ajnev);
			else ajto = strval(ajnev);

			if(ajto > NINCS && ajto < MAX_AJTO)
			{
				if(!strcmp(bevagyki, "be", true))
				{
					AjtoTeleport(playerid, 1, ajto, true);
				} else if(!strcmp(bevagyki, "ki", true))
				{
					AjtoTeleport(playerid, 0, ajto, true);
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs ilyen ajtó!");
			return true;
		} else if(!strcmp(parameterek, "info", true))
		{
			new
				Float:jpos[3],
				kozeliajto = KozeliAjto(playerid),
				Float:tav;

			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
			if(kozeliajto > 0)
			{
				GetPlayerPos(playerid, jpos[0], jpos[1], jpos[2]);
				tav = GetDistance(jpos[0], jpos[1], jpos[2], AjtoInfo[kozeliajto][abepos][0], AjtoInfo[kozeliajto][abepos][1], AjtoInfo[kozeliajto][abepos][2]);

				SendClientMessage(playerid, COLOR_WHITE, "Legközelebbi bejárat adatai");
				format(uzenet, sizeof(uzenet), "Ajtó neve: %s | ID: %d | Távolság: %2.f", AjtoInfo[kozeliajto][anev], kozeliajto, tav);
				SendClientMessage(playerid, COLOR_WHITE, uzenet);
				format(uzenet, sizeof(uzenet), "Jármûvet teleportál: %d | Freeze: %d | Int: %d | VW: %d", AjtoInfo[kozeliajto][ajarmu], AjtoInfo[kozeliajto][afreeze], AjtoInfo[kozeliajto][abeinterior], AjtoInfo[kozeliajto][abevw]);
				SendClientMessage(playerid, COLOR_WHITE, uzenet);
			} else
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs a közelben ajtó!");
			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
		    return true;
		} else {
			SCM(playerid, COL_MKEK, "Használat: /ajtó [paraméterek]");
			SCM(playerid, COL_MKEK, "[Paraméterek]: új, töröl, goto, info, zár");
			return true;
		}
	}
	return true;
}
CMD:makeleader(playerid,params[])
{
	if(!Admin(playerid,AC_SZINT)) return true;
	new fkid, jatekos;
	if(sscanf(params,"ud",jatekos,fkid)) return SCM(playerid,COL_MKEK,"Használat: /makeleader [Játékos] [FrakcióID] | /fk lista");
	else if(jatekos == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	else if(fkid < 0 || fkid > MAX_FRAKCIO) return SCM(playerid,COL_LRED,"Hibás frakció.");
	else if(!FInfo[fkid][fVan] && fkid != 0) return SCM(playerid, COL_LRED, "Nincs ilyen frakció betöltve!");
	else if(fkid != 0)
	{
	    if((IsScripter(playerid) && playerid != jatekos) || !IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED,1, "%s kinevezte õt: %s a(z) [%d] %s frakció leaderévé!", JatekosNev(playerid), JatekosNev(jatekos), fkid, FInfo[fkid][fNev]);
        SendFormatMessage(jatekos, COLOR_MKEK, "%s kinevezett téged a %s frakció leaderévé!", JatekosNev(playerid), FInfo[fkid][fNev]);
        PlayerInfo[jatekos][pFrakcio] = fkid;
		PlayerInfo[jatekos][prang] = 1;
		PlayerInfo[jatekos][pLeader] = 1;
		new log[128];
		format(log,sizeof(log),"<< %s kinevezte %s-t leaderré, FK ID: %d",JatekosNev(playerid),JatekosNev(jatekos),fkid);
		AdminLogEx(log);
		
	} else {
	    if((IsScripter(playerid) && playerid != jatekos) || !IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED,1, "%s elvette %s leader jogát!", JatekosNev(playerid), JatekosNev(jatekos));
        SendFormatMessage(jatekos, COLOR_MKEK, "%s elvette a leader jogod!", JatekosNev(playerid));
        PlayerInfo[jatekos][pFrakcio] = 0;
		PlayerInfo[jatekos][prang] = 0;
		PlayerInfo[jatekos][pLeader] = 0;
	}
	return 1;
}

CMD:benzinkut(playerid, params[])
{
	new parameterek[24];

	if(!Admin(playerid, SZUPER_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "s[24]{}", parameterek))
	{
		hiba:
		SCM(playerid, COL_MKEK, "Használat: /benzinkut [paraméterek]");
		SCM(playerid, COL_MKEK, "Paraméterek: új, töröl, szerkeszt, goto, info");
		return true;
	}
	if(!strcmp(parameterek, "új", false) || !strcmp(parameterek, "uj", false))
	{
		new
			benzinkutid = UjBenzinkutID(),
			benzinkutnev[32],
			Float:radius;

		if(sscanf(params, "{s[24]}s[32]f", benzinkutnev, radius))
			return SCM(playerid, COL_MKEK, "Használat: /benzinkut [név] [rádiusz(kör)]");
		if(radius > 40 || radius < 5)
			return SCM(playerid, COL_LRED, "A rádiusznak "#COL_VKEK"5 "#COL_FEHER"és "#COL_VKEK"40 "#COL_FEHER"kell lennie!");

		if(benzinkutid > 0)
		{
			if(BenzinkutLetezik(benzinkutnev) > 0)
				return SCM(playerid, COL_LRED, "Már van ilyen nevû benzinkút!");

			new Float:playerposok[3];
			GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);

			format(BenzinkutInfo[benzinkutid][bnev], 32 + 1, benzinkutnev);
			BenzinkutInfo[benzinkutid][bposx] = playerposok[0];
			BenzinkutInfo[benzinkutid][bposy] = playerposok[1];
			BenzinkutInfo[benzinkutid][bposz] = playerposok[2];
			BenzinkutInfo[benzinkutid][bbenzinar] = 2;
			BenzinkutInfo[benzinkutid][bdieselar] = 2;
			BenzinkutInfo[benzinkutid][bbenzinmennyiseg] = 50000.0;
			BenzinkutInfo[benzinkutid][bdieselmennyiseg] = 50000.0;
			BenzinkutInfo[benzinkutid][bhasznalva] = true;
			BenzinkutInfo[benzinkutid][bradius] = radius;
			BenzinkutInfo[benzinkutid][blistitem] = -1;

			if(!fexist(LSQL_ADATBAZIS))
			{
				print("Szerver: Kritikus hiba történt a cmd_benzinkut funkcióban! Oka: Hiányzó adatbázis!");
				SCM(playerid, COL_LRED, "Kritikus adatbázis hiba történt!");
				return true;
			}

			doQuery("INSERT INTO `"#MYSQL_BENZINKUTAK_TABLA"` (id, bnev, bposx, bposy, bposz, bradius) VALUES ('%d', '%s', '%f', '%f', '%f', '%f')", benzinkutid, benzinkutnev, playerposok[0], playerposok[1], playerposok[2], radius);
			SendFormatMessage(playerid, COLOR_WHITE, "Benzinkút sikeresen létrehozva! Név: %s", benzinkutnev);
			return true;
		} else
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Elértük a maximális ("#MAX_BENZINKUT") limitet!");
	}
	else if(!strcmp(parameterek, "töröl", false) || !strcmp(parameterek, "torol", false))
	{
		new benzinkutnev[32];

		if(sscanf(params, "{s[24]}s[32]", benzinkutnev))
			return SCM(playerid, COL_MKEK, "Használat: /benzinkut töröl [név]");

		new benzinkutid = BenzinkutLetezik(benzinkutnev);
		if(!benzinkutid)
			return SendFormatMessage(playerid, COLOR_LIGHTRED, "'%s' nevû benzinkút nem létezik!", benzinkutnev);

		doQuery("DELETE FROM `"#MYSQL_BENZINKUTAK_TABLA"` WHERE id = '%d'", benzinkutid);

		BenzinkutInfo[benzinkutid][bnev][0] = EOS;
		BenzinkutInfo[benzinkutid][bposx] = 0.0;
		BenzinkutInfo[benzinkutid][bposy] = 0.0;
		BenzinkutInfo[benzinkutid][bposz] = 0.0;
		BenzinkutInfo[benzinkutid][bbenzinar] = 0;
		BenzinkutInfo[benzinkutid][bdieselar] = 0;
		BenzinkutInfo[benzinkutid][bbenzinmennyiseg] = 0.0;
		BenzinkutInfo[benzinkutid][bdieselmennyiseg] = 0.0;
		BenzinkutInfo[benzinkutid][bhasznalva] = false;
		BenzinkutInfo[benzinkutid][bradius] = 0.0;
		BenzinkutInfo[benzinkutid][blistitem] = -1;
		SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút sikeresen törölve!", benzinkutnev);
		return true;
	}
	else if(!strcmp(parameterek, "goto"))
	{
		new
			i = 0,
			listitemid = 0,
			benzinkut[128],
			benzinkutak[2048];

		for(;++i < MAX_BENZINKUT;)
		{
			if(BenzinkutInfo[i][bhasznalva])
			{
				BenzinkutInfo[i][blistitem] = listitemid;
				format(benzinkut, sizeof(benzinkut), "%s\n", BenzinkutInfo[i][bnev]);
				strins(benzinkutak, benzinkut, strlen(benzinkutak));
				listitemid++;
			}
		}

		ShowPlayerDialog(playerid, DIALOG_BENZINKUTAK, DIALOG_STYLE_LIST, "Benzinkutak", benzinkutak, "Mehet", "Mégse");
		return true;
	}
	else if(!strcmp(parameterek, "szerkeszt"))
	{
		new parameterek2[32];

		if(sscanf(params, "{s[24]}s[32]{}", parameterek2))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Használat: /benzinkut szerkeszt [paraméterek]");
			SendClientMessage(playerid, COLOR_WHITE, "Paraméterek: dieselár, bensinár, dieselmennyiség, benzinmennyiség");
			return true;
		}
		new benzinkut = GetClosestBenzinkut(playerid);

		if(GetDistanceToBenzinkut(playerid, benzinkut) < 5.0)
		{
			if(!strcmp(parameterek2, "dieselár") || !strcmp(parameterek2, "dieselar"))
			{
				new dieselar;

				if(sscanf(params, "{s[24]s[32]}d", dieselar))
					return SendClientMessage(playerid, COLOR_WHITE, "Kivéve");
				BenzinkutInfo[benzinkut][bdieselar] = 2;
				SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút diesel ára sikeresen beállítva "#COL_VKEK"%d"#COL_FEHER"-ra/-re!", BenzinkutInfo[benzinkut][bnev], dieselar);
				return true;
			}
			else if(!strcmp(parameterek2, "benzinár") || !strcmp(parameterek2, "benzinar"))
			{
				new benzinar;

				if(sscanf(params, "{s[24]s[32]}d", benzinar))
					return SendClientMessage(playerid, COLOR_WHITE, "Kivéve");
				BenzinkutInfo[benzinkut][bbenzinar] = 2;
				SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút benzin ára sikeresen beállítva "#COL_VKEK"%d"#COL_FEHER"-ra/-re!", BenzinkutInfo[benzinkut][bnev], benzinar);
				return true;
			}
			else if(!strcmp(parameterek2, "benzinmennyiség") || !strcmp(parameterek2, "benzinmennyiseg"))
			{
				new Float:mennyiseg;

				if(sscanf(params, "{s[24]s[32]}f", mennyiseg))
					return SendClientMessage(playerid, COLOR_WHITE, "Használat: /benzinkut szerkeszt benzinmennyiség [mennyiség]");
				BenzinkutInfo[benzinkut][bbenzinmennyiseg] = mennyiseg;
				SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút benzin tartálya sikeresen beállítva "#COL_VKEK"%.1f"#COL_FEHER"-ra/-re!", BenzinkutInfo[benzinkut][bnev], mennyiseg);
				return true;
			}
			else if(!strcmp(parameterek2, "dieselmennyiség") || !strcmp(parameterek2, "dieselmennyiseg"))
			{
				new Float:mennyiseg;

				if(sscanf(params, "{s[24]s[32]}f", mennyiseg))
					return SendClientMessage(playerid, COLOR_WHITE, "Használat: /benzinkut szerkeszt dieselmennyiség [mennyiség]");

				BenzinkutInfo[benzinkut][bdieselmennyiseg] = mennyiseg;
				SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút diesel tartálya sikeresen beállítva "#COL_VKEK"%.1f"#COL_FEHER"-ra/-re!", BenzinkutInfo[benzinkut][bnev], mennyiseg);
				return true;
			}
			else if(!strcmp(parameterek2, "radius"))
			{
				new Float:radius;

				if(sscanf(params, "{s[24]s[32]}f", radius))
					return SendClientMessage(playerid, COLOR_WHITE, "Használat: /benzinkut szerkeszt benzinmennyiség [mennyiség]");
				BenzinkutInfo[benzinkut][bradius] = radius;
				SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút rádiusza sikeresen beállítva "#COL_VKEK"%f"#COL_FEHER"-ra/-re!", BenzinkutInfo[benzinkut][bnev], radius);
				return true;
			}
		} else
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs a közeledben benzinkút!");
		return true;
	}
	else if(!strcmp(parameterek, "info"))
	{
		new benzinkut = GetClosestBenzinkut(playerid);

		if(GetDistanceToBenzinkut(playerid, benzinkut) < 5.0)
		{
			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
			SendFormatMessage(playerid, COLOR_WHITE, "Név: %s", BenzinkutInfo[benzinkut][bnev]);
			SendFormatMessage(playerid, COLOR_WHITE, "Diesel ár: 2$", BenzinkutInfo[benzinkut][bdieselar]);
			SendFormatMessage(playerid, COLOR_WHITE, "Benzin ár: 2$", BenzinkutInfo[benzinkut][bbenzinar]);
			SendFormatMessage(playerid, COLOR_WHITE, "Diesel mennyiség: %.1f", BenzinkutInfo[benzinkut][bdieselmennyiseg]);
			SendFormatMessage(playerid, COLOR_WHITE, "Benzin mennyiség: %.1f", BenzinkutInfo[benzinkut][bbenzinmennyiseg]);
			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
		} else
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs a közeledben benzinkút!");
		return true;
	}
	else
		goto hiba;
	return true;
}

CMD:vhspawn(playerid, params[])//ah-ban
{
    new jatekos;
	if(!Admin(playerid, 1) && !IsAS(playerid) && !PlayerInfo[playerid][pMapper])
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(FloodEllenorzes(playerid)) return 1;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /vhspawn [Játékos] | Játékos Városházára respawnolása");
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(!Admin(playerid, 1) && jatekos == playerid)
		return SCM(playerid, COL_LRED, "Magadat nem respawnolhatod!");
	if( PlayerInfo[jatekos][pJailIdo] > 0 )
		return SendClientMessage(playerid, COLOR_WHITE, "Ezt a játékost nem vhspawnolhatod, mivel börtönben van.");

	AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s városházára respawnolta %st", JatekosNev(playerid), JatekosNev(jatekos));
	//SpawnPlayer(jatekos);
	SetPos(jatekos, 1503.8801,-1770.6318,13.5433,4.1295, true);
	SetVirtualWorld(jatekos, 0);
	SetInterior(jatekos, 0);
	PlayerInfo[jatekos][phaz] = NINCS;
 	return true;
}

CMD:respawn(playerid, params[])//ah-ban
{
    new jatekos;
	if(!Admin(playerid, 1) && !IsAS(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(FloodEllenorzes(playerid)) return 1;
	if(!Admin(playerid, 1) && PlayerInfo[playerid][pTV][0] == NINCS)
		return SCM(playerid, COL_LRED, "Csak megfigyelés közben respawnolhatsz!");
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /respawn [Játékos]");
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(!Admin(playerid, 1) && jatekos == playerid)
		return SCM(playerid, COL_LRED, "Magadat nem respawnolhatod!");

	AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s respawnolta %st", JatekosNev(playerid), JatekosNev(jatekos));
	PlayerInfo[jatekos][pNewSpawn] = true;
	SpawnPlayer(jatekos);
 	return true;
}
CMD:startlotto(playerid, params[])//ah-ban
{
    if(!Admin(playerid, FOADMIN_SZINT))    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(!Belepett[playerid])	return SCM(playerid, COL_LRED,"Amíg nem azonosítod magad nem használhatod!");
	if(FloodEllenorzes(playerid)) return 1;
	AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s indított egy lottósorsolást!", JatekosNev(playerid));
	Lotto();
 	return true;
}

CMD:warn(playerid, params[])//ah-ban
{
    new player, oka[32];
	if(!Admin(playerid, 1) && !IsAS(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(FloodEllenorzes(playerid)) return 1;
	if(sscanf(params, "us[32]", player, oka))
	    return SCM(playerid, COL_MKEK, "Használat: /warn [Játékos] [Oka]");

	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || IsPlayerNPC(player))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(!Belepve(player))
		return SCM(playerid, COL_LRED, "Ez a játékos még nem lépett be!");

    if((player == playerid))
	    return SCM(playerid, COL_LRED, "Cicaborsó magadat nem fogod figyelmeztetni!");

	if(!OOC_Ellenorzes(playerid, "/warn", oka))
		return true;

 	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
    {
    	SCM(playerid, COL_LRED, "Nagyobb Admint nem figyelmeztethetsz! Mégis mit képzelsz?");
    	//SendFormatMessage(player, COLOR_WHITE, "%s warnolni akart téged!", JatekosNev(playerid));
    	return true;
	}

	if(PlayerInfo[player][pwarnok] <= 2)
	{
		format(uzenet, sizeof(uzenet), "[%d/3] %s figyelmeztetett téged! Oka: %s",PlayerInfo[player][pwarnok], JatekosNev(playerid), oka);
		SendClientMessage(player, COLOR_LIGHTRED, uzenet);
		AdminUzenet(COLOR_LIGHTRED, 0, "[%d/3] %s figyelmezette %st | Oka: %s",PlayerInfo[player][pwarnok], JatekosNev(playerid), JatekosNev(player), oka);
		AdminUzenet(COLOR_LIGHTRED, 1, "[%d/3] %s figyelmezette %st | Oka: %s",PlayerInfo[player][pwarnok], JatekosNev(playerid), JatekosNev(player), oka);
		PlayerInfo[player][pwarnok] ++;
		return true;
	}
	if(PlayerInfo[player][pwarnok] == 3)
	{
	    format(uzenet, sizeof(uzenet), "%s (warn 3x)",oka);
		SeeKick(player,uzenet,playerid);
	}
 	return true;
}

CMD:csakany(playerid, params[])
{
    if(!IsJob(playerid, MUNKA_BANYASZ)) return SCM(playerid, COL_LRED, "Nem vagy bányász");
    
	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "/csákány [elõvesz / elrak]");
	    
	if(egyezik(params, "elovesz") || egyezik(params, "elõvesz"))
	{
	    new jobbkez = UresKez(playerid, SLOT_JOBBKEZ);
		if(!jobbkez)
		    return SCM(playerid, COL_MKEK, "A jobb kezednek üresnek kell lennie!");

	    SetPlayerAttachedObject(playerid, SLOT_JOBBKEZ, 18634, 6, 0.025999, 0.077999, 0.192000, -7.000003, -103.600082, -86.299972, 1.000000, 1.000000, 1.000000, 0, 0);
		Cselekves(playerid, "elõvette a csákányt");
	}
    else if(egyezik(params, "elrak"))
    {
        new jobbkez = UresKez(playerid, SLOT_JOBBKEZ);
		if(jobbkez || g_AttachedObj[playerid][SLOT_JOBBKEZ] != 18634)
		    return SCM(playerid, COL_MKEK, "Nincs nálad csákány!");
		    
        RemovePlayerAttachedObject(playerid, SLOT_JOBBKEZ);
        
        Cselekves(playerid, "elrakta a csákányt");
    }
	return 1;
}
CMD:reg(playerid, params[])
{
	if(!Admin(playerid, SZUPER_SZINT)) return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(ServerInfo[sReg] == false)
	    AdminUzenet(COLOR_LIGHTRED, 1, "%s engedélyezte a szerveren való regisztrációt!",JatekosNev(playerid)), ServerInfo[sReg] = true;
	else
	    AdminUzenet(COLOR_LIGHTRED, 1, "%s tiltotta a szerveren való regisztrációt!",JatekosNev(playerid)), ServerInfo[sReg] = false;
	    
	return 1;
}
CMD:kick(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(FloodEllenorzes(playerid)) return 1;
	new player, oka[32];
	if(sscanf(params, "us[32]", player, oka))
	    return SCM(playerid, COL_MKEK, "Használat: /kick [Játékos] [Oka]");
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || IsPlayerNPC(player))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
    if(player == playerid)
	    return SCM(playerid, COL_LRED, "Cicaborsó magadat nem fogod kickelni!");
 	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid) || (IsScripter(player) && !IsScripter(playerid)))
    {
    	SCM(playerid, COL_LRED, "Nagyobb Admint nem kickelhetsz! Mégis mit képzelsz?");
    	//SendFormatMessage(player, COLOR_WHITE, "%s kickelni akart téged!", JatekosNev(playerid));
    	return true;
	}

    format(uzenet, sizeof(uzenet), ""#PREFIX": %s ki lett rúgva a szerverrõl %s által | Oka: %s", JatekosNev(player), JatekosNev(playerid), oka);
	if(Belepve(player))
	{
		SeeKick(player,oka,playerid);
	}
	else AdminUzenetEx(COLOR_LIGHTRED, 1, uzenet);

	new date[3],time[3];
	getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Kick')", JatekosNev(playerid), PosExt(date), time[0], time[1]);


	Kick(player);
 	return true;
}


CMD:eladokocsik(playerid, params[])// ah-ban
{
	#pragma unused params
    new ketto = 0,osszeselado = 0;
    if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	uzenet[0] = EOS;
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "================ Eladó jármûvek ================");
	foreach(Jarmuvek, h)
	{
		if(vInfo[h][vHasznalva] && !strcmp(vInfo[h][vTulaj], "Nincs_Tulaj") && vInfo[h][vMunka] == 0)
		{
      		osszeselado++;
      		ketto++; //Id formátum SQLID[JármûID]
      		format(uzenet, sizeof(uzenet), "%s %d[%d] %s Ár: %d |", uzenet, vInfo[h][vID], h, VehicleNames[GetVehicleModel(vInfo[h][vID])-400], vInfo[h][vAr]);
		}
		if(ketto == MAX_PRINT)
		{
		    SendClientMessage(playerid, COLOR_WHITE, uzenet);
		    format(uzenet, sizeof(uzenet), "");
		    ketto = 0;
		}
		if((h+1) == MAX_VEHICLES)
			if(ketto > 0)
				SendClientMessage(playerid, COLOR_WHITE, uzenet);
	}
	if(!osszeselado)
		SendClientMessage(playerid, COLOR_WHITE, "Nincs eladó kocsi!");
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "=============================================");
	return true;
}

CMD:inaktiv(playerid, params[])// ah-ban
{
    new ketto, osszeselado, str[128];
    if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(playerid != NINCS)
		SendClientMessage(playerid, COLOR_LIGHTRED, "UserCP => Inaktív értékek <= itt keress inaktív értékeket!");

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /inaktiv [ Jármû ]");

	if(!strcmp(params, "jármû", true) || !strcmp(params, "jarmu", true))
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "================ Inaktív jármûvek (30nap) ================");
		foreach(Jarmuvek, h)
		{
			if(!vInfo[h][vHasznalva] || vInfo[h][vMunka] != 0) continue;
			if(vInfo[h][vTulajID] != NINCS && (vInfo[h][vTLastActive] <= (gettime() - (30 * (60 * 60 * 24)))) )
			{
				osszeselado++;
				ketto++;

				format(str, sizeof(str), "%s %d[%d]%s - [%d]%s |", str, vInfo[h][vID], h, VehicleNames[vInfo[h][vModel] - 400], vInfo[h][vTulajID], vInfo[h][vTulaj]);
			}
			if(ketto == MAX_PRINT)
			{
				SendClientMessage(playerid, COLOR_WHITE, str);
				str[0] = EOS;
				ketto = 0;
			}
			if((h+1) == MAX_VEHICLES && ketto > 0)
				SendClientMessage(playerid, COLOR_WHITE, str);
		}
		if(!osszeselado)
			SendClientMessage(playerid, COLOR_WHITE, "Jelenleg nincs 30 napnál inaktívabb jármû!");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "================ Inaktív jármûvek (30nap) ================");
	}
	return true;
}

CMD:eladohazak(playerid, params[])// ah-ban
{
	#pragma unused params
    new ketto = 0, osszeselado = 0;

	uzenet[0] = EOS;
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "================ Eladó házak ================");

	new h = -1;
	for(;++h < MAX_HOUSE;)
	{
		if(HazInfo[h][hasznalatban])
		{
			if(HazInfo[h][hTulajID] == -1)
			{
				osszeselado++;
				ketto++; //Id formátum SQLID[JármûID]
				format(uzenet, sizeof(uzenet), "%s Házszám: %d | Ára: %s | Belsõ: %d ||| ", uzenet, h, FN( HazInfo[h][hazar], 0, ',' ), HazInfo[h][hInterior]);
			}
			if(ketto == MAX_PRINT)
			{
				SendClientMessage(playerid, COLOR_WHITE, uzenet);
				format(uzenet, sizeof(uzenet), "");
				ketto = 0;
			}
			if((h+1) == MAX_HOUSE)
				if(ketto > 0)
					SendClientMessage(playerid, COLOR_WHITE, uzenet);
		}
	}
	if(!osszeselado)
		SendClientMessage(playerid, COLOR_WHITE, "Nincs eladó házak!");
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "=============================================");
	return true;
}

CMD:asay(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /asay [Üzenet] | Admin bejelentés név nélkül");
	if(!OOC_Ellenorzes(playerid, "/asay", params) && !Admin(playerid, 2))
		return true;

	new uzenete[128];
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			if(Admin(i, FOADMIN_SZINT))
				format(uzenete, sizeof(uzenete), "* Admin (%s): %s", JatekosNev(playerid), params);
			else
				format(uzenete, sizeof(uzenete), "* Admin: %s", params);

			SendClientMessage(i, COLOR_RED, uzenete);
		}
	}
	format(uzenete, sizeof(uzenete), "* Admin (%s): %s", JatekosNev(playerid), params);
	print((format(uzenete, sizeof(uzenete), "* Admin (%s): %s", JatekosNev(playerid), params), uzenete));
	return true;
}

CMD:asayn(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /asayn [Üzenet] | Az egész szerver látja");
	if(!OOC_Ellenorzes(playerid, "/asayn", params) && !Admin(playerid, 2))
		return true;

	new uzenete[128];
	format(uzenete, sizeof(uzenete), "* %s %s: %s", AdminRang(playerid), JatekosNev(playerid), params);
	SendClientMessageToAll(COLOR_RED, uzenete);
	print(uzenete);
	return true;
}

CMD:felhivas(playerid, params[])//ah-ban
{
	if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /felhivas [Üzenet]");
	//if(!OOC_Ellenorzes(playerid, "/felhivas", params) && !Admin(playerid, 2))
		//return true;

	SendClientMessageToAll(COLOR_WHITE, "============================================");
	SendFormatMessageToAll(COLOR_RED, "Felhívás: %s %s - %s", AdminRang(playerid), JatekosNev(playerid), params);
	SendClientMessageToAll(COLOR_WHITE, "============================================");
	return true;
}

CMD:a(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /a [AdminChat]");

	new uzenete[128];
	format(uzenete, sizeof(uzenete), "* %s %s: %s", AdminRang(playerid), JatekosNev(playerid), params);
	foreach(Player, id)
	{
		if(Belepve(id) && Admin(id, 1))
			SendClientMessage(id, COLOR_GREEN, uzenete);
	}
	#if UCPKONZOL == true
	    format(uzenete, sizeof(uzenete), "[[b;#33AA33;#000000]* %s %s: %s]", AdminRang(playerid), JatekosNev(playerid), params);
	    WSStringFix(uzenete);
		WSServerSentToAll(ServerInfo[sUCPServer], uzenete);
	#endif
	return true;
}

CMD:fa(playerid, params[])//ah-ban
{
	if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /fa [FõAdmin Chat]");

	new uzenete[128];
	format(uzenete, sizeof(uzenete), "* %s %s: %s", AdminRang(playerid), JatekosNev(playerid), params);
	foreach(Player, id)
	{
		if(Belepve(id) && Admin(id, FOADMIN_SZINT))
			SendClientMessage(id, TEAM_ORANGE_COLOR, uzenete);
	}
	return true;
}

CMD:sa(playerid, params[])//ah-ban
{
	if(!IsScripter(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /sa [Scripter Chat]");

	new uzenete[128];
	format(uzenete, sizeof(uzenete), "* %s %s: %s", AdminRang(playerid), JatekosNev(playerid), params);
	foreach(Player, id)
	{
		if(Belepve(id) && IsScripter(id))
		SendClientMessage(id,  0x43d2e8AA, uzenete);
	}
	return true;
}

CMD:as(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1) && !IsAS(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /as [Adminsegéd Chat]");
	if(!OOC_Ellenorzes(playerid, "/as", params))
		return true;

	new uzenete[128];
	format(uzenete, sizeof(uzenete), "* %s %s: %s", AdminRang(playerid), JatekosNev(playerid), params);
	foreach(Player, id)
	{
		if(Belepve(id) && (Admin(id, 1) || IsAS(id)))
			SendClientMessage(id, 0xebc052AA, uzenete);
	}
	return true;
}

CMD:gmx(playerid, params[])
{
	if(!Admin(playerid, SZUPER_SZINT) && !IsScripter(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "Használat: /gmx [Idõ (Másodpercben megadva)] | Szerver újraindítás");

	if(PlayerInfo[playerid][pMegerosites] != playerid)
	{
		SCM(playerid, COL_LRED, "Biztos, hogy újra szeretnéd indítani a szervert? Ha igen, írd be mégegyszer!");
		PlayerInfo[playerid][pMegerosites] = playerid;
		return true;
	}

	PlayerInfo[playerid][pMegerosites] = NINCS;
	new ido = strval(params);
    if(ido < 10 || ido > 120)
		return SCM(playerid, COL_LRED, "Minimum 10 másodperc, és maximum 2 perc lehet.");

    AdminUzenet(COLOR_LIGHTRED, 1, "%s aktiválta az újraindítást! | Hátralévõ idõ: %d mp", JatekosNev(playerid), ido);

	foreach(Player, i)
	{
		GameTextForPlayer(i, "~g~~h~================~n~Újraindítás!~n~~g~~h~================", 4000, 5);
		SendClientMessage(i, COLOR_GREEN, "=======================================");
		SendFormatMessage(i, COLOR_WHITE, "A szerver "#COL_MKEK"%d"#COL_FEHER" másodperc múlva újraindul!", ido);
		SendClientMessage(i, COLOR_WHITE, "Ez a ti érdeketeket szolgálja, legyetek türelemmel.");
		SendClientMessage(i, COLOR_GREEN, "=======================================");
	}
	AdatMentesSzerver( true );

    ServerInfo[sRestart] = true;
    defer Restart[((ido * 1000) + 1000)](playerid);
	return true;
}

CMD:cbanyaobj(playerid, params[])//ah-ban
{
	#pragma unused params
	if(!IsScripter(playerid) && !Admin(playerid, SZUPER_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

    AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s újrageneráltatta a bánya objecteket.", JatekosNev(playerid));
    CreateBanyaObject(true);
	return true;
}
CMD:adatmentes(playerid, params[])//ah-ban
{
	#pragma unused params
	if(!IsScripter(playerid) && !Admin(playerid, TULAJ_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

    AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s elindította a manuális adatmentést.", JatekosNev(playerid));
    AdatMentesSzerver( true );
	return true;
}

CMD:mindenthall(playerid, params[])//ah-ban
{
	#pragma unused params
	if(!Admin(playerid, 4))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

    if(IsPlayerConnected(playerid))
    {
		if(!PlayerInfo[playerid][pmindenthall])
		{
			PlayerInfo[playerid][pmindenthall] = true;
			SCM(playerid, COL_MKEK, "Most már látod, hogy ki és mit ír!");
		}
		else if(PlayerInfo[playerid][pmindenthall])
		{
			PlayerInfo[playerid][pmindenthall] = false;
			SCM(playerid, COL_MKEK, "Most már csak a lokális beszédet látod!");
		}
	}
	return true;
}

CMD:smindenthall(playerid, params[])//ah-ban
{
	#pragma unused params
	if(!Admin(playerid,AC_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

    if(IsPlayerConnected(playerid))
    {
		if(!PlayerInfo[playerid][psmindenthall])
		{
			PlayerInfo[playerid][psmindenthall] = true;
			SCM(playerid, COL_MKEK, "Most már látod, más adminok PM-eit!");
		}
		else if(PlayerInfo[playerid][psmindenthall])
		{
			PlayerInfo[playerid][psmindenthall] = false;
			SCM(playerid, COL_MKEK, "Most már csak a saját dolgaid látod!");
		}
	}
	return true;
}

CMD:ujkocsi(playerid, params[])//ah-ban
{
	new Float:X, Float:Y, Float:Z, Float:Angle, modelid[16], ara, color1, color2;
	if(!Admin(playerid, SZUPER_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "s[16]d", modelid, ara))
	    return SCM(playerid, COL_MKEK, "Használat: /ujkocsi [Model név vagy ID] [Ára]");

    new idx = JarmuToID(modelid);
	if(idx == -1)
	{
		idx = strval(modelid);
		if( idx < 400 || idx > 611 )
			return SCM(playerid, COL_LRED, "Nincs ilyen Model vagy ID. 400-611 vagy pontos nevet adj meg!");
	}

	if(GetVehicleMType(idx) == RC || GetVehicleMType(idx) == TRAIN /*!TiltottJarmu(idx)*/ && !IsScripter(playerid))
		return SCM(playerid, COL_LRED, "Ez a jármû tiltott!");

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	if(!JarmuSzinezes(idx)) color1 = -1, color2 = -1;
	else color1 = random(128), color2 = random(128);

	UjJarmu(idx, 0, ara, X, Y+2, Z, Angle, color1, color2, true);

    AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s lehívott egy %s tipusú eladó jármûvet | Ára: %s$", JatekosNev(playerid), VehicleNames[idx-400], FN(ara, 0, ','));
	return true;
}

CMD:veh(playerid, params[])//ah-ban
{
	new Float:X, Float:Y, Float:Z, Float:Angle, modelid[16], color1, color2;
	if(!Admin(playerid, 5))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "s[16]", modelid))
	    return SCM(playerid, COL_MKEK, "Használat: /veh [Model név vagy ID]");

    new idx = JarmuToID(modelid);
	if(idx == -1)
	{
		idx = strval(modelid);
		if( idx < 400 || idx > 611 )
			return SCM(playerid, COL_LRED, "Nincs ilyen Model vagy ID. 400-611 vagy pontos nevet adj meg!");
	}

	new tipus = GetVehicleMType(idx);
	if((tipus != CAR && tipus != BIKE && tipus != BOAT /*&& tipus != PLANE*/ && tipus != HELICOPTER/*!TiltottJarmu(idx)*/ && !IsScripter(playerid)) || tipus == RC)
		return SCM(playerid, COL_LRED, "Ez a jármû tiltott!");

	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	if(!JarmuSzinezes(idx)) color1 = -1, color2 = -1;
	else color1 = random(128), color2 = random(128);

	UjJarmu(idx, 0, 0, X, Y+2, Z, Angle, color1, color2, false);

	if(!Admin(playerid, FOADMIN_SZINT))
		AdminUzenet(COLOR_LIGHTRED, 1, "%s lehívott egy %s tipusú ideiglenes jármûvet!", JatekosNev(playerid), VehicleNames[idx-400]);

	SFM(playerid, COL_VZOLD, "Sikeresen lehívtál egy "#COL_MKEK"%s"#COL_FEHER" típusú ideiglenes jármûvet! Törléshez írd be: "#COL_MKEK"/v töröl", VehicleNames[idx-400]);
	return true;
}
CMD:mapper(playerid,params[])
{
	new parameterek[32], szoveg[64],jatekos;

	if(sscanf(params,"s[32]{}",parameterek)) return SCM(playerid,COL_LKEK,"Használat: /mapper [ rádió | felvesz | kirúg ]");

	if(egyezik(parameterek,"rádió") || egyezik(parameterek,"r"))
	{
	    if(PlayerInfo[playerid][pMapper] >= 1)
	    {
	        if(sscanf(params,"{s[32]}s[64]",szoveg)) return SCM(playerid,COL_LRED,"Használat: /mapper rádió [ szöveg ]");

	        foreach(Player, i)
	        {
	            if(PlayerInfo[i][pMapper] >= 1)
	            {
	                SendFormatMessage(i,COLOR_WHITE,"[Mapper]"#COL_MKEK"%s: (( %s ))",JatekosNev(playerid),szoveg);
				}
			}
		}
	}
	if(egyezik(parameterek,"felvesz"))
	{
	    if(PlayerInfo[playerid][pMapper] >= 2 || Admin(playerid,1338))
	    {
	        if(sscanf(params,"{s[32]}u",jatekos)) return SCM(playerid,COL_LRED,"Használat: /mapper felvesz [ Játékos neve / ID ]");

	        if(PlayerInfo[jatekos][pMapper] == 0)
	        {
	            PlayerInfo[jatekos][pMapper] = 1;
	            SendFormatMessage(jatekos,COLOR_WHITE,"[Mapper]"#COL_MKEK"%s:"#COL_MKEK"felvett mappernak!",JatekosNev(playerid));
				SendFormatMessage(playerid,COLOR_WHITE,"felvetted"#COL_MKEK"%s-t mappernak!",JatekosNev(playerid));
			}else { SCM(playerid,COL_LRED,"Ez a játékos már mapper!"); }
		}
	}
	if(egyezik(parameterek,"kirúg"))
	{
	    if(PlayerInfo[playerid][pMapper] >= 2 || Admin(playerid,1338))
	    {
	        if(sscanf(params,"{s[32]}u",jatekos)) return SCM(playerid,COL_LRED,"Használat: /mapper kirúg [ Játékos neve / ID ]");

	        if(PlayerInfo[jatekos][pMapper] >= 1)
	        {
	            PlayerInfo[jatekos][pMapper] = 0;
	            SendFormatMessage(jatekos,COLOR_WHITE,"[Mapper]"#COL_MKEK"%s:"#COL_MKEK"kirúgott!",JatekosNev(playerid));
				SendFormatMessage(playerid,COLOR_WHITE,"Kirúgtad"#COL_MKEK"%s-t!",JatekosNev(playerid));
			}else { SCM(playerid,COL_LRED,"Ez a játékos nem mapper!"); }
		}
	}
	if(egyezik(parameterek,"leader"))
	{
	    if(Admin(playerid,1338))
	    {
	        if(sscanf(params,"{s[32]}u",jatekos))return SCM(playerid,COL_LRED,"Használat: /mapper leader [ Játékos ]");

			PlayerInfo[jatekos][pMapper] = 2;
			SendFormatMessage(jatekos,COLOR_WHITE,"<< %s kinevezett mapper vezetõnek!",JatekosNev(playerid));
			SendFormatMessage(playerid,COLOR_WHITE,"<< Kinevezted %s-t mapper vezetõnek!",JatekosNev(jatekos));
		}
	}
	if(egyezik(parameterek,"tagok"))
	{
		if(PlayerInfo[playerid][pMapper] >= 1 || Admin(playerid,1338))
		{
			foreach(Player, p)
			{
				if(Belepve(p) && PlayerInfo[p][pMapper] >= 1 )
				{
					SendFormatMessage(playerid, COLOR_WHITE, "Név: "#COL_MKEK"%s", JatekosNev(p));
				}
			}

		//}
		}else { SCM(playerid,COL_LRED,"Nincs jogosultságod a parancs használatához!"); }
	}

	return true;
}
CMD:destroycars(playerid, params[])
{
	if(!Admin(playerid, 5))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new db, asdid,Float:XX,Float:YY,Float:ZZ;
	for(;++asdid < MAX_VEHICLES;)
	{
		new vid = JarmuID(asdid, INVALID_PLAYER_ID);
		if(!vid) continue;
		if(vInfo[vid][vHasznalva] && !vInfo[vid][vInsert])
		{
		    foreach(Player, i)
		    {
		        new car = GetPlayerVehicleID(i);
            	if(vInfo[vid][vID] == car)
            	{
            	    GetPlayerPos(i,XX,YY,ZZ);
            	    SetPos(playerid, XX+3, YY, ZZ, 0.0, true);
				}
			}
			JarmuNullazas(vid);
			DestroyVehicle(vInfo[vid][vID]);
			Iter_Remove(Jarmuvek, asdid);

			vInfo[vid][vHasznalva] = false;
			vInfoID[vInfo[vid][vID]] = 0;
			vInfo[vid][vID] = 0;
			db++;
		}
	}

	if(db)
	{
		if(!IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED, 1, "%s törölte az összes ideiglenesen lehívott jármûvet! Összesen: %ddb", JatekosNev(playerid), db);
	} else
		SCM(playerid, COL_LRED, "Jelenleg nincs ideiglenesen lehívott jármû!");
	return true;
}

CMD:ujmodel(playerid, params[])//ah-ban
{
	if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "Használat: /ujmodel [Model név vagy ID]");

    new idx = JarmuToID(params);
	if(idx == -1)
	{
		idx = strval(params);
		if ( idx < 400 || idx > 611 )
			return SCM(playerid, COL_LRED, "Nincs ilyen Model vagy ID. 400-611 vagy pontos nevet adj meg!");
	}

	if(GetVehicleMType(idx) == RC || GetVehicleMType(idx) == TRAIN /*!TiltottJarmu(idx)*/ && !IsScripter(playerid))
		return SCM(playerid, COL_LRED, "Ez a jármû tiltott!");

	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben nem használhatod!");

	new car = NINCS;
	car = GetClosestVehicle(playerid);

	if(GetDistanceToVehicle(playerid, car) < 5.0)
	{
		new vid = JarmuID(car, playerid), Float:vinfo[5];

		GetVehicleHealth(car, vinfo[0]);
		GetVehiclePos(car, vinfo[1], vinfo[2], vinfo[3]);
		GetVehicleZAngle(car, vinfo[4]);

		if(!IsScripter(playerid) && vInfo[vid][vInsert])
			AdminUzenet(COLOR_LIGHTRED,1, "%s átalakított egy %s típusú jármûvet erre: %s | JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[vInfo[vid][vModel]-400], VehicleNames[idx-400], vInfo[vid][vID], vid, JarmuTulaj(vid));

		AdminLog("Alakít: %s | %s -> %s | JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[vInfo[vid][vModel]-400], VehicleNames[idx-400], vInfo[vid][vID], vid, JarmuTulaj(vid));
		SFM(playerid, COL_MKEK, "Jármû alakítás: %s -> %s | JámrûID: %d[%d] | Tulaj: %s", VehicleNames[vInfo[vid][vModel]-400], VehicleNames[idx-400], vInfo[vid][vID], vid, JarmuTulaj(vid));
		vInfo[vid][vModel] = idx;
		vInfo[vid][vElet] = vinfo[0];
		vInfo[vid][vPosx] = vinfo[1];
		vInfo[vid][vPosy] = vinfo[2];
		vInfo[vid][vPosz] = vinfo[3];
		vInfo[vid][vAngle] = vinfo[4];
		vInfo[vid][vInt] = GetPlayerInterior(playerid);
		vInfo[vid][vVW] = GetPlayerVirtualWorld(playerid);
						
		vInfo[vid][vHidraulika] = 0;
		vInfo[vid][vNOS] = 0;
		vInfo[vid][vMatrica] = 0;
		for(new i=0;i<14;i++)
		{
			vInfo[vid][vMod][i] = 0;
		}

		if(vInfo[vid][vUzemanyag] > MAX_Benzin[idx - 400])
			vInfo[vid][vUzemanyag] = MAX_Benzin[idx - 400];

		vInfo[vid][vMotorelinditva] = false;
		PlayerInfo[playerid][pmotortinditja] = false;
		vUpdate(vid, vuModel);
		vUpdate(vid, vuMod);

		GetVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
		DestroyVehicle(vInfo[vid][vID]);
		JarmuSpawn(vid, vInfo[vid][vModel], vInfo[vid][vPosx], vInfo[vid][vPosy], vInfo[vid][vPosz], vInfo[vid][vAngle], vInfo[vid][vSzin1], vInfo[vid][vSzin2]);

		LinkVehicleToInterior(vInfo[vid][vID], vInfo[vid][vInt]);
		SetVehicleVirtualWorld(vInfo[vid][vID],vInfo[vid][vVW]);
	} else
		SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
	return true;
}

CMD:asek(playerid, params[])
{
	#pragma unused params
	new onlineas;
	//AS Listázás
	SendClientMessage(playerid, COLOR_WHITE, "======== "#COL_MKEK"Adminsegédek "#COL_FEHER"========");
	foreach(Player, i)
		{
		    if(IsPlayerConnected(i) && Belepve(i) && IsAS(i))
			{
				onlineas++;
				if(Admin(playerid, 1) || (IsAS(playerid) && i == playerid))
					SendFormatMessage(playerid,COLOR_WHITE, ""#COL_MKEK"Adminsegéd"#COL_FEHER" %s ("#COL_MKEK"%s"#COL_FEHER") | Válaszok: "#COL_MKEK"%d", JatekosNev(i, true), UnixToTime( PlayerInfo[i][pAS] ), PlayerInfo[i][pValaszok]);
				else
					SendFormatMessage(playerid,COLOR_WHITE, ""#COL_MKEK"Adminsegéd"#COL_FEHER" %s", JatekosNev(i, true));
			}
		}
	if(!onlineas) SCM(playerid, COL_LRED, "Jelenleg nincs online Adminsegéd.");
	return true;
}
CMD:admins(playerid, params[])
{
	#pragma unused params
	new online,string[1024];
	foreach(Player, i)
	{
		if(Belepve(i) && !IsLewis(i))
		{
			if(PlayerInfo[i][padmin] < 1) continue;
			
			online++;
			if(PlayerInfo[i][pAduty])
			{
				if(i == playerid || PlayerInfo[playerid][padmin] > PlayerInfo[i][padmin] || IsScripter(playerid))
                    format(string,1024,"%s\n"#COL_FEHER"Név: %s | Aszint: %s(%d) | Válaszok: %d | "#COL_VZOLD"onDuty",string, JatekosNev(i), AdminRang(i), PlayerInfo[i][padmin], PlayerInfo[i][pValaszok]);
				else
                    format(string,1024,"%s\n"#COL_FEHER"Név: %s "#COL_VZOLD"onDuty", string, JatekosNev(i));
			}
			else
			{
				if(i == playerid || PlayerInfo[playerid][padmin] > PlayerInfo[i][padmin] || IsScripter(playerid))
                    format(string,1024,"%s\n"#COL_FEHER"Név: %s | Aszint: %s(%d) | Válaszok: %d | "#COL_LRED"offDuty",string, JatekosNev(i),AdminRang(i), PlayerInfo[i][padmin], PlayerInfo[i][pValaszok]);
				else
				    format(string,1024,"%s\n"#COL_FEHER"Név: %s | "#COL_LRED"offDuty",string, JatekosNev(i));
			}
		}
 	}
	if(!online) format(string, 1024, #COL_LRED"Nincs online admin, de a DayRPG szeme "#COL_FEHER"mindent "#COL_LRED"lát!");
	
	ShowPlayerDialog(playerid,DIALOG_NINCS,DIALOG_STYLE_MSGBOX,"Online Adminisztrátorok",string,"Ok","");
	return true;
}
CMD:helper(playerid, params[])
{
	new player, sido[8], ido, str[32];
	if(!Admin(playerid, 5) && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(sscanf(params, "us[8]", player, sido))
	    return SCM(playerid, COL_MKEK, "Használat: /helper [Játékos] [Idõ(IRL óra) / Örök]");
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || !Belepve(player))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if((PlayerInfo[player][padmin]) && !IsScripter(playerid))
	    return SCM(playerid, COL_LRED, "Adminnak ne adj! :D");

	if(!strcmp(sido, "örök") || !strcmp(sido, "orok"))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SCM(playerid, COL_LRED, "Örök Adminseged csak FõAdmin rakhat be!");

		if(PlayerInfo[player][pAS] != NINCS)
		{
			PlayerInfo[player][pAS] = NINCS;
			SetReport(playerid);
			SendFormatMessage(player, COLOR_MKEK, "%s %s kinevezett téged Örök Adminsegédnek!", AdminRang(playerid), JatekosNev(playerid));
			if(!IsScripter(playerid))
				AdminUzenet(COLOR_LIGHTRED, 1, "%s kinevezte %st Örök Adminsegédnek!", JatekosNev(playerid), JatekosNev(player));

			SendFormatMessage(playerid, COLOR_MKEK, "Kinevezted %st Örök Adminsegédnek!", JatekosNev(player));
			
			//TogTextDraw(player, PTD_REPORT, true);

		} else {

			PlayerInfo[player][pAS] = 0;
			SetReport(playerid);
			SendFormatMessage(player, COLOR_MKEK, "%s %s elvette az Örök Adminsegéded", AdminRang(playerid), JatekosNev(playerid));
			if(!IsScripter(playerid))
				AdminUzenet(COLOR_LIGHTRED, 1, "%s elvette %s Örök Adminsegédjét!", JatekosNev(playerid), JatekosNev(player));

			SendFormatMessage(playerid, COLOR_MKEK, "Elvetted %s Örök Adminsegédjét!", JatekosNev(player));

			//TogTextDraw(player, PTD_REPORT, false);
		}
		return true;
	}

	ido = strval(sido);
	if(ido < 0 || ido > 48)
	    return SCM(playerid, COL_LRED, "Minimum 1 és maximum 48 óra lehet! | 0 = AS jog elvétele");

	if(ido > 0)
	{
		if(PlayerInfo[player][pAS] == NINCS)
			return SCM(playerid, COL_LRED, "Örök Adminsegédnek nem adhatsz idõszakod jogot!");

		SendFormatMessage(player, COLOR_MKEK, "%s %s kinevezett téged %d órára Adminsegédnek!", AdminRang(playerid), JatekosNev(playerid), ido);
		if(!IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED, 1, "%s kinevezte %st %d órára Adminsegédnek!", JatekosNev(playerid), JatekosNev(player), ido);

		SendFormatMessage(playerid, COLOR_MKEK, "Kinevezted %st %d órára Adminsegédnek!", JatekosNev(player), ido);

		ido = (ido * 3600);
		PlayerInfo[player][pAS] = (ido + gettime());
		SetReport(playerid);
		//TogTextDraw(player, PTD_REPORT, true);
	}

	if(ido == 0)
	{
		if(PlayerInfo[player][pAS] == NINCS)
			return SCM(playerid, COL_LRED, "Örök Adminsegéd jogát így nem veheted el! Használd így: /helper örök");
		if(PlayerInfo[player][pAS] < gettime())
			return SCM(playerid, COL_LRED, "Neki nincs, vagy már lejárt az Adminsegéd joga!");

		str = UnixToTime( PlayerInfo[player][pAS] );
		PlayerInfo[player][pAS] = 0;
		SetReport(playerid);

		SendFormatMessage(player, COLOR_MKEK, "%s %s elvette az Adminsegéd jogodat!", AdminRang(playerid), JatekosNev(playerid));
		if(!IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED, 1, "%s elvette %s Adminsegéd jogát! (%s)", JatekosNev(playerid), JatekosNev(player), str);

		SendFormatMessage(playerid, COLOR_MKEK, "Elvetted %s Adminsegéd jogát! (%s)", JatekosNev(player), str);
		//TogTextDraw(player, PTD_REPORT, false);
	}
	return true;
}

CMD:makeadmin(playerid, params[])//ah-ban
{
    new player, level;
	if(!Admin(playerid, AC_SZINT) && !IsScripter(playerid) && !IsLewis(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(sscanf(params, "ud", player, level))
	    return SCM(playerid, COL_MKEK, "Használat: /makeadmin [Játékos] [Szint(1 - 6 | 1337 - 1340 | 5555 | 6666 | 8888 | 9999)]");
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || !Belepve(player))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if((level > PlayerInfo[playerid][padmin]) && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT)
	    return SCM(playerid, COL_LRED, "Saját szintednél nem tudsz nagyobbat adni!");
	if((PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin]) && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT)
	    return SCM(playerid, COL_LRED, "Nagyobb Admin szintjét nem állíthatod!");
	if(level == FOADMIN_SZINT && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < AC_SZINT)
	    return SCM(playerid, COL_LRED, "FõAdmint nem rakhatsz be!");
	if(level >= AC_SZINT && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT)
	    return SCM(playerid, COL_LRED, "Szuper Admint nem rakhatsz be!");

	new bool:ok;
	switch( level )
	{
		case 0 .. 5:
			ok = true;
		case FSEGED_SZINT:
			ok = true;
		case FOADMIN_SZINT:
			ok = true;
		case SZUPER_SZINT:
			ok = true;
		case AC_SZINT:
			ok = true;
 		case FEJLESZTO_SZINT:
			ok = true;
		case TULAJ_SZINT:
			ok = true;
		case RENDSZG_SZINT:
			ok = true;
		case SCRIPTER_SZINT:
			ok = true;
		case FOSCRIPTER_SZINT:
			ok = true;
	}

	if(!ok)
		return SCM(playerid, COL_LRED, "Hibás Adminszint! Lehetõségek: 1 - 6 | 1337 - 1340 | 5555 | 6666 | 8888 | 9999");

	
	PlayerInfo[player][pAS] = 0;
	PlayerInfo[player][padmin] = level;
	SendFormatMessage(player, COLOR_MKEK, "%s %s kinevezett téged %d szintû Adminná!", AdminRang(playerid), JatekosNev(playerid), level);
	if((IsScripter(playerid) && (playerid != player || !IsScripter(player))) || !IsScripter(playerid))
		AdminUzenet(COLOR_LIGHTRED, 1, "%s kinevezte %st %d szintû adminná!", JatekosNev(playerid), JatekosNev(player), level);

	SendFormatMessage(playerid, COLOR_MKEK, "Kinevezted %st %d szintû adminná!", JatekosNev(player), level);
	SetReport(player);
	
	if(Admin(player,1))
	{
		SCM(player,COL_LRED,"Adminjelszó beállításához: /apw");
	}
	return true;
}

CMD:tv(playerid, params[])
{
	if(!Admin(playerid, 1) && !IsAS(playerid) && !PlayerInfo[playerid][pMapper])
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos, jog;
	if(IsAS(playerid)) jog = 0;
	else if(Admin(playerid, 1)) jog = 1;

	if(isnull(params))
	{
		if(PlayerInfo[playerid][pTV][0] != NINCS)
		{
			if(!IsScripter(playerid) && PlayerInfo[PlayerInfo[playerid][pTV][0]][padmin] > PlayerInfo[playerid][padmin])
			{
				AdminUzenet(COLOR_LIGHTRED, jog, "%s befejezte %s megfigyelését!", JatekosNev(playerid), JatekosNev(PlayerInfo[playerid][pTV][0]));
			}
			TogglePlayerSpectating(playerid, 0);
			PlayerInfo[ PlayerInfo[playerid][pTV][0] ][pTV][2] = NINCS;
			PlayerInfo[playerid][pTV][0] = NINCS;
			Streamer_Update(playerid);
			if(PlayerInfo[playerid][pinterior] != 0 || PlayerInfo[playerid][pvirtualworld] != 0)
				Freeze(playerid, 3000);
			else
				Freeze(playerid, 1000);

			SetPlayerPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz]);
			SetInterior(playerid, PlayerInfo[playerid][pinterior]);
			SetVirtualWorld(playerid, PlayerInfo[playerid][pvirtualworld]);
			ShowInfoTextDraw(playerid);

		} else
			SCM(playerid, COL_MKEK, "Használat: /tv [ Játékos / Enged ] | Játékos megfigyelése, befejezéshez írd be: /tv");

		return true;
	}

	if(!strcmp(params, "enged") || !strcmp(params, "tilt"))
	{
		if(!Admin(playerid, 1))
			return SCM(playerid, COL_LRED, "Neked nincs rá szükséged.");

		if(PlayerInfo[playerid][pTV][1])
		{
			PlayerInfo[playerid][pTV][1] = false;
			SCM(playerid, COL_MKEK, "Megfigyelési engedély visszavonva, most már a kisebb Adminok nem tudnak megfigyelni!");

		} else {

			PlayerInfo[playerid][pTV][1] = true;
			SCM(playerid, COL_MKEK, "Megfigyelés engedélyezve, most már a kisebb Adminok is megfigyelhetnek téged!");
		}
		return true;
	}

	sscanf(params, "u", jatekos);
	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(!Belepve(jatekos))
		return SCM(playerid, COL_LRED, "Ez a játékos még nem lépett be!");
		
	if(PlayerInfo[jatekos][pTV][0] != NINCS)
	    return SCM(playerid, COL_LRED, "Õ már TV-z valakit, ezért nem tudod figyelni.");
	    
	if(jatekos == playerid)
		return SCM(playerid, COL_LRED, "Cicaborsó, ne magadat figyeld, hanem a játékosokat! :D");
	
	if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid) && !PlayerInfo[jatekos][pTV][1])
		return SCM(playerid, COL_LRED, "Nagyobb Admint nem figyelhetsz meg!");

	if(PlayerInfo[playerid][pTV][0] == NINCS)
	{
		GetPlayerPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz]);
		PlayerInfo[playerid][pinterior] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pvirtualworld] = GetPlayerVirtualWorld(playerid);
	}

	SetInterior(playerid, GetPlayerInterior(jatekos), false);
	SetVirtualWorld(playerid, GetPlayerVirtualWorld(jatekos), false);
	if(IsScripter(jatekos)) { SFM(jatekos, COL_RSARG,"%s megfigyel téged",JatekosNev(playerid)); }
	HideInfoTextDraw(playerid);
	PlayerInfo[jatekos][pFigyelmeztetes] = 0;

	if((PlayerInfo[playerid][pTV][0] != jatekos) && !IsScripter(playerid) && PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin])
		AdminUzenet(COLOR_LIGHTRED, jog, "%s megfigyeli %st!", JatekosNev(playerid), JatekosNev(jatekos));
		
//	if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid) && PlayerInfo[jatekos][pTV][1])
	//	SFM(jatekos, COL_LRED, "[TV]: %s megfigyel téged!", JatekosNev(playerid));

	PlayerInfo[playerid][pTV][0] = jatekos;
	PlayerInfo[jatekos][pTV][2] = playerid;
	TogglePlayerSpectating(playerid, true);
	Streamer_Update(playerid);
	if(!IsPlayerInAnyVehicle(jatekos)) PlayerSpectatePlayer(playerid, jatekos);
	else PlayerSpectateVehicle(playerid, GetPlayerVehicleID(jatekos));

	return true;
}
CMD:z(playerid,params[])
{
	if(!Admin(playerid,1)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/z [+ Magasság]");
		return 1;
	}
	new magassag;
	sscanf(params,"d",magassag);
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	SetPlayerPos(playerid,X,Y,Z+magassag);
	return true;
}
CMD:x(playerid,params[])
{
	if(!Admin(playerid,1)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/x [+ X Pozíció]");
		return 1;
	}
	new xpozicio;
	sscanf(params,"d",xpozicio);
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	SetPlayerPos(playerid,X,Y,Z+xpozicio);
	return true;
}
CMD:y(playerid,params[])
{
	if(!Admin(playerid,1)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/y [+ Y Pozíció]");
		return 1;
	}
	new ypozicio;
	sscanf(params,"d",ypozicio);
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	SetPlayerPos(playerid,X,Y+ypozicio,Z);
	return true;
}
CMD:idojaras(playerid, params[])
{
	if(!Admin(playerid, FSEGED_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /idojaras [ WeatherID(2-20) / random ]");

	if(!strcmp(params, "random"))
	{
		new idx = ServerInfo[sIdojaras];
		Idojaras();
		AdminUzenet(COLOR_LIGHTRED, 1, "%s idõjárást váltott! Régi: %d | Új: %d (random)", JatekosNev(playerid), idx, ServerInfo[sIdojaras]);
		return true;
	}

	new Idojarasok[16] = {2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,20};
	new bool:ok = false, id = strval(params);

	for(new i = NINCS; ++i < sizeof(Idojarasok);)
		if(Idojarasok[i] == id) ok = true;

	if(!ok && !IsScripter(playerid))
		return SCM(playerid, COL_LRED, "Ez az idõjárás nem definiált, kérlek válassz a következõk közül: 2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,20");

	AdminUzenet(COLOR_LIGHTRED, 1, "%s idõjárást váltott! Régi: %d | Új: %d", JatekosNev(playerid), ServerInfo[sIdojaras], id);
	Idojaras(NINCS, id);
	return true;
}

CMD:napszak(playerid, params[])
{
	if(!Admin(playerid, FSEGED_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /napszak [Óra (1 - 23)]");

	new ora = strval(params);
	if(ora < 0 || ora > 23)
		return SCM(playerid, COL_LRED, "Érvénytelen érték! Minimum 1 és maximum 23 lehet!");

	SetWorldTime(ora);
	
	if(ora == ServerInfo[sRL_Time][3])
	{
	    ServerInfo[sNapszakForce] = false;
	    AdminUzenet(COLOR_LIGHTRED, 1, "%s visszaállította a napszakot a jelenlegi idõre! (%d órára)", JatekosNev(playerid), ora);
	}
	else
	{
	    ServerInfo[sNapszakForce] = true;
		foreach(Player, p)
			SetPlayerTime(p, ora, 0);

		AdminUzenet(COLOR_LIGHTRED, 1, "%s átállította a napszakot %d órára!", JatekosNev(playerid), ora);
	}
	return true;
}

CMD:kocsiba(playerid, params[])
{
	if(!Admin(playerid, 5))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /kocsiba [ JármûID ] | A szabad ülésbe ültet bele");

	new id = strval(params), slot;

	if(!id || id > MAX_VEHICLES || !IsVehicleConnected(id))
		return SCM(playerid, COL_LRED, "Nincs ilyen jármû!");

	if(IsSeatTaken(id, slot) != NINCS)
	{
		slot = 1;
		if(IsSeatTaken(id, slot) != NINCS)
			return SCM(playerid, COL_LRED, "Ebben a jármûben mint két ülés foglalt! Így nem szállhatsz bele!");
	}

	PutPlayerInVehicle(playerid, id, slot);
	SFM(playerid, COL_VZOLD, "Sikeresen beleteleportáltál a %d rendszámú jármûbe!", id);
	return true;
}

CMD:goto(playerid, params[])//ah-ban
{
    new player, Float: fPos[3];
	if(!Admin(playerid, 1) && !IsScripter(playerid) && !PlayerInfo[playerid][pMapper])    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(sscanf(params, "u", player))    return SCM(playerid, COL_MKEK, "Használat: /goto [Játékos]");
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player))   return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
    if(player == playerid)    return SCM(playerid, COL_LRED, "Gratulálok! Ön sikeresen megtalálta önmagát!");
	//if(player == VasarlosNPCK[0] && !IsLewis(playerid)) return SCM(playerid,COL_LRED,"Óóó hogyne..A fegyveres NPC-re nem gotozol!");
	if(!Belepve(player) && !IsScripter(playerid))	return SCM(playerid, COL_LRED, "Ez a játékos nincs belépve!");
	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin] && !PlayerInfo[player][pAEnged][0] && PlayerInfo[playerid][padmin] < FOADMIN_SZINT)	return SCM(playerid, COL_LRED, "Nagyobb Adminhoz csak akkor teleportálhatsz ha azt engedélyezi!");

    GetPlayerPos(player, fPos[0], fPos[1], fPos[2]);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
		SetVehiclePos(GetPlayerVehicleID(playerid), fPos[0], fPos[1]+2, fPos[2]);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(player));
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetPlayerVirtualWorld(player));
	} else {
		SetPlayerPos(playerid, fPos[0], fPos[1]+2, fPos[2]);
	}

	PlayerInfo[player][pFigyelmeztetes] = 0;
	SetInterior(playerid, GetPlayerInterior(player));
	SetVirtualWorld(playerid, GetPlayerVirtualWorld(player));
	//PlayerInfo[playerid][phaz] = PlayerInfo[player][phaz];
 	PlayerInfo[playerid][phaz] = NINCS;
	SFM(playerid, COL_MKEK, "Sikeresen teleportáltál hozzá: "#COL_MKEK"%s", JatekosNev(player));
	return true;
}

CMD:get(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1) && !IsScripter(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new player, Float: fPos[3];
	if(sscanf(params, "u", player))
	    return SCM(playerid, COL_MKEK, "Használat: /get [Játékos]");
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || IsPlayerNPC(player))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
    if(player == playerid)
	    return SCM(playerid, COL_LRED, "Gratulálok! Ön sikeresen megtalálta önmagát!");
    //if((PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid)) || (IsScripter(player) && !IsScripter(playerid)))
	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin])
    {
    	SCM(playerid, COL_LRED, "Nagyobb admint nem teleportálhatsz magadhoz!");
    	//SendFormatMessage(player, COLOR_WHITE, "%s magához akart teleportálni!", JatekosNev(playerid));
    	return true;
	}

    GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
	if(GetPlayerState(player) == PLAYER_STATE_DRIVER)
 	{
		SetVehiclePos(GetPlayerVehicleID(player), fPos[0], fPos[1]+2, fPos[2]);
		LinkVehicleToInterior(GetPlayerVehicleID(player), GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(GetPlayerVehicleID(player), GetPlayerVirtualWorld(playerid));
	} else {
		SetPlayerPos(player, fPos[0], fPos[1]+2, fPos[2]);
	}

	PlayerInfo[player][phaz] = PlayerInfo[playerid][phaz];
	PlayerInfo[player][pFigyelmeztetes] = 0;
	SetInterior(player, GetPlayerInterior(playerid));
	SetVirtualWorld(player, GetPlayerVirtualWorld(playerid));

	SFM(playerid, COL_MKEK, "Sikeresen magadhoz teleportáltad "#COL_MKEK"%s"#COL_FEHER"-t", JatekosNev(player));
	SFM(player, COL_MKEK, "%s sikeresen magához teleportált!", JatekosNev(playerid));
	return true;
}

CMD:auncuff(playerid, params[])
{
	if(!Admin(playerid, 3))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos;
	if(sscanf(params, "u", jatekos))
	    return SCM(playerid, COL_MKEK, "Használat: /auncuff [Játékos]");

	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(!PlayerInfo[jatekos][pBilincselve])
		return SCM(playerid, COL_LRED, "Ez a játékos nincs megbilincselve!");

	GameTextForPlayer(jatekos, "~g~Admin levette rólad a bilincset!", 2500, 3);

	foreach(Player, p)
	{
		if(!Belepve(p)) continue;
		if(PlayerInfo[p][pVisz] == jatekos)
		{
			PlayerInfo[p][pVisz] = NINCS;
			break;
		}
	}

	Bilincs(jatekos, 0);
	AdminUzenet(COLOR_LIGHTRED, 1, "%s levette róla: %s a bilincset!", JatekosNev(playerid), JatekosNev(jatekos));

	return true;
}

CMD:pacsi(playerid, params[])
{
	if(!Admin(playerid, 1) && !PlayerInfo[playerid][pMapper])
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /pacsi [Játékos]");

	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if((PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT))
		jatekos = playerid;

	new Float:pos[3];
	GetPlayerPos(jatekos, PosExt(pos));
	SetPlayerPos(jatekos, PosExt(pos) + 5);
	PlayerPlaySound(jatekos, 1130, PosExt(pos) + 5);

	AdminUzenet(COLOR_LIGHTRED, 1, "%s felpacsizta %st", JatekosNev(playerid), JatekosNev(jatekos));
	return true;
}

CMD:robbant(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /robbant [Játékos]");

	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if((PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT))
		jatekos = playerid;

	Felrobbant( jatekos );

	if(!IsScripter(playerid))
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s felrobbantotta %st", JatekosNev(playerid), JatekosNev(jatekos));

	SFM(playerid, COL_VZOLD, "Felrobbantottad õt: "#COL_MKEK"%s", JatekosNev(jatekos));
	return true;
}
CMD:ahegy(playerid, params[])
{
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new az = 1;
	if(!isnull(params)) {
		az = strval(params);
		if(az < 1 || az > 6)
			az = 1;
	}

	switch(az)
	{
		case 1: SetPos(playerid, -372.81, 2128.20, 133.18, .update = true);
		case 2: SetPos(playerid, -340.553, 1985.268, 131.489, .update = true);
		case 3: SetPos(playerid, -319.854, 1945.073, 132.412, .update = true);
		case 4: SetPos(playerid, -483.645, 2114.076, 133.547, .update = true);
		case 5: SetPos(playerid, -427.619, 2503.875, 124.304, .update = true);
		case 6: SetPos(playerid, -459.990, 2371.782, 117.802, .update = true);
	}

	SFM(playerid, COL_VZOLD, "Sikeresen teleportáltál a %d számú Admin hegyre! Itt OOC is beszélhetsz.", az);
	SetInterior(playerid,0);
	SetVirtualWorld(playerid, 0);
	return true;
}

CMD:getcar(playerid, params[])//ah-ban
{
    new jarmuid = NINCS, Float: fPos[3], sql = 0;
	if(!Admin(playerid, 3))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "dD(0)", jarmuid, sql))
	    return SCM(playerid, COL_MKEK, "Használat: /getcar [JármuID] [SQL ID alapján? (Ha igen írj 1-et)]");

	if(sql == 1) jarmuid = vInfo[jarmuid][vID];

    if(!IsVehicleConnected(jarmuid))
	    return SCM(playerid, COL_LRED, "Ez a jármû ID nincs spawnolva!");
	new ckdid = JarmuID(jarmuid,playerid);
	if(vInfo[ckdid][vApben] == 1)
		return SCM(playerid,COL_LRED,"Ez a jármû AdminParkolóban van.");

	GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
 	SetVehiclePos(jarmuid, fPos[0], fPos[1]+3, fPos[2]);
 	LinkVehicleToInterior(jarmuid, GetPlayerInterior(playerid));
 	SetVehicleVirtualWorld(jarmuid, GetPlayerVirtualWorld(playerid));
	new mo = GetVehicleModel(jarmuid);

	TuningBetolt(jarmuid);

 	//AdminUzenet(COLOR_LIGHTRED, 1, "%s magához teleportált egy %s típusú jármûvet | JármuID: %d[%d]", JatekosNev(playerid), VehicleNames[GetVehicleModel(jarmuid)-400], jarmuid, vInfoID[jarmuid]);
	SFM(playerid, COL_MKEK, "Teleportálva: "#COL_MKEK"%s"#COL_FEHER"(%d) | JármuID: %d[%d] | Tulaj: "#COL_MKEK"%s", VehicleNames[mo - 400], mo, jarmuid, vInfoID[jarmuid], JarmuTulaj(vInfoID[jarmuid]));
	return true;
}

CMD:gotocar(playerid, params[])//ah-ban
{
    new jarmuid, Float: fPos[3], sql = 0;
	if(!Admin(playerid, 3))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "dD(0)", jarmuid, sql))
	    return SCM(playerid, COL_MKEK, "Használat: /gotocar [JármuID] [SQL ID alapján? (Ha igen írj 1-et)]");

	if(sql == 1) jarmuid = vInfo[jarmuid][vID];

    if(!IsVehicleConnected(jarmuid))
	    return SCM(playerid, COL_LRED, "Ez a jármû ID nincs spawnolva!");

	new rid = JarmuID(jarmuid,playerid);
	if(vInfo[rid][vApben] == 1)
		return SCM(playerid,COL_LRED,"Ez a jármû AdminParkolóban van.");

	new carint = GetVehicleInterior(jarmuid);
	new carvw = GetVehicleVirtualWorld(jarmuid);
	SFM(playerid, COL_MKEK, "carint: %d | carvw: %d", carint, carvw);
	
    SetInterior(playerid, carint);
	SetVirtualWorld(playerid, carvw);
    
	GetVehiclePos(jarmuid, fPos[0], fPos[1], fPos[2]);
 	SetPos(playerid, fPos[0], fPos[1]+3, fPos[2]);
 	new mo = GetVehicleModel(jarmuid);

	//AdminUzenet(COLOR_LIGHTRED, 1, "%s oda teleportált egy %s típusú jármuhöz | JármuID: %d[%d]", JatekosNev(playerid), VehicleNames[GetVehicleModel(jarmuid)-400], jarmuid, vInfoID[jarmuid]);
	SFM(playerid, COL_MKEK, "Teleportálva: "#COL_MKEK"%s"#COL_FEHER"(%d) | JármuID: %d[%d] | Tulaj: "#COL_MKEK"%s", VehicleNames[mo - 400], mo, jarmuid, vInfoID[jarmuid], JarmuTulaj(vInfoID[jarmuid]));
	return true;
}

CMD:gotopos(playerid, params[])//ah-ban
{
    if(!Admin(playerid, 4))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new Float:pos[3];
	if(sscanf(params, "fff", PosExt(pos)))
	    return SCM(playerid, COL_MKEK, "Használat: /gotopos [X] [Y] [Z]");

	SetPos(playerid, PosExt(pos));
	SFM(playerid, COL_MKEK, "Teleportálva ide: %.3f %.3f %.3f", pos[0], pos[1], pos[2]);
	return true;
}

CMD:poz(playerid, params[])//ah-ban
{
	#pragma unused params
	new Float:pos[3], Float:angle2;
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, angle2);
	format(uzenet, sizeof(uzenet), "Poziciód: (X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Interior: %d | VirtualWorld: %d)", pos[0], pos[1], pos[2], angle2, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	SendClientMessage(playerid, COLOR_WHITE, uzenet);
	return true;
}

CMD:pozmentes(playerid, params[])//ah-ban
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /pozmentes [Információ] | scriptfiles/pozmentes.txt");

	new Float:pos[4], int, vw, str[256];

	GetPlayerPos(playerid, PosExt(pos));
	GetPlayerFacingAngle(playerid, pos[3]);
	int = GetPlayerInterior(playerid);
	vw = GetPlayerVirtualWorld(playerid);

	format(str, sizeof(str), "Poziciód: (X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Int:%d | VW:%d) - mentve", PosExt(pos), pos[3], int, vw);
	SendClientMessage(playerid, COLOR_WHITE, str);

	format(str, sizeof(str), "Poziciód: (X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Int:%d | VW:%d) - (%.3f, %.3f, %.3f, %.3f) - %s \r\n", PosExt(pos), pos[3], int, vw, PosExt(pos), pos[3], params);
	FajlIras("pozmentes.txt", str);
	return true;
}

CMD:tmentes(playerid, params[])//ah-ban
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new leiras[128];
	if(sscanf(leiras,"s[128]",leiras))
		return SCM(playerid, COL_MKEK, "Használat: /tpozmentes [Információ] - Ha hülyeséget mentesz letépem a fejed!");

	new Float:pos[4], int, vw, str[256];
	GetPlayerPos(playerid, PosExt(pos));
	GetPlayerFacingAngle(playerid, pos[3]);
	int = GetPlayerInterior(playerid);
	vw = GetPlayerVirtualWorld(playerid);

	format(str, sizeof(str), "Poziciód: (X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Int:%d | VW:%d) - Tömbösítve", PosExt(pos), pos[3], int, vw);
	SendClientMessage(playerid, COLOR_WHITE, str);

	format(str, sizeof(str), "{%.3f, %.3f, %.3f}, //%s\r\n", PosExt(pos), int, vw, PosExt(pos), pos[3], params);
	FajlIras("pozmentes2.txt", str);
	return true;
}

CMD:sound(playerid, params[])
{
	if(!IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new soundid;
	if(sscanf(params, "d", soundid))
		return SCM(playerid, COL_MKEK, "Használat: /sound [soundid]");
	PlayerPlaySound(playerid, soundid, 0.0, 0.0, 0.0);
	return true;
}
CMD:pedanim(playerid, params[])
{
	if(!IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new pedlibrary[32], pedanims[32], Float:fdelta, loop, lockx, locky, freeze, time, forcesync;
	if(sscanf(params, "s[32]s[32]fdddddd", pedlibrary, pedanims, fdelta, loop, lockx, locky, freeze, time, forcesync))
		return SCM(playerid, COL_MKEK, "Használat: /pedanim [pedlibrar] [pedanim] [fdelta] [loop] [lockx] [locky] [freeze] [time] [forcesync]");

	LoopingAnim(playerid, pedlibrary, pedanims, fdelta, loop, lockx, locky, freeze, time, forcesync);
	///pedanim GETUP_FRONT 4 0 0 0 0 1000 1
	return true;
}

CMD:td(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_SHOWTEXTDRAW, DIALOG_STYLE_LIST, "Textdraw kezelés:", "Bekapcsolás\nKikapcsolás", "Mehet", "Mégse");
	return true;
}
CMD:bk(playerid, params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");

	foreach(Player, p)
    {
        if( FInfo[ PlayerInfo[p][pFrakcio] ][fLegalis] == FK_REND || PlayerInfo[p][pFrakcio] == 1 || PlayerInfo[p][pFrakcio] == 15 || PlayerInfo[p][pFrakcio] == 6)
        {
			SFM(p, COL_MKEK, "%s erõsítést kért! Információ: %s", JatekosNev(playerid, true), params);
			SetPlayerMarkerForPlayer(p, playerid, 0x00ff66AA);
		}
    }
    Erosites[playerid] = 1;
	SCM(playerid, COL_VZOLD, "Erõsítést hívtál!");
	return true;
}

CMD:cbk(playerid, params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");

	foreach(Player, p)
    {
        if(PlayerInfo[p][pDuty][1] && FInfo[ PlayerInfo[p][pFrakcio] ][fLegalis] == FK_REND || PlayerInfo[p][pFrakcio] == 1 || PlayerInfo[p][pFrakcio] == 15 || PlayerInfo[p][pFrakcio] == 6)
        {
			SFM(p, COL_MKEK, "%s lemondta az erõsítést!", JatekosNev(playerid, true));
			SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
			SetPlayerColor(playerid, COLOR_INVISIBLE);//listában normálisan látható
		}
    }
    Erosites[playerid] = 0;
	return true;
}

CMD:adatnezes(playerid, params[])
{
	new jatekos;
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && !IsHitman(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /adatnezes [Játékos IDje]");

	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	SendFormatMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ %s adatai ]"#COL_FEHER" ===================", JatekosNev(jatekos, true));
	ShowPDAStats(playerid, jatekos);

	return true;
}

CMD:radomany(playerid, params[])
{
	new adomany;
	if(sscanf(params, "d", adomany))
		return SCM(playerid, COL_MKEK, "Használat: /r(iporter)adomany [összeg]");

	if(adomany < 50) return SCM(playerid, COL_MKEK, "Minimum 50 Dollár!");
	if(PlayerInfo[playerid][pBszPenz] < adomany) return SCM(playerid, COL_MKEK, "Nincs ennyi pénz a bankszámládon!");
	PlayerInfo[playerid][pBszPenz] -= adomany;
	FInfo[ FRAKCIO_RIPORTER ][fPenz] += adomany;
	nformat(str, 128, "%s támogatta a riportereket %d $-al",JatekosNev(playerid, true), adomany);
	FrakcioUzenet(COLOR_WHITE, FRAKCIO_RIPORTER, str);
	return true;
}

CMD:ram(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && !IsHitman(playerid))
		return SCM(playerid, COL_LRED, "Ezt a parancsot nem használhatod!");

	new houseid = KozeliHaz(playerid);

	if(houseid == NINCS)
		return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");

	if(PlayerInfo[playerid][phaz] != NINCS)
		return SCM(playerid, COL_LRED, "Jelenleg is házban tartózkodsz!");

	Cselekves(playerid, "behatolt a házba.", 1);

	HazInfo[houseid][hZarva] = false;

	PutPlayerInHouse(playerid, houseid);
	return true;
}

stock IsVehicleOccupied(vehicleid) // Returns 1 if there is anyone in the vehicle
{
    foreach(Player,i)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i)==vehicleid)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }
	return false;
}

CMD:getip(playerid,params[])
{
	if(Admin(playerid,2) || IsScripter(playerid))
	{
		new id;
		if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /getip [Játékos]");
		else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
		else if(Admin(id,1) && !Admin(playerid,FOADMIN_SZINT) && !IsScripter(playerid)) return SCM(playerid,COL_LRED,"Admin IP-jét nem kérheted le.");
		else {
		    new ip[144];
		    GetPlayerIp(id,ip,sizeof ip);
			SFM(playerid,COL_MKEK,"%s IP-je: %s",JatekosNev(id),ip);
		}
	}else { SCM(playerid,COL_LRED,"Nana"); }
	return 1;
}
CMD:ms(playerid, params[])
{
	if(!IsScripter(playerid)) return SCM(playerid,COL_MKEK,"Nem használhatod ezt a parancsot.");
	new ertek;
	if(sscanf(params,"d",ertek)) return SendClientMessage(playerid,0xFFFFFF,"Használat: /maxspeed [érték]");
	MaxSpeed = strval(params[0]);
	SCM(playerid, COL_VZOLD, "Rendõrkocsik sebbesége állítiva");
	return true;
}

CMD:debugcrs(playerid,params[])
{
	if(!Admin(playerid,AC_SZINT)) return SCM(playerid,COL_MKEK,"Nem használhatod ezt a parancsot.");
	for(new asd; asd < MAX_VEHICLES; asd++)
	{
		SetVehicleToRespawn(asd);
	}
	new astr[144];
	format(astr,144,"%s debuggolja a jármûveket.",JatekosNev(playerid));
	AdminUzenetEx(COLOR_LIGHTRED,1,astr);
	SendClientMessageToAll(COLOR_WHITE, ""#COL_MKEK"Felhívás:"#COL_FEHER" Debugból az összes jármû respawnolva!");
	return 1;
}
CMD:villogo(playerid,params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");
	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Kocsiban kell ülnöd!");
	
	new param[32];
	if(sscanf(params,"s[32]{}", param)) return SCM(playerid, COL_LRED, "/villogó [felrak / levesz]");
	if(egyezik(param, "felrak"))
	{
	    new tipus;
	    if(sscanf(params, "{s[32]}d", tipus)) return SCM(playerid, COL_LRED, "/villogó felrak [Típus (1 - kicsi, 2 - nagy)]");
	    
	    new objectid = NINCS;
	    switch(tipus)
	    {
	        case 1: objectid = 18646;
	        case 2: objectid = 19419;
	    }
	    
	    if(objectid == NINCS)
			return SCM(playerid, COL_LRED, "Hibás típus!");
		else
		{
  			new response = Villogo(playerid, true, objectid);
  			switch(response)
			{
	  			case -2: SCM(playerid, COL_MKEK, "Nincs felrakva a lámpa!");
	    		case -1: SCM(playerid, COL_MKEK, "Már felvan rakva a villogó!");
			}
		}
	}
	else if(egyezik(param, "levesz"))
	{
	    new response = Villogo(playerid, false, NINCS);
	    switch(response)
		{
	 		case -2: SCM(playerid, COL_MKEK, "Nincs felrakva a lámpa!");
	   		case -1: SCM(playerid, COL_MKEK, "Már felvan rakva a taxi lámpa!");
	   		default: SCM(playerid, COL_MKEK, "Villogó leszedve!");
		}
	}
	else
        return SCM(playerid, COL_LRED, "/villogó [felrak / levesz]");
        
	return true;
}
CMD:felszereles(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 267.5132,119.1876,1004.6172) && !IsPlayerInRangeOfPoint(playerid, 5.0, 267.768, 118.279, 1004.617))//LSPD bázis duty hely
	{
		SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
		return true;
	}
	if(PlayerInfo[playerid][pDuty][0] == 0)
 	{
 	    SCM(playerid, COL_LRED, "Nem vagy szolgálatban.");
 	    return true;
	}

	ShowPlayerDialog(playerid, DIALOG_FELSZERELES, 2, "Felszerelések", "Cadet felszerelés\nOfficer felszerelés\nDetective felszerelés\nLSPD Emergency felszerelés\nMotoros felszerelés\nSzolgálat leadása", "Felvesz", "Mégse");
	return true;
}
timer keziTrafiIdozito[500](playerid)
{
    new animlib[32];
    new animname[32];
    GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
    if(!Belepve(playerid) || !egyezik(animlib, "ped") || !egyezik(animname, "ARRESTgun"))
	{
	    TrafiTimerFut[playerid] = false;
    	stop PlayerTimers[playerid][PT_TRAFIPAX];
    	return 1;
	}
			
	new now = gettime();
	new Float:rPoz[3];
	GetPlayerPos(playerid, posArr{rPoz});
	GetXYInFrontOfPlayer(playerid,rPoz[0],rPoz[1], 15.0);
	
	foreach(Player, i)
	{
	    if(PlayerInfo[i][pAduty]) continue;
	    if(!IsPlayerInAnyVehicle(i)) continue;
	    if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
	    if(now - TrafiCsekkolva[playerid][i] < 5) continue;
	    if(!IsPlayerInRangeOfPoint(i, 16.0, rPoz[0], rPoz[1], rPoz[2])) continue;
	    
	    new kocsi = GetPlayerVehicleID(i);
	    
	    
	    new vid = JarmuID(kocsi, i);
		if(!vid || !vInfo[vid][vHasznalva]) continue;
		
		new sebesseg = GetVehicleSpeed( vInfo[vid][vID] );
		if(sebesseg < TrafiMinSebesseg[playerid]) continue;
		
	    SCM(playerid,COL_LRED,"=====[ Traffipax ]=====");
	    SCM(i,COL_LRED,"=====[ Traffipax ]=====");
		new toler = TrafiSebTolerancia[playerid];
		if(sebesseg < TrafiMinSebesseg[playerid] + toler)
		{
			SFM(playerid, COL_LRED, "A jármû sebessége: %d km/h", sebesseg);
		    if(strlen(vInfo[vid][vRendszam]) < 4)
				SFM(playerid, COL_LRED, "A jármû rendszáma: "#COL_MKEK"See-%d[%d]", kocsi, vid);
			else
			    SFM(playerid, COL_LRED, "A jármû rendszáma: "#COL_MKEK"%s ( %d[%d] )", kocsi, vid, vInfo[vid][vRendszam]);
			    
            SFM(i, COL_LRED, "Lassíts! A sebességed: %d km/h | Nem kaptál büntetést, mert a toleranciahatárt nem lépted át!", sebesseg);
		}
		else
		{
		    SFM(playerid, COL_LRED, "A jármû sebessége: %d km/h", sebesseg);
		    if(strlen(vInfo[vid][vRendszam]) < 4)
				SFM(playerid, COL_LRED, "A jármû rendszáma: "#COL_MKEK"See-%d[%d]", kocsi, vid);
			else
			    SFM(playerid, COL_LRED, "A jármû rendszáma: "#COL_MKEK"%s ( %d[%d] )", kocsi, vid, vInfo[vid][vRendszam]);
			    
			new kulonbseg = sebesseg - (TrafiMinSebesseg[playerid] + toler);
			new bpontok = floatround(kulonbseg / 5, floatround_ceil);
			
		 	SFM(i, COL_LRED, "Büntetõpontot kaptál! A sebességed: %d km/h | Maximum megengedett sebesség: %d km/h (%dkm/h toleranciával)!", sebesseg, TrafiMinSebesseg[playerid] + toler, toler);
			SFM(i, COL_LRED, "Átlépted a sebességhatárt %d km/h -val, ezért kaptál %ddb büntetõpontot! Vigyázz, nehogy bevonják a jogsid!", kulonbseg, bpontok);

            PlayerInfo[i][pBuntetoPontok] += bpontok;
            if(PlayerInfo[i][pBuntetoPontok] >= P_MAX_BUNTETOPONT)
            {
                new e = NINCS;
				for(; ++e < MAX_ENGEDELY;)
                	PlayerInfo[i][pEngedely][e] = 0;
                	
				SCM(i, COL_LRED, "Túl sok büntetõpontjaid miatt bevonták az engedélyeid!");
				PlayerInfo[i][pBuntetoPontok] = 0;
            }
		}
		TrafiCsekkolva[playerid][i] = now;
	}
	return 1;
}
CMD:traffipax(playerid,params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");
		
	if(PlayerInfo[playerid][pCuccok][BL_TRAFFIPAX] < 1)
	    return SCM(playerid, COL_LRED, "Nincs nálad traffipax!");
	new param[32];
	if(sscanf(params,"s[32]{}", param)) return SCM(playerid, COL_LRED,"/traffipax [elõvesz / elrak / céloz]");
	if(egyezik(param,"elõvesz") || egyezik(param, "elovesz"))
	{
	    if(TrafiElol[playerid]) return SCM(playerid, COL_LRED, "Már elõvetted!");
	    if(PlayerInfo[playerid][pFegyver])
		{
			SCM(playerid, COL_LRED, "Tedd el a fegyvered!");
			return true;
		}
		new jobbkez = UresKez(playerid, SLOT_JOBBKEZ);
		new balkez = UresKez(playerid, SLOT_BALKEZ);
		if(!jobbkez || !balkez)
		    return SCM(playerid, COL_LRED, "Mindkét kezednek üresnek kell, hogy legyen!");
		    
        SetPlayerAttachedObject(playerid, SLOT_JOBBKEZ, 1886, 14, 0.354000, 0.192999, 0.148999, -46.700000, -9.400009, 122.100051, 0.572000, 0.458999, 0.761000, 0, 0);
        Cselekves(playerid,"elõvette a traffipaxot");
        TrafiElol[playerid] = true;
        
	}
	if(egyezik(param, "elrak"))
	{
	    if(!TrafiElol[playerid]) return SCM(playerid, COL_LRED, "Nem vetted elõ!");
	    RemovePlayerAttachedObject(playerid, SLOT_JOBBKEZ);
	    if(TrafiTimerFut[playerid])
	    {
    		stop PlayerTimers[playerid][PT_TRAFIPAX];
    		TrafiTimerFut[playerid] = false;
		}
		Cselekves(playerid,"elrakta a traffipaxot");
		UnFreeze(playerid);
	   	ClearAnimations(playerid);
		TrafiElol[playerid] = false;
	}
	if(egyezik(param, "céloz") || egyezik(param, "celoz"))
	{
	    if(!TrafiElol[playerid]) return SCM(playerid, COL_LRED, "Nem vetted elõ a traffipaxot!");
	    
	    new sebesseg, toler;
	    if(sscanf(params,"{s[32]}dd", sebesseg, toler)) return SCM(playerid, COL_LRED, "/traffipax céloz [sebességhatár] [tolerancia]");
	    if(sebesseg < 40 || sebesseg > 100)
             return SCM(playerid, COL_LRED, "A sebesség min. 40, maximum 100 km/h !");
             
        if(toler > 10)
             return SCM(playerid, COL_LRED, "A maximum tolerancia 10 km/h !");

		TrafiMinSebesseg[playerid] = sebesseg;
	    TrafiSebTolerancia[playerid] = toler;
	    if(GetPlayerAnimationIndex(playerid))
	    {
	        new animlib[32];
	        new animname[32];
	        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
	        if(egyezik(animlib, "ped") && egyezik(animname, "ARRESTgun")) //Céloz
			{
			    LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
	    		Cselekves(playerid,"leengedte a kezét");
	    		UnFreeze(playerid);
	    		ClearAnimations(playerid);
	    		if(TrafiTimerFut[playerid])
			    {
		    		stop PlayerTimers[playerid][PT_TRAFIPAX];
		    		TrafiTimerFut[playerid] = false;
				}
			}
			else
			{
			    
	    		Cselekves(playerid,"beállítja az eszközt és céloz a traffipax-szal");
	    		Freeze(playerid);
	    		if(!TrafiTimerFut[playerid])
			    {
		    		PlayerTimers[playerid][PT_TRAFIPAX] = repeat keziTrafiIdozito(playerid);
		    		TrafiTimerFut[playerid] = true;
				}
				LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1);
			}
	    }
	}
	return 1;
}
CMD:swat(playerid,params[])
{
	if(PlayerInfo[playerid][pSWAT] != 1 && !Admin(playerid, AC_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new car = NINCS;
	car = GetClosestVehicle(playerid);

	if(GetDistanceToVehicle(playerid, car) < 5.0)
	{
		if(GetVehicleModel(car) == 427 || GetVehicleModel(car) == 482 || GetVehicleModel(car) == 528)
		{
			ShowPlayerDialog(playerid, DIALOG_SWAT, 2, "SWAT", "Alap felszerelés\nKözepes felszerelés\nNehéz felszerelés\nLead", "Felvesz", "Mégse");
		}
		else
			return SCM(playerid, COL_LRED, "Nincs Enforcer/Burrito/FBI truck a közeledben!");
	}
	else
		return SCM(playerid, COL_LRED, "Nincs Enforcer/Burrito/FBI truck a közeledben!");
		
	return true;
}
CMD:sr(playerid,params[])
{
	if(PlayerInfo[playerid][pSWAT] != 1 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(PlayerInfo[playerid][pCuccok][BL_KEZIRADIO] == 0)
		return SCM(playerid, COL_LRED,"Nincs rádiód! Vegyél a boltban..");
	if(PlayerInfo[playerid][pAnimban][0] == 1)
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");
	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /sr [IC Rádió]");
	if(!OOC_Ellenorzes(playerid, "/sr", params))
		return true;
	format(prox, sizeof(prox),"** %s %s: %s ,vége ", SWATRangok(PlayerInfo[playerid][pSWATRang]), JatekosNev(playerid, true), params);

	foreach(Player, p)
    {
        if(Belepve(p) && PlayerInfo[p][pSWAT] == 1)
        {
			SendClientMessage(p, 0xffc400AA, prox);
		}
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}
CMD:srb(playerid,params[])
{
	if(PlayerInfo[playerid][pSWAT] != 1 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(PlayerInfo[playerid][pCuccok][BL_KEZIRADIO] == 0)
		return SCM(playerid, COL_LRED,"Nincs rádiód! Vegyél a boltban..");
	if(PlayerInfo[playerid][pAnimban][0] == 1)
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");
	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /srb [OOC Rádió]");
	if(!OOC_Ellenorzes(playerid, "/srb", params))
		return true;
	format(prox, sizeof(prox),"(( ** %s %s: %s ))", SWATRangok(PlayerInfo[playerid][pSWATRang]), JatekosNev(playerid, true), params);

	foreach(Player, p)
    {
        if(Belepve(p) && PlayerInfo[p][pSWAT] == 1)
        {
			SendClientMessage(p, 0xffc400AA, prox);
		}
    }
    format(prox, sizeof(prox), "(( [Rádió]%s mondja: %s ))", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}
CMD:sd(playerid, params[])
{
	if(PlayerInfo[playerid][pAnimban][0] == 1)
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");

	if(PlayerInfo[playerid][pCuccok][BL_KEZIRADIO] == 0)
		return SCM(playerid, COL_LRED,"Nincs rádiód! Vegyél a boltban..");

	if(PlayerInfo[playerid][pSWAT] != 1 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /sd [Sürgõsségi rádió]");
	if(!OOC_Ellenorzes(playerid, "/sd", params))
		return true;

	format(prox, sizeof(prox),"** SWAT %s %s: %s ,vége ", SWATRangok(PlayerInfo[playerid][pSWATRang]), JatekosNev(playerid, true), params);

    foreach(Player, p)
    {
		new fk = PlayerInfo[p][pFrakcio];
        if(Belepve(p) && PlayerInfo[p][pCuccok][BL_KEZIRADIO] != 0 && !PlayerInfo[p][pTog][0] && (fk == FRAKCIO_LAFD || fk == FRAKCIO_LSPD || fk == FRAKCIO_FBI || fk == FRAKCIO_KORMANY || fk == FRAKCIO_LAFD || fk == FRAKCIO_KATONA) || PlayerInfo[p][pLehallgat] == fk)
			SendClientMessage(p, COLOR_ALLDEPT, prox);
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}
CMD:sinv(playerid,params[])
{
	if(PlayerInfo[playerid][pSWATRang] != 12 && !Admin(playerid,AC_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /sinv [Játékos]");
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(PlayerInfo[jatekos][pSWAT] == 1)
	{
		PlayerInfo[jatekos][pSWAT] = 0;
		PlayerInfo[jatekos][pSWATRang] = 0;
		SFM(jatekos, COL_VZOLD, "%s kirúgott téged a %s SWAT-ból!", JatekosNev(playerid));
		SFM(playerid, COL_VZOLD, "Kirúgtad õt: %s a SWAT-ból!", JatekosNev(jatekos));
	}
	else
	{
		PlayerInfo[jatekos][pSWAT] = 1;
		PlayerInfo[jatekos][pSWATRang] = 1;
		SFM(jatekos, COL_VZOLD, "%s felvett téged a %s SWAT-ba!", JatekosNev(playerid));
		SFM(playerid, COL_VZOLD, "Felvetted õt: %s a SWAT-ba!", JatekosNev(jatekos));
	}
	return true;
}
CMD:uzemmod(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD &&!IsScripter(playerid) && PlayerInfo[playerid][pFrakcio] != 6 && PlayerInfo[playerid][pFrakcio] != 15)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(PlayerInfo[playerid][pUzemmod] == 0)
	{
		PlayerInfo[playerid][pUzemmod] = 1;
		Cselekves(playerid, "bekapcsolta a sokkoló üzemmódot a fegyverén", 1);
		SCM(playerid, COL_VZOLD, "Bekapcsoltad a sokkoló üzemmódot");
	}
	else
	{
		PlayerInfo[playerid][pUzemmod] = 0;
		Cselekves(playerid, "kikapcsolta a sokkoló üzemmódot a fegyverén", 1);
		SCM(playerid, COL_VZOLD, "Kikapcsoltad a sokkoló üzemmódot");
	}
	return true;
}
CMD:srang(playerid,params[])
{
	if(PlayerInfo[playerid][pSWATRang] != 12 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new rang, jatekos, oka[64];
	if(sscanf(params, "uds[64]", jatekos, rang, oka))
			return SCM(playerid, COL_MKEK, "Használat: /srang [Játékos] [Rang (1-12)] [Oka]");
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(rang < 1 || rang > 12)
			return SCM(playerid, COL_LRED, "A rang minimum 1 és maximum 12 lehet!");
	if(strlen(oka) > 64)
		return SCM(playerid, COL_LRED, "Az ok maximum 64 karakter lehet!");
	if(PlayerInfo[jatekos][pSWAT] != 1)
		return SCM(playerid, COL_LRED, "Ez a játékos nem tagja a SWAT-nak!");
	PlayerInfo[jatekos][pSWATRang] = rang;
	SFM(jatekos, COL_VZOLD, "Új rangot kaptál tõle a SWAT-nál: %s | Rang: [%d]%s | Oka: %s", JatekosNev(playerid), rang, SWATRangok(rang), oka);
	SFM(playerid, COL_VZOLD, "Új rangot adnál neki a SWAT-nál: %s | Rang: [%d]%s | Oka: %s", JatekosNev(jatekos), rang, SWATRangok(rang), oka);
	return true;
}

CMD:sgov(playerid,params[])
{
	if(PlayerInfo[playerid][pSWAT] != 1 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /sgov [Bejelentés szövege] | Nem hírdetésre van");

	if(strlen(params) < 20)
		return SCM(playerid, COL_LRED, "A bejelentés szövegének legalább 20 karakter hosszúnak kell lennie!");

	if(!OOC_Ellenorzes(playerid, "/sgov", params))
		return true;

	new str[128];
	SendClientMessageToAll(0xffc400AA, "================== [ SWAT felhívás ] ==================");
	format(str, sizeof(str), "%s %s: %s", SWATRangok(PlayerInfo[playerid][pSWATRang]), JatekosNev(playerid, true), params);
	SendClientMessageToAll(0xffc400AA, str);
	return true;
}

CMD:smtagok(playerid,params[])
{
    SendClientMessage(playerid,0xd99b0bAA,"========== [ S&M TAGOK ] ==========");
    foreach(Player,p)
    {
        if(Belepve(p) && PlayerInfo[p][pSM] == 1)
        {
            switch(PlayerInfo[p][pSMrang])
            {
                case 1: SendFormatMessage(playerid,0xd99b0bAA,"Név: "#COL_MKEK"%s{ffea00} | Rang: S&M Tag",JatekosNev(p));
                case 2: SendFormatMessage(playerid,0xd99b0bAA,"Név: "#COL_MKEK"%s{ffea00} | Rang: S&M Elit",JatekosNev(p));
                case 3: SendFormatMessage(playerid,0xd99b0bAA,"Név: "#COL_MKEK"%s{ffea00} | Rang: S&M Vezetõ",JatekosNev(p));
                case 4: SendFormatMessage(playerid,0xd99b0bAA,"Név: "#COL_MKEK"%s{ffea00} | Rang: S&M Alapító",JatekosNev(p));
            }
        }
    }
	return 1;
}

CMD:smkocsi(playerid,params[])
{
	if(PlayerInfo[playerid][pSM] == 1 || IsAS(playerid) || Admin(playerid,1 || IsScripter(playerid)))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COL_LRED,"Jármûben nem hívhatsz le!");
	    else {
			PlayerInfo[playerid][pSMkocsi] = 1;
			new Float:pos[4];
			GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
			GetPlayerFacingAngle(playerid,pos[3]);
			smkocsiid[playerid] = CreateVehicle(550,pos[0],pos[1],pos[2],pos[3],126,126,-1);
			PutPlayerInVehicle(playerid,smkocsiid[playerid],0);
			SetJarmu(smkocsiid[playerid],KOCSI_MOTOR,1);
			SetJarmu(smkocsiid[playerid],KOCSI_LAMPA,1);
			SetJarmu(smkocsiid[playerid],KOCSI_OBJECTIVE,1);
			SCM(playerid,COL_MKEK,"Sikeresen lehívtad a jármûvet! Ha kiszállsz a kocsiból, törlõdik.");
            AdminUzenet(COLOR_LIGHTRED,1,"%s lehívott egy körbevezetõ kocsit",JatekosNev(playerid));
	    }
	}
	else return SCM(playerid,COL_MKEK,"Csak S&M Tagoknak!");
	return 1;
}

CMD:stagok(playerid,params[])
{
	if(PlayerInfo[playerid][pSWAT] != 1 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	SendClientMessage(playerid, 0xffc400AA, "========== [ SWAT TAGOK ] ==========");
	foreach(Player, p)
	{
		if(Belepve(p) && PlayerInfo[p][pSWAT] == 1 && !IsLewis(p))
		{
			SendFormatMessage(playerid, 0xffc400AA, "Név: "#COL_MKEK"%s{ffea00} | Rang: [%d]"#COL_MKEK"%s{ffea00}%s", JatekosNev(p), PlayerInfo[p][pSWATRang], SWATRangok(PlayerInfo[p][pSWATRang]), (PlayerInfo[p][pSzunetel] ? (" | AFK") : ("")));
		}
	}
	return true;
}
stock GenerateRandomNumber(string[], const length = 8)
{
    for(new i; i < length; ++i)
    {
        string[i] = random(10) + '0';
    }
    return string;
}

stock UjGPSID()
{
	new i = 0, tid = 0;

	for(;++i < MAXGPS;)
	{
	    if(!GPSInfo[i][gHasznalva])
	    {
	        tid = i;
	        break;
	    }
	}
	return tid;
}
stock GPSNameToID(const neve[])
{
    new vissza = NINCS, t = NINCS;
    for(;++t < MAXGPS;)
    {
        if(GPSInfo[t][gHasznalva])
        {
			if(!strcmp(neve, GPSInfo[t][gnev], true))
			{
				vissza = t;
				break;
			}
        }
    }
    return vissza;
}
fpublic TuningFelrak(playerid, kocsi, komponens)
{
	if(komponens >= 1008 && komponens <= 1010 && IsInvalidNosVehicle(kocsi) || !IsVehicleUpgradeCompatible(GetVehicleModel(kocsi), komponens))
	{
		if(Belepve(playerid) && playerid != NINCS)
			SCM(playerid,COL_LRED,"Ez az alkatresz nem kompatibilis ezen jármû típussal!");
		return 1;
	}
	Tuningol[playerid] = 1;
	
	if(komponens == 1009) //2x
	    vInfo[kocsi][vNOS] = 15*1000;
	else if(komponens == 1008) //5x
	    vInfo[kocsi][vNOS] = 30*1000;
	else if(komponens == 1010) //10x
	    vInfo[kocsi][vNOS] = 60*1000;
	else
	    AddVehicleComponent(kocsi, komponens);
	    
	new tipus = GetVehicleComponentType(komponens);
	new vid = JarmuID(kocsi, INVALID_PLAYER_ID);
	if(komponens != 1087)
	{
		vInfo[vid][vMod][tipus] = komponens;
	}
	else
	{
		vInfo[vid][vHidraulika] = 1;
		AddVehicleComponent(kocsi, 1087);
	}
	vUpdate(vid,vuMod);
	vUpdate(vid,vuHidraulika);
	return 1;
}
fpublic TuningBetolt(kocsi)
{
	new vid = JarmuID(kocsi,INVALID_PLAYER_ID);
	ChangeVehiclePaintjob(kocsi,vInfo[vid][vMatrica]);
	if(vInfo[vid][vHidraulika] != 0)
	{
		AddVehicleComponent(kocsi, 1087);
	}
	for(new i=0; i < 14; i++)
	{
		if(vInfo[vid][vMod][i] == 0 || vInfo[vid][vMod][i] == 1008 || vInfo[vid][vMod][i] == 1009 || vInfo[vid][vMod][i] == 1010) continue;
		AddVehicleComponent(kocsi, vInfo[vid][vMod][i]);
	}
	return true;
}
stock RemoveVehicleComponents(kocsi)
{
	new componentid;
	new vid = JarmuID(kocsi, INVALID_PLAYER_ID);
	for (new i; i < 14; i++)
	{
	    componentid = GetVehicleComponentInSlot(kocsi, i);
	    if (componentid != 0)
		{
	        RemoveVehicleComponent(kocsi, componentid);
			vInfo[vid][vMod][i] = 0;
		}
	}
	vUpdate(vid, vuMod);
}
stock IsVehicleUpgradeCompatible(model,componentid) // by AirKite
{
	switch(model)
	{
		case 400:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 401:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
			}
		}
		case 404:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 405:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1001: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 410:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 415:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 418:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 420:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 421:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 422:
		{
			switch(componentid)
			{
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 426:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 436:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 439:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 477:
		{
			switch(componentid)
			{
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 478:
		{
			switch(componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1012: { return 1; }
				case 1013: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 489:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 491:
		{
			switch(componentid)
			{
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 492:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 496:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 500:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 516:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1015: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 517:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 518:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 527:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 529:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 534:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1100: { return 1; }
				case 1101: { return 1; }
				case 1106: { return 1; }
				case 1122: { return 1; }
				case 1123: { return 1; }
				case 1124: { return 1; }
				case 1125: { return 1; }
				case 1126: { return 1; }
				case 1127: { return 1; }
				case 1178: { return 1; }
				case 1179: { return 1; }
				case 1180: { return 1; }
				case 1185: { return 1; }
			}
		}
		case 535:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1109: { return 1; }
				case 1110: { return 1; }
				case 1113: { return 1; }
				case 1114: { return 1; }
				case 1115: { return 1; }
				case 1116: { return 1; }
				case 1117: { return 1; }
				case 1118: { return 1; }
				case 1119: { return 1; }
				case 1120: { return 1; }
				case 1121: { return 1; }
			}
		}
		case 536:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1103: { return 1; }
				case 1104: { return 1; }
				case 1105: { return 1; }
				case 1107: { return 1; }
				case 1108: { return 1; }
				case 1128: { return 1; }
				case 1181: { return 1; }
				case 1182: { return 1; }
				case 1183: { return 1; }
				case 1184: { return 1; }
			}
		}
		case 540:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 542:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 546:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 547:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1003: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 549:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 550:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 551:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 558:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1088: { return 1; }
				case 1089: { return 1; }
				case 1090: { return 1; }
				case 1091: { return 1; }
				case 1092: { return 1; }
				case 1093: { return 1; }
				case 1094: { return 1; }
				case 1095: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1163: { return 1; }
				case 1164: { return 1; }
				case 1165: { return 1; }
				case 1166: { return 1; }
				case 1167: { return 1; }
				case 1168: { return 1; }
			}
		}
		case 559:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1065: { return 1; }
				case 1066: { return 1; }
				case 1067: { return 1; }
				case 1068: { return 1; }
				case 1069: { return 1; }
				case 1070: { return 1; }
				case 1071: { return 1; }
				case 1072: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1158: { return 1; }
				case 1159: { return 1; }
				case 1160: { return 1; }
				case 1161: { return 1; }
				case 1162: { return 1; }
				case 1173: { return 1; }
			}
		}
		case 560:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1026: { return 1; }
				case 1027: { return 1; }
				case 1028: { return 1; }
				case 1029: { return 1; }
				case 1030: { return 1; }
				case 1031: { return 1; }
				case 1032: { return 1; }
				case 1033: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1138: { return 1; }
				case 1139: { return 1; }
				case 1140: { return 1; }
				case 1141: { return 1; }
				case 1169: { return 1; }
				case 1170: { return 1; }
			}
		}
		case 561:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1055: { return 1; }
				case 1056: { return 1; }
				case 1057: { return 1; }
				case 1058: { return 1; }
				case 1059: { return 1; }
				case 1060: { return 1; }
				case 1061: { return 1; }
				case 1062: { return 1; }
				case 1063: { return 1; }
				case 1064: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1154: { return 1; }
				case 1155: { return 1; }
				case 1156: { return 1; }
				case 1157: { return 1; }
			}
		}
		case 562:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1034: { return 1; }
				case 1035: { return 1; }
				case 1036: { return 1; }
				case 1037: { return 1; }
				case 1038: { return 1; }
				case 1039: { return 1; }
				case 1040: { return 1; }
				case 1041: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1146: { return 1; }
				case 1147: { return 1; }
				case 1148: { return 1; }
				case 1149: { return 1; }
				case 1171: { return 1; }
				case 1172: { return 1; }
			}
		}
		case 565:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1045: { return 1; }
				case 1046: { return 1; }
				case 1047: { return 1; }
				case 1048: { return 1; }
				case 1049: { return 1; }
				case 1050: { return 1; }
				case 1051: { return 1; }
				case 1052: { return 1; }
				case 1053: { return 1; }
				case 1054: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1150: { return 1; }
				case 1151: { return 1; }
				case 1152: { return 1; }
				case 1153: { return 1; }
			}
		}
		case 567:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1102: { return 1; }
				case 1129: { return 1; }
				case 1130: { return 1; }
				case 1131: { return 1; }
				case 1132: { return 1; }
				case 1133: { return 1; }
				case 1186: { return 1; }
				case 1187: { return 1; }
				case 1188: { return 1; }
				case 1189: { return 1; }
			}
		}
		case 575:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1042: { return 1; }
				case 1043: { return 1; }
				case 1044: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1099: { return 1; }
				case 1174: { return 1; }
				case 1175: { return 1; }
				case 1176: { return 1; }
				case 1177: { return 1; }
			}
		}
		case 576:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1134: { return 1; }
				case 1135: { return 1; }
				case 1136: { return 1; }
				case 1137: { return 1; }
				case 1190: { return 1; }
				case 1191: { return 1; }
				case 1192: { return 1; }
				case 1193: { return 1; }
			}
		}
		case 580:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 585:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 589:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 600:
		{
			switch(componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 603:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 402,403,406..409,411..414,416,419,423,424,427..429,431..435,437,438,440..445,448,450,451,455..459,461..463,466..468,470,471,474,475,479..486,490,494,495,498,499,502..510,514,515,521..526,528,530..533,541,552,543..545,554..557,566,568,578,571..574,579,581..584,586..588,591,594,596..599,601,602,604..611:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
	}
	return 0;
}

stock GetVehicleCompatibleUpgrades(model, count, &componentid = 0) // by AirKite
{
	componentid = 0;
	switch(model)
	{
		case 400:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1013; }
				case 5: { componentid = 1018; }
				case 6: { componentid = 1019; }
				case 7: { componentid = 1020; }
				case 8: { componentid = 1021; }
				case 9: { componentid = 1024; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 401:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1007; }
				case 7: { componentid = 1008; }
				case 8: { componentid = 1009; }
				case 9: { componentid = 1010; }
				case 10: { componentid = 1013; }
				case 11: { componentid = 1017; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
			}
		}
		case 404:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
			}
		}
		case 405:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1001; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 410:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 415:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1023; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 418:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1020; }
				case 8: { componentid = 1021; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 420:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 421:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1008; }
				case 3: { componentid = 1009; }
				case 4: { componentid = 1010; }
				case 5: { componentid = 1014; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 422:
		{
			switch(count)
			{
				case 1: { componentid = 1007; }
				case 2: { componentid = 1008; }
				case 3: { componentid = 1009; }
				case 4: { componentid = 1010; }
				case 5: { componentid = 1013; }
				case 6: { componentid = 1017; }
				case 7: { componentid = 1019; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 426:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 436:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1022; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 439:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1023; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
				case 28: { componentid = 1142; }
				case 29: { componentid = 1143; }
				case 30: { componentid = 1144; }
				case 31: { componentid = 1145; }
			}
		}
		case 477:
		{
			switch(count)
			{
				case 1: { componentid = 1006; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1017; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 478:
		{
			switch(count)
			{
				case 1: { componentid = 1004; }
				case 2: { componentid = 1005; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1012; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1022; }
				case 11: { componentid = 1024; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 489:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1016; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1024; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 491:
		{
			switch(count)
			{
				case 1: { componentid = 1003; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 492:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 496:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1003; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1011; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
			}
		}
		case 500:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1013; }
				case 5: { componentid = 1019; }
				case 6: { componentid = 1020; }
				case 7: { componentid = 1021; }
				case 8: { componentid = 1024; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 516:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1015; }
				case 9: { componentid = 1016; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1021; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 517:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1016; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 518:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 527:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1015; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 529:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1011; }
				case 9: { componentid = 1012; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1023; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 534:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1100; }
				case 23: { componentid = 1101; }
				case 24: { componentid = 1106; }
				case 25: { componentid = 1122; }
				case 26: { componentid = 1123; }
				case 27: { componentid = 1124; }
				case 28: { componentid = 1125; }
				case 29: { componentid = 1126; }
				case 30: { componentid = 1127; }
				case 31: { componentid = 1178; }
				case 32: { componentid = 1179; }
				case 33: { componentid = 1180; }
				case 34: { componentid = 1185; }
			}
		}
		case 535:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1109; }
				case 23: { componentid = 1110; }
				case 24: { componentid = 1113; }
				case 25: { componentid = 1114; }
				case 26: { componentid = 1115; }
				case 27: { componentid = 1116; }
				case 28: { componentid = 1117; }
				case 29: { componentid = 1118; }
				case 30: { componentid = 1119; }
				case 31: { componentid = 1120; }
				case 32: { componentid = 1121; }
			}
		}
		case 536:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1103; }
				case 23: { componentid = 1104; }
				case 24: { componentid = 1105; }
				case 25: { componentid = 1107; }
				case 26: { componentid = 1108; }
				case 27: { componentid = 1128; }
				case 28: { componentid = 1181; }
				case 29: { componentid = 1182; }
				case 30: { componentid = 1183; }
				case 31: { componentid = 1184; }
			}
		}
		case 540:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 542:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1014; }
				case 5: { componentid = 1015; }
				case 6: { componentid = 1018; }
				case 7: { componentid = 1019; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
				case 28: { componentid = 1144; }
				case 29: { componentid = 1145; }
			}
		}
		case 546:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 547:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
				case 29: { componentid = 1142; }
				case 30: { componentid = 1143; }
			}
		}
		case 549:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1011; }
				case 8: { componentid = 1012; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 550:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 551:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 558:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1088; }
				case 20: { componentid = 1089; }
				case 21: { componentid = 1090; }
				case 22: { componentid = 1091; }
				case 23: { componentid = 1092; }
				case 24: { componentid = 1093; }
				case 25: { componentid = 1094; }
				case 26: { componentid = 1095; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1163; }
				case 31: { componentid = 1164; }
				case 32: { componentid = 1165; }
				case 33: { componentid = 1166; }
				case 34: { componentid = 1167; }
				case 35: { componentid = 1168; }
			}
		}
		case 559:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1065; }
				case 6: { componentid = 1066; }
				case 7: { componentid = 1067; }
				case 8: { componentid = 1068; }
				case 9: { componentid = 1069; }
				case 10: { componentid = 1070; }
				case 11: { componentid = 1071; }
				case 12: { componentid = 1072; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1158; }
				case 31: { componentid = 1159; }
				case 32: { componentid = 1160; }
				case 33: { componentid = 1161; }
				case 34: { componentid = 1162; }
				case 35: { componentid = 1173; }
			}
		}
		case 560:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1026; }
				case 6: { componentid = 1027; }
				case 7: { componentid = 1028; }
				case 8: { componentid = 1029; }
				case 9: { componentid = 1030; }
				case 10: { componentid = 1031; }
				case 11: { componentid = 1032; }
				case 12: { componentid = 1033; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1138; }
				case 31: { componentid = 1139; }
				case 32: { componentid = 1140; }
				case 33: { componentid = 1141; }
				case 34: { componentid = 1169; }
				case 35: { componentid = 1170; }
			}
		}
		case 561:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1055; }
				case 6: { componentid = 1056; }
				case 7: { componentid = 1057; }
				case 8: { componentid = 1058; }
				case 9: { componentid = 1059; }
				case 10: { componentid = 1060; }
				case 11: { componentid = 1061; }
				case 12: { componentid = 1062; }
				case 13: { componentid = 1063; }
				case 14: { componentid = 1064; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1154; }
				case 33: { componentid = 1155; }
				case 34: { componentid = 1156; }
				case 35: { componentid = 1157; }
			}
		}
		case 562:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1034; }
				case 6: { componentid = 1035; }
				case 7: { componentid = 1036; }
				case 8: { componentid = 1037; }
				case 9: { componentid = 1038; }
				case 10: { componentid = 1039; }
				case 11: { componentid = 1040; }
				case 12: { componentid = 1041; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1146; }
				case 31: { componentid = 1147; }
				case 32: { componentid = 1148; }
				case 33: { componentid = 1149; }
				case 34: { componentid = 1171; }
				case 35: { componentid = 1172; }
			}
		}
		case 565:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1045; }
				case 6: { componentid = 1046; }
				case 7: { componentid = 1047; }
				case 8: { componentid = 1048; }
				case 9: { componentid = 1049; }
				case 10: { componentid = 1050; }
				case 11: { componentid = 1051; }
				case 12: { componentid = 1052; }
				case 13: { componentid = 1053; }
				case 14: { componentid = 1054; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1150; }
				case 33: { componentid = 1151; }
				case 34: { componentid = 1152; }
				case 35: { componentid = 1153; }
			}
		}
		case 567:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1102; }
				case 23: { componentid = 1129; }
				case 24: { componentid = 1130; }
				case 25: { componentid = 1131; }
				case 26: { componentid = 1132; }
				case 27: { componentid = 1133; }
				case 28: { componentid = 1186; }
				case 29: { componentid = 1187; }
				case 30: { componentid = 1188; }
				case 31: { componentid = 1189; }
			}
		}
		case 575:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1042; }
				case 6: { componentid = 1043; }
				case 7: { componentid = 1044; }
				case 8: { componentid = 1073; }
				case 9: { componentid = 1074; }
				case 10: { componentid = 1075; }
				case 11: { componentid = 1076; }
				case 12: { componentid = 1077; }
				case 13: { componentid = 1078; }
				case 14: { componentid = 1079; }
				case 15: { componentid = 1080; }
				case 16: { componentid = 1081; }
				case 17: { componentid = 1082; }
				case 18: { componentid = 1083; }
				case 19: { componentid = 1084; }
				case 20: { componentid = 1085; }
				case 21: { componentid = 1087; }
				case 22: { componentid = 1096; }
				case 23: { componentid = 1097; }
				case 24: { componentid = 1098; }
				case 25: { componentid = 1099; }
				case 26: { componentid = 1174; }
				case 27: { componentid = 1175; }
				case 28: { componentid = 1176; }
				case 29: { componentid = 1177; }
			}
		}
		case 576:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1134; }
				case 23: { componentid = 1135; }
				case 24: { componentid = 1136; }
				case 25: { componentid = 1137; }
				case 26: { componentid = 1190; }
				case 27: { componentid = 1191; }
				case 28: { componentid = 1192; }
				case 29: { componentid = 1193; }
			}
		}
		case 580:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1023; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 585:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 589:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1016; }
				case 11: { componentid = 1017; }
				case 12: { componentid = 1018; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1024; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 600:
		{
			switch(count)
			{
				case 1: { componentid = 1004; }
				case 2: { componentid = 1005; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1022; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
			}
		}
		case 603:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1024; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 402,403,406..409,411..414,416,419,423,424,427..429,431..435,437,438,440..445,448,450,451,455..459,461..463,466..468,470,471,474,475,479..486,490,494,495,498,499,502..510,514,515,521..526,528,530..533,541,552,543..545,554..557,566,568,578,571..574,579,581..584,586..588,591,594,596..599,601,602,604..611:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
			}
		}
	}
	return componentid;
}
stock IsInvalidNosVehicle(vehicleid)
{
	#define MAX_INVALID_NOS_VEHICLES 52
 	new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
	{
		581,523,462,521,463,522,461,448,468,586,417,425,469,487,512,520,563,593,
		509,481,510,472,473,493,520,595,484,430,453,432,476,497,513,533,577,
		452,446,447,454,590,569,537,538,570,449,519,460,488,511,519,548,592
	};
	for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
	{
		if(GetVehicleModel(vehicleid) == InvalidNosVehicles[i]) return true;
	}
	return false;
}
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
		DivatInfo[index][playerid][dVan] = 1;
		DivatInfo[index][playerid][dPosX] = fOffsetX;
		DivatInfo[index][playerid][dPosY] = fOffsetY;
		DivatInfo[index][playerid][dPosZ] = fOffsetZ;
		DivatInfo[index][playerid][dRotX] = fRotX;
		DivatInfo[index][playerid][dRotY] = fRotY;
		DivatInfo[index][playerid][dRotZ] = fRotZ;
		DivatInfo[index][playerid][dScaleX] = fScaleX;
		DivatInfo[index][playerid][dScaleY] = fScaleY;
		DivatInfo[index][playerid][dScaleZ] = fScaleZ;
		DivatInfo[index][playerid][dmodelid] = modelid;
		SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
		if(index == SLOT_MASZK)
		{
			PlayerInfo[playerid][pMaszkVisel] = true;
			PlayerInfo[playerid][pMaszk] = modelid;
		}
	}
    else
    {
       if(DivatInfo[index][playerid][dVan] == 1)
	   {
			SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], boneid, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
	   }
	   else
	   {
			RemovePlayerAttachedObject(playerid,index);
			DivatInfo[index][playerid][dPosX] = 0;
			DivatInfo[index][playerid][dPosY] = 0;
			DivatInfo[index][playerid][dPosZ] = 0;
			DivatInfo[index][playerid][dRotX] = 0;
			DivatInfo[index][playerid][dRotY] = 0;
			DivatInfo[index][playerid][dRotZ] = 0;
			DivatInfo[index][playerid][dScaleX] = 0;
			DivatInfo[index][playerid][dScaleY] = 0;
			DivatInfo[index][playerid][dScaleZ] = 0;
			DivatInfo[index][playerid][dmodelid] = 0;
	   }
    }
    return 1;
}
fpublic AdoResz(ki)
{
	//Null
	new mennyitkellfizetnie = 0;

	//Kocsi Rendszer Adózása!
	for(new idx=0;idx<MAX_HAZ_JARMU;idx++)
	{
		new id = PlayerInfo[ki][pJarmuKulcs][idx];
		if(id != NINCS && vInfo[id][vHasznalva])
		{
			switch(vInfo[id][vModel])
			{
				case 411:{mennyitkellfizetnie += 1000;}
				case 451:{mennyitkellfizetnie += 950;}
				case 541:{mennyitkellfizetnie += 950;}
				case 415:{mennyitkellfizetnie += 900;}
				case 522:{mennyitkellfizetnie += 500;}
				case 470:{mennyitkellfizetnie += 2000;}
				case 560:{mennyitkellfizetnie += 300;}
				case 481:{mennyitkellfizetnie += 0;}
				case 509:{mennyitkellfizetnie += 0;}
				case 510:{mennyitkellfizetnie += 0;}
				default: { mennyitkellfizetnie += 100;}
			}
		}
	}
	//Végeredménye!
	return mennyitkellfizetnie;
}

fpublic HazAdoResz(ki)
{
    //Null
    new hazado = 0;

    new id = PlayerInfo[ki][pHazKulcs][0];
    if(id != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 250;} // Lakás
            case 2:{hazado += 300;} // GN
            case 3:{hazado += 250;} // LS
            case 4:{hazado += 180;} // Gettó
            case 5:{hazado += 200;} // Falu
        }
    }
	new id2 = PlayerInfo[ki][pHazKulcs][1];
    if(id2 != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 250;} // Lakás
            case 2:{hazado += 300;} // GN
            case 3:{hazado += 250;} // LS
            case 4:{hazado += 180;} // Gettó
            case 5:{hazado += 200;} // Falu
        }
    }
	new id3 = PlayerInfo[ki][pHazKulcs][2];
    if(id3 != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 250;} // Lakás
            case 2:{hazado += 300;} // GN
            case 3:{hazado += 250;} // LS
            case 4:{hazado += 180;} // Gettó
            case 5:{hazado += 200;} // Falu
        }
    }
    //Végeredménye!
    return hazado;
}

fpublic Villanysz(ki)
{
    //Null
    new hazado = 0;

    new id = PlayerInfo[ki][pHazKulcs][0];
    if(id != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 80;} // Lakás
            case 2:{hazado += 100;} // GN
            case 3:{hazado += 80;} // LS
            case 4:{hazado += 40;} // Gettó
            case 5:{hazado += 50;} // Falu
        }
    }
	new id2 = PlayerInfo[ki][pHazKulcs][1];
    if(id2 != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 80;} // Lakás
            case 2:{hazado += 100;} // GN
            case 3:{hazado += 80;} // LS
            case 4:{hazado += 40;} // Gettó
            case 5:{hazado += 50;} // Falu
        }
    }
	new id3 = PlayerInfo[ki][pHazKulcs][2];
    if(id3 != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 80;} // Lakás
            case 2:{hazado += 100;} // GN
            case 3:{hazado += 80;} // LS
            case 4:{hazado += 40;} // Gettó
            case 5:{hazado += 50;} // Falu
        }
    }
    //Végeredménye!
    return hazado;
}

fpublic SerialBanCheck(ki,playerid)
{
	new gpcid[200];
	gpci(ki,gpcid,sizeof(gpcid));
	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
		SCM(ki,COL_LRED,"Te Kivagy Tiltva a Szerverrõl!");
        Kick(ki);
	}
}

#define TEARGAS_IDO 30 //másodperc
#define MAX_TEARGAS 50
enum e_tGas //Teargas
{
	tgVan,
	Float:tgPos[3],
	tgInt,
	tgVW,
	tgObject,
	tgIdo
};
new g_TearGas[MAX_TEARGAS][e_tGas];
new Iterator:Teargas<MAX_TEARGAS>;

stock Streamer_UpdateAll()
{
	foreach(Player, i)
	    Streamer_Update(i);
}
stock Streamer_UpdateAllEx(Float:x, Float:y, Float:z, vw = NINCS, interior = NINCS)
{
	foreach(Player, i)
	    Streamer_UpdateEx(i, x, y, z, vw, interior);
}

task t_Teargas[2000]()
{
	foreach(Teargas, t)
	{
	    if(!g_TearGas[t][tgVan]) continue;
	    
	    g_TearGas[t][tgIdo] -= 2;
	    
	    if(g_TearGas[t][tgIdo] <= 0)
	    {
	        g_TearGas[t][tgIdo] = 0;
	        g_TearGas[t][tgVan] = false;
	        DestroyDynamicObject(g_TearGas[t][tgObject]);
	        Iter_Remove(Teargas, t);
	        continue;
	    }
	    
	    foreach(Player, i)
	    {
	        if(PlayerInfo[i][pGazmaszkFenn] == true) continue;
	        
	        if(GetPlayerInterior(i) != g_TearGas[t][tgInt] || GetPlayerVirtualWorld(i) != g_TearGas[t][tgVW] || PlayerInfo[i][pAnimban][0] != 0 || !IsPlayerInRangeOfPoint(i, 15.0, posArr{g_TearGas[t][tgPos]})) continue;
	        ApplyAnimation(i ,"ped","gas_cwr",4.1,0,0,0,0,0,0);
	    }
	}
	return 1;
}
stock createTearGas(Float:x, Float:y, Float:z, tgint, tgvw)
{
	new i = NINCS, id = NINCS;
	for(; ++i < MAX_TEARGAS;)
	{
	    if(g_TearGas[i][tgVan]) continue;
	    id = i;
	    break;
	}
	if(id != NINCS)
	{
		g_TearGas[id][tgVan] = true;
		g_TearGas[id][tgPos][0] = x, g_TearGas[id][tgPos][1] = y, g_TearGas[id][tgPos][2] = z;
		g_TearGas[id][tgInt] = tgint;
		g_TearGas[id][tgVW] = tgvw;
		g_TearGas[id][tgIdo] = TEARGAS_IDO;
		
	    g_TearGas[id][tgObject] = CreateDynamicObject(2780, x, y, z, 0.0, 0.0, 0.0, tgvw, tgint);
	    Streamer_UpdateAllEx(x, y, z, tgvw, tgint);
	    Iter_Add(Teargas, id);
 	}
	return id;
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(hittype == BULLET_HIT_TYPE_NONE && ((fX > WB_MAX_X || fX < WB_MIN_X) || (fY > WB_MAX_Y || fY < WB_MIN_Y) || (fZ > 20000.0 || fZ < -20000.0)))
  		return 0;

 	if(hittype == BULLET_HIT_TYPE_PLAYER && ((fX > 25.0 || fX < -25.0) || (fY > 25.0 || fY < -25.0) || (fZ > 25.0 || fZ < -25.0)))
  		return 0;

 	if(hittype == BULLET_HIT_TYPE_VEHICLE && ((fX > 250.0 || fX < -250.0) || (fY > 250.0 || fY < -250.0) || (fZ > 250.0 || fZ < -250.0)))
  		return 0;

 	if(hittype == BULLET_HIT_TYPE_OBJECT || hittype == BULLET_HIT_TYPE_PLAYER_OBJECT && ((fX > 1000.0 || fX < -1000.0) || (fY > 1000.0 || fY < -1000.0) || (fZ > 1000.0 || fZ < -1000.0)))
  		return 0;

	new Float:fOrigin[3], Float:fTarget[3];
 	GetPlayerLastShotVectors(playerid, fOrigin[0], fOrigin[1], fOrigin[2], fTarget[0], fTarget[1], fTarget[2]);

 	if((fOrigin[0] > WB_MAX_X || fOrigin[0] < WB_MIN_X) || (fOrigin[1] > WB_MAX_Y || fOrigin[1] < WB_MIN_Y) || (fOrigin[2] > 20000.0 || fOrigin[2] < -20000.0))
  		return 0;

 	if((fTarget[0] > WB_MAX_X || fTarget[0] < WB_MIN_X) || (fTarget[1] > WB_MAX_Y || fTarget[1] < WB_MIN_Y) || (fTarget[2] > 20000.0 || fTarget[2] < -20000.0))
  		return 0;
/*
	if(!g_Fegyverek[playerid][weaponid])
	{
	    ResetPlayerWeapons(playerid);
		SeeKick(playerid, "Fegyver hack");
	}*/
	if(!PlayerInfo[playerid][pFegyver] && AntiFlood[playerid] == 0)
	{
		AF(playerid);
		if(Iter_Count(Adminok) > 0)
		{
			nformat(string, 128, "[AC]: {1E90FF}[%d]%s - Cheat: Fegyver[4] - (%s)", playerid, JatekosNev(playerid), (Admin(playerid, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
			AdminUzenetEx(RED, 1001, string);
			Log(FILE_CHEAT, string);
			ResetPlayerWeapons(playerid);

			if(!Admin(playerid, FOADMIN_SZINT)) ServerBan(playerid, 0, "[AC] Fegyver Cheat[4]", NINCS, (!Belepve(playerid) ? true : false), true, true);
		} else {
			SendClientMessage(playerid,LKEK,"[AC]: {FF6347}Nana..Csak nem fegyvert cheateltünk?");
			Kick(playerid);
		}
	}
	if(hittype == BULLET_HIT_TYPE_VEHICLE)
	{
	    vehlastshot[hitid] = gettime();
	}
	if(PlayerInfo[playerid][pMergezoLovedekek] > 0 && PlayerInfo[playerid][pMergezoMod] == 1)
	{
		PlayerInfo[playerid][pMergezoLovedekek]--;
		SFM(playerid,COL_VZOLD,"Maradt még "#COL_LKEK"%d"#COL_FEHER"db mérgezõ lövedéked!",PlayerInfo[playerid][pMergezoLovedekek]);
		if(PlayerInfo[playerid][pMergezoLovedekek] == 0)
			SCM(playerid,COL_LRED,"Elfogyott a mérgezett lövedék a fegyveredbõl! Visszaváltva normál módra!");

		OnePlayAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
	}
    if(hittype == BULLET_HIT_TYPE_PLAYER && (AntiCrasher(fX) || AntiCrasher(fY) || AntiCrasher(fZ)))
	{
		SeeKick(playerid,"BulletCrasher",NINCS);
		return 0;
	}
	if(weaponid == 17 && PlayerInfo[playerid][pFegyver] == weaponid)
	{
	    createTearGas(fX, fY, fZ, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	    Cselekves(playerid, "eldobott egy könnygáz gránátot");
	}
	if(Lofegyver(weaponid))
	{
	    AF(playerid);
	    new slot = aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ], wep;
		GetPlayerWeaponData(playerid, slot, wep, PlayerInfo[playerid][pToltenyek][ slot ]);
	    if(PlayerInfo[playerid][pToltenyek][ slot ] == 2)
	    {
			PlayerInfo[playerid][pToltenyek][ slot ] = 1;
		 	
		 	Fegyver(playerid, false);
			PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
			SCM(playerid, COL_MKEK, "Elfogyott a lõszer!");
  		}
 	}
	if(hittype == BULLET_HIT_TYPE_PLAYER)
	{
		if(PlayerInfo[playerid][pUzemmod] == 1)
		{
			if(GetPlayerWeapon(playerid) == 24)
			{
				if(PlayerToPlayer( hitid, playerid, 15.0 ) ) //csak adott körzetben menjen
				{
					TogglePlayerControllable(hitid, false);
					defer Sokk[20000](hitid);
					LoopingAnim(hitid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
					SCM(hitid, COL_LRED, "Egy rendõr lesokkolt!");
					SCM(playerid, COL_LRED, "Lesokkoltad!");
					return false;
				}
			}
		}
	}
    return 1;
}
timer CCTVKeyTimer[75](playerid)
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
	if(CurrentCCTV[playerid] > -1)
	{
	    if(leftright == KEY_RIGHT)
	  	{
	  	    if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] - 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] - 0.5);
			}
	  	    if(CCTVDegree[playerid] < 0)
	  	    {
	  	        CCTVDegree[playerid] = 359;
			}
	  	    MovePlayerCCTV(playerid);

		}
	    if(leftright == KEY_LEFT)
	    {
	        if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] + 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] + 0.5);
			}
			if(CCTVDegree[playerid] >= 360)
	  	    {
	  	        CCTVDegree[playerid] = 0;
			}
	        MovePlayerCCTV(playerid);

	    }
	    if(updown == KEY_UP)
	    {
	        if(CCTVRadius[playerid] < 25)
	        {
		        if(keys == KEY_SPRINT)
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.5);
		        	MovePlayerCCTV(playerid);
				}
				else
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.1);
		        	MovePlayerCCTV(playerid);
				}
			}
		}
		if(updown == KEY_DOWN)
	    {
			if(keys == KEY_SPRINT)
			{
			    if(CCTVRadius[playerid] >= 0.6)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.5);
			       	MovePlayerCCTV(playerid);
				}
			}
			else
			{
			    if(CCTVRadius[playerid] >= 0.2)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.1);
			       	MovePlayerCCTV(playerid);
				}
			}
		}
		if(keys == KEY_CROUCH)
		{
		    cmd_cctv(playerid,"ki");
		}
	}
	MovePlayerCCTV(playerid);
}

fpublic MovePlayerCCTV(playerid)
{
	CCTVLA[playerid][0] = CCTVLAO[CurrentCCTV[playerid]][0] + (floatmul(CCTVRadius[playerid], floatsin(-CCTVDegree[playerid], degrees)));
	CCTVLA[playerid][1] = CCTVLAO[CurrentCCTV[playerid]][1] + (floatmul(CCTVRadius[playerid], floatcos(-CCTVDegree[playerid], degrees)));
	SetPlayerCameraLookAt(playerid, CCTVLA[playerid][0], CCTVLA[playerid][1], CCTVLA[playerid][2]);
}

fpublic KameranalVan(playerid)
{
	new kamera = NINCS;
	for(new cctv=0; cctv < MAX_CCTVS; cctv++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 70,CCTVCP[cctv][0],CCTVCP[cctv][1],CCTVCP[cctv][2]))
		{
			kamera = cctv;
			break;
		}
	}
	return kamera;
}
stock AddCCTV(name[], Float:X, Float:Y, Float:Z, Float:Angle, int=0, vw=0)
{
	if(TotalCCTVS >= MAX_CCTVS) return 0;
	format(CameraName[TotalCCTVS], 32, "%s", name);
	CCTVCP[TotalCCTVS][0] = X;
	CCTVCP[TotalCCTVS][1] = Y;
	CCTVCP[TotalCCTVS][2] = Z;
	CCTVCP[TotalCCTVS][3] = Angle;
	CCTVLAO[TotalCCTVS][0] = X;
	CCTVLAO[TotalCCTVS][1] = Y;
	CCTVLAO[TotalCCTVS][2] = Z-10;
	CCTVEgyeb[TotalCCTVS][0] = int;
	CCTVEgyeb[TotalCCTVS][1] =  vw;
	TotalCCTVS++;
	return TotalCCTVS-1;
}

stock SetPlayerToCCTVCamera(playerid, CCTV)
{
	if(CCTV >= TotalCCTVS)
	{
	    SCM(playerid, COL_LRED,"Kamera Hiba!");
	    return 1;
	}
	if(CurrentCCTV[playerid] == -1)
    {
	    GetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
		GetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
        LastPos[playerid][LInterior] = GetPlayerInterior(playerid);
	}
	else
	{
		stop PlayerTimers[playerid][PT_OPUP];
	}
	CurrentCCTV[playerid] = CCTV;
    TogglePlayerControllable(playerid, 0);
	//SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], (CCTVCP[CCTV][2]-50));
	SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], -40.0);
	SetPlayerCameraPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], CCTVCP[CCTV][2]);
	SetPlayerCameraLookAt(playerid, CCTVLAO[CCTV][0], (CCTVLAO[CCTV][1]+0.2), CCTVLAO[CCTV][2]);
	SetInterior(playerid,CCTVEgyeb[TotalCCTVS][0], false);
	SetVirtualWorld(playerid,CCTVEgyeb[TotalCCTVS][1], false);
	CCTVLA[playerid][0] = CCTVLAO[CCTV][0];
	CCTVLA[playerid][1] = CCTVLAO[CCTV][1]+0.2;
	CCTVLA[playerid][2] = CCTVLAO[CCTV][2];
	CCTVRadius[playerid] = 12.5;
	CCTVDegree[playerid] = CCTVCP[CCTV][3];
	MovePlayerCCTV(playerid);
    PlayerTimers[playerid][PT_OPUP] = repeat CCTVKeyTimer[75](playerid);
	return 1;
}
public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}
fpublic HifiLoad()
{
	print("Szerver: Hifik betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i= -1,h;
		for(;++i < nums;)
	    {
			mysql_get_int(i, "ID", h);
			HifiInfo[h][hID] = h;
			HifiInfo[h][hVan] = 1;
			mysql_get_float(i, "X", HifiInfo[h][hX]);
			mysql_get_float(i, "Y", HifiInfo[h][hY]);
			mysql_get_float(i, "Z", HifiInfo[h][hZ]);
			mysql_get_float(i, "RX", HifiInfo[h][hRx]);
			mysql_get_float(i, "RY", HifiInfo[h][hRy]);
			mysql_get_float(i, "RZ", HifiInfo[h][hRz]);
			mysql_get_string(i, "Lerako", HifiInfo[h][hLerako]);
			HifiInfo[h][hObject] = CreateDynamicObject(2226,HifiInfo[h][hX],HifiInfo[h][hY],HifiInfo[h][hZ],HifiInfo[h][hRx],HifiInfo[h][hRy],HifiInfo[h][hRz]);
		}
	}
	printf("Szerver: %d Hifi betöltve!", nums);
	return true;
}
//traffipax public
forward LoadCam(cameraid,name[],value[]);
public LoadCam(cameraid,name[],value[])
{
	INI_Int("_id",SpeedCameras[cameraid][_id]);
	INI_Float("_x",SpeedCameras[cameraid][_x]);
	INI_Float("_y",SpeedCameras[cameraid][_y]);
	INI_Float("_z",SpeedCameras[cameraid][_z]);
	INI_Float("_rot",SpeedCameras[cameraid][_rot]);
	INI_Int("_range",SpeedCameras[cameraid][_range]);
	INI_Int("_limit",SpeedCameras[cameraid][_limit]);
	INI_Int("_fine",SpeedCameras[cameraid][_fine]);
	INI_Int("_usemph",SpeedCameras[cameraid][_usemph]);
	INI_Bool("_activelabel",SpeedCameras[cameraid][_activelabel]);
	INI_String("_labeltxt",SpeedCameras[cameraid][_labeltxt],128);
	INI_Int("_eddiggyujtott",SpeedCameras[cameraid][_eddiggyujtott]);
	INI_Int("_hovamenjen",SpeedCameras[cameraid][_hovamenjen]);
	return 1;
}
//traffipax public vége

fpublic KameraLoad()
{
	print("Szerver: CCTV Kamerák betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1;
		new Nev[32],Float:X,Float:Y,Float:Z,Float:Angle,Interior,VW;
	    for(;++i < nums;)
	    {
			mysql_get_string(i, "Nev", Nev);
			mysql_get_float(i, "X", X);
			mysql_get_float(i, "Y", Y);
			mysql_get_float(i, "Z", Z);
			mysql_get_float(i, "A", Angle);
			mysql_get_int(i, "Interior", Interior);
			mysql_get_int(i, "VW", VW);
			AddCCTV(Nev, X, Y, Z, Angle, Interior, VW);
		}
	}
	printf("Szerver: %d CCTV Kamera Sikeresen betöltve!", nums);
	return true;
}

fpublic DrinkLoad()
{
	print("Szerver: Drink pontok betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1,c;
	    for(;++i < nums;)
	    {
			mysql_get_int(i,"ID",c);
			DrinkInfo[c][dVan] = 1;
			DrinkInfo[c][dID] = c;
			mysql_get_float(i, "X", DrinkInfo[c][dX]);
			mysql_get_float(i, "Y", DrinkInfo[c][dY]);
			mysql_get_float(i, "Z", DrinkInfo[c][dZ]);
			DrinkInfo[c][dText] = CreateDynamic3DTextLabel("(( /drink ))", COLOR_MKEK, DrinkInfo[c][dX], DrinkInfo[c][dY], DrinkInfo[c][dZ], 20.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 1);
		}
	}
	printf("Szerver: %d Drink pontok betöltve!", nums);
	return true;
}
fpublic GraffitiLoad()
{
	print("Szerver: Grafitik betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1,idx = 0;
	    for(;++i < nums;)
	    {
	        mysql_get_int(i, "ID", idx);
	        TagInfo[idx][tID] = idx;
			mysql_get_float(i, "X", TagInfo[idx][tPoz][0]);
			mysql_get_float(i, "Y", TagInfo[idx][tPoz][1]);
			mysql_get_float(i, "Z", TagInfo[idx][tPoz][2]);
			mysql_get_float(i, "Rx", TagInfo[idx][tRot][0]);
			mysql_get_float(i, "Ry", TagInfo[idx][tRot][1]);
			mysql_get_float(i, "Rz", TagInfo[idx][tRot][2]);
			mysql_get_int(i, "Festve", TagInfo[idx][tFestveVan]);
			TagInfo[idx][tKesz] = TAG_FELFESTESIDO;
			mysql_get_int(i, "GraffitiObject", TagInfo[idx][tGraffitiObject]);
			mysql_get_int(i, "Tulaj", TagInfo[idx][tTulaj]);
			TagInfo[idx][tVan] = 1;
			TagInfo[idx][tText] = CreateDynamic3DTextLabel("- Graffiti hely -", 0xff0000AA, TagInfo[idx][tPoz][0], TagInfo[idx][tPoz][1], TagInfo[idx][tPoz][2], 20.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 1);
			if(TagInfo[idx][tGraffitiObject] != 0)
			{
				TagInfo[idx][tObject] = CreateDynamicObject(TagInfo[idx][tGraffitiObject],TagInfo[idx][tPoz][0],TagInfo[idx][tPoz][1],TagInfo[idx][tPoz][2],TagInfo[idx][tRot][0],TagInfo[idx][tRot][1],TagInfo[idx][tRot][2]);
			}
		}
	}
	printf("Szerver: %d Grafiti Sikeresen betöltve!", nums);
	return true;
}
fpublic TorlesPlayerObject(playerid)
{
	SCM(playerid,COL_MKEK, "Felraktad a Kocsira");
	RemovePlayerAttachedObject(playerid, VasNala[playerid]);
	VasNala[playerid] = -1;
	VasPlayerID[playerid] = 0;
	
	return 1;
}

fpublic LerakVas(playerid)
{
    if(VasNala[playerid] == -1) return 1;
   	new o = 0;
	for(new i = 0; i < MAX_VAS; i++)
	{
		if(Vas[i][vasVan] == 0)
		{
			o = i;
			break;
		}
	}
	Vas[o][vasVan] = 1;
	new Float:k[4];
	GetPlayerPos(playerid, k[0], k[1], k[2]);
	GetPlayerFacingAngle(playerid, k[3]);
	Vas[o][Vasx] = k[0];
	Vas[o][Vasy] = k[1];
	Vas[o][Vasz] = k[2];
	Vas[o][vasrz] = k[3];
	Vas[o][vasVasID] = o;
	new id = o;
	if(VasPlayerID[playerid] == 1791)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-1.0, 0.0, 0.0, k[3]);
	else if(VasPlayerID[playerid] == 1208)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-1.0, 0.0, 0.0, k[3]);
    else if(VasPlayerID[playerid] == 1738)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-0.85, 90.0, 0.0, k[3]);
    else if(VasPlayerID[playerid] == 2371)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-1.0, 0.0, 0.0, k[3]);
    else if(VasPlayerID[playerid] == 1790)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-0.95, 0.0, 0.0, k[3]);
    else if(VasPlayerID[playerid] == 2597)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-0.15, 0.0, 0.0, k[3]);
	Vas[id][vasModelID] = VasPlayerID[playerid];
	VasPlayerID[playerid] = 0;
	VasNala[playerid] = -1;
	RemovePlayerAttachedObject(playerid, SLOT_JOBBKEZ);
	ClearAnimations(playerid, 1);
	SetPlayerPos(playerid, k[0], k[1]+0.5, k[2]);
	ClearAnimations(playerid, 1);
	ClearAnimations(playerid, 1);
	ClearAnimations(playerid, 1);
	return 1;
}
fpublic VasTorol(id)
{
	DestroyDynamicObject(Vas[id][vasObject]);
	Vas[id][vasVan] = 0;
	Vas[id][Vasx] = 0.0;
	Vas[id][Vasy] = 0.0;
	Vas[id][Vasz] = 0.0;
	Vas[id][vasrz] = 0.0;
	return 1;
}
fpublic UjVasObject(id, Float:vx, Float:vy, Float:vz, Float:vrz)
{
	switch(random(6))
	{
		case 0:
		{
			Vas[id][vasObject] = CreateDynamicObject(1791, vx, vy, vz-1.0, 0.0, 0.0, vrz);
			Vas[id][vasModelID] = 1791;
		}
		case 1:
		{
			Vas[id][vasObject] = CreateDynamicObject(1208, vx, vy, vz-1.0, 0.0, 0.0, vrz);//Mosógép
			Vas[id][vasModelID] = 1208;
		}
		case 2:
		{
			Vas[id][vasObject] = CreateDynamicObject(1738, vx, vy, vz-0.85, 90.0, 0.0, vrz);
			Vas[id][vasModelID] = 1738;
		}
		case 3:
		{
			Vas[id][vasObject] = CreateDynamicObject(1790, vx, vy, vz-0.95, 0.0, 0.0, vrz);
			Vas[id][vasModelID] = 1790;
		}
		case 4:
		{
			Vas[id][vasObject] = CreateDynamicObject(2597, vx, vy, vz-0.15, 0.0, 0.0, vrz);
			Vas[id][vasModelID] = 2597;
		}
		case 5:
		{
			Vas[id][vasObject] = CreateDynamicObject(2597, vx, vy, vz-0.15, 0.0, 0.0, vrz);
			Vas[id][vasModelID] = 2597;
		}
		default:
		{
			Vas[id][vasObject] = CreateDynamicObject(1790, vx, vy, vz-0.95, 0.0, 0.0, vrz);
			Vas[id][vasModelID] = 1790;
		}
	}
	return 1;
}
fpublic AlapVas()
{
	for(new a=0;a<MAX_VAS;a++)
	{
		Vas[a][Vasx] = 0.0;
		Vas[a][Vasy] = 0.0;
		Vas[a][Vasz] = 0.0;
		DestroyDynamicObject(Vas[a][vasObject]);
	}
	for(new i = 0;i < MAX_VAS; i++)
	{
		Vas[i][vasVan] = 1;
		Vas[i][Vasx] = vasak[i][xx];
		Vas[i][Vasy] = vasak[i][yy];
		Vas[i][Vasz] = vasak[i][zz];
		Vas[i][vasrz] = vasak[i][rzz];
		Vas[i][vasVasID] = i;
		UjVasObject(i, Vas[i][Vasx], Vas[i][Vasy], Vas[i][Vasz], Vas[i][vasrz]);
	}
}
fpublic LomisTorol(kocsid)
{
	for(new i=0;i<14;i++)
	{
		DestroyDynamicObject(KoicsraObject[i][kocsid]);
	}
	KocsinObject[kocsid] = 0;
	KocsinObject1[kocsid] = 0;
	KocsinObject2[kocsid] = 0;
	KocsinObject3[kocsid] = 0;
	KocsinObject4[kocsid] = 0;
	KocsinDarab[kocsid] = 0;
	Alvany[kocsid] = 0;
	Mosogep[kocsid] = 0;
	Tv[kocsid] = 0;
	Radiator[kocsid] = 0;
	Video[kocsid] = 0;
	return 1;
}
timer Firkalemos[15000](playerid,firka)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	Tag_Lathato(firka,false);
	TagInfo[firka][tFestveVan] = 0;
	TagInfo[firka][tKesz] = TAG_FELFESTESIDO;
	TagInfo[firka][tTulaj] = 0;
	TagInfo[firka][tGraffitiObject] = 0;
	SCM(playerid,COL_LRED,"Lemostad a firkát!");
	Cselekves(playerid,"lemosta a falról a firkát",0);
	TagUpdateAll(firka);
	return 1;
}

fpublic KovetkezoTAGSlot()
{
	new tag = NINCS;
	for(new i=0; i < MAX_TAG; i++)
	{
	    if(TagInfo[i][tVan] == 0)
	    {
	        tag = i;
	        break;
	    }
	}
	return tag;
}
fpublic AddTag(Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ)
{
	new slot = KovetkezoTAGSlot();
	TagInfo[slot][tVan] = 1;
	TagInfo[slot][tFestveVan] = 0;

	TagInfo[slot][tPoz][0] = X;
	TagInfo[slot][tPoz][1] = Y;
	TagInfo[slot][tPoz][2] = Z;
	TagInfo[slot][tRot][0] = rX;
	TagInfo[slot][tRot][1] = rY;
	TagInfo[slot][tRot][2] = rZ;
	TagInfo[slot][tGraffitiObject] = 0;
	TagInfo[slot][tTulaj] = 0;
	TagInfo[slot][tID] = slot;
	TagInfo[slot][tKesz] = TAG_FELFESTESIDO;
	TagInfo[slot][tText] = CreateDynamic3DTextLabel("- Graffiti hely -", 0xff0000AA, X, Y, Z, 20.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 1);

	doQuery("INSERT INTO `"#MYSQL_SPRAY_TABLA"`(ID,X, Y, Z, Rx, Ry, Rz, Festve, Tulaj) VALUES('%d','%f', '%f', '%f', '%f', '%f', '%f', '%d','%d')",slot,X,Y,Z,rX,rY,rZ,	TagInfo[slot][tFestveVan],	TagInfo[slot][tTulaj]);
	return 1;
}
stock Tag_Lathato(tagid,bool:lathato,banda=0)
{
	banda = TagInfo[tagid][tGraffitiObject];

	if(lathato && !IsValidDynamicObject(TagInfo[tagid][tObject]))
	{
		TagInfo[tagid][tObject] = CreateDynamicObject(banda,TagInfo[tagid][tPoz][0],TagInfo[tagid][tPoz][1],TagInfo[tagid][tPoz][2],TagInfo[tagid][tRot][0],TagInfo[tagid][tRot][1],TagInfo[tagid][tRot][2]);
	}
	else if(!lathato && IsValidDynamicObject(TagInfo[tagid][tObject]))
	    DestroyDynamicObject(TagInfo[tagid][tObject]);

	foreach(Player,i)
	{
		if(GetDistanceToTAG(i,tagid) < 30)
		{
			Streamer_UpdateEx(i,TagInfo[tagid][tPoz][0],TagInfo[tagid][tPoz][1],TagInfo[tagid][tPoz][2]);
		}
	}
    return 1;
}
fpublic Float:GetDistanceToTAG(playerid,tag)
{
	if (IsPlayerConnected(playerid) && TagInfo[tag][tVan] == 1)
	{
		return GetDistanceToPointEx(playerid,TagInfo[tag][tPoz][0],TagInfo[tag][tPoz][1],TagInfo[tag][tPoz][2]);
	}
	return INF_FLOAT;
}

stock GetFrakcioByTag(tag)
{
	#define GSF 0
	#define BALLAS 1
	#define VAGOS 2
	#define AZTEC 3
	#define NEGYEDIK 4
	if(tag == GSF) return 4;
	else if(tag == BALLAS) return 7;
	else if(tag == VAGOS) return 8;
	else if(tag == AZTEC) return 11;
	else if(tag == NEGYEDIK) return 19;

	return NINCS;
}
stock LegtobbTag(mikell)
{
	#define GSF 0
	#define BALLAS 1
	#define VAGOS 2
	#define AZTEC 3
	#define negyedik 4

	new Frakcio[5], Hely[2];
	for(new i = 0; i < 5; i++)
		Frakcio[i] = 0;

	for(new i = 0; i < MAX_TAG; i++)
	{
		if(TagInfo[i][tTulaj] == 4)
			Frakcio[GSF] ++;
		else if(TagInfo[i][tTulaj] == 7)
			Frakcio[BALLAS] ++;
		else if(TagInfo[i][tTulaj] == 8)
			Frakcio[VAGOS] ++;
		else if(TagInfo[i][tTulaj] == 11)
			Frakcio[AZTEC] ++;
		else if(TagInfo[i][tTulaj] == 19)
			Frakcio[negyedik] ++;
	}
	if(Frakcio[GSF] == 0 && Frakcio[BALLAS] == 0 && Frakcio[VAGOS] == 0 && Frakcio[AZTEC] == 0 && Frakcio[negyedik] == 0)
		return NINCS;

	Hely[0] = Legnagyobb2(Frakcio);
	Hely[1] = Legnagyobb(Frakcio[0],Frakcio[1],Frakcio[2],Frakcio[3]);
	if(mikell == 0)
	{
		return Hely[0];
	}
	else if(mikell == 1)
		return Hely[1];

	return NINCS;
}
stock Legnagyobb(...)
{
    new
        i = numargs(),
        //h,
        s = cellmin;
    while (i--)
    {
        if (getarg(i) > s)
        {
            //h = i;
            s = getarg(i);
        }
    }
	return s;
	//return h;
}

stock Legnagyobb2(arr[], size = sizeof (arr))
{
	new
        h,
        s = cellmin;

    while (size--)
    {
        if (arr[size] > s)
        {
            h = size;
            s = arr[size];
        }
    }
//  return s;
	return h;
}
fpublic Firka_OnPlayerUpdate(playerid)
{
	#define HOLDING(%0) ((newkeys & (%0)) == (%0))
	new newkeys,l,u;
	GetPlayerKeys(playerid, newkeys, l, u);
	if(HOLDING(KEY_FIRE))
	{
		new tag, Float:tavolsag;
		tag = GetClosestTAG(playerid);
		if(tag != -1)
		{
			tavolsag = GetDistanceToTAG(playerid,tag);
			new ellenseg;
			foreach(Player, x)
			{
				if(PlayerInfo[x][pFrakcio] == TagInfo[tag][tTulaj])
					ellenseg++;
			}
			new fk = PlayerInfo[playerid][pFrakcio];
			if(fk == 0 && TagInfo[tag][tTulaj] == 0)
			{
			    fk = 4;
			}
			if(GetPlayerWeapon(playerid) == 41 && tavolsag < 5.0 && TagInfo[tag][tKesz] > 0 && (FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_BANDA || PlayerInfo[playerid][pFrakcio] == 0) && TagInfo[tag][tTulaj] != fk)
			{
				TagInfo[tag][tKesz] --;
				if(TagInfo[tag][tKesz] == 1)
				{
					TagInfo[tag][tKesz] = 0;
					if(TagInfo[tag][tTulaj] != 0 && ellenseg >= 2)
					{
						Cselekves(playerid,"átcrossolt egy falfirkát",1);
						SCM(playerid,COL_LRED,"Átcrossoltál egy firkát");
					}
					else if(TagInfo[tag][tTulaj] == 0)
					{
						Cselekves(playerid,"felfestett a falra egy falfirkát",1);
						SCM(playerid,COL_LRED,"Felfestettél egy firkát");
					}
					if(PlayerInfo[playerid][pFrakcio] == 0)
					{
						new object = Rand(1,9);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18659;TagInfo[tag][tTulaj] = 4;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18660;TagInfo[tag][tTulaj] = 4;}
							case 3: {TagInfo[tag][tGraffitiObject] = 18661;TagInfo[tag][tTulaj] = 11;}
							case 4:
							{
								TagInfo[tag][tGraffitiObject] = 18662;
								new lehetseges = Rand(1,3);
								switch(lehetseges)
								{
									case 1:
									{
										TagInfo[tag][tTulaj] = 7;
									}
									case 2:
									{
										TagInfo[tag][tTulaj] = 8;
									}
									case 3:
									{
										TagInfo[tag][tTulaj] = 19;
									}
								}
							}
							case 5: {TagInfo[tag][tGraffitiObject] = 18663;TagInfo[tag][tTulaj] = 11;}
							case 6:
							{
								TagInfo[tag][tGraffitiObject] = 18664;
								new lehetseges = Rand(1,3);
								switch(lehetseges)
								{
									case 1:
									{
										TagInfo[tag][tTulaj] = 7;
									}
									case 2:
									{
										TagInfo[tag][tTulaj] = 8;
									}
									case 3:
									{
										TagInfo[tag][tTulaj] = 19;
									}
								}
							}
							case 7: {TagInfo[tag][tGraffitiObject] = 18665;TagInfo[tag][tTulaj] = 11;}
							case 8:
							{
								TagInfo[tag][tGraffitiObject] = 18666;
								new lehetseges = Rand(1,3);
								switch(lehetseges)
								{
									case 1:
									{
										TagInfo[tag][tTulaj] = 7;
									}
									case 2:
									{
										TagInfo[tag][tTulaj] = 8;
									}
									case 3:
									{
										TagInfo[tag][tTulaj] = 19;
									}
								}
							}
							case 9:
							{
								TagInfo[tag][tGraffitiObject] = 18667;
								new lehetseges = Rand(1,3);
								switch(lehetseges)
								{
									case 1:
									{
										TagInfo[tag][tTulaj] = 7;
									}
									case 2:
									{
										TagInfo[tag][tTulaj] = 8;
									}
									case 3:
									{
										TagInfo[tag][tTulaj] = 19;
									}
								}
							}
						}
					}
					if(PlayerInfo[playerid][pFrakcio] == 4)
					{
						new object = Rand(1,2);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18659;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18660;}
						}
						TagInfo[tag][tTulaj] = PlayerInfo[playerid][pFrakcio];
					}
					if(PlayerInfo[playerid][pFrakcio] == 7)
					{
						new object = Rand(1,4);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18660;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18664;}
							case 3: {TagInfo[tag][tGraffitiObject] = 18666;}
							case 4: {TagInfo[tag][tGraffitiObject] = 18667;}
						}
						TagInfo[tag][tTulaj] = PlayerInfo[playerid][pFrakcio];
					}
					if(PlayerInfo[playerid][pFrakcio] == 8)
					{
						new object = Rand(1,5);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18660;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18664;}
							case 3: {TagInfo[tag][tGraffitiObject] = 18666;}
							case 4: {TagInfo[tag][tGraffitiObject] = 18667;}
							case 5: {TagInfo[tag][tGraffitiObject] = 18662;}
						}
						TagInfo[tag][tTulaj] = PlayerInfo[playerid][pFrakcio];
					}
					if(PlayerInfo[playerid][pFrakcio] == 19)
					{
						new object = Rand(1,5);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18660;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18664;}
							case 3: {TagInfo[tag][tGraffitiObject] = 18666;}
							case 4: {TagInfo[tag][tGraffitiObject] = 18667;}
							case 5: {TagInfo[tag][tGraffitiObject] = 18662;}
						}
						TagInfo[tag][tTulaj] = PlayerInfo[playerid][pFrakcio];
					}
					if(PlayerInfo[playerid][pFrakcio] == 11)
					{
						new object = Rand(1,3);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18661;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18663;}
							case 3: {TagInfo[tag][tGraffitiObject] = 18665;}
						}
						TagInfo[tag][tTulaj] = PlayerInfo[playerid][pFrakcio];
					}
					Tag_Lathato(tag,false);
					Tag_Lathato(tag,true,PlayerInfo[playerid][pFrakcio]);
					TagInfo[tag][tFestveVan] = 1;
					TagInfo[tag][tKesz] = TAG_FELFESTESIDO;

					TagUpdateAll(tag);
				}
			}
		}
	}
}
fpublic TagUpdateAll(tagid)
{
	new tquery[1024];
	format(tquery, sizeof(tquery), "UPDATE `"#MYSQL_SPRAY_TABLA"` SET ");
	MySQLUpdateFLOAT(tquery, "X", TagInfo[tagid][tPoz][0]);
	MySQLUpdateFLOAT(tquery, "Y", TagInfo[tagid][tPoz][1]);
	MySQLUpdateFLOAT(tquery, "Z", TagInfo[tagid][tPoz][2]);
	MySQLUpdateFLOAT(tquery, "Rx", TagInfo[tagid][tRot][2]);
	MySQLUpdateFLOAT(tquery, "Ry", TagInfo[tagid][tRot][2]);
	MySQLUpdateFLOAT(tquery, "Rz", TagInfo[tagid][tRot][2]);
	MySQLUpdateINT(tquery, "Festve", TagInfo[tagid][tFestveVan]);
	MySQLUpdateINT(tquery, "Kesz", TagInfo[tagid][tKesz]);
	MySQLUpdateINT(tquery, "Tulaj", TagInfo[tagid][tTulaj]);
	MySQLUpdateINT(tquery, "GraffitiObject", TagInfo[tagid][tGraffitiObject]);
	MySQLFinalUpdate(tquery, "ID", tagid);
	return 1;
}
fpublic HifiLerak(playerid,Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz)
{
	new h = -1;
	for(new i=1;i<MAXHIFI;i++)
	{
		if(HifiInfo[i][hVan] == 0)
		{
			h = i;
			break;
		}
	}
	if(h == -1)
	{
		SCM(playerid,COL_LRED,"Hiba kód: 0001");
		return 1;
	}
	HifiInfo[h][hID] = h;
	HifiInfo[h][hVan] = 1;
	HifiInfo[h][hX] = x;
	HifiInfo[h][hY] = y;
	HifiInfo[h][hZ] = z;
	HifiInfo[h][hRx] = rx;
	HifiInfo[h][hRy] = ry;
	HifiInfo[h][hRz] = rz;
	HifiInfo[h][hLerako] = JatekosNev(playerid);
	HifiInfo[h][hObject] = CreateDynamicObject(2226,x,y,z,rx,ry,rz);
	strmid(HifiInfo[h][hURL],"-",0,strlen("-"),32);
	doQuery("INSERT INTO `"#MYSQL_HIFI_TABLE"`(ID, X, Y, Z, Rx, Ry, Rz, Lerako) VALUES('%d', '%f','%f','%f','%f','%f','%f','%s')", h,x,y,z,rx,ry,rz,JatekosNev(playerid));
	SCM(playerid,COL_LRED,"Leraktad a Hifit!");
	return 1;
}

stock StatMentes(playerid, elso = 0, bool: preQuery = true, fazis = 0 )
{
	if(!Belepve(playerid) || SQLID(playerid) == NINCS || !strlen(JelenlegiDatum)) return 1;

	if(elso)
	{
		strmid(StatInfo[playerid][pDatum], JelenlegiDatum, 0, strlen(JelenlegiDatum));

		if( preQuery )
		{
			nformat(query, 128, "SELECT ID FROM %s WHERE Datum='%s' AND UID='%d' AND IDJE='%s%d%d'", MYSQL_ACTIVITY_TABLE, JelenlegiDatum, SQLID(playerid),JelenlegiDatum,SQLID(playerid),Hatarozas[playerid]);
			mysql_tquery(sql_ID, query, "", "");
			StatMentes(playerid,elso,false,0);
			return 1;
		}

		if( !fazis )
		{
			if(!cache_num_rows())
			{
				if(Insertalta[playerid] == 0)
				{
					nformat( query, 128, "INSERT INTO %s(UID, Datum,IDJE) VALUES('%d', '%s','%s%d%d')", MYSQL_ACTIVITY_TABLE, SQLID(playerid), JelenlegiDatum,JelenlegiDatum,SQLID(playerid),Hatarozas[playerid]);
					mysql_tquery(sql_ID, query, "", "");
					StatMentes(playerid,elso,false,1);
					Insertalta[playerid] = 1;
				}
			}
			else
			{
				new teszt[64];
				format(teszt,64,"%s%d%d",JelenlegiDatum,SQLID(playerid),Hatarozas[playerid]);
//				StatInfo[playerid][pID] = teszt;
				strmid(StatInfo[playerid][pID],teszt,0,strlen(teszt),64);
			}
		}
		else if( fazis == 1 )
		{
			nformat(query, 128, "SELECT ID FROM %s WHERE Datum='%s' AND UID='%d' AND IDJE='%s%d%d'", MYSQL_ACTIVITY_TABLE, JelenlegiDatum, SQLID(playerid),JelenlegiDatum,SQLID(playerid),Hatarozas[playerid]);
			mysql_tquery(sql_ID, query, "", "");
			StatMentes(playerid,elso,false,2);

		}
		else if( fazis == 2 )
		{
			new teszt[64];
			format(teszt,64,"%s%d%d",JelenlegiDatum,SQLID(playerid),Hatarozas[playerid]);
		//	StatInfo[playerid][pID] = teszt;
		   	strmid(StatInfo[playerid][pID],teszt,0,strlen(teszt),64);
			StatMentes( playerid, 0 );
		}
	}
	else
	{
		if(!egyezik(JelenlegiDatum, StatInfo[playerid][pDatum]))
			return StatMentes(playerid, true);

		new query[256];
		format(query, 256, "UPDATE %s SET Ido=Ido+%d", MYSQL_ACTIVITY_TABLE, StatInfo[playerid][pIdo]), StatInfo[playerid][pIdo] = 0;

		if(StatInfo[playerid][pOnduty])
			format(query, 256, "%s, Onduty=Onduty+%d", query, StatInfo[playerid][pOnduty]), StatInfo[playerid][pOnduty] = 0;

		if(StatInfo[playerid][pVA])
			format(query, 256, "%s, VA=VA+%d", query, StatInfo[playerid][pVA]), StatInfo[playerid][pVA] = 0;

		if(StatInfo[playerid][pPM])
			format(query, 256, "%s, PM=PM+%d", query, StatInfo[playerid][pPM]), StatInfo[playerid][pPM] = 0;

		format(query, 256, "%s WHERE IDJE='%s'", query, StatInfo[playerid][pID]);
		mysql_tquery(sql_ID, query, "", "");

	}
	return 1;
}
timer MOST[1000](playerid)
{
	HuzzadVaze[playerid] = 1;
	new ido  = Rand(1000,2000);
	defer MOSTVege[ido](playerid);
	GameTextForPlayer(playerid,"~g~KAPAS VAN!!~n~~r~MOST, HUZD!!!!~n~n~SPACE",ido,5);
	return 1;
}
timer MOSTVege[1000](playerid)
{
	if(HuzzadVaze[playerid] != 0 && Fishing[playerid] != 0)
	{
	    Vegec(playerid);
	    SendClientMessage(playerid,COLOR_LIGHTRED,"Ezt lekested, sajnos! A hal elúszott");
	    Fishing[playerid] = 0;
    	HuzzadVaze[playerid] = 0;
	}
	else
	{
	    Vegec(playerid);
	    HuzzadVaze[playerid] = 0;
	}
    return 1;
}
fpublic HorgaszasAnim(playerid)
{
	if(Fishing[playerid] == 1)
	{
		SetCameraBehindPlayer(playerid);
		ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,0,1,1);
	}
}
fpublic Vegec(playerid)
{
	if(Fishing[playerid] == 1)
	{
		TogglePlayerControllable(playerid,1);
		Fishing[playerid] = 0;
		SetCameraBehindPlayer(playerid);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	}
	return 1;
}
fpublic Huzza(playerid)
{
	if(Fishing[playerid] == 1)
	{
		new hal = Rand(0,10);
		new kg = Rand(5,50);
		switch(hal)
		{
			case 0:
			{
				SCM(playerid,COL_LRED,"A damil elszakadt!");
				Cselekves(playerid,"beszakította a damilt",0);
			}
			case 1,3:
			{
				SFM(playerid,COL_LRED,"Fogtál egy %d KG-os Csukát!",kg);
				PlayerInfo[playerid][pHal] += kg;
				Cselekves(playerid,"fogott egy halat",0);
			}
			case 2:
			{
				SFM(playerid,COL_LRED,"Fogtál egy %d KG-os Keszeget!",kg);
				PlayerInfo[playerid][pHal] += kg;
				Cselekves(playerid,"fogott egy halat",0);
			}
			case 4,9:
			{
				SCM(playerid,COL_LRED,"A hal elúszott...");
			}
			case 5:
			{
				SFM(playerid,COL_LRED,"Fogtál egy %d KG-os Pontyot!",kg);
				PlayerInfo[playerid][pHal] += kg;
				Cselekves(playerid,"fogott egy halat",0);
			}
			case 6:
			{
				SFM(playerid,COL_LRED,"Fogtál egy %d KG-os Kardhalat!",kg);
				PlayerInfo[playerid][pHal] += kg;
				Cselekves(playerid,"fogott egy halat",0);
			}
			case 7:
			{
				SCM(playerid,COL_LRED,"A damil elszakadt!");
				Cselekves(playerid,"beszakította a damilt",0);
			}
			case 8:
			{
				//:3
				new esely = Rand(1,50);
				switch(esely)
				{
					case 1 .. 49:
					{
						SCM(playerid,COL_LRED,"A damil elszakadt ez valami nagy hal lehetett!");
						Cselekves(playerid,"beszakította a damilt");
					}
					case 50 .. 100:
					{
						kg = kg+10;
						SFM(playerid,COL_LRED,"Fogtál egy %d kg os Harcsát!",kg);
						PlayerInfo[playerid][pHal] += kg;
						Cselekves(playerid,"fogott egy halat",0);
					}
				}
			}
			case 10:
			{
				SCM(playerid,COL_LRED,"Majdnem kifogtad, de visszaesett a vízbe!");
				Cselekves(playerid,"visszaejtette a halat",0);
			}
		}
		Fishing[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	}
}
fpublic GetXYBehindVehicle(jarmu,&Float:x,&Float:y,Float:dis)
{
	new Float:a, Float:z;
	GetVehiclePos(jarmu, x, y, z);
	GetVehicleZAngle(jarmu, a);
	GetXYBehindPoint(x, y, a,dis);
}

fpublic GetXYBehindPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x -= (distance * floatsin(-angle, degrees));
	y -= (distance * floatcos(-angle, degrees));
}
timer AFKKick[20000](playerid)
{
	HideDialog(playerid);
	SeeKick(playerid, "AFK");
	return 1;
}
stock SeeKick(playerid, miert[], kivolt = NINCS)
{
	if(Kicked[playerid]) return false;
	
	if(!IsPlayerNPC(playerid) && !IsScripter(playerid))
	{
		new ki[MAX_PLAYER_NAME];

		if(kivolt == NINCS || !IsPlayerConnected(kivolt) || IsPlayerNPC(kivolt))
		{
			strmid(ki,"Rendszer",0,strlen("Rendszer"),32);
		}
		else
		{
			strmid(ki,JatekosNev(kivolt),0,strlen(JatekosNev(kivolt)),32);
		}
		if(egyezik(miert,"AFK"))
		{
			SendFormatMessageToAll(COLOR_LIGHTRED, ""#PREFIX": %s kickelve a Rendszer által | Oka: %s",JatekosNev(playerid),miert);
            #if UCPKONZOL == true
			    nformat(kicksocket, 256, "[[b;#FF6347;#000000]KICK: %s kickelve a Rendszer által | Oka: %s]", JatekosNev(playerid),miert);
			    WSStringFix(kicksocket);
			    WSServerSentToAll(ServerInfo[sUCPServer], kicksocket);
			#endif
		}
		else
		{
			SendFormatMessageToAll(COLOR_LIGHTRED, ""#PREFIX": %s kickelve %s által | Oka: %s",JatekosNev(playerid),ki,miert);
            #if UCPKONZOL == true
			    nformat(kicksocket, 256, "[[b;#FF6347;#000000]KICK: %s kickelve %s által | Oka: %s]", JatekosNev(playerid), ki, miert);
			    WSStringFix(kicksocket);
			    WSServerSentToAll(ServerInfo[sUCPServer], kicksocket);
			#endif
		}
		if(kivolt == NINCS || !IsPlayerConnected(kivolt) || IsPlayerNPC(kivolt))
			Kick(playerid, true);
		else
		    Kick(playerid, false);
		    
		return true;
	}
	return false;
}
fpublic GetClosestTAG(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new kozelitag=NINCS;
		new Float:closestdist = 9999.0, Float:dist;
		for(new tag=0; tag<sizeof(TagInfo); tag++)
		{
			dist = GetDistanceToTAG(playerid,tag);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelitag = tag;
			}
		}
		return kozelitag;
	}
	return NINCS;
}
stock GiveMoney(k,mennyit)
{
	PlayerInfo[k][ppenz] += mennyit;
	PenzFrissites(k);
	return 1;
}
stock SetMoney(k,mennyit)
{
	PlayerInfo[k][ppenz] = mennyit;
	PenzFrissites(k);
	return 1;
}
stock PenzFrissites(playerid)
{
/*	new TD_tmp[1024+1];
	format(TD_tmp, sizeof(TD_tmp), "%08d_$", PenzEgyenleg(playerid));
	PlayerTextDrawSetString(playerid, g_PlayerTextDraw[playerid][ptd_Penz], TD_tmp);*/
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerInfo[playerid][ppenz]);
	return 1;
}
stock CreateRoadblock(Object,Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
	{
		if(Roadblocks[i][sCreated] == 0)
		{
			Roadblocks[i][sCreated] = 1;
			Roadblocks[i][sX] = x;
			Roadblocks[i][sY] = y;
			Roadblocks[i][sZ] = z-0.7;
			Roadblocks[i][sObject] = CreateDynamicObject(Object, x, y, z-0.9, 0, 0, Angle);
			return 1;
		}
	}
	return 0;
}

stock DeleteAllRoadblocks(playerid)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 100, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
			{
				if(Roadblocks[i][sCreated] == 1)
				{
					Roadblocks[i][sCreated] = 0;
                    Roadblocks[i][sX] = 0.0;
                    Roadblocks[i][sY] = 0.0;
                    Roadblocks[i][sZ] = 0.0;
                    DestroyDynamicObject(Roadblocks[i][sObject]);
				}
            }
        }
    return 0;
}

stock DeleteClosestRoadblock(playerid)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 5.0, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
			{
                if(Roadblocks[i][sCreated] == 1)
				{
					Roadblocks[i][sCreated] = 0;
					Roadblocks[i][sX] = 0.0;
					Roadblocks[i][sY] = 0.0;
					Roadblocks[i][sZ] = 0.0;
					DestroyDynamicObject(Roadblocks[i][sObject]);
					return 1;
                }
            }
        }
    return 0;
}
stock UjLabelID()
{
	new ret = -1;
	for(new i = 0; i < MAX_LABEL; i++)
	{
	    if(LabelInfo[i][lVan] == 0)
	    {
			ret = i;
			break;
	    }
	}
	return ret;
}
stock LegkozelebbiLabel(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x,y,z);
	//new labell = -1;
	new ret = -1;
	for(new labell = 0; labell < MAX_LABEL; labell++)
	{
		if(IsPlayerInRangeOfPoint(playerid,5.00,LabelInfo[labell][lx],LabelInfo[labell][ly],LabelInfo[labell][lz]) && LabelInfo[labell][lVan] == 1)
		{
		    ret = labell;
		    break;
		}
	}
	return ret;
}
public OnDNS(host[], ip[], extra)
{
	if(egyezik(JatekosIP(extra), ip))
	{
	    SCM(extra, COL_LRED, "DNS hitelesítés sikeres!");
	}
	else
	{
	    //ServerBan(extra, 0, "[AC]Karakter Feltörés", NINCS, true, true, true);
	    printf("[ADMINSECURITY]: %s - IP:%s (DNS)hitelesítés SIKERTELEN!",JatekosNev(extra), JatekosIP(extra));
	}
	    
	return 1;
}
fpublic AdminIPBetoltes(playerid)
{
	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	
	}
	else
 	{
		//ServerBan(playerid, 0, "[AC]Karakter Feltörés", NINCS, true, true, true);
		printf("[ADMINSECURITY]: %s - IP:%s (IP)hitelesítés SIKERTELEN!",JatekosNev(playerid), JatekosIP(playerid));
	}
	return 1;
}

fpublic LabelBetoltes()
{
	print("Szerver: 3DTextLabelek betöltése!");

	new nums, fields, id = 0;
	cache_get_data(nums,fields);

	if(nums)
	{
	    new color;
	    new i = -1;
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "ID", id);
			mysql_get_string(i, "Text", LabelInfo[id][lText]);
			mysql_get_float(i, "X", LabelInfo[id][lx]);
			mysql_get_float(i, "Y", LabelInfo[id][ly]);
			mysql_get_float(i, "Z", LabelInfo[id][lz]);
			mysql_get_int(i, "szin", LabelInfo[id][lszin]);
			switch(LabelInfo[id][lszin])
			{
			    case 0: color = COLOR_GREEN;
			    case 1: color = COLOR_YELLOW;
				case 2: color = COLOR_RED;
				case 3: color = LKEK;
			}
			dynlabels[id] = CreateDynamic3DTextLabel(LabelInfo[id][lText],color,LabelInfo[id][lx],LabelInfo[id][ly],LabelInfo[id][lz],DEFAULT_LABEL_DISTANCE);
			LabelInfo[id][lVan] = 1;
			id++;
	    }
	}
	if(id) printf("Szerver: %d 3DTextLabel betöltve!",id);
	else printf("Szerver: Nem lett betöltve 3DTextLabel!");
	return 1;
}

timer RemoveFlash[CAMERA_BEVILLANAS](playerid)
{
	TextDrawHideForPlayer(playerid,g_TextDraw[td_CameraFlash]);
	SetPVarInt(playerid,"PlayerHasBeenFlashed",2);
}

fpublic UpdateCameras()
{
	for(new a = 0;a<MAX_PLAYERS;a++)
	{
		if(!IsPlayerConnected(a)) continue;
		if(!IsPlayerInAnyVehicle(a)) continue;
		if(PlayerInfo[a][pAduty]) continue;
		if(PlayerInfo[a][pDuty][0]) continue;
		if(PlayerInfo[a][pBszPenz] < -1000000) continue;
		if(PlayerInfo[a][ppenz] < -1000000) continue;
/*		new kocsi = GetPlayerVehicleID(a);
  		new sajat = IsAVsKocsi(kocsi);
		if(CarInfo[sajat][cEMP] == 1)
		{
			continue;
		}		*/
		if(GetPVarInt(a,"PlayerHasBeenFlashed") == 1)
		{
			continue;
		}
		else if (GetPVarInt(a,"PlayerHasBeenFlashed") == 2)
		{
			DeletePVar(a,"PlayerHasBeenFlashed");
			continue;
		}
		for(new b = 0;b<loaded_cameras +1;b++)
		{
			if(GetPlayerState(a) == PLAYER_STATE_DRIVER)
			{
				if(SpeedCameras[b][_active] == false) continue;
				if(IsPlayerInRangeOfPoint(a,SpeedCameras[b][_range],SpeedCameras[b][_x],SpeedCameras[b][_y],SpeedCameras[b][_z]))
				{
					new speed = GetVehicleSpeed(GetPlayerVehicleID(a));
					new limit = SpeedCameras[b][_limit];
					if(speed > limit)
					{
						TextDrawShowForPlayer(a,g_TextDraw[td_CameraFlash]);
						SetPVarInt(a,"PlayerHasBeenFlashed",1);
						defer RemoveFlash[CAMERA_BEVILLANAS](a);
						PlayerPlaySound(a, 1132, 0.0, 0.0, 0.0);
						new Buntica;
						new bszamolas  = speed - limit;

						if(bszamolas < 20)
						{
							SCM(a,COL_MKEK,"=====[ Traffipax ]=====");
							SCM(a,COL_MKEK,"Figyelmeztetes, a megengedett sebesség fölött haladtál!");
							SendFormatMessage(a, COLOR_LIGHTRED, "Sebességed: %d km/h", speed);
							SendFormatMessage(a, COLOR_LIGHTRED, "Sebességkorlát: %d km/h", limit);
							SCM(a,COL_MKEK,"Tájékoztatási határ, büntetes nincs! Legközelebb tartsa be a sebességkorlátozást!");
							SendClientMessage(a, COLOR_WHITE, " ");
							break;
						}
						else
							Buntica = ((speed/limit - 1) * 5) * SpeedCameras[b][_fine];

						SaveCamera(b);

						new string[256];
						new vid = JarmuID(GetPlayerVehicleID(a), a);
						PlayerInfo[a][pBszPenz] -= SpeedCameras[b][_fine] + Buntica;
						new traffipaxID = SpeedCameras[b][_id];
						format(string, sizeof(string), "**=[TRAFI]=**: A %d számú álló trafi bemérte %s %s típusú gépjármûvét: (%d km/h)-val",traffipaxID, VehicleNames[vInfo[vid][vModel] - 400],speed);
						format(string, sizeof(string), "**=[TRAFI]=**: Rendszám: %d | Sebességtúllépés: %d km/h | Sebességkorlát: %d km/h | Büntetés: $%d", GetPlayerVehicleID(a),bszamolas,limit,SpeedCameras[b][_fine]);
						FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, string);
						SCM(a,COL_MKEK, "=====[ Traffipax ]=====");
						SCM(a,COL_MKEK, "Figyelmeztetes, a megengedett sebesség fölött haladtál!");
						SendFormatMessage(a, COLOR_LIGHTRED, "Sebességed: %d km/h", speed);
						SendFormatMessage(a, COLOR_LIGHTRED, "Sebességkorlát: %d km/h", limit);
						SendFormatMessage(a, COLOR_LIGHTRED, "Büntetésed: %d büntetõpont", SpeedCameras[b][_fine]);
						
						PlayerInfo[a][pBuntetoPontok] += Buntica;
			            if(PlayerInfo[a][pBuntetoPontok] >= P_MAX_BUNTETOPONT)
			            {
			                new e = NINCS;
							for(; ++e < MAX_ENGEDELY;)
			                	PlayerInfo[a][pEngedely][e] = 0;

							SCM(a, COL_LRED, "Túl sok büntetõpontjaid miatt bevonták az engedélyeid!");
							PlayerInfo[a][pBuntetoPontok] = 0;
			            }
					}
				}
			}
		}
	}
}

stock UresKez(playerid, kezcheck = NINCS)
{
	if(kezcheck == NINCS)
	{
		if(!IsPlayerAttachedObjectSlotUsed(playerid, SLOT_JOBBKEZ))
			return SLOT_JOBBKEZ;
		else if(!IsPlayerAttachedObjectSlotUsed(playerid, SLOT_BALKEZ))
		    return SLOT_BALKEZ;
	}
	else
	{
	    if(!IsPlayerAttachedObjectSlotUsed(playerid, kezcheck))
	        return true;
	}
	return false;
}

#if UCPKONZOL == true
	#define MAX_UCP_CONN 10
	enum e_UCP
	{
	    bool:uConnected,
	    uNev[32],
		bool:uAuthenticateState,
		ws_connection:uConnectionID
	}
	new UCP[MAX_UCP_CONN][e_UCP];

	fpublic onUCPClientConnect(ws_server:ws, ws_connection:con)
	{
	    UCP[con][uConnected] = true;
		UCP[con][uAuthenticateState] = false;
	    UCP[con][uConnectionID] = con;

		new ip[32];
		WSServerGetIP(ws, con, ip, sizeof(ip));
		printf("Incomming connection from %s", ip);
	}

	fpublic onUCPClientDisconnect(ws_server:ws, ws_connection:con)
	{
	    UCP[con][uConnected] = false;
		printf("Connection closed");
	}
//============ HTML javítás, mert enélkül baszik odaérni a socket. ============
 	stock WSCharFix(chr)
	{
		switch(chr)
		{
		    case 'á': return 'a';
		    case 'Á': return 'A';

		    case 'é': return 'e';
		    case 'É': return 'E';

		    case 'ó': return 'o';
		    case 'Ó': return 'O';

		    case 'ö': return 'o';
		    case 'Ö': return 'O';
		    case 'õ': return 'o';
		    case 'Õ': return 'O';

		    case 'ú': return 'u';
		    case 'Ú': return 'U';

		    case 'ü': return 'u';
			case 'û': return 'u';
		    case 'Ü': return 'U';
			case 'Û': return 'U';

		    case 'í': return 'i';
		    case 'Í': return 'i';
		}
		return chr;
	}
	stock WSStringFix(string[])
	{
	    new chr;
	    while(string[chr])
	 	{
	 	    string[chr] = WSCharFix(string[chr]);
	 	    chr++;
		}
		return 1;
	}

	stock UCPSendMessage(ws_server:ws, ws_connection:con, string[])
	{
	    WSStringFix(string);
	    return WSServerSend(ws, con, string);
	}

	fpublic onUCPClientMessage(ws_server:ws, ws_connection:con, message[])
	{
	    if(message[0] == '/')
	    {
	        new parancs[24], params[256];
			sscanf(message, "p< >s[24]s[256]", parancs, params); printf("parancs %s", parancs);


			new engedelyezettparancsok[][] =
			{
				"/authenticate"
			};
			if(UCP[con][uAuthenticateState] == false)
	  		{
				new i = NINCS, bool:engedelyezett = false;
				for(;++i < sizeof(engedelyezettparancsok);)
				{
					if(egyezik(parancs, engedelyezettparancsok[i]))
					{
						engedelyezett = true;
						break;
					}
				}
				if(!engedelyezett)
				{
				    new response[128];
					format(response, 128, "[[b;#ff0000;#000000]A parancs csak hitelesítés után használható!]");

                    UCPSendMessage(ServerInfo[sUCPServer], UCP[con][uConnectionID], response);
				    return 0;
				}
			}

			if(egyezik(parancs,"/authenticate")) //Autentikáció, hogy nehogy basszák a kurva anyjukat
			{
			    new clientkey[33], serverkey[128];
			    sscanf(params, "p<,>s[33]s[32]", clientkey, UCP[con][uNev]);

			    format(serverkey, 128, "%s%s", KONZOLAUTH, UCP[con][uNev]);
			    format(serverkey, 128, "%s", MD5_Hash(serverkey));

                new response[48];
                if(egyezik(clientkey, serverkey) && !isnull(params))
				{
                    format(response, 48, "[[b;#00ff00;#000000]Hitelesítés sikeres!]");
                	UCPSendMessage(ServerInfo[sUCPServer], UCP[con][uConnectionID], response), UCP[con][uAuthenticateState] = true;

                	printf("%s hitelesítve!", UCP[con][uNev]);
				}
				else
				{
				    format(response, 48, "[[b;#ff0000;#000000]Hitelesítés sikertelen!]");

                    UCPSendMessage(ServerInfo[sUCPServer], UCP[con][uConnectionID], response), UCP[con][uAuthenticateState] = false;
                    printf("%s visszautasítva!", UCP[con][uNev]);

				}
			}
			else if(egyezik(parancs, "/a") || egyezik(parancs, "/admin"))
			{
			    if(isnull(params))
			        UCPSendMessage(ServerInfo[sUCPServer], UCP[con][uConnectionID], "[[b;#ff0000;#000000]Használat: /a [üzenet]]");

			    new uzenete[128];
				format(uzenete, sizeof(uzenete), "* (UCP)%s: %s", UCP[con][uNev], params);
				foreach(Player, id)
				{
					if(Belepve(id) && Admin(id, 1))
						SendClientMessage(id, COLOR_GREEN, uzenete);
				}
	   			format(uzenete, sizeof(uzenete), "[[b;#33AA33;#000000](UCP)%s: %s]", UCP[con][uNev], params);
	   			WSStringFix(uzenete);
				WSServerSentToAll(ServerInfo[sUCPServer], uzenete);
			}
			else{
			    nformat(response, 128, "A %s parancs nem letezik!", parancs);

			    UCPSendMessage(ServerInfo[sUCPServer], UCP[con][uConnectionID], response);
			}

	    }
	    else
	        print("nem parancs");

		return 1;
	}
	fpublic UCPAuthentikacio(string[], conn_id)
	{
	}
#endif

fpublic Float:M_GetPlayerToPointSquare(playerid, Float:x, Float:y, Float:z)
{
	new Float:px, Float:py, Float:pz;
 	if(IsPlayerInAnyVehicle(playerid)) GetVehiclePos(GetPlayerVehicleID(playerid), px, py, pz);
  	else GetPlayerPos(playerid, px, py, pz);
   	px -= x; py -= y; pz -= z;
    return px * px + py + py + pz * pz;
}


timer DestroyExplosionObject[5000](objectid)
{
    DestroyDynamicObject(objectid);
}
stock CreateExplosionEx(playerid, Float:x, Float:y, Float:z, Float:radius, Float:maxdamage = MAX_HP, type = EXPLOSION_TYPE_MEDIUM, playsound = true)
{
	if(type < 0 || type > 5) return false;
 	new objectid = CreateDynamicObject(18681 + type, x, y, z - 1.5, 0.0, 0.0, 0.0);
 	
	defer DestroyExplosionObject(objectid);
	
	if(type == 1 || type == 2 || type == 4) CreateExplosion(x, y, z, 13, radius);
 	if(playsound)
  	{
   		foreach(Player, i)
     		PlayerPlaySound(i, 1159, x, y, z);
   	}
    if(maxdamage > 0.0 && radius > 0.0)
    {
    	new Float:radiussquare = radius * radius;
     	new Float:pdist;
      	foreach(Player, i)
  		{
			pdist = M_GetPlayerToPointSquare(i, x, y, z);
			if(pdist > radiussquare) continue;
			pdist = floatsqroot(pdist);
			DamagePlayer(i, (1 - (pdist / radius)) * maxdamage, playerid);
        }
	}
	return true;
}

stock DamagePlayer(playerid, Float:amount, damagerid)
{
	new Float:health;

	if(IsPlayerInAnyVehicle(playerid))
    {
		amount *= 2.5;
		GetVehicleHealth(GetPlayerVehicleID(playerid), health);
		SetVehicleHealth(GetPlayerVehicleID(playerid), health - amount);
		if(health - amount <= 250.0)
		{
		    SetHealth(playerid, 0.0);
		    OnPlayerDeath(playerid, damagerid, 777);
		}
        return;
    }
    
	GetPlayerHealth(playerid, health);
	if(amount > 0.0)
	{
		if(amount >= health)
		{
		    SetHealth(playerid, 0.0);
		    OnPlayerDeath(playerid, damagerid, 777);
		}
	    else
		{
		    if(amount > 50.0)
				Anim(playerid, 1);
				
			GiveHealth(playerid, -amount);
		}
	}
}
stock Float:getDistanceToBanyaKo(playerid, id)
{
	if(IsValidDynamicObject(g_BanyaObjectek[id][bObjID]))
	{
		new Float:oPoz[3];
		GetDynamicObjectPos(g_BanyaObjectek[id][bObjID], posArr{oPoz});

		return GetDistanceToPointEx(playerid, posArr{oPoz});
	}
	return INF_FLOAT;
}
stock getClosestBanyaKo(playerid, Float:max = 9999.0)
{
	new kozeliko = NINCS,
		Float:closestdist = max,
		Float:dist;

	new i = NINCS;
	for(; ++i < BANYA_OBJECTEK;)
	{
	    if(g_BanyaObjectek[i][bObjID] == NINCS) continue;
	    
		dist = getDistanceToBanyaKo(playerid, i);
		if(dist < closestdist)
		{
			closestdist = dist;
			kozeliko = i;
		}
	}
	return kozeliko;
}
stock BanyaKoMaterial(tipus, id, bool:streamer = true)
{
    if(tipus != BANYASZ_KO)
	{
		switch(tipus)
		{
			case BANYASZ_ARANY:
			{
				if(streamer)
					SetDynamicObjectMaterial(id, 0, 905, "weemap", "rocktb128", 0xFFFFC400);
			 	else
				 	SetObjectMaterial(id, 0, 905, "weemap", "rocktb128", 0xFFFFC400);
			}
			case BANYASZ_SZEN:
			{
				if(streamer)
					SetDynamicObjectMaterial(id, 0, 905, "weemap", "rocktb128", 0xFF252525);
			 	else
				 	SetObjectMaterial(id, 0, 905, "weemap", "rocktb128", 0xFF252525);
			}
		}
	}
}
fpublic CreateBanyaObject(bool:first)
{
	new i = NINCS;
	for(; ++i < BANYA_OBJECTEK;)
	{
	    if(!first && g_BanyaObjectek[i][bObjID] != NINCS)
		{
		    DestroyDynamicObject(g_BanyaObjectek[i][bObjID]);
		}
		
		new id = CreateDynamicObject(3930, g_BanyaObjPos[i][0], g_BanyaObjPos[i][1], g_BanyaObjPos[i][2], g_BanyaObjPos[i][3], g_BanyaObjPos[i][4], g_BanyaObjPos[i][5]);
		g_BanyaObjectek[i][bObjID] = id;
		g_BanyaObjectek[i][bHP] = MAX_BANYAKO_HP;
		new tipus = NINCS;

		if(RandomSiker(3))
			tipus = BANYASZ_ARANY;
		else if(RandomSiker(50))
			tipus = BANYASZ_SZEN;

		if(tipus == NINCS)
			tipus = BANYASZ_KO;

        g_BanyaObjectek[i][bTipus] = tipus;
		BanyaKoMaterial(tipus, id);
	}
	print("Banya objectek betoltve!");
}


stock SziklaTorol(kocsi)
{
    new i = NINCS;
	for(; ++i < 9;)
	{
		if(g_KocsiSziklaObj[kocsi][i] != NINCS)
		    DestroyDynamicObject(g_KocsiSziklaObj[kocsi][i]);

	    g_KocsiSziklaObj[kocsi][i] = NINCS;
	}
}
stock SetVehicleAttachedObject(objmodel, vehid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new objid = CreateDynamicObject(objmodel, 10.0, 10.0, 10.0, 0.0, 0.0, 0.0);
	AttachDynamicObjectToVehicle(objid, vehid, x, y, z, rx, ry, rz);
	return objid;
}

timer t_Zuzogep[3000](vehicleid)
{
	DestroyDynamicObject(g_KocsiSziklaObj[vehicleid][ ZuzoGepStat[zKovekFolyamatban] ]);
	g_KocsiSziklaObj[vehicleid][ ZuzoGepStat[zKovekFolyamatban] ] = NINCS;

	ZuzoGepStat[zKovek][ ZuzoGepStat[zKovekFolyamatban] ] = CreateDynamicObject(3930, -1871.37463, -1673.42615, 20.97981, 0.00000, 0.00000, 0.00000);
	
	MoveDynamicObject(ZuzoGepStat[zKovek][ ZuzoGepStat[zKovekFolyamatban] ], -1905.26062, -1673.42615, 40.42000, 8.0);
	
	ZuzoGepStat[zKovekFolyamatban] ++;
	
	Streamer_UpdateAll();
	if( ZuzoGepStat[zKovekFolyamatban]== ZuzoGepStat[zKovekOssz])
	{
	    stop ZuzoGepStat[zTimer];
	}
}

stock GetSzikla(kocsi)
{
	new retnum = 0;
	new i = NINCS;
	for(; ++i < 9;)
	    if(g_KocsiSziklaObj[kocsi][i] != NINCS) retnum ++;
	    
	return retnum;
}
stock SziklaFelrak(kocsi)
{
	if(GetVehicleModel(kocsi) != 478) return false;
	
	if(g_KocsiSziklaObj[kocsi][0] == NINCS)
		g_KocsiSziklaObj[kocsi][0] = SetVehicleAttachedObject(3930, kocsi, 0.664999, -0.929999, 0.120000, 0.000000, 0.000000, 0.000000);
	else if(g_KocsiSziklaObj[kocsi][1] == NINCS)
		g_KocsiSziklaObj[kocsi][1] = SetVehicleAttachedObject(3930, kocsi, -0.519999, -0.894999, 0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 3930 |
	else if(g_KocsiSziklaObj[kocsi][2] == NINCS)
		g_KocsiSziklaObj[kocsi][2] = SetVehicleAttachedObject(3930, kocsi, -0.519999, -1.574998, 0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 3930 |
	else if(g_KocsiSziklaObj[kocsi][3] == NINCS)
		g_KocsiSziklaObj[kocsi][3] = SetVehicleAttachedObject(3930, kocsi, -0.519999, -2.220003, 0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 3930 |
	else if(g_KocsiSziklaObj[kocsi][4] == NINCS)
		g_KocsiSziklaObj[kocsi][4] = SetVehicleAttachedObject(3930, kocsi, 0.219999, -2.295005, 0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 3930 |
	else if(g_KocsiSziklaObj[kocsi][5] == NINCS)
		g_KocsiSziklaObj[kocsi][5] = SetVehicleAttachedObject(3930, kocsi, 0.724999, -2.295005, 0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 3930 |
	else if(g_KocsiSziklaObj[kocsi][6] == NINCS)
		g_KocsiSziklaObj[kocsi][6] = SetVehicleAttachedObject(3930, kocsi, 0.724999, -1.699998, 0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 3930 |
	else if(g_KocsiSziklaObj[kocsi][7] == NINCS)
		g_KocsiSziklaObj[kocsi][7] = SetVehicleAttachedObject(3930, kocsi, 0.065000, -1.584998, 0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 3930 |
	else if(g_KocsiSziklaObj[kocsi][8] == NINCS)
		g_KocsiSziklaObj[kocsi][8] = SetVehicleAttachedObject(3930, kocsi, 0.065000, -1.024999, 0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 3930 |
	else return false;
	
	return true;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
	return 1;
}
//Feldolgozó lezáró zárva: CreateObject(978, -1864.42004, -1673.16052, 21.61390,   0.00000, 0.00000, 90.00000);

//Feldolgozó kõ start: CreateObject(3930, -1871.37463, -1673.42615, 20.97981,   0.00000, 0.00000, 0.00000);
//Feldolgozó kõ kész: CreateObject(3930, -1905.26062, -1673.42615, 40.42000,   0.00000, 0.00000, 0.00000);

CMD:mianevem(playerid, params[])
{
	SendClientMessage(-1, "Neved: %s", JatekosNev(playerid));
	
	return true;
}
