/* A Mr Martin féle fölösleges megmagyarázom mit írok komikat mellõzzük... */
#include <a_samp>

#if defined MAX_PLAYERS
	#undef MAX_PLAYERS
#endif

#define MAX_PLAYERS (250)


#include <YSI\y_ini> // Trafinak kell
#include <YSI\y_master> // Trafinak kell
#include <YSI\y_commands> // Trafinak kell
#define	HEX_PREFIX "#"
#define NO_YSI_VERSION_CHECK

//#define HAZI_SZERVER

//new bool:FALSE = false;
#include <formatnumber_new>
#include <sscanf2>
#include <foreach>
#include <dfor>
#include <a_mysql>
#include <md5>
#include <colors>
#include <fixchars>
#include <streamer>
#include <getvehicledriver>
#include <seifader>
#include <mSelection>
#include <GPAB>
#include <udate>
#include <pause>
#include <seif_walk>
#include <progressbar2>
#include <crashdetect>
#include <a_zones>
#include <strlib>
#include <fixes>
//#include <OPSP>

/* -------------- MySQL Adatok --------------*/

#if !defined m_preCONFIG

	#define MYSQL_HOST  	"127.0.0.1"
	
	#if defined HAZI_SZERVER
		#define MYSQL_USER "original"
		#define MYSQL_DB "seerpg"
		#define MYSQL_PW "elbasztadocsi"
	#else
		#define MYSQL_USER "original"
		#define MYSQL_DB "seerpg"
		#define MYSQL_PW "elbasztadocsi"
	#endif

#endif


//Szerver port alapján -> ha 7777 akkor éles ha 7778 akkor teszt
#define tMYSQL_USER  "original"
#define tMYSQL_DB    "seerpgtamasi"
#define tMYSQL_PW    "nQKsG8VK3Fc8pWVP"

#define MYSQL_BAN_TABLA				"ban"
#define MYSQL_HAZ_TABLA				"hazak"
#define MYSQL_JATEKOS_TABLA			"jatekosok"
#define MYSQL_ACCOUNT_TABLA			"accountok"
#define MYSQL_JARMU_TABLA			"jarmuvek"
#define MYSQL_FRAKCIO_TABLA			"frakciok"
#define MYSQL_KAPU_TABLA            "kapuk"
#define MYSQL_TERULET_TABLA			"teruletek"
#define MYSQL_BENZINKUTAK_TABLA 	"benzinkutak"
#define MYSQL_CUCCOK_TABLA			"cuccok"
#define MYSQL_AKA_SYSTEM			"aka_sys"
#define MYSQL_BUTOR_TABLA			"butorok"
#define MYSQL_CEGEK_TABLA			"cegek"
#define MYSQL_RACE_TABLA			"race_map"
#define MYSQL_JARMUADAT_TABLA		"jarmuadat"
#define MYSQL_TELEPORT_TABLA		"teleportok"
#define MYSQL_GPS_TABLA 			"gpsek"
#define MYSQL_LOG_TABLA			"logok"
#define MYSQL_SERIAL_BAN			"gpciban"
#define MYSQL_KAMERA_TABLA		"kamerak"
#define MYSQL_SPRAY_TABLA 			"sprayek"
#define MYSQL_HIFI_TABLE				"hifik"
#define MYSQL_ACTIVITY_TABLE		"ig_activity"
#define MYSQL_DRINK_TABLE			"drink"
#define MYSQL_3DTEXT_TABLA          "labels"
/*--------------- Szerver Fõ Színei -------------*/
#define COL_MKEK		"{1E90FF}"
#define COL_SZURKE 		"{757167}"
#define COL_FEHER 		"{FFFFFF}"
#define COL_LRED		"{FF6347}"

#define COLOR_MKEK 		0x1E90FFFF
#define COLOR_SZURKE	0x757167FF
#define COLOR_LIGHTKEK 	0x1E90FFFF

#define SQLID(%1) PlayerInfo[%1][pID]
#define HideDialog(%1) ShowPlayerDialog(%1, -1, DIALOG_STYLE_MSGBOX, " ", " ", "", "")

/*-------------- Bitmuveletek -----------------------------*/

#define GetBit(%0,%1)            ((%0) & (%1))
#define OnBit(%0,%1)             ((%0) |= (%1))
#define OffBit(%0,%1)            ((%0) &= ~(%1))
#define ToggleBit(%0,%1)         ((%0) ^= (%1))

/*-------------- MySQL & LiteSQL Definíciók --------------*/
new adatok[256];
#define mysql_get_int(%1,%2,%3) (%3 = cache_get_field_content_int(%1,%2))
#define mysql_get_float(%1,%2,%3) (%3 = cache_get_field_content_float(%1,%2))
#define mysql_get_string cache_get_field_content

//FormatQuery, ha nem akar vacakolni és nem kell paraméterezés - Martin
#define doQuery(%0,%1) mysql_tquery(sql_ID,(format(adatok, sizeof(adatok), (%0), %1), adatok),"","")

//#define mysql_get_int(%1,%2,%3) do{cache_get_field_content(%1,%2,adatok);%3 = strval(adatok);}while(FALSE)
//#define mysql_get_float(%1,%2,%3) do{cache_get_field_content(%1,%2,adatok);%3 = floatstr(adatok);}while(FALSE)
//#define mysql_get_string(%1,%2,%3) do{cache_get_field_content(%1,%2,stra);format(%3,1024,stra);}while(FALSE)

#define db_get_int(%1,%2,%3) db_get_field_assoc(%1,%2,adatok,sizeof(adatok));%3 = strval(adatok)
#define db_get_float(%1,%2,%3) db_get_field_assoc(%1,%2,adatok,sizeof(adatok));%3 = floatstr(adatok)
#define db_get_str db_get_field_assoc

//#define db_get_int(%1,%2,%3) do{db_get_field_assoc(%1,%2,adatok,sizeof(adatok));%3 = strval(adatok);}while(FALSE)
//#define db_get_float(%1,%2,%3) do{db_get_field_assoc(%1,%2,adatok,sizeof(adatok));%3 = floatstr(adatok);}while(FALSE)

/* -------------- Egyéb Definíciók --------------*/
//Matteo definek

#define CHEATER_MAX_SPEED 1000 

//Trafipax definek
#define Format(%1,%2,%3) format(%1,sizeof(%1),(%2),%3)
#define CAMERA_LIMIT 20
#define CAMERA_UPDATE_INTERVAL 750
#define CAMERA_BEVILLANAS 1000
#define CAMERA_DIALOG_RANGE 2000
#define CAMERA_USEMPH 0
#define CAMERA_SZOVEG_SZIN 0xFF000FFF
#define CAMERA_PERSPECTIVE false
//Trafipax definek vége


#define SZERELES_OSSZEG_KOCSI		215	 //Ennyit von le szerelésenként a szerelõktõl
#define SZERELES_OSSZEG_MOTOR		170
#define SZERELES_OSSZEG_BICIKLI		85
#define SZERELES_OSSZEG_REPULO		2200

#define MAX_KOMPONENS 40 // Tuninghoz
new TuningSzamolo[MAX_PLAYERS];
new KomponensID[MAX_PLAYERS][MAX_KOMPONENS];
new Text3D:sign[MAX_VEHICLES];

#define SZINT_LEPES			5 //hányszor elvégzet tmunka után kapjon skill-t
#define FIZETES_IDO		90 //perc
#define MAX_ENGEDELY	5
#define WAR_VW			123456789

#define BOLT_RABOLHATO	3

#define TERULET_HASZON_IDO	7200

#define nformat(%1,%2,%3,%4) new %1[%2];format(%1,%2,%3,%4)
#define strpcmp(%1,%2) !strcmp(%1,%2,false,strlen(%2))
#define egyezik(%1) (!strcmp(%1, true))
#define StrToPos(%1,%2) %2[0] = floatstr(%1[0]); %2[1] = floatstr(%1[1]); %2[2] = floatstr(%1[2])

#define SetCP(%1, %2, %3, %4, %5) SetPlayerCheckpoint(%1, %2, %3, %4); PlayerInfo[%1][pCP] = %5

#define PosExt(%1) %1[0], %1[1], %1[2]
#define INVALID_3D_TEXT_ID Text3D:(0xFFFF)

#define TIZES		10
#define SZAZAS		100
#define EZRES		1000
#define TIZEZRES	10000
#define SZAZEZRES	100000

#define Kerekites(%0,%1) (((%0 % %1) >= (%1 / 2)) ? (%0 + (%1 - (%0 % %1))) : (%0 - (%0 % %1)))
#define funkcio%0(%1) forward%0(%1); public%0(%1)
//#define content(%0, %1) CMD:%0(p, pa[]) return %1(p, strval(pa))
#define stRval(%0,%1) CMD:%0(p, pr[]) return %1(p, strval(pr))
#define content(%0,%1) CMD:%0(p, pr[]) return %1(p, pr)
#define chrtolower(%1) (((%1) > 0x40 && (%1) <= 0x5A) ? ((%1) | 0x20) : (%1))
#define Rand(%1,%2) (%1+random(%2-%1+1))//random szám megadott intervallum közt

#define Bortonben(%0) PlayerInfo[%0][pjail]

new sendfstring[256];
#define SendFormatMessageToAll(%1,%2,%3) SendClientMessageToAll((%1),(format(sendfstring,256,(%2),%3), sendfstring))
#define SendFormatMessage(%1,%2,%3,%4) SendClientMessage(%1,(%2),(format(sendfstring,256,(%3),%4), sendfstring))
#define AdminUzenet(%1,%2,%3,%4) AdminUzenetEx(%1,%2,(format(sendfstring,128,(%3),%4), sendfstring))
//#define FormatTextDraw(%1,%2,%3,%4) do{format(%2,sizeof(%2),(%3),%4);strins(%1,%2,strlen(%1));}while(FALSE)
#define AdminLog(%1,%2) AdminLogEx((format(sendfstring, 128,(%1),%2), sendfstring))

#define DIALOG1_MSG "Sultan [mûszerfal]\nSultan [háztetõ]\nCheetah [mûszerfal]\nCheetah [háztetõ]\nWashington [mûszerfal]\nWashington [háztetõ]\nPremier [mûszerfal]\nPremier [háztetõ]\nHuntley [mûszerfal]\nHuntley [háztetõ]\nTöbb"
#define DIALOG2_MSG "Buffalo [mûszerfal]\nBuffalo [háztetõ]\nLSPD Cruiser[mûszerfal]\nLSPD Cruiser[háztetõ]\nSFPD Cruiser[mûszerfal]\nSFPD Cruiser[háztetõ]\nLVPD Cruiser[mûszerfal]\nLVPD Cruiser[háztetõ]\nFiretruck\nFBI Truck \nTöbb"
#define DIALOG3_MSG "Tow Truck\nStretch [mûszerfal]\nStretch [háztetõ]\nPCJ-600\nFCR-900\nWayfarer\nSuper GT\nBurrito [mûszerfal]\nBurrito [háztetõ]\nBF Injection\nPatriot\nBarracks\nRhino"


#define ELDOB_FEGYVER		1
#define ELDOB_MATERIAL		2
#define ELDOB_HEROIN		3
#define ELDOB_KOKAIN		4
#define ELDOB_MARI			5
#define ELDOB_PENZ			6

//Frakció típusok
#define FK_LEGAL	1
#define FK_MAFFIA	2
#define FK_BANDA	3
#define FK_REND		4//rendvédelem

#define DROG_BAL			-1
#define DROG_KOZEP			0
#define DROG_JOBB			1

#define HAZ_MEGVEHETO_MODEL		1273
#define HAZ_MEGVETT_MODEL		1239
#define NEW_KEY(%1)				((newkeys & %1) && !(oldkeys & %1))
#define MAX_INTERIORS			15

#define MAXAFK 900


#define NINCS 				-1
#define UtkozesErzekenyseg	7

#define FSEGED_SZINT		6
#define FOADMIN_SZINT		1337
#define SZUPER_SZINT		1338
#define AC_SZINT			1339
#define FEJLESZTO_SZINT		1340
#define SCRIPTER_SZINT      5555
#define FOSCRIPTER_SZINT 6666
#define TULAJ_SZINT			8888
#define RENDSZG_SZINT       9999

//Adat_Update mûveletek
#define ADAT_MINDEN		0
#define ADAT_HAZ		1
#define ADAT_JARMU		2
#define ADAT_BUTOR		3
#define ADAT_RENDSZAM	4
#define ADAT_NEON		5
#define ADAT_CEG		6

#define ADAT_MINDEN_EX	10
#define ADAT_HAZ_EX		11
#define ADAT_JARMU_EX	12

//Timer processek
#define T_MSEGIT			1//saját magát segíti fel
#define T_SEGIT				2//mást segít fel
#define T_VAS				3
#define T_MATIKESZITES		4
#define T_FKESZITES			5
#define T_UTZAR				6
#define GT_HIRDETES			7
#define T_DROGKESZITES 		8
#define T_C4PLANT			9
#define T_HACKPANEL			10
#define T_PENZPAKOLAS		11
#define T_TUKERES			12
#define T_SISAK				13

//BoltCuccok változó definíciói
#define BL_PAPIR		0
#define BL_CIGI			1
#define BL_GYUJTO		2
#define BL_SZIVOSZAL	3
#define BL_MP3			4
#define BL_VONTATO		5
#define BL_TU			6
#define BL_KANAL		7
#define BL_C4			8
#define BL_PIPA			9
#define BL_BONG			10


//pProcess lehetõségek
#define PR_RENDSZAM		1
#define PR_CSERE_HAZ	2
#define PR_CSERE_JARMU	3
#define PR_NEON			4
#define PR_ELAD_HAZ		5

//Bizniszek
#define BIZ_PB			0
#define BIZ_HOTDOG		1
#define BIZ_247			2
#define BIZ_RUHA		3
#define BIZ_HIR			4
#define BIZ_FEGYVER		5
#define BIZ_SKV         6
#define BIZ_KERESKEDO   7

#define P_MAX_VAS		15//kg
#define P_MAX_MATERIAL	30000
#define P_MAX_HEROIN	4000
#define P_MAX_KOKAIN	4000
#define P_MAX_MARIHUANA	2500
#define P_MAX_KOTSZER	20
#define DROG_TELEFONSZAM	89756

//Jármûben maximum ennyi lehet egy adott cuccból
#define J_MAX_VAS		100
#define J_MAX_MATERIAL	80000
#define J_MAX_HEROIN	10000
#define J_MAX_KOKAIN	10000
#define J_MAX_MARIHUANA	10000

//CP processek
#define CP_KAMION_KEZD	1
#define CP_KAMION_CEL	2
#define CP_FAVAGO		3
#define CP_KUKA			4
#define CP_UTTISZTITO	5
#define CP_FEGYVER		6
#define CP_FARMER		7
#define CP_GPS			8
#define CP_DROG			9
#define CP_VAS			10
#define CP_VIZSGA		11
#define CP_LENYOMOZ		12

//Vizsga típusok
#define VIZSGA_KOCSI 	1
#define VIZSGA_MOTOR	2
#define VIZSGA_KAMION	3

//SetPlayerAttachedObject -- Slotjai (0 - 9)
//#define SLOT_BILINCS	0
#define SLOT_SAPKA 0
#define SLOT_SZEMUVEG 1
#define SLOT_KARORA 2
#define SLOT_MASZK		3
#define SLOT_FEGYVER1	4
#define SLOT_FEGYVER2	5
#define SLOT_FEGYVER3	6
#define SLOT_FEGYVER4	7
#define SLOT_HATIZSAK	8
#define SLOT_SISAK		9
//Ez sajnos betelt :(

#define MAX_LABEL 300
#define DEFAULT_LABEL_DISTANCE 40.0
new Text3D:dynlabels[MAX_LABEL];


/*--------------- Szerver Információk -------------*/
#define VERZIO                          "SeeRPG v1.0"
#define PREFIX                          "SeeRPG"

#define SCM(%1,%2,%3) SendClientMessage(%1, COLOR_WHITE, %2"SeeRPG:"#COL_FEHER" "#%3)
#define SFM(%1,%2,%3) SendFormatMessage(%1, COLOR_WHITE, %2"SeeRPG:"#COL_FEHER" "%3)
#define NEM_HASZNALHATO	""#COL_MKEK"SeeRPG:"#COL_FEHER" Ezt a parancsot nem használhatod!"
#define NEM_MOZOGHAT "Ezt a parancsot jelenleg nem használhatod!(Jármûben/Animban/Bilincsben/Stb)"

#define KEZELESI_KOLTSEG		0.07 //beállítja a bank kezelési költségét
#define ACCOUNT_KEZELES			1 // Ha 1 UserCP account szükséges, ha 0 akkor csak a karakter
#define NPC_KELL				0 // 1 = betölti 0 = nem - (FCNPS pluginos)
#define RANDOM_STRING_AJ		16 //AJ-ben reakció teszt max karakterei
#define SPECIAL_ACTION_PISSING	68
#define SPECIAL_ACTMEM_PISSING 	128
#define IDO_ELTOLODAS 			2
#define AP_VW					22071

//Scriptfiles mappák
#define FILE_PREMIUM			"Premium"
#define FILE_KAPCS				"Kapcsolodasok"
#define FILE_MYSQL				"MySQL"
#define FILE_PARANCS        	"Parancsok"
#define FILE_PARANCS_SIKERTELEN	"Parancs_Sikertelen"
#define FILE_CHEAT				"Cheat"
#define FILE_HALAL				"Halal"
#define FILE_ADMIN				"Admin"
#define FILE_HAZSZEF			"Hazszef"
#define FILE_FSZEF				"Frakcioszef"
#define FILE_BID				"Bejelentesek"
#define FILE_CHAT				"Chat"
#define FILE_ADDS				"Hirdetes"
#define FILE_NEVVALTAS			"Nevvaltas"
#define FILE_CUCCELDOBAS		"Eldobott_cuccok"
#define FILE_Sobeit							"Cheat"

#define LSQL_ADATBAZIS			"Adatbazisok/adatbazisok.db"
#define LSQL_AJTO_TABLA			"ajtok"
#define LSQL_TUZ_TABLA			"tuzek"
#define LSQL_AUTOMATA_TABLA 	"automatak"

/*----------- MAX definíciók -------------*/

#define MAX_JARMU			212//összes jármû adata -> UCP
#define MAX_BOJA			20
#define MAX_MUNKA			8 //legális, illegális egyaránt beleszámít!
#define MAX_HAZ_JARMU		3
#define MAX_TELEPORT 		100
#define MAXGPS 100
#define MAX_AJTO        	150
#define MAX_BENZINKUT		150
#define MAX_AUTOMATA		200
#define MAX_HULLA			1
#define MAX_FRAKCIO 		20
#define MAX_KAPU 			500
#define MAX_KAPU_HASZNALO 	10
#define MAX_MYSQL_STRING 	2200
#define MAX_HP 				150.0
#define MAX_ARMOUR 			150.0
#define MAX_PRINT			2
#define MAX_PROBALKOZASOK   3
#define MAX_HOUSE    		700
#define MAX_DROP 			800
#define MAX_TERULET			50
#define MAX_FRAKCIO_TERULET 8
#define MAX_FA				300
#define MIN_WAR_EMBER       4
#define	MAX_CEG				20
#define MAX_ERTEK			2000000000

//tûz define
#define TUZ_MAX 		5
#define TUZ_OBJECT 		12
#define TUZ_MINTAG 		1
#define TUZ_IDO_MIN 	900
#define TUZ_IDO_MAX 	1800
#define TUZ_TAV 		5.0
#define TUZ_OLTO_TAV 	6.0
#define TUZ_SERULES 	15.0
#define TUZ_SERULES_TAV 6.0
#define TUZ_MUTAT_TAV 	3000.0
#define TUZ_MAX_POZ		100

#define TERULET_VARAKOZAS 			7200
#define TERULET_VARAKOZAS_FRAKCIO 	10800

#define VEDOK	0
#define TAMADOK 1

/*-------------- Frakció Definíciók --------------*/
#define FRAKCIO_LSPD		1 //Rendõrség			-van
#define FRAKCIO_LSFD		2 //Tûzoltóság			-van
#define FRAKCIO_LSMD		3 //Mentõ				-van
#define FRAKCIO_GSF			4 //Los Aztecas			-van
#define FRAKCIO_KORMANY		5 //Önkormányzat		-van
#define FRAKCIO_KATONA		6 //SASD		-van
#define FRAKCIO_IMPERIALG		7 //ImperialG       -van
#define FRAKCIO_BALLAS		8 //Ballas				-nincs
#define FRAKCIO_BRATVA		9 //Bratva				-van
#define FRAKCIO_SZERELO		10 //Szerelõ			-van
#define FRAKCIO_IMPERIAL	11 //most vmi bratva	-nincs
#define FRAKCIO_RIPORTER	12 //teszt frakció		-van
#define FRAKCIO_LCN			13 //LCN				-van
#define FRAKCIO_YAKUZA		14 //yakuza				-van
#define FRAKCIO_FBI			15 // ATF (NAV)			-van
#define FRAKCIO_DUBLIN		16 //Dublin Crew		-van
//újak by broki
#define FRAKCIO_CRIMINALS	17 //Criminals			-van
#define FRAKCIO_IRA			18 //IRA				-van
#define FRAKCIO_STOCKWELL	19 //STOCKWELL			-van


#define MAXBUTOR 			50
#define MAXBUTORSZAM		MAX_HOUSE * MAXBUTOR

#define FK_SKIN_VALASZTAS	98764
#define SKIN_VALASZTAS		98765
#define FBI_SKIN_VALASZTAS		98766
#define FLOAT_INFINITY      (Float:0x7F800000)
#define AR_NEON				43000//Dollár

/*-------------- DIALOG ID-k --------------*/
#define DIALOG_NINCS					0
#define DIALOG_LOGIN        		1048
#define DIALOG_REGISTER     		1049
#define DIALOG_INFO					1050
#define DIALOG_TELEPORTOK			1051
#define DIALOG_ELADAS				1052
#define DIALOG_ELADAS2				1053
#define DIALOG_NEM					1054
#define DIALOG_ELETKOR				1055
#define DIALOG_SZARMAZAS			1056
#define DIALOG_BENZINKUTAK			1057
#define DIALOG_KAPU_STATISZTIKA		1058
#define DIALOG_KAPU_MODEL			1059
#define DIALOG_KAPU_TAVOLSAG		1060
#define DIALOG_KAPU_FRAKCIO			1061
#define DIALOG_KAPU_SZERKESZTES		1062
#define DIALOG_KAPU_POZICIO			1063
#define DIALOG_KAPU_SEBESSEG		1064
#define DIALOG_KAPU_FRAKCIO_SZERK	1065
#define DIALOG_KAPU_NEV				1066
#define DIALOG_KAPU_NEV_SZERKESZTES	1067
#define DIALOG_KAPU_TAV_SZERKESZTES	1068
#define DIALOG_KAPU_VALASZTAS		1069
#define DIALOG_KAPU_KOD				1070
#define DIALOG_KAPU_KOD_SZERKESZTES	1071

#define DIALOG_TAMASIPW 123456789

#define DIALOG_FRAKCIO_SZEF			1072
#define DIALOG_FRAKCIO_PENZ			1073
#define DIALOG_FRAKCIO_MARI			1074
#define DIALOG_FRAKCIO_KOKO			1075
#define DIALOG_FRAKCIO_MATI			1076
#define DIALOG_FRAKCIO_HERO			1077
#define DIALOG_FRAKCIO_PENZ_B		1078
#define DIALOG_FRAKCIO_PENZ_K		1079
#define DIALOG_FRAKCIO_MARI_B		1093
#define DIALOG_FRAKCIO_MARI_K		1094
#define DIALOG_FRAKCIO_KOKO_B		1095
#define DIALOG_FRAKCIO_KOKO_K		1096
#define DIALOG_FRAKCIO_MATI_B		1097
#define DIALOG_FRAKCIO_MATI_K		1098
#define DIALOG_FRAKCIO_HERO_B		1099
#define DIALOG_FRAKCIO_HERO_K		1100
#define DIALOG_FRAKCIO_FEGYVEREK	1080
#define DIALOG_FRAKCIO_SZEF_SZERK	1081
#define DIALOG_FRAKCIO_VALASZTAS	1082
#define DIALOG_LOGIN_USER_INPUT		1083
#define DIALOG_LOGIN_PW_INPUT		1084
#define DIALOG_DROG					1085
#define DIALOG_DROGMAG				1086
#define DIALOG_FEGYVERKESZITES		1087
#define DIALOG_BOLT					1088
#define DIALOG_FRAKCIO_SZEFMN		1089
#define DIALOG_DROGULT				1092

#define DIALOG_RADIO				1090
#define DIALOG_RADIO_JARMU			1091

#define DIALOG_BUTOR_PREMIUM		9877
#define DIALOG_BUTOR				9878
#define DIALOG_SZABAD_BUTOROK 		9879
#define DIALOG_BUTOR_VETEL	 		9880
#define	DIALOG_BUTOR_SZERKESZTES	9881
#define DIALOG_BUTOR_KATEGORIA		9882
#define DIALOG_BUTOR_ASZTAL			9883
#define DIALOG_SZABAD_BUTOROK_LISTA	9884
#define DIALOG_BUTOR_MEGVETEL		9885
#define DIALOG_BUTOR_TORLES			9886

#define DIALOG_HAZ_SZEF				9887
#define DIALOG_HAZ_SZEF_PENZ		9988 
#define DIALOG_HAZ_SZEF_KOKO		9989
#define DIALOG_HAZ_SZEF_HERO		9990
#define DIALOG_HAZ_SZEF_MARI		9991
#define DIALOG_HAZ_SZEF_MATI		9992

#define DIALOG_HAZ_SZEF_PENZ_B		9993
#define DIALOG_HAZ_SZEF_PENZ_K		9994
#define DIALOG_HAZ_SZEF_KOKO_B		9995
#define DIALOG_HAZ_SZEF_KOKO_K		9996
#define DIALOG_HAZ_SZEF_HERO_B		9997
#define DIALOG_HAZ_SZEF_HERO_K		9998
#define DIALOG_HAZ_SZEF_MARI_B		9999
#define DIALOG_HAZ_SZEF_MARI_K		10000
#define DIALOG_HAZ_SZEF_MATI_B		10001
#define DIALOG_HAZ_SZEF_MATI_K		10002
#define DIALOG_HAZ_SZEF_FEGY		10003

#define DIALOG_ADMIN				10004
#define DIALOG_MUNKA				10005
#define DIALOG_KOROZES				10006

#define DIALOG_BOLTROB				10007
#define DIALOG_DROGKESZIT			10008
#define DIALOG_BANKROB				10009
#define DIALOG_BANKROBP1			10010
#define DIALOG_BANKROBP2			10011

#define DIALOG_RUHABOLT				10012
#define DIALOG_VIZSGA_LISTA			10013
#define DIALOG_VIZSGA_KRESZ			10014

#define DIALOG_ADMIN_MENU			10015
#define DIALOG_KATONA_ENGEDELY		10016
#define DIALOG_KATONA_FELVESZ		10017

#define DIALOG_HOTDOG_MENU			10018
#define DIALOG_RENDSZAM				10019
#define DIALOG_RENDSZAM_ELFOGAD		10020
#define DIALOG_NEON					10021
#define DIALOG_FEGYVERBOLT			10022
#define DIALOG_SHOWTEXTDRAW			10023
#define DIALOG_TEXTDRAWBE			10024
#define DIALOG_TEXTDRAWKI			10025
#define DIALOG_HRENDELES			10026
#define DIALOG_FELSZERELES			10027
#define DIALOG_SWAT					10028
#define DIALOG_GPSEK 10029 
#define DIALOG_TUNING 10030
#define DIALOG_TUNING_V2 10031

#define DIALOG_DIVATBOLT_SZEMUVEG 10032
#define DIALOG_DIVATBOLT_FEJKENDO 10033
#define DIALOG_DIVATBOLT_SVAJCISAPKA 10034
#define DIALOG_DIVATBOLT_BASEBALLSAPKA 10035
#define DIALOG_DIVATBOLT_KALAP 10036
#define DIALOG_DIVATBOLT_SAPKA 10037
#define DIALOG_DIVATBOLT_KARORA 10038
#define DIALOG_DIVATBOLT_VALASZTAS 10039
#define DIALOG_DIVATBOLT_EDIT 10040
#define DIALOG_DIVATBOLT_EDIT_2 10041
#define DIALOG_DIVATBOLT_HOKIMASZK 10042

#define DIALOG_KERESKEDES_ELAD 10043
#define DIALOG_KERESKEDES_VESZ 10044
#define DIALOG_KERESKEDES_ACCEPT 10045
#define DIALOG_KERESKEDES_ACCEPT2 10046
#define DIALOG_OLTOZO 			10047

#define DIALOG_FBI_ENGEDELY		10048
#define DIALOG_FBI_FELVESZ		10049
#define DIALOG_RADIO_VHifi 		10050
#define DIALOG_ITALOK			10051
#define DIALOG_CAMERA			10052

#define DIALOG_HTANUL 			10053
#define DIALOG_HVALT 			10054

#define DIALOG_VILLOGO1			10055
#define DIALOG_VILLOGO2 		10056
#define DIALOG_VILLOGO3 		10057
#define DIALOG_NPCVASARLAS 		10058
#define DIALOG_VASARLAS 		10059

#define DIALOG_FORGALMI 		10060
#define DIALOG_LAKCIMKARTYA     10061

#define DIALOG_BOLT_BP			10062
#define DIALOG_RUHABOLT_BP		10063

//Trafipax Matteo
#define DIALOG_MAIN CAMERA_DIALOG_RANGE
#define DIALOG_RANGE CAMERA_DIALOG_RANGE +1
#define DIALOG_LIMIT CAMERA_DIALOG_RANGE +2
#define DIALOG_FINE CAMERA_DIALOG_RANGE +3
#define DIALOG_EDIT CAMERA_DIALOG_RANGE +4
#define DIALOG_EANGLE CAMERA_DIALOG_RANGE +5
#define DIALOG_ELIMIT CAMERA_DIALOG_RANGE +6
#define DIALOG_ERANGE CAMERA_DIALOG_RANGE +7
#define DIALOG_EFINE CAMERA_DIALOG_RANGE +8
#define DIALOG_ETYPE CAMERA_DIALOG_RANGE +9
#define DIALOG_LABEL CAMERA_DIALOG_RANGE +10
//Trafipax vége


//============[ Hexa Színek ]================|
#define COL_LILA 		"{A000FA}"
#define COL_PIROS 		"{F81414}"
#define COL_VPIROS		"{FF6347}"
#define COL_VKEK 		"{00C0FF}"
#define COL_VZOLD 		"{6EF83C}"
#define COL_NARANCS 	"{FA9600}"
#define COL_DORANGE 	"{FF8C00}"
#define COL_CITROM 		"{FAE600}"
#define COL_PINK 		"{F814E6}"
#define COL_SKEK 		"{1466F8}"
#define COL_VPINK 		"{FF3E98}"
#define COL_NZOLD 		"{22F710}"
#define COL_FEKETE		"{000000}"
#define COL_GREEN		"{33AA33}"
#define COL_TKEK		"{40E0D0}"
#define COL_ROZSA		"{FF00FF}"
#define COL_YELL		"{FFFF00}"

#define COLOR_DARKYELLOW 0xFFFF00FF
#define COLOR_ROZSA	0xFF00FFFF
#define COLOR_VZOLD	0x6EF83CAA
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_TKEK 0x40E0D000
#define COLOR_INVISIBLE 0xFFFFFF00
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LGREEN 0x9ACD32AA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_LBLUE 0x33CCFFAA
#define COLOR_LGREEN 0x9ACD32AA
#define COLOR_NAR 0xFF4500FF
#define COLOR_RADIO 0x8D8DFF00
#define COLOR_TERULET_GREY 0xB2B2B2C8
#define TEAM_ORANGE_COLOR 0xFF830000
#define TEAM_BALLAS_COLOR 0xD900D3C8
#define TEAM_TURKEY_COLOR 0xFF6347C8
#define TEAM_YAKUZA_COLOR 0xD900D3C8
#define COLOR_LIGHTBROWN 0x8B4513FF
#define COLOR_PMKEK 0x33CCFFAA

/* -------------- FlyMode --------------*/
#define MOVE_SPEED              100.0
#define ACCEL_RATE              0.03

#define CAMERA_MODE_NONE    	0
#define CAMERA_MODE_FLY     	1

#define MOVE_FORWARD    		1
#define MOVE_BACK       		2
#define MOVE_LEFT       		3
#define MOVE_RIGHT      		4
#define MOVE_FORWARD_LEFT       5
#define MOVE_FORWARD_RIGHT      6
#define MOVE_BACK_LEFT          7
#define MOVE_BACK_RIGHT         8

/*--------------- */
#define VEHICLE_DMG_DEFAULT			25.0
#define VEHICLE_DMG_COLT45			50.0
#define VEHICLE_DMG_SILENCED		50.0
#define VEHICLE_DMG_DEAGLE			75.0
#define VEHICLE_DMG_SHOTGUN			75.0
#define VEHICLE_DMG_SAWEDOFF		78.0
#define VEHICLE_DMG_SHOTGSPA		80.0
#define VEHICLE_DMG_UZI				35.0
#define VEHICLE_DMG_MP5				60.0
#define VEHICLE_DMG_AK47			80.0
#define VEHICLE_DMG_M4				80.0
#define VEHICLE_DMG_TEC9			40.0
#define VEHICLE_DMG_RIFLE			75.0
#define VEHICLE_DMG_ROCKETLAUNCHER	150.0
#define VEHICLE_DMG_HEATSEEKER		150.0
#define VEHICLE_DMG_MINIGUN			200.0

#define DecreaseVehHP(%1) if(vhp > %1) SetVehicleHealth(vehicleid, (vhp - %1))

/* -------------- Pénz --------------*/
#define PenzEgyenleg(%1) PlayerInfo[%1][ppenz]
#define ErtekAllitas(%1,%2,%3) PlayerInfo[%1][%2] = %3

/* -------------- GPCI, Const, stb --------------*/

native gpci(playerid, const serial[ ], maxlen);
const Float:INF_FLOAT = Float:0x7F800000;

new Iterator:Jarmuvek<MAX_VEHICLES>;
new Iterator:Adminok<MAX_PLAYERS>;

forward Float:GetDistanceToPointEx(playerid,Float:x1,Float:y1,Float:z1);

/* -------------- ENUMOK --------------*/

//Trafipax
enum _camera
{_id,Float:_x,Float:_y,Float:_z,Float:_rot,_range,_limit,_fine,_usemph,_objectid,bool:_active,bool:_activelabel,_labeltxt[128],Text3D:_label,_eddiggyujtott,_hovamenjen}

//Trafipax
enum Villogo
{
	SPU,
	VehicleID,
	Float:villogoX,
	Float:villogoY,
	Float:villogoZ
};

enum fEnum
{
	fNev[24],
	fMati,
	fSkill,
	fTolteny
};

enum
{
	JARMU_MHT_NYITVA		=	1,
	JARMU_MHT_SERULT		=	2,
	JARMU_MHT_LEVALT		=	4,

	JARMU_CST_NYITVA		=	256,
	JARMU_CST_SERULT		=	512,
	JARMU_CST_LEVALT		=	1024,

	JARMU_VA_NYITVA			=	65536,
	JARMU_VA_SERULT			=	131072,
	JARMU_VA_LEVALT			=	262144,

	JARMU_UA_NYITVA			=	16777216,
	JARMU_UA_SERULT			=	33554432,
	JARMU_UA_LEVALT			=	67108864
}

enum
{
    evdLights_Drivers       =   1,     
    evdLights_Passengers    =   4,      
    evdLights_Rear          =   64     
}

enum kuka
{
	kID,
	bool:kHasznalva,
	kFazis,
	kPlayerid,
	kCP[MAX_PLAYERS]
};

enum far
{
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	fAllapot,
	bool:fKivagva
};


enum diInfo
{
	dVan,
	Float:dPosX,
	Float:dPosY,
	Float:dPosZ,
	Float:dRotX,
	Float:dRotY,
	Float:dRotZ,
	Float:dScaleX,
	Float:dScaleY,
	Float:dScaleZ,
	dmodelid
};
new DivatInfo[4][MAX_PLAYERS][diInfo];
new MitModosit[MAX_PLAYERS];
new DivatBolt_SZEMUVEG[19][5][64] = {
	{"Piros szemüveg", "Szemüveg piros lencsével", 5000, 19006, SLOT_SZEMUVEG},
	{"Narancssárga szemüveg", "Szemüveg narancs lencsével", 5000, 19007, SLOT_SZEMUVEG},
	{"Zöld szemüveg", "Szemüveg zöld lencsével", 5000, 19008, SLOT_SZEMUVEG},
	{"Kék szemüveg", "Szemüveg kék lencsével", 5000, 19009, SLOT_SZEMUVEG},
	{"RózsaSzin szemüveg", "Szemüveg rózsaSzin lencsével", 5000, 19010, SLOT_SZEMUVEG},
	{"Fekete szemüveg", "Szemüveg fekete lencsével", 5000, 19012, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Fekete retró szemüveg", 10000, 19022, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Kék retró szemüveg", 10000, 19023, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Lila retró szemüveg", 10000, 19024, SLOT_SZEMUVEG},
	{"Retró szemüveg", "RózsaSzin retró szemüveg", 10000, 19025, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Sötét rózsaSzin retró szemüveg", 10000, 19026, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Narancssárga retró szemüveg", 10000, 19027, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Citromsárga retró szemüveg", 10000, 19028, SLOT_SZEMUVEG},
	{"Retró szemüveg", "Zöld retró szemüveg", 10000, 19029, SLOT_SZEMUVEG},
	{"Napszemüveg", "Szûrkes napszemüveg", 4000, 19030, SLOT_SZEMUVEG},
	{"Napszemüveg szemüveg", "Sárga napszemüveg", 10000, 19031, SLOT_SZEMUVEG},
	{"Napszemüveg szemüveg", "Teljesen fekete napszemüveg", 10000, 19033, SLOT_SZEMUVEG},
	{"Rendõr szemüveg", "Piros rendõrszemüveg", 20000, 19139, SLOT_SZEMUVEG},
	{"Rendõr szemüveg", "Kék rendõrszemüveg", 20000, 19140, SLOT_SZEMUVEG}
};
new DivatBolt_HOKIMASZK[13][5][64] = {
	{"Fehér HokiMaszk", "Fehér Színû hokimaszk", 25, 19036, SLOT_MASZK},
	{"Piros HokiMaszk", "Piros Színû hokimaszk", 25, 19037, SLOT_MASZK},
	{"Zöld HokiMaszk", "Zöld Színû hokimaszk", 25, 19038, SLOT_MASZK},
	{"Hálál Fejes Maszk", "Halál Fejes mintás maszk", 25, 18911, SLOT_MASZK},
	{"Fekete Mintás Maszk", "Fekete színû maszk", 25, 18912, SLOT_MASZK},
	{"Zöld Mintás Maszk", "Zöld Mintás Maszk", 25, 18913, SLOT_MASZK},
	{"Katonás Maszk", "Katona maszk", 25, 18914, SLOT_MASZK},
	{"Rózsaszín Maszk", "Rózsaszín Maszk", 25, 18915, SLOT_MASZK},
	{"Sárga Maszk", "Sárga Színû maszk", 25, 18916, SLOT_MASZK},
	{"Kék színû Maszk", "Kék színû", 25, 18917, SLOT_MASZK},
	{"Fekete Fehér Mintás Maszk", "Fekte Fehér Mintás Mintás", 25, 18918, SLOT_MASZK},
	{"Sárga Pöttyös Maszk", "Sárga Pöttyös Maszk", 25, 18919, SLOT_MASZK},
	{"Virágos Maszk", "Virágos Maszk", 25, 18920, SLOT_MASZK}
};

new DivatBolt_FEJKENDO[10][5][64] = {
	{"Fejkendõ", "Sötétkék mintás fejkendõ", 5000, 18891, SLOT_SAPKA},
	{"Fejkendõ", "Piros mintás fejkendõ", 5000, 18892, SLOT_SAPKA},
	{"Fejkendõ", "Piros fehér mintás fejkendõ", 5000, 18893, SLOT_SAPKA},
	{"Fejkendõ", "Cannabis-os fejkendõ", 5000, 18894, SLOT_SAPKA},
	{"Fejkendõ", "Halálfejes fejkendõ", 5000, 18895, SLOT_SAPKA},
	{"Fejkendõ", "Fekete fehér mintás fejkendõ", 5000, 18896, SLOT_SAPKA},
	{"Fejkendõ", "Fehér kék mintás fejkendõ", 5000, 18897, SLOT_SAPKA},
	{"Fejkendõ", "Zöld fehér mintás fejkendõ", 5000, 18898, SLOT_SAPKA},
	{"Fejkendõ", "Lila fehér mintás fejkendõ", 5000, 18899, SLOT_SAPKA},
	{"Fejkendõ", "Piros fehér mintás fejkendõ", 5000, 18893, SLOT_SAPKA}
};
new DivatBolt_SVAJCISAPKA[5][5][64] = {
	{"Svájci sapka", "Fekete svájci sapka", 5000, 18921, SLOT_SAPKA},
	{"Svájci sapka", "Piros svájci sapka", 5000, 18922, SLOT_SAPKA},
	{"Svájci sapka", "Kék svájci sapka", 5000, 18923, SLOT_SAPKA},
	{"Svájci sapka", "Terep svájci sapka", 5000, 18924, SLOT_SAPKA},
	{"Svájci sapka", "Piros fekete svájci sapka", 5000, 18925, SLOT_SAPKA}
};
new DivatBolt_BASEBALLSAPKA[12][5][64] = {
	{"Baseball sapka", "TerepSzinû baseball sapka", 5000, 18926, SLOT_SAPKA},
	{"Baseball sapka", "Sötét-világoskékSzinû baseball sapka", 5000, 18927, SLOT_SAPKA},
	{"Baseball sapka", "SokSzinû  baseball sapka", 5000, 18928, SLOT_SAPKA},
	{"Baseball sapka", "Szûrke fehér Szinû baseball sapka", 5000, 18929, SLOT_SAPKA},
	{"Baseball sapka", "Narancssárga-sárga Szinû baseball sapka", 5000, 18932, SLOT_SAPKA},
	{"Baseball sapka", "Fehér fekete Szinû mintás baseball sapka", 5000, 18933, SLOT_SAPKA},
	{"Baseball sapka", "Világospiros Szinû baseball sapka", 5000, 18934, SLOT_SAPKA},
	{"Baseball sapka", "Fekete szûrke baseball sapka", 5000, 18941, SLOT_SAPKA},
	{"Baseball sapka", "Szûrke baseball sapka", 5000, 18942, SLOT_SAPKA},
	{"Baseball sapka", "Zöld baseball sapka", 5000, 18943, SLOT_SAPKA},
	{"Baseball sapka", "Sárga fekete mintás baseball sapka", 5000, 18958, SLOT_SAPKA},
	{"Baseball sapka", "Kamionos baseball sapka", 5000, 18961, SLOT_SAPKA}
};
new DivatBolt_KALAP[15][5][64] = {
	{"Kalap", "Szûrke fehér mintás kalap", 5000, 18945, SLOT_SAPKA},
	{"Kalap", "Szûrke divatos kalap", 5000, 18946, SLOT_SAPKA},
	{"Kalap", "Fekete elegáns mintás kalap", 5000, 18947, SLOT_SAPKA},
	{"Kalap", "Kék elengáns kalap mintás kalap", 5000, 18948, SLOT_SAPKA},
	{"Kalap", "Zöld elegáns kalap", 5000, 18949, SLOT_SAPKA},
	{"Kalap", "Piros elegáns kalap", 5000, 18950, SLOT_SAPKA},
	{"Kalap", "Sárga elegáns kalap", 5000, 18951, SLOT_SAPKA},
	{"Kalap", "Fekete vestern kalap", 5000, 18962, SLOT_SAPKA},
	{"Kalap", "Parduc kalap", 5000, 18970, SLOT_SAPKA},
	{"Kalap", "Fekete fehér mintás kalap", 5000, 18971, SLOT_SAPKA},
	{"Kalap", "Barna covboy kalap", 5000, 19095, SLOT_SAPKA},
	{"Kalap", "Fekete covboy kalap", 5000, 19096, SLOT_SAPKA},
	{"Kalap", "Fekete rendõr kalap", 5000, 19099, SLOT_SAPKA},
	{"Kalap", "Barna rendõr kalap", 5000, 19100, SLOT_SAPKA},
	{"Kalap", "Fehér elegáns kalap", 5000, 19488, SLOT_SAPKA}
};
new DivatBolt_SAPKA[5][5][64] = {
	{"Sapka", "Fekete télisapka", 3000, 18953, SLOT_SAPKA},
	{"Sapka", "Szûrke télisapka", 3000, 18954, SLOT_SAPKA},
	{"Sapka", "Fekete Szinû(repper) télisapka", 3000, 18964, SLOT_SAPKA},
	{"Sapka", "Piros fekete divatos sapka", 5000, 19067, SLOT_SAPKA},
	{"sapka", "Fekete szûrke divatos sapka", 5000, 19069, SLOT_SAPKA}
};
new DivatBolt_KARORA[12][5][64] = {
	{"Aranyóra", "Egy luxus arany óra", 150000, 19039, SLOT_KARORA},
	{"Bronz karóra", "Egy luxus bronz óra", 130000, 19041, SLOT_KARORA},
	{"Aranyóra 2", "Egy másik luxus arany óra", 150000, 19042, SLOT_KARORA},
	{"Ezüst karóra", "Egy luxus ezüst óra", 140000, 19040, SLOT_KARORA},
	{"Ezüst karóra 2", "Egy másik luxus ezüst óra", 140000, 19043, SLOT_KARORA},
	{"Egyszerû digitális óra (Lila)", "Lila Szinû egyszerû óra", 5000, 19044, SLOT_KARORA},
	{"Egyszerû digitális óra (Pink)", "Pink Szinû egyszerû óra", 5000, 19045, SLOT_KARORA},
	{"Egyszerû digitális óra (Zöld)", "Zöld Szinû egyszerû óra", 5000, 19046, SLOT_KARORA},
	{"Egyszerû digitális óra (Sötét Lila)", "Sötét lila Szinû egyszerû óra", 5000, 19047, SLOT_KARORA},
	{"Egyszerû digitális óra (Kék-Fekete)", "Kék-fekete csíkos egyszerû óra", 5000, 19048, SLOT_KARORA},
	{"Egyszerû digitális óra (Narancs-Fekete)", "Narancs-fekete mintás egyszerû óra", 5000, 19051, SLOT_KARORA},
	{"Egyszerû digitális óra (RózsaSzin-piros)", "RózsaSzin-piros mintás egyszerû óra", 5000, 19052, SLOT_KARORA}
};
#define KIEGESZITO_SAPKA 0
#define KIEGESZITO_SZEMUVEG 1
#define KIEGESZITO_KARORA 2


#define MAX_TAG 100
#define TAG_FELFESTESIDO 5
enum taInfo
{
	tID,
	tVan,
	tFestveVan,
 	Float:tPoz[3],
 	Float:tRot[3],
 	tKesz,
 	tTulaj,
 	tObject,
	tGraffitiObject,
	Text3D:tText
}
new TagInfo[MAX_TAG][taInfo];
new GraffitiObjectLerakas[MAX_PLAYERS];


enum butorInfo
{
	Float:butorPosX,
	Float:butorPosY,
	Float:butorPosZ,
	Float:butorPosRX,
	Float:butorPosRY,
	Float:butorPosRZ,
	butorModel,
	butorVW,
	butorInterior,
	bool:butorHasznalva,
	bool:butorMegveve,
	butorObject,
	butorTipus,
	butorListitem
}

enum Faadatok
{
	Float:faposx,
	Float:faposy,
	Float:faposz,
	faplayerid,
	Text3D:falabel,
	bool:fahasznalva
};

enum terInfo
{
	bool:tVan,
	tNev[40],
	tZone,
	tArea,
	Float:tMinPos[2],
	Float:tMaxPos[2],
	tFrakcio,
	tHaszon[5],
	tHaszonIdo,
	bool:tHarcFolyik,
	tTipus,
	tHarcolok[2],
	tVarakozasIdo,
	tFoglalasIdo
};

enum hullaInfo
{
	bool:Hvan,
	Hido,
	Hobject[5],
	Float:Hpos[3],
	Text3D:Htext3d,
	Hoka,
	Hkie[MAX_PLAYER_NAME],
	Hkieid,
	Hmegolte[MAX_PLAYER_NAME],
	Hmegolteid,
	Htimer,
	Hperc,
	Hallapot,
	Hvw,
	HHeroin,
	HKokain,
	HMati,
	HMariska,
	HPenz
};

enum dropObject
{
	dTipus,
	dFegyver,
	dErtek,
	Float:dPos[3],
	dInt,
	dVirtual,
	dObject,
	Text3D:dText,
	bool:dHasznalva,
	dTorlesiAzonosito
};

//ActiveStat System => Martin
/*enum activeStat
{
	asID,
	asVA,
	asPM,
	as
};

new ActiveStat[ MAX_PLAYERS ][ activeStat ];*/

enum statEnum
{
	pID[64],
	pDatum[12],
	pRIdo,
	pIdo,
	pOnduty,
	pVA,
	pPM
}
new StatInfo[MAX_PLAYERS][statEnum];
new JelenlegiDatum[12], DatumEv, DatumHonap, DatumNap, UnixTime;

#define STAT_MENTES_IDO 30

#define MAX_ROADBLOCKS 85
enum rInfo
{
    sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject
};
new Roadblocks[MAX_ROADBLOCKS][rInfo];

#define MAXHIFI 100
enum hifiInfo
{
	hID,
	hVan,
	Float:hX,
	Float:hY,
	Float:hZ,
	Float:hRx,
	Float:hRy,
	Float:hRz,
	hLerako[256],
	hObject,
	hURL[256]
}
new HifiInfo[MAXHIFI][hifiInfo];

#define MAXDRINK 100
enum drinkInfo
{
	dID,
	dVan,
	Float:dX,
	Float:dY,
	Float:dZ,
	Text3D:dText[32]
}
new DrinkInfo[MAXDRINK][drinkInfo];

enum playerInfo
{
	pID,
	pNev[256],
	pAlnev[MAX_PLAYER_NAME + 1],
	pFilterID,
	bool:pAlnevbe,
	padmin,
	pAS,
	pMunka1,
	pMunka2,
	pD_MunkaValt[2],
	pDefense[64],
	pDefensed[2],
	ppenz,
	phalal,
	pBsz,
	pBszPenz,
	pBszPin,
	Float:posx,
	Float:posy,
	Float:posz,
	Float:pangle,
	bool:pbelepve,
	bool:pnemitva,
	probalkozasok,
	pjatekosszint,
	pskin,
	pDutySkin,
	pvirtualworld,
	pjail,//melyik börtön
	pJailIdo,//börtön idõ másodpercben
	pJailOk[64],//Börtönbe zárás oka
	pJailAdta[MAX_PLAYER_NAME],//Aki bezárta a börtönbe
	pinterior,
	pwarnok,
	bool:pmindenthall,
	bool:psmindenthall,
	bool:pallreport,
	pregisztracio,
	bool:pobjectbetoltes,
	bool:pbemehet,
	pFrakcio,
	pLeader,
	prang,
	peladojarmu,
	peladokitol,
	bool:pmotortinditja,
	ptelefonszam,
	bool:pTelefonVonalban,
	bool:pHivo,
	bool:ptelefonal,
	ptelefonaloid,
	pszintlepesmperc,
	pszintlepesperc,
	pszintlepesora,
	pszintlepeskell,
	bool:pmegbotlott,
	pnem,
	peletkor,
	pszarmazas,
	bool:pVizsgal,
	bool:phazatnez,
	//panimban,
	bool:pValtozott,
	phaz,
	pMelyikKapu,
	pKamions,
	pKamionc,
	pKCheckpointS,
	pKCheckpointC,
	pFizetesIdo,
	pFizetes,
	bool:pJarmuTDMutat,
	pJarmuben,
	pIP[16],
	pUCheckpoint,
	Float:pTavolsag,
	pFegyverek[13],
	pToltenyek[13],
	pPBFegyverek[13],//Amíg Paintball-ban van, itt tárolódik a kezében lévõ összes fegyver
	pPBToltenyek[13],//itt pedig az összes töltény
	pFegyver,
	pFegyverMuvelet,
	bool:pDesync,
	bool:pOOC,
	bool:pKapuKezeles,
	Float:pElet,
	Float:pUjElet,
	Float:pPancel,
	Float:pUjPancel,
	bool:pVehiclePosUpdated,
	pCarEnterTime,
	pCarFlood,
	pCarFloodTime,
	pCarTeleportFlood,
	pCarTeleportTime,
	pCarEntering,
	bool:pSokkolva,
	pBilincselve,
	pBilincsIdo,
	pSokkolt,
	pSzefFegyver,
	bool:pTeruletSzerkeszt,
	pTerulet,
	pFavagoMunkaTimer,
	bool:pFavagoMunkazik,
	bool:pAduty,
	bool:pASduty, //as dutyhoz Jim
	pDuty[2],
	Text3D:pDutyText,
	Text3D:pASDutyText,
	Text3D:pHalalText,
	Text3D:pRabText,
	pMegerosites,
	pHazKulcs[MAX_HAZ_JARMU],
	pJarmuKulcs[MAX_HAZ_JARMU],
	pCegKulcs,
	pSzButor,
	pPremiumPont,
	pPremiumIdo,
	pPremiumCsomag,
	pButorKategoria,
	pMotorFlood,
	pFrakcioKezeles,
	pCamera,
	pCameraE,
	bool:pSpeedBoots,
	pAJ_Randtime,
	pAJ_RandStr[RANDOM_STRING_AJ + 1],
	pReport[4],
	pTV[3],
	bool:pNevek,
	pCheatFigy,
	bool:pTuzMutat,
	bool:pTuzetOlt,
	bool:pTimerFut,
	pSpawnVedelem,
	//pExp[MAX_MUNKA],//(MUNKA_VALAMI - 20) = exp pontjai
	pExp[4], //0 - hányszor (legális), 1 - tapasztalati pont(legális), 2 - hányszor (illegális), 3 - tapasztalati pont(illegális)
	pGPSV,
	pDrogMag[3],
	pDrogMit[2],
	pMatiCP,
	pVas,
	pMaterial,
	pKokain,
	pHeroin,
	pMarihuana,
	pVasCP,
	bool:pFoglalt,
	pFegyverSkill,
	pJatszottOra,
	bool:pSzunetel,
	pSegelyhivas,
	pSegelyhivasOk[128],
	pSegelyhivasInfo[128],
	pBereltJarmu,
	pKotszer,
	pTelefonPenz,
	pTelefonKonyv,
	pFarmernel,
	pUsingLoopingAnim,
	pAnimLibsPreloaded,
	pKiertMegy,
	bool:pTog[15],//0 = rádiók, 1 = válaszok, 2 = globál ooc, 3 = admin infó, 4 = beszédanim, 5 = telefon kikapcsolva 6 = admin report, 7 = PM Block, 9 = riporter, 11 = hírdetés, 12 = togtörés, 13 = alefoglal 14 = ajtó
	pFlood,
	bool:pMP3_Megy,
	bool:pJarmuZene,
	pCP,
	pKukaIndex,
	pVisz,
	pFureszelt,
	pVizsga[3],
	pSK,//sebességkorlát
	bool:pBanFlood,
	bool:pTiltvaVan,
	pDrogAnyag[3],
	pBHackTimer,
	pBHackJegyek[5 + 1],
	pBHackMelyik,
	pBMennyi,
	pKresz[2],
	pEngedely[MAX_ENGEDELY],
	pHatizsak,
	pHatizsakO,
	pPenzTimer,
	pJarmubenUlt,
	bool:pAEnged[2],//0 = Goto
	pFigyelmeztetes,
	pTryTime,
	bool:pOv,
	pMunkaFlood,
	pSzendvics,
	bool:pNewSpawn,
	pBirsag[3],	//Matteo
	pLenyomoz,
	pJarmuKolcson,
	pScriptShoot[3],
	pFakeKill[2],
	pLastDeath,
	pPaintBall[2], //0 = paintballozik, 1 = ölései száma
	pMaszk,
	bool:pMaszkVisel,
	pDialogID,
	Float:pVizelet,
	Float:pEhseg,
	bool:pPisil,
	pProcess[5], //Process ID - extra - extra - extra - extra | hogy ne kelljen mindig új változó minden szarhoz - Martin
	pSzuksegletFigy,
	pAfkIdo,
	Text3D:pFelirat,
	bool:pBejelento,
	pBID,
	pFeliratIdo,
	Text3D:pAFK_text,
	pJoint[3],
	pBoltCucc[50],
	pSzemelyi,
	pDrogMuvelet[4],
	bool:pHarcol,
	pValaszok,
	pOOC_Figy,
	bool:pSisak,
	bool:pMegkotve,
	bool:pTeruletKezeles,
	pHitman,
	pHitmanDuty,
	pHitmanNev[MAX_PLAYER_NAME],
	pAdminAlnev[MAX_PLAYER_NAME],
	bool:pAdminAlnevbe,
	bool:pjetpack,
	pSWAT,
	pSWATRang,
	pUzemmod,
	pSokk,
	pSWATDuty,
	Float:pWPX,
	Float:pWPY,
	Float:pWPZ,
	Float:pMarkx,
	Float:pMarky,
	Float:pMarkz,
	pMarkjelolve,
	pWPjelolve,
	pSM,
	pSMrang,
	pSMkocsi,
	pCsipogo,
	pKanna,
	pKannaBenzin,
	pSKV,
	pSKVrang,
	pTaxithivott,
	pTaxiorastart,
	pTaxiban,
	pTaxisid,
	pNoname,
	pMeghalt,
	pHalalfogadas,
	Float:pHx,
	Float:pHy,
	Float:pHz,
	pHazasodvaVele[MAX_PLAYER_NAME+1],
	pCrashobj,
	pGodmode,
	pKereskedo,
	pHifi,
	pLampa,
	pHal,
	pClub,
	pFrakcioTiltas,
	pFegyverTiltas,
	pReportTiltas,
	pAutoTiltas,
	pASTiltas,
	pBox,
	pGrabkick,
	pKungfu,
	pKneehead,
	pElbow,
	pMaszkID,
	pHarcstilusTanul,
	pFegyvertVasarolt[9],
	pNPCSzobaAll[9],
	pAccent[32],
	pLottounix,
	pLakcimkartya,
	pStreameltplayer,
	pStreameltvehicle,
	bool:pTrafipax,
	pMasoknakstreamelt
};

enum vehicleInfo
{
	vTulajID,
	Float:vPosx,
	Float:vPosy,
	Float:vPosz,
	Float:vAngle,
	vAr,
	vModel,
	vTulaj[MAX_PLAYER_NAME],
	vMunka,
	vID,
	vSzin1,
	vSzin2,
	bool:vHasznalva,
	Float:vElet,
	vHiba,
	bool:vZarva,
	vRang,
	bool:vMotorelinditva,
	Float:vKilometer,
	Float:vUzemanyag,
	vPanels,
	vDoors,
	vLights,
	vTires,
	JobbIndex1,
	JobbIndex2,
	JobbTrailer1,
	JobbTrailer2,
	BalIndex1,
	BalIndex2,
	BalTrailer1,
	BalTrailer2,
	BalIndex,
	JobbIndex,
	Kozos,
	vKObject,
	vLastActive,
	vTLastActive,//Tulaj
	bool:vBerelt,
	vRadio,
	vVas,
	vMaterial,
	vHeroin,
	vKokain,
	vMarihuana,
	vFegyver[5],
	vTolteny[5],
	vHulla,
	Text3D:vOktato,
	bool:vAblakLetekerve,
	bool:vInsert, //Lehívott vagy megvehetõ kocsi.
	vRendszam[32],
	vNeon[5],
	vMod[14],
	vHidraulika,
	vMatrica,
	vGarazsban,
	vApben
};

//Terheléselosztás -> Jármû rendszer - Martin
enum vehUpdate
{
	bool:vuPos,
	bool:vuAr,
	bool:vuModel,
	bool:vuTulaj,
	bool:vuMunka,
	bool:vuSzin,
	bool:vuElet,
	bool:vuHiba,
	bool:vuZarva,
	bool:vuRang,
	bool:vuVas,
	bool:vuMaterial,
	bool:vuHeroin,
	bool:vuKokain,
	bool:vuMarihuana,
	bool:vuFegyver,
	bool:vuRendszam,
	bool:vuNeon,
	bool:vuMod,
	bool:vuHidraulika,
	bool:vuMatrica,
	bool:vuGarazsban,
	bool:vuApben
};

//Jármû adatok => UserCP
enum jarmuAdat
{
	jNev[32],
	jUjNev[32],
	jAr,
	jLophato
};

new JarmuAdat[MAX_JARMU][jarmuAdat];

/*enum statInfo
{
	pValaszIdo[MAX_PLAYERS],
	bool:pValaszolva[MAX_PLAYERS],**
	bool:pIrte[MAX_PLAYERS],
	pPM
};*/

enum benzinkutInfo
{
	bnev[32 + 1],
	Float:bposx,
	Float:bposy,
	Float:bposz,
	bbenzinar,
	bdieselar,
	Float:bbenzinmennyiseg,
	Float:bdieselmennyiseg,
	bool:bhasznalva,
	Float:bradius,
	blistitem
};

enum serverInfo
{
	bool:sOOC,
	bool:sCsend,
	bool:sBetoltve,
	sHarcVan,
	sUpdater,
	sCounter,
	bool:sWhiteList,
	bool:sRestart,
	sIdojaras,
	sIdojarasKov,
	sIdojarasIdo,
	bool:sTuzVan,
	sTuzIdo[3],
	sTuzPenz,
	sCarResi[2],
	bool:sHirdetes,
	sUCP_Check,
	sRL_Time[4],
	sFHaszon,
	sDrog[3],
	sDrogSz,
	sBoltBot,
	sBankBot,
	bool:sDMOff,
	bool:sAka,
	sPort,
	bool:sKellPB,
	sPaintBall[6],
	sZene[128],
	sBankPenz[2],
	sBankrob
};

enum houseInfo
{
    pickup,
	hazar,
	bool:hasznalatban,
	Text3D:label,
	Float:posx,
	Float:posy,
	Float:posz,
	Text3D:belsolabel,
	belsopickup,
	tulaj[32+1],
	hTulajID,
	hdbid,
	inter,
	Text:HazTextDraw,
	butorsz,
	hazSzef[5],
	Text3D:hDrogHely[50],
	hDrogAllapot[50],
	hDrogMennyi[50],
	hDrogMi[50],
	hFegyver[15],
	hTolteny[15],
	bool:hZarva,
	hTipus,
	hPince,
	hGarazs
};

enum BelsoInteriorAdatok
{
	Float:belsox,
	Float:belsoy,
	Float:belsoz,
	Float:belsoszog,
	interior
};

enum TpEnum
{
	Float:tposx,
	Float:tposy,
	Float:tposz,
	Float:tangle,
	tpnev[32],
	bool:tphasznalva,
	listid,
	tinterior,
	tvw
};

enum GPSEnum
{
	Float:gposx,
	Float:gposy,
	Float:gposz,
	bool:gHasznalva,
	listid,
	gnev[MAX_PLAYER_NAME]
}
new GPSInfo[MAXGPS][GPSEnum];

enum ajtoAdatok
{
	anev[32],
	Float:abepos[4],
	Float:akipos[4],
	afreeze,
	bool:anyitva,
	bool:ajarmu,
	abeinterior,
	akiinterior,
	abevw,
	akivw,
	bool:ahasznalva,
	Text3D:abelabel,
	Text3D:akilabel,
	abepickup,
	akipickup,
	abepickupk,
	akipickupk
};

enum
{
 	KOCSI_MOTOR,
	KOCSI_LAMPA,
	KOCSI_RIASZTO,
	KOCSI_AJTO,
	KOCSI_MOTORHAZTETO,
	KOCSI_CSOMAGTARTO,
	KOCSI_OBJECTIVE
};

enum noclipenum
{
	cameramode,
	flyobject,
	mode,
	lrold,
	udold,
	lastmove,
	Float:accelmul
};

enum szerverIdozitok
{
	ADAT_MENTES,
	JARMU_MENTES,
	UZEMANYAG_LEVONAS,
	TEXTDRAW_FRISSITES
};

enum JatekosIdozitok
{
	HATTER_VALTOZTATAS,
	SCREEN_FADE
};

enum automataInfo
{
	Float:aupos[6],
	autipus,
	aupenz,
	bool:auhasznalva,
	auobject,
	bool:auszerkeszti,
	auVW,
	auInt,
	Text3D:autext
};

enum fkInfo
{
	bool:fVan,
	fNev[32],
	fRang1[20],
	fRang2[20],
	fRang3[20],
	fRang4[20],
	fRang5[20],
 	fRang6[20],
 	fRang7[20],
 	fRang8[20],
	fRang9[20],
	fRang10[20],
	fRang11[20],
	fRang12[20],
	fRang13[20],
	fRang14[20],
	fRang15[20],
	fRang16[20],
 	fLegalis,
 	bool:fSzefObject,
 	Float:fSzefPos[3],
	Float:fSzefPosR[3],
	fVW,
	fInterior,
	fObjectID,
 	fSzefRang,
 	fPenz,
 	fMaterial,
	fHeroin,
	fKokain,
	fMarihuana,
	fFegyverek[50],
	fToltenyek[50],
	fUtolsoTamadas,
	fFizetes[16],
	fMaxRang,
	//bool:fKellUpdates,
	fLimit
};

//Terheléselosztás -> Frakció mentés - Martin
enum fk_Update
{
	bool:fuNev,
	bool:fuRang1,
	bool:fuRang2,
	bool:fuRang3,
	bool:fuRang4,
	bool:fuRang5,
 	bool:fuRang6,
 	bool:fuRang7,
 	bool:fuRang8,
	bool:fuRang9,
	bool:fuRang10,
	bool:fuRang11,
	bool:fuRang12,
	bool:fuRang13,
	bool:fuRang14,
	bool:fuRang15,
	bool:fuRang16,
 	bool:fuLegalis,
 	bool:fuSzefObject,
 	bool:fuSzefRang,
 	bool:fuPenz,
 	bool:fuMaterial,
	bool:fuHeroin,
	bool:fuKokain,
	bool:fuMarihuana,
	bool:fuFegyverek,
	bool:fuUtolsoTamadas,
	bool:fuFizetes,
	bool:fmaxrang,
	bool:fuLimit
};

enum kapuInfo
{
	kNev[32],
	bool:kVan,
	bool:kSzerkeszt,
	kModel,
	Float:kTav,
	Float:kSpeed,
	Float:kPos[3],
	Float:kNPos[3],
	Float:kNRPos[3],
	Float:kZPos[3],
	Float:kZRPos[3],
	kHasznalo[MAX_KAPU_HASZNALO],
	bool:kMozgo,
	bool:kNyit,
	kVW,
	kOID,
	kKod
};

enum ceginfo
{
	bool:cVan,
	cNev[32],
	cANev[20],
	cTipus,
	cTulaj[MAX_PLAYER_NAME],
	cTulajID,
	cFTulaj,
	cBelepo,
	cKassza,
	cAr,
	Float:cPosBe[4],
	Float:cPosKi[4],
	cVw[2],
	cInt[2],
	cPickup
};

enum tuzInfo
{
	bool:tuzAktiv,
	Float:tPoz[3],
	Text3D:tFelirat,
	tObject[TUZ_OBJECT],
	tMap,
	tMaxHP,
	tHP
};

enum tuzInform
{
	Float:tPoz[3],
	tMapID
};

enum enkorozes
{
	krSzint,
	krOka[128],
	krNev[MAX_PLAYER_NAME],
	krKiadta[MAX_PLAYER_NAME]
};

enum bankBot
{
	bankNPCID,
	bool:bankAnim
};

enum bankinfo
{
	bBankElocsarnok,
	bBankSzefterem[5 + 1],
	bool:bBankInditva,
	bool:bBankSZLezerK,
	bBankEErtesites,
	bBankSZErtesites,
	bAjto[2]
};

new BankInfo[bankinfo];
//new DIterator:BankELezer<50>;
new DIterator:BankSZLezer<50>;
new BankBotok[bankBot];
new Korozes[MAX_PLAYERS][enkorozes];
new TuzPoz[TUZ_MAX_POZ][tuzInform];
new Tuz[TUZ_MAX][tuzInfo];
new Beirhatjahogyigen[MAX_PLAYERS];
new Hazassag[MAX_PLAYERS];
new Elso[MAX_PLAYERS];
new GPSFloodolas[MAX_PLAYERS];
new HifiObjectLerakas[MAX_PLAYERS];
new BankIdo = 0;

//Ezt nem részletezném Ezekkel a nevekkel nem jöhetnek fel a playerek kész slússz passz by hiroshi
new NPCNevek[][] = {
	"Steve_Pullman",
	"Wayne_Freeman",
	"Jordan_Mills",
	"Dwayne_Harrison",
	"Jose_Dolores",
	"Cruzito_Espinosa",
	"Alphonse_Finucci",
	"Sergey_Stanislav",
	"Ferruccio_Sostrato"
};

stock NemLehetANeve(playerid) {
    new Neve[MAX_PLAYER_NAME];
    GetPlayerName(playerid, Neve, sizeof(Neve));
    for(new i = 0; i < sizeof(NPCNevek); i++) {
        if(strcmp(Neve,NPCNevek[i],true) == 0) {
            return 1;
        }
    }
    return 0;
}

//Azé [NPC] és .... mert sajt!

new VasarlosNPCK[9];
//Matteo ideiglenesen
stock SendClientMessageEx(playerid,color,type[],{Float,_}:...)
{
	new string[128];
	for(new i = 0;i<numargs() -2;i++)
	{
	    switch(type[i])
	    {
	        case 's':
	        {
				new result[128];
				for(new a= 0;getarg(i +3,a) != 0;a++)
				{
				    result[a] = getarg(i +3,a);
				}
				if(!strlen(string))
				{
				    format(string,sizeof string,"%s",result);
				} else format(string,sizeof string,"%s%s",string,result);
	        }

	        case 'i':
	        {
	            new result = getarg(i +3);
				if(!strlen(string))
				{
				    format(string,sizeof string,"%i",result);
				} else format(string,sizeof string,"%s%i",string,result);
	        }

	        case 'f':
	        {
				new Float:result = Float:getarg(i +3);
				if(!strlen(string))
				{
				    format(string,sizeof string,"%f",result);
				} else format(string,sizeof string,"%s%f",string,result);
	        }
	    }
	}
    SendClientMessage(playerid,color,string);
    return 1;
}

stock FegyveresNPCk()
{
	printf("Fegyveres NPC-k csatlakozása!");
	ConnectNPCEx("[NPC]Steve_Pullman");
	ConnectNPCEx("[NPC]Wayne_Freeman");
	ConnectNPCEx("[NPC]Jordan_Mills");
	ConnectNPCEx("[NPC]Dwayne_Harrison");
	ConnectNPCEx("[NPC]Jose_Dolores");
	ConnectNPCEx("[NPC]Cruzito_Espinosa");
	ConnectNPCEx("[NPC]Alphonse_Finucci");
	ConnectNPCEx("[NPC]Sergey_Stanislav");
	ConnectNPCEx("[NPC]Ferruccio_Sostrato");
	printf("Fegyveres NPC-k csatlakozva!");
}

new NPCBeszelgetes[MAX_PLAYERS];
#define MAX_CCTVS 100
new KeyTimer[MAX_PLAYERS];
new TotalCCTVS;
new CameraName[MAX_CCTVS][32];
new Float:CCTVLA[MAX_PLAYERS][3];
new Float:CCTVLAO[MAX_CCTVS][3];
new Float:CCTVRadius[MAX_PLAYERS];
new Float:CCTVDegree[MAX_PLAYERS] = 0.0;
new Float:CCTVCP[MAX_CCTVS][4];
new CCTVEgyeb[MAX_CCTVS][2];
new CurrentCCTV[MAX_PLAYERS] = -1;
enum LP
{
	Float:LX,
	Float:LY,
	Float:LZ,
	Float:LA,
	LInterior
}
new LastPos[MAX_PLAYERS][LP];

new VasNala[MAX_PLAYERS];
new VasPlayerID[MAX_PLAYERS];
new KocsinObject[MAX_VEHICLES] = 0;
new KocsinObject1[MAX_VEHICLES] = 0;
new KocsinObject2[MAX_VEHICLES] = 0;
new KocsinObject3[MAX_VEHICLES] = 0;
new KocsinObject4[MAX_VEHICLES] = 0;
new KocsinDarab[MAX_VEHICLES] = 0;

new IsSpu[MAX_VEHICLES] = 0;
new Lamp[MAX_VEHICLES] = 0;
new villog[MAX_VEHICLES];

new Alvany[MAX_VEHICLES] = 0;
new Mosogep[MAX_VEHICLES] = 0;
new Tv[MAX_VEHICLES] = 0;
new Radiator[MAX_VEHICLES] = 0;
new Video[MAX_VEHICLES] = 0;
new KoicsraObject[14][MAX_VEHICLES];
#define MAX_VAS 50
enum vas
{
	vasVasID,
	vasVan,
	Float:Vasx,
	Float:Vasy,
	Float:Vasz,
	Float:vasrz,
	vasModelID,
	vasObject
}
new Vas[MAX_VAS][vas];
enum vasenum { Float:xx,Float:yy,Float:zz,Float:rzz }

new vasak[MAX_VAS][vasenum] = {
{762.1080,-1065.6942,24.4188,92.7342},
{691.8754,-1216.9640,16.8495,119.6811},
{649.3745,-1327.2660,13.5202,95.5542},
{620.9807,-1380.8342,13.7058,171.0683},
{818.3467,-1413.9088,13.4974,271.3359},
{1052.9647,-1416.9177,13.5433,242.1957},
{1255.8369,-1429.6613,13.5275,197.7020},
{1471.6886,-1447.8542,13.5469,243.1358},
{1626.6896,-1432.7802,13.5469,255.3559},
{1705.0315,-1434.9733,13.5469,279.4828},
{1813.2601,-1604.5002,13.5313,158.2217},
{1827.3156,-1842.0669,13.5781,192.3753},
{1883.6542,-1925.2560,13.5469,240.3158},
{1900.3248,-1925.8528,13.5469,268.2028},
{1926.3112,-1925.5354,13.5469,268.2028},
{1914.2366,-1787.7056,13.3906,257.5494},
{1924.0974,-1788.9448,13.3906,257.5494},
{2032.6669,-1678.6871,13.5469,251.9095},
{2007.5881,-1635.4664,13.5469,343.7169},
{2075.0581,-1623.7247,13.5469,112.7881},
{2075.3770,-1691.3698,13.5547,180.1555},
{2128.5259,-1732.5236,13.5533,153.5219},
{2127.7576,-1740.2650,13.5661,153.5219},
{2173.0276,-1792.4934,13.3630,99.6281},
{2155.8811,-1794.3590,13.3582,101.8214},
{2226.4983,-1784.8455,13.5646,335.2569},
{2300.2285,-1757.1959,13.5469,273.7226},
{2406.2310,-1759.6705,13.5405,251.9820},
{2457.6660,-1762.4203,13.5842,334.0036},
{2449.3135,-1666.7229,13.4760,49.8309},
{2414.7883,-1652.4539,13.5267,86.8046},
{2362.3027,-1652.9863,13.5469,88.9980},
{2292.0781,-1651.9395,14.9335,89.6246},
{2246.2273,-1649.5341,15.4784,71.7645},
{2135.0073,-1410.2930,23.9868,359.8252},
{2099.9077,-1377.2617,23.9856,51.7109},
{2080.2468,-1179.5259,23.8285,10.0372},
{2046.3400,-1127.8411,24.1866,166.4645},
{1897.5707,-1129.0134,24.4162,353.9845},
{2033.0256,-976.6140,40.6397,310.1899},
{2196.1765,-1003.5544,62.4769,247.8360},
{2275.1455,-1075.4270,47.6896,217.1290},
{2434.8438,-1190.9891,36.2344,226.8425},
{2563.4573,-1269.3918,46.1310,169.1885},
{2564.0918,-1428.5609,24.0270,163.2352},
{2678.8997,-1542.2272,25.2572,200.5222},
{2746.3401,-1648.7507,13.2666,225.2758},
{2819.1387,-1624.3934,11.0788,24.7640},
{2825.2139,-1535.2960,11.0938,345.5970},
{2823.2368,-1467.2922,16.2500,1.2638}
};


new Float:CPbe[MAX_PLAYERS][3];
new Lefagyasztva[MAX_PLAYERS],Warning[MAX_PLAYERS],AlapVWje[MAX_PLAYERS];
new Bejelzett[MAX_PLAYERS];
new Hatarozas[MAX_PLAYERS];
new Insertalta[MAX_PLAYERS];
new Fishing[MAX_PLAYERS];
new HuzzadVaze[MAX_PLAYERS];
new CsomagtartoAFK[MAX_PLAYERS];
new AFKDialogShowing[MAX_PLAYERS];
new AFKTimer[MAX_PLAYERS];
new Float:MunkaCP[MAX_PLAYERS][3];
new ZeneHallgatHifibol[MAX_PLAYERS][32];
new ZenetHallgat[MAX_PLAYERS];
new LeCheckolva[MAX_PLAYERS];
new AccountID[MAX_PLAYERS];
new HifiZene[MAX_PLAYERS][256];
new PenztRabol[MAX_PLAYERS];
new SweetRadio[256];
new Text3D:NPCTextLabel[64];
new NPCFloodVedelem[MAX_PLAYERS];
enum e_label
{
	lVan,
	lszin,
	lText[128],
	Float:lx,
	Float:ly,
	Float:lz
};

new LabelInfo[MAX_LABEL][e_label];
new smkocsiid[MAX_PLAYERS];
new dmoff = 0;
new Kezetfogna[MAX_PLAYERS];
new KezetfognaStilus[MAX_PLAYERS];
new Megmotozna[MAX_PLAYERS];
new Szondaz[MAX_PLAYERS];
new CegInfo[MAX_CEG][ceginfo];
new CsipogoIdo[MAX_PLAYERS];
new BoostTicTimer[MAX_PLAYERS];
new MaxSpeed = 200;
new bool:SzereloDuty[MAX_PLAYERS];
//new KorhazbaKerulesTimer;
//new HasznalhatjaTimer;
new k_veh;
//new k_elado;
//new k_vesz;
new k_ar;
new k_kereskedo;
new k_uzleteles;
new TilosOlni = 0;
//new sInfo[MAX_PLAYERS][statInfo];
new Shooted[MAX_PLAYERS][MAX_PLAYERS];
new KocsiUtolsoHasznalat[MAX_VEHICLES];
/*------------- [ Munka pozok ] ------------------*/


new Offsets[33][Villogo] = {
	{1, 560, 0.398071289,0.75390625,0.43879509},
	{2, 560, -0.35644531250, 0.0388183593, 0.863788605}, 
	{3, 415, 0.409729004, 0.526367188, 0.206963539}, 
	{4, 415, -0.290039062, -0.284179688, 0.631957054},
	{5, 421, 0.421691895, 0.804931641, 0.256482124}, 
	{6, 421, -0.323303223, 0.0207519532, 0.731482506}, 
	{7, 426, 0.575378418, 0.786132812, 0.361483574}, 
	{8, 426, -0.455505371, -0.143066406, 0.861475945}, 
	{9, 579, 0.454345703, 0.575683594, 0.645122528}, 
	{10, 579, -0.442626953, -0.269042969, 1.27014542}, 
	{11, 402, 0.53515625, 0.562988281, 0.278743744}, 
	{12, 402, -0.412841797, -0.474365234, 0.778804779}, 
	{13, 596, 0.53515625, 0.771728516, 0.373809814},
	{14, 596, -0.0048828125, -0.860107422, 0.848770142}, 
	{15, 597, 0.53515625, 0.771728516, 0.373809814}, 
	{16, 597, -0.0048828125, -0.860107422, 0.848770142}, 
	{17, 598, 0.406738281, 0.696777344, 0.398208618}, 
	{18, 598, -0.0048828125, -0.860107422, 0.848770142}, 
	{19, 544, 0.522338867, 2.5925293, 1.46867275},
	{20, 528, 0.563842773, 0.754882812, 0.487258911}, 
	{21, 525, -0.0089111328, 0.273193359, 1.4037838}, 
	{22, 409, 0.420776367, 1.80236816, 0.368680954}, 
	{23, 409, -0.439941406, 0.824829102, 0.842817307}, 
	{24, 461, 0.00000000, -0.932861328, 0.494509697}, 
	{25, 521, 0.00000000, -0.928955078, 0.558652878}, 
	{26, 586, 0.00000000, -1.20178223, 0.671886444}, 
	{27, 506, 0.541137695, 0.282714844, 0.272130013}, 
	{28, 482, 0.493530273, 1.39465332, 0.442443848}, 
	{29, 482, -0.392211914, 0.565551758, 0.941601753}, 
	{30, 424, -0.624511719, 0.139648438, 0.918135643},
	{31, 470, -0.617797851, 0.056640625, 1.10928631},
	{32, 433, -0.577392578, 1.23217773, 1.70311642},
	{33, 432, -1.21105957, -3.84765625, 1.17495251}
};


new Float:KukaPos[][4] =
{
	{2493.1001000, -1684.6999500, 13.1000000, 183.4650000},
	{2506.1999500, -1679.9000200, 13.2000000, 225.4560000},
	{2040.5000000, -1681.8994100, 13.2000000, 183.4610000},
	{1992.4000200, -1704.6999500, 13.2000000, 86.7320000},
	{2510.1001000, -1665.1999500, 13.2000000, 283.4460000},
	{2504.3000500, -1656.4000200, 13.2000000, 323.4420000},
	{2494.3999000, -1653.3000500, 13.1000000, 355.4380000},
	{2488.2998000, -1653.1992200, 13.1000000, 355.4350000},
	{2473.1999500, -1653.0999800, 13.1000000, 355.4350000},
	{2449.8000500, -1653.0999800, 13.0000000, 355.4350000},
	{2411.8000500, -1653.4000200, 13.2000000, 355.4350000},
	{2392.8999000, -1653.5999800, 13.2000000, 355.4350000},
	{2360.8000500, -1653.5000000, 13.2000000, 355.4350000},
	{2363.3000500, -1664.4000200, 13.2000000, 179.4350000},
	{2383.1001000, -1664.4000200, 13.2000000, 179.4340000},
	{2406.6001000, -1664.6999500, 13.2000000, 179.4340000},
	{2471.1001000, -1678.8000500, 13.2000000, 139.4340000},
	{2336.8999000, -1683.4000200, 13.2000000, 89.4340000},
	{2409.3999000, -1726.5000000, 13.3000000, 359.4290000},
	{2312.3000500, -1726.5000000, 13.2000000, 359.4290000},
	{2291.0000000, -1726.5000000, 13.2000000, 359.4290000},
	{2226.5000000, -1726.5000000, 13.2000000, 359.4290000},
	{2374.8999000, -1754.6999500, 13.2000000, 179.4290000},
	{2339.8000500, -1754.6999500, 13.2000000, 179.4230000},
	{2302.5000000, -1754.6999500, 13.2000000, 179.4230000},
	{2265.6001000, -1754.6999500, 13.2000000, 179.4230000},
	{2221.3000500, -1783.3000500, 13.2000000, 179.4230000},
	{2239.8999000, -1648.1999500, 15.1000000, 349.4230000},
	{2259.1001000, -1653.0999800, 15.1000000, 359.4200000},
	{2283.3000500, -1653.1999500, 14.8000000, 359.4180000},
	{2307.0000000, -1653.1999500, 14.2000000, 359.4180000},
	{2186.6001000, -1662.4000200, 14.6000000, 75.4180000},
	{2180.3999000, -1702.1999500, 13.3000000, 85.4160000},
	{2179.6001000, -1766.8000500, 13.2000000, 85.4130000},
	{2176.5000000, -1811.4000200, 13.2000000, 179.4130000},
	{2155.1001000, -1794.3000500, 13.2000000, 91.4130000},
	{2179.5000000, -1728.1999500, 13.2000000, 88.1350000},
	{2108.1999500, -1786.5999800, 13.2000000, 181.4070000},
	{2076.6001000, -1790.6999500, 13.2000000, 83.1560000},
	{2076.0000000, -1727.0996100, 13.2000000, 89.1540000},
	{2113.3994100, -1746.6992200, 13.2000000, 359.4070000},
	{2076.0000000, -1707.7998000, 13.2000000, 89.1490000},
	{2229.1999500, -1478.3000500, 23.5000000, 355.4130000},
	{2260.6999500, -1478.4000200, 22.7000000, 355.4130000},
	{2323.6992200, -1726.5000000, 13.2000000, 359.4290000},
	{2379.0996100, -1726.3994100, 13.2000000, 359.4290000},
	{2206.8999000, -1485.1999500, 23.6000000, 89.4290000},
	{2546.2998000, -1058.0996100, 69.2000000, 181.1590000},
	{2206.8000500, -1449.0000000, 23.6000000, 89.4230000},
	{2218.3000500, -1438.1999500, 23.6000000, 271.5410000},
	{2218.1001000, -1428.5999800, 23.6000000, 271.5380000},
	{2206.8000500, -1399.1999500, 23.6000000, 91.2880000},
	{2226.3999000, -1389.9000200, 23.7000000, 179.0350000},
	{2253.5000000, -1389.9000200, 23.7000000, 179.0330000},
	{2265.1999500, -1334.1999500, 23.6000000, 94.7830000},
	{2251.3999000, -1295.0999800, 23.6000000, 0.7790000},
	{2213.3999000, -1295.0999800, 23.6000000, 0.7750000},
	{2181.0000000, -1295.0000000, 23.6000000, 0.7750000},
	{2146.0000000, -1306.4000200, 23.7000000, 180.7750000},
	{2100.5000000, -1306.5999800, 23.6000000, 180.7690000},
	{2092.1999500, -1295.0999800, 23.6000000, 358.7690000},
	{2129.6001000, -1295.0999800, 23.6000000, 358.7640000},
	{2156.0000000, -1226.4000200, 23.6000000, 180.7640000},
	{2110.8999000, -1226.5000000, 23.6000000, 180.7640000},
	{2077.6001000, -1205.6999500, 23.6000000, 268.7640000},
	{2077.6001000, -1169.5999800, 23.5000000, 268.7590000},
	{2077.6001000, -1129.0999800, 23.6000000, 268.7590000},
	{2061.6001000, -1079.5000000, 24.6000000, 342.7590000},
	{2092.6001000, -1093.3000500, 24.8000000, 342.7570000},
	{2035.8000500, -1067.6999500, 24.4000000, 332.7570000},
	{2015.3000500, -1059.0000000, 24.3000000, 332.7540000},
	{1963.0999800, -1053.5999800, 24.0000000, 162.7540000},
	{1918.5999800, -1046.9000200, 23.7000000, 182.7510000},
	{1887.4000200, -1130.0000000, 23.8000000, 2.7470000},
	{1920.3000500, -1130.0000000, 24.6000000, 2.7470000},
	{1950.5000000, -1130.0999800, 25.4000000, 2.7470000},
	{1880.5000000, -1266.5999800, 13.2000000, 183.4970000},
	{2019.0000000, -1266.5999800, 23.6000000, 183.4940000},
	{2040.0999800, -1335.3000500, 23.6000000, 3.4940000},
	{1990.4000200, -1335.1999500, 23.6000000, 357.4880000},
	{1857.5999800, -1313.5000000, 13.2000000, 271.4840000},
	{1841.0999800, -1391.8000500, 13.2000000, 91.4830000},
	{1835.4000200, -1455.5000000, 13.2000000, 1.4780000},
	{1712.4000200, -1446.4000200, 13.2000000, 181.4780000},
	{1628.6999500, -1446.4000200, 13.2000000, 181.4720000},
	{1574.5000000, -1446.4000200, 13.2000000, 181.4720000},
	{1514.5000000, -1446.3000500, 13.2000000, 181.4720000},
	{1449.1999500, -1426.8000500, 13.2000000, 91.4720000},
	{1441.5000000, -1497.0999800, 13.2000000, 71.4670000},
	{1423.9000200, -1574.0000000, 13.2000000, 91.4660000},
	{1455.0000000, -1586.8000500, 13.2000000, 359.4610000},
	{1535.0000000, -1617.1999500, 13.2000000, 269.4560000},
	{1535.0000000, -1688.3000500, 13.2000000, 269.4510000},
	{1717.3000500, -1737.6999500, 13.2000000, 179.4510000},
	{1797.8000500, -1726.8000500, 13.2000000, 359.4450000},
	{1705.6999500, -1598.5999800, 13.2000000, 181.4340000},
	{1859.9000200, -1606.5999800, 13.2000000, 1.4340000},
	{1905.3000500, -1606.5000000, 13.2000000, 1.4280000},
	{1947.5000000, -1628.3000500, 13.2000000, 267.4280000},
	{1947.2998000, -1684.0000000, 13.2000000, 267.4240000},
	{2191.0000000, -1378.6999500, 23.7000000, 355.4350000},
	{2135.0000000, -1405.6999500, 23.7000000, 269.4350000},
	{2135.1999500, -1440.5999800, 23.6000000, 269.4340000},
	{2135.1001000, -1480.6999500, 23.6000000, 269.4340000},
	{2077.8000500, -1389.6999500, 23.6000000, 167.4340000},
	{2090.1001000, -1378.5999800, 23.7000000, 357.4320000},
	{2133.8000500, -1378.5999800, 23.6000000, 357.4290000},
	{2198.6999500, -1226.5999800, 23.6000000, 177.4290000},
	{2228.8000500, -1226.5999800, 23.6000000, 177.4290000},
	{2220.3999000, -1215.1999500, 23.6000000, 358.4290000},
	{2231.3999000, -1142.6999500, 25.5000000, 172.1770000},
	{2169.8999000, -1150.8000500, 24.6000000, 92.1720000},
	{2197.3000500, -1108.4000200, 24.9000000, 342.1700000},
	{2145.8999000, -1088.5000000, 24.5000000, 342.1690000},
	{2104.6001000, -1074.5999800, 25.3000000, 146.4190000},
	{2527.3000500, -1058.1999500, 69.2000000, 181.1590000},
	{2505.3000500, -1057.3000500, 69.1000000, 181.1590000},
	{2483.3000500, -1053.0000000, 67.0000000, 173.2030000},
	{2008.0999800, -989.2999900, 33.0000000, 46.6650000},
	{2187.1999500, -1003.2000100, 62.5000000, 346.6640000},
	{2218.6001000, -1027.8000500, 59.9000000, 156.6630000},
	{2292.5000000, -1080.5999800, 47.1000000, 156.6600000},
	{2402.3000500, -1033.6999500, 51.1000000, 26.6600000},
	{2361.6999500, -1067.4000200, 53.3000000, 26.6600000},
	{2437.1001000, -1039.4000200, 54.8000000, 181.1580000},
	{2473.8000500, -1026.0000000, 62.8000000, 351.1540000},
	{2637.1999500, -1080.0999800, 69.3000000, 91.1510000},
	{2637.1999500, -1115.9000200, 67.2000000, 91.1480000},
	{2609.1999500, -1189.4000200, 63.3000000, 177.1480000},
	{2548.6999500, -1189.5999800, 60.3000000, 177.1440000},
	{2461.8000500, -1194.9000200, 36.3000000, 177.1440000},
	{2439.6999500, -1189.4000200, 36.1000000, 177.1440000},
	{2445.5000000, -1273.3000500, 23.7000000, 87.1440000},
	{2445.3999000, -1302.0000000, 23.7000000, 87.1440000},
	{2445.5000000, -1337.8000500, 23.7000000, 87.1440000},
	{2445.3999000, -1373.3000500, 23.7000000, 87.1440000},
	{2445.3999000, -1417.5999800, 23.7000000, 87.1440000},
	{2517.1001000, -1432.4000200, 28.2000000, 267.1440000},
	{2517.1999500, -1407.3000500, 28.2000000, 267.1440000},
	{2517.3000500, -1378.3000500, 28.2000000, 267.1440000},
	{2517.5000000, -1346.0999800, 29.7000000, 267.1440000},
	{2570.1999500, -1067.6999500, 69.0000000, 260.9220000},
	{2555.1999500, -1092.0999800, 65.1000000, 204.3800000},
	{2522.8000500, -1101.5000000, 55.7000000, 182.1950000},
	{2471.3000500, -1098.5000000, 44.4000000, 177.0430000},
	{2403.0000000, -1099.5999800, 38.5000000, 189.2600000},
	{2430.1992200, -1095.5996100, 41.9000000, 181.3290000},
	{2434.1999500, -1141.4000200, 32.4000000, 1.8370000},
	{2377.3994100, -1144.3994100, 27.3000000, 2.0210000},
	{1992.0999800, -1639.0000000, 13.2000000, 89.1490000},
	{2075.8999000, -1622.9000200, 13.2000000, 89.1490000},
	{2076.1001000, -1652.1999500, 13.2000000, 89.1490000},
	{2007.1999500, -1632.1999500, 13.2000000, 270.0000000},
	{2086.6999500, -1602.6999500, 13.2000000, 359.8670000},
	{2007.3000500, -1660.0999800, 13.2000000, 269.9950000},
	{2016.8000500, -1602.6999500, 13.2000000, 359.8630000},
	{796.2000100, -1665.8000500, 13.2000000, 2.6090000},
	{804.7000100, -1705.5999800, 13.2000000, 90.0000000},
	{804.7000100, -1690.8000500, 13.2000000, 90.0000000},
	{764.5000000, -1753.0999800, 12.5000000, 271.9420000},
	{804.7000100, -1737.3000500, 13.2000000, 90.0000000},
	{795.0000000, -1763.5999800, 13.1000000, 0.0000000},
	{760.0000000, -1687.0000000, 3.9000000, 271.9390000},
	{402.6000100, -1166.9000200, 78.3000000, 326.7000000},
	{615.3994100, -1102.8994100, 46.5000000, 34.8820000},
	{566.8994100, -1134.2998000, 50.4000000, 34.8820000},
	{656.5999800, -1071.8000500, 48.1000000, 34.8820000},
	{472.0000000, -1176.5996100, 63.4000000, 14.2710000},
	{684.0999800, -1029.9000200, 50.7000000, 60.0000000},
	{314.0000000, -1194.5000000, 75.9000000, 33.8150000},
	{720.2000100, -997.2999900, 52.0000000, 235.0000000},
	{340.5996100, -1196.5000000, 76.2000000, 221.3200000},
	{626.0999800, -1117.1999500, 46.3000000, 212.9530000},
	{688.2999900, -1055.4000200, 49.6000000, 238.3190000},
	{866.7000100, -844.5000000, 77.0000000, 26.5030000},
	{788.5996100, -864.0996100, 60.3000000, 26.4990000},
	{830.5000000, -867.1992200, 68.5000000, 26.4990000},
	{719.7999900, -997.9000200, 52.0000000, 234.9980000},
	{1013.9000200, -776.5999800, 102.4000000, 9.0560000},
	{912.5000000, -835.6992200, 92.1000000, 26.4990000},
	{1087.3000500, -765.4000200, 108.2000000, 9.0530000},
	{872.2999900, -711.2999900, 105.3000000, 155.0000000},
	{1070.1999500, -778.5000000, 106.8000000, 182.8930000},
	{1020.9000200, -794.4000200, 101.7000000, 200.3320000},
	{974.5000000, -814.7000100, 97.3000000, 200.3300000},
	{959.5000000, -823.2000100, 96.0000000, 216.1870000},
	{922.5000000, -843.7000100, 93.2000000, 216.1830000},
	{857.0999800, -896.2000100, 64.4000000, 149.4530000},
	{915.2000100, -671.0000000, 116.9000000, 49.9990000},
	{873.2998000, -867.0000000, 77.2000000, 206.6640000},
	{941.2999900, -907.5000000, 75.6000000, 63.8240000},
	{840.0000000, -932.6992200, 54.5000000, 63.8200000},
	{871.7000100, -711.0000000, 105.3000000, 154.9950000},
	{898.7000100, -769.2999900, 97.3000000, 200.0000000},
	{1246.8000500, -737.5999800, 94.6000000, 200.3320000},
	{1538.3000500, -844.2999900, 64.1000000, 263.1100000},
	{1487.0999800, -699.7999900, 94.4000000, 9.0530000},
	{1276.3994100, -616.5996100, 102.7000000, 206.6690000},
	{1522.8000500, -802.9000200, 72.5000000, 270.0000000},
	{1520.7998000, -765.6992200, 79.4000000, 312.0450000},
	{1470.6999500, -898.4000200, 54.5000000, 180.0000000},
	{1522.0000000, -887.9000200, 60.7000000, 224.8290000},
	{1419.6999500, -877.4000200, 48.9000000, 179.7740000},
	{1395.4684, -1653.9401, 13.2395, 180.0}
};

new Float:KamionUtak[][3] =
{
	//{95.4179, -153.4709, 3.1641},
	{312.9381, -229.4495, 2.1201},
	{-1860.4518, -1723.7980, 21.4542}, // k1
	{-2005.3705, -2413.9453, 30.3295}, // k2
	{1875.5302, -2298.4136, 13.2513}, // k3
	{2273.8643, -2342.3677, 13.2510}, // k4
	{586.9164, 901.6632, -44.5174}, // k5
	{-333.7087, 1528.3698, 75.0635}, // k6
	{1482.8556, 1045.0406, 10.5247} // k8
};

new Float:TisztitoUtak[][3] =
{
	{1661.9652, -1438.6840, 13.0078},
	{1444.9501, -1495.7173, 12.9992},
	{1427.4492, -1685.2312, 13.0078},
	{1386.8391, -1793.8298, 13.0078},
	{1420.7438, -1874.6931, 13.0077},
	{1648.3740, -1874.9543, 13.0075},
	{1691.7628, -1760.0233, 13.0111},
	{1748.9199, -1734.7452, 13.0147},
	{1824.2068, -1672.8546, 13.0071},
	{1894.7382, -1615.0427, 13.0072},
	{1939.3815, -1693.7683, 13.0077}
};

//munka definek - számozást mindig 20-tól kezd!
#define MUNKA_KAMION        20
#define MUNKA_FAVAGO   		21
#define MUNKA_KUKA    		22
#define MUNKA_UTTISZTITO 	23
#define MUNKA_FEGYVER  		24
#define MUNKA_FARMER		25
#define MUNKA_DROG			26
#define MUNKA_HACK			27

//Munka define - Név, Szükséges tehetség pont - Legális? (1 = igen | 0 = nem)
new Munkak[ MAX_MUNKA ][4][20] = 
{
	{MUNKA_KAMION, 			"Kamionos", 	100, 		1},
	{MUNKA_FAVAGO, 			"Favágó", 		50, 		1},
	{MUNKA_KUKA, 			"Kukás", 		0, 			1},
	{MUNKA_UTTISZTITO, 		"Úttisztító", 	0, 			1},
	{MUNKA_FEGYVER,			"Fegyvermester",0,			0},
	{MUNKA_FARMER,			"Farmer",		30,			1},
	{MUNKA_DROG,			"Drog díler",	0,			0},
	{MUNKA_HACK, 			"Hacker",		0,			0}
};

//Név - ID - Töltény szám - Ára
new Fegyver_Lista[8][4][32] =
{
	{"Katana", 					8,		1,		360},
	{"9mm Pisztoly",			22,		100,	440},
	{"Hangtompítós Pisztoly",	23,		70,		780},
	{"Sörétes",					25,		50,		1000},
	{"Desert Eagle",			24,		120,	1200},
	{"MP5",						29,		150,	1200},
	{"Golyóálló mellény",		NINCS,	100,	1000},
	{"Composition 4 (C4)",		-2,		1,		1650}
};

/*--------------- Race System by Martin ---------------*/
#define MAX_RACE_CP 50 //max ennyi cp lehet
#define MAX_RACE 5//max(slot) betöltött pálya

#define RACE_START_CP  -1
#define RACE_CEL_CP    -2
#define RACE_VEGE		4
#define RACE_INDUL 		2
#define RACE_MEGY 		3//elindult
#define RACE_EPIT		5

enum erace
{
	bool:rVan,
	rNev[32],
	rIndito[32],
	Float:rPosx[MAX_RACE_CP],
	Float:rPosy[MAX_RACE_CP],
	Float:rPosz[MAX_RACE_CP],
	Float:rCelPos[3],
	rCPdb,
	rStatusz,
	rNevezes,
	Float:rSzorzo,
	rIdo,
	rNyeremeny,
	rBentvan,
	rIdoHatra
};

enum eprace
{
	rEpites[2],
	rVersenyen,
	rVersenyCP,
	rVersenyCPKov,
	rPIdo
};

new Race[MAX_RACE][erace];
new PlayerRace[MAX_PLAYERS][eprace];

enum pDrogh
{
	Float:pDrogX,
	Float:pDrogY,
	Float:pDrogZ,
	Float:pDrogA,
	bool:pFordit,
	bool:pEnged[3]
}

enum botInfo
{
	npcID,
	npcRabolva,
	npcMikor,
	bool:npcAnim,
	bool:npcRabolas,
	bool:npcSikerult,
	bool:npcFolyamatban,
	bool:npcRabolhato,
	bool:npcHivhat,
	npcKicsoda,
	npcArea,
	npcPenz,
	npcTimer
}

/* -------------- Változók --------------*/
//Matteo Változok
// new debugmode = false;	//Boost rendszer debug

new ALogIn[MAX_PLAYERS][2];
new Float:PozTowtrack[MAX_PLAYERS][4];
new SpeedCameras[CAMERA_LIMIT][_camera],loaded_cameras = 0;

new BoltRablas[30][botInfo];
new Float:PDrogHelyek[][pDrogh] =
{
	{1962.67908, -2369.00317, 12.75179, 0.00000, false, {true, true, true}}, //0 - 0, 1, 2
	{1962.65979, -2363.67749, 12.75179, 0.00000, false, {true, true, true}}, //1 - 3, 4, 5
	{1962.67017, -2366.33008, 12.75179, 0.00000, false, {true, true, true}}, //2 - 6, 7, 8
	{1961.69446, -2361.97827, 12.75180, 90.00000, false, {false, false, true}}, //3 - 9, 10, 11
	{1961.74194, -2370.64990, 12.75180, 90.00000, true, {false, false, true}}, //4 - 12, 13, 14
	{1959.01416, -2361.97168, 12.75180, 90.00000, false, {true, true, true}}, //5 - 15, 16, 17
	{1956.69128, -2361.97266, 12.75180, 90.00000, false, {true, true, true}}, //6 - 18, 19, 20
	{1959.09204, -2370.65503, 12.75180, 90.00000, true, {true, true, true}}, //7 - 21, 22, 23
	{1956.59192, -2370.64697, 12.75180, 90.00000, true, {true, true, true}}, //8 - 24, 25, 26
	{1958.89697, -2364.96899, 12.75180, 90.00000, true, {true, true, true}}, //9 - 27, 28, 29
	{1960.56262, -2365.94409, 12.75179, 0.00000, true, {true, true, true}}, //10 - 30, 31, 32
	{1958.89417, -2366.93237, 12.75180, 90.00000, false, {true, true, true}}, //11 - 33, 34, 35
	{1954.12341, -2362.83667, 12.75179, 0.00000, true, {true, true, true}}, //12 - 36, 37, 38
	{1954.12878, -2365.50488, 12.75179, 0.00000, true, {true, true, true}}, //13 - 39, 40, 41
	{1957.18030, -2365.94946, 12.75179, 0.00000, false, {true, true, true}} //14 - 42, 43, 44
};

new Float:PDrogHely[45][4];

new RandomDrogSz[][] =
{
	"Szevasz testvér, mi kellene?!",
	"Csõ, mi a szitu?!",
	"Igen?",
	"Cucc kellene?!",
	"Jóféle magjaim vannak... Kellenek?!"
};

enum boltBoto
{
	Float:bBotPosX,
	Float:bBotPosY,
	Float:bBotPosZ,
	Float:bBotA,
	bool:bBotRob
};

new BoltBot[][boltBoto] =
{
	{-22.6715,-140.3062,1003.5469,356.4508, true},
	{1315.7041, -878.9274, 39.5781, 180.2517, true},
	{994.5514, -928.2339, 42.1797, 3.8434, true},
	{948.6218, -1738.6459, 13.5546, 178.8210, true},
	{665.4298, -1708.1017, 14.6823, 81.6866, true},
	{1225.8446, -1018.7816, 32.6067, 358.5959, true},
	{2775.9172, -2016.4272, 13.5547, 359.2225, true},
	{3899.7964, -1805.9263, 6.9913, 352.8622, false}
};
enum boltInfo
{
	Float:boltX,
	Float:boltY,
	Float:boltZ
}

//24 karakternél ne legyen több!
new BoltNevek[6][24] =
{
	{"Gazdagnegyedi bolt"}, // bolt1
	{"Északi benzinkút"},//Északi bolt
	{"Déli benzinkút"}, //északi benya
	{"LS Gyógyszertár"}, // /vesz
	{"Ocean Store"}, // /vesz2
	{"Luxus szigeti bolt"} // /vesz3
};

new Boltok[7][boltInfo] =
{
	{-22.5818,-138.6073,1003.5469}, // bolt1
	{1315.934, -880.552, 39.578},//Északi bolt
	{994.420, -926.498, 42.179}, //északi benya
	{663.3251, -1708.3433, 14.6823}, // /vesz
	{2776.0046, -2014.6294, 13.5547}, // /vesz2
	{3899.9551, -1804.0919, 6.9913}, // /vesz3
	{1159.567, -1438.587, 15.798} // Pláza /vesz
};

new Float:RuhaBoltok[][boltInfo] =
{
	{207.0425, -129.4797, 1003.5078},
	{1099.766, -1443.428, 15.798} //Pláza ruhabolt
};

enum aratasInfo
{
	aratasID,
	Float:aratasX,
	Float:aratasY,
	Float:aratasZ,
	Float:aratasRX,
	Float:aratasRY,
	Float:aratasRZ,
	bool:aratasLearatva
};

new Aratas_Objectek[][aratasInfo] =
{
	//{855, -162.53, 76.32, 2.11, 0.00, 0.00, 0.00, false}
	{855, -306.64697, -1429.20374, 13.29575, 0.00000, 0.00000, 7.11789, false},
	{855, -314.86160, -1428.65430, 13.72681, 0.00000, 0.00000, 7.19348, false},
	{855, -329.37921, -1427.20239, 14.19361, 0.00000, 0.00000, 7.04468, false},
	{855, -322.24020, -1428.93469, 13.23717, 0.00000, 0.00000, 6.86697, false},
	{855, -298.25534, -1429.94641, 13.68967, 0.00000, 0.00000, 7.45258, false},
	{855, -289.19232, -1429.99805, 12.11897, 0.00000, 0.00000, 7.64987, false},
	{855, -299.19736, -1337.72266, 8.79378, 0.00000, 0.00000, 0.00000, false},
	{855, -321.95514, -1337.25110, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -314.89258, -1337.51941, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -307.92767, -1336.95471, 9.03288, 0.00000, 0.00000, 0.00000, false},
	{855, -290.82730, -1337.26721, 8.19603, 0.00000, 0.00000, 0.00000, false},
	{855, -281.73874, -1336.77869, 7.71782, 0.00000, 0.00000, 0.00000, false},
	{855, -322.37183, -1348.51331, 9.80996, 0.00000, 0.00000, 0.22194, false},
	{855, -299.65915, -1348.50427, 9.80996, 0.00000, 0.00000, 0.21973, false},
	{855, -315.16470, -1348.70740, 9.80996, 0.00000, 0.00000, 0.22413, false},
	{855, -308.46811, -1348.31226, 9.80996, 0.00000, 0.00000, 0.22634, false},
	{855, -291.30627, -1348.11255, 9.80996, 0.00000, 0.00000, 0.22875, false},
	{855, -282.25034, -1347.70667, 9.80996, 0.00000, 0.00000, 0.23097, false},
	{855, -309.08237, -1326.63440, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -323.12161, -1326.82788, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -316.07062, -1326.99133, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -300.38739, -1327.08887, 9.01296, 0.00000, 0.00000, 0.00000, false},
	{855, -292.02917, -1326.52795, 8.73401, 0.00000, 0.00000, 0.00000, false},
	{855, -282.95258, -1325.93176, 8.57461, 0.00000, 0.00000, 0.00000, false},
	{855, -283.66110, -1358.80225, 9.80996, 0.00000, 0.00000, 13.76057, false},
	{855, -292.70325, -1359.09802, 9.80996, 0.00000, 0.00000, 13.62439, false},
	{855, -301.11121, -1358.71167, 9.80996, 0.00000, 0.00000, 13.35141, false},
	{855, -309.88092, -1358.82202, 9.80996, 0.00000, 0.00000, 13.48934, false},
	{855, -323.86630, -1358.27722, 9.80996, 0.00000, 0.00000, 13.09487, false},
	{855, -316.60437, -1358.96899, 9.72965, 0.00000, 0.00000, 13.22579, false},
	{855, -284.94220, -1367.71240, 9.80996, 0.00000, 0.00000, 13.76057, false},
	{855, -294.01535, -1368.10535, 9.80996, 0.00000, 0.00000, 13.62439, false},
	{855, -302.41809, -1367.80042, 9.80996, 0.00000, 0.00000, 13.35141, false},
	{855, -311.12811, -1367.96887, 10.50874, 0.00000, 0.00000, 13.48934, false},
	{855, -318.03342, -1368.39270, 10.05089, 0.00000, 0.00000, 13.22579, false},
	{855, -325.17297, -1367.55884, 10.36142, 0.00000, 0.00000, 13.09487, false},
	{855, -219.98224, -1422.97461, 4.31611, 0.00000, 0.00000, 4.32000, false},
	{855, -230.05812, -1425.18677, 5.36864, 0.00000, 0.00000, 8.82000, false},
	{855, -207.74107, -1421.32861, 3.88116, 0.00000, 0.00000, 0.00000, false},
	{855, -323.48547, -1316.61731, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -316.29694, -1315.70178, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -309.46518, -1315.62390, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -300.61569, -1315.91907, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -292.25784, -1315.48865, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -283.21564, -1314.97656, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -274.76157, -1337.06934, 7.49140, 0.00000, 0.00000, 0.00000, false},
	{855, -277.15271, -1428.10718, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -267.34738, -1428.45862, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -256.87744, -1426.31763, 8.68096, 0.00000, 0.00000, 0.00000, false},
	{855, -248.38100, -1426.44922, 7.07950, 0.00000, 0.00000, 0.00000, false},
	{855, -239.18919, -1426.52698, 5.91344, 0.00000, 0.00000, 0.00000, false},
	{855, -185.31668, -1307.64026, 6.47402, 0.00000, 0.00000, 0.00000, false},
	{855, -177.64938, -1308.20313, 5.29068, 0.00000, 0.00000, 0.00000, false},
	{855, -169.92633, -1308.53943, 4.97395, 0.00000, 0.00000, 0.00000, false},
	{855, -162.65797, -1308.33984, 4.12490, 0.00000, 0.00000, 0.00000, false},
	{855, -161.87926, -1301.67542, 3.43576, 0.00000, 0.00000, 0.00000, false},
	{855, -170.31363, -1301.60791, 4.22832, 0.00000, 0.00000, 0.00000, false},
	{855, -194.55492, -1307.44446, 6.63625, 0.00000, 0.00000, 0.00000, false},
	{855, -275.87204, -1314.98022, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -268.45834, -1314.02173, 10.38227, 0.00000, 0.00000, 0.00000, false},
	{855, -261.36478, -1313.93359, 10.58667, 0.00000, 0.00000, 0.00000, false},
	{855, -252.29776, -1314.20752, 11.19986, 0.00000, 0.00000, 0.00000, false},
	{855, -243.70793, -1313.73328, 11.20667, 0.00000, 0.00000, 0.00000, false},
	{855, -234.42395, -1313.19556, 11.40407, 0.00000, 0.00000, 0.00000, false},
	{855, -226.99498, -1312.66272, 10.84158, 0.00000, 0.00000, 8.82000, false},
	{855, -217.02379, -1312.59253, 9.64040, 0.00000, 0.00000, 4.32000, false},
	{855, -205.02991, -1314.00403, 8.31539, 0.00000, 0.00000, 0.00000, false},
	{855, -188.12070, -1317.68274, 7.11181, 0.00000, 0.00000, 0.00000, false},
	{855, -177.70078, -1318.57935, 6.25014, 0.00000, 0.00000, 0.00000, false},
	{855, -168.07896, -1317.93835, 4.88554, 0.00000, 0.00000, 0.00000, false},
	{855, -172.37157, -1328.68323, 4.40071, 0.00000, 0.00000, 0.00000, false},
	{855, -180.86247, -1328.71448, 6.76434, 0.00000, 0.00000, 0.00000, false},
	{855, -189.70036, -1326.93994, 8.37920, 0.00000, 0.00000, 0.00000, false},
	{855, -199.47148, -1325.16846, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -209.02814, -1322.99609, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -218.11020, -1322.94324, 9.89529, 0.00000, 0.00000, 4.32000, false},
	{855, -228.26874, -1323.48181, 9.68710, 0.00000, 0.00000, 8.82000, false},
	{855, -235.67494, -1323.88501, 10.20461, 0.00000, 0.00000, 0.00000, false},
	{855, -244.93672, -1324.29236, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -253.50461, -1324.64001, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -262.54993, -1324.24146, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -269.62268, -1324.20544, 9.42351, 0.00000, 0.00000, 0.00000, false},
	{855, -277.01556, -1325.04187, 8.61375, 0.00000, 0.00000, 0.00000, false},
	{855, -170.86404, -1337.75391, 4.24007, 0.00000, 0.00000, 0.00000, false},
	{855, -179.37630, -1338.44934, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -187.72189, -1337.96301, 6.89945, 0.00000, 0.00000, 0.00000, false},
	{855, -197.46939, -1336.29895, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -207.00209, -1334.23596, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -216.05983, -1334.29248, 9.89529, 0.00000, 0.00000, 4.32000, false},
	{855, -226.19385, -1334.94141, 10.30067, 0.00000, 0.00000, 8.82000, false},
	{855, -233.57130, -1335.43848, 9.20574, 0.00000, 0.00000, 0.00000, false},
	{855, -242.80383, -1335.93835, 8.42794, 0.00000, 0.00000, 0.00000, false},
	{855, -251.34204, -1336.38037, 8.42583, 0.00000, 0.00000, 0.00000, false},
	{855, -260.35718, -1336.07666, 7.94545, 0.00000, 0.00000, 0.00000, false},
	{855, -267.15939, -1336.55591, 7.35049, 0.00000, 0.00000, 0.00000, false},
	{855, -166.80519, -1349.87866, 3.43980, 0.00000, 0.00000, 0.00000, false},
	{855, -174.80083, -1349.52075, 4.84353, 0.00000, 0.00000, 0.00000, false},
	{855, -183.23302, -1349.68665, 4.62183, 0.00000, 0.00000, 0.00000, false},
	{855, -192.00133, -1348.03662, 5.15219, 0.00000, 0.00000, 0.00000, false},
	{855, -201.70125, -1346.38745, 8.09883, 0.00000, 0.00000, 0.00000, false},
	{855, -211.18564, -1344.34094, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -220.19392, -1344.41516, 9.88057, 0.00000, 0.00000, 4.32000, false},
	{855, -230.27789, -1345.08167, 8.10200, 0.00000, 0.00000, 8.82000, false},
	{855, -237.60419, -1345.59753, 7.88965, 0.00000, 0.00000, 0.00000, false},
	{855, -246.78519, -1346.11804, 8.59287, 0.00000, 0.00000, 0.00000, false},
	{855, -255.27040, -1346.58032, 9.03969, 0.00000, 0.00000, 0.00000, false},
	{855, -264.23203, -1346.29797, 8.28297, 0.00000, 0.00000, 0.00000, false},
	{855, -273.13199, -1346.55872, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -275.61887, -1356.80676, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.14691, -1356.40417, 9.12162, 0.00000, 0.00000, 0.00000, false},
	{855, -256.74585, -1356.41809, 9.26820, 0.00000, 0.00000, 0.00000, false},
	{855, -248.24803, -1355.84851, 9.25128, 0.00000, 0.00000, 0.00000, false},
	{855, -239.05486, -1355.22278, 8.97264, 0.00000, 0.00000, 0.00000, false},
	{855, -231.71616, -1354.60229, 6.02212, 0.00000, 0.00000, 8.82000, false},
	{855, -221.63998, -1353.83301, 7.37718, 0.00000, 0.00000, 4.32000, false},
	{855, -212.59943, -1353.65625, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -203.10312, -1355.60266, 6.46525, 0.00000, 0.00000, 0.00000, false},
	{855, -193.39127, -1357.15161, 5.43760, 0.00000, 0.00000, 0.00000, false},
	{855, -183.36546, -1358.25293, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -276.05414, -1364.64648, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.58655, -1364.32178, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -257.18997, -1364.41479, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -248.69658, -1363.92566, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -239.50787, -1363.38013, 10.21516, 0.00000, 0.00000, 0.00000, false},
	{855, -232.17371, -1362.84167, 8.94159, 0.00000, 0.00000, 8.82000, false},
	{855, -222.10208, -1362.15442, 7.07751, 0.00000, 0.00000, 4.32000, false},
	{855, -213.06621, -1362.06116, 7.44995, 0.00000, 0.00000, 0.00000, false},
	{855, -203.57448, -1364.09143, 6.10022, 0.00000, 0.00000, 0.00000, false},
	{855, -193.86734, -1365.72559, 5.34799, 0.00000, 0.00000, 0.00000, false},
	{855, -183.84624, -1366.91248, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -276.00192, -1374.97461, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.53387, -1374.75269, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -257.13678, -1374.95007, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -248.64287, -1374.56653, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -239.45363, -1374.12720, 10.21516, 0.00000, 0.00000, 0.00000, false},
	{855, -232.11890, -1373.69653, 9.25093, 0.00000, 0.00000, 8.82000, false},
	{855, -222.04671, -1373.11755, 7.90977, 0.00000, 0.00000, 4.32000, false},
	{855, -213.01035, -1373.13403, 6.47204, 0.00000, 0.00000, 0.00000, false},
	{855, -203.51797, -1375.27502, 5.98526, 0.00000, 0.00000, 0.00000, false},
	{855, -193.81027, -1377.02100, 5.01530, 0.00000, 0.00000, 0.00000, false},
	{855, -183.78856, -1378.32080, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -275.95212, -1384.82776, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.48364, -1384.70398, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -257.08603, -1385.00098, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -248.59161, -1384.71802, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -239.40187, -1384.38013, 10.21516, 0.00000, 0.00000, 0.00000, false},
	{855, -232.06660, -1384.05212, 9.68710, 0.00000, 0.00000, 8.82000, false},
	{855, -221.99388, -1383.57654, 9.89529, 0.00000, 0.00000, 4.32000, false},
	{855, -212.95705, -1383.69775, 6.65804, 0.00000, 0.00000, 0.00000, false},
	{855, -203.46408, -1385.94434, 5.97616, 0.00000, 0.00000, 0.00000, false},
	{855, -193.75581, -1387.79700, 6.89945, 0.00000, 0.00000, 0.00000, false},
	{855, -183.73355, -1389.20447, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -275.89578, -1395.96692, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.42679, -1395.95386, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -257.02866, -1396.36340, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -248.53371, -1396.19458, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -239.34338, -1395.97095, 10.21516, 0.00000, 0.00000, 0.00000, false},
	{855, -232.00749, -1395.75952, 9.02375, 0.00000, 0.00000, 8.82000, false},
	{855, -221.93416, -1395.40051, 7.69654, 0.00000, 0.00000, 4.32000, false},
	{855, -212.89680, -1395.64001, 6.94282, 0.00000, 0.00000, 0.00000, false},
	{855, -203.40312, -1398.00610, 6.36567, 0.00000, 0.00000, 0.00000, false},
	{855, -193.69429, -1399.97937, 5.18662, 0.00000, 0.00000, 0.00000, false},
	{855, -183.67131, -1401.50867, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -275.84372, -1406.25586, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.37430, -1406.34509, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -256.97568, -1406.85864, 10.00597, 0.00000, 0.00000, 0.00000, false},
	{855, -248.48021, -1406.79517, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -239.28937, -1406.67700, 10.21516, 0.00000, 0.00000, 0.00000, false},
	{855, -232.23358, -1405.67322, 7.97361, 0.00000, 0.00000, 8.82000, false},
	{855, -221.87898, -1406.32190, 6.58334, 0.00000, 0.00000, 4.32000, false},
	{855, -212.84117, -1406.67078, 5.90974, 0.00000, 0.00000, 0.00000, false},
	{855, -202.76733, -1407.46106, 4.53198, 0.00000, 0.00000, 0.00000, false},
	{855, -194.48515, -1412.55237, 2.70386, 0.00000, 0.00000, 0.00000, false},
	{855, -183.61382, -1412.87354, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -275.78766, -1417.34863, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -266.31775, -1417.54846, 9.82051, 0.00000, 0.00000, 0.00000, false},
	{855, -256.91855, -1418.17407, 9.80996, 0.00000, 0.00000, 0.00000, false},
	{855, -248.53246, -1417.74158, 7.36729, 0.00000, 0.00000, 0.00000, false},
	{855, -239.28447, -1417.22217, 6.45978, 0.00000, 0.00000, 0.00000, false},
	{855, -231.00641, -1415.57788, 6.21420, 0.00000, 0.00000, 8.82000, false},
	{855, -221.24153, -1414.45825, 5.13103, 0.00000, 0.00000, 4.32000, false},
	{855, -209.93719, -1413.65125, 2.82021, 0.00000, 0.00000, 0.00000, false},
	{855, -193.23088, -1420.16187, 2.70516, 0.00000, 0.00000, 0.00000, false},
	{855, -325.98956, -1377.20532, 11.03120, 0.00000, 0.00000, 7.04468, false},
	{855, -318.83188, -1378.41858, 11.36426, 0.00000, 0.00000, 6.86697, false},
	{855, -311.43451, -1377.61267, 11.17249, 0.00000, 0.00000, 7.19348, false},
	{855, -303.20074, -1377.62903, 10.68227, 0.00000, 0.00000, 7.11789, false},
	{855, -294.79022, -1377.83667, 10.22281, 0.00000, 0.00000, 7.45258, false},
	{855, -285.70929, -1377.34644, 9.96774, 0.00000, 0.00000, 7.64987, false},
	{855, -327.58014, -1388.76428, 11.03120, 0.00000, 0.00000, 7.04468, false},
	{855, -320.43823, -1390.09314, 11.36426, 0.00000, 0.00000, 6.86697, false},
	{855, -313.05679, -1389.40344, 11.17249, 0.00000, 0.00000, 7.19348, false},
	{855, -304.83932, -1389.53870, 10.68227, 0.00000, 0.00000, 7.11789, false},
	{855, -296.44528, -1389.86438, 10.22281, 0.00000, 0.00000, 7.45258, false},
	{855, -287.38068, -1389.49438, 9.96774, 0.00000, 0.00000, 7.64987, false},
	{855, -325.67886, -1400.31079, 13.03334, 0.00000, 0.00000, 7.04468, false},
	{855, -318.50320, -1401.77454, 13.48958, 0.00000, 0.00000, 6.86697, false},
	{855, -311.08722, -1401.22241, 13.66135, 0.00000, 0.00000, 7.19348, false},
	{855, -302.83469, -1401.49646, 12.55591, 0.00000, 0.00000, 7.11789, false},
	{855, -294.40482, -1401.96313, 12.12101, 0.00000, 0.00000, 7.45258, false},
	{855, -285.30371, -1401.73523, 11.71527, 0.00000, 0.00000, 7.64987, false},
	{855, -326.68216, -1407.60181, 12.74285, 0.00000, 0.00000, 7.04468, false},
	{855, -319.51648, -1409.13855, 13.48866, 0.00000, 0.00000, 6.86697, false},
	{855, -312.11050, -1408.65955, 13.17549, 0.00000, 0.00000, 7.19348, false},
	{855, -303.86826, -1409.00867, 13.46220, 0.00000, 0.00000, 7.11789, false},
	{855, -295.44879, -1409.54980, 12.52929, 0.00000, 0.00000, 7.45258, false},
	{855, -286.35794, -1409.39783, 11.18046, 0.00000, 0.00000, 7.64987, false},
	{855, -327.82956, -1415.94031, 13.12721, 0.00000, 0.00000, 7.04468, false},
	{855, -320.67523, -1417.56030, 13.36278, 0.00000, 0.00000, 6.86697, false},
	{855, -313.28082, -1417.16541, 13.85344, 0.00000, 0.00000, 7.19348, false},
	{855, -305.05032, -1417.60010, 12.87199, 0.00000, 0.00000, 7.11789, false},
	{855, -296.64276, -1418.22668, 12.41253, 0.00000, 0.00000, 7.45258, false},
	{855, -287.56366, -1418.16125, 11.80858, 0.00000, 0.00000, 7.64987, false},
	{855, -174.97739, -1413.71033, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -165.43350, -1414.09155, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -176.35500, -1404.41016, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -166.05887, -1404.96411, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -175.91298, -1392.61487, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -166.33675, -1394.79797, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -174.46565, -1382.16260, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -166.85513, -1384.27625, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -175.55099, -1370.31250, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -167.85544, -1372.85107, 3.81846, 0.00000, 0.00000, 0.00000, false},
	{855, -328.38657, -1550.05273, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -216.94136, -1551.27942, 6.77799, 0.00000, 0.00000, 7.19348, false},
	{855, -332.00418, -1473.77026, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -215.27281, -1475.63367, 7.36859, 0.00000, 0.00000, 7.19348, false},
	{855, -216.32106, -1487.98181, 8.12531, 0.00000, 0.00000, 7.19348, false},
	{855, -331.99664, -1486.01245, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -216.68596, -1503.19202, 8.49802, 0.00000, 0.00000, 7.19348, false},
	{855, -331.59952, -1502.37415, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -217.61464, -1519.40881, 6.90084, 0.00000, 0.00000, 7.19348, false},
	{855, -331.77008, -1519.18823, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -329.46146, -1534.70081, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -318.99161, -1551.98877, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -320.04770, -1536.82263, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -321.71619, -1520.13171, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -321.82852, -1503.92273, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -322.51480, -1488.72192, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -322.52853, -1476.38147, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -309.52042, -1552.38684, 11.37566, 0.00000, 0.00000, 7.19348, false},
	{855, -310.48190, -1537.22437, 12.22299, 0.00000, 0.00000, 7.19348, false},
	{855, -312.05469, -1520.53784, 15.15971, 0.00000, 0.00000, 7.19348, false},
	{855, -312.07043, -1504.33289, 10.46497, 0.00000, 0.00000, 7.19348, false},
	{855, -312.65921, -1489.13623, 11.56913, 0.00000, 0.00000, 7.19348, false},
	{855, -312.57437, -1476.79956, 10.33405, 0.00000, 0.00000, 7.19348, false},
	{855, -300.60956, -1552.52698, 11.06033, 0.00000, 0.00000, 7.19348, false},
	{855, -301.48181, -1537.36719, 10.29981, 0.00000, 0.00000, 7.19348, false},
	{855, -302.96460, -1520.68140, 11.42390, 0.00000, 0.00000, 7.19348, false},
	{855, -302.88940, -1504.47729, 9.80571, 0.00000, 0.00000, 7.19348, false},
	{855, -303.38657, -1489.28137, 9.94556, 0.00000, 0.00000, 7.19348, false},
	{855, -303.20898, -1476.94641, 8.95530, 0.00000, 0.00000, 7.19348, false},
	{855, -289.95914, -1552.69470, 6.84965, 0.00000, 0.00000, 7.19348, false},
	{855, -290.72473, -1537.53748, 8.18520, 0.00000, 0.00000, 7.19348, false},
	{855, -292.10001, -1520.85254, 7.68437, 0.00000, 0.00000, 7.19348, false},
	{855, -291.91617, -1504.65027, 7.16866, 0.00000, 0.00000, 7.19348, false},
	{855, -292.30368, -1489.45508, 7.50828, 0.00000, 0.00000, 7.19348, false},
	{855, -292.01529, -1477.12183, 6.95974, 0.00000, 0.00000, 7.19348, false},
	{855, -278.68164, -1552.87195, 5.08747, 0.00000, 0.00000, 7.19348, false},
	{855, -279.33444, -1537.71643, 4.82778, 0.00000, 0.00000, 7.19348, false},
	{855, -280.59589, -1521.03320, 6.36737, 0.00000, 0.00000, 7.19348, false},
	{855, -281.38702, -1504.90698, 6.17227, 0.00000, 0.00000, 7.19348, false},
	{855, -280.56821, -1489.63977, 6.06591, 0.00000, 0.00000, 7.19348, false},
	{855, -280.16254, -1477.30786, 5.72612, 0.00000, 0.00000, 7.19348, false},
	{855, -267.85397, -1553.04236, 3.34305, 0.00000, 0.00000, 7.19348, false},
	{855, -268.39838, -1537.88940, 4.04050, 0.00000, 0.00000, 7.19348, false},
	{855, -269.55054, -1521.20715, 5.34716, 0.00000, 0.00000, 7.19348, false},
	{855, -269.14120, -1505.00940, 5.56956, 0.00000, 0.00000, 7.19348, false},
	{855, -269.30090, -1489.81641, 5.30367, 0.00000, 0.00000, 7.19348, false},
	{855, -268.78256, -1477.48621, 3.89382, 0.00000, 0.00000, 7.19348, false},
	{855, -256.32669, -1552.70996, 2.86480, 0.00000, 0.00000, 7.19348, false},
	{855, -256.75586, -1537.55396, 4.37925, 0.00000, 0.00000, 7.19348, false},
	{855, -257.79163, -1520.86816, 5.53501, 0.00000, 0.00000, 7.19348, false},
	{855, -257.26468, -1504.66675, 5.78228, 0.00000, 0.00000, 7.19348, false},
	{855, -257.30560, -1489.47095, 5.88865, 0.00000, 0.00000, 7.19348, false},
	{855, -257.40857, -1474.14575, 4.59956, 0.00000, 0.00000, 7.19348, false},
	{855, -244.82182, -1553.07751, 3.19058, 0.00000, 0.00000, 7.19348, false},
	{855, -245.13593, -1537.92542, 5.21389, 0.00000, 0.00000, 7.19348, false},
	{855, -246.05548, -1521.24316, 5.96516, 0.00000, 0.00000, 7.19348, false},
	{855, -245.41122, -1505.04517, 6.82277, 0.00000, 0.00000, 7.19348, false},
	{855, -245.33362, -1489.85364, 6.48764, 0.00000, 0.00000, 7.19348, false},
	{855, -244.71384, -1474.98706, 5.00455, 0.00000, 0.00000, 7.19348, false},
	{855, -232.71964, -1537.12451, 6.30303, 0.00000, 0.00000, 7.19348, false},
	{855, -233.51503, -1520.43433, 6.52423, 0.00000, 0.00000, 7.19348, false},
	{855, -232.74536, -1504.22803, 6.94716, 0.00000, 0.00000, 7.19348, false},
	{855, -232.54108, -1489.02832, 7.65307, 0.00000, 0.00000, 7.19348, false},
	{855, -231.24060, -1475.55835, 5.80759, 0.00000, 0.00000, 7.19348, false}

};

enum aratasEnum
{
	aratasObject,
	aratasPickup
};

new AratasInfo[568][aratasEnum];


//Neve | Mati | Skill | Töltény
new Fegyverek[16][fEnum] =
{
	{"Katana", 					50,			0,			1},
	{"Cane", 					50,			0,			1},
	{"Biliárd ütõ", 			50,			0,			1},
	{"Baseball ütõ", 			50,			0,			1},
	{"Ásó", 					50,			0,			1},
	{"9mm Pisztoly", 			900,		50,			40},
	{"Hangtompítós Pisztoly", 	2000,		100,		50},
	{"Sörétes", 				2400,		150,		30},
	{"Desert Eagle", 			3600,		200,		40},
	{"MP5", 					4800,		250,		100},
	{"Micro Uzi", 				4000,		300,		100},
	{"AK-47", 					8000,		350,		80},
	{"M4A1", 					8400,		400,		80},
	{"Távcsöves", 				10000,		450,		50},
	{"Combat", 					10000,		500,		80},
	{"Golyóálló mellény", 		7000,		550,		100}
};

new Kuka[500][kuka];

#if ACCOUNT_KEZELES == 1
enum userControl
{
	uUserName[24],
	uPassword[64],
	uKarakter[2],
	uKarakterA[2],
	uKarakterek,
	uKBetoltve,
	uKNev1[MAX_PLAYER_NAME],
	uKNev2[MAX_PLAYER_NAME],
	uKarakterO[2]
};

new UserControl[MAX_PLAYERS][userControl];
#endif

new Float:LoginCameraPos[][8] =
{
    {1569.615112, -1725.281250, 23.330926, 1388.749145, -1725.281250, 23.330926, 20000.0, 1.0},
    {1338.207519, -912.497680, 83.367454, 1446.264526, -869.062072, 82.563865, 20000.0, 1.0},
    {1711.483642, -1104.680786, 162.211242, 507.619995, -1358.241333, 44.764968, 20000.0, 1.0},
    {167.949172, -1924.088256, 14.955513, 391.168365, -1927.294433, 16.810047, 20000.0, 1.0}
};

new Float:LoginCameraPosLookAt[][8] =
{
    {1569.549194, -1729.239868, 22.760999, 1388.879272, -1729.239868, 22.760999, 20000.0, 1.0},
    {1336.177001, -909.051879, 83.427085, 1444.784912, -865.350830, 82.757537, 20000.0, 1.0},
    {1711.483032, -1108.140502, 160.203689, 505.468841, -1361.565185, 44.195041, 20000.0, 1.0},
    {167.949172, -1920.100585, 14.955513, 391.177947, -1923.294677, 16.850671, 20000.0, 1.0}
};

new RadioLista[8][2][64] =
{
	{"http://195.70.35.172:8000/radio1.mp3", 			"Rádió 1"},
	{"http://samp.gc4.hu/adat/fajl/risefm.pls", 		"RiseFM"},
	{"http://samp.gc4.hu/adat/fajl/radioface.pls", 		"Radio Face"},
	{"http://samp.gc4.hu/adat/fajl/sunshinefm.pls", 	"Sunshine Rádió"},
	{"http://samp.gc4.hu/adat/fajl/gondradio.pls", 		"Gong Rádió"},
	{"http://samp.gc4.hu/adat/fajl/radioszentes.pls", 	"Radio Szentes"},
	{"http://samp.gc4.hu/adat/fajl/radionext.pls", 		"Radio Next"},
	{"http://samp.gc4.hu/adat/fajl/rockvilag.pls", 		"Rock világ"}
};

//Megnevezés - jelenlegi állapot - hanyas rangtól - skin id
new Katona_Engedelyek[6][4][256] =
{
	{"Alap felszerelés", 	0,	1,	287},
	{"Kiképzõ felszerelés", 	0,	1,	287},
	{"Légi felszerelés", 	0,	1,	287},
	{"Katasztrófavédelmi felszerelés", 		0,	1,	287},
	{"Bevetési osztag", 		0,	1,	287},
	{"Hadi felszerelés", 	0,	5,	287}
};
new FBI_Engedely[4][4][32] =
{
	{"Helyszínelõ felszerelés", 	0,	1,	163},
	{"Nyomozó felszerelés", 	0,	1,	164},
	{"Ügynök felszerelé", 	0,	1,	166},
	{"Mesterlövész", 		0,	1,	285}
};

//Név - Ára - HP - Éhség - Szükséglet
new Etel_Menu[12][5][24] =
{
	{"Coca Cola",			2,	5,		-10,	5},
	{"Pepsi", 				2, 	5, 		-9, 	6},
	{"Fanta", 				2, 	5, 		-5, 	10},
	{"Ice Tea", 			1, 	5, 		-7, 	15},
	{"Hamburger", 			4, 	15, 	-30, 	15},
	{"Csibeburger", 		5, 	15, 	-25, 	10},
	{"Hot-Dog", 			3, 	20, 	-35, 	20},
	{"Chili-Dog", 			4, 	20, 	-20, 	25},
	{"Gyros(pitában)", 		5, 	25, 	-40, 	25},
	{"Gyros(tálban)", 		7, 	30, 	-60, 	30},
	{"Szívószál",			0,		-1,		-1,		-1},
	{"Fém kanál",			1,	-1,		-1,		0}
};

//megnevezés - ára - perc string - perc integer - érvényesség órában - listázza a vizsga dialogban? (1 = igen / 0 = nem)
new VizsgaLista[MAX_ENGEDELY][6][32] =
{
	{"KRESZ viszga", 	70, 	"nincs", 	0,		200,	1},
	{"Személygépjármû", 650, 	"8 perc", 	8,		72,		1},
	{"Motor (A1)",		490, 	"8 perc", 	8,		72,		1},
	{"Kamion", 			1136, 	"8 perc", 	8,		72,		1},
	{"Fegyverengedély", 1050, 	"",			0,		90,		0}
};

//Kérdés - A válasz - B válasz - Melyik a helyes (1/2)
new KreszKerdesek[5][4][128] =
{
	{"Mindig a menetirány szerinti...", "...jobb oldalon közlekedünk", "...bal oldalon közlekedünk", 1},
	{"Adhat-e hangjelzést kikerülési szándékának jelzésére?", "Igen", "Nem", 2},
	{"Szabad-e megfordulni kijelölt gyalogos átkelõhelyen?", "Igen", "Nem", 1},
	{"Szabad-e hátramenetet végezni villamos pályán?", "Igen", "Nem", 1},
	{"Szabad-e hátramenetet végezni autópályán?", "Igen", "Nem", 2}
};

//Név - Ár
new ItalLista[13][2][32] = 
{
	{"Ásvány Víz",1},
	{"Coca Cola",2},
	{"Fanta",2},
	{"Sprite",2},
	{"Cappy Ice Fruit",2},
	{"Sör",2},
	{"Bor",3},
	{"Vodka",4},
	{"Whiskey",5},
	{"Gin",4},
	{"Tequila",5},
	{"Absinth",4},
	{"Brandy",4}
};
//Név | FegyverID | LõszerSzám | Ár
new FegyverIllegalisLista[15][4][32] =
{
	{"Boxer",1,1,2500},
	{"Baseball ütõ",5,1,2000},
	{"Ásó",6,1,2000},
	{"Katana",8,1,5000},
	{"Silenced Colt",23,50,25000},
	{"Desert Eagle",24,50,30000},
	{"Shotgun",25,25,28000},
	{"Combat Shotgun",27,100,48000},
	{"Uzi",28,120,29000},
	{"Tec9",32,120,29000},
	{"MP5",29,100,30000},
	{"AK-47",30,120,55000},
	{"M4",31,120,50000},
	{"Rifle",33,25,35000},
	{"Sniper Rifle",34,25,60000}
};

//Megnevezés - Tárgy ára
new TargyLista[21][2][32] =
{
	{"GPS", 			150},
	{"Telefon", 		100},
	{"Kötszer", 		14},
	{"Szendvics", 		3},
	{"Feltöltõkártya", 	15},
	{"Telefonkönyv", 	25},
	{"MP3 lejátszó", 	87},
	{"Vontatókötél", 	41},
	{"Cigipapír",		3},
	{"Egy doboz cigi",	3},
	{"Öngyújtó", 		1},
	{"Csipogó",		320},
	{"Benzines Kanna",		500},
	{"Spray",250},
	{"Hifi Torony",1000},
	{"Gyenge lámpaszett", 1000 },
	{"Közepes lámpaszett", 1750 },
	{"Erõs lámpaszett", 2500 },
	{"Pipa", 200 },
	{"Bong", 600 },
	{"Basseballütõ", 100}
};

new PremiumPontKell[5][2] =
{
	{ADAT_HAZ,		1600},
	{ADAT_JARMU, 	1600},
	{ADAT_BUTOR, 	1200},
	{ADAT_RENDSZAM, 1000},
	{ADAT_NEON, 	2000}
};

new Float:Vizsga_Alap[][3] =
{
	{2336.980, -2029.997, 13.311},
	{2321.917, -2029.950, 13.311},
	{2313.405, -2021.948, 13.291},
	{2306.780, -1990.278, 13.291},
	{2227.806, -1986.159, 13.311},
	{2232.236, -1995.453, 13.271},
	{2278.932, -2020.157, 13.311},
	{2279.869, -2055.300, 15.295},
	{2274.444, -2046.537, 13.309},
	{2299.728, -2034.734, 13.311},
	{2336.584, -2034.851, 13.311},
	{2364.317, -2011.506, 13.250},
	{2416.114, -1945.912, 13.087},
	{2416.242, -1745.659, 13.087},
	{2228.943, -1729.721, 13.088},
	{2107.162, -1749.515, 13.110},
	{1834.518, -1750.082, 13.087},
	{1819.778, -1831.415, 13.118},
	{1778.671, -1887.675, 13.092},
	{1847.524, -1934.962, 13.085},
	{2083.950, -1910.144, 13.088},
	{2190.016, -1896.783, 13.302},
	{2221.548, -1878.190, 13.087},
	{2218.148, -1763.294, 13.075},
	{2283.397, -1734.833, 13.088},
	{2400.778, -1735.190, 13.087},
	{2411.714, -1883.967, 13.088},
	{2412.171, -1996.916, 13.050},
	{2351.284, -2012.726, 13.249}
};

new Float:Vizsga_Kamion[][3] =
{
	{2345.796, -2015.733, 14.151},
	{2383.849, -2010.056, 14.159},
	{2416.234, -1948.268, 13.988},
	{2415.895, -1747.906, 13.988},
	{2482.038, -1734.746, 13.989},
	{2626.727, -1734.070, 11.690},
	{2723.155, -1659.547, 13.676},
	{2831.734, -1614.060, 11.528},
	{2791.773, -1610.839, 11.530},
	{2863.582, -1541.527, 11.528},
	{2840.983, -1068.974, 23.915},
	{2846.570, -787.478, 11.480},
	{2796.703, -520.931, 11.426},
	{2836.330, -318.881, 8.095},
	{2794.552, 46.707, 21.128},
	{2553.223, 44.041, 26.945},
	{2409.385, 43.893, 26.944},
	{2269.621, 43.836, 26.942},
	{2243.628, 27.377, 27.037},
	{2158.374, 43.635, 26.942},
	{1899.418, 25.890, 35.272},
	{1686.961, -330.473, 34.843},
	{1273.665, -381.619, 3.050},
	{1256.374, -436.280, 6.085},
	{1156.382, -927.318, 43.606},
	{1241.260, -941.620, 43.111},
	{1492.380, -960.401, 36.747},
	{1911.360, -1024.601, 35.832},
	{2183.247, -1110.973, 25.428},
	{2268.702, -1175.624, 26.321},
	{2269.055, -1370.177, 24.433},
	{2210.435, -1534.474, 24.434},
	{2182.319, -1711.303, 13.971},
	{2251.148, -1734.444, 13.989},
	{2411.508, -1817.872, 13.989},
	{2348.773, -2015.220, 14.152}
};

new Float:PaintBallPos[14][3] =
{
	{-1134.5125,1093.4597,1345.8071},
	{-1126.2377,1065.3071,1345.7264},
	{-1135.8137,1027.4368,1345.7529},
	{-1113.0562,1019.8771,1344.0173},
	{-1108.0010,1044.9817,1342.4000},
	{-1080.2546,1030.4102,1342.6031},
	{-1048.2437,1089.0992,1343.4860},
	{-1032.2373,1079.6199,1343.0629},
	{-1027.1129,1081.4862,1343.3342},
	{-991.0128,1094.5576,1342.9342},
	{-969.8690,1091.8357,1345.0082},
	{-977.6313,1073.7118,1344.9707},
	{-978.6574,1034.9257,1345.0035},
	{-971.3726,1026.4720,1345.0616}
};

new NemVontatoJarmu[] =
{
	403,406,407,408,409,410,
	411,412,413,414,415,416,417,419,423,
	424,425,427,428,429,430,431,432,433,
	434,435,437,440,441,442,443,444,446,
	447,448,449,450,451,452,453,454,455,
	456,457,459,460,461,462,463,464,465,
	466,467,468,469,471,472,473,474,476,
	477,481,482,483,484,485,486,487,488,
	493,494,495,497,498,499,501,502,503,
	504,506,508,509,510,511,512,513,513,
	514,515,519,520,521,522,523,524,528,
	530,532,537,538,539,541,544,545,548,
	552,553,556,557,563,564,568,569,570,
	571,572,573,574,577,578,581,582,583,
	584,586,587,588,590,591,592,593,594,
	595,601,603,606,607,608,609,610,611
};

new NemVontathatoJarmu[] =
{
	406,417,425,430,432,435,441,
	446,447,448,449,450,452,453,454,460,
	461,462,463,464,465,468,469,472,473,
	476,481,484,486,487,488,493,497,501,
	509,510,511,512,513,519,520,521,522,
	523,530,532,537,538,539,548,553,563,
	564,569,570,577,581,584,586,590,591,
	592,593,594,595,606,607,608,610,611
};

new PakolhatoJarmu[] =
{
	400,401,402,403,404,405,409,410,411,412,413,414,415,416,417,418,
	419,420,421,422,423,424,426,427,428,429,430, 431,433,434,436,437,
	438,439,440,442,443,444,445,446,451,451,452,453,454,455,456,458,
	459,460,466,467,469,470,471,472,473,474,475,476,477,478,479,480,
	482,483,484,487,488,489,490,491,492,493,494,495,496,497,498,499,
	500,502,503,504,505,506,507,508,511,512,513,514,515,516,517,518,
	519,520,521,525,526,527,528,529,533,534,535,536,540,541,542,543,
	545,546,547,548,549,550,551,552,552,554,555,556,557,558,559,560,
	561,562,563,565,566,567,568,573,575,576,577,578,579,580,582,585,
	587,588,589,592,593,595,596,597,598,599,600,601,602,603,604,605,
	609
};

enum eboja
{
	boObj,
	Float:boposx,
	Float:boposy,
	Float:boposz
};
new Bojak[MAX_PLAYERS][MAX_BOJA][eboja];

enum utzarInfo
{
	bool:uVan,
	uTipus,
	Float:uHely[4],
	uObject,
	uPickup[4],
	Text3D:uText
};
new Utzarak[MAX_PLAYERS][utzarInfo];

#if NPC_KELL == 1

new BallasSkins[] =
{
	102, 103, 104
};

enum botEnum
{
	botID,
	botTipus,
	botMost,
	botElozo,
	botKElozo,
	botKovetkezo
};
new BotInformacio[100][botEnum];

enum kozInfo
{
	kozTipus,
	Float:kozPosX,
	Float:kozPosY,
	Float:kozPosZ,
	kozMerre[5]
};

new GyarPoziciok[][kozInfo] =
{
	{0, 1045.5754, -1228.9409, 16.9199, {2, 4, 15, 0, 0}}, // NPC1
	{0, 1045.0146, -1312.5759, 13.5469, {1, 7, 3, 0, 0}}, // NPC2
	{0, 950.0192, -1312.7231, 13.5469, {2, 4, 5, 7, 0}}, // NPC3
	{0, 950.5178, -1228.4989, 16.9065, {1, 3, 5, 15, 0}}, // NPC4
	{0, 950.0499, -1273.4552, 15.3544, {3, 4, 6, 0, 0}}, // NPC5 (köz 0-3)
	{0, 973.6544, -1273.6064, 15.1174, {5, 7, 8, 0, 0}}, // NPC6 (5-bõl indulva)
	{0, 974.0480, -1312.5380, 13.4533, {2, 3, 6, 0, 0}}, // NPC7 (6-bõl indulva, köz 3-4)
	{0, 997.9763, -1273.5927, 15.1797, {6, 9, 0, 0, 0}}, // NPC8 (6-bõl indulva)
	{0, 997.7208, -1259.3693, 15.0313, {8, 10, 0, 0, 0}}, // NPC9 (8-bõl indulva)
	{0, 997.6831, -1251.6245, 19.3968, {9, 11, 0, 0, 0}}, // NPC10 (9-bõl indulva)
	{0, 997.7750, -1246.7592, 19.4086, {10, 12, 0, 0, 0}}, // NPC11 (10-bõl indulva)
	{0, 992.0689, -1246.8112, 19.4118, {11, 13, 0, 0, 0}}, // NPC12 (11-bõl indulva)
	{0, 992.0351, -1238.8540, 19.3941, {12, 14, 0, 0, 0}}, // NPC13 (12-bõl indulva)
	{0, 991.9806, -1234.0807, 16.9475, {13, 15, 0, 0, 0}}, // NPC14 (13-bõl indulva)
	{0, 991.9255, -1228.6942, 16.9050, {1, 4, 14, 0, 0}} // NPC15 (14-bõl indulva, köz 0-1)
};

#endif

enum butorEnum {
    butorID,
    butorNEV[48],
    butorAR
};

new Butor_Asztal[35][butorEnum] =
{
	{2357,		"Négyszögletes hosszú asztal",				55},
	{2119,		"Kerekített végû asztal",					30},
	{2762,		"Négyszögletes asztal (piros)",				25},
	{2763,		"Négyszögletes(piros)",						25},
	{2764,		"Négyszögletes asztal",						42},
	{2118,		"Ovális márvány asztal",					75},
	{2117,		"Négyszögletes asztal",						68},
	{2116,		"Négyszögletes asztal ",					50},
	{2115,		"Négyszögletes asztal",						50},
	{2110,		"Kerekített asztal",						42},
	{2109,		"Barna asztal",								42},
	{2032,		"Sötét barna asztal",						42},
	{2031,		"Ovális asztal",							42},
	{2030,		"Kerek márvány asztal",						127},
	{2029,		"Szögletes vastaglábú",						63},
	{1770,		"Kerekített talpú szögletes",				29},
	{1737,		"Szögletes asztal",							63},
	{1814,		"Szögletes TV asztal",						63},
	{1815,		"Kör alakú",								70},
	{1817,		"Üveglapos szögletes asztal",				100},
	{1818,		"Kicsi TV asztal",							35},
	{1819,		"Kerek asztal",								29},
	{1820,		"Kicsi kerek",								25},
	{1822,		"Kerek üveglapos",							55},
	{1823,		"Szögletes asztal (kicsi)",					25},
	{2126,		"Kerekített üveglapos",						34},
	{2112,		"Négyzet",									29},
	{2111,		"Kerek",									29},
	{2236,		"Szögletes",								29},
	{1433,		"Szögletes",								29},
	{1516,		"Szögletes vékony lábakkal",				29},
	{2311,		"Szögletes hosszú",							29},
	{2315,		"Szögletes hosszú",							29},
	{2321,		"Szögletes hosszú",							29},
	{2370,		"Négyzet",									42}
};

new Butor_Ulogarnitura[20][butorEnum] =
{
	{2290,		"Három személyes hosszú",					170},
	{1768,		"Hosszú",									106},
	{1766,		"Két részes",								63},
	{1764,		"Három személyes",							63},
	{1763,		"Közepes 3 személyes",						63},
	{1761,		"Három személyes",							63},
	{1760,		"Három személyes mintás",					63},
	{1757,		"Levél mintázatú",							63},
	{1756,		"Három személyes",							63},
	{1753,		"Három személyes (barna)",					220},
	{1713,		"Kettõ személyes (szürke)",					191},
	{1712,		"Kettõ személyes (világos barna)", 			148},
	{1710,		"Négy személyes (világos barna)", 			246},
	{1709,		"Kerekített hat személyes",					410},
	{1706,		"Két személyes (lila)",						82},
	{1703,		"Három személyes (fekete)",					106},
	{1702,		"Három személyes (barna)",					106},
	{1723,		"Három személyes (fekete)",					106},
	{1726,		"Három személyes (fekete)",					106},
	{1728,		"Három személyes (világos barna)",			106}
};

new Butor_Kepek[32][butorEnum] =
{
	{2255,		"Múzsa", 				63},
	{2256,		"Pálma fa", 			29},
	{2257,		"Absztrakt", 			80},
	{2258,		"Látkép", 				29},
	{2259,		"Bowling pálya", 		34},
	{2260,		"Folyó", 				34},
	{2261,		"Híd", 					30},
	{2262,		"Belváros", 			25},
	{2263,		"Dokk", 				20},
	{2264,		"Tengerpart", 			25},
	{2265,		"Sivatagi hõség", 		30},
	{2266,		"Belváros", 			48},
	{2267,		"Teherhajó", 			57},
	{2268,		"Macska", 				48},
	{2269,		"Dombok", 				20},
	{2270,		"Levelek hullása", 		61},
	{2271,		"Csendélet", 			20},
	{2272,		"Természet lágyöle",	27},
	{2273,		"Virágok Illata", 		62},
	{2274,		"Rózsa", 				62},
	{2275,		"Gyümölcstál", 			43},
	{2276,		"Lánc-híd", 			43},
	{2277,		"Macska", 				68},
	{2278,		"Kirakodás", 			53},
	{2279,		"Zord sziklák", 		43},
	{2280,		"Tengerpart", 			43},
	{2281,		"Izzó parázs", 			30},
	{2282,		"Sárga villanás", 		32},
	{2283,		"Absztrakt", 			100},
	{2284,		"Bazilika", 			70},
	{2285,		"Földrengés", 			58},
	{2286,		"Teherhajó", 			70}
};


new Butor_Lampak[7][butorEnum] =
{
	{2239,		"Kiállító termi lámpa", 54},
	{2238,		"Láva lámpa", 			15},
	{2196,		"Asztali lámpa", 		15},
	{2108,		"Nappali lámpa", 		58},
	{2106,		"Éjjeli lámpa", 		20},
	{2105,		"Éjjeli lámpa", 		30},
	{2069,		"Éjjeli lámpa", 		40}
};

new Butor_TV[23][butorEnum] =
{
	{14772,		"Kis TV", 			148},
	{14604,		"TV Videóval", 		170},
	{1429,		"Kis TV", 			148},
	{1518,		"Közepes TV", 		150},
	{1717,		"TV Álvánnyal", 	127},
	{1747,		"Kis TV", 			106},
	{1748,		"Kis TV", 			106},
	{1749,		"Közepes TV", 		85},
	{1750,		"Közepes TV", 		850},
	{1751,		"Közepes TV", 		85},
	{1752,		"Közepes TV", 		85},
	{1781,		"Kis TV", 			127},
	{1786,		"Nagy TV", 			297},
	{1791,		"Közepes TV", 		210},
	{1792,		"Nagy TV", 			212},
	{2224,		"Lámpabúrás TV", 	148},
	{2296,		"TV Szekrénnyel", 	404},
	{2297,		"TV Videóval", 		163},
	{2312,		"Nagy TV", 			295},
	{2316,		"Közepes TV", 		260},
	{2595,		"TV Videóval", 		212},
	{2596,		"Sarok TV", 		200},
	{2700,		"Sarok TV", 		200}
};

new Butor_DVDHiFi[14][butorEnum] =
{
	{1719,		"Nintendo",				82},
	{1782,		"Videó lejátszó",		148},
	{1783,		"Videó lejátszó",		148},
	{1785,		"Videó lejátszó",		148},
	{1787,		"Videó lejátszó",		148},
	{1788,		"Videó lejátszó",		148},
	{1790,		"Videó lejátszó",		148},
	{1809,		"HiFi",					325},
	{1839,		"HiFi",					325},
	{2099,		"HiFi hangfallal",		406},
	{2100,		"HiFi hangfallal",		406},
	{2227,		"HiFi álványon",		255},
	{2226,		"Magnó",				151},
	{2225,		"Két HiFi álványon",	195}
};

new Butor_Hangfal[6][butorEnum] =
{
	{2229,		"Magas Hangfal", 			180},
	{2230,		"Fakeretes hangfal", 		170},
	{2231,		"Fakeretes kis hangfal", 	119},
	{2232,		"Fekete nagy hangfal", 		196},
	{2233,		"Álványos hangfal", 		151},
	{1840,		"Kis Hangfal", 				110}
};

new Butor_Szekreny[25][butorEnum] =
{
	{936,		"Konyha Szekrény", 			385},
	{937,		"Konyha Szekrény", 			340},
	{1416,		"Fa szekrény", 				255},
	{1417,		"Kis Gardrób", 				254},
	{1741,		"Alsónemûs szekrény", 		255},
	{1743,		"Aolsónemûs szekrény", 		250},
	{2000,		"Irat Szekrény", 			127},
	{2007,		"Dupla Irat Szekrény", 		170},
	{2025,		"Gardrób", 					255},
	{2078,		"Pohár szekrény", 			217},
	{2094,		"Alsónemûs szekrény", 		127},
	{2095,		"Kis Szekrény", 			85},
	{2161,		"Könyves Szekrény", 		178},
	{2162,		"Könyves Szekrény", 		178},
	{2163,		"Dupla Szekrény", 			212},
	{2164,		"Könyves Szekrény", 		255},
	{2167,		"Gardrób", 					212},
	{2191,		"Könyves Szekrény", 		225},
	{2199,		"Szekrény", 				319},
	{2200,		"Dupla Gardrób", 			170},
	{2204,		"Szekrény", 				238},
	{2307,		"Kabát Szekrény", 			63},
	{2576,		"Gardrób alsónemûtartóval", 276},
	{2610,		"Irat Szekrény", 			127},
	{1742,		"Könyves Szekrény", 		93}
};

new Butor_Fotel[18][butorEnum] =
{
	{1754,		"Barna kis fotel", 				70},
	{1755,		"Mintás fotel", 				70},
	{1758,		"Levél mintázatú fotel", 		61},
	{1759,		"Csíkos fotel", 				55},
	{1762,		"Mintás barna fotel", 			70},
	{1765,		"Kockás fotel", 				70},
	{1767,		"Mintás fotel", 				70},
	{1769,		"Kék fa kartámlás fotel", 		70},
	{2292,		"Sarok barna fotel", 			76},
	{2295,		"Barna Puff", 					65},
	{1704,		"Fekete fa kartámlás fotel", 	112},
	{1705,		"Barna fa kartámlás fotel", 	112},
	{1708,		"Fekete fotel", 				96},
	{1711,		"Barna fotel", 					53},
	{1724,		"Fekete fa kartámlás fotel", 	112},
	{1727,		"Fekete fotel", 				110},
	{1729,		"Barna fotel", 					53},
	{1735,		"Virágmintázatú fotel", 		48}
};

new Butor_Konyhabutor[13][butorEnum] =
{
	{2128,		"Piros konyha szekrény",				148},
	{2129,		"Piros konyha asztal",					148},
	{2133,		"Fehér konyha szekrény",				119},
	{2137,		"Márványos konyha asztal",				296},
	{2138,		"Márványos konyha asztal",				296},
	{2139,		"Márványos konyha asztal",				212},
	{2140,		"Konyha szekrény", 						178},
	{2142,		"Konyha asztal",						138},
	{2145,		"Keskeny konyha szekrény",				125},
	{2157,		"Konyha asztal", 						110},
	{2158,		"Konyha szekrény",  					110},
	{2160,		"Mosdó",								200},
	{15036,		"Fa szett",								330}
};

new Butor_Huto[3][butorEnum] =
{
	{2533,		"Üdítõs",		212},
	{2534,		"Fa hûtõ",		212},
	{2452,		"Üdítõs",		382}
};

new
	Butor_Szamitogep[1][butorEnum] =
{
	{2190,		"Commondore '64",		255}
};

new Butor_Ajto[3][butorEnum] =
{
	{1491,		"Fa lengõ ajtó négyzetekkel",	170},
	{1502,		"Fa lengõ ajtó",				255},
	{1523,		"Lengõ ajtó üveggel",			297}
};

new Butor_Mosogep[1][butorEnum] =
{
	{1208,		"Forgó dobos",		225}
};

new Butor_Nyomtato[2][butorEnum] =
{
	{2186,		"Nyomtató fénymásolóval",	544},
	{2202,		"Nyomtató fénymásolóval",	544}
};

new Butor_Agy[16][butorEnum] =
{
	{1793,		"Matrac csíkokkal",						136},
	{1794,		"Két személyes barna mintával",			510},
	{1795,		"Két személyes fa alapon",				255},
	{1796,		"Egy személyes kocka mintával",			170},
	{1797,		"Két személyes csíkos mintával",		425},
	{1798,		"Két személyes csíkos mintával",		212},
	{1799,		"Két személyes barna mintás",			212},
	{1800,		"Matrac fém kerettel",					70},
	{1801,		"Két személyes fém kerettel",			127},
	{1802,		"Két személyes fa kerettel",			167},
	{1803,		"Két személyes fa kerettel",			221},
	{1812,		"Matrac",								53},
	{2090,		"Két személyes vonalas",				148},
	{2301,		"Két személyes szekrénnyel",			242},
	{2302,		"Csíkos huzatos",						106},
	{14446,		"Zebra mintás",							1106}
};

new Butor_WC[3][butorEnum] =
{
	{2514,		"Fehér kerámia", 					70},
	{2525,		"Fehér kerámia kiegészítõkkel", 	76},
	{2528,		"Fehér kerámia talppal", 			106}
};

new Butor_Zuhanyzo[6][butorEnum] =
{
	{2516,		"Zuhanytálca", 						106},
	{2517,		"Modern zuhanykabin", 				510},
	{2519,		"Fehér zuhanytálca", 				106},
	{2520,		"Fém hatású zuhanykabin", 			1106},
	{2526,		"Fa berakású kád", 					276},
	{2527,		"Függönyös csempe tálcával",		145}
};

new Butor_Mosdo[3][butorEnum] =
{
	{2515,		"Egyszerû két csapos",				63},
	{2518,		"Szifonos porcelán",				93},
	{2523,		"Talpas modern",					90}
};

new Butor_Szonyeg[9][butorEnum] =
{
	{2815,		"Lila, téglalapokkal",				106},
	{2817,		"Zöldes kék, körökkel",				106},
	{2818,		"Egyszerû kockás",					80},
	{2833,		"Díszes okker színekkel",			127},
	{2835,		"Okker szíbû kerek",				120},
	{2836,		"Okker színû pöttyös",				135},
	{2841,		"Kerek kék kockás",					83},
	{2842,		"Hangulatos lila mintás",			85},
	{2847,		"Hangulatos perzsa narancs",		137}
};

new Butor_Szek[12][butorEnum] =
{
	{1671,		"Hivatali fekete fém",				63},
	{1714,		"Elegáns fekete szövetû",			85},
	{1715,		"Fém szerkezetes bõr",				90},
	{1720,		"Kicsi fehér háttámlával",			106},
	{1805,		"Sámli piros ülõfelülettel",		29},
	{1806,		"Szögletes, forgó, kék huzallat",	70},
	{1810,		"Összecsukható",					20},
	{1811,		"Praktikus fém vázas",				63},
	{2120,		"Egyszerû bõr ülõfelülettel",		60},
	{2123,		"Elegáns fehér",					138},
	{2124,		"Piros párnás fa",					127},
	{2356,		"Kék huzat, forgószék",				70}
};

new Butor_Iroasztal[8][butorEnum] =
{
	{1963,		"Nagy, talpas, fiókkal",			153},
	{2166,		"Sarok asztal fém vázzal",			170},
	{2169,		"Fehér oldalú fa",					110},
	{2173,		"Fémvázas fa lappal",				93},
	{2180,		"Három oldalú fa",					53},
	{2205,		"Egyszerû nagy barna",				110},
	{2206,		"Egyszerû barna",					82},
	{2607,		"Fehér két lábú",					82}
};

new Butor_Fal[36][butorEnum] =
{
	{19353,		"Fehér és piros fal",				850},
	{19354,		"Rombusz fal",						850},
	{19355,		"Szürke kõ fal",					850},
	{19356,		"Fa fal",							850},
	{19357,		"Szürke fal",						850},
	{19358,		"Szürke csíkozott fal",				850},
	{19359,		"Szürke fal",						850},
	{19360,		"Fa fal",							850},
	{19361,		"Narancssárga, és barna fal",		850},
	{19362,		"Szürkés fal",						850},
	{19363,		"Barna fal",						850},
	{19364,		"Fehér tégla fal",					850},
	{19365,		"Szürke fal",						850},
	{19366,		"Fa fal",							850},
	{19367,		"Kék fal",							850},
	{19368,		"Barna fal",						850},
	{19369,		"Szürke fal",						850},
	{19370,		"Fa fal",							850},
	{19371,		"Szürke fal",						850},
	{19372,		"Barna fal",						850},
	{19373,		"Zöld fal",							850},
	{19383,		"Fehér és piros ajtós fal",			850},
	{19384,		"Rombusz ajtós fal",				850},
	{19386,		"Fa ajtós fal",						850},
	{19387,		"Szürke ajtós fal",					850},
	{19388,		"Szürke csíkozott ajtós fal",		850},
	{19389,		"Szürke ajtós fal",					850},
	{19390,		"Narancssárga és vörös ajtós fal",	850},
	{19391,		"Szürke ajtós fal",					850},
	{19392,		"Barna ajtós fal",					850},
	{19393,		"Szürke téglás ajtós fal",			850},
	{19394,		"Szürke ajtós fal",					850},
	{19395,		"Szürkés kék ajtós fal",			850},
	{19396,		"Szürkés vörös ajtós fal",			850},
	{19397,		"Világos barna ajtós fal",			850},
	{19398,		"Szürke kõ ajtós fal",				850}
};

new Butor_Szef[1][butorEnum] =
{
	{2332,		"Házszéf",			210}
};
new ButorInfo[MAXBUTORSZAM][butorInfo];

new EloToltesek[19][20] = {
	"BOMBER",
	"RAPPING",
	"SHOP",
	"BEACH",
	"SMOKING",
	"FOOD",
	"ON_LOOKERS",
	"DEALER",
	"CRACK",
	"CARRY",
	"COP_AMBIENT",
	"PARK",
	"INT_HOUSE",
	"FOOD",
	"PED",
	"ROB_BANK",
	"SWORD",
	"PAULNMAC",
	"SCRATCHING"
};

new FaAdatok[MAX_FA][Faadatok];

new FaHelyek[][far] =
{
	{1424.09998, -124.5, 20.9, 100, false},
	{1419.90002, -117.4, 20.9, 100, false},
	{1416.00000, -110.7, 20.9, 100, false},
	{1411.90002, -103.8, 20.9, 100, false},
	{1408.59998, -98.2, 20.9, 100, false},
	{1404.30005, -90.9, 23.2, 100, false},
	{1400.09998, -83.8, 25.2, 100, false},
	{1395.69995, -76.3, 26.2, 100, false},
	{1391.40002, -69.0, 27.5, 100, false},
	{1386.80005, -61.2, 28.3, 100, false},
	{1383.40002, -55.4, 28.8, 100, false},
	{1389.80005, -49.8, 28.8, 100, false},
	{1394.40002, -56.6, 28.3, 100, false},
	{1398.69995, -63.0, 27.8, 100, false},
	{1403.90002, -70.7, 26.1, 100, false},
	{1408.5, -77.5, 22.9, 100, false},
	{1413.5, -84.4, 21.9, 100, false},
	{1418.19995, -90.8, 20.2, 100, false},
	{1422.90002, -97.3, 18.5, 100, false},
	{1427.59998, -103.8, 18.8, 100, false},
	{1432.19995, -110.0, 18.8, 100, false},
	{1438.09998, -118.1, 18.8, 100, false},
	{1444.19995, -126.4, 19.5, 100, false},
	{1432.30005, -123.5, 19.5, 100, false},
	{1427.5, -115.9, 19.5, 100, false},
	{1423.80005, -108.8, 19.0, 100, false},
	{1418.69995, -103.2, 19.0, 100, false},
	{1411.40002, -90.1, 21.3, 100, false},
	{1449.09998, -121.2, 19.0, 100, false},
	{1445.5, -114.1, 18.3, 100, false},
	{1442.09998, -107.4, 18.3, 100, false},
	{1438.59998, -100.5, 18.3, 100, false},
	{1431.30005, -95.4, 17.3, 100, false},
	{1427.69995, -88.8, 18.5, 100, false},
	{1423.5, -83.1, 18.5, 100, false},
	{1417.59998, -75.8, 21.3, 100, false},
	{1413.30005, -70.0, 23.3, 100, false},
	{1408.69995, -63.8, 25.3, 100, false},
	{1403.59998, -57.0, 26.8, 100, false},
	{1398.09998, -49.6, 26.8, 100, false},
	{1394.19995, -44.4, 28.1, 100, false},
	{1399.40002, -39.0, 28.1, 100, false},
	{1405.00000, -44.4, 28.1, 100, false},
	{1410.59998, -49.8, 26.9, 100, false},
	{1414.09998, -57.3, 25.0, 100, false},
	{1419.69995, -62.7, 22.2, 100, false},
	{1422.90002, -69.5, 21.2, 100, false},
	{1429.80005, -76.1, 19.5, 100, false},
	{1435.09998, -84.6, 18.0, 100, false},
	{1441.30005, -92.9, 18.0, 100, false},
	{1445.90002, -102.5, 18.3, 100, false},
	{1451.19995, -110.3, 18.3, 100, false},
	{1456.30005, -117.4, 18.3, 100, false},
	{1462.30005, -112.9, 18.3, 100, false},
	{1457.90002, -105.6, 18.3, 100, false},
	{1453.90002, -99.0, 18.3, 100, false},
	{1449.40002, -91.5, 18.3, 100, false},
	{1444.09998, -82.7, 18.3, 100, false},
	{1440.00000, -75.8, 18.3, 100, false},
	{1434.59998, -69.8, 19.8, 100, false},
	{1429.80005, -62.2, 20.8, 100, false},
	{1424.50000, -56.5, 22.8,100, false},
	{1418.40002, -49.9, 25.5, 100, false},
	{1413.30005, -41.4, 28.5, 100, false},
	{1406.69995, -34.2, 28.8, 100, false},
	{1413.69995, -28.9, 28.8, 100, false},
	{1419.00000, -35.2, 27.8, 100, false},
	{1425.90002, -42.1, 24.8, 100, false},
	{1430.50000, -49.9, 22.0, 100, false},
	{1435.00000, -55.9, 20.5, 100, false},
	{1439.00000, -61.7, 19.5, 100, false},
	{1443.19995, -68.6, 18.8, 100, false},
	{1448.59998, -75.5, 18.5, 100, false},
	{1454.19995, -84.4, 17.5, 100, false},
	{1459.30005, -92.4, 17.5, 100, false},
	{1463.50000, -98.9, 17.5, 100, false},
	{1467.90002, -105.9, 17.5, 100, false},
	{1476.69995, -107.1, 17.5, 100, false},
	{1472.30005, -100.1, 17.5, 100, false},
	{1468.69995, -92.6, 17.5, 100, false},
	{1463.69995, -84.8, 17.5, 100, false},
	{1458.19995, -76.1, 17.5, 100, false},
	{1453.00000, -67.9, 18.8, 100, false},
	{1446.59998, -60.7, 20.0, 100, false},
	{1442.00000, -53.5, 21.3, 100, false},
	{1439.30005, -46.9, 22.5, 100, false},
	{1433.09998, -40.5, 23.5, 100, false},
	{1428.50000, -33.3, 25.5, 100, false},
	{1424.19995, -26.5, 27.5, 100, false},
	{1428.00000, -22.9, 27.5, 100, false},
	{1431.80005, -19.3, 26.0, 100, false},
	{1437.50000, -14.0, 26.0, 100, false},
	{1443.00000, -8.9, 26.0, 100, false},
	{1449.00000, -3.3, 26.0, 100, false},
	{1454.80005, 2.2, 26.0, 100, false},
	{1460.50000, 7.5, 26.0, 100, false},
	{1466.90002, 13.5, 26.0, 100, false},
	{1472.90002, 19.1, 26.0, 100, false},
	{1478.90002, 24.7, 26.0, 100, false},
	{1485.59998, 31.0, 26.0, 100, false},
	{1490.69995, 35.8, 26.0, 100, false},
	{1495.59998, 31.5, 25.0, 100, false},
	{1489.09998, 27.2, 25.0, 100, false},
	{1481.40002, 21.6, 25.0, 100, false},
	{1475.40002, 14.3, 25.0, 100, false},
	{1467.59998, 8.0, 25.0, 100, false},
	{1460.30005, 2.3, 25.0, 100, false},
	{1453.50000, -3.7, 25.0, 100, false},
	{1446.59998, -10.0, 25.0, 100, false},
	{1440.50000, -16.1, 25.0, 100, false},
	{1433.30005, -22.0, 25.0, 100, false},
	{1434.50000, -29.3, 24.0, 100, false},
	{1440.40002, -23.6, 24.0, 100, false},
	{1446.80005, -17.9, 24.0, 100, false},
	{1454.30005, -10.2, 24.0, 100, false},
	{1462.40002, -4.8, 24.0, 100, false},
	{1468.30005, 0.9, 24.0, 100, false},
	{1475.59998, 5.7, 24.0, 100, false},
	{1484.19995, 11.3, 24.0, 100, false},
	{1489.19995, 14.6, 24.0, 100, false},
	{1494.90002, 20.7, 24.0, 100, false},
	{1501.40002, 26.2, 24.0, 100, false},
	{1504.09998, 18.3, 23.0, 100, false},
	{1498.90002, 14.0, 23.3, 100, false},
	{1493.90002, 9.8, 23.3, 100, false},
	{1488.00000, 6.6, 23.3, 100, false},
	{1481.00000, 2.8, 23.3, 100, false},
	{1473.50000, -1.2, 23.3, 100, false},
	{1467.30005, -7.1, 23.3, 100, false},
	{1459.59998, -12.9, 23.3, 100, false},
	{1452.80005, -16.6, 23.3, 100, false},
	{1446.30005, -23.5, 23.3, 100, false},
	{1440.59998, -29.7, 23.3, 100, false},
	{1433.59998, -33.5, 23.3, 100, false},
	{1433.59998, -33.5, 23.3, 100, false},
	{1504.90002, 9.5, 23.0, 100, false},
	{1498.00000, 4.3, 23.0, 100, false},
	{1491.30005, 0.2, 23.0, 100, false},
	{1484.30005, -3.7, 23.0, 100, false},
	{1478.00000, -7.2, 23.0, 100, false},
	{1470.09998, -11.6, 23.0, 100, false},
	{1464.69995, -15.6, 23.0, 100, false},
	{1457.50000, -19.6, 23.0, 100, false},
	{1452.09998, -24.6, 23.0, 100, false},
	{1448.69995, -31.4, 23.0, 100, false},
	{1443.19995, -38.0, 22.3, 100, false},
	{1446.00000, -43.2, 22.3, 100, false},
	{1452.50000, -37.8, 22.3, 100, false},
	{1459.40002, -32.0, 22.3, 100, false},
	{1467.09998, -25.6, 22.3, 100, false},
	{1473.80005, -20.0, 22.3, 100, false},
	{1481.09998, -13.9, 22.3, 100, false},
	{1489.19995, -8.4, 22.3, 100, false},
	{1496.90002, -3.6, 22.3, 100, false},
	{1503.40002, 1.8, 22.3, 100, false},
	{1511.30005, -3.0, 22.3, 100, false},
	{1505.19995, -6.2, 22.3, 100, false},
	{1499.59998, -10.8, 22.3, 100, false},
	{1492.00000, -15.8, 22.3, 100, false},
	{1484.30005, -21.0, 21.8, 100, false},
	{1477.59998, -26.6, 22.3, 100, false},
	{1469.19995, -31.0, 20.8, 100, false},
	{1463.19995, -38.3, 20.8, 100, false},
	{1455.90002, -42.8, 21.0, 100, false},
	{1452.19995, -49.7, 21.0, 100, false},
	{1454.30005, -57.7, 20.3, 100, false},
	{1458.69995, -50.9, 20.3, 100, false},
	{1465.59998, -45.8, 20.3, 100, false},
	{1471.80005, -40.7, 20.3, 100, false},
	{1478.40002, -36.3, 20.3, 100, false},
	{1486.00000, -30.1, 20.3, 100, false},
	{1492.59998, -24.6, 20.3, 100, false},
	{1499.59998, -20.2, 20.3, 100, false},
	{1506.00000, -14.2, 20.3, 100, false},
	{1513.00000, -10.1, 20.3, 100, false},
	{1519.69995,  -8.5, 20.3, 100, false},
	{1525.59998, -11.4, 20.3, 100, false},
	{1530.40002, -13.6, 20.3, 100, false},
	{1523.59998, -17.1, 20.3, 100, false},
	{1513.90002, -16.1, 20.3, 100, false},
	{1519.90002, -22.5, 20.3, 100, false},
	{1514.09998, -26.8, 20.3, 100, false},
	{1507.40002, -21.2, 20.3, 100, false},
	{1501.19995, -25.9, 20.0, 100, false},
	{1505.80005, -31.0, 19.5, 100, false},
	{1499.09998, -34.8, 19.5, 100, false},
	{1494.09998, -29.0, 19.5, 100, false},
	{1486.69995, -35.8, 19.5, 100, false},
	{1492.00000, -41.7, 19.5, 100, false},
	{1478.50000, -42.7, 19.5, 100, false},
	{1474.30005, -53.1, 19.5, 100, false},
	{1485.40002, -46.8, 19.5, 100, false},
	{1480.40002, -49.6, 19.5, 100, false},
	{1467.09998, -55.1, 19.5, 100, false},
	{1458.40002, -56.9, 19.5, 100, false},
	{1461.09998, -66.3, 19.5, 100, false},
	{1469.80005, -63.4, 19.5, 100, false},
	{1479.00000, -58.8, 19.5, 100, false},
	{1488.90002, -55.5, 19.5, 100, false},
	{1496.59998, -49.4, 19.5, 100, false},
	{1505.90002, -44.1, 19.5, 100, false},
	{1513.30005, -37.9, 19.5, 100, false},
	{1520.90002, -31.6, 19.5, 100, false},
	{1528.09998, -27.5, 19.5, 100, false},
	{1535.50000, -23.3, 19.5, 100, false},
	{1537.90002, -32.0, 19.5, 100, false},
	{1530.59998, -36.4, 19.3, 100, false},
	{1524.80005, -40.4, 19.3, 100, false},
	{1517.80005, -45.2, 18.8, 100, false},
	{1511.40002, -49.6, 18.8, 100, false},
	{1504.40002, -55.7, 18.8, 100, false},
	{1497.59998, -60.4, 18.8, 100, false},
	{1490.00000, -65.7, 18.8, 100, false},
	{1479.80005, -68.2, 18.5, 100, false},
	{1471.09998, -71.5, 17.5, 100, false},
	{1464.09998, -76.3, 17.5, 100, false},
	{1468.69995, -82.9, 17.5, 100, false},
	{1475.50000, -78.2, 17.5, 100, false},
	{1483.59998, -75.0, 17.5, 100, false},
	{1493.19995, -70.5, 17.5, 100, false},
	{1500.80005, -65.2, 17.5, 100, false},
	{1511.09998, -61.1, 17.5, 100, false},
	{1518.69995, -57.1, 17.5, 100, false},
	{1527.80005, -52.6, 17.5, 100, false},
	{1534.80005, -47.8, 17.5, 100, false},
	{1541.40002, -43.2, 17.5, 100, false},
	{1543.09998, -54.3, 17.5, 100, false},
	{1541.50000, -65.9, 17.5, 100, false},
	{1538.00000, -76.6, 17.5, 100, false},
	{1532.90002, -86.7, 17.5, 100, false},
	{1523.50000, -93.3, 17.5, 100, false},
	{1512.40002, -99.3, 17.5, 100, false},
	{1502.80005, -105.2, 17.5, 100, false},
	{1491.69995, -109.0, 17.5, 100, false},
	{1482.69995, -107.1, 17.5, 100, false},
	{1478.80005, -98.9, 17.5, 100, false},
	{1476.00000, -89.5, 17.5, 100, false},
	{1485.40002, -91.4, 17.5, 100, false},
	{1491.59998, -99.6, 17.5, 100, false},
	{1501.09998, -95.0, 17.5, 100, false},
	{1496.00000, -86.7, 17.5, 100, false},
	{1485.90002, -81.7, 17.5, 100, false},
	{1495.90002, -77.0, 17.5, 100, false},
	{1503.09998, -84.9, 17.5, 100, false},
	{1509.19995, -91.4, 17.5, 100, false},
	{1519.40002, -85.1, 17.5, 100, false},
	{1511.59998, -77.6, 17.5, 100, false},
	{1504.09998, -71.6, 17.5, 100, false},
	{1515.69995, -69.5, 17.5, 100, false},
	{1524.19995, -78.1, 17.5, 100, false},
	{1525.30005, -68.0, 17.5, 100, false},
	{1532.30005, -69.0, 17.5, 100, false},
	{1534.80005, -58.7, 17.5, 100, false},
	{1525.30005, -60.4, 17.5, 100, false}
	/*{2366.67, -100.67, 25.71, 100, false},
	{2377.71, -112.47, 26.17, 100, false},
	{2383.95, -98.36, 25.31, 100, false},
	{2364.57, -89.09, 25.98, 100, false},
	{2381.37, -88.54, 25.49, 100, false},
	{2393.88, -104.43, 25.63, 100, false},
	{2397.47, -87.70, 25.63, 100, false},
	{2356.77, -106.71, 25.73, 100, false}*/
};

new FaObjectek[MAX_FA];

new FrakcioSzin[MAX_FRAKCIO] = 
{
	NINCS,				//LSPD				1
	NINCS,				//Tûzoltóság		2
	NINCS,				//Mentõszolgálat	3
	COLOR_GREEN,		//GSF				4
	NINCS,				//Önkormányzat		5
	NINCS,				//Katona			6
	0xFF4500C8,			//vagos - sárga		7
	TEAM_BALLAS_COLOR,	//ballas			8
	0x8B4513C8,			//erebos -barna 	9
	NINCS,				//szerelõ			10
	0x33CCFFC8,			//surenos kék		11
	NINCS,				//riporter			12
	0xFF0000C8,			//LCN piros			13
	0xD900D3C8,			//yakuza - fekete	14
	NINCS,				//ATF				15
	0x00FFFFC8,			//Dublin Crew, aqua	16
	NINCS,
	NINCS,
	0xFF830000,
	0xFF6347C8
};

new tInfo[MAX_TERULET][terInfo];
new dInfo[MAX_DROP][dropObject];
new PlayerText:Info[MAX_PLAYERS][8];
new PlayerText:LoginDraw[MAX_PLAYERS][8];
new PlayerText:CharacterDraw[MAX_PLAYERS][7];
//new PlayerText:Textdraw4[MAX_PLAYERS];   kivéve jelenleg
new PlayerText:JarmuInfo[MAX_PLAYERS][7];
new PlayerText:Zero[MAX_PLAYERS];


new PlayerText:SzamJegy[MAX_PLAYERS][5];
new PlayerText:Hatter[MAX_PLAYERS][3];
new PlayerText:Elerte[MAX_PLAYERS][5];

new aWeaponModel[200] = {
   1575,  331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325, 326, 342, 343, 344, -1,  -1 , -1 ,
   346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
   368, 369, 1575
};

new aWeaponSlotok[48] = {
	0, // 0
	0, // 1
	1, // 2
	1, // 3
	1, // 4
	1, // 5
	1, // 6
	1, // 7
	1, // 8
	1, // 9
	10, // 10
	10, // 11
	10, // 12
	10, // 13
	10, // 14
	10, // 15
	8, // 16
	8, // 17
	8, // 18
	0, // 19
	0, // 20
	0, // 21
	2, // 22
	2, // 23
	2, // 24
	3, // 25
	3, // 26
	3, // 27
	4, // 28
	4, // 29
	5, // 30
	5, // 31
	4, // 32
	6, // 33
	6, // 34
	7, // 35
	7, // 36
	7, // 37
	7, // 38
	8, // 39
	12, // 40
	9, // 41
	9, // 42
	9, // 43
	11, // 44
	11, // 45
	11, // 46
	0 // 47 ???
};

new aWeaponNames[][32] = {
	{"Ököl"}, // 0
	{"Boxer"}, // 1
	{"Golf"}, // 2
	{"Stick"}, // 3
	{"Kés"}, // 4
	{"Baseball"}, // 5
	{"Shovel"}, // 6
	{"Pool"}, // 7
	{"Katana"}, // 8
	{"Láncfûrész"}, // 9
	{"PurpleDildo"}, // 10
	{"BigWhiteVibrator"}, // 11
	{"MediumWhiteVibrator"}, // 12
	{"SmallWhiteVibrator"}, // 13
	{"Virág"}, // 14
	{"Cane"}, // 15
	{"Gránát"}, // 16
	{"Teargas"}, // 17
	{"Molotov"}, // 18
	{" "}, // 19
	{" "}, // 20
	{" "}, // 21
	{"Colt45"}, // 22
	{"SilencedColt45"}, // 23
	{"Deagle"}, // 24
	{"Shotgun"}, // 25
	{"Sawnoff"}, // 26
	{"Combat"}, // 27
	{"Uzi"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4"}, // 31
	{"Tec9"}, // 32
	{"Rifle"}, // 33
	{"Sniper"}, // 34
	{"Rocket"}, // 35
	{"HRocket"}, // 36
	{"Flamethrower"}, // 37
	{"Minigun"}, // 38
	{"Satchel"}, // 39
	{"Detonator"}, // 40
	{"Spray"}, // 41
	{"Fire"}, // 42
	{"Camera"}, // 43
	{"NightVision"}, // 44
	{"InfraredVision"}, // 45
	{"Parachute"}, // 46
	{"FakePistol"} // 47
};

new Float:VehiclePos[MAX_VEHICLES][3];
new Szamok[MAX_PLAYERS][6];
new KapuID[MAX_PLAYERS];
new AutomataID[MAX_PLAYERS];
new SzerkesztesAllas[MAX_PLAYERS];
new Kapu[MAX_KAPU][kapuInfo];
new FUpdates[ MAX_FRAKCIO ][ fk_Update ];
new FInfo[ MAX_FRAKCIO ][ fkInfo ];
new sql_ID;
new HullaInfo[MAX_HULLA][hullaInfo];
new TPInfo[MAX_TELEPORT][TpEnum];
new uzenet[256 + 1];
new PlayerInfo[MAX_PLAYERS][playerInfo];
new vUpdates[MAX_VEHICLES][vehUpdate];
new vInfo[MAX_VEHICLES][vehicleInfo];
new vInfoID[MAX_VEHICLES];
new ServerInfo[1][serverInfo];
new HazInfo[MAX_HOUSE][houseInfo];
new BenzinkutInfo[MAX_BENZINKUT][benzinkutInfo];
new noclipdata[MAX_PLAYERS][noclipenum];

//ProgressBar-ok
new PlayerBar:VizeletBar[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...};
new PlayerBar:EhsegBar[MAX_PLAYERS] = {INVALID_PLAYER_BAR_ID, ...};

#define TAMOGATAS_BRONZ		0
#define TAMOGATAS_EZUST		1
#define TAMOGATAS_ARANY		2
#define TAMOGATAS_GYEMANT	3

new TamogatasInfo[4][] =
{
	//támogatás neve,		PP,			plusz fegyver,	hét (mpercben)
	{TAMOGATAS_BRONZ,		400,		0,			1 * 604800},
	{TAMOGATAS_EZUST,		800,		0,			2 * 604800},
	{TAMOGATAS_ARANY,		1600,		5,			4 * 604800},
	{TAMOGATAS_GYEMANT,		4000,		10,			6 * 604800}
};

// MINDEN ESETBEN 10 skinnek kell lennie!
new FrakcioSkinek[MAX_FRAKCIO][11] =
{
	{FRAKCIO_LSPD,                  280,267,266,265,164,165,285,282,283,288},//SCPD
	{FRAKCIO_LSFD,					277,277,277,278,278,278,279,279,279,279},//Tûzoltóság
	{FRAKCIO_LSMD,					274,274,274,274,275,275,276,276,70,70},//Mentõszolgálat
	{FRAKCIO_GSF,					105,105,107,107,106,106,269,269,270,271},//GSF - régi Southside Locotes X3
	{FRAKCIO_KORMANY,				17,163,164,165,166,287,255,61,187,147}, //Önkormányzat
	{FRAKCIO_KATONA,				105,105,106,106,106,107,107,269,271,270},//Special Force
	{FRAKCIO_IMPERIALG,				30,30,108,108,47,47,109,109,110,292},//Vatos Locos
	{FRAKCIO_BALLAS,				103,103,102,102,104,104,296,296,293,293},//W B F
	{FRAKCIO_BRATVA,				72,112,111,258,272,113,147,187,299,3},//Erebos - üres
	{FRAKCIO_SZERELO,				8,268,42,50,42,8,268,42,50,42},//Szerelok
	{FRAKCIO_IMPERIAL,				1,1,1,1,1,1,1,1,1,1},//Imperial Gangsters - nincs
	{FRAKCIO_RIPORTER,				1,1,1,1,1,1,1,1,1,1},//Riporter
	{FRAKCIO_LCN, 					259,223,46,124,258,119,258,125,126,299},//La Cosa Nostra
	{FRAKCIO_YAKUZA, 				186,117,118,122,208,294,294,123,120},//Yakuza
	{FRAKCIO_FBI, 					165,166,163,164,228,147,286,141,1,1},
	{FRAKCIO_DUBLIN,				1,1,1,1,1,1,1,1,1,1},
	{FRAKCIO_CRIMINALS,				1,1,1,1,1,1,1,1,1,1},
	{FRAKCIO_IRA,					1,1,1,1,1,1,1,1,1,1},
	{FRAKCIO_STOCKWELL,				1,1,1,1,1,1,1,1,1,1},
	{NINCS,							1,1,1,1,1,1,1,1,1,1}
};

new FerfiSkinek[] =
{
	1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,
	32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,57,58,59,60,61,62,66,
	67,68,70,72,73,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,
	100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,
	120,121,122,123,124,125,126,128,131,132,133,134,135,136,137,138,139,140,141,142,
	143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,
	168,170,171,176,177,178,179,180,181,182,183,184,185,186,187,188,189,200,202,203,
	204,206,208,209,210,212,213,217,220,221,222,223,227,228,229,230,234,235,236,237,
	238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,
	258,259,260,261,262,263,268,269,270,271,274,273,274,289,290,291,292,
	293,294,295,296,297,298,299
};

new NoiSkinek[] =
{
    9,10,11,12,13,31,38,39,40,41,53,54,55,56,63,64,65,69,75,76,77,85,87,88,89,90,91,92,93,129,
    130,131,138,139,140,141,145,148,150,151,152,157,169,172,178,190,191,192,193,194,195,196,197,
    198,199,201,205,207,211,214,215,216,218,219,224,225,226,231,232,233,237,238,243,244,245,246,
    251,256,257,263,298
};

new BelsoInterior[20][BelsoInteriorAdatok] =
{
	{2259.8435,		-1136.2699,		1050.6328,		254.2604,       10},
	{2233.4900,		-1114.4435,		1050.8828,      357.3481,       5},
	{2196.3943,		-1204.1359,     1049.0234,      78.2122,        6},
	{2318.1616,		-1026.3762,     1050.2109,      358.3114,       9},
	{421.8333,		2536.9814,      10.0000,		92.9158,        10},
	{234.6087,		1187.8195,      1080.2578,      349.4844,       3},
	{225.5707,		1240.0643,      1082.1406,      96.2852,        2},
	{223.2357,		1287.0824,      1082.1406,      359.868,        1},
	{226.7545,		1114.4180,      1080.9952,      267.4440,		5},
	{2269.9636,		-1210.3275,     1047.5625,      89.8057,        10},
	{2496.2087,		-1692.3149,     1014.7422,      181.4683,       3},
	{1299.1381,		-796.1603,      1084.0078,      0.0000,			5},
	{318.8655,		1115.1758,      1083.8828,      2.0485,         5},
	{2324.3159,		-1148.7551,     1050.7101,      2.1677,         12},
	{2365.0630,		-1135.2068,     1050.8750,      357.6382,       8},
	{2283.0852,		-1139.4916,     1050.8984,      359.7849,       11},
	{736.103, 		1671.874, 		501.085,        359.045,        0},
	{44.121, 		15.393, 		999.980,		180.176,        0},
	{5613.233, 		-487.713, 		506.968,        358.969,        0},
	{2807.771, 		-1174.800, 		1025.570,       0.0000,         8}
};
stock KomponensAra(id)
{
	switch(id)
	{
		case 1000: return 250000;
		case 1001: return 200000;
		case 1002: return 150000;
		case 1003: return 100000;
		case 1004: return 250000;
		case 1005: return 200000;
		case 1006: return 150000;
		case 1007: return 100000;
		case 1008: return 500000;
		case 1009: return 200000;
		case 1010: return 1000000;
		case 1011: return 500000;
		case 1012: return 500000;
		case 1013: return 250000;
		case 1014: return 250000;
		case 1015: return 250000;
		case 1016: return 250000;
		case 1017: return 300000;
		case 1018: return 200000;
		case 1019: return 250000;
		case 1020: return 300000;
		case 1021: return 350000;
		case 1022: return 400000;
		case 1023: return 450000;
		case 1024: return 200000;
		case 1025: return 100000;
		case 1026: return 150000;
		case 1027: return 150000;
		case 1028: return 200000;
		case 1029: return 200000;
		case 1030: return 250000;
		case 1031: return 250000;
		case 1032: return 200000;
		case 1033: return 250000;
		case 1034: return 300000;
		case 1035: return 300000;
		case 1036: return 300000;
		case 1037: return 300000;
		case 1038: return 500000;
		case 1039: return 400000;
		case 1040: return 400000;
		case 1041: return 400000;
		case 1042: return 400000;
		case 1043: return 300000;
		case 1044: return 350000;
		case 1045: return 300000;
		case 1046: return 400000;
		case 1047: return 500000;
		case 1048: return 500000;
		case 1049: return 300000;
		case 1050: return 300000;
		case 1051: return 300000;
		case 1052: return 400000;
		case 1053: return 500000;
		case 1054: return 400000;
		case 1055: return 500000;
		case 1056: return 300000;
		case 1057: return 300000;
		case 1058: return 300000;
		case 1059: return 500000;
		case 1060: return 350000;
		case 1061: return 500000;
		case 1062: return 400000;
		case 1063: return 400000;
		case 1064: return 300000;
		case 1065: return 300000;
		case 1066: return 300000;
		case 1067: return 500000;
		case 1068: return 500000;
		case 1069: return 300000;
		case 1070: return 300000;
		case 1071: return 300000;
		case 1072: return 300000;
		case 1073: return 200000;
		case 1074: return 200000;
		case 1075: return 200000;
		case 1076: return 200000;
		case 1077: return 200000;
		case 1078: return 200000;
		case 1079: return 200000;
		case 1080: return 200000;
		case 1081: return 200000;
		case 1082: return 200000;
		case 1083: return 200000;
		case 1084: return 200000;
		case 1085: return 200000;
		case 1086: return 250000;
		case 1087: return 1000000;
		case 1088: return 500000;
		case 1089: return 300000;
		case 1090: return 400000;
		case 1091: return 500000;
		case 1092: return 300000;
		case 1093: return 200000;
		case 1094: return 200000;
		case 1095: return 200000;
		case 1096: return 300000;
		case 1097: return 300000;
		case 1098: return 300000;
		case 1099: return 400000;
		case 1100: return 400000;
		case 1101: return 300000;
		case 1102: return 300000;
		case 1103: return 500000;
		case 1104: return 350000;
		case 1105: return 350000;
		case 1106: return 300000;
		case 1107: return 300000;
		case 1108: return 300000;
		case 1109: return 400000;
		case 1110: return 400000;
		case 1111: return 200000;
		case 1112: return 200000;
		case 1113: return 300000;
		case 1114: return 300000;
		case 1115: return 300000;
		case 1116: return 300000;
		case 1117: return 400000;
		case 1118: return 400000;
		case 1119: return 400000;
		case 1120: return 400000;
		case 1121: return 400000;
		case 1122: return 400000;
		case 1123: return 400000;
		case 1124: return 400000;
		case 1125: return 400000;
		case 1126: return 300000;
		case 1127: return 350000;
		case 1128: return 500000;
		case 1129: return 350000;
		case 1130: return 500000;
		case 1131: return 400000;
		case 1132: return 350000;
		case 1133: return 400000;
		case 1134: return 400000;
		case 1135: return 300000;
		case 1136: return 300000;
		case 1137: return 400000;
		case 1138: return 350000;
		case 1139: return 400000;
		case 1140: return 400000;
		case 1141: return 400000;
		case 1142: return 300000;
		case 1143: return 300000;
		case 1144: return 300000;
		case 1145: return 250000;
		case 1146: return 250000;
		case 1147: return 350000;
		case 1148: return 350000;
		case 1149: return 350000;
		case 1150: return 350000;
		case 1151: return 350000;
		case 1152: return 350000;
		case 1153: return 350000;
		case 1154: return 350000;
		case 1155: return 350000;
		case 1156: return 350000;
		case 1157: return 350000;
		case 1158: return 400000;
		case 1159: return 450000;
		case 1160: return 450000;
		case 1161: return 400000;
		case 1162: return 400000;
		case 1163: return 350000;
		case 1164: return 400000;
		case 1165: return 500000;
		case 1166: return 400000;
		case 1167: return 350000;
		case 1168: return 250000;
		case 1169: return 600000;
		case 1170: return 350000;
		case 1171: return 400000;
		case 1172: return 350000;
		case 1173: return 400000;
		case 1174: return 350000;
		case 1175: return 350000;
		case 1176: return 400000;
		case 1177: return 350000;
		case 1178: return 350000;
		case 1179: return 400000;
		case 1181: return 350000;
		case 1182: return 400000;
		case 1183: return 400000;
		case 1184: return 350000;
		case 1185: return 350000;
		case 1186: return 400000;
		case 1187: return 350000;
		case 1188: return 350000;
		case 1189: return 400000;
		case 1190: return 350000;
		case 1191: return 400000;
		case 1192: return 350000;
		case 1193: return 400000;
		default: return 1000000;
	}
	return 1000000;
}



static ModName[][64] = {
{"Pro Hátsószárny"},{"Gyõzelmi Hátsószárny"},{"Gyorsulási Hátsószárny"},{"Alpha Hátsószárny"},{"Bajnok légbeömlõs Motorháztetõ"},
{"Különös légbeömlõs Motorház"},{"Tetõ légbeömlõ"},{"Jobb oldali küszöb"},{"5x Nitro palack"},{"2x Nitro palack"},{"10x Nitro palack"},
{"Verseny légbeömlõs Motorháztetõ"},{"Extra légbeömlõs Motorháztetõ"},{"Kör alakú ködlámpák"},{"Bajnoki hátsószárny"},{"Verseny hátsószárny"},
{"Extra hátsószárny"},{"Bal oldali küszöb"},{"Mély Kipufogó"},{"Iker Kipufogó"},{"Nagy Kipufogó"},
{"Közepes Kipufogó"},{"Kis Kipufogó"},{"Különös hátsószárny"},{"Négyzet alakú ködlámpa"},{"Offroad felni"},
{"Jobboldali alien küszöb 'Sultan'"},{"Baloldali alien küszöb 'Sultan'"},{"Alien Kipufogó 'Sultan'"},
{"X-Flow Kipufogó 'Sultan'"},{"Baloldali X-Flow küszöb 'Sultan'"},{"Jobboldali X-Flow küszöb 'Sultan'"},
{"Alien tetõ légbeömlõ 'Sultan'"},{"X-Flow tetõ légbeömlõ 'Sultan'"},{"Alien Kipufogó 'Elegy'"},{"X-Flow légbeömlõ 'Elegy'"},
{"Jobboldali alien küszöb 'Elegy'"},{"X-Flow Kipufogó 'Elegy'"},{"Alien légbeömlõ 'Elegy'"},{"Baloldali X-Flow küszöb 'Elegy'"},
{"Baloldali alien küszöb 'Elegy'"},{"Jobboldali X-Flow küszöb 'Elegy'"},{"Jobboldali króm küszöb 'Broadway'"},
{"Slamin Kipufogó 'Broadway'"},{"Chrome Kipufogó 'Broadway'"},{"X-Flow Kipufogó 'Flash'"},{"Alien Kipufogó 'Flash'"},
{"Jobboldali alien küszöb 'Flash'"},{"Jobboldali X-Flow küszöb 'Flash'"},{"Alien hátsószárny 'Flash'"},{"X-Flow Hátsószárny 'Flash'"},
{"Baloldali alien küszöb 'Flash'"},{"Baloldali X-Flow küszöb 'Flash'"},{"X-Flow tetõ légbeömlõ 'Flash'"},{"Alien légbeömlõ 'Flash'"},
{"Alien tetõ 'Stratum'"},{"Jobboldali alien küszöb 'Stratum'"},{"Jobboldali X-Flow küszöb 'Stratum'"},{"Alien Hátsószárny 'Stratum'"},
{"X-Flow Kipufogó 'Stratum'"},{"X-Flow hátsószárny 'Stratum'"},{"X-Flow Roof 'Stratum'"},{"Baloldali Alien küszöb 'Stratum'"},
{"Baloldali X-Flow küszöb 'Stratum'"},{"Alien Kipufogó 'Stratum'"},{"Alien Kipufogó 'Jester'"},{"X-Flow Kipufogó 'Jester'"},
{"Alien Roof 'Jester'"},{"X-Flow Roof 'Jester'"},{"Jobboldali Alien küszöb 'Jester'"},{"Jobboldali X-Flow küszöb 'Jester'"},
{"Baloldali Alien küszöb 'Jester'"},{"Baloldali X-Flow küszöb 'Jester'"},{"Shadow felni"},{"Mega felni"},{"felnishine felni"},
{"Wires felni"},{"Classic felni"},{"Twist felni"},{"Cutter felni"},{"Switch felni"},{"Grove felni"},{"Import felni"},
{"Dollar felni"},{"Trance felni"},{"Atomic felni"},{"Stereo Sound"},{"Hidraulika"},{"Alien Roof 'Uranus'"},{"X-Flow Kipufogó 'Uranus'"},
{"Jobboldali Alien küszöb 'Uranus'"},{"X-Flow Roof 'Uranus'"},{"Alien Kipufogó 'Uranus'"},{"Jobboldali X-Flow küszöb 'Uranus'"},
{"Baloldali Alien küszöb 'Uranus'"},{"Jobboldali X-Flow küszöb 'Uranus'"},{"Ahab felni"},{"Virtual felni"},{"Access felni"},
{"Baloldali Chrome küszöb 'Broadway'"},{"Chrome Grill Bullbar 'Remington'"},{"Baloldali 'Chrome Flames' küszöb 'Remington'"},
{"Baloldali 'Chrome Strip' küszöb 'Savanna'"},{"Corvetible Roof 'Blade'"},{"Chrome Kipufogó 'Blade'"},{"Slamin Kipufogó 'Blade'"},
{"Jobboldali 'Chrome Arches' küszöb 'Remington'"},{"Baloldali 'Chrome Strip' küszöb 'Blade'"},{"Jobboldali 'Chrome Strip' küszöb 'Blade'"},
{"Chrome Rear Bullbars 'Slamvan'"},{"Slamin Rear Bullbars 'Slamvan'"},{"Little Front Sign? 'Slamvan'"},{"Little Front Sign? 'Slamvan'"},
{"Chrome Kipufogó 'Slamvan'"},{"Slamin Kipufogó 'Slamvan'"},{"Chrome Front Bullbars 'Slamvan'"},{"Slamin Front Bullbars 'Slamvan'"},
{"Chrome Elsõ lökhárító 'Slamvan'"},{"Jobboldali 'Chrome Tfelni' küszöb 'Slamvan'"},{"Jobboldali 'Wheelcovers' küszöb 'Slamvan'"},
{"Baloldali 'Chrome Trim' küszöb 'Slamvan'"},{"Baloldali 'Wheelcovers' küszöb 'Slamvan'"},{"Jobboldali 'Chrome Flames' küszöb 'Remington'"},
{"Bullbar Chrome galytörõ 'Remington'"},{"Baloldali 'Chrome Arches' küszöb 'Remington'"},{"Bullbar Chrome Lights 'Remongton'"},
{"Chrome Kipufogó 'Remington'"},{"Slamin Kipufogó 'Remington'"},{"Vinyl keménytetõ 'Blade'"},{"Chrome Kipufogó 'Savanna'"},
{"Keménytetõ Roof 'Savanna'"},{"Softtop Roof 'Savanna'"},{"Slamin Kipufogó 'Savanna'"},{"Jobboldali 'Chrome Strip' küszöb 'Savanna'"},
{"Jobboldali 'Chrome Strip' küszöb 'Tornado'"},{"Slamin Kipufogó 'Tornado'"},{"Chrome Kipufogó 'Tornado'"},{"Baloldali 'Chrome Strip' küszöb 'Tornado'"},
{"Alien hátsószárny 'Sultan'"},{"X-Flow hátsószárny 'Sultan'"},{"X-Flow Hátsó lökhárító 'Sultan'"},{"Alien Hátsó lökhárító 'Sultan'"},
{"Baloldali Oval díszítõelem"},{"Jobboldali Oval díszítõelem"},{"Baloldali Square díszítõelem"},{"Jobboldali Square díszítõelem"},{"X-Flow hátsószárny 'Elegy'"},
{"Alien hátsószárny 'Elegy'"},{"X-Flow Hátsó lökhárító 'Elegy'"},{"Alien Hátsó lökhárító 'Elegy'"},{"Alien Hátsó lökhárító 'Flash'"},
{"X-Flow Hátsó lökhárító 'Flash'"},{"X-Flow Elsõ lökhárító 'Flash'"},{"Alien Elsõ lökhárító 'Flash'"},{"Alien Hátsó lökhárító 'Stratum'"},
{"Alien Elsõ lökhárító 'Stratum'"},{"X-Flow Hátsó lökhárító 'Stratum'"},{"X-Flow Elsõ lökhárító 'Stratum'"},{"X-Flow hátsószárny 'Jester'"},
{"Alien Hátsó lökhárító 'Jester'"},{"Alien Elsõ lökhárító 'Jester'"},{"X-Flow Hátsó lökhárító 'Jester'"},{"Alien hátsószárny 'Jester'"},
{"X-Flow hátsószárny 'Uranus'"},{"Alien hátsószárny 'Uranus'"},{"X-Flow Elsõ lökhárító 'Uranus'"},{"Alien Elsõ lökhárító 'Uranus'"},
{"X-Flow Hátsó lökhárító 'Uranus'"},{"Alien Hátsó lökhárító 'Uranus'"},{"Alien Elsõ lökhárító 'Sultan'"},{"X-Flow Elsõ lökhárító 'Sultan'"},
{"Alien Elsõ lökhárító 'Elegy'"},{"X-Flow Elsõ lökhárító 'Elegy'"},{"X-Flow Elsõ lökhárító 'Jester'"},{"Chrome Elsõ lökhárító 'Broadway'"},
{"Slamin Elsõ lökhárító 'Broadway'"},{"Chrome Hátsó lökhárító 'Broadway'"},{"Slamin Hátsó lökhárító 'Broadway'"},{"Slamin Hátsó lökhárító 'Remington'"},
{"Chrome Elsõ lökhárító 'Remington'"},{"Chrome Hátsó lökhárító 'Remington'"},{"Slamin Elsõ lökhárító 'Blade'"},{"Chrome Elsõ lökhárító 'Blade'"},
{"Slamin Hátsó lökhárító 'Blade'"},{"Chrome Hátsó lökhárító 'Blade'"},{"Slamin Elsõ lökhárító 'Remington'"},{"Slamin Hátsó lökhárító 'Savanna'"},
{"Chrome Hátsó lökhárító 'Savanna'"},{"Slamin Elsõ lökhárító 'Savanna'"},{"Chrome Elsõ lökhárító 'Savanna'"},{"Slamin Elsõ lökhárító 'Tornado'"},
{"Chrome Elsõ lökhárító 'Tornado'"},{"Chrome Hátsó lökhárító 'Tornado'"},{"Slamin Hátsó lökhárító 'Tornado'"}};

stock GetComponentName(componentid) return ModName[componentid-1000];


new MAX_Benzin[212] = {
	60,60,60,300,60,60,60,60,60,
	60,60,60,60,60,100,60,120,60,60,60,60,60,60,60,
	60,60,60,100,100,60,60,120,120,150,60,60,60,150,
	60,60,60,60,60,80,200,60,60,60,30,60,60,60,60,60,
	60,100,100,30,60,60,60,60,30,60,60,60,60,60,40,
	60,80,30,60,60,60,60,60,60,60,60,60,60,60,60,60,
	60,60,60,60,80,80,60,60,60,60,60,60,60,60,60,60,60,
	60,60,60,60,60,60,100,60,60,60,60,60,300,300,60,60,
	60,60,60,40,40,40,60,60,60,60,80,60,60,40,60,60,
	60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,
	60,60,60,60,60,60,200,200,60,60,60,60,60,60,60,
	60,60,60,60,60,60,60,15,100,40,60,60,60,100,60,
	60,60,80,60,60,60,60,60,80,60,60,60,60,60,60,60,
	60,60,60,80,60,150,60,60,60,60,60,60,60,100,60,60
};

new Uzemanyagok[212] = { //0 = Semmi, 1 = Benzin, 2 = Diesel.
	2, //Landstalker (400)
	1, //Bravura (401)
	1, //Buffalo (402)
	2, //Linerunner (403)
	2, //Perenail (404)
	1, //Sentinel (405)
	2, //Dumper (406)
	2, //Firetruck (407)
	2, //Trashmaster (408)
	1, //Stretch (409)
	1, //Manana (410)
	1, //Infernus (411)
	1, //Voodoo (412)
	2, //Pony (413)
	2, //Mule (414)
	1, //Cheetah (415)
	2, //Ambulance (416)
	0, //Leviathan (417)
	2, //Moonbeam (418)
	2, //Esperanto (419)
	1, //Taxi (420)
	1, //Washington (421)
	2, //Bobcat (422)
	2, //Mr Whoopee (423)
	1, //BF Injection (424)
	0, //Hunter (425)
	1, //Premier (426)
	2, //Enforcer (427)
	2, //Securicar (428)
	1, //Banshee (429)
	0, //Predator (430)
	2, //Bus (431)
	2, //Rhino (432)
	2, //Barracks (433)
	1, //Hotknife (434)
	0, //Artic trailer 1 (435)
	1, //Previon (436)
	2, //Coach (437)
	1, //Cabbie (438)
	1, //Stallion (439)
	2, //Rumpo (440)
	0, //RC Bandit (441)
	1, //Romero (442)
	2, //Packer (443)
	2, //Monster (444)
	1, //Admiral (445)
	0, //Squalo (446)
	0, //Seasparrow (447)
	1, //Pizza boy (448)
	0, //Tram (449)
	0, //Artic trailer 2 (450)
	1, //Turismo (451)
	0, //Speeder (452)
	0, //Reefer (453)
	0, //Tropic (454)
	2, //Flatbed (455)
	2, //Yankee (456)
	1, //Caddy (457)
	1, //Solair (458)
	2, //Top fun (459)
	0, //Skimmer (460)
	1, //PCJ 600 (461)
	1, //Faggio (462)
	1, //Freeway (463)
	0, //RC Baron (464)
	0, //RC Raider (465)
	1, //Glendale (466)
	1, //Oceanic (467)
	1, //Sanchez (468)
	0, //Sparrow (469)
	2, //Patriot (470)
	1, //Quad (471)
	0, //Coastguard (472)
	0, //Dinghy (473)
	1, //Hermes (474)
	1, //Sabre (475)
	0, //Rustler (476)
	1, //ZR 350 (477)
	1, //Walton (478)
	1, //Regina (479)
	1, //Comet (480)
	0, //BMX (481)
	1, //Burrito (482)
	2, //Camper (483)
	0, //Marquis (484)
	1, //Baggage (485)
	2, //Dozer (486)
	0, //Maverick (487)
	0, //VCN Maverick (488)
	2, //Rancher (489)
	2, //FBI Rancher (490)
	1, //Virgo (491)
	1, //Greenwood (492)
	0, //Jetmax (493)
	1, //Hotring (494)
	2, //Sandking (495)
	1, //Blista Compact (496)
	0, //Police Maverick (497)
	2, //Boxville (498)
	2, //Benson (499)
	2, //Mesa (500)
	0, //RC Goblin (501)
	1, //Hotring A (502)
	1, //Hotring B (503)
	1, //Blood ring banger (504)
	2, //Rancher(lure) (505)
	1, //Super GT (506)
	1, //Elegant (507)
	2, //Journey (508)
	0, //Bike (509)
	0, //Mountain Bike (510)
	0, //Beagle (511)
	0, //Cropduster (512)
	0, //Stuntplane (513)
	2, //Petrol (514)
	2, //Roadtrain (515)
	1, //Nebula (516)
	1, //Majestic (517)
	1, //Buccaneer (518)
	0, //Shamal (519)
	0, //Hydra (520)
	1, //FCR 900 (521)
	1, //NRG 500 (522)
	1, //HPV 1000 (523)
	2, //Cement Truck (524)
	2, //Towtruck (525)
	1, //Fortune (526)
	1, //Cadrona (527)
	2, //FBI Truck (528)
	1, //Williard (529)
	1, //Fork lift (530)
	2, //Tractor (531)
	2, //Combine (532)
	1, //Feltzer (533)
	1, //Remington (534)
	1, //Slamvan (535)
	1, //Blade (536)
	0, //Freight (537)
	0, //Streak (538)
	1, //Vortex (539)
	1, //Vincent (540)
	1, //Bullet (541)
	1, //Clover (542)
	1, //Sadler (543)
	2, //Firetruck LA (544)
	1, //Hustler (545)
	1, //Intruder (546)
	1, //Primo (547)
	0, //Cargobob (548)
	1, //Tampa (549)
	1, //Sunrise (550)
	1, //Merit (551)
	2, //Utility van (552)
	0, //Nevada (553)
	2, //Yosemite (554)
	1, //Windsor (555)
	2, //Monster A (556)
	2, //Monster B (557)
	1, //Uranus (558)
	1, //Jester (559)
	1, //Sultan (560)
	1, //Stratum (561)
	1, //Elegy (562)
	0, //Raindance (563)
	0, //RC Tiger (564)
	1, //Flash (565)
	1, //Tahoma (566)
	1, //Savanna (567)
	1, //Bandito (568)
	0, //Freight flat (569)
	0, //Streak (570)
	1, //Kart (571)
	1, //Mower (572)
	2, //Duneride (573)
	1, //Sweeper (574)
	1, //Broadway (575)
	1, //Tornado (576)
	0, //AT 400 (577)
	2, //DFT 30 (578)
	2, //Huntley (579)
	1, //Stafford (580)
	1, //BF 400 (581)
	2, //News Van (582)
	1, //Tug (583)
	0, //Petrol tanker (584)
	1, //Emperor (585)
	1, //Wayfarer (586)
	1, //Euros (587)
	2, //Hotdog (588)
	1, //Club (589)
	0, //Freight box (590)
	0, //Artic trailer 3 (591)
	0, //Andromada (592)
	0, //Dodo (593)
	0, //RC Cam (594)
	0, //Launch (595)
	1, //Cop car LS (596)
	1, //Cop car SF (597)
	1, //Cop car LV (598)
	2, //Ranger (599)
	1, //Picador (600)
	2, //SWAT Tank (601)
	1, //Alpha (602)
	1, //Phoenix (603)
	2, //Glendale(damaged) (604)
	2, //Sadler(damaged) (605)
	0, //Bag box A (606)
	0, //Bag box B (607)
	0, //Stairs (608)
	2, //Boxville (609)
	0, //Farm trailer (610)
	0 //Utility van trailer (611)
};

new VehicleNames[212][] = {
{"Landstalker"},{"Bravura"},{"Buffalo"},{"Linerunner"},{"Perrenial"},{"Sentinel"},{"Dumper"},
{"Firetruck"},{"Trashmaster"},{"Stretch"},{"Manana"},{"Infernus"},{"Voodoo"},{"Pony"},{"Mule"},
{"Cheetah"},{"Ambulance"},{"Leviathan"},{"Moonbeam"},{"Esperanto"},{"Taxi"},{"Washington"},
{"Bobcat"},{"Mr Whoopee"},{"BF Injection"},{"Hunter"},{"Premier"},{"Enforcer"},{"Securicar"},
{"Banshee"},{"Predator"},{"Bus"},{"Rhino"},{"Barracks"},{"Hotknife"},{"Trailer 1"},{"Previon"},
{"Coach"},{"Cabbie"},{"Stallion"},{"Rumpo"},{"RC Bandit"},{"Romero"},{"Packer"},{"Monster"},
{"Admiral"},{"Squalo"},{"Seasparrow"},{"Pizzaboy"},{"Tram"},{"Trailer 2"},{"Turismo"},
{"Speeder"},{"Reefer"},{"Tropic"},{"Flatbed"},{"Yankee"},{"Caddy"},{"Solair"},{"Berkley's RC Van"},
{"Skimmer"},{"PCJ-600"},{"Faggio"},{"Freeway"},{"RC Baron"},{"RC Raider"},{"Glendale"},{"Oceanic"},
{"Sanchez"},{"Sparrow"},{"Patriot"},{"Quad"},{"Coastguard"},{"Dinghy"},{"Hermes"},{"Sabre"},
{"Rustler"},{"ZR-350"},{"Walton"},{"Regina"},{"Comet"},{"BMX"},{"Burrito"},{"Camper"},{"Marquis"},
{"Baggage"},{"Dozer"},{"Maverick"},{"News Chopper"},{"Rancher"},{"FBI Rancher"},{"Virgo"},{"Greenwood"},
{"Jetmax"},{"Hotring"},{"Sandking"},{"Blista Compact"},{"Police Maverick"},{"Boxville"},{"Benson"},
{"Mesa"},{"RC Goblin"},{"Hotring Racer A"},{"Hotring Racer B"},{"Bloodring Banger"},{"Rancher"},
{"Super GT"},{"Elegant"},{"Journey"},{"Bike"},{"Mountain Bike"},{"Beagle"},{"Cropdust"},{"Stunt"},
{"Tanker"}, {"Roadtrain"},{"Nebula"},{"Majestic"},{"Buccaneer"},{"Shamal"},{"Hydra"},{"FCR-900"},
{"NRG-500"},{"HPV1000"},{"Cement Truck"},{"Tow Truck"},{"Fortune"},{"Cadrona"},{"FBI Truck"},
{"Willard"},{"Forklift"},{"Tractor"},{"Combine"},{"Feltzer"},{"Remington"},{"Slamvan"},
{"Blade"},{"Freight"},{"Streak"},{"Vortex"},{"Vincent"},{"Bullet"},{"Clover"},{"Sadler"},
{"Firetruck"},{"Hustler"},{"Intruder"},{"Primo"},{"Cargobob"},{"Tampa"},{"Sunrise"},{"Merit"},
{"Utility"},{"Nevada"},{"Yosemite"},{"Windsor"},{"MonsterA"},{"MonsterB"},{"Uranus"},{"Jester"},
{"Sultan"},{"Stratum"},{"Elegy"},{"Raindance"},{"RC Tiger"},{"Flash"},{"Tahoma"},{"Savanna"},
{"Bandito"},{"Freight Flat"},{"Streak Carriage"},{"Kart"},{"Mower"},{"Duneride"},{"Sweeper"},
{"Broadway"},{"Tornado"},{"AT-400"},{"DFT-30"},{"Huntley"},{"Stafford"},{"BF-400"},{"Newsvan"},
{"Tug"},{"Trailer 3"},{"Emperor"},{"Wayfarer"},{"Euros"},{"Hotdog"},{"Club"},{"Freight Carriage"},
{"Trailer 3"},{"Andromada"},{"Dodo"},{"RC Cam"},{"Launch"},{"LSPD"},{"SFPD"},
{"LVPD"},{"Police Ranger"},{"Picador"},{"SWAT Van"},{"Alpha"},{"Phoenix"},{"Glendale"},
{"Sadler"},{"Trailer A"},{"Trailer B"},{"Trailer"},{"Boxville"},{"Farm Plow"},
{"Utility Trailer"}
};

//Ha beleírod magad az értéket false-ra true-n csak ennek a három embernek lehet!
//Hiroshi Megjegyzése: Scripter karakternek az a feladata hogy scripterkedj vele.. KIS KARI NEM ÉR.
new Scripter[5][3][MAX_PLAYER_NAME] =//Mást ne írj bele, --- Méne???
{
    {"Jim_Moriarty",5356,true},
    {"Jim_Moriarty",5356,true},
	{"Jim_Moriarty",5356,true},
	{"Jim_Moriarty",5356,true},
	{"Jim_Moriarty",5356,true}
};
new aWhiteList[1][MAX_PLAYER_NAME] =
{
	{"a"}
};

/* -------------- TextDrawok --------------------- */

new Text:flash; //Trafipax
new PlayerText:Adatok[MAX_PLAYERS];
new PlayerText:Penz[MAX_PLAYERS];
new PlayerText:AlsoFelso[MAX_PLAYERS][2];
new PlayerText:Kellek[MAX_PLAYERS][2];
new PlayerText:Gombok[MAX_PLAYERS][10];
new PlayerText:Jelzes[MAX_PLAYERS][2];
new PlayerText:KapuNev[MAX_PLAYERS];

new AjtoInfo[MAX_AJTO][ajtoAdatok];
new Timerek[10];
new PlayerTimers[MAX_PLAYERS][JatekosIdozitok];
new AutomataInfo[MAX_AUTOMATA][automataInfo];
new Float:vehicleh[MAX_VEHICLES];
//new Float:velX[MAX_PLAYERS], Float:velY[MAX_PLAYERS];
/* -------------- Változók vége --------------*/

main()
{
	getdate(DatumEv, DatumHonap, DatumNap);
	format(JelenlegiDatum, 12, "%d-%d-%d", DatumEv, DatumHonap, DatumNap);
}

/*---------------- Martin javítások, AntiCheat-ek ----------------*/

funkcio mAC_ShowPlayerDialog(playerid, dialogid, style, caption[], info[], button1[], button2[])
{
	//printf("mAC_ShowPlayerDialog(playerid: %d, dialogid: %d, style: %d, caption: %s, info: %s, button1: %s, button2: %s)", playerid, dialogid, style, caption, info, button1, button2);
	PlayerInfo[playerid][pDialogID] = dialogid;
	return ShowPlayerDialog(playerid, dialogid, style, caption, info, button1, button2); 
}

stock escape(string[])
{
	new esc_string[512];

	mysql_real_escape_string(string, esc_string, sql_ID, sizeof(esc_string));
	return esc_string;
}
stock injectCheck(const string[])
{
    if(strfind(string,"'") != -1) return true;
    if(strfind(string,"*") != -1) return true;
    if(strfind(string,"%") != -1) return true;
    if(strfind(string,"\\") != -1) return true;
    if(strfind(string,"/") != -1) return true;
    if(strfind(string,"=") != -1) return true;
    if(strfind(string,"--") != -1) return true;
    if(strfind(string,"\"") != -1) return true;
    return false;
}
#define ShowPlayerDialog mAC_ShowPlayerDialog
#define Info_Dialog(%1,%2,%3) ShowPlayerDialog(%1, DIALOG_INFO, DIALOG_STYLE_MSGBOX, %2, %3, "Rendben", "")

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	//print("OnDialogResponse");
	if(PlayerInfo[playerid][pDialogID] != dialogid)
	{
		nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: Dialog Exploit (Kick)", playerid, JatekosNev(playerid));
		AdminUzenetEx(COLOR_WHITE, 1001, string);
		Log(FILE_CHEAT, string);
		
		//if(!Admin(playerid, FOADMIN_SZINT))
			//ServerBan(playerid, 0, "[AC] Dialog Exploit", NINCS, (!Belepve(playerid) ? true : false), true, true);
		Kick(playerid);
		return false;
	}

	new db = strlen(inputtext);
	for(new i = 0; i < db; ++i)
	 	if(inputtext[i] == '%')
	  		inputtext[i] = '#';

	if(!db)
		return CallLocalFunction ("mAC_OnDialogResponse", "iiiis", playerid, dialogid, response, listitem, "\1");
 	return CallLocalFunction ("mAC_OnDialogResponse", "iiiis", playerid, dialogid, response, listitem, inputtext);
}

#if defined _ALS_OnDialogResponse
	#undef OnDialogResponse
#else
	#define _ALS_OnDialogResponse
#endif
#define OnDialogResponse mAC_OnDialogResponse
forward mAC_OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]);

/*---------------- Martin javítások, AntiCheat-ek vége ----------------*/

//Trafipax stock
stock Text3D:AttachLabelToCamera(cameraid,text[])
{
	new position,buffer[128];format(buffer,sizeof buffer,"%s",text);
	for(new i = 0;strfind(buffer,"\\n",true) != -1;i++)
	{
	    position = strfind(buffer,"\\n",true);
	    strdel(buffer,position,position +2);
	    strins(buffer,"\r\n",position,sizeof(buffer));
	}
	return Create3DTextLabel(buffer,CAMERA_SZOVEG_SZIN,SpeedCameras[cameraid][_x],SpeedCameras[cameraid][_y],SpeedCameras[cameraid][_z] +7,100,0,0);
}
stock UpdateCameraLabel(Text3D:labelid,text[])
{
	new position,buffer[128];format(buffer,sizeof buffer,"%s",text);
	for(new i = 0;strfind(buffer,"\\n",true) != -1;i++)
	{
	    position = strfind(buffer,"\\n",true);
	    strdel(buffer,position,position +2);
	    strins(buffer,"\r\n",position,sizeof(buffer));
	}
	return	Update3DTextLabelText(labelid,CAMERA_SZOVEG_SZIN,buffer);
}
stock LoadCameras()
{
	new file[64];
	for(new i = 0;i<CAMERA_LIMIT;i++)
	{
	    format(file,sizeof file,"/Config/TRAFIPAXOK/%i.cfg",i);
	    if(fexist(file))
	    {
	        INI_ParseFile(file,"LoadCam",.bExtra = true,.extra = i);
			SpeedCameras[i][_objectid] = CreateDynamicObject(18880,SpeedCameras[i][_x],SpeedCameras[i][_y],SpeedCameras[i][_z],0,0,SpeedCameras[i][_rot]);
			SpeedCameras[i][_active] = true;
			if(SpeedCameras[i][_activelabel] == true)
			{
				SpeedCameras[i][_label] = AttachLabelToCamera(i,SpeedCameras[i][_labeltxt]);
			}
			loaded_cameras++;
	    }
	}
	printf("%i Trafi Betöltve.",loaded_cameras);
}
stock RemoveCameras()
{
	for(new i = 0;i<loaded_cameras +1;i++)
	{
	    if(SpeedCameras[i][_active] == true)
	    {
			DestroyDynamicObject(SpeedCameras[i][_objectid]);
	        if(SpeedCameras[i][_activelabel] == true)
	        {
				Delete3DTextLabel(SpeedCameras[i][_label]);
	        }
	    }
	}
	return 1;
}
stock generate_id()
{
	new file[64];
	for(new i = 0;i<CAMERA_LIMIT;i++)
	{
		format(file,sizeof file,"/Config/TRAFIPAXOK/%i.cfg",i);
		if(!fexist(file)) return i;
	}
	return -1;
}
stock CreateSpeedCam(Float:x,Float:y,Float:z,Float:rot,range,limit,fine,use_mph = 0)
{
	new newid = generate_id();
	if(newid == -1)
	{
	    print("TrafipaxSystem: ERROR! Cannot create speedcam, max ammount of speedcameras has been reached!");
	    return 1;
	}
	if (newid == loaded_cameras || newid > loaded_cameras)
	{
	    loaded_cameras++;
	}
	SpeedCameras[newid][_x] = x;
	SpeedCameras[newid][_y] = y;
	SpeedCameras[newid][_z] = z;
	SpeedCameras[newid][_rot] = rot;
	SpeedCameras[newid][_range] = range;
	SpeedCameras[newid][_limit] = limit;
	SpeedCameras[newid][_fine] = fine;
	SpeedCameras[newid][_usemph] = use_mph;
	SpeedCameras[newid][_objectid] = CreateDynamicObject(18880,x,y,z,0,0,rot);
	SpeedCameras[newid][_active] = true;
	SpeedCameras[newid][_activelabel] = false;
	SpeedCameras[newid][_labeltxt] = 0;
	SpeedCameras[newid][_eddiggyujtott] = 0;
	SpeedCameras[newid][_hovamenjen] = 0;
	new file[64];format(file,sizeof file,"/Config/TRAFIPAXOK/%i.cfg",newid);
	new INI:handler = INI_Open(file);
	INI_WriteInt(handler,"_id",SpeedCameras[newid][_id]);
	INI_WriteFloat(handler,"_x",SpeedCameras[newid][_x]);
	INI_WriteFloat(handler,"_y",SpeedCameras[newid][_y]);
	INI_WriteFloat(handler,"_z",SpeedCameras[newid][_z]);
	INI_WriteFloat(handler,"_rot",SpeedCameras[newid][_rot]);
	INI_WriteInt(handler,"_range",SpeedCameras[newid][_range]);
	INI_WriteInt(handler,"_limit",SpeedCameras[newid][_limit]);
	INI_WriteInt(handler,"_fine",SpeedCameras[newid][_fine]);
	INI_WriteInt(handler,"_usemph",SpeedCameras[newid][_usemph]);
	INI_WriteBool(handler,"_activelabel",SpeedCameras[newid][_activelabel]);
	INI_WriteString(handler,"_labeltxt",SpeedCameras[newid][_labeltxt]);
	INI_WriteInt(handler,"_eddiggyujtott",SpeedCameras[newid][_eddiggyujtott]);
	INI_WriteInt(handler,"_hovamenjen",SpeedCameras[newid][_hovamenjen]);
	INI_Close(handler);
	return newid;
}
stock SaveCamera(cameraid)
{
	new file[64];format(file,sizeof file,"/Config/TRAFIPAXOK/%i.cfg",cameraid);
	new INI:handler = INI_Open(file);
	INI_WriteInt(handler,"_id",SpeedCameras[cameraid][_id]);
	INI_WriteFloat(handler,"_x",SpeedCameras[cameraid][_x]);
	INI_WriteFloat(handler,"_y",SpeedCameras[cameraid][_y]);
	INI_WriteFloat(handler,"_z",SpeedCameras[cameraid][_z]);
	INI_WriteFloat(handler,"_rot",SpeedCameras[cameraid][_rot]);
	INI_WriteInt(handler,"_range",SpeedCameras[cameraid][_range]);
	INI_WriteInt(handler,"_limit",SpeedCameras[cameraid][_limit]);
	INI_WriteInt(handler,"_fine",SpeedCameras[cameraid][_fine]);
	INI_WriteInt(handler,"_usemph",SpeedCameras[cameraid][_usemph]);
	INI_WriteBool(handler,"_activelabel",SpeedCameras[cameraid][_activelabel]);
	INI_WriteString(handler,"_labeltxt",SpeedCameras[cameraid][_labeltxt]);
	INI_WriteInt(handler,"_eddiggyujtott",SpeedCameras[cameraid][_eddiggyujtott]);
	INI_WriteInt(handler,"_hovamenjen",SpeedCameras[cameraid][_hovamenjen]);
	INI_Close(handler);
}
stock DestroySpeedCam(cameraid)
{
    SpeedCameras[cameraid][_active] = false;
	DestroyDynamicObject(SpeedCameras[cameraid][_objectid]);
	if(SpeedCameras[cameraid][_activelabel] == true)
	{
		Delete3DTextLabel(SpeedCameras[cameraid][_label]);
	}
	SpeedCameras[cameraid][_activelabel] = false;
	SpeedCameras[cameraid][_labeltxt] = 0;
    new file[64];format(file,sizeof file,"/Config/TRAFIPAXOK/%i.cfg",cameraid);
    if(fexist(file)){fremove(file);}
	return 1;
}
stock SetSpeedCamRange(cameraid,limit)
{
	SpeedCameras[cameraid][_limit] = limit;
	return 1;
}
stock SetSpeedCamFine(cameraid,fine)
{
    SpeedCameras[cameraid][_fine] = fine;
	return 1;
}
stock Float:GetDistanceBetweenPointss(Float:x,Float:y,Float:tx,Float:ty)
{
  new Float:temp1, Float:temp2;
  temp1 = x-tx;temp2 = y-ty;
  return floatsqroot(temp1*temp1+temp2*temp2);
}

stock GetClosestCamera(playerid)
{
	new Float:distance = 10,Float:temp,Float:x,Float:y,Float:z,current = -1;GetPlayerPos(playerid,x,y,z);
	for(new i = 0;i<loaded_cameras +1;i++)
	{
	    if(SpeedCameras[i][_active] == true)
	    {
			temp = GetDistanceBetweenPointss(x,y,SpeedCameras[i][_x],SpeedCameras[i][_y]);
			if(temp < distance)
			{
				distance = temp;
				current = i;
			}
		}
	}
	return current;
}
//Trafipax stock vége

stock SKVkocsi(kocsi)
{
	if(vInfo[kocsi][vMunka] == 102) return true;
	else return false;
}

stock PremiumCsomag(id)
{
	new visszateres = -1, i = -1;
	
	for(;++i < sizeof(TamogatasInfo);)
	{
		if(TamogatasInfo[i][1] == id)
		{
			visszateres = i;
			break;
		}
	}
	
	return visszateres;
}

stock ConnectNPCEx(name[])
{
	new slot = -1;
	for (new i = 0; i < MAX_PLAYERS; i++) {
		if (!IsPlayerConnected(i)) {
			slot = i;
			break;
		}
	}
	ConnectNPC(name, "npcspawn");
	
	return slot;
}

stock SpeedBoost(playerid)
{
	BoostTicTimer[playerid] = GetTickCount();
	new Mdebug[32];
	new Keys,ud,lr;
	new carid = GetPlayerVehicleID(playerid);
	new sebesseg = GetVehicleSpeed( carid ); 
	new motor = GetJarmu(carid, KOCSI_MOTOR);
	new model = GetVehicleModel(carid);
	GetPlayerKeys(playerid,Keys,ud,lr);
	Mdebug = "off";
	
	if(Keys == KEY_LOOK_LEFT && IsScripter(playerid))
	{
		if(debugmode)
		{
			SCM(playerid,COL_MKEK,"Debugmode = false");
			debugmode = false;
		}
		else
		{
			SCM(playerid,COL_MKEK,"Debugmode = true");
			debugmode = true;
		}
	}
	if(Keys == KEY_SPRINT)
	{
		if(motor != 0)
		{
			switch(model)
			{
				
				case 523:
				{
					if(sebesseg >= 100 && sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 1.03, vy * 1.03, vz * 1.03);
						Mdebug = "BOOST";	
					}
					else
						Mdebug = "off";
				}
				case 596:
				{
					if(sebesseg >= 150 && sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 1.03, vy * 1.03, vz * 1.03);
						Mdebug = "BOOST";
					}
					else
						Mdebug = "off";
				}
				case 597:
				{
					if(sebesseg >= 150 && sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 1.03, vy * 1.03, vz * 1.03);
						Mdebug = "BOOST";
					}
					else
						Mdebug = "off";
				}
				case 598:
				{
					if(sebesseg >= 150 && sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 1.03, vy * 1.03, vz * 1.03);
						Mdebug = "BOOST";
					}
					else
						Mdebug = "off";
				}
				case 599:
				{
					if(sebesseg >= 150 && sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 1.03, vy * 1.03, vz * 1.03);
						Mdebug = "BOOST";
					}
					else
						Mdebug = "off";
				}
			}
		}
	}
	else if(Keys == KEY_JUMP)
	{
		if(motor != 0)
		{
			switch(model)
			{
				case 523:
				{
					if(sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 0.8, vy *0.8, vz * 0.8);
						Mdebug = "BRAKE BOOST";
					}
					else
						Mdebug = "off";
				}
				case 596:
				{
					if(sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 0.8, vy *0.8, vz * 0.8);
						Mdebug = "BRAKE BOOST";
					}
					else
						Mdebug = "off";
				}
				case 597:
				{
					if(sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 0.8, vy *0.8, vz * 0.8);
						Mdebug = "BRAKE BOOST";
					}
					else
						Mdebug = "off";
				}
				case 598:
				{
					if(sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 0.8, vy *0.8, vz * 0.8);
						Mdebug = "BRAKE BOOST";
					}
					else
						Mdebug = "off";
				}
				case 599:
				{
					if(sebesseg <= MaxSpeed)
					{
						new Float:vx,Float:vy,Float:vz;
						GetVehicleVelocity(carid,vx,vy,vz);
						SetVehicleVelocity(carid, vx * 0.8, vy *0.8, vz * 0.8);
						Mdebug = "BRAKE BOOST";
					}
					else
						Mdebug = "off";
				}
			}
		}
	}
	if(IsScripter(playerid) && debugmode)
	{
		SCM(playerid,COL_MKEK,"============MATTEO===============");
		SFM(playerid,COL_MKEK,"[DEBUG] (id)Car: [%d]%s", carid, VehicleNames[model - 400]);
		SFM(playerid,COL_MKEK,"[DEBUG] Speed: %d", sebesseg);
		SFM(playerid,COL_MKEK,"[DEBUG] Max speed: %d", MaxSpeed);
		SFM(playerid,COL_MKEK,"[DEBUG] Max diference: %d", MaxSpeed-sebesseg);
		SFM(playerid,COL_MKEK,"[DEBUG] Boost: %s", Mdebug);
		SFM(playerid,COL_MKEK,"[DEBUG] Key: %d", Keys);
		SCM(playerid,COL_MKEK,"=================================");
		SCM(playerid,COL_MKEK,"");
		SCM(playerid,COL_MKEK,"");
	}
	return 1;
}

stock IsValidSkin(skinid)
{
	new badSkins[] = { 74 };
	
	if (skinid < 0 || skinid > 299)
		return false;
	
	for (new i = 0; i < sizeof(badSkins); i++)
		if (skinid == badSkins[i])
			return false;

	return true;
}	

stock HazUltetvenySzam( id )
{
	new d = -1, db;
	for(;++d < 50;)
		if(HazInfo[id][hDrogMi][d] > 0)
			db++;
	
	return db;
}

stock NearestPlant(playerid)
{
	new i = -1,
		ret = -1;
	
	for(;++i < sizeof(PDrogHely);)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.0, PDrogHely[i][0], PDrogHely[i][1], PDrogHely[i][2]))
		{
			ret = i;
			break;
		}
	}
	
	return ret;
}

/*----------- Animáció funkciók -----------*/

stock EloToltes(playerid)
{
	for(new id = 0; id < sizeof(EloToltesek); id++)
		PreloadAnimLib(playerid, EloToltesek[id]);
}

stock IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

stock bool:Esik(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerVelocity(playerid, x, y, z);
	
	return (z < 0);
}

stock OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	if(!Esik(playerid))
		return ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
		
	return true;
}

stock LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp, vsync = 1)
{
	if(!Esik(playerid))
	{
		PlayerInfo[playerid][pUsingLoopingAnim] = 1;
		ApplyAnimation(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, vsync);
		ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, vsync);
	}
	return true;
}

stock StopLoopingAnim(playerid)
{
	PlayerInfo[playerid][pUsingLoopingAnim] = 0;
	return ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

stock PreloadAnimLib(playerid, animlib[])
	return ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
	
/*----------- Animáció funkciók vége -----------*/
stock TaxiOraStop(taxis,hivo)
{
	new menetido = PlayerInfo[taxis][pTaxiorastart];
	new ear = (menetido / 5) * 2;
	new arformat[16];
	format(arformat,16,"%.0d",ear);
	new ar = strval(arformat);
	PlayerInfo[hivo][pBszPenz] -= ar;
	SFM(hivo,COL_MKEK,"Az út ára %d$ volt. Levonva a bankszámládról.",ar);
	SFM(taxis,COL_MKEK,"%d$-t fizetett az utas. Ennek a fele a tiéd.",ar);
	new efizu = ar / 2;
	new fizuformat[16];
	format(fizuformat,16,"%.0d",efizu);
	new fizu = strval(fizuformat);
	CegInfo[BIZ_SKV][cKassza] += fizu;
	PlayerInfo[taxis][pBszPenz] += fizu;
	PlayerInfo[hivo][pTaxithivott] = 0;
	PlayerInfo[taxis][pTaxiorastart] = 0;
}

stock TaxiOraIndit(taxis,hivo)
{
	PlayerInfo[taxis][pTaxiorastart] = 1;
	SCM(hivo,COL_MKEK,"A taxis elindította a taxiórát. 5 másodpercenként 2$ a menetdíj. Ha kiszállsz, leáll.");
	SCM(taxis,COL_MKEK,"Elindítottad a taxiórát.");
	return 1;
}

stock TaxiHivasFogad(taxis,hivo)
{
	SCM(hivo,COL_MKEK,"Egy taxis fogadta a hívásod.");
	new Float:x, Float:y, Float:z;
	GetPlayerPos(hivo,x,y,z);
	SetPlayerCheckpoint(taxis,x,y,z,3.0);
	SCM(taxis,COL_MKEK,"CheckPoint jelölve.");
	foreach(Player,p)
	{
	    if(PlayerInfo[p][pSKV] == 1)
	    {
	        SFM(p,COL_MKEK,"%s elfogadta %s[%d] hívását.",JatekosNev(taxis),JatekosNev(hivo),hivo);
	    }
	}
	return 1;
}

stock TaxiHivas(hivo)
{
	PlayerInfo[hivo][pTaxithivott] = 1;
	SCM(hivo,COL_MKEK,"Taxist hívtál, maradj ott.");
	foreach(Player,p)
	{
	    if(PlayerInfo[p][pSKV] == 1)
	    {
	        SFM(p,COL_MKEK,"%s taxit hívott, az elfogadáshoz /lst elfogad %d",JatekosNev(hivo),hivo);
			SetPlayerMarkerForPlayer(p, hivo, 0x00ff66AA);
	    }
	}
	return 1;
}

stock CreateCP(playerid, mapicon, Float:x, Float:y, Float:z, Float:size, worldid = -1, interiorid = -1, Float:streamdistance = 100.0)
{
	//nem
	//SetPlayerMapIcon(playerid, 0, PosExt(KamionUtak[start]), 0, -1, MAPICON_GLOBAL);
	SetPlayerMapIcon(playerid, mapicon, x, y, z, 0, -1, MAPICON_GLOBAL);
	//native CreateDynamicCPEx(Float:x, Float:y, Float:z, Float:size, Float:streamdistance = 100.0, worlds[] = { -1 }, interiors[] = { -1 }, players[] = { -1 }, maxworlds = sizeof worlds, maxinteriors = sizeof interiors, maxplayers = sizeof players);
	//return CreateDynamicCPEx(x, y, z, size, streamdistance, .players = { player });
	return CreateDynamicCP(x, y, z, size, worldid, interiorid, playerid, streamdistance);
	//SetPlayerMapIcon(playerid, 12, 2204.9468, 1986.2877, 16.7380, 52, 0, MAPICON_LOCAL );
}

stock Sebessegkorlat(playerid)
{
	new
		Float:seb, Float:sk, carid,
		Float:x, Float:y, Float:z,
		Float:Vx, Float:Vy, Float:Vz;
	
	carid = vInfo[ PlayerInfo[playerid][pJarmuben] ][vID];
	GetVehiclePos(carid, x, y, z);
	GetVehicleVelocity(carid, Vx, Vy, Vz);
		
	sk = float(PlayerInfo[playerid][pSK]) / 100.0 / 1.6;
			
	if(!IsPlayerInRangeOfPoint(playerid, sk + 0.05, x + Vx, y + Vy, z + Vz))
	{
		seb = VectorSize(Vx,Vy,Vz);
				
		Vx = (Vx / seb) * sk;
		Vy = (Vy / seb) * sk;
		Vz = (Vz / seb) * sk;
			
		SetVehicleVelocity(carid, Vx, Vy, Vz);
	}
	return true;
}

stock bool:IsJob(playerid, job)
{
	if(PlayerInfo[playerid][pMunka1] == job || PlayerInfo[playerid][pMunka2] == job)
		return true;
		
	return false;
}

stock LoadBoltok()
{
	CreateDynamic3DTextLabel("(( /munka ))", COLOR_MKEK, 889.4802, -0.3294, 988.2107, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
	CreateDynamic3DTextLabel("(( /munka ))", COLOR_MKEK, 2474.286, -2119.997, 14.756, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
	
	new i = -1;
	for(;++i < sizeof(Boltok);)
		CreateDynamic3DTextLabel("(( /vesz ))", COLOR_MKEK, Boltok[i][boltX], Boltok[i][boltY], Boltok[i][boltZ], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);



	
	i = -1;
	for(;++i < sizeof(RuhaBoltok);)
		CreateDynamic3DTextLabel("(( /vesz ))", COLOR_MKEK, RuhaBoltok[i][boltX], RuhaBoltok[i][boltY], RuhaBoltok[i][boltZ], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
	return true;
}

stock PaintBallMuvelet(playerid, muvelet) // by Martin
{
	switch(muvelet)
	{
		case 1: //saját fegyverek mentése és paintball kezdése
		{
			PlayerInfo[playerid][pFegyver] = 0;
			ResetPlayerWeapons(playerid);
			
			new fe = NINCS;
			for(;++fe < 13;)
			{
				//Meglévõ fegyvereinek mentése változóba
				PlayerInfo[playerid][pPBFegyverek][fe] = PlayerInfo[playerid][pFegyverek][fe];
				PlayerInfo[playerid][pPBToltenyek][fe] = PlayerInfo[playerid][pToltenyek][fe];
				
				//kezében lévõ fegyverek nullázása kezdésnél
				PlayerInfo[playerid][pFegyverek][fe] = 0;
				PlayerInfo[playerid][pToltenyek][fe] = 0;
			}
			
			PlayerInfo[playerid][pPaintBall][0] = 1;
			PlayerInfo[playerid][pPaintBall][1] = 0;
			if(PlayerInfo[playerid][pBejelento])
			{
				PlayerInfo[playerid][pBejelento] = false;
				FeliratMutat( playerid, false );
			}
		}
		case 2: //saját fegyverek visszaállítása
		{
			PlayerInfo[playerid][pFegyver] = 0;
			ResetPlayerWeapons(playerid);
			
			new fe = NINCS;
			for(;++fe < 13;)
			{
				//Mérkõzés végén fegyverek visszaálítása
				PlayerInfo[playerid][pFegyverek][fe] = PlayerInfo[playerid][pPBFegyverek][fe];
				PlayerInfo[playerid][pToltenyek][fe] = PlayerInfo[playerid][pPBToltenyek][fe];
				
				//Mentett fegyverek nullázása
				PlayerInfo[playerid][pPBFegyverek][fe] = 0;
				PlayerInfo[playerid][pPBToltenyek][fe] = 0;
			}
			
			SetPlayerAttachedWeapon(playerid);
			PlayerInfo[playerid][pPaintBall][0] = 0;
			PlayerInfo[playerid][pPaintBall][1] = 0;
		}
		case 3: //fegyver beállítás (spawnoláskor)
		{
			GiveWeapon(playerid, 24, 200, false, true);//deagle
			GiveWeapon(playerid, 29, 500, false, true);//MP5
			GiveWeapon(playerid, 25, 200, false, true);//Shotgun
			GiveWeapon(playerid, 31, 500, false, true);//M4
			
			SetPlayerAttachedWeapon(playerid);
			new rand = random(sizeof(PaintBallPos));
			SetPos(playerid, PosExt(PaintBallPos[rand]));
			SetVirtualWorld(playerid, 9876);
			SetInterior(playerid, 10);
		}
		case 4: //mérkõzés indítása
		{
			PaintBallMuvelet(playerid, 3);
			//if(Iter_Count(PaintBallban) > 1)
		}
	}
	return true;
}

stock LoadAratas()
{
    new i = -1;
	for(;++i < sizeof(Aratas_Objectek);)
	{
		//1007
		AratasInfo[i][aratasObject] = CreateDynamicObject(Aratas_Objectek[i][aratasID], Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ], Aratas_Objectek[i][aratasRX], Aratas_Objectek[i][aratasRY], Aratas_Objectek[i][aratasRZ]);
		AratasInfo[i][aratasPickup] = CreateDynamicPickup(1007, 14, Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ] + 0.8, 0);
		//AratasInfo[i][aratasText] = CreateDynamic3DTextLabel((Aratas_Objectek[i][aratasLearatva] ? ("Veteményes\nLearatva") : ("Veteményes\nNincs aratva")), -1, Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ], 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
	}
	printf("Szerver: %d aratás object sikeresen betöltve!", sizeof(Aratas_Objectek));
	return true;
}

stock PopPlayerTires(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(vehicleid != 0)
	{
		new Float:hp;
		GetVehicleHealth(vehicleid, hp);
		if(hp >= 700.0 && hp <= 1000.0) SetVehicleHealth(vehicleid, hp - 200.0);
		new panels, doors, lights, tires;
		GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, 15);
		//KocsiGumi[vehicleid] = 100.00;
	}
}

stock GetXYInFrontOfPlayer(playerid,&Float:x,&Float:y,Float:dis)
{
	new Float:a, Float:z;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,a);
	GetXYInFrontOfPoint(x, y, a, dis);
}

stock Float:GetDistance( Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2 )
{
	return VectorSize( x1-x2, y1-y2, z1-z2 );
}

stock strtoupper( string[] )
{
	new i = -1;
	for(;++i < strlen(string);)
	{
		string[i] = toupper(string[i]);
	}
	return string;
}

public OnPlayerPause(playerid, paused)
{
	if(paused)
	{
		if(PlayerInfo[playerid][pFegyver] == 43 || PlayerInfo[playerid][pFegyver] == 44 || PlayerInfo[playerid][pFegyver] == 45)
			return true;
		
		if(IsPlayerInRangeOfPoint(playerid,10,1659.5399,221.7910,-82.2500))
		{
			CsomagtartoAFK[playerid]++;
			return 1;
		}
		
		if(!PlayerInfo[playerid][pSzunetel])
		{
			PlayerInfo[playerid][pSzunetel] = true;
			PlayerInfo[playerid][pAFK_text] = CreateDynamic3DTextLabel((format(uzenet, sizeof(uzenet), "[AFK: %s]", TimeFormat( PlayerInfo[playerid][pAfkIdo], true )), uzenet), COLOR_ROZSA, 0.0, 0.0, 0.5, 20.0, playerid, INVALID_VEHICLE_ID, 0);
		}
		
	} else {
		
		if(PlayerInfo[playerid][pSzunetel] || IsValidDynamic3DTextLabel( PlayerInfo[playerid][pAFK_text] ))
		{
			PlayerInfo[playerid][pSzunetel] = false;
			
			if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pAFK_text] ))
			{
				DestroyDynamic3DTextLabel( PlayerInfo[playerid][pAFK_text] );
				PlayerInfo[playerid][pAfkIdo] = 0;
			}
			PlayerInfo[playerid][pAFK_text] = INVALID_3D_TEXT_ID;
		}
		
		PlayerInfo[playerid][pAfkIdo] = 0;
	}
	return true;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(PlayerInfo[forplayerid][pNevek] && PlayerInfo[playerid][pNoname] == 0)
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);
	else
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
		
	if(PlayerInfo[playerid][pKiertMegy] == forplayerid)
		SetPlayerMarkerForPlayer(playerid, forplayerid, COLOR_ORANGE);
	if(PlayerInfo[forplayerid][pKiertMegy] == playerid)
		SetPlayerMarkerForPlayer(forplayerid, playerid, COLOR_ORANGE);
	
	PlayerInfo[forplayerid][pStreameltplayer]++;
	PlayerInfo[playerid][pMasoknakstreamelt]++;

	return true;
}
public OnPlayerStreamOut(playerid, forplayerid)
{
	PlayerInfo[forplayerid][pStreameltplayer]--;
	PlayerInfo[playerid][pMasoknakstreamelt]--;
	return 1;
}
public OnVehicleStreamOut(vehicleid, forplayerid)
{
	PlayerInfo[forplayerid][pStreameltvehicle]--;
	return 1;
}



stock AntiFlood(playerid, interval = 2)
{
	SFM(playerid, COL_LRED, "[DEBUG]: interval: %d | ido: %d", interval, (PlayerInfo[playerid][pFlood] - gettime() / 60));
	if(PlayerInfo[playerid][pFlood] > gettime() && ((PlayerInfo[playerid][pFlood] - gettime() / 60) > interval))
		return true;
		
	PlayerInfo[playerid][pFlood] = (gettime() + ((interval +1) * 60));
	return false;
}

stock NevMutatas(playerid, bool:mv)
{
	foreach(Player, x)
	{
		if(!PlayerInfo[x][pNevek]) continue;
		ShowPlayerNameTagForPlayer(x, playerid, mv);
	}
}

stock MutatNevek(playerid, bool:ext)
{
	foreach(Player, x)
	{
		if(PlayerInfo[x][pNoname]) continue;
		ShowPlayerNameTagForPlayer(playerid, x, ext);
	}
	return true;
}

stock Idojaras(playerid = NINCS, extra = NINCS)
{
	new Idojarasok[16][3][24] =
    {
		{2,		"Meleg idõ",			0},
		{3,		"Fülledt idõ",			0},
		{4,		"Felhõs idõ", 			0},
		{5,		"Enyhén napos idõ", 	1},//ez
		{6,		"Napsütéses idõ", 		1},//ez
		{7,		"Felhõs idõ", 			0},
		{8,		"Esõs idõ", 			0},
		{9,		"Ködös idõ", 			0},
		{10,	"Hõhullám", 			0},
		{12,	"Enyhén felhõs idõ",	0},
		{13,	"Tulnyomóan napos idõ", 1},//ez
		{14,	"Derûs idõ", 			1},//ez
		{15,	"Borongós idõ", 		0},
		{16,	"Jégesõ", 				0},
		{17,	"Napos, fülledt idõ", 	1},//ez
		{20,	"Erõsen felhõs idõ", 	0}
    };
	
	if(playerid == NINCS)
	{
		new bool:gen = false;
		if(ServerInfo[0][sIdojarasKov] == 9 && extra == NINCS)
		{
			gen = true;
			ServerInfo[0][sIdojarasKov] = 0;
			extra = 9;
		}
	
		if(extra == NINCS && !gen)
		{
			RE_CONFIG:
			new idx = random(sizeof(Idojarasok));
			new Hour, Minute, Second;
			gettime(Hour, Minute, Second);
			if(ServerInfo[0][sIdojaras] == extra)
				goto RE_CONFIG; //ugyan azt az idõjárást ne adja
			
			if((Hour > 18 && Hour < 5) && Idojarasok[idx][2][0] == 1)
				goto RE_CONFIG; // este ne legyen Napos idõ
			
			if(Idojarasok[idx][0][0] == 16 || Idojarasok[idx][0][0] == 8)
				ServerInfo[0][sIdojarasKov] = 9; //Vihar után köd legyen
			
			extra = Idojarasok[idx][0][0];
		}
		
		ServerInfo[0][sIdojaras] = extra;
		new i = NINCS, id = NINCS, str[32] = "Napos idõ";
		for(;++i < sizeof(Idojarasok);)
		{
			if(Idojarasok[i][0][0] == extra)
				id = i;
		}
		
		if(id != NINCS)
			format(str, sizeof(str), "%s", Idojarasok[id][1]);
		
		printf("Szerver: Idõjárás változás: %d | %s", extra, str);
		SendFormatMessageToAll(COLOR_YELLOW, "<< San Andreas Idõjárás jelentés: %s várható! >>", str);
		
		foreach(Player, p)
			if(!PlayerInfo[p][pvirtualworld] && !PlayerInfo[p][pinterior])
				SetPlayerWeather(p, extra);
			
	} else {
	
		if(extra == NINCS) extra = ServerInfo[0][sIdojaras];
		SetPlayerWeather(playerid, extra);
	}
	return true;
}

/*funkcio KickPublic(playerid)
{
//	printf("Kick_Ex: PlayerID: %d kickelve!", playerid);
	Felirat( playerid, false );
	
	if(ServerInfo[0][sPaintBall][1] == playerid)
		ServerInfo[0][sPaintBall][1] = INVALID_PLAYER_ID;
	
	Kick(playerid);
}
#define Kick_Ex(%0) SetTimerEx("KickPublic", 1000, 0, "d", %0)
*/
forward Kick2(playerid);
public Kick2(playerid){
        Kick(playerid);
        return 1;
}
 
stock _Kick(playerid){
        SetTimerEx("Kick2", 100, 0, "d", playerid);
        return 1;
}
#undef Kick
#define Kick _Kick



stock IllegalCharacter(string[])
{
	new i = NINCS;
	for(;++i < strlen(string);)
	{
		if(('a' <= string[i] <= 'z') || ('A' <= string[i] <= 'Z') || ('0' <= string[i] <= '9'))
			continue;
		
		if((string[i] == '_') || (string[i] == ' ') || (string[i] == '-') || (string[i] == '(') || (string[i] == ')') || (string[i] == '+'))
			continue;
		
		strdel(string, i, i + 1);
		i--;
	}
	return string;
}

stock Float:GetPointAngleToPoint(Float:x2, Float:y2, Float:X, Float:Y) {

  new Float:DX, Float:DY;
  new Float:angle;

  DX = floatabs(floatsub(x2, X));
  DY = floatabs(floatsub(y2, Y));

  if (DY == 0.0 || DX == 0.0) {
    if(DY == 0 && DX > 0) angle = 0.0;
    else if(DY == 0 && DX < 0) angle = 180.0;
    else if(DY > 0 && DX == 0) angle = 90.0;
    else if(DY < 0 && DX == 0) angle = 270.0;
    else if(DY == 0 && DX == 0) angle = 0.0;
  }
  else {
    angle = atan(DX/DY);

    if(X > x2 && Y <= y2) angle += 90.0;
    else if(X <= x2 && Y < y2) angle = floatsub(90.0, angle);
    else if(X < x2 && Y >= y2) angle -= 90.0;
    else if(X >= x2 && Y > y2) angle = floatsub(270.0, angle);
  }

  return floatadd(angle, 90.0);
}

stock RandomString(len = 32)
{
	if(len > 128)
		len = 32;
	
	new visszater[128];
	
	new i = -1;
	new karakterek[65] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	for(;++i < len;)
	{
		visszater[i] = karakterek[random(strlen(karakterek))];
	}
	strdel(visszater, len, 128);
	return visszater;
}

stock UnixToTime( ido )
{
	new tmp[2], nap, ora, perc, str[32];
	if(ido == NINCS)
	{
		format(str, sizeof(str), "Örök");
		return str;
	}
	
	if(ido < gettime())
	{
		format(str, sizeof(str), "Nincs");
		return str;
	}
		
	ido = (ido - gettime());
	if(ido < 60)
		format(str, sizeof(str), "%d mp", ido);
	else if(ido < 3600)
	{
		ido = floatround(ido / 60);
		format(str, sizeof(str), "%d perc", ido);
	}
	else if(ido < (3600 * 24))
	{
		tmp[0] = floatround(ido / 60);// - össz perc
		tmp[1] = floatround(tmp[0] / 60);// - össz óra
		perc = floatround(tmp[0] - (tmp[1] * 60)); // eredménye perc
		ora = floatround(ido / 3600); //eredménye óra
		format(str, sizeof(str), "%d óra és %d perc", ora, perc);
		
	} else {
	
		tmp[0] = floatround(ido / 60);// - össz perc
		tmp[1] = floatround(tmp[0] / 60);// - össz óra
		perc = floatround(tmp[0] - (tmp[1] * 60)); // eredménye perc
		ora = floatround(ido / 3600); //eredménye óra
		nap = floatround(ora / 24);//eredménye nap
		ora = floatround(ora - (nap * 24)); //eredménye óra
		format(str, sizeof(str), "%d nap %d óra és %d perc", nap, ora, perc);
	}
	return str;
}

stock SzerverNev()
{
        if(ServerInfo[0][sPort] == 7777)
        {
                ServerInfo[0][sCounter]++;
                szervernev_start:

                if(ServerInfo[0][sCounter] <= 1)
                        SendRconCommand("hostname « SeeRPG »");
                else if(ServerInfo[0][sCounter] == 5)
                        SendRconCommand("hostname « SeeRPG ~ Gyere és játssz MO. legismertebb szerverén! »");
                else if(ServerInfo[0][sCounter] == 8)
                        SendRconCommand("hostname « SeeRPG ~ Légy tagja te is egy dinamikusan fejlõdõ közösségnek! »");
                else if(ServerInfo[0][sCounter] == 12)
                        SendRconCommand("hostname « SeeRPG ~ Egy elpusztíthatatlan közösség! »");
                else if(ServerInfo[0][sCounter] == 15)
                        SendRconCommand("hostname « SeeRPG ~ Web: http://seerpg.eu/ »");
                else if(ServerInfo[0][sCounter] >= 18)
                {
                        ServerInfo[0][sCounter] = 1;
                        goto szervernev_start;
                }
        } else 
		{
			SendRconCommand("hostname « SeeRPG ~ Alpha »");
        }

        return true;
}
stock GetVehiclePanelsDamageStatus(vehicleid, &FrontLeft, &FrontRight, &RearLeft, &RearRight, &WindShield, &FrontBumper, &RearBumper)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	FrontLeft = Panels & 15;
	FrontRight = Panels >> 4 & 15;
	RearLeft = Panels >> 8 & 15;
	RearRight = Panels >> 12 & 15;
	WindShield = Panels >> 16 & 15;
	FrontBumper = Panels >> 20 & 15;
	RearBumper = Panels >> 24 & 15;
	return true;
}

stock GetVehicleDoorsDamageStatus(vehicleid, &Bonnet, &Boot, &FrontLeft, &FrontRight, &RearLeft, &RearRight)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	Bonnet = Doors & 7;
	Boot = Doors >> 8 & 7;
	FrontLeft = Doors >> 16 & 7;
	FrontRight = Doors >> 24 & 7;
	RearLeft = Doors >> 32 & 7;
	RearRight = Doors >> 40 & 7;
	return true;
}

stock GetVehicleLightsDamageStatus(vehicleid, &First, &Second, &Third, &Fourth)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	First = Lights & 1;
	Second = Lights >> 1 & 1;
	Third = Lights >> 2 & 1;
	Fourth = Lights >> 3 & 1;
	return true;
}

stock GetVehicleTiresDamageStatus(vehicleid, &FrontLeft, &FrontRight, &RearLeft, &RearRight)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	if(GetVehicleType(vehicleid) == MOTORBIKE || GetVehicleType(vehicleid) == BIKE) FrontLeft = Tires >> 1 & 1, FrontRight = Tires & 1;
	else
	{
		RearRight = Tires & 1;
		FrontRight = Tires >> 1 & 1;
		RearLeft = Tires >> 2 & 1;
		FrontLeft = Tires >> 3 & 1;
	}
	return true;
}

stock UpdateVehiclePanelsDamageStatus(vehicleid, FrontLeft, FrontRight, RearLeft, RearRight, WindShield, FrontBumper, RearBumper)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	return UpdateVehicleDamageStatus(vehicleid, FrontLeft | (FrontRight << 4) | (RearLeft << 8) | (RearRight << 12) | (WindShield << 16) | (FrontBumper << 20) | (RearBumper << 24), Doors, Lights, Tires);
}

stock UpdateVehicleDoorsDamageStatus(vehicleid, Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	return UpdateVehicleDamageStatus(vehicleid, Panels, Bonnet | (Boot << 8) | (FrontLeft << 16) | (FrontRight << 24) | (RearLeft << 32) | (RearRight << 40), Lights, Tires);
}

stock UpdateVehicleLightsDamageStatus(vehicleid, First, Second, Third, Fourth)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	return UpdateVehicleDamageStatus(vehicleid, Panels, Doors, First | (Second << 1) | (Third << 2) | (Fourth << 3), Tires);
}

#define CAR 0
#define BIKE 1
#define MOTORBIKE 2
#define BOAT 3
#define PLANE 4
#define RC 5
#define TRAIN 6
#define TRAILER 7
#define HELICOPTER 8
//#include <united>

stock GetVehicleType(vehicleid)
{
	switch(GetVehicleModel(vehicleid))
	{
		case 400 .. 416, 418 .. 424, 426 .. 429, 431 .. 434, 436 .. 440, 442 .. 445, 451, 455 .. 459, 466, 467, 470, 471, 474, 475, 477 .. 480, 482, 483, 485, 486, 489 .. 492, 494 .. 496, 498 .. 500, 502 .. 508, 514 .. 518, 524 .. 536, 539 .. 547, 549 .. 552, 554 .. 562, 565 .. 568, 571 .. 576, 578 .. 580, 582, 583, 585, 587 .. 589, 596 .. 605, 609: return CAR;
		case 481, 509, 510: return BIKE;
		case 448, 461 .. 463, 468, 521 .. 523, 581, 586: return MOTORBIKE;
		case 430, 446, 452 .. 454, 472, 473, 484, 493, 595: return BOAT;
		case 460, 476, 511 .. 513, 519, 520, 553, 577, 592, 593: return PLANE;
		case 441, 464, 465, 501, 564, 594: return RC;
		case 449, 537, 538, 569, 570, 590: return TRAIN;
		case 435, 450, 584, 591, 606 .. 608, 610, 611: return TRAILER;
		case 417, 425, 447, 469, 487, 488, 497, 548, 563: return HELICOPTER;
	}
	return -1;
}

stock GetVehicleMType(type)
{
	switch(type)
	{
		case 400 .. 416, 418 .. 424, 426 .. 429, 431 .. 434, 436 .. 440, 442 .. 445, 451, 455 .. 459, 466, 467, 470, 471, 474, 475, 477 .. 480, 482, 483, 485, 486, 489 .. 492, 494 .. 496, 498 .. 500, 502 .. 508, 514 .. 518, 524 .. 536, 539 .. 547, 549 .. 552, 554 .. 562, 565 .. 568, 571 .. 576, 578 .. 580, 582, 583, 585, 587 .. 589, 596 .. 605, 609: return CAR;
		case 481, 509, 510: return BIKE;
		case 448, 461 .. 463, 468, 521 .. 523, 581, 586: return MOTORBIKE;
		case 430, 446, 452 .. 454, 472, 473, 484, 493, 595: return BOAT;
		case 460, 476, 511 .. 513, 519, 520, 553, 577, 592, 593: return PLANE;
		case 441, 464, 465, 501, 564, 594: return RC;
		case 449, 537, 538, 569, 570, 590: return TRAIN;
		case 435, 450, 584, 591, 606 .. 608, 610, 611: return TRAILER;
		case 417, 425, 447, 469, 487, 488, 497, 548, 563: return HELICOPTER;
	}
	return -1;
}

stock UpdateVehicleTiresDamageStatus(vehicleid, FrontLeft, FrontRight, RearLeft, RearRight)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	if(GetVehicleType(vehicleid) == MOTORBIKE || GetVehicleType(vehicleid) == BIKE) return UpdateVehicleDamageStatus(vehicleid, Panels, Doors, Lights, FrontRight | (FrontLeft << 1));
	else return UpdateVehicleDamageStatus(vehicleid, Panels, Doors, Lights, RearRight | (FrontRight << 1) | (RearLeft << 2) | (FrontLeft << 3));
}

stock encode_tires(tire1, tire2, tire3, tire4)
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
	
stock encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
	return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);

stock encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
    #pragma unused behind_driver_door
    #pragma unused behind_passenger_door
    return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
}

stock encode_lights(light1, light2, light3, light4)
	return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);

stock FrakcioID(hanyadik)
{
	new i = -1, num = 0, visszater = -1;
	for(;++i < MAX_FRAKCIO;)
	{
		if(FInfo[i][fVan])
		{
			if(hanyadik == num)
			{
				visszater = i;
				break;
			}
			num++;
		}
	}
	return visszater;
}

stock ButorObjectID(objectid)
{
	new i = NINCS, visszateres = NINCS;
	for(;++i < MAXBUTORSZAM;)
	{
		if(ButorInfo[i][butorHasznalva])
		{
			if(ButorInfo[i][butorObject] == objectid)
			{
				visszateres = i;
				break;
			}
		}
	}
	return visszateres;
}

stock Tab(text[], text2[], tabcount = 0)
{
	new tab_[16] = "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",out[128];
	if((tabcount = (((tabcount + 1) * 8) - strlen(text) - 1) / 8) < 0
	|| tabcount >= sizeof tab_) tabcount = 0;
	format(out, sizeof out, "%s%s%s", text, tab_[(sizeof(tab_) - 1) - tabcount], text2);
	return out;
}

stock TabEx(text[], dest[], size = 0)
{
	new
		pos2[32],
		out[128],
		cilkus = ((((size*8) - strlen(text)) + 8) / 8);
	
	if(((((size*8) - strlen(text)) + 8) % 8) == 0) cilkus -= 1;
	for(new i = 0; i < cilkus; i++) strins(pos2, "\t", 0, 128);
	
	strins(out, text, 0, 128);
	strins(out, pos2, strlen(out), 128);
	strins(out, dest, strlen(out), 128);
	return out;
}

stock SzabadButorID()
{
	new visszateres = NINCS,i = NINCS;
	for(;++i < MAXBUTORSZAM;)
	{
		if(!ButorInfo[i][butorHasznalva])
		{
			visszateres = i;
			break;
		}
	}
	return visszateres;
}

stock NincsHaza(playerid)
{
	new i = -1;
	
	for(;++i < MAX_HAZ_JARMU;)
	{
		if(PlayerInfo[playerid][pHazKulcs][i] != 0)
		{
			return true;
		}
	}
	
	return false;
}

stock Hazban(playerid, haz)
{
	if(
		GetPlayerVirtualWorld(playerid) == haz &&
		GetPlayerInterior(playerid) == BelsoInterior[HazInfo[haz][inter]][interior] &&
		PlayerInfo[playerid][phaz] == haz
	)
		return true;
		
	return false;
}

stock HazabanVan(playerid)
{
	if(!NincsHaza(playerid))
		return NINCS;
	
	new i = -1, visszater = -1;
	for(;++i < MAX_HAZ_JARMU;)
	{
		if(Hazban(playerid, PlayerInfo[playerid][pHazKulcs][i]))
		{
			visszater = PlayerInfo[playerid][pHazKulcs][i];
			break;
		}
	}
	
	return visszater;
}

stock KozeliHazEx(playerid/*, Float:tavolsag*/) //by Razo
{
	new ciklus = -1, houseid = -1;
	for(;++ciklus < MAX_HOUSE;)
	{
		if(HazInfo[ciklus][hasznalatban])
		{
			if(IsPlayerInRangeOfPoint(playerid, 25.0, HazInfo[ciklus][posx], HazInfo[ciklus][posy], HazInfo[ciklus][posz]))
	        {
	            houseid = ciklus;
	            break; 
	        }
		}
		//houseid = -1;
	}
	return houseid;
}

stock SajatHazaKozeleben(playerid) // by Razo
{
	if(!NincsHaza(playerid)) return false;
	new haz = KozeliHazEx(playerid);
	if(haz == -1) return false;
	if(PlayerInfo[playerid][pHazKulcs][haz])) return true;
	return false;
}

stock GetXButor(playerid, szam)
{
	new visszateres = NINCS,i = NINCS,
	szamlalas = 0,hazszam = HazabanVan(playerid);
	//printf("Szám: %d", szam);
	for(;++i < MAXBUTORSZAM;)
	{
		if(ButorInfo[i][butorVW] == hazszam && ButorInfo[i][butorHasznalva])
		{
			szamlalas++;
			if(szamlalas == szam)
			{
				visszateres = i;
				//printf("Visszatérés: %d", visszateres);
				break;
			}
		}
	}
	return visszateres;
}

stock HazSzef(playerid)
{
	if(!NincsHaza(playerid))
		return -2;
		
	if(HazabanVan(playerid) == NINCS)
		return NINCS;
		
	new i = NINCS,
		visszater = -3;
		
	for(;++i < MAXBUTORSZAM;)
	{
		if((ButorInfo[i][butorHasznalva]) && (ButorInfo[i][butorVW] == PlayerInfo[playerid][phaz]))
		{
			if(ButorInfo[i][butorModel] == 2332)
			{
				visszater = i;
				break;
			}
		}
	}
	return visszater;
}

stock ButorSzam(playerid)
{
	if(!NincsHaza(playerid))
		return -2;
		
	if(HazabanVan(playerid) == NINCS)
		return NINCS;
		
	new i = NINCS,szamlalas = 0,
	hazszam = HazabanVan(playerid);

	for(;++i < MAXBUTORSZAM;)
	{
		if((ButorInfo[i][butorHasznalva] == true) && (ButorInfo[i][butorVW] == hazszam))
		{
			szamlalas++;
		}
	}
	return szamlalas;
}

stock VanUtas( vid )
{
	foreach(Player, i)
		if(IsPlayerInVehicle(i, vid)) return true;
	
	return false;
}

stock IsSeatTaken(vehicleid, seatid)
{
	new id = NINCS;
	foreach(Player, i)
		if((GetPlayerVehicleID(i) == vehicleid) && (GetPlayerVehicleSeat(i) == seatid))
		{
			id = i; 
			break;
		}
	
    return id;
}

stock ProcessSQL( )
{
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_HIFI_TABLE"`", 	"HifiLoad", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_KAMERA_TABLA"`", 	"KameraLoad", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_SPRAY_TABLA"`", 	"GraffitiLoad", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_DRINK_TABLE"`", 	"DrinkLoad", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_JARMU_TABLA"`", 	"JarmuBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_HAZ_TABLA"`", 		"HazBetoltes", 			"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_FRAKCIO_TABLA"`", 	"FrakcioBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_TERULET_TABLA"`", 	"TeruletBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_GPS_TABLA"`", 	"GPSBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_BENZINKUTAK_TABLA"`", 	"BenzinkutBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_CUCCOK_TABLA"`", 	"LoadEldobottCuccok", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_TELEPORT_TABLA"`", 	"TeleBetoltese", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_KAPU_TABLA"`", 	"KapuBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_BUTOR_TABLA"`", 	"ButorBetoltes", 		"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_JARMUADAT_TABLA"`", "JarmuadatBetoltes",	"");
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_CEGEK_TABLA"`", 	"CegMuvelet", 		"i",	1);
	mysql_tquery(sql_ID, "SELECT * FROM `"#MYSQL_3DTEXT_TABLA"`", 	"LabelBetoltes", 		"");
	return true;
}

stock MySQLUpdateSTR(query[], mezo[], ertek[])
{
	new myfor[256];
	format(myfor, 256, "%s='%s', ", mezo, ertek);
	strcat(query, myfor, 5000);
	return true;
}

stock MySQLUpdateINT(query[], mezo[], ertek)
{
	new myfor[256];
	format(myfor, 256, "%s='%d', ", mezo, ertek);
	strcat(query, myfor, 5000);
	return true;
}

stock MySQLUpdateFLOAT(query[], mezo[], Float:ertek)
{
	new myfor[256];
	format(myfor, 256, "%s='%f', ", mezo, ertek);
	strcat(query, myfor, 5000);
	return true;
}

stock MySQLFinalUpdate(query[], mezo[], ertek)
{
	new string[64];
	query[strlen(query) - 2] = '\0';
	format(string, 64, " WHERE %s='%d'", mezo, ertek);
	strcat(query, string, 5000);
	mysql_tquery(sql_ID, query, "", "");
	return true;
}

stock num_hash(buf[])
{
    new length=strlen(buf);
    new s1 = 1, s2 = 0, n;
    for(n=0; n<length; n++)
	{
        s1 = (s1 + buf[n]) % 65521;
        s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}

stock HelyesNevString(string[])
{
	new alahuzasok = 0;
	for(new n = 0; n < strlen(string); n++)
	{
		if(string[n] == '_')
			alahuzasok++;
		if(string[n] == ']' || string[n] == '[')
			return false;
	}

	if(alahuzasok < 1 || alahuzasok > 2)
		return false;

    return true;
}

//Ha a slot egyenlõ és a fegyver id nem akkor igaz
stock SameWeaponSlot(ez, az)
{
	return ((aWeaponSlotok[ez] == aWeaponSlotok[az]) && (ez != az));
}

stock DeleteWeapon(playerid)
{
	PlayerInfo[playerid][pFegyver] = 0;
	ResetPlayerWeapons(playerid);
	new fegyver = -1;
	for(;++fegyver < 13;)
	{
		PlayerInfo[playerid][pFegyverek][fegyver] = 0;
		PlayerInfo[playerid][pToltenyek][fegyver] = 0;
	}
	SetPlayerAttachedWeapon(playerid, true);
	return true;
}

stock GiveWeapon(playerid, fegyver, loszer, bool:ujratolt = false, bool:set = false)
{
	if(fegyver > 47)
		return true;
		
	if(PlayerInfo[playerid][pjatekosszint] < 3 || !Belepve(playerid))
		return true;
		
	if((35 <= fegyver <= 38 || 43 <= fegyver <= 45) && PlayerInfo[playerid][padmin] < FOADMIN_SZINT)
		return true;
	
	PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
	if(!IsPlayerInAnyVehicle(playerid))
		PlayerInfo[playerid][pFegyver] = fegyver;
	
	if(loszer < 0)
	{
		PlayerInfo[playerid][pFegyverek][aWeaponSlotok[fegyver]] = 0;
		PlayerInfo[playerid][pToltenyek][aWeaponSlotok[fegyver]] = 0;
		return true;
	}
	
	if(PlayerInfo[playerid][pFegyverek][ aWeaponSlotok[fegyver] ] && (PlayerInfo[playerid][pFegyverek][aWeaponSlotok[fegyver]] == fegyver) && !set)
		PlayerInfo[playerid][pToltenyek][ aWeaponSlotok[fegyver] ] += loszer;
	else
	{
		PlayerInfo[playerid][pFegyverek][aWeaponSlotok[fegyver]] = fegyver;
		PlayerInfo[playerid][pToltenyek][aWeaponSlotok[fegyver]] = loszer;
	}
	
	if(!IsPlayerInAnyVehicle(playerid))
	{
		if(!ujratolt)
			ResetPlayerWeapons(playerid);
		
		if(!loszer && ujratolt)
			GivePlayerWeapon(playerid, PlayerInfo[playerid][pFegyverek][aWeaponSlotok[fegyver]], 0);
		else
			GivePlayerWeapon(playerid, PlayerInfo[playerid][pFegyverek][aWeaponSlotok[fegyver]], PlayerInfo[playerid][pToltenyek][aWeaponSlotok[fegyver]]);
	}
	
	return true;
}

stock TeleNameToID(const neve[])
{
    new vissza = NINCS, t = NINCS;
    for(;++t < MAX_TELEPORT;)
    {
        if(TPInfo[t][tphasznalva])
        {
			if(!strcmp(neve, TPInfo[t][tpnev], true))
			{
				vissza = t;
				break;
			}
        }
    }
    return vissza;
}

stock SetPos(playerid, Float:psx, Float:psy, Float:psz, Float:angle = -999.9, bool:update = false)
{
	if(update) {
		PlayerInfo[playerid][posx] = psx;
		PlayerInfo[playerid][posy] = psy;
		PlayerInfo[playerid][posz] = psz;
	}
	
	SetPlayerPos(playerid, psx, psy, psz);
	if(angle != -999) {
		if(update)
			PlayerInfo[playerid][pangle] = angle;
		SetPlayerFacingAngle(playerid, angle);
	}
	
	return true;
}

stock SetSkin(playerid, skin, bool:update = true)
{
	if(update)
		PlayerInfo[playerid][pskin] = skin;
		
	SetPlayerSkin(playerid, skin);
	return true;
}

stock SetInterior(playerid, int, bool:update = true)
{
	if(update)
		PlayerInfo[playerid][pinterior] = int;
		
	SetPlayerInterior(playerid, int);
	return true;
}

stock SetVirtualWorld(playerid, vwe, bool:update = true)
{
	new regi = GetPlayerVirtualWorld(playerid);
	if(update)
		PlayerInfo[playerid][pvirtualworld] = vwe;
	
	SetPlayerVirtualWorld(playerid, vwe);
	if(vwe == 0 && (regi != 0)) Idojaras(playerid);
	else if(regi != vwe) Idojaras(playerid, 0);
	return true;
}

stock SetHealth(playerid, Float:health, bool:update = true, bool:ehseg = false)
{
	if(health > MAX_HP)
		health = MAX_HP;
	else if(health < 0.0)
		health = 0.0;
	
	if(update)
	{
		PlayerInfo[playerid][pElet] = health;
		PlayerInfo[playerid][pUjElet] = health;
	}
	
	if(health == 0.0) PlayerInfo[playerid][pScriptShoot][2] = (ehseg ? 100 : 1);
	SetPlayerHealth(playerid, health);
	return true;
}

stock SetArmour(playerid, Float:armour, bool:update = true)
{
	if(armour > MAX_ARMOUR)
		armour = MAX_ARMOUR;

	if(update)
	{
		PlayerInfo[playerid][pPancel] = armour;
		PlayerInfo[playerid][pUjPancel] = armour;
	}
		
	SetPlayerArmour(playerid, armour);
	return true;
}

stock GetNearestObject(playerid)
{
	PlayerInfo[playerid][pinterior] = GetPlayerInterior(playerid);
	PlayerInfo[playerid][pvirtualworld] = GetPlayerVirtualWorld(playerid);
	
	new i = -1, visszateres = -1;
	for(;++i < MAX_DROP;)
	{
		if(dInfo[i][dHasznalva])
		{
			if(dInfo[i][dInt] != PlayerInfo[playerid][pinterior] || dInfo[i][dVirtual] != PlayerInfo[playerid][pvirtualworld])
				continue;
				
			if(IsPlayerInRangeOfPoint(playerid, 3.0, PosExt(dInfo[i][dPos])))
			{
				visszateres = i;
				break;
			}
		}
	}
	return visszateres;
}

stock GetDropIndex()
{
	new i = 0, visszateres = -1;
	for(;++i < MAX_DROP;)
	{
		if(!dInfo[i][dHasznalva])
		{
			visszateres = i;
			break;
		}
	}
	return visszateres;
}

stock TargyEldob(playerid, tipus, db)
{
	if(!IsPlayerConnected(playerid) || !Belepve(playerid))
		return false;
		
	new strdb[64];
	if(db != NINCS)
	{
		LoopingAnim(playerid, "MISC", "pickup_box", 4.0, 0, 0, 1, 0, 0);
		LoopingAnim(playerid, "MISC", "pickup_box", 4.0, 0, 0, 1, 0, 0);
		format(strdb, sizeof(strdb), "%s", FormatNumber(db, 0, ','));
	}

	switch(tipus)
	{
		case ELDOB_FEGYVER:
		{
			new wid 	=	GetPlayerWeapon(playerid);
			new ammo;
			
			if(db > 0)
				ammo = db;
			else
				ammo = GetPlayerAmmo(playerid);
			
			new Float:ppos[3];
			
			GetPlayerPos(playerid, PosExt(ppos));
			
			if(!wid || !ammo)
				return false;
			
			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");
			
			if(db == NINCS) ppos[0] += 2.0;
			
			dInfo[di][dTipus] 	= 	ELDOB_FEGYVER;
			dInfo[di][dFegyver] = 	wid;
			dInfo[di][dErtek] 	= 	ammo;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);
			
		//	nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"%s "#COL_SZURKE"]\n"#COL_FEHER"Lõszer: "#COL_VKEK"%s\n"#COL_SZURKE"(( /felvesz ))", aWeaponNames[wid], FormatNumber(ammo, 0, ','));
			
			dInfo[di][dObject]	=	CreateDynamicObject(aWeaponModel[wid], ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
		//	dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);

			new slot = GetGunSlot( PlayerInfo[playerid][pFegyver] );

			if(db && (db > PlayerInfo[playerid][pToltenyek][slot]))
				return SFM(playerid, COL_LRED, "A töltény mennyiség "#COL_MKEK"1 "#COL_FEHER"és "#COL_MKEK"%d "#COL_FEHER"között lehet! | 0 = Összes átadása", PlayerInfo[playerid][pToltenyek][slot]);

			if(!db)
				ammo = PlayerInfo[playerid][pToltenyek][slot];
			else
				ammo = db;

			PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
			PlayerInfo[playerid][pToltenyek][slot] -= ammo;
			if(PlayerInfo[playerid][pToltenyek][slot] == 0)
			{
				PlayerInfo[playerid][pFegyverek][slot] = 0;
			}
   			PlayerInfo[playerid][pFegyver] = false;
   			
			SetPlayerAttachedWeapon(playerid);
			ResetPlayerWeapons(playerid);
			SetPlayerAttachedWeapon(playerid);

			Cselekves(playerid, "eldobott egy fegyvert", 1);

//			new wep;
//			GetPlayerWeaponData(playerid, aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ], wep, PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);


			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')",dInfo[di][dTipus],dInfo[di][dFegyver],dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
		case ELDOB_MATERIAL:
		{
			new Float:ppos[3];
			GetPlayerPos(playerid, PosExt(ppos));
			
			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");
			
			dInfo[di][dTipus] 	= 	ELDOB_MATERIAL;
			dInfo[di][dErtek] 	= 	db;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			PlayerInfo[playerid][pMaterial] -= db;
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);
			
			//nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"Materiál "#COL_SZURKE"]\n"#COL_VKEK"%sdb\n"#COL_SZURKE"(( /felvesz ))", strdb);
			
			dInfo[di][dObject]	=	CreateDynamicObject(2060, ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
		//	dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);
			
			SFM(playerid, COL_VZOLD, "Eldobtál "#COL_MKEK"%s"#COL_FEHER"db materiált!", strdb);
			Cselekves(playerid, "eldobott némi materiált", 1);
			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES(''%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')", dInfo[di][dTipus],0,dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
		case ELDOB_HEROIN:
		{
			new Float:ppos[3];
			GetPlayerPos(playerid, PosExt(ppos));
			
			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");
			
			dInfo[di][dTipus] 	= 	ELDOB_HEROIN;
			dInfo[di][dErtek] 	= 	db;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			PlayerInfo[playerid][pHeroin] -= db;
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);
			
		//	nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"Heroin "#COL_SZURKE"]\n"#COL_VKEK"%sg\n"#COL_SZURKE"(( /felvesz ))", strdb);
			
			dInfo[di][dObject]	=	CreateDynamicObject(1578, ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
		//	dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);
			
			SFM(playerid, COL_VZOLD, "Eldobtál "#COL_MKEK"%s"#COL_FEHER"g heroint!", strdb);
			Cselekves(playerid, "eldobott némi heroint", 1);
			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')",dInfo[di][dTipus],0,dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
		case ELDOB_KOKAIN:
		{
			new Float:ppos[3];
			GetPlayerPos(playerid, PosExt(ppos));
			
			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");
			
			dInfo[di][dTipus] 	= 	ELDOB_KOKAIN;
			dInfo[di][dErtek] 	= 	db;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			PlayerInfo[playerid][pKokain] -= db;
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);
			
		//	nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"Kokain "#COL_SZURKE"]\n"#COL_VKEK"%sg\n"#COL_SZURKE"(( /felvesz ))", strdb);
			
			dInfo[di][dObject]	=	CreateDynamicObject(1575, ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
		//	dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);
			
			SFM(playerid, COL_VZOLD, "Eldobtál "#COL_MKEK"%s"#COL_FEHER"g kokaint!", strdb);
			Cselekves(playerid, "eldobott némi kokaint", 1);
			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')",dInfo[di][dTipus],0,dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
		case ELDOB_MARI:
		{
			new Float:ppos[3];
			GetPlayerPos(playerid, PosExt(ppos));
			
			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");
			
			dInfo[di][dTipus] 	= 	ELDOB_MARI;
			dInfo[di][dErtek] 	= 	db;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			PlayerInfo[playerid][pMarihuana] -= db;
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);
			
	//		nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"Marihuána "#COL_SZURKE"]\n"#COL_VKEK"%sg\n"#COL_SZURKE"(( /felvesz ))", strdb);
			
			dInfo[di][dObject]	=	CreateDynamicObject(1576, ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
	//		dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);
			
			SFM(playerid, COL_VZOLD, "Eldobtál "#COL_MKEK"%s"#COL_FEHER"g mariuánát!", strdb);
			Cselekves(playerid, "eldobott némi marihuánát", 1);
			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')",dInfo[di][dTipus],0,dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
		case ELDOB_PENZ:
		{
			new Float:ppos[3];
			GetPlayerPos(playerid, PosExt(ppos));
			
			new di = GetDropIndex();
			if(di == NINCS)
				return SCM(playerid, COL_LRED, "Sajnálom, de jelenleg nem tudsz eldobni semmit se!");
			
			dInfo[di][dTipus] 	= 	ELDOB_PENZ;
			dInfo[di][dErtek] 	= 	db;
			dInfo[di][dPos][0]	=	ppos[0];
			dInfo[di][dPos][1]	=	ppos[1];
			dInfo[di][dPos][2]	=	ppos[2];
			dInfo[di][dInt] 	= 	GetPlayerInterior(playerid);
			dInfo[di][dVirtual] = 	GetPlayerVirtualWorld(playerid);
			dInfo[di][dHasznalva]	=	true;
			GiveMoney(playerid,-db);
			dInfo[di][dTorlesiAzonosito] = Rand(100000,999999);
			
		//	nformat(t, 128, #COL_SZURKE"[ "#COL_VKEK"Készpénz "#COL_SZURKE"]\n"#COL_VKEK"%sFt\n"#COL_SZURKE"(( /felvesz ))", strdb);
			
			//1550 - 1212
			dInfo[di][dObject]	=	CreateDynamicObject((db > 1500000 ? 1550 : 1212), ppos[0], ppos[1], ppos[2] - 1.0, 80.0, 0.0, random(360), dInfo[di][dVirtual], dInfo[di][dInt]);
		//	dInfo[di][dText]	=	CreateDynamic3DTextLabel(t, COLOR_WHITE, ppos[0], ppos[1], ppos[2] - 0.3, 20.0, .worldid = dInfo[di][dVirtual], .interiorid = dInfo[di][dInt]);
			
			SFM(playerid, COL_VZOLD, "Eldobtál "#COL_MKEK"%s"#COL_FEHER"Dollár készpénzt!", strdb);
			Cselekves(playerid, "eldobott némi pénzt", 1);
			Streamer_Update(playerid);
			new sql[256];
			format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_CUCCOK_TABLA"` (Tipus, Fegyver, Ertek, Pozicio, Ints, VW,TorlesiAzonosito) VALUES('%d', '%d', '%d', '%f,%f,%f','%d','%d','%d')", dInfo[di][dTipus],0,dInfo[di][dErtek],dInfo[di][dPos][0],dInfo[di][dPos][1],dInfo[di][dPos][2],dInfo[di][dInt],dInfo[di][dVirtual],dInfo[di][dTorlesiAzonosito]);
			mysql_tquery(sql_ID, sql, "", "");
		}
	}
	new Float:ppos[3];
	GetPlayerPos(playerid, PosExt(ppos));
	new date[3],time[3];
	getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	
	new mit[64];
	if(tipus == ELDOB_FEGYVER){ mit = "Fegyver";}
	if(tipus == ELDOB_MATERIAL){ mit = "Material";}
	if(tipus == ELDOB_HEROIN){ mit = "Heroin";}
	if(tipus == ELDOB_KOKAIN){ mit = "Kokain";}
	if(tipus == ELDOB_MARI){ mit = "Marihuana";}
	if(tipus == ELDOB_PENZ){ mit = "Pénz";}
	
	new Stringje[256];
	format(Stringje,256,"Ki: %s | Mit: %s | Mikor: %d-%02d-%02d %02d:%02d | Hol: X: %.0f | Y: %.0f | Z: %.0f",JatekosNev(playerid),mit,PosExt(date), time[0], time[1],ppos[0],ppos[1],ppos[2]);
	Log(FILE_CUCCELDOBAS, Stringje);
	
	return true;
}

stock TargyFelvesz(playerid, did, tipus)
{
	switch(tipus)
	{
		case ELDOB_FEGYVER:
		{
			if(PlayerInfo[playerid][pjatekosszint] < 3)
				return SCM(playerid, COL_LRED, "Fegyverhasználat csak 3 szinttõl érhetõ el ezért nem vehetsz fel fegyvert!");
			
			if(PlayerInfo[playerid][pFegyver])
				return SCM(playerid, COL_MKEK, "Elõször tedd el a fegyvered!");
			if(SameWeaponSlot( PlayerInfo[playerid][pFegyverek][ aWeaponSlotok[ dInfo[did][dFegyver] ] ], dInfo[did][dFegyver]))
				return SCM(playerid, COL_MKEK, "Már van ilyen típusú fegyvered!");
			
			PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
			ResetPlayerWeapons(playerid);
			GiveWeapon(playerid, dInfo[did][dFegyver], dInfo[did][dErtek]);
			SetPlayerAttachedWeapon(playerid);
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl egy "#COL_MKEK"%s"#COL_FEHER" típusú fegyvert "#COL_MKEK"%sdb"#COL_FEHER" lõszerrel!", aWeaponNames[dInfo[did][dFegyver]], FormatNumber(dInfo[did][dErtek], 0, ','));
		}
		case ELDOB_MATERIAL:
		{
			if((dInfo[did][dErtek] + PlayerInfo[playerid][pMaterial]) > P_MAX_MATERIAL)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi materiál!");
				
			PlayerInfo[playerid][pMaterial] += dInfo[did][dErtek];
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl "#COL_MKEK"%s"#COL_FEHER"db materiált!", FormatNumber(dInfo[did][dErtek], 0, ','));
		}
		case ELDOB_HEROIN:
		{
			if((dInfo[did][dErtek] + PlayerInfo[playerid][pHeroin]) > P_MAX_HEROIN)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi heroin!");
				
			PlayerInfo[playerid][pHeroin] += dInfo[did][dErtek];
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl "#COL_MKEK"%s"#COL_FEHER"g heroint!", FormatNumber(dInfo[did][dErtek], 0, ','));
		}
		case ELDOB_KOKAIN:
		{
			if((dInfo[did][dErtek] + PlayerInfo[playerid][pKokain]) > P_MAX_KOKAIN)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi heroin!");
				
			PlayerInfo[playerid][pKokain] += dInfo[did][dErtek];
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl "#COL_MKEK"%s"#COL_FEHER"g kokaint!", FormatNumber(dInfo[did][dErtek], 0, ','));
		}
		case ELDOB_MARI:
		{
			if((dInfo[did][dErtek] + PlayerInfo[playerid][pMarihuana]) > P_MAX_MARIHUANA)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi heroin!");
				
			PlayerInfo[playerid][pMarihuana] += dInfo[did][dErtek];
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl "#COL_MKEK"%s"#COL_FEHER"g marihuánát!", FormatNumber(dInfo[did][dErtek], 0, ','));
		}
		case ELDOB_PENZ:
		{
			if((dInfo[did][dErtek] + PlayerInfo[playerid][ppenz]) > 99999999)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi készpénz!");
				
			GiveMoney(playerid,dInfo[did][dErtek]);
			SFM(playerid, COL_VZOLD, "Felvettél a földrõl "#COL_MKEK"%s"#COL_FEHER"Dollár készpénzt!", FormatNumber(dInfo[did][dErtek], 0, ','));
		}
	}
	
	dInfo[did][dTipus] 		= 	0;
	dInfo[did][dFegyver] 	= 	0;
	dInfo[did][dErtek] 		= 	0;
	dInfo[did][dPos][0] 	= 	0.0;
	dInfo[did][dPos][1] 	= 	0.0;
	dInfo[did][dPos][2] 	= 	0.0;
	dInfo[did][dInt] 		= 	0;
	dInfo[did][dVirtual] 	= 	0;
	DestroyDynamicObject(dInfo[did][dObject]);
	DestroyDynamic3DTextLabel(dInfo[did][dText]);
	dInfo[did][dHasznalva]	= 	false;
	Cselekves(playerid, "felvett valamit a földrõl", 1);
	doQuery( "DELETE FROM `"#MYSQL_CUCCOK_TABLA"` WHERE TorlesiAzonosito = '%d'", dInfo[did][dTorlesiAzonosito]);
	dInfo[did][dTorlesiAzonosito] = 0;
	return true;
}

stock Float:GetDistanceBetweenPoints(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return VectorSize( x1-x2, y1-y2, z1-z2 );
}

stock PlayerToPlayer(playerid, targetid, Float:dist)
{
	new Float:pos[3];
	GetPlayerPos(targetid, pos[0], pos[1], pos[2]);
	return IsPlayerInRangeOfPoint(playerid, dist, pos[0], pos[1], pos[2]);
}

/*stock Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return GetDistanceToPointEx(p1,x2,y2,z2);
	//return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
}*/

/*stock GetClosestPlayer(p1)
{
	new Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	foreach(Player, x)
	{
		if(!Belepve(x) || PlayerInfo[x][pTV][0] == NINCS)
			continue;
		
		if(PlayerInfo[x][pvirtualworld] == PlayerInfo[p1][pvirtualworld] && PlayerInfo[x][pinterior] == PlayerInfo[p1][pinterior])
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}*/

stock GetClosestPlayer(playerid)
{
	new kicsoda = -1;
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(GetPlayerDistanceFromPlayer(playerid,i) < 3 && i != playerid && Belepve(i) && GetPlayerState(i) != PLAYER_STATE_SPECTATING )
		{
			kicsoda = i;
			break;
		}
	}
	return kicsoda;
}

stock GetClosestPlayerTrafi(playerid)
{
	new kicsoda = -1;
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		if(GetPlayerDistanceFromPlayer(playerid,i) < 30 && i != playerid && Belepve(i) && GetPlayerState(i) != PLAYER_STATE_SPECTATING )
		{
			kicsoda = i;
			break;
		}
	}
	return kicsoda;
}

stock KozelbenValaki(playerid, Float:tav)
{
	new jatekos = GetClosestPlayer(playerid);
	if(jatekos == INVALID_PLAYER_ID) return INVALID_PLAYER_ID;
	new Float:x, Float:y, Float:z;
	new id;
	GetPlayerPos(jatekos,x,y,z);
	if(IsPlayerInRangeOfPoint(playerid,tav,x,y,z)) id = jatekos;
	return id;
}

stock Bilincs(playerid, bilincs, ido = -1)
{
	if(PlayerInfo[playerid][pFegyver])
	{
		new wep;
		GetPlayerWeaponData(playerid, aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ], wep, PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);

		PlayerInfo[playerid][pFegyver] = 0;

		ResetPlayerWeapons(playerid);
		SetPlayerAttachedWeapon(playerid);
	}

	if(ido == -1)
	{
		switch(bilincs)
		{
			case 0: ido = 0;
			case 1, 3: ido = 60;
			case 2: ido = 300;
		}
	}

	PlayerInfo[playerid][pBilincselve] = bilincs;
	PlayerInfo[playerid][pBilincsIdo] = ido;
	
	switch(bilincs)
	{
		case 0:
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			//RemovePlayerAttachedObject(playerid, SLOT_BILINCS);
			TogglePlayerControllable(playerid, true);
		}
		case 1,2: TogglePlayerControllable(playerid, true);
	}
	return true;
}

stock Korozes_Kiad(pid, ki, oka[], szint)
{
	new nev[MAX_PLAYER_NAME];
	
	if(szint == NINCS) format(nev, MAX_PLAYER_NAME, "%s", BoltNevek[ki]);
	else if(ki != INVALID_PLAYER_ID && IsPlayerConnected(ki))
		format(nev, MAX_PLAYER_NAME, "%s", JatekosNev(ki));
	else
		format(nev, MAX_PLAYER_NAME, "Állam (Kamera rendszer)");
	
	new bool:oks;
	if(IsPlayerConnected(pid))
	{
		if(!PlayerInfo[pid][pMaszkVisel] || (PlayerInfo[pid][pMaszkVisel] && (ki != INVALID_PLAYER_ID || IsPlayerConnected(ki))))
		{
			if(Korozes[pid][krSzint] < 5)
				Korozes[pid][krSzint] += (szint == NINCS ? 1 : szint);
			
			format(Korozes[pid][krOka], 64, "%s", oka);
			format(Korozes[pid][krNev], MAX_PLAYER_NAME, "%s", JatekosNev(pid));
			format(Korozes[pid][krKiadta], MAX_PLAYER_NAME, "%s", nev);
			oks = true;
		}
	}
	
	nformat(str, 128, "[Körözés]: Személy: "#COL_MKEK"%s"#COL_FEHER" | Kiadta: "#COL_MKEK"%s", (oks ? JatekosNev(pid, true) : ("Ismeretlen")), nev);
	
	if(ki != INVALID_PLAYER_ID && IsPlayerConnected(ki) && szint != NINCS)
		FrakcioUzenet(COLOR_WHITE, PlayerInfo[ki][pFrakcio], str);
	else
	{
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_KATONA, str);
	}
	
	format(str, 128, "[Körözés]: Vád: "#COL_MKEK"%s", oka);
	if(ki != INVALID_PLAYER_ID && IsPlayerConnected(ki) && szint != NINCS)
		FrakcioUzenet(COLOR_WHITE, PlayerInfo[ki][pFrakcio], str);
	else
	{
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_KATONA, str);
	}
	
	if(oks)
		SFM(pid, COL_VZOLD, "Feljelentettek! Vád: "#COL_MKEK"%s", oka);
	
	return true;
}

stock Korozes_Torol(pid, ki, oka[])
{
	if(!Belepve(pid)) return true;
	
	Korozes[pid][krSzint] = 0;
	format(Korozes[pid][krOka], 64, "[Törölt]: %s", oka);
	format(Korozes[pid][krNev], MAX_PLAYER_NAME, "%s", JatekosNev(pid));
	format(Korozes[pid][krKiadta], MAX_PLAYER_NAME, "%s", (ki == NINCS ? ("Állam") : JatekosNev(ki)));
	
	nformat(str, 128, "[Körözés törlése]: Személy: "#COL_MKEK"%s"#COL_FEHER" | Visszavonta: "#COL_MKEK"%s", JatekosNev(pid, true), (ki == NINCS ? ("Állam") : JatekosNev(ki, true)));
	if(ki != INVALID_PLAYER_ID && IsPlayerConnected(ki))
		FrakcioUzenet(COLOR_WHITE, PlayerInfo[ki][pFrakcio], str);
	else
	{
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_KATONA, str);
	}
	
	format(str, 128, "[Körözés törlése]: Visszavonásának oka: "#COL_MKEK"%s", oka);
	if(ki != INVALID_PLAYER_ID && IsPlayerConnected(ki))
		FrakcioUzenet(COLOR_WHITE, PlayerInfo[ki][pFrakcio], str);
	else
	{
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
		FrakcioUzenet(COLOR_WHITE, FRAKCIO_KATONA, str);
	}
	
	return true;
}

stock bool:Karakter_Ellenorzes( str[] )
{
	new tilos[11][8] =
	{
		{"|"},{"*"},{"'"},{"/"},{";"},
		{"="},{"INSERT"},{"DELETE"},
		{"DROP"},{"SELECT"},{"#"}
	};
	
	new i = NINCS;
	for(;++i < sizeof(tilos);)
	{
		if(strfind(str, tilos[i], true) != NINCS)
			return true;
	}
	
	return false;
}

stock bool:OOC_Ellenorzes(playerid, const cmd[], const str[])
{
	new adds[][] =
	{
		{"class"},{"liverpg"},{"roleplay"},{"role play"},
		{"fay"}, {"klasszon"}, {"seemta"}, {"szímta"},{"rise rpg"},{"szimta"},{"rise"},{"everlife"},{"erpégé"},{"ever life"}
	};
	
	new i = NINCS, helyzet = NINCS;
	for(;++i < sizeof(adds);)
	{
		if(strfind(str, adds[i], true) != NINCS)
		{
			helyzet = i;
			break;
		}
	}
	
	if(helyzet != NINCS)
	{
		AdminUzenet(COLOR_LIGHTRED, 1001, "[Szerverhírdetés]: [%d]%s | Szó: %s | CMD: %s - %s", playerid, JatekosNev(playerid), adds[helyzet], cmd, str);
		nformat(astr, 128, "[%d]%s | Szó: %s | CMD: %s - %s", playerid, JatekosNev(playerid), adds[helyzet], cmd, str);
		Log(FILE_ADDS, astr);
		SFM(playerid, COL_LRED, "Ne hirdess szervert! | Szó: %s", adds[helyzet]);
		return false;
	}
	
	return true;
}

/*stock BilincsFel( pid )
{
	switch( GetPlayerSkin(pid) )
	{
		case 2,7,15,16,17,18,20:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.004000,0.022000,0.022000,20.399993,-16.300025,-39.599998,1.000000,1.000000,1.000000);
		case 1:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.057000,0.026999,-0.001000,-162.899948,31.000005,50.799995,1.000000,1.000000,1.000000);
		case 9,10,12:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.030000,0.027999,0.028000,7.900000,-19.400032,-46.099990,1.000000,1.000000,1.000000);
		case 11,13:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.063999,-0.048000,0.021000,-162.899948,31.000005,50.799995,1.000000,1.000000,1.000000);
		case 14:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.004000,0.048999,0.012999,20.899991,-15.000026,-47.199993,1.000000,1.000000,1.000000);
		case 21,28,30,32,35,36,37,38,44,45,46,47,48,49,53,54,58,60,88,94,95,100,102,114,116,126,129,132,134,142,154,155,159,160,161,162:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,0.936999,2.262998);
		case 167,170,180,185,189,205,171,173,174,175,176,177,179,230,229,231,234,245,247,254,274,281,282,283,288,297,298:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,0.936999,2.262998);
		case 22,66,67,70,98,101,115:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.042000,-0.010000,0.020000,5.499993,-4.799993,-52.800006,1.431999,0.877000,2.506999);
		case 23,24,25,26,29,34,51,52,62,72,73,96,99,108,113,121,122,128,133,146,153,156,158,181,183,184,188,200,206,217,220,221,222,223,250,252,255,258,259:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.053000,0.035999,0.015000,5.499993,-4.799993,-52.800006,1.422000,0.690000,1.607997);
		case 286,292:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.053000,0.035999,0.015000,5.499993,-4.799993,-52.800006,1.422000,0.690000,1.607997);
		case 31,39,40,41,43,55,56,57,63,64,69,76,77,89,90,91,92,93,97,104,106,107,109,110,130,131,136,137,138,139,140,141,145,148,150,152,157,165:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.038000,-0.021999,0.019000,5.499993,-4.799993,-52.800006,1.101000,0.686000,1.902997);
		case 166,169,190,191,192,193,194,195,196,197,198,199,201,207,209,210,211,214,215,216,218,219,224,225,226,227,232,233,237,238,239,243,251,256,257,261:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.038000,-0.021999,0.019000,5.499993,-4.799993,-52.800006,1.101000,0.686000,1.902997);
		case 275,27,290,287,293,294,299:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.034000,0.010000,0.019000,5.499993,-4.799993,-52.800006,1.101000,0.686000,1.902997);
		case 277,278,279,284,285,295:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.015000,-0.007999,0.021000,5.499993,-4.799993,-52.800006,1.101000,0.686000,1.902997);
		case 33:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.002999,0.020000,-0.011000,0.000000,0.000000,-53.699966,1.000000,1.000000,1.000000);
		case 50,59,61,68,112,135,143,147,182,186,187,203,204,212,240,249,260:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.008999,0.034000,-0.001000,0.000000,0.000000,-53.699966,1.268000,1.217000,1.461000);
		case 71,80,81,124,168,241,242:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.028999,0.011999,-0.004000,17.900001,-7.399981,-44.099960,1.268000,1.217000,1.461000);
		case 75,117,118,123,125,163,164,213,228,253,291:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.012999,0.012999,-0.017000,17.900001,-7.399981,-44.099960,0.772000,1.200999,1.511000);
		case 78,79,83,84,111,127:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.020999,0.029000,0.003999,17.900001,-7.399981,-44.099960,1.340000,0.973000,2.218001);
		case 85:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,0.013000,-0.005999,-0.003000,17.900001,-7.399981,-44.099960,1.092000,0.973000,2.218001);
		case 87:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.015999,-0.017999,-0.018000,17.900001,-7.399981,-44.099960,0.455000,0.973000,1.372000);
		case 103:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.046999,0.089000,0.013000,17.900001,-7.399981,-44.099960,2.518000,1.169000,2.128000);
		case 120,246:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.017999,0.060000,0.013000,17.900001,-7.399981,-44.099960,1.451000,1.169000,1.834000);
		case 144:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.017999,0.028000,-0.000999,17.900001,-7.399981,-44.099960,1.199000,1.169000,1.834000);
		case 172,178:
			SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.017999,0.009000,-0.000999,17.900001,-7.399981,-44.099960,0.834000,1.169000,1.499999);
		default: SetPlayerAttachedObject(pid,SLOT_BILINCS,19418,5,-0.004000,0.022000,0.022000,20.399993,-16.300025,-39.599998,1.000000,1.000000,1.000000);	
	}
}*/

stock TeruletFrissites()
{
	foreach(Player, x)
	{
		if(!PlayerInfo[x][pFrakcio]) continue;
		if(FInfo[PlayerInfo[x][pFrakcio]][fLegalis] != FK_LEGAL || Admin(x, FOADMIN_SZINT))
			TeruletekMutatasa(x);
	}
}

stock TeruletekMutatasa(playerid)
{
	new x = -1;
	for(;++x < MAX_TERULET;)
	{
		if(!tInfo[x][tVan]) continue;
		
		GangZoneShowForPlayer(playerid, tInfo[x][tZone], FrakcioSzin[ tInfo[x][tFrakcio] - 1 ]);
		
		if(tInfo[x][tHarcFolyik])
			GangZoneFlashForPlayer(playerid, tInfo[x][tZone], COLOR_INVISIBLE);
		else
			GangZoneStopFlashForPlayer(playerid, tInfo[x][tZone]);
	}
}

stock HarcKieses(playerid, oka[])
{
	new harcu[128], terulet = ServerInfo[0][sHarcVan];
	format(harcu, 128, "[WAR]: %s kiesett a harcból! Oka: %s", JatekosNev(playerid, true), oka);
	
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	SetVirtualWorld(playerid, 0);
	PlayerInfo[playerid][pHarcol] = false;
	
	new vedo, tamado;
	foreach(Player, p)
	{
	    if(!Belepve(p) || GetPlayerVirtualWorld(p) != WAR_VW || playerid == p || !PlayerInfo[p][pHarcol])
			continue;
		
        if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][VEDOK])
			vedo++;
		else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
			tamado++;

		SendClientMessage(p, COLOR_LIGHTRED, harcu);
	}

	//SendFormatMessageToAll(COLOR_LIGHTRED, "[DEBUG]: HarcKieses => Védõ: %d | Támadó: %d", vedo, tamado);
	if(vedo > 0 && tamado > 0)
		return true;

	ServerInfo[0][sHarcVan] = -1;
	tInfo[terulet][tHarcFolyik] = false;
	GangZoneStopFlashForAll(tInfo[terulet][tZone]);

	if(vedo < 1)
	{
		foreach(Player, p)
		{
		    if(!Belepve(p))
				continue;
			
			if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][VEDOK])
				SendFormatMessage(p, COLOR_WHITE, "[WAR]: Elvesztettétek a(z) "#COL_MKEK"%s"#COL_FEHER" területet!", tInfo[terulet][tNev]);
			else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
				SendFormatMessage(p, COLOR_WHITE, "[WAR]: Sikeresen megszereztétek a(z) "#COL_MKEK"%s"#COL_FEHER" területet!", tInfo[terulet][tNev]);
		}
		
		tInfo[terulet][tFrakcio] = tInfo[terulet][tHarcolok][TAMADOK];
		FInfo[tInfo[terulet][tHarcolok][TAMADOK]][fUtolsoTamadas] = gettime();
	}
	else if(tamado < 1)
	{
	    foreach(Player, p)
		{
		    if(!Belepve(p))
				continue;
		    
			if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][VEDOK])
				SendFormatMessage(p, COLOR_WHITE, "[WAR]: A támadók elbuktak, így sikeresen megvédtétek a(z) "#COL_MKEK"%s"#COL_FEHER" területet!", tInfo[terulet][tNev]);
			else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
				SendClientMessage(p, COLOR_WHITE, "[WAR]: A támadás sikertelen volt, mindenki elbukott!");
		}
		
		FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fUtolsoTamadas] = gettime();
	}

	tInfo[terulet][tFoglalasIdo] = gettime();

	foreach(Player, p)
	{
	    if(!Belepve(p))
			continue;
	    
		if(GetPlayerVirtualWorld(p) == WAR_VW && PlayerInfo[p][pHarcol])
		{
			SendClientMessage(p, COLOR_LIGHTRED, "[WAR]: 5 másodperc múlva a rendszer visszarak az alap VirtualWorld-be!");
			Freeze(p, 10000);
			SetTimerEx("HarcVege", 5000, false, "d", p);
		}
	}
	
	foreach(Jarmuvek, x)
	{
		if(GetVehicleVirtualWorld(x) == WAR_VW)
			SetVehicleVirtualWorld(x, 0);
	}
	
	TeruletFrissites();
	return 1;
}

funkcio HarcVege(playerid)
{
	SetVirtualWorld(playerid, 0);
	PlayerInfo[playerid][pHarcol] = false;
	SetPlayerWorldBounds(playerid, 20000.0000, -20000.0000, 20000.0000, -20000.0000);
	
	ClearAnimations(playerid);
	SetHealth(playerid, MAX_HP);
}

stock bool:KapuEngedely(playerid, kapu)
{
	if(kapu < 0 || kapu >= MAX_KAPU || !Kapu[kapu][kVan]) return false;
	if(Kapu[kapu][kKod] != NINCS) return true;
 	if(Kapu[kapu][kHasznalo][0] == 0) return false;

	new bool:ok, val;
	for(new h = 0; h < MAX_KAPU_HASZNALO; h++)
	{
		val = Kapu[kapu][kHasznalo][h];
		switch(val)
		{
			// frakciók
			case 1..99: ok = ( PlayerInfo[playerid][pFrakcio] == val );
		}
		if(ok) break;
	}
	return ok;
}

stock SetPlayerAttachedWeapon(playerid, bool:csaktorles = false)
{
	if(IsPlayerNPC(playerid) || !Belepve(playerid))
		return true;
	
	if(csaktorles)
	{
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER1);
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER2);
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER3);
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER4);
		return true;
	}
	
    new armed, fegyver[4], tolteny[4];
    armed = PlayerInfo[playerid][pFegyver];
	
	// Shotgun + Sawnoff + Combat
	fegyver[1] = PlayerInfo[playerid][pFegyverek][3];
	tolteny[1] = PlayerInfo[playerid][pToltenyek][3];
	
    // MP5 + Uzi + Tec
    fegyver[0] = PlayerInfo[playerid][pFegyverek][4];
	tolteny[0] = PlayerInfo[playerid][pToltenyek][4];
    
    // M4 + AK47
    fegyver[2] = PlayerInfo[playerid][pFegyverek][5];
	tolteny[2] = PlayerInfo[playerid][pToltenyek][5];
    
    // Rifle + Sniper
    fegyver[3] = PlayerInfo[playerid][pFegyverek][6];
	tolteny[3] = PlayerInfo[playerid][pToltenyek][6];
    
    if((fegyver[0] && (tolteny[0] > 0)) && (armed != fegyver[0]))
        SetPlayerAttachedObject(playerid, SLOT_FEGYVER1, GetWeaponModel(fegyver[0]), 7, 0.08, -0.08, -0.09, 280, 10, 5, 1.0, 1.0, 1.0);
    else //if(IsPlayerAttachedObjectSlotUsed(playerid, 0))
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER1);
    
    if((fegyver[1] && (tolteny[1] > 0)) && (armed != fegyver[1]))
        SetPlayerAttachedObject(playerid, SLOT_FEGYVER2, GetWeaponModel(fegyver[1]), 8, -0.1, -0.1, 0.14, 270, 0, 5, 1.0, 1.0, 1.0);
    else //if(IsPlayerAttachedObjectSlotUsed(playerid, 1))
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER2);
        
    if((fegyver[2] && (tolteny[2] > 0)) && (armed != fegyver[2]))
        SetPlayerAttachedObject(playerid, SLOT_FEGYVER3, GetWeaponModel(fegyver[2]), 1, -0.25, -0.07, -0.05, 180, 10, 15, 1.0, 1.0, 1.0);
    else //if(IsPlayerAttachedObjectSlotUsed(playerid, 2))
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER3);
        
    if((fegyver[3] && (tolteny[3] > 0)) && (armed != fegyver[3]))
        SetPlayerAttachedObject(playerid, SLOT_FEGYVER4, GetWeaponModel(fegyver[3]), 1, -0.25, -0.1, 0.15, 180, 5, 15, 1.0, 1.0, 1.0);
    else //if(IsPlayerAttachedObjectSlotUsed(playerid, 3))
		RemovePlayerAttachedObject(playerid, SLOT_FEGYVER4);
		
	return true;
}

stock GetWeaponModel(weaponid)
{
	switch(weaponid)
	{
	    case 1:
	        return 331;

		case 2..8:
		    return weaponid+331;

        case 9:
		    return 341;

		case 10..15:
			return weaponid+311;

		case 16..18:
		    return weaponid+326;

		case 22..29:
		    return weaponid+324;

		case 30,31:
		    return weaponid+325;

		case 32:
		    return 372;

		case 33..45:
		    return weaponid+324;

		case 46:
		    return 371;
	}
	return false;
}

stock GetGunSlot(fegyo)
{
	if(fegyo < 0 || fegyo >= sizeof(aWeaponSlotok))
		return 0;
	return aWeaponSlotok[fegyo];
}

stock GetGunID(string[])
{
	new fegyo;
	for(new x = 0; x < sizeof(aWeaponNames); x++)
	{
		if(egyezik(string, aWeaponNames[x]))
		{
			fegyo = x;
			break;
		}
	}
	
	return fegyo;
}

stock NumPlayerWeapons(playerid)
{
	new visszateres = 0, i = -1, weapons[13][2];
	for(;++i < 13;)
	{
		GetPlayerWeaponData(playerid, i, weapons[i][0], weapons[i][1]);
		if(weapons[i][0] == 46) continue;
		if(weapons[i][0] && weapons[i][1])
		{
			visszateres++;
		}
	}
	return visszateres;
}

stock EngedelyStr(playerid)
{
	new str[256], i = -1;
	
	for(;++i < MAX_ENGEDELY;)
		format(str, 64, "%s%d,", str, PlayerInfo[playerid][pEngedely][i]);
	
	str[strlen(str) - 1] = '\0';
	
	return str;
}

stock GetFractionPay( fk )
{
	new str[256], i = -1;
	
	for(;++i < 16;)
		format(str, 64, "%s%d,", str, FInfo[ fk ][fFizetes][i]);
	
	str[strlen(str) - 1] = '\0';
	
	return str;
}

stock GetFractionWeapons(fractionid)
{
	new fegy[256], i = -1;
	
	for(;++i < 50;)
		format(fegy, 64, "%s%d,", fegy, FInfo[fractionid][fFegyverek][i]);
	
	fegy[strlen(fegy) - 1] = '\0';
	
	return fegy;
}

stock GetFractionAmmos(fractionid)
{
	new fegy[256], i = -1;
	
	for(;++i < 50;)
		format(fegy, 64, "%s%d,", fegy, FInfo[fractionid][fToltenyek][i]);
	
	fegy[strlen(fegy) - 1] = '\0';
	
	return fegy;
}

stock GetPlayerBoltCucc( playerid )
{
	new str[256], i = NINCS;
	
	for(;++i < 50;)
		format(str, 64, "%s%d,", str, PlayerInfo[playerid][pBoltCucc][i]);
	
	str[strlen(str) - 1] = '\0';
	
	return str;
}

stock GetUserWeapons(playerid)
{
	new fegy[64], i = -1;
	
	for(;++i < 13;)
	{
		if(PlayerInfo[playerid][pDuty]) format(fegy, 64, "%s0,", fegy);
		else if(PlayerInfo[playerid][pPaintBall][0] != 0) format(fegy, 64, "%s%d,", fegy, PlayerInfo[playerid][pPBFegyverek][i]);
		else format(fegy, 64, "%s%d,", fegy, PlayerInfo[playerid][pFegyverek][i]);
	}
	
	fegy[strlen(fegy) - 1] = '\0';
	
	return fegy;
}

stock GetUserWeaponsAmmo(playerid)
{
	new fegy[64], i = -1;
	
	for(;++i < 13;)
	{
		if(PlayerInfo[playerid][pDuty]) format(fegy, 64, "%s0,", fegy);
		else if(PlayerInfo[playerid][pPaintBall][0] != 0) format(fegy, 64, "%s%d,", fegy, PlayerInfo[playerid][pPBToltenyek][i]);
		else format(fegy, 64, "%s%d,", fegy, PlayerInfo[playerid][pToltenyek][i]);
	}
	
	fegy[strlen(fegy) - 1] = '\0';
	
	return fegy;
}

stock bool:IsPlayerInAnyTruck(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid))
		return false;
		
    switch(GetVehicleModel(GetPlayerVehicleID(playerid)))
    {
        case 403, 514, 515, 578: return true;
        default: return false;
    }
    return false;
}

stock GenerateTruckRoad(&start, &cel)
{
	new st = random(sizeof(KamionUtak)), ce;
	start = st;
	while(st != (ce = random(sizeof(KamionUtak))))
	{
	    cel = ce;
	    break;
	}
	return true;
}
public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(PlayerInfo[playerid][pTog][12])
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        SetHealth(playerid, 150); //Állítsa az életet 150-re
	        RepairVehicle(vehicleid); //Javítsa meg a kocsit
	    }
	}
	return true;
}
public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	if(PlayerInfo[playerid][pTV][2] != NINCS)
	{
		PlayerSpectatePlayer(PlayerInfo[playerid][pTV][2], playerid);
	}
	return 1;
}
public OnPlayerStateChange(playerid, newstate, oldstate) // opsc
{
	if(!IsPlayerNPC(playerid))
	{
		if(newstate == PLAYER_STATE_ONFOOT)
		{
			if(PlayerInfo[playerid][pTV][2] != NINCS)
				PlayerSpectatePlayer(PlayerInfo[playerid][pTV][2], playerid);
		}
		if(newstate == PLAYER_STATE_PASSENGER)
		{
			new vehicleid = GetPlayerVehicleID(playerid);

			if(PlayerInfo[playerid][pTV][2] != NINCS)
				PlayerSpectateVehicle(PlayerInfo[playerid][pTV][2], vehicleid);
		}
		if(newstate == PLAYER_STATE_DRIVER)
		{
			/*if(PlayerInfo[playerid][pCarEntering] <= 5)
			{
				nformat(log, 256, "<< AntiCheat: Jármûbe beteleportálás: [%d]%s - %dmp >>", playerid, JatekosNev(playerid), PlayerInfo[playerid][pCarEntering]);
				Log(FILE_CHEAT, log);
			}*/
			
			PlayerInfo[playerid][pCarEnterTime] = GetTickCount();
		}
		else if(oldstate == PLAYER_STATE_DRIVER && (GetTickCount() - PlayerInfo[playerid][pCarEnterTime]) < 220)
		{
			PlayerInfo[playerid][pCarFloodTime] += 2;
			PlayerInfo[playerid][pCarFlood]++;
			if(PlayerInfo[playerid][pCarFlood] < 3)
			{
				nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: CarFlood - %dx", playerid, JatekosNev(playerid), PlayerInfo[playerid][pCarFlood]);
				Log(FILE_CHEAT, string);
				
				if(PlayerInfo[playerid][pCarFlood] >= 2)
					AdminUzenetEx(COLOR_WHITE, 1001, string);
					
			} else {
			
				if(!PlayerInfo[playerid][pBanFlood])
				{
					nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: CarFlood - %dx (%s)", playerid, JatekosNev(playerid), PlayerInfo[playerid][pCarFlood], (Admin(playerid, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
					AdminUzenetEx(COLOR_WHITE, 1001, string);
					Log(FILE_CHEAT, string);
				}
				
				if(!Admin(playerid, FOADMIN_SZINT))
					ServerBan(playerid, 0, "[AC] CarFlood", NINCS, (!Belepve(playerid) ? true : false), true, true);
					
				return true;
			}
		}
	}
		
	if(newstate == PLAYER_STATE_ONFOOT && PlayerInfo[playerid][pSK] != 0)
		PlayerInfo[playerid][pSK] = 0;
	if(newstate == PLAYER_STATE_DRIVER)
	{
		new newcar = GetPlayerVehicleID(playerid);
		KocsiUtolsoHasznalat[newcar] = gettime();


		new id;
		if(IsPlayerInAnyVehicle(playerid))
			id = JarmuID( GetPlayerVehicleID(playerid), playerid );
	
		if(id)
		{
			if(IsABicikli( vInfo[ id ][vModel] ))
				PlayerInfo[playerid][pSK] = 40;
		}
	}
		
	return true;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(!PlayerInfo[playerid][pValtozott] && clickedid == Text:INVALID_TEXT_DRAW)
		return DeleteKeyPad(playerid);

	return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	#if ACCOUNT_KEZELES == 1
	
	if(playertextid == LoginDraw[playerid][3])
	{
		CancelSelectTextDraw(playerid);
		ShowPlayerDialog(playerid, DIALOG_LOGIN_USER_INPUT, DIALOG_STYLE_INPUT, #COL_FEHER"Felhasználónév", #COL_FEHER"Kérlek írd be a alábbi mezõbe a(z) UserCP felhasználóneved!", "Mehet", "Mégse");
		return true;
	}
	if(playertextid == LoginDraw[playerid][5])
	{
		CancelSelectTextDraw(playerid);
		ShowPlayerDialog(playerid, DIALOG_LOGIN_PW_INPUT, DIALOG_STYLE_PASSWORD, #COL_FEHER"Jelszó", #COL_FEHER"Kérlek írd be a alábbi mezõbe a(z) UserCP jelszavad!", "Mehet", "Mégse");
		return true;
	}
	if(playertextid == LoginDraw[playerid][6])
	{
		CancelSelectTextDraw(playerid);
		
		if((4 > strlen(UserControl[playerid][uUserName])) || (24 < strlen(UserControl[playerid][uUserName])) || (4 > strlen(UserControl[playerid][uPassword])) || (24 < strlen(UserControl[playerid][uPassword])))
			return SelectTextDraw(playerid, 0xF7C25EAA), SCM(playerid, COL_LRED, "A felhasználónév, vagy a jelszó hosszúsága nem megfelelõ!");
		
		nformat(queryc, 256, "SELECT * FROM `"#MYSQL_ACCOUNT_TABLA"` WHERE Felhasznalonev = '%s' AND Jelszo = '%s'", escape(UserControl[playerid][uUserName]), MD5_Hash(UserControl[playerid][uPassword]));
		mysql_tquery(sql_ID, queryc, "CheckPlayer", "i", playerid);
		return true;
	}
	if(playertextid == CharacterDraw[playerid][2])
	{
		if(!UserControl[playerid][uKarakter][0])
			return SCM(playerid, COL_MKEK, "Ezen a sloton nincs karaktered, kérlek regisztrálj egyet a UserCP-n!");
		
/*		if(UserControl[playerid][uKarakterA][0] == 0)
		{
			SCM(playerid,COL_MKEK,"Ez a karakter még nincs megerõsítve! Kérlek várj, míg egy Adminisztrátor aktiválja azt!");
			return true;
		}
*/

		//if(UserControl[playerid][uKarakterO][0] == 1)
		new bool:van;
		foreach(Player, i)
		{
			if(!Belepve(i)) continue;
			if(PlayerInfo[i][pID] == UserControl[playerid][uKarakter][0])
				van = true;
		}
		
		if(van)
			return SCM(playerid, COL_MKEK, "Ez a karakter jelenleg is online! Kérlek válassz másikat!");
		
		CancelSelectTextDraw(playerid);
		
		nformat(qrq, 128, "SELECT * FROM `"#MYSQL_BAN_TABLA"` WHERE Cim = '%s'", UserControl[playerid][uKNev1]);
		mysql_tquery(sql_ID, qrq, "BanCheck", "ii", playerid, 1);
		return true;
	}
	if(playertextid == CharacterDraw[playerid][3])
	{
		if(!UserControl[playerid][uKarakter][1])
			return SCM(playerid, COL_MKEK, "Ezen a sloton nincs karaktered, kérlek regisztrálj egyet a UserCP-n!");
			
/*		if(UserControl[playerid][uKarakterA][1] == 0)
		{
			SCM(playerid,COL_MKEK,"Ez a karakter még nincs aktiválva! Kérlek várj, míg egy Adminisztrátor aktiválja azt!");
			return true;
		}*/
		//if(UserControl[playerid][uKarakterO][1] == 1)
			//return SCM(playerid, COL_MKEK, "Ez a karakter jelenleg is online! Kérlek válassz másikat!");
			
		new bool:van;
		foreach(Player, i)
		{
			if(!Belepve(i)) continue;
			if(PlayerInfo[i][pID] == UserControl[playerid][uKarakter][1])
				van = true;
		}
		
		if(van)
			return SCM(playerid, COL_MKEK, "Ez a karakter jelenleg is online! Kérlek válassz másikat!");
		
		CancelSelectTextDraw(playerid);
		
		nformat(qrq, 128, "SELECT * FROM `"#MYSQL_BAN_TABLA"` WHERE Cim = '%s'", UserControl[playerid][uKNev2]);
		mysql_tquery(sql_ID, qrq, "BanCheck", "ii", playerid, 2);
		return true;
	}
	
	#endif
	
    if(PlayerInfo[playerid][pMelyikKapu] > NINCS)
	{
		new kulcs = -1;

		if(playertextid == Gombok[playerid][0])
			kulcs = 1;
		if(playertextid == Gombok[playerid][1])
			kulcs = 2;
		if(playertextid == Gombok[playerid][2])
			kulcs = 3;
		if(playertextid == Gombok[playerid][3])
			kulcs = 4;
		if(playertextid == Gombok[playerid][4])
			kulcs = 5;
		if(playertextid == Gombok[playerid][5])
			kulcs = 6;
		if(playertextid == Gombok[playerid][6])
			kulcs = 7;
		if(playertextid == Gombok[playerid][7])
			kulcs = 8;
		if(playertextid == Gombok[playerid][8])
			kulcs = 9;
		if(playertextid == Gombok[playerid][9])
			kulcs = 0;

		CallLocalFunction("OnPlayerPressKeyPad", "iii", playerid, Kapu[PlayerInfo[playerid][pMelyikKapu]][kKod], kulcs);
		return true;
	}
	return false;
}
//Matteo funkcio
funkcio Kocsijavit(playerid,kocsi,vid,osszeg,KiszallasOsszeg)
{
	RepairVehicle(kocsi);
	SetVehicleHealth(kocsi, 1000.0);
	
	vInfo[vid][vElet] = 1000.0;
	vehicleh[ kocsi ] = 1000.0;
	vUpdate(vid, vuElet);
	
	Cselekves(playerid,"megjavította a jármûvet.",0);
	TogglePlayerControllable(playerid,true);
	
	if(vInfo[vid][vMunka] == PlayerInfo[playerid][pFrakcio])						//Saját frakció jármû javítása
	{
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] -= (osszeg / 8);										//A 20%-at levonja a széfbõl.
		SendFormatMessage(playerid, COLOR_WHITE, "A szerelés költsége 0 $-volt, anyagár %d-$ melyet a frakciód széfjébõl levontunk.", (osszeg / 8));
	}
	else
	{
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] -= osszeg + KiszallasOsszeg;
		SendFormatMessage(playerid, COLOR_WHITE, "A szerelés költsége %d -$ volt, ebbõl %d-$ volt az anyagköltség.", osszeg, (osszeg / 8));
		if(KiszallasOsszeg > 1)
			SendFormatMessage(playerid, COLOR_WHITE, "A kiszállási díj: %d-$. Melyet a frakció széfbe utaltunk",KiszallasOsszeg);
		SendClientMessage(playerid, COLOR_WHITE, "===============================================");
		SendFormatMessage(playerid, COLOR_WHITE, "Összesen %d-$ -ot vontunk le a Frakció Széfbõl.", (osszeg + KiszallasOsszeg));
		SendFormatMessage(playerid, COLOR_WHITE, "Összesen %d-$ került be a széfbe", ((osszeg - (osszeg / 8)) + KiszallasOsszeg));
		SendClientMessage(playerid, COLOR_WHITE, "===============================================");
	}	
}

funkcio OnPlayerPressKeyPad(playerid, kapu, keynum)
{
	new formatocska[128];
	format(formatocska, sizeof(formatocska), "%d", kapu);
	new hossz = strlen(formatocska);
	
	if(strlen(Szamok[playerid]) != hossz)
	{
		format(formatocska, sizeof(formatocska), "%d", keynum);

		strins(Szamok[playerid], formatocska, strlen(Szamok[playerid]));

		new i = -1, text[7];
		for(;++i < strlen(Szamok[playerid]);)
			strins(text, "]", strlen(text));

		PlayerTextDrawSetString(playerid, Kellek[playerid][0], text);
	}

	if(strlen(Szamok[playerid]) == hossz)
	{
		if(strval(Szamok[playerid]) == kapu)
		{
			PlayerPlaySound(playerid, 21002, 0.0, 0.0, 0.0);
			PlayerInfo[playerid][pValtozott] = true;
			PlayerTextDrawBoxColor(playerid, Jelzes[playerid][1], 16711935);
			PlayerTextDrawHide(playerid, Jelzes[playerid][1]);
			PlayerTextDrawShow(playerid, Jelzes[playerid][1]);

			if(Kapu[PlayerInfo[playerid][pMelyikKapu]][kMozgo])
				MoveDynamicObject(Kapu[PlayerInfo[playerid][pMelyikKapu]][kOID], PosExt(Kapu[PlayerInfo[playerid][pMelyikKapu]][kNPos]), Kapu[PlayerInfo[playerid][pMelyikKapu]][kSpeed]);
			else
			{
				SetDynamicObjectPos(Kapu[PlayerInfo[playerid][pMelyikKapu]][kOID], PosExt(Kapu[PlayerInfo[playerid][pMelyikKapu]][kNPos]));
				SetDynamicObjectRot(Kapu[PlayerInfo[playerid][pMelyikKapu]][kOID], PosExt(Kapu[PlayerInfo[playerid][pMelyikKapu]][kNRPos]));
			}
			PlayerInfo[playerid][pMelyikKapu] = NINCS;
			SetTimerEx("VisszaAllitas", 2000, false, "ii", playerid, 1);

		} else {
			PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
			PlayerInfo[playerid][pValtozott] = true;
			PlayerTextDrawBoxColor(playerid, Jelzes[playerid][0], -16776961);
			PlayerTextDrawHide(playerid, Jelzes[playerid][0]);
			PlayerTextDrawShow(playerid, Jelzes[playerid][0]);
			SetTimerEx("VisszaAllitas", 2000, false, "ii", playerid, 0);
		}
		
		CancelSelectTextDraw(playerid);
		Szamok[playerid][0] = EOS;
	}
	return true;
}

funkcio VisszaAllitas(playerid, jelzes)
{
	PlayerTextDrawSetString(playerid, Kellek[playerid][0], "_");
	switch(jelzes)
	{
		case 0: { PlayerTextDrawBoxColor(playerid, Jelzes[playerid][0], -2147483393); PlayerTextDrawHide(playerid, Jelzes[playerid][0]); PlayerTextDrawShow(playerid, Jelzes[playerid][0]); }
		case 1: return DeleteKeyPad(playerid);
	}
	PlayerInfo[playerid][pValtozott] = false;
	SelectTextDraw(playerid, 0xF7C25EAA);
	return true;
}

stock CreateKeyPad(playerid)
{
	Kellek[playerid][0] = CreatePlayerTextDraw(playerid, 547.199951, 197.866531, "_");
	PlayerTextDrawLetterSize(playerid, Kellek[playerid][0], 0.394800, 1.861332);
	PlayerTextDrawTextSize(playerid, Kellek[playerid][0], 544.799072, -107.519882);
	PlayerTextDrawAlignment(playerid, Kellek[playerid][0], 2);
	PlayerTextDrawColor(playerid, Kellek[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, Kellek[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, Kellek[playerid][0], 60);
	PlayerTextDrawSetShadow(playerid, Kellek[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Kellek[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, Kellek[playerid][0], 51);
	PlayerTextDrawFont(playerid, Kellek[playerid][0], 2);
	PlayerTextDrawSetProportional(playerid, Kellek[playerid][0], 1);

	Kellek[playerid][1] = CreatePlayerTextDraw(playerid, 606.400085, 193.386672, "~n~~n~~n~");
	PlayerTextDrawLetterSize(playerid, Kellek[playerid][1], 0.454800, 6.572803);
	PlayerTextDrawTextSize(playerid, Kellek[playerid][1], 488.799896, -0.746670);
	PlayerTextDrawAlignment(playerid, Kellek[playerid][1], 1);
	PlayerTextDrawColor(playerid, Kellek[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, Kellek[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, Kellek[playerid][1], 60);
	PlayerTextDrawSetShadow(playerid, Kellek[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Kellek[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Kellek[playerid][1], 51);
	PlayerTextDrawFont(playerid, Kellek[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Kellek[playerid][1], 1);

	Gombok[playerid][0] = CreatePlayerTextDraw(playerid, 512.000000, 225.493255, "1");
	PlayerTextDrawLetterSize(playerid, Gombok[playerid][0], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[playerid][0], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[playerid][0], 2);
	PlayerTextDrawColor(playerid, Gombok[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, Gombok[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, Gombok[playerid][0], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[playerid][0], 51);
	PlayerTextDrawFont(playerid, Gombok[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[playerid][0], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[playerid][0], true);

	Gombok[playerid][1] = CreatePlayerTextDraw(playerid, 546.599792, 225.000000, "2");
	PlayerTextDrawLetterSize(playerid, Gombok[playerid][1], 0.483599, 2.286931);
	PlayerTextDrawTextSize(playerid, Gombok[playerid][1], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[playerid][1], 2);
	PlayerTextDrawColor(playerid, Gombok[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, Gombok[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, Gombok[playerid][1], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[playerid][1], 51);
	PlayerTextDrawFont(playerid, Gombok[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[playerid][1], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[playerid][1], true);

	Gombok[playerid][2] = CreatePlayerTextDraw(playerid, 581.199707, 225.253295, "3");
	PlayerTextDrawLetterSize(playerid, Gombok[playerid][2], 0.485199, 2.197331);
	PlayerTextDrawTextSize(playerid, Gombok[playerid][2], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[playerid][2], 2);
	PlayerTextDrawColor(playerid, Gombok[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, Gombok[playerid][2], true);
	PlayerTextDrawBoxColor(playerid, Gombok[playerid][2], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[playerid][2], 51);
	PlayerTextDrawFont(playerid, Gombok[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[playerid][2], true);

	Gombok[playerid][3] = CreatePlayerTextDraw(playerid, 511.400024, 257.853332, "4");
	PlayerTextDrawLetterSize(playerid, Gombok[playerid][3], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[playerid][3], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[playerid][3], 2);
	PlayerTextDrawColor(playerid, Gombok[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, Gombok[playerid][3], true);
	PlayerTextDrawBoxColor(playerid, Gombok[playerid][3], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[playerid][3], 51);
	PlayerTextDrawFont(playerid, Gombok[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[playerid][3], true);

	Gombok[playerid][4] = CreatePlayerTextDraw(playerid, 547.599853, 258.106658, "5");
	PlayerTextDrawLetterSize(playerid, Gombok[playerid][4], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[playerid][4], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[playerid][4], 2);
	PlayerTextDrawColor(playerid, Gombok[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, Gombok[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, Gombok[playerid][4], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[playerid][4], 51);
	PlayerTextDrawFont(playerid, Gombok[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[playerid][4], true);

	Gombok[playerid][5] = CreatePlayerTextDraw(playerid, 582.199829, 257.613311, "6");
	PlayerTextDrawLetterSize(playerid, Gombok[playerid][5], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[playerid][5], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[playerid][5], 2);
	PlayerTextDrawColor(playerid, Gombok[playerid][5], -1);
	PlayerTextDrawUseBox(playerid, Gombok[playerid][5], true);
	PlayerTextDrawBoxColor(playerid, Gombok[playerid][5], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[playerid][5], 51);
	PlayerTextDrawFont(playerid, Gombok[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[playerid][5], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[playerid][5], true);

	Gombok[playerid][6] = CreatePlayerTextDraw(playerid, 511.599945, 289.466766, "7");
	PlayerTextDrawLetterSize(playerid, Gombok[playerid][6], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[playerid][6], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[playerid][6], 2);
	PlayerTextDrawColor(playerid, Gombok[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, Gombok[playerid][6], true);
	PlayerTextDrawBoxColor(playerid, Gombok[playerid][6], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[playerid][6], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[playerid][6], 51);
	PlayerTextDrawFont(playerid, Gombok[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[playerid][6], true);

	Gombok[playerid][7] = CreatePlayerTextDraw(playerid, 547.799865, 289.720092, "8");
	PlayerTextDrawLetterSize(playerid, Gombok[playerid][7], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[playerid][7], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[playerid][7], 2);
	PlayerTextDrawColor(playerid, Gombok[playerid][7], -1);
	PlayerTextDrawUseBox(playerid, Gombok[playerid][7], true);
	PlayerTextDrawBoxColor(playerid, Gombok[playerid][7], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[playerid][7], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[playerid][7], 51);
	PlayerTextDrawFont(playerid, Gombok[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[playerid][7], true);

	Gombok[playerid][8] = CreatePlayerTextDraw(playerid, 582.399902, 289.226745, "9");
	PlayerTextDrawLetterSize(playerid, Gombok[playerid][8], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[playerid][8], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[playerid][8], 2);
	PlayerTextDrawColor(playerid, Gombok[playerid][8], -1);
	PlayerTextDrawUseBox(playerid, Gombok[playerid][8], true);
	PlayerTextDrawBoxColor(playerid, Gombok[playerid][8], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[playerid][8], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[playerid][8], 51);
	PlayerTextDrawFont(playerid, Gombok[playerid][8], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[playerid][8], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[playerid][8], true);

	Gombok[playerid][9] = CreatePlayerTextDraw(playerid, 547.399963, 321.586791, "0");
	PlayerTextDrawLetterSize(playerid, Gombok[playerid][9], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Gombok[playerid][9], 27.00000, 22.399993);
	PlayerTextDrawAlignment(playerid, Gombok[playerid][9], 2);
	PlayerTextDrawColor(playerid, Gombok[playerid][9], -1);
	PlayerTextDrawUseBox(playerid, Gombok[playerid][9], true);
	PlayerTextDrawBoxColor(playerid, Gombok[playerid][9], 5832791);
	PlayerTextDrawSetShadow(playerid, Gombok[playerid][9], 0);
	PlayerTextDrawSetOutline(playerid, Gombok[playerid][9], 1);
	PlayerTextDrawBackgroundColor(playerid, Gombok[playerid][9], 51);
	PlayerTextDrawFont(playerid, Gombok[playerid][9], 1);
	PlayerTextDrawSetProportional(playerid, Gombok[playerid][9], 1);
	PlayerTextDrawSetSelectable(playerid, Gombok[playerid][9], true);

	Jelzes[playerid][0] = CreatePlayerTextDraw(playerid, 511.600067, 321.093444, "_");
	PlayerTextDrawLetterSize(playerid, Jelzes[playerid][0], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Jelzes[playerid][0], 536.799682, 22.399993);
	PlayerTextDrawAlignment(playerid, Jelzes[playerid][0], 2);
	PlayerTextDrawColor(playerid, Jelzes[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, Jelzes[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, Jelzes[playerid][0], -2147483393);
	PlayerTextDrawSetShadow(playerid, Jelzes[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Jelzes[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, Jelzes[playerid][0], 51);
	PlayerTextDrawFont(playerid, Jelzes[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Jelzes[playerid][0], 1);

	Jelzes[playerid][1] = CreatePlayerTextDraw(playerid, 582.199829, 321.346771, "_");
	PlayerTextDrawLetterSize(playerid, Jelzes[playerid][1], 0.485199, 2.159998);
	PlayerTextDrawTextSize(playerid, Jelzes[playerid][1], 536.799682, 22.399993);
	PlayerTextDrawAlignment(playerid, Jelzes[playerid][1], 2);
	PlayerTextDrawColor(playerid, Jelzes[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, Jelzes[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, Jelzes[playerid][1], 8388863);
	PlayerTextDrawSetShadow(playerid, Jelzes[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Jelzes[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Jelzes[playerid][1], 51);
	PlayerTextDrawFont(playerid, Jelzes[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Jelzes[playerid][1], 1);

	KapuNev[playerid] = CreatePlayerTextDraw(playerid, 547.200012, 353.919921, "Yakuza kapu");
	PlayerTextDrawLetterSize(playerid, KapuNev[playerid], 0.231600, 1.137066);
	PlayerTextDrawTextSize(playerid, KapuNev[playerid], 5.600007, 93.333305);
	PlayerTextDrawAlignment(playerid, KapuNev[playerid], 2);
	PlayerTextDrawColor(playerid, KapuNev[playerid], -1);
	PlayerTextDrawUseBox(playerid, KapuNev[playerid], true);
	PlayerTextDrawBoxColor(playerid, KapuNev[playerid], -1378294221);
	PlayerTextDrawSetShadow(playerid, KapuNev[playerid], 0);
	PlayerTextDrawSetOutline(playerid, KapuNev[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, KapuNev[playerid], 51);
	PlayerTextDrawFont(playerid, KapuNev[playerid], 1);
	PlayerTextDrawSetProportional(playerid, KapuNev[playerid], 1);
	return true;
}

stock DeleteKeyPad(playerid)
{
	for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, Kellek[playerid][i]);
	for(new i = 0; i < 10; i++) PlayerTextDrawHide(playerid, Gombok[playerid][i]);
	for(new i = 0; i < 2; i++) PlayerTextDrawHide(playerid, Jelzes[playerid][i]);
	PlayerTextDrawHide(playerid, KapuNev[playerid]);

	Szamok[playerid][0] = EOS;
	return true;
}

funkcio MoveTrashBack(trashid)
{
	new Float:vpos[4];
	new Float:unused[2];
	
	GetDynamicObjectPos(Kuka[trashid][kID], vpos[0], vpos[1], vpos[2]);
	GetDynamicObjectRot(Kuka[trashid][kID], unused[0], unused[1], vpos[3]);
	
	// 0.00000, -3.94000, 0.76000,   -120.00000, 0.00000, 0.00000
	
	MoveDynamicObject(Kuka[trashid][kID], vpos[0], vpos[1], vpos[2] - 1.52000, 1.0, 0.0, 0.0, vpos[3]);
	Kuka[trashid][kFazis] = 2;
	
	return true;
}

stock JatekosIP(playerid)
{
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

stock IsNumeric(const string[]) {
	new length=strlen(string);
	if (length==0) return false;
	for (new i = 0; i < length; i++) {
		if (
		(string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+')
		|| (string[i]=='-' && i!=0)
		|| (string[i]=='+' && i!=0)
		) return false;
	}
	if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
	return true;
}

stock ServerBan(kit, ido = 0, oka[], tilto = NINCS, bool:ipban = false, bool:kick = true, bool:szoveg = false)
{
	if(PlayerInfo[kit][pBanFlood])//mert szar a samp kick és raktam bele késleltetést, így több rekordot is bevihet sajnos....
	{
		printf("Szerver: Ban - AntiFlood - %s | Oka: %s", JatekosNev(kit), oka);
		return true;
	}

	PlayerInfo[kit][pBanFlood] = true;
	new tipus[5], cim[30], bannolo[30];
	if(ipban) tipus = "ip";
	else tipus = "nev";

	if(ipban) strmid(cim, JatekosIP(kit), 0, strlen(JatekosIP(kit)), 30);
	else strmid(cim, PlayerInfo[kit][pNev], 0, strlen(PlayerInfo[kit][pNev]), 30);

	if(tilto == NINCS) bannolo = "Rendszer";
	else strmid(bannolo, PlayerInfo[tilto][pNev], 0, strlen(PlayerInfo[tilto][pNev]), 30);
	
	new uIdo;
	if(ido) uIdo = gettime() + (60*60*ido);
	
	new year, month, day;
	getdate(year, month, day);
	
	new ev, ho, nap, ora, perc, mperc;
	uDate(uIdo, ev, ho, nap, ora, perc, mperc, 1);
	nformat(banned, 512, "INSERT INTO `"#MYSQL_BAN_TABLA"` (Cim, Tipus, UIdo, Banolta, Oka, Mikor) VALUES ('%s', '%s', '%d', '%s', '%s', '%d/%02d/%02d')",cim, tipus, uIdo, bannolo, oka, year, month, day);
	mysql_tquery(sql_ID, banned, "", "");

	if(szoveg)
	{
		SendFormatMessageToAll(COLOR_LIGHTRED, ""#PREFIX": %s ki lett tiltva %s által %s", JatekosNev(kit), bannolo, BanIdo(ido, true));
		SendFormatMessageToAll(COLOR_LIGHTRED, ""#PREFIX": Oka: %s", oka);
	}
   	nformat(uzen, 256, "Oka: %s\nBanolt: %s\nLejár: %d.%02d.%02d %02d:%02d\nIdõpont: %d/%d/%d", oka, bannolo, ev, ho, nap, ora, perc, year, month, day);
	doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pUtoljara = '%d', pOnline = '1' WHERE id = '%d'", gettime(), PlayerInfo[kit][pID]);
	ShowPlayerDialog(kit, DIALOG_INFO, DIALOG_STYLE_MSGBOX, #COL_PIROS"Figyelem! "#COL_FEHER"Ki lettél tiltva!", uzen, "OK", "");

	if(kick) Kick(kit);
	return true;
}

stock NumCharacter(string[], character)
{
	new szamlalas = 0, i = -1;
	for(;++i < strlen(string);)
	{
		if(string[i] == character)
		{
			szamlalas++;
		}
	}
	return szamlalas;
}

stock GetHasznaloNum(kapuid)
{
	new szamlalas = 0, i = -1;
    for(;++i < MAX_KAPU_HASZNALO;)
	{
	    if(Kapu[kapuid][kHasznalo][i] > 0)
	    {
			szamlalas++;
	    }
	}
	return szamlalas;
}
/*
stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2)
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}
*/
stock Float:GetDistanceToPointEx(playerid,Float:x1,Float:y1,Float:z1)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return INF_FLOAT;
}

stock Float:GetDistanceToVehicle(playerid, jarmuid)
{
	if(IsPlayerConnected(playerid) && IsVehicleConnected(jarmuid))
	{
		new Float:x1,Float:y1,Float:z1;
		GetVehiclePos(jarmuid,x1,y1,z1);
		return GetDistanceToPointEx(playerid,x1,y1,z1);
	}
	return INF_FLOAT;
}

stock Float:GetDistanceToCar(playerid,vehicleid) //By Darkrealm (Edited by Sacky and Gabriel "Larcius" Cordes)
{
	return GetDistanceToVehicle(playerid,vehicleid);
}

stock Float:GetDistanceToFaHely(playerid, fa)
{
	if(IsPlayerConnected(playerid) && (fa > -1))
	{
		return GetDistanceToPointEx(playerid, FaHelyek[fa][fPosX], FaHelyek[fa][fPosY], FaHelyek[fa][fPosZ]);
	}
	return INF_FLOAT;
}

stock GetClosestFaHely(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new
			kozelifa = -1,
			Float:closestdist = 9999.0,
			Float:dist,
			fa = -1
		;

		for(;++fa < sizeof(FaHelyek);)
		{
			dist = GetDistanceToFaHely(playerid, fa);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelifa = fa;
			}
		}
		return kozelifa;
	}
	return -1;
}

stock UjKapuID()
{
	new visszateres = NINCS, i = 0;
	for(;++i < MAX_KAPU;)
	{
	    if(!Kapu[i][kVan])
	    {
	        visszateres = i;
	        break;
	    }
	}
	return visszateres;
}

stock Float:GetDistanceToKapu(playerid, kapu)
{
	if (IsPlayerConnected(playerid) && (kapu > -1))
	{
		return GetDistanceToPointEx(playerid, Kapu[kapu][kZPos][0], Kapu[kapu][kZPos][1], Kapu[kapu][kZPos][2]);
	}
	return INF_FLOAT;
}

stock GetClosestKapu(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new kozelikapu=NINCS;
		new kapu = -1;
		new Float:closestdist = 9999.0, Float:dist;
		for(;++kapu < MAX_KAPU;)
		{
			dist = GetDistanceToKapu(playerid, kapu);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelikapu = kapu;
			}
		}
		return kozelikapu;
	}
	return NINCS;
}

funkcio Autentikacio(index, response_code, data[])
{
	if(index == 0)
	{
		if(response_code != 200)
		{
			printf("Autentikáció: - hiba! Hibakód: #%d | A szerver leáll!", response_code);
			SendRconCommand("exit");
			return true;
		}
		
		if(!strcmp(data, "true", true)) print("Autentikáció: - sikeres | Futtatás engedélyezve - Folytatás");
		else print("Autentikáció: - sikertelen | Futtatás megtagadva - Leállítás"), SendRconCommand("exit");
	}
	
	return true;
}

stock Parancs_Alias()
{
	//Definiált parancs - alternatíva
	//ZCMD_Alias("", "");
/*	ZCMD_Alias("horgaszat", 	"horgászat");
	ZCMD_Alias("tiltasaim", 	"tiltásaim");
	ZCMD_Alias("horgaszat", 	"fish");
	ZCMD_Alias("harcstilus", 	"harcstílus");
	ZCMD_Alias("w", 			"whisper");
	ZCMD_Alias("adatnezes", 	"adatnézés");
	ZCMD_Alias("alruha", 		"álruha");
	ZCMD_Alias("alnev", 		"álnév");
	ZCMD_Alias("oltozo", 		"öltözõ");
	ZCMD_Alias("fekves", 		"fekvés");
	ZCMD_Alias("tanc", 			"tánc");
	ZCMD_Alias("elfogadhalal",	"elfogadhalál");
	ZCMD_Alias("elfogadhalal",	"acceptdeath");
	ZCMD_Alias("uzemmod", 		"üzemmód");
	ZCMD_Alias("felszereles", 	"felszerelés");
	ZCMD_Alias("gyasz", 		"gyász");
	ZCMD_Alias("sir", 			"sír");
	ZCMD_Alias("johettek", 		"jöhettek");
	ZCMD_Alias("allj", 			"állj");
	ZCMD_Alias("kezennallas", 	"kézenállás");
	ZCMD_Alias("ad", 			"advertise");
	ZCMD_Alias("ad", 			"hirdet");
	ZCMD_Alias("zar", 			"zár");
	ZCMD_Alias("o", 			"ooc");
	ZCMD_Alias("s", 			"shout");
	ZCMD_Alias("pickup", 		"p");
	ZCMD_Alias("hangup", 		"h");
	ZCMD_Alias("tankol", 		"fill");
	ZCMD_Alias("szamla", 		"bsz");
	ZCMD_Alias("szamla", 		"bankszamla");
	ZCMD_Alias("szamla", 		"bankszámla");
	ZCMD_Alias("szamla", 		"számla");
	ZCMD_Alias("fegyver", 		"f");
	ZCMD_Alias("utzar", 		"útzár");
	ZCMD_Alias("keszit", 		"készít");
	ZCMD_Alias("gyogyszer", 	"gyógyszer");
	ZCMD_Alias("atad", 			"átad");
	ZCMD_Alias("segit", 		"segít");
	ZCMD_Alias("motoz", 		"frisk");
	ZCMD_Alias("boja", 			"bója");
	ZCMD_Alias("tazer", 		"sokk");
	ZCMD_Alias("korozes", 		"körözés");
	ZCMD_Alias("sk", 			"sebessegkorlat");
	ZCMD_Alias("sk", 			"sebességkorlát");
	ZCMD_Alias("cuff", 			"bilincs");
	ZCMD_Alias("berak", 		"detain");
	ZCMD_Alias("lecsuk", 		"arrest");
	ZCMD_Alias("haz", 			"ház");
	ZCMD_Alias("frakcio", 		"fk");
	ZCMD_Alias("frakcio", 		"frakció");
	ZCMD_Alias("enter", 		"be");
	ZCMD_Alias("exit", 			"ki");
	ZCMD_Alias("engedely", 		"engedély");
	ZCMD_Alias("engedely", 		"licence");
	ZCMD_Alias("animok", 		"animlist");
	ZCMD_Alias("ah", 			"ahelp");
	ZCMD_Alias("stats", 		"adatok");
	ZCMD_Alias("stats", 		"adataim");
	ZCMD_Alias("szemelyi", 		"személyi");
	ZCMD_Alias("tuz", 			"tûz");
	ZCMD_Alias("statisztika", 	"stat");
	ZCMD_Alias("aduty", 		"onduty");
	ZCMD_Alias("atankol", 		"fuelcar");
	ZCMD_Alias("uzenet", 		"ü");
	ZCMD_Alias("uzenet", 		"üzenet");
	ZCMD_Alias("valasz", 		"válasz");
	ZCMD_Alias("valasz", 		"vá");
	ZCMD_Alias("gun", 			"givegun");
	ZCMD_Alias("terulet", 		"terület");
	ZCMD_Alias("ceg", 			"cég");
	ZCMD_Alias("megtankol", 	"fuelcars");
	ZCMD_Alias("ujhaz", 		"újház");
	ZCMD_Alias("ajto", 			"ajtó");
	//ZCMD_Alias("setleader", 	"makeleader");
	ZCMD_Alias("td",			"showtd");
	ZCMD_Alias("eladokocsik", 	"eladókocsik");
	ZCMD_Alias("admins", 		"adminok");
	ZCMD_Alias("asek", 			"adminsegedek");
	ZCMD_Alias("asek", 			"adminsegédek");
	ZCMD_Alias("idojaras", 		"weather");
	ZCMD_Alias("napszak", 		"tod");
	ZCMD_Alias("get", 			"gethere");
	ZCMD_Alias("eladohazak",	"eladóházak");
	ZCMD_Alias("try",			"megpróbál");
	ZCMD_Alias("try",			"megprobal");
	ZCMD_Alias("megprobalja",	"megpróbál");
	ZCMD_Alias("atnez",			"átnéz");
	ZCMD_Alias("butor",			"bútor");
	ZCMD_Alias("jelveny",		"jelvény");
	ZCMD_Alias("benzinkut",		"benzinkút");
	ZCMD_Alias("szef",			"széf");
	ZCMD_Alias("hir",			"hír");
	ZCMD_Alias("rendszam",		"rendszám");
	ZCMD_Alias("nevvaltas",		"névváltás");
	ZCMD_Alias("menu",			"menü");
	ZCMD_Alias("elutasit",		"elutasít");
	ZCMD_Alias("korhazban",		"kórházban");
	ZCMD_Alias("buntetesem",	"büntetésem");
	ZCMD_Alias("megkot",		"megköt");
	ZCMD_Alias("megkot",		"tie");
	ZCMD_Alias("zsak",			"zsák");
	ZCMD_Alias("radomany",		"riporteradomany");
	ZCMD_Alias("adminalnev",    "adminálnév");
	ZCMD_Alias("adminalnevbe",  "adminálnévbe");
	ZCMD_Alias("korbevezetes",  "körbevezetés");
	ZCMD_Alias("zero",  "zéró");
	ZCMD_Alias("szerelok",  "szerelõk");
	ZCMD_Alias("jelent",  "bejelent");
	ZCMD_Alias("taxiora", "taxióra");
	ZCMD_Alias("kereskedok", "kereskedõk");
	ZCMD_Alias("k",             "kereskedõ");
	ZCMD_Alias("k",             "kereskedés");
	ZCMD_Alias("erme",          "érme");
	ZCMD_Alias("kocka",         "dobókocka");
	ZCMD_Alias("lstleader",     "skvleader");
	ZCMD_Alias("garazs", 		"garázs");
	ZCMD_Alias("ujgarazs", 		"újgarázs");
	ZCMD_Alias("lotto",         "lottó");
	ZCMD_Alias("lakcimkartya",  "lakcímkártya");
	ZCMD_Alias("legtobbfirka",  "legtöbbfirka");
	ZCMD_Alias("ceg",           "biz");*/
	return true;
}

public OnGameModeInit()
{
	//Trafipax flash
	flash = TextDrawCreate(-20.000000,2.000000,"|");
	TextDrawUseBox(flash,1);
	TextDrawBoxColor(flash,0xffffff66);
	TextDrawTextSize(flash,660.000000,22.000000);
	TextDrawAlignment(flash,0);
	TextDrawBackgroundColor(flash,0x000000ff);
	TextDrawFont(flash,3);
	TextDrawLetterSize(flash,1.000000,52.200000);
	TextDrawColor(flash,0xffffffff);
	TextDrawSetOutline(flash,1);
	TextDrawSetProportional(flash,1);
	TextDrawSetShadow(flash,1);
	//Trafipax flash vége
	
	new start = tickcount();
	Parancs_Alias();
	onPause_Init();
	Seifader_OnExit();
	Streamer_TickRate(200);

	AddPlayerClass(3, 1479.996, -1755.816, 13.546, 272.518, 0, 0, 0, 0, 0, 0);

	new i = 0;
	for(; i++ < 10;)
		print("\n");

	print( VERZIO " betoltese folyamatban");
	print("---------------------------------------------------\n");
	print("MySQL: Kapcsolodas a MySQL-hez!");
	
	ServerInfo[0][sPort] = GetServerVarAsInt("port");
	if(ServerInfo[0][sPort] == 7777) sql_ID = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DB, MYSQL_PW);
	else sql_ID = mysql_connect(MYSQL_HOST, tMYSQL_USER, tMYSQL_DB, tMYSQL_PW);
	printf("Szerver: Inditas a %d porton! | %s", ServerInfo[0][sPort], (ServerInfo[0][sPort] == 7777 ? ("Eles szerver") : ("Tesztuzem - Debug engedelyezett")));
		
	mysql_log( LOG_ERROR );
	mysql_tquery(sql_ID, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pOnline = '0'", "", "");
	
	ServerInfo[0][sWhiteList] = false;
	ServerInfo[0][sAka] = true;
	
 	//print("MySQL: Kapcsolat sikeresen letrejott!");
 	print("---------------------------------------------------\n\n");
 	print("Szerver: Idozitok elinditasa!");
 	/* --------------- Idõzítõk ide --------------- */
	Timerek[0] = SetTimer("AdatMentesMindenkinek", (15000 * 60), true);
	Timerek[1] = SetTimer("MasodpercesIdozito", 1000, true);
	Timerek[2] = SetTimer("KetMasodpercesIdozito", 2000, true);
	Timerek[3] = SetTimer("OtmasodpercesIdozito", 5000, true);
	Timerek[4] = SetTimer("FelmasodpercesIdozito", 500, true);
	/* --------------- Idõzítõk vége --------------- */
	print("Szerver: Idozitok elinditasa sikeresen megtortent!");
	
	AjtokBetoltese();
	AutomataBetoltes();
	TeleBetoltese();
	ProcessSQL();
	TuzMuvelet();
	FavagoFak();
	LoadAratas();
	LoadBoltok();
	AlapVas();
	#if NPC_KELL == 1
	BotBetoltes();
	#endif
	UnixTime = gettime();
	BoltBotBetoltes();
	BankLezerBetoltes(true, true);
	BankBotBetoltes();
	FegyveresNPCk();
	
	
	k_kereskedo = INVALID_PLAYER_ID;
	
	//SendRconCommand("reloadfs rcon");
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	ManualVehicleEngineAndLights();
	SetGameModeText(VERZIO);
	SendRconCommand("mapname « - San Andreas - »");
	//ShowPlayerMarkers(0);
	ShowNameTags(true);
	SetNameTagDrawDistance(70);
	
	i = -1;
	for(;++i < sizeof(KukaPos);)
	{
		Kuka[i][kID] = CreateDynamicObject(1339, KukaPos[i][0], KukaPos[i][1], KukaPos[i][2], 0.0, 0.0, KukaPos[i][3]);
		Kuka[i][kHasznalva] = true;
	}
	
	ServerInfo[0][sHarcVan] = NINCS;
	ServerInfo[0][sBetoltve] = true;
	ServerInfo[0][sCarResi][0] = 3600;
	ServerInfo[0][sTuzIdo][1] = 900;
	
	ServerInfo[0][sDrog][0] = Rand(1000, 2500);
	ServerInfo[0][sDrog][1] = Rand(1000, 2500);
	ServerInfo[0][sDrog][2] = Rand(1000, 2500);
	
	BankInfo[bBankElocsarnok] = Rand(10000, 99999);
	BankInfo[bBankSzefterem][0] = Rand(1, 9);
	BankInfo[bBankSzefterem][1] = Rand(1, 9);
	BankInfo[bBankSzefterem][2] = Rand(1, 9);
	BankInfo[bBankSzefterem][3] = Rand(1, 9);
	BankInfo[bBankSzefterem][4] = Rand(1, 9);
	
	ServerInfo[0][sBankPenz][0] = Rand(10000000, 20000000);
	//ServerInfo[0][sBankrob] = (gettime() + (30 * 60)); // félóra
	ServerInfo[0][sBankrob] = 0;
	
	gettime( PosExt( ServerInfo[0][sRL_Time] ) );
	FixHour( ServerInfo[0][sRL_Time][0] );
	SetWorldTime( (ServerInfo[0][sRL_Time][0] + IDO_ELTOLODAS) );
	
	CreateDynamic3DTextLabel("(( /vizsga ))", COLOR_MKEK, 2334.5764, -1991.8934, 13.5435, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
	SetNameTagDrawDistance(20.0);
	
	LoadCameras();
	
	printf("Heapspace: %i kilobytes", heapspace() / 1024);
	printf("Szerver: Betoltesi ido: %dms", tickcount() - start);
	for(new ca=0;ca<MAX_VEHICLES;ca++)
	{
		if(vInfo[ca][vApben] == 1 && GetVehicleVirtualWorld(ca) == 0)
		{
			SetVehicleVirtualWorld(ca,AP_VW);
		}
	}
	return 1;
}

stock FixHour( &hour )
{
	if(hour < 0) hour = (hour + 24);
	else if(hour > 23) hour = (hour - 24);
	return true;
}

public OnGameModeExit()
{	
    //Seifader_OnExit();
	return 1;
}

public OnQueryError( errorid, error[], callback[], query[], connectionHandle )
{
	//printf("%d | %s | %s | %d", errorid, error, callback, connectionHandle);
    new sqlerror[128];
	if(errorid == 1062)
		format(sqlerror, sizeof(sqlerror), "MySQL Hiba történt! Részletek a logban (Duplikáció #%d)", errorid);
	else
	    format(sqlerror, sizeof(sqlerror), "MySQL Hiba történt! Részletek a logban (#%d)", errorid);
	
	AdminUzenetEx(COLOR_LIGHTRED, 1, sqlerror);
	print(sqlerror);
	
	if(errorid == 2003)
	{
		AdminUzenetEx(COLOR_MKEK,1, "MySQL: A kapcsolat megszakadt!");
		AdminUzenetEx(COLOR_MKEK,1, "Szerver: Leállítás folyamatban!");
		print("MySQL: A kapcsolat megszakadt!");
		print("Szerver: Leállítás folyamatban!");
		SendRconCommand("exit");
		return true;
	}

	new entry[2048];
	format(entry, sizeof(entry), "[%d] %s - [query] %s\r\n", errorid, error, query);
    Log(FILE_MYSQL, entry);
    return true;
}

//pickup
//onpickup
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	new i = NINCS;
	
	for(;++i < sizeof(BoltBot);)//DRAKE ezt javítsd ki mert vmiért szar...
	{
		if(BoltRablas[i][npcPenz] == pickupid)
		{
			DestroyDynamicPickup(BoltRablas[i][npcPenz]);
			
			new randomo = Rand(600, 1300);
			
			GiveMoney(playerid,randomo);
			SFM(playerid, COL_MKEK, "Kaptál a boltrablásból %s$-ot!", FormatNumber(randomo, 0, '.'));
			BoltRablas[i][npcPenz] = -1;
			
			return true;
		}
	}
	
	i = NINCS;
	for(;++i < MAX_CEG;)
	{
		if(CegInfo[i][cVan] && CegInfo[i][cPickup] == pickupid)
		{
			new str[128];
			if(CegInfo[i][cTulajID] != NINCS)
				format(str, 128, "~w~%s~w~~n~Tulaj: %s~n~Belépõ: ~g~%s$~n~Belépézhez: /enter", CegInfo[i][cNev], CegInfo[i][cTulaj], FormatNumber(CegInfo[i][cBelepo], 0, ','));
			else
				format(str, 128, "~w~%s~w~~n~A cég eladó!~n~Ára: ~g~%s$~n~Megvétel: /cég vesz", CegInfo[i][cNev], FormatNumber(CegInfo[i][cAr], 0, ','));
		
			GameTextForPlayer(playerid, str, 3000, 3);
			return true;
		}
	}
	
	if(IsJob(playerid, MUNKA_FARMER) && ((vInfo[PlayerInfo[playerid][pJarmuben]][vModel] == 532) || (vInfo[PlayerInfo[playerid][pJarmuben]][vModel] == 531)))
	{
	    i = NINCS;
		for(;++i < sizeof(Aratas_Objectek);)
		{
			if(pickupid == AratasInfo[i][aratasPickup])
			{
				new rando;
				if(!Aratas_Objectek[i][aratasLearatva])
				{
					if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 532)
					{
						PlayerInfo[playerid][pFarmernel]++;
						DestroyDynamicObject(AratasInfo[i][aratasObject]);
						Aratas_Objectek[i][aratasLearatva] = true;
					}
				} else {
					if((GetVehicleModel(GetPlayerVehicleID(playerid)) == 531) && (GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid))) == 610))
					{
						PlayerInfo[playerid][pFarmernel]++;
						AratasInfo[i][aratasObject] = CreateDynamicObject(Aratas_Objectek[i][aratasID], Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ], Aratas_Objectek[i][aratasRX], Aratas_Objectek[i][aratasRY], Aratas_Objectek[i][aratasRZ]);
						Aratas_Objectek[i][aratasLearatva] = false;
					}
				}
				
				if(PlayerInfo[playerid][pFarmernel] == 30)
				{
					new l = -1;
					for(;++l < PlayerInfo[playerid][pFarmernel];)
						rando += Rand(10, 25);
						
					PlayerInfo[playerid][pFarmernel] = 0;
					CallLocalFunction("OnPlayerFinishJob", "iii", playerid, MUNKA_FARMER, rando);
				}
				DestroyDynamicPickup(AratasInfo[i][aratasPickup]);
				AratasInfo[i][aratasPickup] = CreateDynamicPickup(1007, 14, Aratas_Objectek[i][aratasX], Aratas_Objectek[i][aratasY], Aratas_Objectek[i][aratasZ] + 0.8, 0);
				break;
			}
		}
		return true;
	}
	
	foreach(Player, utzar)
	{
		if(!Belepve(utzar))
			continue;
			
		if(!Utzarak[utzar][uVan]) continue;
		
    	if(pickupid == Utzarak[utzar][uPickup][0])
		{
		    new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
			Utzarak[utzar][uPickup][0] = CreateDynamicPickup(1007, 14, X+(1.5*dis1), Y+(1.5*dis2), Z, 0);
    	    break;
    	}
    	else if(pickupid == Utzarak[utzar][uPickup][1])
		{
	    	new Float:X, Float:Y, Float:Z, Float:A;
		    X = Utzarak[utzar][uHely][0];
			Y = Utzarak[utzar][uHely][1];
			Z = Utzarak[utzar][uHely][2];
			A = Utzarak[utzar][uHely][3];
			
		    new Float:dis1 = floatsin(-A, degrees), Float:dis2 = floatcos(-A, degrees);
			
	        PopPlayerTires(playerid);
	        DestroyDynamicPickup(pickupid);
			
			Utzarak[utzar][uPickup][1] = CreateDynamicPickup(1007, 14, X-(1.5*dis1), Y-(1.5*dis2), Z, 0);
    	    break;
    	}
	}
	
	i = NINCS;
	for(;++i < MAX_HOUSE;)
	{
		if(HazInfo[i][pickup] == pickupid)
		{
			if(!PlayerInfo[playerid][phazatnez])
			{
				PlayerInfo[playerid][phazatnez] = true;
				//TextDrawShowForPlayer(playerid, HazInfo[i][HazTextDraw]);
				SetTimerEx("HazTextDrawEltuntetes", 1000, false, "dd", playerid, i);
				nformat(str,64,"~w~Házszám: ~r~%d~w~~n~Tulajdonos: ~n~~g~%s",i,HazInfo[i][tulaj]);
				GameTextForPlayer(playerid,str,2000,5);
				break;
			}
		}
	}
	
	if(!PlayerInfo[playerid][pbemehet] || PlayerInfo[playerid][pjail] == 1)
		return true;
		
	i = NINCS;
	for(;++i < MAX_AJTO;)
	{
		if((pickupid == AjtoInfo[i][abepickup]) || (pickupid == AjtoInfo[i][abepickupk]))
		{
			if(!AjtoInfo[i][anyitva]) return SCM(playerid, COL_LRED, "Az ajtó jelenleg zárva van!");
			if(PlayerInfo[playerid][pTog][14] == true) return false;
			if(IsPlayerInAnyVehicle(playerid))
			    if(!AjtoInfo[i][ajarmu])
			        return SCM(playerid, COL_LRED, "Az ajtón csak gyalog lehet bemenni!");
			        
			AjtoTeleport(playerid, 0, i);
			break;
		} else if((pickupid == AjtoInfo[i][akipickup]) || (pickupid == AjtoInfo[i][akipickupk]))
		{
		    if(PlayerInfo[playerid][pTog][14] == true) return false;
			AjtoTeleport(playerid, 1, i);
			break;
		}
	}
	return true;
}

funkcio HazTextDrawEltuntetes(playerid, houseid)
{
	PlayerInfo[playerid][phazatnez] = false;
//	TextDrawHideForPlayer(playerid, HazInfo[houseid][HazTextDraw]);
	return true;
}

public OnPlayerEnterCheckpoint(playerid)
{

	new vid, car;
	if(IsPlayerInAnyVehicle(playerid))
	{
		car = GetPlayerVehicleID(playerid);
		vid = JarmuID(car, playerid);
	}

	DisablePlayerCheckpoint(playerid);
	switch(PlayerInfo[playerid][pCP])
	{
		case CP_DROG:
		{
			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Szevasz testvér, megszereztem a cuccot!");
			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Na, örülök, hogy segíthettem, bro', szólj ha kell még valami cucc!");
			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Na, csõ csõ");
			
			SCM(playerid, COL_MKEK, "A telefont lerakták!");
			SCM(playerid, COL_MKEK, "5db drogmag hozzáadva!");
			
			PlayerInfo[playerid][pDrogMag][ PlayerInfo[playerid][pDrogMit][1] - 1 ] += 5;
			
			PlayerInfo[playerid][pDrogMit][1] = 0;
			return true;
		}
		case CP_VAS:
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, CPbe[playerid][0], CPbe[playerid][1], CPbe[playerid][2]))
			{
				CPbe[playerid][0] = 0;
				CPbe[playerid][1] = 0;
				CPbe[playerid][2] = 0;
				SCM(playerid, COL_MKEK, "Elkezdtél vasat gyûjteni!");
				
				TogglePlayerControllable(playerid, false);
				ClearAnimations(playerid, 1);
				LoopingAnim(playerid, "BOMBER", "BOM_Plant_Loop", 4.0, 1, 0, 0, 1, 0);
				
				PlayerInfo[playerid][pFoglalt] = true;
				PlayerInfo[playerid][pCP] = 0;
				SetTimerEx("Timer", 15000, false, "iiii", playerid, T_VAS, NINCS, NINCS);
			}
		}
		case CP_GPS:
		{
			SCM(playerid, COL_VZOLD, "GPS pozíció törölve!");
			PlayerInfo[playerid][pCP] = 0;
		}
		case CP_KUKA:
		{
			if(vid && vInfo[vid][vModel] == 408)
			{
				new i = PlayerInfo[playerid][pKukaIndex];
				//for(;++i < sizeof(KukaPos);)
				//{
				if(Kuka[i][kHasznalva])
				{
					SCM(playerid, COL_LRED, "Kis türelmet kérek!");
					
					new Float:opos[4];
					
					GetDynamicObjectPos(Kuka[i][kID], opos[0], opos[1], opos[2]);
					Kuka[i][kCP][playerid] = NINCS;
					
					new Float:vpos[4];
					GetVehiclePos(GetPlayerVehicleID(playerid), vpos[0], vpos[1], vpos[2]);
					GetVehicleZAngle(GetPlayerVehicleID(playerid), vpos[3]);
					
					GetVehicleXYBehind(vpos[0], vpos[1], vpos[2], vpos[3], 4.3);
					
					SetDynamicObjectPos(Kuka[i][kID], vpos[0], vpos[1], vpos[2] - 0.9);
					SetDynamicObjectRot(Kuka[i][kID], 0.0, 0.0, vpos[3]);
					
					// 0.00000, -3.94000, 0.76000,   -120.00000, 0.00000, 0.00000
					TogglePlayerControllable(playerid, false);
					Kuka[i][kPlayerid] = playerid;
					Kuka[i][kFazis] = 1;
					PlayerInfo[playerid][pCP] = 0;
					MoveDynamicObject(Kuka[i][kID], vpos[0], vpos[1], vpos[2] + 0.76000, 1.0, -120.0, 0.0, vpos[3]);
				}
			}
		}
		case CP_KAMION_KEZD:
		{
			if(!IsPlayerInAnyTruck(playerid))
				return SCM(playerid, COL_LRED, "Hova lett a kamion?!");
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) != 578))
				return SCM(playerid, COL_LRED, "Hova lett a pótkocsi?!");
				
			TogglePlayerControllable(playerid, false);
			GameTextForPlayer(playerid, "RAKODÁS", 5000, 1);
			SetTimerEx("Berakodas", 5000, false, "i", playerid);
			
			PlayerInfo[playerid][pKCheckpointS] = NINCS;
			//PlayerInfo[playerid][pKCheckpointC] = CreateDynamicCP(PosExt(KamionUtak[PlayerInfo[playerid][pKamionc]]), 5.0, -1, -1, playerid, 30000.0);
			//PlayerInfo[playerid][pKCheckpointC] = CreateCP(playerid, CP_KAMION, PosExt(KamionUtak[PlayerInfo[playerid][pKamionc]]), 5.0);
			SetPlayerCheckpoint(playerid, PosExt(KamionUtak[PlayerInfo[playerid][pKamionc]]), 5.0);
			//SetCP(playerid, PosExt(KamionUtak[PlayerInfo[playerid][pKamionc]]), 5.0, CP_KAMION_CEL);
			PlayerInfo[playerid][pCP] = CP_KAMION_CEL;
			//Streamer_Update(playerid);
			return true;
		}
		case CP_KAMION_CEL:
		{
			if(!IsPlayerInAnyTruck(playerid))
				return SCM(playerid, COL_LRED, "Hova lett a kamion?!");
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) != 578))
				return SCM(playerid, COL_LRED, "Hova lett a pótkocsi?!");
				
			SCM(playerid, COL_MKEK, "Leadtad az árut!");
			
			TogglePlayerControllable(playerid, false);
			GameTextForPlayer(playerid, "KIRAKODÁS", 5000, 1);
			SetTimerEx("Kirakodas", 5000, false, "i", playerid);
			
			PlayerInfo[playerid][pKCheckpointC] = NINCS;
			PlayerInfo[playerid][pCP] = 0;
			return true;
		}
		case CP_UTTISZTITO:
		{
 			new kerekites = Kerekites(floatround(PlayerInfo[playerid][pTavolsag]), SZAZAS);
			if(IsPlayerInRangeOfPoint(playerid, 5.0, MunkaCP[playerid][0], MunkaCP[playerid][1], MunkaCP[playerid][2]))
			{
				if(vInfo[vid][vModel] == 574 && vInfo[vid][vMunka] == MUNKA_UTTISZTITO)
				{
					if (PlayerInfo[playerid][pFizetes] < 10000)
					{
						if(3 + kerekites > 17)
						kerekites = Rand(10, 15);
					
						new fo[64];
						format(fo, sizeof(fo), "%d$ hozzáadva a fizetésedhez", 3 + kerekites);
						GameTextForPlayer(playerid, fo, 3000, 1);
					}
					else
					{
						DisablePlayerCheckpoint(playerid);
						return SCM(playerid,COL_MKEK,"Átlépted a munkalimitet!");
					}
					new rand = random(sizeof(TisztitoUtak));
					
					//PlayerInfo[playerid][pUCheckpoint] = NINCS;
					
					while(PlayerInfo[playerid][pTavolsag] < 3.0)
						PlayerInfo[playerid][pTavolsag] = GetPlayerDistanceFromPoint(playerid, PosExt(TisztitoUtak[rand = random(sizeof(TisztitoUtak))]));

					//PlayerInfo[playerid][pUCheckpoint] = CreateDynamicCP(PosExt(TisztitoUtak[rand]), 5.0, -1, -1, playerid, 30000.0);
					//PlayerInfo[playerid][pUCheckpoint] = CreateCP(playerid, CP_UTTISZTITO, PosExt(TisztitoUtak[rand]), 5.0);
					SetPlayerCheckpoint(playerid, PosExt(TisztitoUtak[rand]), 5.0);
					MunkaCP[playerid][0] = TisztitoUtak[rand][0];
					MunkaCP[playerid][1] = TisztitoUtak[rand][1];
					MunkaCP[playerid][2] = TisztitoUtak[rand][2];
					CallLocalFunction("OnPlayerFinishJob", "iii", playerid, MUNKA_UTTISZTITO, 3 + kerekites);
					//Streamer_Update(playerid);
						
					return true;
				}
			}
		}
		case CP_VIZSGA:
		{
			if(!PlayerInfo[playerid][pJarmuben])
			{
				SetPlayerCheckpoint(playerid, PosExt( Vizsga_Kamion[ PlayerInfo[playerid][pVizsga][0] ] ), 3.5);
				PlayerInfo[playerid][pCP] = CP_VIZSGA;
				
				SCM(playerid, COL_LRED, "Hová tûnt a vizsga jármû??");
				return true;
			}
		
			switch( PlayerInfo[playerid][pVizsga][1] )//vizsga típus
			{
				case VIZSGA_KOCSI, VIZSGA_MOTOR: //kocsi, motor
				{
					if((PlayerInfo[playerid][pVizsga][0] + 1) < sizeof(Vizsga_Alap))
					{
						//SCM(playerid, COL_VZOLD, "Ellenörzõpont rendben!");
						PlayerInfo[playerid][pVizsga][0]++;
						SetPlayerCheckpoint(playerid, PosExt( Vizsga_Alap[PlayerInfo[playerid][pVizsga][0]] ), 3.5);
						
					} else {
						
						new str[512];
						format(str, sizeof(str), "%s"#COL_VZOLD" %s "#COL_FEHER"%s%s"#COL_MKEK"%d"#COL_FEHER"%s%s",
						""#COL_FEHER"Sikeres vizsgát tettél", VizsgaLista[PlayerInfo[playerid][pVizsga][1]][0] ,"vezetésbõl.\n",
						"Az engedélyed ", VizsgaLista[ PlayerInfo[playerid][pVizsga][1] ][4][0], " napig((óráig)) érvényes.\n",
						"Köszönjük, hogy te is a Los Santos Autóiskolát választottad!\n");
						Info_Dialog(playerid, ""#COL_FEHER"Sikeres vizsga - Los Santos Autósiskola", str);
						
						SetVehicleToRespawn( vInfo[ PlayerInfo[playerid][pJarmuben] ][vID] );
						PlayerInfo[playerid][pEngedely][ PlayerInfo[playerid][pVizsga][1] ] = VizsgaLista[ PlayerInfo[playerid][pVizsga][1] ][4][0];//vizsga érvényességi ideje
						
						PlayerInfo[playerid][pVizsga][0] = 0;
						PlayerInfo[playerid][pVizsga][1] = 0;
						PlayerInfo[playerid][pVizsga][2] = 0;
						PlayerInfo[playerid][pCP] = 0;
					}
				}
				case VIZSGA_KAMION:
				{
					if((PlayerInfo[playerid][pVizsga][0] + 1) < sizeof(Vizsga_Kamion))
					{
						//SCM(playerid, COL_VZOLD, "Ellenörzõpont rendben!");
						PlayerInfo[playerid][pVizsga][0]++;
						SetPlayerCheckpoint(playerid, PosExt( Vizsga_Kamion[ PlayerInfo[playerid][pVizsga][0] ] ), 5.0);
						
					} else {
					
						new str[512];
						format(str, sizeof(str), "%s"#COL_VZOLD" %s "#COL_FEHER"%s%s%s%s",
						""#COL_FEHER"Sikeres vizsgát tettél", VizsgaLista[PlayerInfo[playerid][pVizsga][1]][0] ,"vezetésbõl.\n",
						"Az engedélyed, ", VizsgaLista[PlayerInfo[playerid][pVizsga][1]][3][0], " érvényes.\n",
						"Köszönjük, hogy te is a Los Santos Autóiskolát választottad!\n");
						Info_Dialog(playerid, ""#COL_FEHER"Sikeres vizsga - Los Santos Autósiskola", str);
						
						SetVehicleToRespawn( vInfo[ PlayerInfo[playerid][pJarmuben] ][vID] );
						PlayerInfo[playerid][pEngedely][ PlayerInfo[playerid][pVizsga][1] ] = VizsgaLista[ PlayerInfo[playerid][pVizsga][1] ][3][0];//vizsga érvényességi ideje
					
						PlayerInfo[playerid][pVizsga][0] = 0;
						PlayerInfo[playerid][pVizsga][1] = 0;
						PlayerInfo[playerid][pVizsga][2] = 0;
						PlayerInfo[playerid][pCP] = 0;
					}
				}
			}
			return true;
		}
		case CP_LENYOMOZ:
		{
			SCM(playerid, COL_MKEK, "Cél koordináta törölve!");
			PlayerInfo[playerid][pCP] = 0;
		}
	}
	
	//PlayerInfo[playerid][pCP] = NINCS;
	return true;
}

public OnPlayerModelSelectionEx(playerid, response, extraid, modelid)
{
	if(extraid == SKIN_VALASZTAS)
	{
	    if(response)
	    {
			/*if(PenzEgyenleg(playerid) < 100) 
				return SCM(playerid, COL_LRED, "Egy ruha ára 100$, neked nincs ennyi készpénzed!");*/
		
		    SetSkin(playerid, modelid);
			SFM(playerid, COL_VZOLD, "Vettél egy új ruhát! (( SkinID: %d ))", modelid);
			GiveMoney(playerid,-100);
			CegPenz(BIZ_RUHA, 50); //100 lenne de hogy menjen ki egy kis pénz....
			
			return true;
		}
	    else
			return SCM(playerid, COL_MKEK, "Kiléptél a vásárlásból! További kellemes napot!");
	}
	if(extraid == FBI_SKIN_VALASZTAS)
	{
	    if(response)
	    {
		    SetSkin(playerid, modelid);
			return true;
		}
	}
	if(extraid == FK_SKIN_VALASZTAS)
	{
		if(response)
		{
			PlayerInfo[playerid][pDutySkin] = modelid;
			SetSkin(playerid, modelid, false);
			SFM(playerid, COL_VZOLD, "Vettél egy új munkaruhát! (( SkinID: %d ))", modelid);
			
		} else 
			return SCM(playerid, COL_MKEK, "További szép napot!");
	}
	return true;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(PlayerInfo[playerid][pSzunetel])
		CallLocalFunction("OnPlayerPause", "dd", playerid, 0);
	
	if(PlayerInfo[playerid][pPisil])
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		PlayerInfo[playerid][pPisil] = false;
		
	}

	#define HOLDING(%0) \
		((newkeys & (%0)) == (%0))
		
	#define PRESSED(%0) \
		(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))
	
	#define RELEASED(%0) \
		(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))
	
	
	if(PlayerInfo[playerid][pUsingLoopingAnim] == 1)
	{
		PlayerInfo[playerid][pUsingLoopingAnim] = 0;
	}
	
	/*------------ Animok kezelése ------------*/
	
	if(PlayerInfo[playerid][pMeghalt] && !IsPlayerInAnyVehicle(playerid))
		return LoopingAnim(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 0, 0, 1, 0, 1);
	
	//Drog
	if(PRESSED(KEY_FIRE) && PlayerInfo[playerid][pJoint][0])
	{
		JointTimer( playerid, 6, "szív" );
		return true;
	}
	if(PlayerInfo[playerid][pTog][14] == true)
	{
		if(PRESSED(KEY_SECONDARY_ATTACK))
		{
			if(PlayerInfo[playerid][pjail] != 0) return 1;
			for(new i=0;i<MAX_AJTO;i++)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1.0, AjtoInfo[i][abepos][0],AjtoInfo[i][abepos][1],AjtoInfo[i][abepos][2]))
				{
					if(!AjtoInfo[i][anyitva]) return SCM(playerid, COL_LRED, "Az ajtó jelenleg zárva van!");
					AjtoTeleport(playerid, 0, i);
				}
				if(IsPlayerInRangeOfPoint(playerid, 1.0, AjtoInfo[i][akipos][0],AjtoInfo[i][akipos][1],AjtoInfo[i][akipos][2]))
				{
					if(!AjtoInfo[i][anyitva]) return SCM(playerid, COL_LRED, "Az ajtó jelenleg zárva van!");
					AjtoTeleport(playerid, 1, i);
				}
			}
		}
	}
	if( PRESSED(KEY_SECONDARY_ATTACK) && PlayerInfo[playerid][pJoint][0] && !IsPlayerInAnyVehicle(playerid) )
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		PlayerInfo[playerid][pJoint][0] = false;
		SCM(playerid, COL_MKEK, "Abbahagytad a szívást.");
		return true;
	}
	if((newkeys & KEY_SUBMISSION) && !(oldkeys & KEY_SUBMISSION))
	{
        VehicleLightSwitch(playerid);
	}
	if(PRESSED(KEY_SPRINT))
	{
	    if(Fishing[playerid] != 0)
	    {
	        if(HuzzadVaze[playerid] != 0)
	        {
          		HuzzadVaze[playerid] = 0;
          		Huzza(playerid);
          		Vege(playerid);
	        }
	    }
	}

	if(HOLDING(KEY_FIRE) || HOLDING(KEY_SECONDARY_ATTACK) && HOLDING(KEY_HANDBRAKE))
	{
		if(PlayerInfo[playerid][pjail] == 3)
		{
			Cselekves(playerid, "ütögetett Jailban, ezért kapott +30mp börtönidõt!", 1);
			PlayerInfo[playerid][pJailIdo] += 30;
		}
	}
	
	if(!PlayerInfo[playerid][pTimerFut] && !PlayerInfo[playerid][pFoglalt])
	{
		if(IsKeyJustDown(KEY_HANDBRAKE,newkeys,oldkeys))
			StopLoopingAnim(playerid);
			
		if(PlayerInfo[playerid][pUsingLoopingAnim] && PlayerInfo[playerid][pMeghalt])
			return true;
	}
	
	PlayerInfo[playerid][pUsingLoopingAnim] = 0;
	/*------------ Animok kezelése vége ------------*/
	
	#define KEY_AIM KEY_HANDBRAKE
	
	new	animlib[32],
		animname[32];
		
	GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
		
	new Keys, ud, lr;
    GetPlayerKeys(playerid, Keys, ud, lr);

	if(PRESSED(KEY_FIRE))
	{
		if(PlayerInfo[playerid][pTV][0] != NINCS)
		{
			if(!Belepve(PlayerInfo[playerid][pTV][0]+1)) return SCM(playerid,COL_LRED,"Nincs több játékos!");
			PlayerInfo[ PlayerInfo[playerid][pTV][0] ][pTV][2] = NINCS;
			if(PlayerInfo[playerid][pTV][0]+1 == playerid)
			{
				PlayerInfo[playerid][pTV][0] +=1;
			}
			PlayerInfo[playerid][pTV][0] += 1;
			PlayerInfo[ PlayerInfo[playerid][pTV][0] ][pTV][2] = playerid;
			PlayerSpectatePlayer(playerid,PlayerInfo[playerid][pTV][0]);
			if(!IsScripter(playerid))
			{
				AdminUzenet(COLOR_LIGHTRED, 1, "%s megfigyeli %s-t!", JatekosNev(playerid), JatekosNev(PlayerInfo[playerid][pTV][0]));			
			}
		}
	}
	if(PRESSED(KEY_HANDBRAKE))
	{
		if(PlayerInfo[playerid][pTV][0] != NINCS)
		{
			if(!Belepve(PlayerInfo[playerid][pTV][0]-1)) return SCM(playerid,COL_LRED,"Nincs több játékos!");
			PlayerInfo[ PlayerInfo[playerid][pTV][0] ][pTV][2] = NINCS;
			if(PlayerInfo[playerid][pTV][0]-1 == playerid)
			{
				PlayerInfo[playerid][pTV][0] -=1;
			}
			PlayerInfo[playerid][pTV][0] -= 1;
			PlayerInfo[ PlayerInfo[playerid][pTV][0] ][pTV][2] = playerid;
			PlayerSpectatePlayer(playerid,PlayerInfo[playerid][pTV][0]);
			if(!IsScripter(playerid))
			{
				AdminUzenet(COLOR_LIGHTRED, 1, "%s megfigyeli %s-t!", JatekosNev(playerid), JatekosNev(PlayerInfo[playerid][pTV][0]));			
			}
		}
	}
	
	if(PRESSED(KEY_YES))
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid))
				return SCM(playerid, COL_LRED, "Csak sofõrként tudod használni!");

			if(PlayerInfo[playerid][pAutoTiltas] > 0)
			{
				SFM(playerid,COL_LRED,"Nem használhatsz jármûvet még %d percig",PlayerInfo[playerid][pAutoTiltas]/60);
				return 1;
			}


			new
				kocsi = GetPlayerVehicleID(playerid),
				jarmuidje = JarmuID(kocsi, playerid);

			if(IsABicikli(vInfo[jarmuidje][vModel]))
				return SCM(playerid, COL_LRED, "Ez egy bicikli :D Nincs benne motor!");

			if(!vInfo[jarmuidje][vUzemanyag])
				return SCM(playerid, COL_LRED, "A jármûbõl kifogyott az üzemanyag!");

			if(PlayerInfo[playerid][pmotortinditja])
				return SCM(playerid, COL_LRED, "A jármû jelenleg is indítás alatt áll!");

			if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
			{
				SetJarmu(kocsi, KOCSI_MOTOR, 0);
				SendClientMessage(playerid, COLOR_LIGHTRED, "A jármû leállítva!");
				Cselekves(playerid, "leállította a jármûvét", 1);
				vInfo[jarmuidje][vMotorelinditva] = false;

			}
			else 
			{
				if(JarmuKulcs(playerid, jarmuidje))
				{
					new kocsiserules, ido, Float:kocsielet;
					GetVehicleHealth(kocsi, kocsielet);
					if((100 - (((kocsielet - 350) / 650)) * 100) > 100)
						return SCM(playerid, COL_LRED, "A jármû állapota nem teszi lehetõvé a motor indítását!");

					kocsiserules = 1000 - floatround(kocsielet);
					ido = 1000 + (kocsiserules * 5);
					SendClientMessage(playerid, COLOR_GREEN, "Jármû indítás...");
					SetTimerEx("JarmuInditas", ido, false, "dd", playerid, kocsi);
					PlayerInfo[playerid][pmotortinditja] = true;
				} else
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Ehhez a jármûhöz nincs kulcsod!");
			}
		}
		if(ServerInfo[0][sRL_Time][0] > 20) 
		{
		    for(new i=0;i<9;i++)
			{
				if(GetPlayerVirtualWorld(VasarlosNPCK[i]) != 0) return 1;
			}
			new fk = PlayerInfo[playerid][pFrakcio];
			if(NPCFloodVedelem[playerid] > 0)
			{
				SFM(playerid,COL_LRED,"%d másodperc múlva beszélhetsz újra az NPCvel!",NPCFloodVedelem[playerid]);
				return 1;
			}
			if(fk != 1 && fk != 2 && fk != 3 && fk != 5 && fk != 6 && fk != 10 && fk != 12)
			{
				if(IsPlayerInRangeOfPoint(playerid,5,2690.316, -1975.359, 13.546))
				{
					if(PlayerInfo[playerid][pNPCSzobaAll][0] > 0)
					{
						SendClientMessage(playerid,0x44f50aAA,"Steve Pullman mondja: Húzz már a faszomba ember!");
						ProxDetector(15.0, playerid, "*Steve Pullman megvonja a vállát.", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						NPCFloodVedelem[playerid] = 20;
						return 1;
					}
					SendClientMessage(playerid,0x44f50aAA,"Steve Pullman mondja: Szevasz öreg! Mi járatban erre?");
					NPCBeszelgetes[playerid] = 1;
					ShowPlayerDialog(playerid,DIALOG_NPCVASARLAS,DIALOG_STYLE_LIST,"Beszélgetés egy Idegennel","- Szevasz öreg! Semmi különös, csak egy szál cigi kellene, van nálad?\n- Csá ember, mi a pálya? Van valami jó számomra?\n- Szevasz, semmi különös.. tudod hogy megy ez manapság, mindenkitõl félni kell.","Válaszom","Mégse");
					return true;
				}
				if(IsPlayerInRangeOfPoint(playerid,5,2322.841, -1259.185, 22.507))
				{
					if(PlayerInfo[playerid][pNPCSzobaAll][1] > 0)
					{
						SendClientMessage(playerid,0x44f50aAA,"Wayne Freeman mondja: Húzz már a faszomba ember!");
						ProxDetector(15.0, playerid, "*Wayne Freeman megvonja a vállát.", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						NPCFloodVedelem[playerid] = 20;
						return 1;
					}
					SendClientMessage(playerid,0x44f50aAA,"Wayne Freeman mondja: Szevasz öreg! Mi járatban erre?");
					NPCBeszelgetes[playerid] = 2;
					ShowPlayerDialog(playerid,DIALOG_NPCVASARLAS,DIALOG_STYLE_LIST,"Beszélgetés egy Idegennel","- Szevasz öreg! Semmi különös, csak egy szál cigi kellene, van nálad?\n- Csá ember, mi a pálya? Van valami jó számomra?\n- Szevasz, semmi különös.. tudod hogy megy ez manapság, mindenkitõl félni kell.","Válaszom","Mégse");
				}
				if(IsPlayerInRangeOfPoint(playerid,5,1977.291, -1236.615, 20.056))
				{
					if(PlayerInfo[playerid][pNPCSzobaAll][2] > 0)
					{
						SendClientMessage(playerid,0x44f50aAA,"Jordan Mills mondja: Húzz már a faszomba ember!");
						ProxDetector(15.0, playerid, "*Jordan Mills megvonja a vállát.", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						NPCFloodVedelem[playerid] = 20;
						return 1;
					}
					SendClientMessage(playerid,0x44f50aAA,"Jordan Mills mondja: Szevasz öreg! Mi járatban erre?");
					NPCBeszelgetes[playerid] = 3;
					ShowPlayerDialog(playerid,DIALOG_NPCVASARLAS,DIALOG_STYLE_LIST,"Beszélgetés egy Idegennel","- Szevasz öreg! Semmi különös, csak egy szál cigi kellene, van nálad?\n- Csá ember, mi a pálya? Van valami jó számomra?\n- Szevasz, semmi különös.. tudod hogy megy ez manapság, mindenkitõl félni kell.","Válaszom","Mégse");
				}
				if(IsPlayerInRangeOfPoint(playerid,5,789.674, -1323.965, -0.507))
				{
					if(PlayerInfo[playerid][pNPCSzobaAll][3] > 0)
					{
						SendClientMessage(playerid,0x44f50aAA,"Dwayne Harrison mondja: Húzz már a faszomba ember!");
						ProxDetector(15.0, playerid, "*Dwayne Harrison megvonja a vállát.", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						NPCFloodVedelem[playerid] = 20;
						return 1;
					}
					SendClientMessage(playerid,0x44f50aAA,"Dwayne Harrison mondja: Szevasz öreg! Mi járatban erre?");
					NPCBeszelgetes[playerid] = 4;
					ShowPlayerDialog(playerid,DIALOG_NPCVASARLAS,DIALOG_STYLE_LIST,"Beszélgetés egy Idegennel","- Szevasz öreg! Semmi különös, csak egy szál cigi kellene, van nálad?\n- Csá ember, mi a pálya? Van valami jó számomra?\n- Szevasz, semmi különös.. tudod hogy megy ez manapság, mindenkitõl félni kell.","Válaszom","Mégse");
				}
				if(IsPlayerInRangeOfPoint(playerid,5,304.391, -1530.982, 24.921))
				{
					if(PlayerInfo[playerid][pNPCSzobaAll][4] > 0)
					{
						SendClientMessage(playerid,0x44f50aAA,"Jose Dolores mondja: Húzz már a faszomba ember!");
						ProxDetector(15.0, playerid, "*Jose Dolores megvonja a vállát.", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						NPCFloodVedelem[playerid] = 20;
						return 1;
					}
					SendClientMessage(playerid,0x44f50aAA,"Jose Dolores mondja: Szevasz öreg! Mi járatban erre?");
					NPCBeszelgetes[playerid] = 5;
					ShowPlayerDialog(playerid,DIALOG_NPCVASARLAS,DIALOG_STYLE_LIST,"Beszélgetés egy Idegennel","- Szevasz öreg! Semmi különös, csak egy szál cigi kellene, van nálad?\n- Csá ember, mi a pálya? Van valami jó számomra?\n- Szevasz, semmi különös.. tudod hogy megy ez manapság, mindenkitõl félni kell.","Válaszom","Mégse");
				}
				if(IsPlayerInRangeOfPoint(playerid,5,1681.568, -2078.620, 13.546))
				{
					if(PlayerInfo[playerid][pNPCSzobaAll][5] > 0)
					{
						SendClientMessage(playerid,0x44f50aAA,"Cruzito Espinosa mondja: Húzz már a faszomba ember!");
						ProxDetector(15.0, playerid, "*Cruzito Espinosa megvonja a vállát.", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						NPCFloodVedelem[playerid] = 20;
						return 1;
					}
					SendClientMessage(playerid,0x44f50aAA,"Cruzito Espinosa mondja: Szevasz öreg! Mi járatban erre?");
					NPCBeszelgetes[playerid] = 6;
					ShowPlayerDialog(playerid,DIALOG_NPCVASARLAS,DIALOG_STYLE_LIST,"Beszélgetés egy Idegennel","- Szevasz öreg! Semmi különös, csak egy szál cigi kellene, van nálad?\n- Csá ember, mi a pálya? Van valami jó számomra?\n- Szevasz, semmi különös.. tudod hogy megy ez manapság, mindenkitõl félni kell.","Válaszom","Mégse");
				}
				if(IsPlayerInRangeOfPoint(playerid,5,2251.910, -1700.651, 13.760))
				{
					if(PlayerInfo[playerid][pNPCSzobaAll][6] > 0)
					{
						SendClientMessage(playerid,0x44f50aAA,"Alphonse Finucci mondja: Húzz már a faszomba ember!");
						ProxDetector(15.0, playerid, "*Alphonse Finucci megvonja a vállát.", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						NPCFloodVedelem[playerid] = 20;
						return 1;
					}
					SendClientMessage(playerid,0x44f50aAA,"Alphonse Finucci mondja: Szevasz öreg! Mi járatban erre?");
					NPCBeszelgetes[playerid] = 7;
					ShowPlayerDialog(playerid,DIALOG_NPCVASARLAS,DIALOG_STYLE_LIST,"Beszélgetés egy Idegennel","- Szevasz öreg! Semmi különös, csak egy szál cigi kellene, van nálad?\n- Csá ember, mi a pálya? Van valami jó számomra?\n- Szevasz, semmi különös.. tudod hogy megy ez manapság, mindenkitõl félni kell.","Válaszom","Mégse");
					return 1;
				}
				if(IsPlayerInRangeOfPoint(playerid,5,308.391, -1432.634, 23.709))
				{
					if(PlayerInfo[playerid][pNPCSzobaAll][7] > 0)
					{
						SendClientMessage(playerid,0x44f50aAA,"Sergey Stanislav mondja: Húzz már a faszomba ember!");
						ProxDetector(15.0, playerid, "*Sergey Stanislav megvonja a vállát.", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						NPCFloodVedelem[playerid] = 20;
						return 1;
					}
					SendClientMessage(playerid,0x44f50aAA,"Sergey Stanislav mondja: Szevasz öreg! Mi járatban erre?");
					NPCBeszelgetes[playerid] = 8;
					ShowPlayerDialog(playerid,DIALOG_NPCVASARLAS,DIALOG_STYLE_LIST,"Beszélgetés egy Idegennel","- Szevasz öreg! Semmi különös, csak egy szál cigi kellene, van nálad?\n- Csá ember, mi a pálya? Van valami jó számomra?\n- Szevasz, semmi különös.. tudod hogy megy ez manapság, mindenkitõl félni kell.","Válaszom","Mégse");
				}
				if(IsPlayerInRangeOfPoint(playerid,5,397.883, -1893.673, 7.835))
				{
					if(PlayerInfo[playerid][pNPCSzobaAll][8] > 0)
					{
						SendClientMessage(playerid,0x44f50aAA,"Ferruccio Sostrato mondja: Húzz már a faszomba ember!");
						ProxDetector(15.0, playerid, "*Ferruccio Sostrato megvonja a vállát.", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						NPCFloodVedelem[playerid] = 15;
						return 1;
					}
					SendClientMessage(playerid,0x44f50aAA,"Ferruccio Sostrato mondja: Szevasz öreg! Mi járatban erre?");
					NPCBeszelgetes[playerid] = 9;
					ShowPlayerDialog(playerid,DIALOG_NPCVASARLAS,DIALOG_STYLE_LIST,"Beszélgetés egy Idegennel","- Szevasz öreg! Semmi különös, csak egy szál cigi kellene, van nálad?\n- Csá ember, mi a pálya? Van valami jó számomra?\n- Szevasz, semmi különös.. tudod hogy megy ez manapság, mindenkitõl félni kell.","Válaszom","Mégse");
				}
			}
		}
	}
	if(!GetPlayerVehicleSeat(playerid)) //csak söfõr tudja kapcsolni az indexet
	{
		if(PRESSED(KEY_LOOK_LEFT))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new vehicleidje = vInfoID[GetPlayerVehicleID(playerid)];
				if(vInfo[vehicleidje][Kozos]) SetVehicleIndex(playerid, vehicleidje, false, true), vInfo[vehicleidje][Kozos] = 0;
				else SetVehicleIndex(playerid, vehicleidje, true);
			}
		}
		if(PRESSED(KEY_LOOK_RIGHT))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new vehicleidje = JarmuID(GetPlayerVehicleID(playerid), playerid);
				if(vInfo[vehicleidje][Kozos]) SetVehicleIndex(playerid, vehicleidje, true), vInfo[vehicleidje][Kozos] = 0;
				else SetVehicleIndex(playerid, vehicleidje, false, true);
			}
		}
		if(PRESSED(KEY_ANALOG_DOWN))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				new vehicleidje = JarmuID(GetPlayerVehicleID(playerid), playerid);
				if(!vInfo[vehicleidje][Kozos])
				{
					SetVehicleIndex(playerid, vehicleidje, true, true, true);
					vInfo[vehicleidje][Kozos] = 1;
				}
				else
				{
					SetVehicleIndex(playerid, vehicleidje, true, true);
					vInfo[vehicleidje][Kozos] = 0;
				}
			}
		}
	}
	
	if(!PlayerInfo[playerid][pAduty] && !IsPlayerInAnyVehicle(playerid)) //Admin szoliban ne essen el - elesés
	{
		if(HOLDING(KEY_SPRINT) && PRESSED(KEY_JUMP) && !Bortonben(playerid)) Szukseglet(playerid, float(Rand(1, 4)));
		if(((ud < 0) || (ud > 0) || (lr > 0) || (lr < 0)) && HOLDING(KEY_SPRINT) && PRESSED(KEY_JUMP) && !PlayerInfo[playerid][pmegbotlott])
		{
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
			{
				switch(random(10))
				{
					case 4, 7:
					{
						ClearAnimations(playerid);
						LoopingAnim(playerid, "PED", "KO_shot_front", 2.3, 0, 1, 1, 1, 0, 1);
						PlayerInfo[playerid][pmegbotlott] = true;
					}
				}
			}
		}
		
		if((PRESSED(KEY_FIRE) || PRESSED(KEY_JUMP)) && PlayerInfo[playerid][pmegbotlott])
		{
			if(!strcmp("PED", animlib, true) && !strcmp("KO_SHOT_FRONT", animname, true))
			{
				LoopingAnim(playerid, "PED", "getup_front", 2.3, 0, 1, 1, 0, -1, 1);
				PlayerInfo[playerid][pmegbotlott] = false;
			}
		}
	} //elesés vége
	
	if(PRESSED(KEY_FIRE))
	{
		if(IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][pSpeedBoots])
		{
			new Float:vx,Float:vy,Float:vz, id;
			id = GetPlayerVehicleID(playerid);
			GetVehicleVelocity(id ,vx, vy, vz);
			SetVehicleVelocity(id , vx * 1.3, vy * 1.3, vz * 1.3);
			RepairVehicle(id);
		}
	}
	if(PRESSED(KEY_ACTION))
	{
		if(IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][pSpeedBoots])
		{
			new Float:vx,Float:vy,Float:vz, id;
			id = GetPlayerVehicleID(playerid);
			GetVehicleVelocity(id ,vx, vy, vz);
			SetVehicleVelocity(id , vx * 0, vy * 0, vz * 0);
			RepairVehicle(id);
		}
	}
	if(PRESSED(KEY_CROUCH))
	{
		{
			if(!Admin(playerid, 4) && PlayerInfo[playerid][pTog][13] && !IsPlayerInAnyVehicle(playerid))
			{
			new car = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new id = IsSeatTaken(car, 0);
				if(id != playerid && id != NINCS)
					return SCM(playerid, COL_LRED, "A vezetõ ülés foglalt!");

				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!IsScripter(playerid) || (!IsScripter(playerid) && vInfo[vid][vInsert]))
						AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s lefoglalt egy %s típusú jármûvet! JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[vInfo[vid][vModel] - 400], car, vid, JarmuTulaj(vid));

					SCM(playerid, COL_MKEK, "Jármû sikeresen lefoglalva!");

					if(id == NINCS)
						PutPlayerInVehicle(playerid, car, 0);

					SetJarmu(car, KOCSI_MOTOR, 1);
					vInfo[vid][vMotorelinditva] = true;
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs jármû a közeledben!");
			return true;
			}
		}
	}
	
	
	if(HOLDING(KEY_FIRE))
	{
		if((PlayerInfo[playerid][pFegyver] == 9) && IsJob(playerid, MUNKA_FAVAGO))
		{
			new fa = GetClosestFaHely(playerid), faformat[64];
			if((GetDistanceToFaHely(playerid, fa) < 5.0))
			{
				if(FaHelyek[fa][fAllapot] > 0)
				{
					KillTimer(PlayerInfo[playerid][pFavagoMunkaTimer]);
					SCM(playerid, COL_MKEK, "Elkezdted a favágást!");
					PlayerInfo[playerid][pFavagoMunkaTimer] = SetTimerEx("FavagasTimer", 1000, false, "ii", playerid, fa);
					PlayerInfo[playerid][pFavagoMunkazik] = true;
					format(faformat, sizeof(faformat), "~w~Állapot: ~r~%d%%", FaHelyek[fa][fAllapot]);
					GameTextForPlayer(playerid, faformat, 500, 1);
					//PlayerTextDrawSetString(playerid, FaVagasTD, faformat);
					//PlayerTextDrawShow(playerid, FaVagasTD);
				} else
					return SCM(playerid, COL_LRED, "Ez a fa már ki van vágva!");
			}
		}
	}
	
	if(HOLDING(KEY_FIRE) && !PlayerInfo[playerid][pTuzetOlt] && (PlayerInfo[playerid][pFegyver] == 42)) // bal egérgomb v. bal egérgomb + jobb egérgomb
		PlayerInfo[playerid][pTuzetOlt] = true;
	if(PRESSED(KEY_FIRE) && !PlayerInfo[playerid][pTuzetOlt] && IsPlayerInAnyVehicle(playerid) && !GetPlayerVehicleSeat(playerid) && vInfo[PlayerInfo[playerid][pJarmuben]][vModel] == 407)
		PlayerInfo[playerid][pTuzetOlt] = true;
	else if(RELEASED(KEY_FIRE) && PlayerInfo[playerid][pTuzetOlt])
		PlayerInfo[playerid][pTuzetOlt] = false;

	
	if(PRESSED( KEY_NO ))
	{
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
		    new vehicleid = GetPlayerVehicleID(playerid);
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(lights == 1)
			{
				lights = 0;
				SCM(playerid,COL_MKEK,"Lámpa lekapcsolva.");
			} else {
				lights = 1;
				SCM(playerid,COL_MKEK,"Lámpa felkapcsolva.");
			}
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		}
		else
		{
			if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD &&!IsScripter(playerid) && PlayerInfo[playerid][pFrakcio] != 6 && PlayerInfo[playerid][pFrakcio] != 15)
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			if(PlayerInfo[playerid][pUzemmod] == 0)
			{
				PlayerInfo[playerid][pUzemmod] = 1;
				//Cselekves(playerid, "bekapcsolta a sokkoló üzemmódot a fegyverén", 1);
				SCM(playerid, COL_VZOLD, "Bekapcsoltad a sokkoló üzemmódot");
			}
			else
			{
				PlayerInfo[playerid][pUzemmod] = 0;
				//Cselekves(playerid, "kikapcsolta a sokkoló üzemmódot a fegyverén", 1);
				SCM(playerid, COL_VZOLD, "Kikapcsoltad a sokkoló üzemmódot");
			}
			return true;
		}
	}
	/*
	if(PRESSED( KEY_YES ))
	{
	    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new vehicleid = GetPlayerVehicleID(playerid);
	        new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			if(engine == 1) {
				engine = 0;
				SCM(playerid,COL_MKEK,"Motor leállítva.");
			} else  {
				SetTimerEx("JarmuInditas", 3000, false, "dd", playerid, vehicleid);
				//SCM(playerid,COL_MKEK,"Motor beindítva.");
			}
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			
	    }
	}
 */
	return true;
}

stock GetVehicleXYBehind(&Float:x, &Float:y, &Float:z, &Float:a, Float:mennyivel = 10.0)
{
	x -= (mennyivel * floatsin(-a, degrees));
	y -= (mennyivel * floatcos(-a, degrees));
	return true;
}

stock GetInFrontOfXY(&Float:x, &Float:y, &Float:z, &Float:a, Float:mennyivel = 10.0, bool:forditva = false)
{
	if(!forditva)
		x += (mennyivel * floatsin(-a, degrees)), y += (mennyivel * floatcos(-a, degrees));
	else
		x -= (mennyivel * floatsin(-a, degrees)), y -= (mennyivel * floatcos(-a, degrees));
		
	return true;
}

stock GetNewFaIndex()
{
	new
		fa = -1,
		visszateres = -1;
	for(;++fa < MAX_FA;)
	{
		if(!FaAdatok[fa][fahasznalva])
		{
			visszateres = fa;
			break;
		}
	}
	return visszateres;
}

stock FaLerak(playerid, Float:xpoz, Float:ypoz, Float:zpoz)
{
	new
		index = GetNewFaIndex(),
		fastring[MAX_PLAYER_NAME + 11];

	if(index > -1)
	{
		FaAdatok[index][faposx] = xpoz;
		FaAdatok[index][faposy] = ypoz;
		FaAdatok[index][faposz] = zpoz;
		FaAdatok[index][fahasznalva] = true;
		FaAdatok[index][faplayerid] = playerid;

		GetPlayerName(playerid, fastring, MAX_PLAYER_NAME);
		format(fastring, sizeof(fastring), "FA\n[%s]", fastring);

		FaAdatok[index][falabel] = CreateDynamic3DTextLabel(fastring, -1, xpoz, ypoz, zpoz, 20.0);
	}
	Streamer_Update(playerid);
	return true;
}

funkcio FavagasTimer(playerid, fa)
{
	new faformat[32];

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, FaHelyek[fa][fPosX], FaHelyek[fa][fPosY], FaHelyek[fa][fPosZ]))
	{
		PlayerInfo[playerid][pFavagoMunkazik] = false;
		KillTimer(PlayerInfo[playerid][pFavagoMunkaTimer]);
		//PlayerTextDrawHide(playerid, FaVagasTD);
		return true;
	}

	if((FaHelyek[fa][fAllapot] > 0) && (GetPlayerWeapon(playerid) == 9))
	{
		KillTimer(PlayerInfo[playerid][pFavagoMunkaTimer]);
		FaHelyek[fa][fAllapot] -= random(9);
		format(faformat, sizeof(faformat), "~w~Állapot: ~r~%d%%", (FaHelyek[fa][fAllapot] < 0 ? 0 : FaHelyek[fa][fAllapot]));
		//PlayerTextDrawSetString(playerid, FaVagasTD, faformat);
		GameTextForPlayer(playerid, faformat, 1000, 1);
		PlayerInfo[playerid][pFavagoMunkaTimer] = SetTimerEx("FavagasTimer", 1000, false, "ii", playerid, fa);
	} else if(((FaHelyek[fa][fAllapot] <= 0) && PlayerInfo[playerid][pFavagoMunkazik]) || (GetPlayerWeapon(playerid) != 9))
	{
		KillTimer(PlayerInfo[playerid][pFavagoMunkaTimer]);
		SCM(playerid, COL_MKEK, "Sikeresen kivágtad a fát!");

		PlayerInfo[playerid][pFavagoMunkazik] = false;
		
		new Float:opos[3];
		GetDynamicObjectPos(FaObjectek[fa], PosExt(opos));
		
		new Float:playerposok[3];
		GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);
	
		//FaLerak(playerid, playerposok[0], playerposok[1], playerposok[2]);
		
		CallLocalFunction("OnPlayerFinishJob", "iii", playerid, MUNKA_FAVAGO, Rand(1, 3));
		
		cmd_s(playerid, "Vigyázat! Dõl a fa");
		
		new mozgas = MoveDynamicObject(FaObjectek[fa], PosExt(opos) + 0.0001, 0.0001, 0.0, 100.0, 0.0);
		SetTimerEx("FaVisszaallitas", (30000 + mozgas), false, "ii", playerid, fa);
		//PlayerTextDrawHide(playerid, FaVagasTD);
		
		//SetTimerEx("FaVisszaallitas", 30000, false, "i", fa);
	}
	    
	return true;
}

funkcio FaVisszaallitas(playerid, fa)
{
	FaHelyek[fa][fAllapot] = 100;
	DestroyDynamicObject(FaObjectek[fa]);
	FaObjectek[fa] = CreateDynamicObject(618, FaHelyek[fa][fPosX], FaHelyek[fa][fPosY], FaHelyek[fa][fPosZ], 0.0, 0.0, 0.0);
	Streamer_Update(playerid);
	return true;
}

public OnDynamicObjectMoved(objectid)
{
	new i = -1;
	for(;++i < 500;)
	{
		if(Kuka[i][kHasznalva] && (Kuka[i][kID] == objectid))
		{
			if(Kuka[i][kFazis] == 1)
				SetTimerEx("MoveTrashBack", 1000, false, "d", i);
			else if(Kuka[i][kFazis] == 2)
			{
				TogglePlayerControllable(Kuka[i][kPlayerid], true);
				CallLocalFunction("OnPlayerFinishJob", "iii", Kuka[i][kPlayerid], MUNKA_KUKA, Rand(2, 8));
				
				SetDynamicObjectPos(Kuka[i][kID], KukaPos[i][0], KukaPos[i][1], KukaPos[i][2] - 0.3);
				SetDynamicObjectRot(Kuka[i][kID], 0.0, 0.0, KukaPos[i][3]);
				
				new rand = random(sizeof(KukaPos)),
					Float:cpx = KukaPos[rand][0],
					Float:cpy = KukaPos[rand][1],
					Float:cpz = KukaPos[rand][2],
					Float:cpa = KukaPos[rand][3];
				
				/*
				new rand = random(sizeof(KukaPos)),
					Float:cpx = KukaPos[rand][0],
					Float:cpy = KukaPos[rand][1],
					Float:cpz = KukaPos[rand][2],
					Float:cpa = KukaPos[rand][3];
				
				PlayerInfo[playerid][pCP] = CP_KUKA;
				PlayerInfo[playerid][pKukaIndex] = rand;
				
				GetInFrontOfXY(cpx, cpy, cpz, cpa, 4.0, true);
				SetPlayerCheckpoint(playerid, cpx, cpy, cpz, 5.0);
				*/
				
				GetInFrontOfXY(cpx, cpy, cpz, cpa, 4.0, true);
				PlayerInfo[Kuka[i][kPlayerid]][pKukaIndex] = rand;
				PlayerInfo[Kuka[i][kPlayerid]][pCP] = CP_KUKA;
				//Kuka[rand][kCP][Kuka[i][kPlayerid]] = CreateDynamicCP(cpx, cpy, cpz, 5.0, .playerid = Kuka[i][kPlayerid], .streamdistance = 30000.0);
				//Kuka[rand][kCP][Kuka[i][kPlayerid]] = CreateCP(Kuka[i][kPlayerid], CP_KUKA, cpx, cpy, cpz, 5.0);
				SetPlayerCheckpoint(Kuka[i][kPlayerid], cpx, cpy, cpz, 5.0);
				
				Kuka[i][kPlayerid] = -1;
				Kuka[i][kFazis] = 0;
			}
			break;
		}
	}
	
	new x = -1;
	for(;++x < sizeof(FaHelyek);)
	{
		if(FaObjectek[x] == objectid)
		{
			DestroyDynamicObject(FaObjectek[x]);
			FaObjectek[x] = CreateDynamicObject(831, FaHelyek[x][fPosX], FaHelyek[x][fPosY], FaHelyek[x][fPosZ] - 0.3, 0.0, 0.0, 0.0);
			
			foreach(Player, playerid)
				if(IsPlayerConnected(playerid))
					Streamer_Update(playerid);
		}
	}
    return true;
}

funkcio OnPlayerFinishJob(playerid, job, pay) //munka vége
{
	if(Munkak[(job - 20)][3][0]) //legális
	{
		//0 = legál számláló, 1 = legál pontok, 2 = illegál számláló, 3 = illegál pontok
		PlayerInfo[playerid][pExp][0]++;
		
		if(PlayerInfo[playerid][pExp][0] >= SZINT_LEPES)
		{
			PlayerInfo[playerid][pExp][1]++;
			SFM(playerid, COL_MKEK, "Gratulálunk, tehetség pontjaid növekedtek (legális)! Új pontjaid száma: %d", PlayerInfo[playerid][pExp][1]);
			
			new i = -1;
			
			for(;++i < sizeof(Munkak);)
			{
				if((PlayerInfo[playerid][pExp][1] == Munkak[i][2][0]) && (Munkak[i][3][0]))
					SFM(playerid, COL_MKEK, "Gratulálok, mostantól elérhetõvé vált számodra az alábbi munka: "#COL_MKEK"%s!", Munkak[i][1]);
			}
		}
	} else { //illegális
		PlayerInfo[playerid][pExp][2]++;
		
		if(PlayerInfo[playerid][pExp][2] >= SZINT_LEPES)
		{
			PlayerInfo[playerid][pExp][3]++;
			SFM(playerid, COL_MKEK, "Gratulálunk, tehetség pontjaid növekedtek (illegális)! Új pontjaid száma: %d", PlayerInfo[playerid][pExp][3]);
			
			new i = -1;
			
			for(;++i < sizeof(Munkak);)
			{
				if((PlayerInfo[playerid][pExp][2] == Munkak[i][2][0]) && !(Munkak[i][3][0]))
					SFM(playerid, COL_MKEK, "Gratulálok, mostantól elérhetõvé vált számodra az alábbi munka: "#COL_MKEK"%s!", Munkak[i][1]);
			}
		}
	}
	
	if(job != MUNKA_KAMION && pay > 20)
		pay = Rand(10, 20);

	SFM(playerid, COL_MKEK, "Munka: "#COL_MKEK"%s"#COL_FEHER"$ hozzáadva a fizetésedhez!", FormatNumber(pay, 0, ','));
	PlayerInfo[playerid][pFizetes] += pay;
	return true;
}

funkcio Megbotlik(playerid)
{
	ClearAnimations(playerid);
	LoopingAnim(playerid, "PED", "KO_skid_back", 4, 0, 0, 0, 0, 800, 1);
	return true;
}

stock UresHullaHely()
{
	new hullaid = -1, i = -1;
	for(;++i < MAX_HULLA;)
	{
		if(!HullaInfo[i][Hvan])
		{
			hullaid = i;
			break;
		}
	}
	return hullaid;
}

funkcio HullaTorles(hullaid)
{
	HullaInfo[hullaid][Hallapot] -= 5;
	if(HullaInfo[hullaid][Hallapot] <= 0)
		HullaTorol(hullaid);
		
	return true;
}

stock HullaTorol(hullaid)
{
	if(!HullaInfo[hullaid][Hvan])
		return false;
		
	KillTimer(HullaInfo[hullaid][Htimer]);
	HullaInfo[hullaid][Hvan] = false;
	HullaInfo[hullaid][Hpos][0] = 0.0;
	HullaInfo[hullaid][Hpos][1] = 0.0;
	HullaInfo[hullaid][Hpos][2] = 0.0;
	HullaInfo[hullaid][Hoka] = 0;
	HullaInfo[hullaid][Hkie][0] = EOS;
	HullaInfo[hullaid][Hkieid] = 0;
	HullaInfo[hullaid][Hmegolte][0] = EOS;
	HullaInfo[hullaid][Hmegolteid] = 0;
	HullaInfo[hullaid][Hvw] = 0;

	HullaInfo[hullaid][HHeroin] = 0;
	HullaInfo[hullaid][HKokain] = 0;
	HullaInfo[hullaid][HMati] = 0;
	HullaInfo[hullaid][HMariska] = 0;
	HullaInfo[hullaid][HPenz] = 0;

	DestroyDynamic3DTextLabel(HullaInfo[hullaid][Htext3d]);
	DestroyDynamicObject(HullaInfo[hullaid][Hobject][0]);
	DestroyDynamicObject(HullaInfo[hullaid][Hobject][1]);
	DestroyDynamicObject(HullaInfo[hullaid][Hobject][2]);
	DestroyDynamicObject(HullaInfo[hullaid][Hobject][3]);
	DestroyDynamicObject(HullaInfo[hullaid][Hobject][4]);
	return true;
}

stock HullaLerak(playerid, Float:Xa, Float:Ya, Float:Za, oka, VW = 0, megolte[] = "Nem gyilkosság")
{
	new ureshely = UresHullaHely();
	if(ureshely == NINCS) return false;
	
	TargyEldob(playerid, ELDOB_FEGYVER, NINCS);//kezében lévõ fegyver eldobása
	
	//fegyverek törlése
	new fegyver = -1;
	for(;++fegyver < 13;)
	{
		PlayerInfo[playerid][pFegyverek][fegyver] = 0;
		PlayerInfo[playerid][pToltenyek][fegyver] = 0;
	}
	
	SetPlayerAttachedWeapon(playerid, true);
	
	HullaInfo[ureshely][Hvan] = true;
	HullaInfo[ureshely][Htimer] = SetTimerEx("HullaTorles", 600000, true, "d", ureshely);
	HullaInfo[ureshely][Hpos][0] = Xa;
	HullaInfo[ureshely][Hpos][1] = Ya;
	Za -= 0.9;
	HullaInfo[ureshely][Hvw] = VW;
	HullaInfo[ureshely][Hpos][2] = Za;
	HullaInfo[ureshely][Hoka] = oka;
	format(HullaInfo[ureshely][Hkie], MAX_PLAYER_NAME, JatekosNev(playerid));
	HullaInfo[ureshely][Hkieid] = playerid;
	
	if(PlayerInfo[playerid][pKokain] > 0 && PlayerInfo[playerid][pjatekosszint] > 3)
	{
	    HullaInfo[ureshely][HKokain] = PlayerInfo[playerid][pKokain];
	    PlayerInfo[playerid][pKokain] = 0;
	} else HullaInfo[ureshely][HKokain] = 0;
	
	if(PlayerInfo[playerid][pHeroin] > 0 && PlayerInfo[playerid][pjatekosszint] > 3)
	{
	    HullaInfo[ureshely][HHeroin] = PlayerInfo[playerid][pHeroin];
	    PlayerInfo[playerid][pHeroin] = 0;
	} else HullaInfo[ureshely][HHeroin] = 0;
	
	if(PlayerInfo[playerid][pMarihuana] > 0 && PlayerInfo[playerid][pjatekosszint] > 3)
	{
	    HullaInfo[ureshely][HMariska] = PlayerInfo[playerid][pMarihuana];
	    PlayerInfo[playerid][pMarihuana] = 0;
	} else HullaInfo[ureshely][HMariska] = 0;
	
	if(PlayerInfo[playerid][pMaterial] > 0 && PlayerInfo[playerid][pjatekosszint] > 3)
	{
	    HullaInfo[ureshely][HMati] = PlayerInfo[playerid][pMaterial];
	    PlayerInfo[playerid][pMaterial] = 0;
	} else HullaInfo[ureshely][HMati] = 0;
	
	if(PlayerInfo[playerid][ppenz] > 0 && PlayerInfo[playerid][pjatekosszint] > 3)
	{
	    HullaInfo[ureshely][HPenz] = PlayerInfo[playerid][ppenz];
		SetMoney(playerid,0);
	} else HullaInfo[ureshely][HPenz] = 0;

	format(HullaInfo[ureshely][Hmegolte], MAX_PLAYER_NAME, megolte);
	HullaInfo[ureshely][Htext3d] = CreateDynamic3DTextLabel("HOLTTEST\n(( /hulla ))", COLOR_YELLOW, Xa, Ya, Za, 20.0,.worldid = VW);

	HullaInfo[ureshely][Hobject][0] = CreateDynamicObject(2907, Xa, Ya, Za, 0, 0, 274, VW);
	HullaInfo[ureshely][Hobject][1] = CreateDynamicObject(2905, Xa+0.85376, Ya+0.161621, Za-0.01857662, 0, 26, 278, VW);
	HullaInfo[ureshely][Hobject][2] = CreateDynamicObject(2905, Xa+0.739746, Ya-0.158935, Za+0.006423, 356.68469238281, 145.93511962891, 263.75891113281, VW);
	HullaInfo[ureshely][Hobject][3] = CreateDynamicObject(2906, Xa-0.081787, Ya+0.239991, Za-0.03601265, 359.30590820313, 273.93939208984, 298.02392578125, VW);
	HullaInfo[ureshely][Hobject][4] = CreateDynamicObject(2906, Xa-0.024414, Ya-0.30957, Za-0.03601265, 359.01071166992, 339.99688720703, 242.68936157227, VW);

	HullaInfo[ureshely][Hallapot] = 80;
	HullaInfo[ureshely][Hperc] = 0;
	return true;
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	new butorid = ButorObjectID(objectid);

	PlayerInfo[playerid][pSzButor] = butorid;
	ShowPlayerDialog(playerid, DIALOG_BUTOR_SZERKESZTES, DIALOG_STYLE_LIST, #COL_FEHER"Bútor "#COL_VKEK"szerkesztés", "Bútor mozgatása\nBútor törlése", "Mehet!", "Mégse!");

	CancelEdit(playerid);
	return true;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(response == EDIT_RESPONSE_FINAL)
	{
		new fid = FrakcioID(PlayerInfo[playerid][pFrakcioKezeles]);
		if(fid != NINCS)
		{
			if(FInfo[fid][fObjectID] == objectid)
			{
				PlayerInfo[playerid][pFrakcioKezeles] = -1;
				
				FInfo[fid][fSzefPos][0] = x;
				FInfo[fid][fSzefPos][1] = y;
				FInfo[fid][fSzefPos][2] = z;
				
				FInfo[fid][fSzefPosR][0] = rx;
				FInfo[fid][fSzefPosR][1] = ry;
				FInfo[fid][fSzefPosR][2] = rz;
				FkUpdate(fid, fuSzefObject);
				
				SFM(playerid, COL_MKEK, "%s frakció széf pozíciója sikeresen elmentve!", FInfo[fid][fNev]);
				return true;
			}
		}
		if(objectid == GraffitiObjectLerakas[playerid])
		{
			AddTag(x,y,z,rx,ry,rz);
			DestroyDynamicObject(GraffitiObjectLerakas[playerid]);
			GraffitiObjectLerakas[playerid] = 0;
			SCM(playerid,COL_LRED, "Grafiti Lerakva!");
			return 1;
		}
		if(objectid == HifiObjectLerakas[playerid])
		{
			DestroyDynamicObject(HifiObjectLerakas[playerid]);
			HifiObjectLerakas[playerid] = 0;
			HifiLerak(playerid,x,y,z,rx,ry,rz);
			return true;
		}
		if(AutomataID[playerid] > NINCS)
		{
			new auid = AutomataID[playerid];
			
			AutomataInfo[auid][aupos][0] = x;
			AutomataInfo[auid][aupos][1] = y;
			AutomataInfo[auid][aupos][2] = z;
			AutomataInfo[auid][aupos][3] = rx;
			AutomataInfo[auid][aupos][4] = ry;
			AutomataInfo[auid][aupos][5] = rz;
			
			if(AutomataInfo[auid][autipus] == 2)
			{
				if(IsValidDynamic3DTextLabel(AutomataInfo[auid][autext])) DestroyDynamic3DTextLabel(AutomataInfo[auid][autext]);
				AutomataInfo[auid][autext] = CreateDynamic3DTextLabel("(( /menü ))", COLOR_MKEK, x, y, z, 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
			}
			
			SetDynamicObjectPos(AutomataInfo[auid][auobject], x, y, z);
			SetDynamicObjectRot(AutomataInfo[auid][auobject], rx, ry, rz);
			
			//DestroyDynamicObject(AutomataInfo[auid][auobject]);
			//AutomataInfo[auid][auobject] = CreateDynamicObject(AutomataModel(AutomataInfo[auid][autipus]), x, y, z, rx, ry, rz, AutomataInfo[auid][auVW], AutomataInfo[auid][auInt]);
			Streamer_Update(playerid);
			AutomataInfo[auid][auszerkeszti] = false;
			AutomataInfo[auid][auhasznalva] = true;
			SCM(playerid, COL_VZOLD, "Automata pozíciója sikeresen elmentve!");
			AutomataID[playerid] = NINCS;
			
			new qry[1024];
			format(qry, 1024, "UPDATE `"#LSQL_AUTOMATA_TABLA"` SET aupenz='%d', auposx='%f', auposy='%f', auposz='%f', aurotx='%f', auroty='%f', aurotz='%f', vw='%d', int='%d' WHERE id='%d'", AutomataInfo[auid][aupenz], x, y, z, rx, ry, rz, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), auid);
		
			new DB:db = db_open(LSQL_ADATBAZIS);
			db_free_result(db_query(db, qry));
			db_close(db);
			
			return true;
		}
		
	    if(KapuID[playerid] != NINCS)
	    {
	        switch(SzerkesztesAllas[playerid])
		    {
				case 1:
				{
					Kapu[KapuID[playerid]][kZPos][0] = x;
					Kapu[KapuID[playerid]][kZPos][1] = y;
					Kapu[KapuID[playerid]][kZPos][2] = z;

					Kapu[KapuID[playerid]][kZRPos][0] = rx;
					Kapu[KapuID[playerid]][kZRPos][1] = ry;
					Kapu[KapuID[playerid]][kZRPos][2] = rz;

					SzerkesztesAllas[playerid] = 2;
					EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);

					SCM(playerid, COL_MKEK, "Zárt pozíció sikeresen elmentve!");
					SCM(playerid, COL_MKEK, "Most kérlek állítsd be és mentsd el a kapu nyitott állapotát!");
				    return true;
				}
				case 2:
				{
				    Kapu[KapuID[playerid]][kNPos][0] = x;
					Kapu[KapuID[playerid]][kNPos][1] = y;
					Kapu[KapuID[playerid]][kNPos][2] = z;

					Kapu[KapuID[playerid]][kNRPos][0] = rx;
					Kapu[KapuID[playerid]][kNRPos][1] = ry;
					Kapu[KapuID[playerid]][kNRPos][2] = rz;
					Kapu[KapuID[playerid]][kMozgo] = true;
					Kapu[KapuID[playerid]][kSzerkeszt] = false;

					new querycske[2048], hasznalocska[128], i = NINCS, numero = GetHasznaloNum(KapuID[playerid]);
					for(;++i < MAX_KAPU_HASZNALO;)
					{
					    if(Kapu[KapuID[playerid]][kHasznalo][i] > 0)
					    {
							format(hasznalocska, sizeof(hasznalocska), "%s%d%s", hasznalocska, Kapu[KapuID[playerid]][kHasznalo][i], (numero > i + 1 ? (",") : ("")));
					    }
					}
					
					format(querycske, sizeof(querycske), "INSERT INTO `"#MYSQL_KAPU_TABLA"` (ID, Nev, Model, Tav, Speed, Pos, NPos, NRPos, ZPos, ZRPos, Hasznalo, nyit, Vw, Kod)");
					format(querycske, sizeof(querycske), "%s VALUES('%d',", querycske, KapuID[playerid]);
					format(querycske, sizeof(querycske), "%s'%s','%d',", querycske, Kapu[KapuID[playerid]][kNev], Kapu[KapuID[playerid]][kModel]);
					format(querycske, sizeof(querycske), "%s'%f','3',", querycske, Kapu[KapuID[playerid]][kTav]);
					format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, PosExt(Kapu[KapuID[playerid]][kZPos]));
					format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, PosExt(Kapu[KapuID[playerid]][kNPos]));
					format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, PosExt(Kapu[KapuID[playerid]][kNRPos]));
					format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, PosExt(Kapu[KapuID[playerid]][kZPos]));
					format(querycske, sizeof(querycske), "%s'%f,%f,%f',", querycske, PosExt(Kapu[KapuID[playerid]][kZRPos]));
					format(querycske, sizeof(querycske), "%s'%s','0','%d',", querycske, (strlen(hasznalocska) > 0 ? hasznalocska : ("0")), GetPlayerVirtualWorld(playerid));
					format(querycske, sizeof(querycske), "%s'%d')", querycske, Kapu[KapuID[playerid]][kKod]);
					//mysql_function_query(sql_ID, querycske, false, "", "");
					mysql_tquery(sql_ID, querycske, "", "");

					if(Kapu[KapuID[playerid]][kKod] > NINCS)
						AdminUzenet(COLOR_LIGHTRED, 1, "%s létrehozott egy kaput! Obj: %d | Kód: %d | Folyamat: EDO", JatekosNev(playerid), Kapu[KapuID[playerid]][kModel], Kapu[KapuID[playerid]][kKod]);
					else
					    AdminUzenet(COLOR_LIGHTRED, 1, "%s létrehozott egy kaput! Obj: %d | Fk: %s | Folyamat: EDO", JatekosNev(playerid), Kapu[KapuID[playerid]][kModel], hasznalocska);

                    SCM(playerid, COL_MKEK, "Kapu zárt és nyitott állapota sikeresen elmentve!");
					SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZPos]));
					SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZRPos]));

					SzerkesztesAllas[playerid] = NINCS;
					KapuID[playerid] = NINCS;
				    return true;
				}
				case 3:
				{
					Kapu[KapuID[playerid]][kZPos][0] = x;
					Kapu[KapuID[playerid]][kZPos][1] = y;
					Kapu[KapuID[playerid]][kZPos][2] = z;

					Kapu[KapuID[playerid]][kZRPos][0] = rx;
					Kapu[KapuID[playerid]][kZRPos][1] = ry;
					Kapu[KapuID[playerid]][kZRPos][2] = rz;

					Kapu[KapuID[playerid]][kSzerkeszt] = false;

					new querycske[256];
					format(querycske, sizeof(querycske), "UPDATE `"#MYSQL_KAPU_TABLA"` SET ZPos = '%f,%f,%f', ZRPos = '%f,%f,%f' WHERE ID = '%d'", PosExt(Kapu[KapuID[playerid]][kZPos]), PosExt(Kapu[KapuID[playerid]][kZRPos]), KapuID[playerid]);
					//mysql_function_query(sql_ID, querycske, false, "", "");
					mysql_tquery(sql_ID, querycske, "", "");

					KapuID[playerid] = NINCS;
					SCM(playerid, COL_MKEK, "Kapu zárt állapota sikeresen frissítve!");
				    return true;
				}
				case 4:
				{
				    Kapu[KapuID[playerid]][kNPos][0] = x;
					Kapu[KapuID[playerid]][kNPos][1] = y;
					Kapu[KapuID[playerid]][kNPos][2] = z;

					Kapu[KapuID[playerid]][kNRPos][0] = rx;
					Kapu[KapuID[playerid]][kNRPos][1] = ry;
					Kapu[KapuID[playerid]][kNRPos][2] = rz;

					Kapu[KapuID[playerid]][kSzerkeszt] = false;

					new querycske[256];
					format(querycske, sizeof(querycske), "UPDATE `"#MYSQL_KAPU_TABLA"` SET NPos = '%f,%f,%f', NRPos = '%f,%f,%f' WHERE ID = '%d'", PosExt(Kapu[KapuID[playerid]][kNPos]), PosExt(Kapu[KapuID[playerid]][kNRPos]), KapuID[playerid]);
					//mysql_function_query(sql_ID, querycske, false, "", "");
					mysql_tquery(sql_ID, querycske, "", "");

					SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZPos]));
					SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZRPos]));

					KapuID[playerid] = NINCS;
					SCM(playerid, COL_MKEK, "Kapu nyitott állapota sikeresen frissítve!");
				    return true;
				}
		    }
		}
		new querycske[1024],formatalunk[512],
		kategoria[48],penz,nev[48],
		butorszam = ButorObjectID(objectid);

		if(!ButorInfo[butorszam][butorMegveve])
		{
			switch(ButorInfo[butorszam][butorTipus])
			{
				case 1:
				{
					kategoria = "Asztal";
					penz = Butor_Asztal[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Asztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 2:
				{
					kategoria = "Ülõgarnitúra";
					penz = Butor_Ulogarnitura[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Ulogarnitura[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 3:
				{
					kategoria = "Festmények, képek";
					penz = Butor_Kepek[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Kepek[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 4:
				{
					kategoria = "Lámpák";
					penz = Butor_Lampak[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Lampak[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 5:
				{
					kategoria = "TV-k";
					penz = Butor_TV[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_TV[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 6:
				{
					kategoria = "DVD-k, HiFi-k";
					penz = Butor_DVDHiFi[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_DVDHiFi[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 7:
				{
					kategoria = "Hangfal";
					penz = Butor_Hangfal[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Hangfal[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 8:
				{
					kategoria = "Szekrény";
					penz = Butor_Szekreny[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Szekreny[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 9:
				{
					kategoria = "Fotel";
					penz = Butor_Fotel[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Fotel[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 10:
				{
					kategoria = "Konyhabútor";
					penz = Butor_Konyhabutor[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Konyhabutor[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 11:
				{
					kategoria = "Hûtõ";
					penz = Butor_Huto[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Huto[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 12:
				{
					kategoria = "Számítógép";
					penz = Butor_Szamitogep[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Szamitogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 13:
				{
					kategoria = "Ajtó";
					penz = Butor_Ajto[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Ajto[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 14:
				{
					kategoria = "Mosógép";
					penz = Butor_Mosogep[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Mosogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 15:
				{
					kategoria = "Nyomtató";
					penz = Butor_Nyomtato[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Nyomtato[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 16:
				{
					kategoria = "Ágy";
					penz = Butor_Agy[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Agy[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 17:
				{
					kategoria = "WC";
					penz = Butor_WC[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_WC[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 18:
				{
					kategoria = "Zuhanyzó";
					penz = Butor_Zuhanyzo[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Zuhanyzo[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 19:
				{
					kategoria = "Mosdó";
					penz = Butor_Mosdo[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Mosdo[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 20:
				{
					kategoria = "Szõnyeg";
					penz = Butor_Szonyeg[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Szonyeg[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 21:
				{
					kategoria = "Szék";
					penz = Butor_Szek[ButorInfo[butorszam][butorListitem]][butorNEV];
					format(nev, sizeof(nev), Butor_Szek[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 22:
				{
					kategoria = "Íróasztal";
					penz = Butor_Iroasztal[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Iroasztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 23:
				{
					kategoria = "Fal";
					penz = Butor_Fal[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Fal[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
				case 24:
				{
					kategoria = "Széf";
					penz = Butor_Szef[ButorInfo[butorszam][butorListitem]][butorAR];
					format(nev, sizeof(nev), Butor_Szef[ButorInfo[butorszam][butorListitem]][butorNEV]);
				}
			}
			
			ButorInfo[butorszam][butorPosX] = x;
			ButorInfo[butorszam][butorPosY] = y;
			ButorInfo[butorszam][butorPosZ] = z;
			ButorInfo[butorszam][butorPosRX] = rx;
			ButorInfo[butorszam][butorPosRY] = ry;
			ButorInfo[butorszam][butorPosRZ] = rz;

			PlayerInfo[playerid][pSzButor] = butorszam;
			format(formatalunk, sizeof(formatalunk), #COL_FEHER"Biztos, hogy meg akarod venni a következõ bútort?\n\n\n"#COL_VKEK"Bútor kategóriája: "#COL_FEHER"%s\n"#COL_VKEK"Bútor neve: "#COL_FEHER"%s\n"#COL_VKEK"Bútor ára: "#COL_FEHER"%dFt", kategoria, nev, penz);
			ShowPlayerDialog(playerid, DIALOG_BUTOR_MEGVETEL, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"megvétele", formatalunk, "Biztos!", "Mégse!");
			return true;
		}
		format(querycske, sizeof(querycske), "UPDATE `butorok` SET butorPosX = '%.2f', butorPosY = '%.2f', butorPosZ = '%.2f', butorPosRX = '%.2f', butorPosRY = '%.2f', butorPosRZ = '%.2f' WHERE id = '%d'", x, y, z, rx, ry, rz, butorszam);
		//mysql_function_query(sql_ID, querycske, false, "", "");
		mysql_tquery(sql_ID, querycske, "", "");

		SCM(playerid, COL_MKEK, "Sikeresen elmentetted a bútort!");
	}
 
	if(response == EDIT_RESPONSE_CANCEL)
	{
	    if(objectid == HifiObjectLerakas[playerid])
	    {
			PlayerInfo[playerid][pHifi]++;
			DestroyDynamicObject(HifiObjectLerakas[playerid]);
			SCM(playerid,COL_LRED,"Akkor mégse rakj le..");
			return true;
	    }
		if(objectid == GraffitiObjectLerakas[playerid])
		{
			DestroyDynamicObject(GraffitiObjectLerakas[playerid]);
			GraffitiObjectLerakas[playerid] = 0;
			SCM(playerid,COL_LRED, "Grafiti lerakási kísérlet törölve!");
			return 1;
		}
	    if(KapuID[playerid] != NINCS)
	    {
		    if((SzerkesztesAllas[playerid] == 1 || SzerkesztesAllas[playerid] == 2))
		    {
	            Kapu[KapuID[playerid]][kVan] = false;
	            Kapu[KapuID[playerid]][kSzerkeszt] = false;
				Kapu[KapuID[playerid]][kModel] = 0;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kSpeed] = 0.0;
				Kapu[KapuID[playerid]][kPos][0] = 0.0;
				Kapu[KapuID[playerid]][kPos][1] = 0.0;
				Kapu[KapuID[playerid]][kPos][2] = 0.0;
				Kapu[KapuID[playerid]][kNPos][0] = 0.0;
				Kapu[KapuID[playerid]][kNPos][1] = 0.0;
				Kapu[KapuID[playerid]][kNPos][2] = 0.0;
				Kapu[KapuID[playerid]][kNRPos][0] = 0.0;
				Kapu[KapuID[playerid]][kNRPos][1] = 0.0;
				Kapu[KapuID[playerid]][kNRPos][2] = 0.0;
				Kapu[KapuID[playerid]][kZPos][0] = 0.0;
				Kapu[KapuID[playerid]][kZPos][1] = 0.0;
				Kapu[KapuID[playerid]][kZPos][2] = 0.0;
				Kapu[KapuID[playerid]][kZRPos][0] = 0.0;
				Kapu[KapuID[playerid]][kZRPos][1] = 0.0;
				Kapu[KapuID[playerid]][kZRPos][2] = 0.0;
				Kapu[KapuID[playerid]][kMozgo] = false;
				Kapu[KapuID[playerid]][kNyit] = false;
				Kapu[KapuID[playerid]][kVW] = NINCS;
				DestroyDynamicObject(Kapu[KapuID[playerid]][kOID]);
				SzerkesztesAllas[playerid] = 0;
				KapuID[playerid] = NINCS;
				SCM(playerid, COL_MKEK, "Kiléptél a szerkesztési folyamatból, kapu sikeresen törölve!");
		        return true;
			}
			if(SzerkesztesAllas[playerid] == 4)
			{
		        SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZPos]));
				SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], PosExt(Kapu[KapuID[playerid]][kZRPos]));
                Kapu[KapuID[playerid]][kSzerkeszt] = false;
				SzerkesztesAllas[playerid] = 0;
				KapuID[playerid] = NINCS;
				SCM(playerid, COL_MKEK, "Kapu szerkesztése befejezve és visszaállítva az eredeti zárt állapotára!");
		        return false;
			}
		}
		
		if(AutomataID[playerid] > -1)
		{
			new
				Float:objectpos[6],
				automataid = AutomataID[playerid];
			
			GetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[0], objectpos[1], objectpos[2]);
			GetDynamicObjectRot(AutomataInfo[automataid][auobject], objectpos[3], objectpos[4], objectpos[5]);
			
			SetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[0], objectpos[1], objectpos[2]);
			SetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[3], objectpos[4], objectpos[5]);
			
			AutomataID[playerid] = NINCS;
			return true;
		}
		
		new butorszam = ButorObjectID(objectid);
		if(ButorInfo[butorszam][butorMegveve])
		{
			SetDynamicObjectPos(ButorInfo[butorszam][butorObject], ButorInfo[butorszam][butorPosX], ButorInfo[butorszam][butorPosY], ButorInfo[butorszam][butorPosZ]);
			SetDynamicObjectRot(ButorInfo[butorszam][butorObject], ButorInfo[butorszam][butorPosRX], ButorInfo[butorszam][butorPosRY], ButorInfo[butorszam][butorPosRZ]);
		} else {
			ButorInfo[butorszam][butorPosX] = 0.0;
			ButorInfo[butorszam][butorPosY] = 0.0;
			ButorInfo[butorszam][butorPosZ] = 0.0;
			ButorInfo[butorszam][butorPosRX] = 0.0;
			ButorInfo[butorszam][butorPosRY] = 0.0;
			ButorInfo[butorszam][butorPosRZ] = 0.0;
			ButorInfo[butorszam][butorVW] = 0;
			ButorInfo[butorszam][butorInterior] = 0;
			ButorInfo[butorszam][butorHasznalva] = false;
			ButorInfo[butorszam][butorMegveve] = false;
			ButorInfo[butorszam][butorTipus] = NINCS;
			ButorInfo[butorszam][butorListitem] = NINCS;
			ButorInfo[butorszam][butorModel] = 0;
			ButorInfo[butorszam][butorPosRX] = 0.0;
			ButorInfo[butorszam][butorPosRY] = 0.0;
			ButorInfo[butorszam][butorPosRZ] = 0.0;
			DestroyDynamicObject(ButorInfo[butorszam][butorObject]);
		}
		/*new
			Float:objectpos[6],
			automataid = ObjectID(objectid);
		
		GetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[0], objectpos[1], objectpos[2]);
		GetDynamicObjectRot(AutomataInfo[automataid][auobject], objectpos[3], objectpos[4], objectpos[5]);
		
		SetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[0], objectpos[1], objectpos[2]);
		SetDynamicObjectPos(AutomataInfo[automataid][auobject], objectpos[3], objectpos[4], objectpos[5]);*/
	}
	MoveDynamicObject(objectid, x, y, z, 10.0, rx, ry, rz);
	return true;
}

stock SetVehicleNeon( vid, szin )
{
	switch( szin )
	{
		case 0:
		{
			if(IsValidDynamicObject( vInfo[vid][vNeon][1] )) DestroyDynamicObject( vInfo[vid][vNeon][1] );
			if(IsValidDynamicObject( vInfo[vid][vNeon][2] )) DestroyDynamicObject( vInfo[vid][vNeon][2] );
			vInfo[vid][vNeon][1] = INVALID_OBJECT_ID;
			vInfo[vid][vNeon][2] = INVALID_OBJECT_ID;
			vInfo[vid][vNeon][4] = false;
		}
		case 1 .. 6:
		{
			new Neonok[6] = {18647, 18648, 18649, 18650, 18651, 18652};
			
			if(IsValidDynamicObject( vInfo[vid][vNeon][1] )) DestroyDynamicObject( vInfo[vid][vNeon][1] );
			if(IsValidDynamicObject( vInfo[vid][vNeon][2] )) DestroyDynamicObject( vInfo[vid][vNeon][2] );
			vInfo[vid][vNeon][1] = CreateDynamicObject(Neonok[szin - 1],0.0, 0.0, 10.0, 0, 0, 0);
			vInfo[vid][vNeon][2] = CreateDynamicObject(Neonok[szin - 1],0.0, 0.0, 10.0, 0, 0, 0);
			
			AttachDynamicObjectToVehicle(vInfo[vid][vNeon][1], vInfo[vid][vID], 0.9004, 0.1164, -0.4655, 0.000000, 0.000000, 0.000000);
			AttachDynamicObjectToVehicle(vInfo[vid][vNeon][2], vInfo[vid][vID], -0.8706, 0.0570, -0.4655, 0.000000, 0.000000, 0.000000);
			
			vInfo[vid][vNeon][4] = true;
		}
	}
	return true;
}

stock SetVehicleIndex(playerid, vehicleid, bool:left=false, bool:right=false, bool:kozos=false)
{
	if(right)
	{
		if(!vInfo[vehicleid][JobbIndex])
		{
			if(!left || !kozos)
			{
				DestroyDynamicObject(vInfo[vehicleid][BalIndex1]);
				DestroyDynamicObject(vInfo[vehicleid][BalIndex2]);
				DestroyDynamicObject(vInfo[vehicleid][BalTrailer1]);
				DestroyDynamicObject(vInfo[vehicleid][BalTrailer2]);
				vInfo[vehicleid][BalIndex1] = 0;
				vInfo[vehicleid][BalIndex2] = 0;
				vInfo[vehicleid][BalTrailer1] = 0;
				vInfo[vehicleid][BalTrailer2] = 0;
				vInfo[vehicleid][BalIndex] = 0;
			}
			vInfo[vehicleid][JobbIndex1] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
			vInfo[vehicleid][JobbIndex2] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
			switch(GetVehicleModel(vInfo[vehicleid][vID]))
			{
				case 417, 425, 430, 432, 441, 446, 447, 449, 452, 453, 454, 460, 464, 465, 469, 472, 473, 476, 481, 484, 487, 488, 493, 497, 501, 509, 510, 511, 512, 513, 519, 520, 537, 538, 539, 548, 553, 563, 564, 569, 570, 571, 577, 590, 592, 593, 594, 595:
				{
					vInfo[vehicleid][JobbIndex1] = 0;
					vInfo[vehicleid][JobbIndex2] = 0;
					DestroyDynamicObject(vInfo[vehicleid][JobbIndex1]);
					DestroyDynamicObject(vInfo[vehicleid][JobbIndex2]);
					return vInfo[vehicleid][JobbIndex] = 0;
				}
				case 400:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.929999, -2.275004, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.949999, 2.069999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 401:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.969999, -2.305005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.039999, 2.495009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 402:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.934999, -2.590011, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.999999, 2.565011, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 403:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.549999, -4.195048, -0.719999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.989999, 4.455054, -0.809999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 404:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.819999, -2.720014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.694999, 2.280004, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 405:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.874999, -2.720014, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.874999, 2.325005, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 406:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 2.230003, -5.130069, 0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.924998, 4.985066, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 407:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.999999, -3.515032, 0.070000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.844999, 4.145047, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 408:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, -4.035044, -0.504999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 4.835062, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 409:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.859999, -3.905041, -0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.909999, 3.440031, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 410:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, -2.165001, 0.104999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.879999, 2.150001, 0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 411:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.854999, -2.470008, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.999999, 2.520009, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 412:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.989999, -3.595034, -0.154999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.009999, 2.725014, -0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 413:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.909999, -2.660013, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.954999, 2.570011, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 414:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.104999, -3.405030, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.709999, 2.875018, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 415:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.749999, -2.430008, 0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.924999, 2.495009, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 416:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.369999, -3.665036, 1.459998, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.049999, 2.935019, 0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 418:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.004999, -2.545010, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.984999, 2.360006, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 419:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.929999, -3.005021, -0.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.014999, 2.375006, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 420:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.009999, -2.705014, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.004999, 2.285004, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 421:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.839999, -2.895018, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.909999, 2.530010, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 422:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.914999, -2.470009, -0.259999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.794999, 2.290004, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 423:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.839999, -2.250004, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.774999, 2.325005, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 424:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.749999, -1.619998, 0.240000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.874999, 1.354999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 426:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.645013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.059999, 2.290004, -0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 427:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.934999, -3.925042, 0.339999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.999999, 2.695014, 0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 428:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.924999, -2.965020, 0.175000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.939999, 2.435008, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 429:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.814999, -2.435008, -0.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.799999, 2.275004, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 431:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.039999, -5.810085, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.944999, 5.890087, 0.399999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 433:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.334998, -4.735060, -0.084999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.264999, 3.725037, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 434:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.659999, -1.964998, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.619999, 1.894998, -0.309999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 436:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.889999, -2.485009, 0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.874999, 2.240003, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 437:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.164999, -5.330074, 1.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.194999, 5.560079, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 438:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.064999, -2.520009, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.119999, 2.370006, -0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 439:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.759999, -2.650012, -0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.804999, 2.370006, -0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 440:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.909999, -2.625012, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.979999, 2.565011, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 442:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.024999, -3.125023, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.019999, 2.810016, -0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 443:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.474998, -6.870109, -0.729999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.074999, 5.820085, -1.029999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 444:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.119999, -3.065022, 0.539999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.139999, 2.730014, 0.689999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 445:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.924999, -2.800016, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.939999, 2.335005, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 448:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.180000, -0.999999, -0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.250000, 0.479999, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 451:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.864999, -2.560011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.954999, 1.944998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 455:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.349998, -4.560056, -0.784999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.294999, 3.730037, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 456:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.209999, -4.560056, -0.669999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.944999, 3.360029, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 457:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.509999, -1.294998, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.449999, 1.179999, -0.095000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 458:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.949999, -2.805016, -0.165000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.415007, -0.145000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 459:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.889999, -2.640012, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.580011, -0.085000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 461:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.200000, -1.074999, 0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 462:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.155000, -0.909999, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 463:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.180000, -1.044999, 0.129999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.195000, 0.749999, 0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 466:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.009999, -2.770015, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.904999, 2.625012, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 467:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.924999, -3.025021, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.904999, 2.820017, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 468:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.145000, -0.864999, 0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.245000, 0.494999, 0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 470:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.019999, -2.685013, -0.234999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.054999, 2.160001, 0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 471:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.399999, -0.779999, 0.204999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.364999, 0.764999, 0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 474:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.959999, -2.825016, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.894999, 2.590011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 475:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.859999, -2.825016, -0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.859999, 2.485009, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 477:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.019999, -2.660013, 0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.864999, 2.485009, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 478:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.834999, -2.555010, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.079999, 1.994998, 0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 479:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.939999, -2.755015, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.984999, 2.525010, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 480:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.844999, -2.375006, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.619999, 2.295005, -0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 482:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.859999, -2.565011, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.894999, 2.405007, -0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 483:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.644999, -2.765015, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.794999, 2.610012, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 485:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.664999, -1.444998, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.644999, 1.749998, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 486:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.569999, -3.180025, 1.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.819999, 1.449998, 0.769999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 489:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.119999, -2.655013, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.114999, 2.590011, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 490:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.099999, -3.095023, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.084999, 3.190025, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 491:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.834999, -2.910018, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.829999, 2.500009, -0.099999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 492:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.899999, -2.795016, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.684999, 2.500009, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 494:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.789999, -2.890018, 0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.854999, 2.365006, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 495:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.094999, -2.205002, -0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.109999, 2.365006, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 496:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.934999, -2.125000, 0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.939999, 2.190002, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 498:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.954999, -3.110023, 0.334999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.879999, 3.080023, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 499:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.119999, -3.425030, 0.409999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.779999, 2.495009, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 500:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.739999, -1.969998, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.399999, 2.125001, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 502:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.774999, -2.715014, -0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.859999, 2.605012, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 503:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, -2.840017, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.859999, 2.410007, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 504:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.069999, -2.780015, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.894999, 2.635012, -0.089999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 505:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.074999, -2.625012, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.089999, 2.605012, 0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 506:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.049999, 2.090000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.814999, -2.460008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 507:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.049999, 3.250026, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.024999, -2.845017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 508:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.104999, 3.135024, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.584998, -3.995043, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 514:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.349998, 4.325051, 0.140000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.224999, -4.990066, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 515:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.349998, 4.325051, -0.519999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.299998, -4.990066, -1.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 516:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 517:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 518:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 521:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.204999, 0.674999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 522:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 523:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 524:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.139999, -3.970043, -1.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.644998, 4.080045, -0.319999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 525:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.224999, -3.060022, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.179999, 2.905019, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 526:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.889999, -2.325005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.004999, 2.440008, -0.105000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 527:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.889999, -2.230003, 0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.964999, 2.465008, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 528:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.049999, 2.530010, 0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.134999, -2.640012, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 529:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.044999, 2.610012, 0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.124999, -2.670013, 0.244999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 530:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.474999, -1.874998, 1.314998, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 531:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.419999, 1.579998, -0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 532:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.389998, 3.050022, 1.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.684999, -1.974998, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 533:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.004999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.054999, -2.520010, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 534:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.109999, 2.910019, -0.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.599999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 535:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.934999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 536:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.739999, -3.105023, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 540:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.829999, -2.745015, -0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.944999, 2.585011, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 541:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.724999, -2.400007, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.684999, 2.390007, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 542:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.859999, 2.650013, -0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.689999, -2.960020, -0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 543:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.799999, 2.235003, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.014999, -2.620012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 544:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.729999, 3.720037, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.834999, -3.355029, -0.544999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 545:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.494999, 1.659998, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.829999, -2.064999, -0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 546:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.755015, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.014999, 2.635012, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 547:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.919999, -2.665013, 0.065000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.984999, 2.485009, 0.035000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 549:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.874999, -2.565011, 0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.014999, 2.485009, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 550:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.994999, -2.700014, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.029999, 2.585011, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 551:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.974999, -3.040022, 0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.029999, 2.620012, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 552:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.994999, -3.030021, 0.609999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.104999, 3.090023, 0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 554:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.109999, -2.815016, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.144999, 2.505009, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 555:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.749999, -2.480009, -0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.739999, 2.305005, -0.269999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 556:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.074999, -2.940019, 0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.009999, 2.530010, 0.499999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 557:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.134999, -2.785016, 0.584999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.184999, 2.490009, 0.724999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 558:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.914999, -2.430008, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.919999, 2.170002, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 559:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.864999, -2.300005, 0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.859999, 2.565011, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 560:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.929999, -2.260004, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.929999, 2.520010, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 561:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.929999, -2.555011, -0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.869999, 2.605012, -0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 562:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.854999, -2.275004, 0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.939999, 2.365006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 565:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.874999, -1.924998, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.844999, 2.049999, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 566:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.149999, 2.690014, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 567:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.149999, 2.925019, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 568:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.189999, -1.514998, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.444999, 2.160001, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 572:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.434999, -1.039999, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 573:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.984999, -3.360029, -0.389999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.989999, 3.175025, -0.354999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 574:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.679999, -1.199999, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.704999, 1.679998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 575:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.974999, -2.740015, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.029999, 2.265004, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 576:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.974999, -3.205025, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.074999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 578:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.239999, 4.360052, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.309998, -5.560079, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 579:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.219999, 2.395007, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 580:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.219999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 581:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.189999, -1.014999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 582:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.034999, -3.425030, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.089999, 2.505009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 583:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.724999, -1.604998, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.669999, 1.399998, 0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 585:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.159999, 2.900018, 0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, -2.850017, 0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 586:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.394999, -1.234999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.384999, 0.599999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 587:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.560011, 0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.019999, 2.115000, -0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 588:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.039999, -3.945042, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.414998, 3.400030, -0.424999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 589:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 0.984999, -2.330005, 0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.889999, 2.335005, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 596:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 597:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 598:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 599:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 600:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 601:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.169999, -3.065022, 1.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.179999, 3.130024, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 602:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 603:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 604:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 605:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 608:
				{
					vInfo[vehicleid][JobbIndex1] = 0;
					vInfo[vehicleid][JobbIndex2] = 0;
					DestroyDynamicObject(vInfo[vehicleid][JobbIndex1]);
					DestroyDynamicObject(vInfo[vehicleid][JobbIndex2]);
					return vInfo[vehicleid][JobbIndex] = 0;
				}
				case 609:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex1], vInfo[vehicleid][vID], 1.119999, -2.880018, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbIndex2], vInfo[vehicleid][vID], 1.314998, 2.660013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
			}
			if(IsTrailerAttachedToVehicle(vInfo[vehicleid][vID]))
			{
				vInfo[vehicleid][JobbTrailer1] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
				//vInfo[vehicleid][JobbTrailer2] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
				switch(GetVehicleModel(GetVehicleTrailer(vInfo[vehicleid][vID])))
				{
					case 435:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 1.019999, -3.950042, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 450:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 1.049999, -3.975043, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 584:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 1.214999, -4.320051, -0.714999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 591:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 1.354998, -3.960043, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 606:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 607:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 610:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 1.104999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 611:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][JobbTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), 0.814999, 1.269999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
				}
			}
			vInfo[vehicleid][JobbIndex] = 1;
		}else if(vInfo[vehicleid][JobbIndex] && !kozos)
		{
			/*
			DestroyDynamicObject(vInfo[vehicleid][BalIndex1]);
			DestroyDynamicObject(vInfo[vehicleid][BalIndex2]);
			DestroyDynamicObject(vInfo[vehicleid][BalTrailer1]);
			DestroyDynamicObject(vInfo[vehicleid][BalTrailer2]);
			vInfo[vehicleid][BalIndex1] = 0;
			vInfo[vehicleid][BalIndex2] = 0;
			vInfo[vehicleid][BalTrailer1] = 0;
			vInfo[vehicleid][BalTrailer2] = 0;
			vInfo[vehicleid][BalIndex] = 0;
			*/
			DestroyDynamicObject(vInfo[vehicleid][JobbIndex1]);
			DestroyDynamicObject(vInfo[vehicleid][JobbIndex2]);
			DestroyDynamicObject(vInfo[vehicleid][JobbTrailer1]);
			DestroyDynamicObject(vInfo[vehicleid][JobbTrailer2]);
			vInfo[vehicleid][JobbIndex1] = 0;
			vInfo[vehicleid][JobbIndex2] = 0;
			vInfo[vehicleid][JobbTrailer1] = 0;
			vInfo[vehicleid][JobbTrailer2] = 0;
			vInfo[vehicleid][JobbIndex] = 0;
		}
	}
	if(left)
	{
		if(!vInfo[vehicleid][BalIndex])
		{
			if(!right || !kozos)
			{
				DestroyDynamicObject(vInfo[vehicleid][JobbIndex1]);
				DestroyDynamicObject(vInfo[vehicleid][JobbIndex2]);
				DestroyDynamicObject(vInfo[vehicleid][JobbTrailer1]);
				DestroyDynamicObject(vInfo[vehicleid][JobbTrailer2]);
				vInfo[vehicleid][JobbIndex1] = 0;
				vInfo[vehicleid][JobbIndex2] = 0;
				vInfo[vehicleid][JobbTrailer1] = 0;
				vInfo[vehicleid][JobbTrailer2] = 0;
				vInfo[vehicleid][JobbIndex] = 0;
			}
			vInfo[vehicleid][BalIndex1] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
			vInfo[vehicleid][BalIndex2] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
			switch(GetVehicleModel(vInfo[vehicleid][vID]))
			{
				case 417, 425, 430, 432, 441, 446, 447, 449, 452, 453, 454, 460, 464, 465, 469, 472, 473, 476, 481, 484, 487, 488, 493, 497, 501, 509, 510, 511, 512, 513, 519, 520, 537, 538, 539, 548, 553, 563, 564, 569, 570, 571, 577, 590, 592, 593, 594, 595, 608:
				{
					vInfo[vehicleid][BalIndex1] = 0;
					vInfo[vehicleid][BalIndex2] = 0;
					DestroyDynamicObject(vInfo[vehicleid][BalIndex1]);
					DestroyDynamicObject(vInfo[vehicleid][BalIndex2]);
					return vInfo[vehicleid][BalIndex] = 0;
				}
				case 400:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.929999, -2.275004, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.949999, 2.069999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 401:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.969999, -2.305005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.039999, 2.495009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 402:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.934999, -2.590011, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.999999, 2.565011, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 403:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.549999, -4.195048, -0.719999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.989999, 4.455054, -0.809999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 404:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.819999, -2.720014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.694999, 2.280004, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 405:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.874999, -2.720014, -0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.874999, 2.325005, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 406:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -2.230003, -5.130069, 0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.924998, 4.985066, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 407:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.999999, -3.515032, 0.070000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.844999, 4.145047, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 408:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, -4.035044, -0.504999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 4.835062, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 409:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.859999, -3.905041, -0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.909999, 3.440031, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 410:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, -2.165001, 0.104999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.879999, 2.150001, 0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 411:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.854999, -2.470008, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.999999, 2.520009, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 412:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.989999, -3.595034, -0.154999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.009999, 2.725014, -0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 413:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.909999, -2.660013, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.954999, 2.570011, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 414:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.104999, -3.405030, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.709999, 2.875018, -0.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 415:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.749999, -2.430008, 0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.924999, 2.495009, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 416:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.369999, -3.665036, 1.459998, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.049999, 2.935019, 0.030000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 418:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.004999, -2.545010, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.984999, 2.360006, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 419:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.929999, -3.005021, -0.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.014999, 2.375006, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 420:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.009999, -2.705014, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.004999, 2.285004, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 421:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.839999, -2.895018, -0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.909999, 2.530010, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 422:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.914999, -2.470009, -0.259999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.794999, 2.290004, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 423:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.839999, -2.250004, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.774999, 2.325005, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 424:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.749999, -1.619998, 0.240000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.874999, 1.354999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 426:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.645013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.059999, 2.290004, -0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 427:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.934999, -3.925042, 0.339999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.999999, 2.695014, 0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 428:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.924999, -2.965020, 0.175000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.939999, 2.435008, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 429:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.814999, -2.435008, -0.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.799999, 2.275004, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 431:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.039999, -5.810085, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.944999, 5.890087, 0.399999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 433:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.334998, -4.735060, -0.084999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.264999, 3.725037, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 434:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.659999, -1.964998, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.619999, 1.894998, -0.309999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 436:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.889999, -2.485009, 0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.874999, 2.240003, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 437:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.164999, -5.330074, 1.279999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.194999, 5.560079, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 438:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.064999, -2.520009, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.119999, 2.370006, -0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 439:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.759999, -2.650012, -0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.804999, 2.370006, -0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 440:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.909999, -2.625012, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.979999, 2.565011, -0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 442:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.024999, -3.125023, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.019999, 2.810016, -0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 443:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.474998, -6.870109, -0.729999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.074999, 5.820085, -1.029999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 444:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.119999, -3.065022, 0.539999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.139999, 2.730014, 0.689999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 445:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.924999, -2.800016, -0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.939999, 2.335005, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 448:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.180000, -0.999999, -0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.250000, 0.479999, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 451:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.864999, -2.560011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.954999, 1.944998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 455:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.349998, -4.560056, -0.784999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.294999, 3.730037, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 456:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.209999, -4.560056, -0.669999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.944999, 3.360029, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 457:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.509999, -1.294998, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.449999, 1.179999, -0.095000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 458:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.949999, -2.805016, -0.165000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.415007, -0.145000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 459:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.889999, -2.640012, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.580011, -0.085000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 461:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.200000, -1.074999, 0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 462:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.155000, -0.909999, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.210000, 0.749999, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 463:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.180000, -1.044999, 0.129999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.195000, 0.749999, 0.304999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 466:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.009999, -2.770015, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.904999, 2.625012, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 467:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.924999, -3.025021, -0.150000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.904999, 2.820017, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 468:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.145000, -0.864999, 0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.245000, 0.494999, 0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 470:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.019999, -2.685013, -0.234999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.054999, 2.160001, 0.189999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 471:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.399999, -0.779999, 0.204999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.364999, 0.764999, 0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 474:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.959999, -2.825016, -0.219999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.894999, 2.590011, -0.224999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 475:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.859999, -2.825016, -0.249999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.859999, 2.485009, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 477:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.019999, -2.660013, 0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.864999, 2.485009, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 478:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.834999, -2.555010, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.079999, 1.994998, 0.064999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 479:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.939999, -2.755015, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.984999, 2.525010, 0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 480:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.844999, -2.375006, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.619999, 2.295005, -0.439999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 482:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.859999, -2.565011, -0.289999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.894999, 2.405007, -0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 483:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.644999, -2.765015, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.794999, 2.610012, -0.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 485:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.664999, -1.444998, -0.045000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.644999, 1.749998, 0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 486:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.569999, -3.180025, 1.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.819999, 1.449998, 0.769999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 489:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.119999, -2.655013, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.114999, 2.590011, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 490:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.099999, -3.095023, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.084999, 3.190025, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 491:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.834999, -2.910018, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.829999, 2.500009, -0.099999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 492:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.899999, -2.795016, -0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.684999, 2.500009, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 494:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.789999, -2.890018, 0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.854999, 2.365006, -0.194999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 495:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.094999, -2.205002, -0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.109999, 2.365006, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 496:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.934999, -2.125000, 0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.939999, 2.190002, 0.025000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 498:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.954999, -3.110023, 0.334999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.879999, 3.080023, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 499:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.119999, -3.425030, 0.409999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.779999, 2.495009, -0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 500:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.739999, -1.969998, -0.060000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.399999, 2.125001, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 502:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.774999, -2.715014, -0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.859999, 2.605012, -0.214999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 503:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, -2.840017, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.859999, 2.410007, -0.049999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 504:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.069999, -2.780015, -0.155000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.894999, 2.635012, -0.089999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 505:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.074999, -2.625012, 0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.089999, 2.605012, 0.020000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 506:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.049999, 2.090000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.814999, -2.460008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 507:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.049999, 3.250026, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.024999, -2.845017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 508:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.104999, 3.135024, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.584998, -3.995043, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 514:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.349998, 4.325051, 0.140000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.224999, -4.990066, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 515:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.349998, 4.325051, -0.519999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.299998, -4.990066, -1.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 516:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 517:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 518:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.964999, 2.655013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.094999, -2.835017, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 521:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.204999, 0.674999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 522:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 523:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.254999, -0.994999, 0.349999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.229999, 0.714999, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 524:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.139999, -3.970043, -1.024999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.644998, 4.080045, -0.319999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 525:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.224999, -3.060022, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.179999, 2.905019, 0.209999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 526:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.889999, -2.325005, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.004999, 2.440008, -0.105000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 527:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.889999, -2.230003, 0.079999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.964999, 2.465008, -0.019999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 528:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.049999, 2.530010, 0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.134999, -2.640012, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 529:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.044999, 2.610012, 0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.124999, -2.670013, 0.244999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 530:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.474999, -1.874998, 1.314998, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 531:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.419999, 1.579998, -0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 532:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.389998, 3.050022, 1.054999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.684999, -1.974998, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 533:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.004999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.054999, -2.520010, -0.009999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 534:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.109999, 2.910019, -0.164999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.599999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 535:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.934999, -2.700014, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 536:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, 2.515010, -0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.739999, -3.105023, -0.120000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 540:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.829999, -2.745015, -0.115000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.944999, 2.585011, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 541:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.724999, -2.400007, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.684999, 2.390007, -0.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 542:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.859999, 2.650013, -0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.689999, -2.960020, -0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 543:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.799999, 2.235003, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.014999, -2.620012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 544:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.729999, 3.720037, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.834999, -3.355029, -0.544999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 545:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.494999, 1.659998, -0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.829999, -2.064999, -0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 546:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.755015, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.014999, 2.635012, 0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 547:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.919999, -2.665013, 0.065000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.984999, 2.485009, 0.035000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 549:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.874999, -2.565011, 0.040000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.014999, 2.485009, -0.004999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 550:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.994999, -2.700014, -0.139999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.029999, 2.585011, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 551:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.974999, -3.040022, 0.010000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.029999, 2.620012, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 552:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.994999, -3.030021, 0.609999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.104999, 3.090023, 0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 554:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.109999, -2.815016, -0.074999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.144999, 2.505009, 0.080000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 555:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.749999, -2.480009, -0.119999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.739999, 2.305005, -0.269999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 556:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.074999, -2.940019, 0.479999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.009999, 2.530010, 0.499999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 557:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.134999, -2.785016, 0.584999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.184999, 2.490009, 0.724999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 558:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.914999, -2.430008, 0.284999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.919999, 2.170002, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 559:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.864999, -2.300005, 0.169999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.859999, 2.565011, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 560:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.929999, -2.260004, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.929999, 2.520010, -0.264999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 561:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.929999, -2.555011, -0.015000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.869999, 2.605012, -0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 562:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.854999, -2.275004, 0.130000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.939999, 2.365006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 565:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.874999, -1.924998, 0.069999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.844999, 2.049999, 0.044999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 566:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.149999, 2.690014, -0.100000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 567:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.079999, -2.965020, -0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.149999, 2.925019, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 568:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.189999, -1.514998, 0.090000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.444999, 2.160001, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 572:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.434999, -1.039999, 0.039999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 573:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.984999, -3.360029, -0.389999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.989999, 3.175025, -0.354999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 574:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.679999, -1.199999, -0.149999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.704999, 1.679998, -0.144999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 575:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.974999, -2.740015, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.029999, 2.265004, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 576:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.974999, -3.205025, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.074999, 2.445008, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 578:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.239999, 4.360052, -0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.309998, -5.560079, -0.404999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 579:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.219999, 2.395007, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 580:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.144999, -2.815016, 0.005000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.219999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 581:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.189999, -1.014999, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 582:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.034999, -3.425030, 0.135000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.089999, 2.505009, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 583:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.724999, -1.604998, 0.344999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.669999, 1.399998, 0.274999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 585:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.159999, 2.900018, 0.184999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, -2.850017, 0.174999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 586:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.394999, -1.234999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.384999, 0.599999, 0.159999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 587:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.560011, 0.110000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.019999, 2.115000, -0.314999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 588:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.039999, -3.945042, -0.374999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.414998, 3.400030, -0.424999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 589:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -0.984999, -2.330005, 0.364999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.889999, 2.335005, 0.179999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 596:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 597:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 598:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.994999, 2.370006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 599:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 600:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.129999, -2.700014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.049999, 2.695014, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 601:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.169999, -3.065022, 1.229999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.179999, 3.130024, 0.879999, 0.000000, 0.000000, 0.000000); //Object Model: 19294

				}
				case 602:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 603:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 604:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 605:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.014999, -2.615012, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -0.974999, 2.355006, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
				case 609:
				{
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex1], vInfo[vehicleid][vID], -1.119999, -2.880018, 0.254999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					AttachDynamicObjectToVehicle(vInfo[vehicleid][BalIndex2], vInfo[vehicleid][vID], -1.314998, 2.660013, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
				}
			}
			if(IsTrailerAttachedToVehicle(vInfo[vehicleid][vID]))
			{
				vInfo[vehicleid][BalTrailer1] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
				//vInfo[vehicleid][JobbTrailer2] = CreateDynamicObject(19294,10.0, 10.0, 10.0, 0, 0, 0);
				switch(GetVehicleModel(GetVehicleTrailer(vInfo[vehicleid][vID])))
				{
					case 435:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -1.019999, -3.950042, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 450:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -1.049999, -3.975043, -1.094999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 584:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -1.214999, -4.320051, -0.714999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 591:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -1.354998, -3.960043, -0.199999, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 606:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 607:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -0.569999, -1.564998, -0.125000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 610:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -1.104999, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
					case 611:
					{
						AttachDynamicObjectToVehicle(vInfo[vehicleid][BalTrailer1], GetVehicleTrailer(vInfo[vehicleid][vID]), -0.814999, 1.269999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 19294
					}
				}
			}
			vInfo[vehicleid][BalIndex] = 1;
		}else if(vInfo[vehicleid][BalIndex] && !kozos)
		{
			DestroyDynamicObject(vInfo[vehicleid][BalIndex1]);
			DestroyDynamicObject(vInfo[vehicleid][BalIndex2]);
			DestroyDynamicObject(vInfo[vehicleid][BalTrailer1]);
			DestroyDynamicObject(vInfo[vehicleid][BalTrailer2]);
			vInfo[vehicleid][BalIndex1] = 0;
			vInfo[vehicleid][BalIndex2] = 0;
			vInfo[vehicleid][BalTrailer1] = 0;
			vInfo[vehicleid][BalTrailer2] = 0;
			vInfo[vehicleid][BalIndex] = 0;
		}
	}
	Streamer_Update(playerid);
	return true;
}
stock AdatTextDrawFrissites(p)
{
	/*new TD_tmp[1024 + 1],mellek[256];
	TD_tmp[0] = EOS;

	new frak[126];
	if(!PlayerInfo[p][pFrakcio]) 
	{
		format(frak, sizeof(frak), "Frakció: Nincs");
	} else 
	{
		format(frak, sizeof(frak), "Frakció: %s(Rang: %d)", FInfo[PlayerInfo[p][pFrakcio]][fNev], PlayerInfo[p][prang]);
	}
	new fizu[64];
	format(fizu, sizeof(fizu), "Fizetés: még %d perc", PlayerInfo[p][pFizetesIdo]);
	
	new datum[128], date[3], time[3];
	getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	format(datum, sizeof(datum), "Dátum: %d-%02d-%02d %02d:%02d", PosExt(date), time[0], time[1]);
	
	FormatTextDraw(TD_tmp, mellek, "%s_(%d)~n~Szint:_%d_(még_%d_óra)~n~Bankban:_%s$~n~%s~n~%s~n~%s", JatekosNev(p), p, PlayerInfo[p][pjatekosszint], (PlayerInfo[p][pszintlepeskell] - PlayerInfo[p][pszintlepesora]), FormatNumber(PlayerInfo[p][pBszPenz],0,','), frak, fizu, datum);

	if((Bortonben(p) != 0) && (PlayerInfo[p][pJailIdo] > 0))
		FormatTextDraw(TD_tmp, mellek, "~n~%s:_%dmp", BortonNev(PlayerInfo[p][pjail]), PlayerInfo[p][pJailIdo]);

	if(PlayerInfo[p][pHatizsak])
		FormatTextDraw(TD_tmp, mellek, "~n~Hátizsák:_%d$", PlayerInfo[p][pBMennyi]);

	PlayerTextDrawSetString(p, Adatok[p], TD_tmp);
	UpdatePlayerInfo(p);*/

	if(IsPlayerInAnyVehicle(p) && !GetPlayerVehicleSeat(p))
	{
		if(!PlayerInfo[p][pJarmuben]) {
			PlayerInfo[p][pJarmuben] = JarmuID(GetPlayerVehicleID(p), p);
			UpdateVehicleInfo( p, PlayerInfo[p][pJarmuben]);
		} else {
			UpdateVehicleInfo( p, PlayerInfo[p][pJarmuben]);
			vInfo[ PlayerInfo[p][pJarmuben] ][vKilometer] += GetVehicleSpeed( vInfo[ PlayerInfo[p][pJarmuben] ][vID] )*0.278;
		}

		if(!PlayerInfo[p][pJarmuTDMutat]) {
			ShowVehicleTextDraw(p);
			PlayerInfo[p][pJarmuTDMutat] = true;
		}
	}
	return 1;
}
funkcio KetMasodpercesIdozito()
{
	foreach(Player,p)
	{
		if(!Belepve(p))
			continue;
		new frissiteslassitas = random(100);
		if(frissiteslassitas > 20)
		{
			AdatTextDrawFrissites(p);
		}
	}

	return 1;
}
funkcio OtmasodpercesIdozito()
{
	/*for(new i=0;i<MAX_VEHICLES;i++)
	{
		if(vInfo[i][vApben] == 1 && GetVehicleVirtualWorld(i) == 0)
		{
			SetVehicleVirtualWorld(i,AP_VW);
		}
	}*/
	foreach(Player, id)
	{
		if(PlayerInfo[id][pGodmode] == 1)
		{
		    SetPlayerHealth(id,150);
	    	SetPlayerArmour(id,150);
		}
	}
	//12 egy perc, akkor 120 perc 1440
	ServerInfo[0][sFHaszon] += 5;
	if(ServerInfo[0][sFHaszon] >= 1440)//24 - 1440
	{
		ServerInfo[0][sFHaszon] = 0;
		TeruletHaszon();
	}	
	ServerInfo[0][sBankPenz][1] += 5;//3óránként újratöltés
	if(ServerInfo[0][sBankPenz][1] == 10800 && ServerInfo[0][sBankPenz][0] < 45000)
	{
		ServerInfo[0][sBankPenz][1] = 0;
		ServerInfo[0][sBankPenz][0] = Rand(45000, 95000);
	}
	
	if(ServerInfo[0][sPaintBall][2] > 0)//ha nem lesz jelentkezõ kidobja
	{
		ServerInfo[0][sPaintBall][2] -= 5;
		if(!ServerInfo[0][sPaintBall][2])
		{
			foreach(Player, id)
			{
				if(!Belepve(id) || !PlayerInfo[id][pPaintBall][0])
					continue;
				
				SetPos(id, PosExt( CegInfo[ BIZ_PB ][cPosBe] ), CegInfo[ BIZ_PB ][cPosBe][3]);
				SetVirtualWorld(id, CegInfo[ BIZ_PB ][cVw][0]);
				SetInterior(id, CegInfo[ BIZ_PB ][cInt][0]);
				
				PaintBallMuvelet(id, 2);
				Freeze(id, NINCS);
				
				GiveMoney(id,CegInfo[BIZ_PB][cBelepo]);
				SCM(id, COL_MKEK, "Mivel nem jött új játékos a rendszer kirakott a PaintBall elé és visszakaptad a nevezési összeget.");
			}
		}
	}
	if(ServerInfo[0][sPaintBall][4] > 0)//paintball idõ 900
	{
		ServerInfo[0][sPaintBall][4] -= 5;
		if(!ServerInfo[0][sPaintBall][4])
		{
			/*new ppl, pdb, db;// = (ServerInfo[0][sPaintBall][0] * (CegInfo[BIZ_PB][cBelepo] / 4));
			if(IsPlayerConnected(ServerInfo[0][sPaintBall][1]) && PlayerInfo[ ServerInfo[0][sPaintBall][1] ][pPaintBall][0])
				ppl = ServerInfo[0][sPaintBall][1];
			else
			{*/
			
			new ppl, pdb, db;
			foreach(Player, idp)
			{
				if(!Belepve(idp) || !PlayerInfo[idp][pPaintBall][0])
					continue;
				
				db++;
				if(PlayerInfo[idp][pPaintBall][1] > pdb)
				{
					pdb = PlayerInfo[idp][pPaintBall][1];
					ppl = idp;
				}
			}
			//}
			
			new penz = floatround(db * (CegInfo[BIZ_PB][cBelepo] / 2));
			GiveMoney(ppl,penz);
			CegInfo[BIZ_PB][cKassza] -= penz;
			
			foreach(Player, id)
			{
				if(!Belepve(id) || !PlayerInfo[id][pPaintBall][0])
					continue;
				
				SetPos(id, PosExt( CegInfo[ BIZ_PB ][cPosBe] ), CegInfo[ BIZ_PB ][cPosBe][3]);
				SetVirtualWorld(id, CegInfo[ BIZ_PB ][cVw][0]);
				SetInterior(id, CegInfo[ BIZ_PB ][cInt][0]);
				
				PaintBallMuvelet(id, 2);
				Freeze(id, NINCS);
				
				SFM(id, COL_MKEK, "A mecss véget ért! A gyõztes "#COL_MKEK"%s"#COL_FEHER" - jutalma: "#COL_MKEK"%s"#COL_FEHER"$", JatekosNev(ppl, true), FormatNumber(penz, 0, ','));
			}
		}
	}
	if(ServerInfo[0][sPaintBall][3] > 0)//pb indítás
	{
		ServerInfo[0][sPaintBall][3] -= 5;
		if(!ServerInfo[0][sPaintBall][3])
		{
			foreach(Player, id)
			{
				if(!Belepve(id) || !PlayerInfo[id][pPaintBall][0])
					continue;
				
				SCM(id, COL_MKEK, "A meccs elindult, 15 perc áll rendelkezésetekre!");
				Freeze(id, NINCS);
			}
		}
	}
	
	//14percenként hívódik meg, 25óra kell míg egy ültetvény eléri a 100%-ot
	ServerInfo[0][sDrogSz] += 5;
	if(ServerInfo[0][sDrogSz] >= 850)
	{
		//printf("Hívódik! (0)");
		new h = -1;
		for(;++h < MAX_HOUSE;)
		{
			if(HazInfo[h][hasznalatban])
			{
				//printf("Hívódik! (1)");
				new d = -1;
				for(;++d < 50;)
				{
					if((HazInfo[h][hDrogMi][d] > 0) && (HazInfo[h][hDrogAllapot][d] < 100))
					{
						/*
							24h = 86400s
							
							86400 / 5 = 17280 //egy nap alatt ennyiszer hívódik meg
							17280 / 100 = 172,8 > 170
							3,7m -> 1hívás
						*/
						//printf("Hívódik! (2)");
						HazInfo[h][hDrogAllapot][d]++;
						
						new form[64];
			
						switch(HazInfo[h][hDrogMi][d])
						{
							case 1: format(form, sizeof(form), "Marihuana");
							case 2: format(form, sizeof(form), "Kokain");
							case 3: format(form, sizeof(form), "Heroin");
						}
						
						format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%", form, HazInfo[h][hDrogAllapot][d]);
						UpdateDynamic3DTextLabelText(HazInfo[h][hDrogHely][d], 0xFFFFFFFF, form);
					}
					
					if((HazInfo[h][hDrogAllapot][d] > 99) && (HazInfo[h][hDrogMennyi][d] == 0))
					{
						new form[200];
			
						switch(HazInfo[h][hDrogMi][d])
						{
							case 1: format(form, sizeof(form), "Marihuana");
							case 2: format(form, sizeof(form), "Kokain");
							case 3: format(form, sizeof(form), "Heroin");
						}
						
						switch(HazInfo[h][hDrogMi][d])
						{
							case 1: //Marihuana
								HazInfo[h][hDrogMennyi][d] = Rand(2, 5);
							case 2: //Kokain
								HazInfo[h][hDrogMennyi][d] = Rand(2, 5);
							case 3: //Heroin
								HazInfo[h][hDrogMennyi][d] = Rand(2, 5);
						}
						
						format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%\n"#COL_FEHER"Termés: "#COL_MKEK"%dg", form, HazInfo[h][hDrogAllapot][d], HazInfo[h][hDrogMennyi][d]);
						UpdateDynamic3DTextLabelText(HazInfo[h][hDrogHely][d], 0xFFFFFFFF, form);
					}
				}
			}
		}
		ServerInfo[0][sDrogSz] = 0;
	}
	
	
	new kmh, idx;
	foreach(Jarmuvek, id)
	{
		idx = JarmuID( id, INVALID_PLAYER_ID );
		if(vInfo[idx][vHasznalva])
		{
			if(IsABicikli(vInfo[idx][vModel])) continue;
			if(vInfo[idx][vUzemanyag] > 0 && vInfo[idx][vMotorelinditva])
			{
				kmh = GetVehicleSpeed(vInfo[idx][vID]);
				if(kmh >= 150)
					vInfo[idx][vUzemanyag] -= 0.3;
				else if(kmh >= 80)
					vInfo[idx][vUzemanyag] -= 0.2;
				else
					vInfo[idx][vUzemanyag] -= 0.1;
				
				vInfo[idx][vKilometer] += (kmh * 0.278);
				if((vInfo[idx][vUzemanyag] == 15.0) || (vInfo[idx][vUzemanyag] == 10.0) || (vInfo[idx][vUzemanyag] == 5.0))
				{
					new p_id = GetVehicleDriver(vInfo[idx][vID]);
					if(p_id > NINCS)
						GameTextForPlayer(p_id, "~r~FOGYÓBAN AZ ÜZEMANYAG!", 3000, 1);
				}
			} 
			if(vInfo[idx][vUzemanyag] < 1.0 && vInfo[idx][vMotorelinditva])
			{
				vInfo[idx][vMotorelinditva] = false;
				SetJarmu(vInfo[idx][vID], KOCSI_MOTOR, 0);
				if(vInfo[idx][vUzemanyag])
					vInfo[idx][vUzemanyag] = 0.0;
					
				new p_id = GetVehicleDriver(vInfo[idx][vID]);
				if(p_id > NINCS)
					SCM(p_id, COL_MKEK, "Kifogyott a jármûvedbõl az üzemanyag!");
			}
			
			new Float:khp;
			GetVehicleHealth(vInfo[idx][vID], khp);
			if(vInfo[idx][vMotorelinditva] && ((100 - (((khp - 350) / 650)) * 100) >= 100))
			{
				vInfo[idx][vMotorelinditva] = false;
				SetJarmu(vInfo[idx][vID], KOCSI_MOTOR, 0);
				new p_id = GetVehicleDriver(vInfo[idx][vID]);
				if(p_id > NINCS)
					SCM(p_id, COL_MKEK, "A jármûved elromlott! Hívj szerelõt! /call 112");
			}
		}
	}
	
//	new ido;
	foreach(Player, pid)
	{
		if(!Belepve(pid) || IsPlayerNPC(pid))
			continue;
		
		
		UnixTime = gettime();
		new tmp = 0,ido = UnixTime;
		tmp = ido - StatInfo[pid][pRIdo];
		StatInfo[pid][pRIdo] = ido;
		StatInfo[pid][pIdo] += tmp;
		if(PlayerInfo[pid][padmin] && PlayerInfo[pid][pAduty] == true)
			StatInfo[pid][pOnduty] += tmp;

		if(StatInfo[pid][pIdo] >= STAT_MENTES_IDO)
			StatMentes(pid);
		
		//JatekosNev(playerid, bool:normal = false, bool:real = false)
		if(PlayerInfo[pid][pAlnevbe] == false)
		{
			if(strcmp(PlayerInfo[pid][pNev], JatekosNev(pid, false, true)) && (strlen(PlayerInfo[pid][pNev]) > 0))
				SetPlayerName(pid, PlayerInfo[pid][pNev]);
		}
		else
		{
			SetPlayerName(pid,PlayerInfo[pid][pAlnev]);
		}
		if(!PlayerInfo[pid][pBilincselve] && !Bortonben(pid) && !PlayerInfo[pid][pAduty] && !PlayerInfo[pid][pASduty])
		{
			//Szukseglet(pid, 0.1, 0.03);
			
			PlayerInfo[pid][pSzuksegletFigy]--;
			if(PlayerInfo[pid][pSzuksegletFigy] < 1)
			{
				//PlayerInfo[pid][pSzuksegletFigy] = 2;
				if(PlayerInfo[pid][pEhseg] >= 100.0 && PlayerInfo[pid][pVizelet] < 100.0)
					SCM(pid, COL_LRED, "Korog a gyomrod, gyorsan egyél valamit mert romlik az egészséged.."), SetHealth(pid, (PlayerInfo[pid][pElet] - 5.0), true, true);
				else if(PlayerInfo[pid][pEhseg] < 100.0 && PlayerInfo[pid][pVizelet] >= 100.0)
					SCM(pid, COL_LRED, "Itt az idõ, hív a természet. Keress gyorsan egy toalettet és könnyíts magadon.."), SetHealth(pid, (PlayerInfo[pid][pElet] - 5.0), true, true);
				else if(PlayerInfo[pid][pEhseg] >= 100.0 && PlayerInfo[pid][pVizelet] >= 100.0)
					SCM(pid, COL_LRED, "Hív a természet és éhes is vagy, egyél valamit és könnyíts magadon.."), SetHealth(pid, (PlayerInfo[pid][pElet] - 5.0), true, true);
			}
		}
		
		if(PlayerInfo[pid][pFeliratIdo] > 0)
		{
			PlayerInfo[pid][pFeliratIdo] -= 5;
			if(!PlayerInfo[pid][pFeliratIdo])
			{
				FeliratMutat( pid, false );
				SCM(pid, COL_MKEK, "Feliratok kikapcsolva!");
			}
		}
		
		if(!PlayerInfo[pid][pSzunetel])
		{
			PlayerInfo[pid][pszintlepesmperc] += 5;
			if(!(PlayerInfo[pid][pszintlepesmperc] % 60) && (PlayerInfo[pid][pszintlepesmperc] != 0))
			{
				PlayerInfo[pid][pszintlepesperc]++;
				PlayerInfo[pid][pFizetesIdo]--;
				
				if(PlayerInfo[pid][pFizetesIdo] < 1)
				{
					PlayerInfo[pid][pFizetesIdo] = FIZETES_IDO;
					SendClientMessage(pid, COLOR_WHITE, "=========== [ "#COL_MKEK"Fizetési csekk"#COL_FEHER" ] ===========");
					if(PlayerInfo[pid][pBsz] == 0)
						SendClientMessage(pid, COLOR_LIGHTRED, "Mivel nincs bankszámlád, ezért a fizetésed nem került kiutalásra!");
					else
					{
						SendFormatMessage(pid, COLOR_WHITE, "Fizetés: "#COL_MKEK"%s"#COL_FEHER"$ | Bankszámla egyenleg: "#COL_MKEK"%s"#COL_FEHER"$", FormatNumber(PlayerInfo[pid][pFizetes], 0, ','), FormatNumber(PlayerInfo[pid][pBszPenz], 0, ','));
						new penz, id = PlayerInfo[pid][pFrakcio];
						if(id)
						{
							if(FInfo[ id ][fPenz] > FInfo[ id ][fFizetes][ PlayerInfo[pid][prang] - 1])//ha van elég pénz a széfben
							{
								penz += FInfo[ id ][fFizetes][ PlayerInfo[pid][prang] - 1];
								FInfo[ id ][fPenz] -= FInfo[ id ][fFizetes][ PlayerInfo[pid][prang] - 1];
								SendFormatMessage(pid, COLOR_WHITE, "Frakció fizetés: "#COL_MKEK"%s"#COL_FEHER"$", FormatNumber(FInfo[ id ][fFizetes][ PlayerInfo[pid][prang] - 1], 0, ','));
							} else
								SendClientMessage(pid, COLOR_WHITE, "Frakció fizetés: "#COL_MKEK"Nincs"#COL_FEHER" (Nincs elég pénz a széfben!)");
						}
						
						SendFormatMessage(pid, COLOR_WHITE, "Jármû Adó: "#COL_MKEK"%d"#COL_FEHER"$", AdoResz(pid));
						SendFormatMessage(pid, COLOR_WHITE, "Ház Adó: "#COL_MKEK"%d"#COL_FEHER"$", HazAdoResz(pid));
						SendFormatMessage(pid, COLOR_WHITE, "Villanyszámla: "#COL_MKEK"%d"#COL_FEHER"$", Villanysz(pid));
						
						PlayerInfo[pid][pBszPenz] -= AdoResz(pid);
						PlayerInfo[pid][pBszPenz] -= HazAdoResz(pid);
						PlayerInfo[pid][pBszPenz] -= Villanysz(pid);
						
						penz += PlayerInfo[pid][pFizetes];
						PlayerInfo[pid][pBszPenz] += penz;
						PlayerInfo[pid][pFizetes] = 0;
						FizetesHang(pid, 1);
					}
				}
				PlayerInfo[pid][pszintlepesmperc] = 0;
			}
		
			if(!(PlayerInfo[pid][pszintlepesperc] % 60) && (PlayerInfo[pid][pszintlepesperc] != 0))
			{
				PlayerInfo[pid][pszintlepesora]++;
				PlayerInfo[pid][pJatszottOra]++;
				PlayerInfo[pid][pszintlepesperc] = 0;
				if(PlayerInfo[pid][pSzemelyi])
				{
					PlayerInfo[pid][pSzemelyi]--;
					if(!PlayerInfo[pid][pSzemelyi])
						SCM(pid, COL_MKEK, "Figyelem! A Személyi Igazolványod lejárt!");
				}
				
				new i = NINCS;
				for(;++i < MAX_ENGEDELY;)
				{
					if(PlayerInfo[pid][pEngedely][i])
					{
						PlayerInfo[pid][pEngedely][i]--;
						if(PlayerInfo[pid][pEngedely][i] < 5 && (i != 0))
							SFM(pid, COL_MKEK, "Figyelem! A "#COL_MKEK"%s"#COL_FEHER" engedélyed már csak "#COL_MKEK"%d"#COL_FEHER" napig((óráig)) érvényes.", VizsgaLista[i][0], PlayerInfo[pid][pEngedely][i]);
					}
				}
			}
			
			if(PlayerInfo[pid][pszintlepesora] == PlayerInfo[pid][pszintlepeskell])
			{
				PlayerInfo[pid][pjatekosszint]++;
				PlayerInfo[pid][pszintlepeskell] = PlayerInfo[pid][pjatekosszint] * 4;
				PlayerInfo[pid][pszintlepesora] = 0;
				
				SFM(pid, COL_MKEK, "Gratulálunk, sikeresen szintet léptél! Új szinted: "#COL_MKEK"%d", PlayerInfo[pid][pjatekosszint]);
			}
		}
		
/*		if(Bortonben(pid) == 3)
		{
			ido = (gettime() - PlayerInfo[pid][pAJ_Randtime]);
			ido = (ido / 60);
			if(ido > 3) {
				PlayerInfo[pid][pAJ_Randtime] = gettime();
				format(PlayerInfo[pid][pAJ_RandStr], RANDOM_STRING_AJ, "%s", RandomString(RANDOM_STRING_AJ));
				SFM(pid, COL_MKEK, "Chatboxba írd be a következõ karaktereket és nyomj ENTER-t! | "#COL_MKEK"%s", PlayerInfo[pid][pAJ_RandStr]);
			}
		}*/
		
		if(PlayerInfo[pid][pAS] > gettime())
		{
			if((PlayerInfo[pid][pAS] - gettime()) < 5)
			{
				//0 = melyik channel, 1 = idõ, 2 = admin nézi, 3 = eddig repoltolhat
				PlayerInfo[pid][pReport][1] = NINCS;
				SCM(pid, COL_MKEK, "Az Adminsegéd jogod hamarosan lejár. Köszönjük, hogy segítettél, további kellemes játékot kívánunk.");
				if(PlayerInfo[pid][pTV][0] != NINCS)
				{
					if(!IsScripter(pid) && PlayerInfo[PlayerInfo[pid][pTV][0]][padmin] > PlayerInfo[pid][padmin])
						AdminUzenet(COLOR_LIGHTRED, 0, "%s befejezte %s megfigyelését mert lejárt az Adminsegéd joga!", JatekosNev(pid), JatekosNev(PlayerInfo[pid][pTV][0]));
					TogglePlayerSpectating(pid, 0);
					PlayerInfo[pid][pTV][0] = NINCS;
					
					if(PlayerInfo[pid][pinterior] != 0 || PlayerInfo[pid][pvirtualworld] != 0)
						Freeze(pid, 3000);
					else
						Freeze(pid, 1000);
					
					SetPlayerPos(pid, PlayerInfo[pid][posx], PlayerInfo[pid][posy], PlayerInfo[pid][posz]);
					SetPlayerInterior(pid, PlayerInfo[pid][pinterior]);
					SetPlayerVirtualWorld(pid, PlayerInfo[pid][pvirtualworld]);
					ShowInfoTextDraw(pid);
				}
			}
		}		
		if(GetPlayerAnimationIndex(pid) == 1231)
		{
			if(!GetPlayerSkin(pid)) 
				SetSkin(pid, 1);
				
			PlayerInfo[pid][pCheatFigy] ++;
			if(PlayerInfo[pid][pCheatFigy] == 5)
			{
				if(Iter_Count(Adminok) > 0)
				{
					nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: CJ Futás", pid, JatekosNev(pid));
					AdminUzenetEx(COLOR_WHITE, 1001, string);
					Log(FILE_CHEAT, string);
					PlayerInfo[pid][pCheatFigy] = 0;
					
				} else {
					
					nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: CJ Futás (Kick)", pid, JatekosNev(pid));
					Log(FILE_CHEAT, string);
					
					//ServerBan(pid, 0, "[AC] CJ Futás", NINCS, (!Belepve(pid) ? true : false), true, true);
					Kick(pid);
					continue;
				}
			}
		} // CJ Futás Check vége
	}
	
	new real_time[2], date[3];
	gettime( ServerInfo[0][sRL_Time][3], real_time[0], real_time[1]);
	FixHour( ServerInfo[0][sRL_Time][3] );
	if(ServerInfo[0][sRL_Time][3] == 0)
	{
		new flood = 0;
		new VWjuk = Rand(1,9999);
		for(new i=0;i<9;i++)
		{
			if(GetPlayerVirtualWorld(VasarlosNPCK[i]) == 0)
			{
				SetPlayerVirtualWorld(VasarlosNPCK[i],VWjuk);
				DestroyDynamic3DTextLabel(NPCTextLabel[i]);
				NPCTextLabel[i] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,VasarlosNPCK[i],INVALID_PLAYER_ID,0,VWjuk,0,-1,100);
				if(flood == 0)
				{
					AdminUzenet(COLOR_LIGHTRED, FOADMIN_SZINT, "Fegyveres NPC-k eltüntetve", 0);
					flood = 1;
				}
			}
		}
	}
	if((ServerInfo[0][sRL_Time][3] > ServerInfo[0][sRL_Time][0]) || (ServerInfo[0][sRL_Time][3] == 0 && ServerInfo[0][sRL_Time][3] == 23))
	{
		AlapVas();
		getdate(PosExt(date));
		DatumNap = ServerInfo[0][sRL_Time][3], format(JelenlegiDatum, 12, "%d-%d-%d", DatumEv, DatumHonap, DatumNap);
		SendFormatMessageToAll(COLOR_MKEK, ""#PREFIX": Jelenleg %d óra van - dátum: %d-%02d-%02d %02d:%02d ", ServerInfo[0][sRL_Time][3], PosExt(date));
		ServerInfo[0][sRL_Time][0] = ServerInfo[0][sRL_Time][3];
		SetWorldTime( (ServerInfo[0][sRL_Time][3] + IDO_ELTOLODAS) );
		if(ServerInfo[0][sRL_Time][3] > 20)
		{
			for(new i=0;i<9;i++)
			{
				if(GetPlayerVirtualWorld(VasarlosNPCK[i]) != 0)
				{
					SetPlayerVirtualWorld(VasarlosNPCK[i],0);
					DestroyDynamic3DTextLabel(NPCTextLabel[i]);
					NPCTextLabel[i] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,VasarlosNPCK[i],INVALID_PLAYER_ID,0,0,0,-1,100);
					new flood = 0;
					if(flood == 0)
					{
						AdminUzenet(COLOR_LIGHTRED, FOADMIN_SZINT, "Fegyveres NPC-k lespawnolva", 0);
						flood = 1;
					}
				}
			}
		}
		else
		{
			new VWjuk = Rand(1,9999);
			for(new i=0;i<9;i++)
			{
				if(GetPlayerVirtualWorld(VasarlosNPCK[i]) == 0)
				{
					SetPlayerVirtualWorld(VasarlosNPCK[i],VWjuk);
					DestroyDynamic3DTextLabel(NPCTextLabel[i]);
					NPCTextLabel[i] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,VasarlosNPCK[i],INVALID_PLAYER_ID,0,VWjuk,0,-1,100);
					new flood = 0;
					if(flood == 0)
					{
						AdminUzenet(COLOR_LIGHTRED, FOADMIN_SZINT, "Fegyveres NPC-k eltüntetve", 0);
						flood = 1;
					}
				}
			}
		}
	}
	
	if(ServerInfo[0][sHarcVan] != NINCS)
	{
	    new terulet = ServerInfo[0][sHarcVan];
	    
		if(tInfo[terulet][tVarakozasIdo] > 0)
		{
			tInfo[terulet][tVarakozasIdo] -= 5;
			if(tInfo[terulet][tVarakozasIdo] <= 600 && tInfo[terulet][tVarakozasIdo] >= 60 && (tInfo[terulet][tVarakozasIdo] % 60) == 0)
			{
			    foreach(Player, p)
				{
				    if(!Belepve(p)) continue;
					if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tFrakcio])
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: %s megtámadta a(z) %s területeteket!", FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev], tInfo[terulet][tNev]);
						
						if((tInfo[terulet][tVarakozasIdo] >= 60) && (tInfo[terulet][tVarakozasIdo] % 60 == 0))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: %d perc van hátra a harcig!", (tInfo[terulet][tVarakozasIdo] / 60));
						else if((0 < tInfo[terulet][tVarakozasIdo] < 60) && (tInfo[terulet][tVarakozasIdo] % 15 == 0))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: %d másodperc van hátra a harcig!", tInfo[terulet][tVarakozasIdo]);
						
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: Ha nem megy oda legalább egy tagotok akkor %s megszerzi a területet!", FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev]);
						//SendClientMessage(p, COLOR_LIGHTRED, (tInfo[terulet][tTipus] ? ("Fegyveres háború lesz!") : ("Fegyvernélküli háború lesz!")));
					}
					else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
					{
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: Megtámadtátok a(z) %s területet - A terület jelenleg a(z) %s birtokolja!", tInfo[terulet][tNev], FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev]);
						
						if((tInfo[terulet][tVarakozasIdo] >= 60) && (tInfo[terulet][tVarakozasIdo] % 60 == 0))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: %d perc van hátra a harcig!", (tInfo[terulet][tVarakozasIdo] / 60));
						else if((0 < tInfo[terulet][tVarakozasIdo] < 60) && (tInfo[terulet][tVarakozasIdo] % 15 == 0))
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: %d másodperc van hátra a harcig!", tInfo[terulet][tVarakozasIdo]);
						
						SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: Ha nem mentek harcolni a(z) %s terület %s birtokában marad!", tInfo[terulet][tNev], FInfo[ tInfo[terulet][tHarcolok][VEDOK] ][fNev]);
						//SendClientMessage(p, COLOR_LIGHTRED, (tInfo[terulet][tTipus] ? ("Fegyveres háború lesz!") : ("Fegyvernélküli háború lesz!")));
					}
				}
			}
			else if(tInfo[terulet][tVarakozasIdo] < 60 && tInfo[terulet][tVarakozasIdo] > 0 && (tInfo[terulet][tVarakozasIdo] == 15))
			{
				new vedo, tamado;
				foreach(Player, p)
				{
				    if(!Belepve(p))
						continue;
					
					if((PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][VEDOK]) && IsPlayerInDynamicArea(p, tInfo[terulet][tArea]))
						vedo++;
					else if((PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK]) && IsPlayerInDynamicArea(p, tInfo[terulet][tArea]))
						tamado++;
				}
				if(vedo < 1)
				{
				    foreach(Player, pl)
					{
						if(PlayerInfo[pl][pFrakcio] == tInfo[terulet][tFrakcio])
							SendFormatMessage(pl, COLOR_LIGHTRED, "Figyelem: Mivel senki sem ment ki, a(z) %s területre ezért a(z) %s megszerezte!", tInfo[terulet][tNev], FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev]);
						else if(PlayerInfo[pl][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
							SendFormatMessage(pl, COLOR_LIGHTRED, "Figyelem: Mivel senki sem védte a(z) %s területet, ezért megszerezték!", tInfo[terulet][tNev]);
					}
					
					tInfo[terulet][tFrakcio] = tInfo[terulet][tHarcolok][TAMADOK];
					ServerInfo[0][sHarcVan] = -1;
					tInfo[terulet][tFoglalasIdo] = gettime();
					TeruletFrissites();
				}
				else if(tamado < 1)
				{
				    foreach(Player, p)
					{
						if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tFrakcio])
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: Mivel senki sem jött megtámadni a(z) %s területet, így a tiétek maradt!", tInfo[terulet][tNev]);
						else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
							SendFormatMessage(p, COLOR_LIGHTRED, "Figyelem: Mivel nem volt támadó, így nem tudták elfoglalni a(z) %s területet!", tInfo[terulet][tNev]);
					}
					
					ServerInfo[0][sHarcVan] = -1;
					tInfo[terulet][tFoglalasIdo] = gettime();

				} else {
				
				    foreach(Player, pl)
					{
						if(((PlayerInfo[pl][pFrakcio] == tInfo[terulet][tFrakcio]) || (PlayerInfo[pl][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])) && IsPlayerInDynamicArea(pl, tInfo[terulet][tArea]))
						{
							SendClientMessage(pl, COLOR_LIGHTRED, "Figyelem! Amelyik csapat elveszti utolsó emberét, az fog veszteni!");
							SendClientMessage(pl, COLOR_LIGHTRED, "Figyelem! A harc 15 másodperces fagyasztás után indul!");
							Freeze(pl, 15000);

							//Fegyver elrakás
							new wep;
							GetPlayerWeaponData(pl, aWeaponSlotok[ PlayerInfo[pl][pFegyver] ], wep, PlayerInfo[pl][pToltenyek][aWeaponSlotok[PlayerInfo[pl][pFegyver]]]);
							PlayerInfo[pl][pFegyver] = 0;
							
							ResetPlayerWeapons(pl);
							SetPlayerAttachedWeapon(pl);
							
							PlayerInfo[pl][pHarcol] = true;

							new kocsi = GetClosestVehicle(pl);
							if(GetDistanceToVehicle(pl, kocsi) < 7.5)
							{
								if((GetVehicleModel(kocsi) == 487) && (GetVehicleVirtualWorld(kocsi) == 0))
								{
									SetVehicleVirtualWorld(kocsi, WAR_VW);
								}
							}
							
							SetVirtualWorld(pl, WAR_VW);
							SetPlayerWorldBounds(pl, tInfo[terulet][tMaxPos][0] - 5.0, tInfo[terulet][tMinPos][0] + 5.0, tInfo[terulet][tMaxPos][1] - 5.0, tInfo[terulet][tMinPos][1] + 5.0);
						}
					}
					
					tInfo[terulet][tHarcFolyik] = true;
					TeruletFrissites();
				}
			}
		}
	}//war vége
}

stock Time(const mikell[])
{
	new
		masodperc, perc, ora,
		nap, honap, ev;
		
	new ido;
	
	gettime(ora, perc, masodperc);
	getdate(ev, honap, nap);
	
	if(!strcmp("mp", mikell))
		ido = masodperc;
	if(!strcmp("perc", mikell))
		ido = perc;
	if(!strcmp("ora", mikell))
		ido = ora;
	if(!strcmp("nap", mikell))
		ido = nap;
	if(!strcmp("honap", mikell))
		ido = honap;
	if(!strcmp("ev", mikell))
		ido = ev;
	return ido;
}

stock Freeze(playerid, ido = 0)
{
	TogglePlayerControllable(playerid, (ido == NINCS ? true : false));

	if(ido > 0)
		SetTimerEx("UnFreeze", ido, false, "i", playerid);

	return true;
}

funkcio UnFreeze(playerid)
{
	TogglePlayerControllable(playerid, true);
	return true;
}

/*stock AnimbaRak(playerid, bool:uzenetk = true, bool:lottseb = false)
{

	if((lottseb && PlayerInfo[playerid][panimban] == 2) || PlayerInfo[playerid][pAduty] || (!lottseb && PlayerInfo[playerid][panimban] == 1))
		return true;
	
	if(ServerInfo[0][sHarcVan] != NINCS && PlayerInfo[playerid][pHarcol])
		return HarcKieses(playerid, "Súlyosan megsérült");
	
	if(PlayerInfo[playerid][pDrogMuvelet][0] == 3 || PlayerInfo[playerid][pHarcol])
		return true;
	
	PlayerInfo[playerid][panimban] = (lottseb ? 2 : 1);
	
	if(PlayerInfo[playerid][pFegyver])
	{
		new wep;
		GetPlayerWeaponData(playerid, aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ], wep, PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);
		
		PlayerInfo[playerid][pFegyver] = 0;
		
		ResetPlayerWeapons(playerid);
		SetPlayerAttachedWeapon(playerid);
	}
	
	if(uzenetk)
		SCM(playerid, COL_LRED, "Súlyosan megsérültél!");
		
	SetPlayerDrunkLevel(playerid, 50000);
	LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0, 1);
	//(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync)
	return true;
}*/

funkcio Sokk(playerid)
{
	PlayerInfo[playerid][pSokk] = 0;
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	SCM(playerid, COL_LRED, "Elmúlt a sokk hatása");
	return true;
}

funkcio Korhazbakerules(playerid)
{
	if(PlayerInfo[playerid][pMeghalt] == 0) return 0;
	PlayerInfo[playerid][pMeghalt] = 0;
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	SCM(playerid, COL_LRED, "Kórházba kerültél!");
	SCM(playerid, COL_LRED, "A kórházi költség 600 $ volt!");
	GiveMoney(playerid,-600);
	PlayerInfo[playerid][pJailIdo] = 900;
	PlayerInfo[playerid][pjail] = 1;
	Borton(playerid, 1);
	DestroyDynamic3DTextLabel(PlayerInfo[playerid][pHalalText]);
	PlayerInfo[playerid][pHalalText] = INVALID_3D_TEXT_ID;
	BortonInfo(playerid, "Rendszer", "Halál");
	PlayerInfo[playerid][pFegyver] = 0;
	DeleteWeapon(playerid);
	if(PlayerInfo[playerid][ppenz]>0)
	{
		SetMoney(playerid,0);
	}
	
	if(Korozes[playerid][krSzint])
	{
		new penz = (Korozes[playerid][krSzint] * 100);
		PlayerInfo[playerid][pBszPenz] -= penz;
		FInfo[ FRAKCIO_LSPD ][fPenz] += penz;
		Korozes[playerid][krSzint] = 0;
		SFM(playerid, COL_LRED, "Mivel kórházba kerülésed elõtt körözés volt rajtad, azért %s$ levonásra került a bankszámládról!", FormatNumber(penz, 0, ','));
	}
	SetCameraBehindPlayer(playerid);
	return true;
}

funkcio Hasznalhatja(playerid)
{
	if(PlayerInfo[playerid][pMeghalt] == 0) return 0;
	SCM(playerid, COL_VZOLD, "Most már használhatod a /elfogadhalál -t!");
	PlayerInfo[playerid][pHalalfogadas] = 1;
	SetTimerEx("Korhazbakerules", (15*60*1000), 0, "d", playerid);
	return true;
}

funkcio Box(playerid)
{
	SCM(playerid, COL_VZOLD, "Megtanultál Boxolni!");
	PlayerInfo[playerid][pBox] = 1;
	TogglePlayerControllable(playerid, true);
	PlayerInfo[playerid][pHarcstilusTanul] = false;
	return true;
}

funkcio Grabkick(playerid)
{
	SCM(playerid, COL_VZOLD, "Megtanultál Grabkickelni!");
	PlayerInfo[playerid][pGrabkick] = 1;
	TogglePlayerControllable(playerid, true);
	PlayerInfo[playerid][pHarcstilusTanul] = false;
	return true;
}

funkcio Elbow(playerid)
{
	SCM(playerid, COL_VZOLD, "Megtanultál Elbowolni!");
	PlayerInfo[playerid][pElbow] = 1;
	TogglePlayerControllable(playerid, true);
	PlayerInfo[playerid][pHarcstilusTanul] = false;
	return true;
}

funkcio Kungfu(playerid)
{
	SCM(playerid, COL_VZOLD, "Megtanultál Kungfuzni!");
	PlayerInfo[playerid][pKungfu] = 1;
	TogglePlayerControllable(playerid, true);
	PlayerInfo[playerid][pHarcstilusTanul] = false;
	return true;
}

funkcio Kneehead(playerid)
{
	SCM(playerid, COL_VZOLD, "Megtanultál Kneeheadelni!");
	PlayerInfo[playerid][pKneehead] = 1;
	TogglePlayerControllable(playerid, true);
	PlayerInfo[playerid][pHarcstilusTanul] = false;
	return true;
}

funkcio FelmasodpercesIdozito()
{
	UpdateCameras();
}

funkcio MasodpercesIdozito()
{
	SpeedHack();
	new weapons[2],
		sk, Float:pos[3], Float:cpos[3], bool:van[2], str[128],
		targetplayer;
	
	if(BankIdo > 0)
	{
		BankIdo--;
		if(BankIdo == 0)
		{
			ClearAnimations(BankBotok[bankNPCID]);
			BankBotok[bankAnim] = false;
			BankInfo[bBankInditva] = false;
			BankLezerBetoltes(true, true);
			BankInfo[bBankElocsarnok] = Rand(10000, 99999);
		}
	}
	if(ServerInfo[0][sBankrob] > 0)
	{
		ServerInfo[0][sBankrob]--;
		if(ServerInfo[0][sBankrob] == 0)
		{
			ServerInfo[0][sBankrob] = 0;
			ClearAnimations(BankBotok[bankNPCID]);
			BankBotok[bankAnim] = false;
			BankInfo[bBankInditva] = false;
			BankLezerBetoltes(true, true);
			BankInfo[bBankElocsarnok] = Rand(10000, 99999);
		}
	}

	foreach(Player, p)
	{
		if(!Belepve(p))
			continue;

		if(PlayerInfo[p][pMeghalt] == 0)
		{
			if(IsValidDynamic3DTextLabel( PlayerInfo[p][pHalalText] )) 
			{
				DestroyDynamic3DTextLabel(PlayerInfo[p][pHalalText]);
				PlayerInfo[p][pHalalText] = INVALID_3D_TEXT_ID;
			}
		}
		for(new i=1;i<MAXHIFI;i++)
		{
			if(IsPlayerInRangeOfPoint(p, 6.0, HifiInfo[i][hX], HifiInfo[i][hY], HifiInfo[i][hZ]))
			{
				if(HifiInfo[i][hX] != 0 && HifiInfo[i][hY] != 0 && HifiInfo[i][hZ] != 0)
				{
					if(!egyezik(HifiInfo[i][hURL],HifiZene[p]) && !egyezik(HifiInfo[i][hURL],"-"))
					{
						StopAudioStreamForPlayer(p);
						PlayAudioStreamForPlayer(p, HifiInfo[i][hURL],HifiInfo[i][hX], HifiInfo[i][hY], HifiInfo[i][hZ],20.0,1);
						strmid(HifiZene[p],HifiInfo[i][hURL],0,strlen(HifiInfo[i][hURL]),256);
					}
				}
			}
		}
		if(PlayerInfo[p][pTrafipax] == true)
		{
			if(!IsPlayerInAnyVehicle(p) || GetVehicleSpeed(GetPlayerVehicleID(p)) > 10)
			{
				SendClientMessage(p, -1, "A trafipax {ff0000}lekapcsolt!");
				PlayerInfo[p][pTrafipax] = false;
				return false;
			}
			new jatekos = GetClosestPlayerTrafi(p);
			if(IsPlayerInAnyVehicle(jatekos))
			{
				new rendszam[32], seb[32];
				new car = GetPlayerVehicleID(jatekos);
				new vid = JarmuID(car, jatekos);
				new sebesseg = GetVehicleSpeed(car);
				if(sebesseg < 1) return true;
				format(rendszam, sizeof(rendszam), "A közeli jármû rendszáma: {00ff59}See-%d", vid);
				format(seb, sizeof(seb), "Sebessége: {ff0000}%d{ffffff} km/h", sebesseg);
				SendClientMessage(p, -1, "____TRAFIPAX EREDMÉNY____");
				SendClientMessage(p, -1, rendszam);
				SendClientMessage(p, -1, seb);
				return true;
			}
			return true;
		}
		if(IsPlayerInRangeOfPoint(p,65,1171.6571,-1662.3842,22.2744))
		{
			if(!egyezik(SweetRadio,HifiZene[p]) && !egyezik(SweetRadio,"-"))
			{
				StopAudioStreamForPlayer(p);
				PlayAudioStreamForPlayer(p, SweetRadio,1171.6571,-1662.3842,22.2744,65.0,1);
				strmid(HifiZene[p],SweetRadio,0,strlen(SweetRadio),256);
			}
		}

		if(Bejelzett[p] > 0)
		{
			Bejelzett[p]--;
		}
		if(NPCFloodVedelem[p] > 0)
		{
			NPCFloodVedelem[p]--;
			if(NPCFloodVedelem[p] == 0)
			{
				SCM(p,COL_VZOLD,"Újra beszélhetsz az NPCvel!");
			}
		}
		for(new icje=0;icje<9;icje++)
		{
			if(PlayerInfo[p][pNPCSzobaAll][icje] > 0)
			{
				PlayerInfo[p][pNPCSzobaAll][icje]--;
			}
		}
		if(PenztRabol[p] == 1)
		{
			new randomo = Rand(150, 160);
			if(PlayerInfo[p][pBMennyi] >= 10000)
			{
				TogglePlayerControllable(p, true);
				SCM(p, COL_MKEK, "Befejezted a pénz pakolását!");
				PenztRabol[p] = 0;
				SetPlayerAttachedObject(p, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
				DestroyDynamicObject(PlayerInfo[p][pHatizsakO]);
				return true;
			}
			
			if(ServerInfo[0][sBankPenz][0] - randomo <= 0)
			{
				TogglePlayerControllable(p, true);
				SCM(p, COL_MKEK, "Befejezted a pakolást, mert nincs több pénz a széfben.");
				PenztRabol[p] = 0;
				SetPlayerAttachedObject(p, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
				DestroyDynamicObject(PlayerInfo[p][pHatizsakO]);
				return true;
			}
			PlayerInfo[p][pBMennyi] += randomo;
			ServerInfo[0][sBankPenz][0] -= randomo;
			
			SFM(p, COL_VZOLD, "Táskába sikeresen bepakoltál %s$-ot!", FormatNumber(randomo, 0, ','));
		}
		Firka_OnPlayerUpdate(p);
		/*---------------- TextDrawok és egyéb infók update-je ---------------*/			
		/*switch(GetPlayerAnimationIndex(p))
		{
			case 1196, 1224, 1141, 1247, 1278: Szukseglet(p, 0.2);
		}*/
		if(GPSFloodolas[p] > 0)
		{
			GPSFloodolas[p]--;
		}
		if(PlayerInfo[p][pFrakcioTiltas] > 0)
		{
			PlayerInfo[p][pFrakcioTiltas]--;
			if(PlayerInfo[p][pFrakcioTiltas] == 0)
			{
				SCM(p,COL_MKEK,"Lejárt a Frakció tiltásod!");
				SCM(p,COL_MKEK,"Most már tudsz Frakcióba csatlakozni!!");
			}
		}
		if(PlayerInfo[p][pReportTiltas] > 0)
		{
			PlayerInfo[p][pReportTiltas]--;
			if(PlayerInfo[p][pReportTiltas] == 0)
			{
				SCM(p,COL_MKEK,"Lejárt a Report tiltásod!");
				SCM(p,COL_MKEK,"Most már tudsz reportot írni!!");
			}
		}
		if(PlayerInfo[p][pFegyverTiltas] > 0)
		{
			PlayerInfo[p][pFegyverTiltas]--;
			if(PlayerInfo[p][pFegyverTiltas] == 0)
			{
				SCM(p,COL_MKEK,"Lejárt a Fegyver tiltásod!");
				SCM(p,COL_MKEK,"Most már tudsz Fegyvert elõvenni!!");
			}
		}	
		if(PlayerInfo[p][pAutoTiltas] > 0)
		{
			PlayerInfo[p][pAutoTiltas]--;
			if(PlayerInfo[p][pAutoTiltas] == 0)
			{
				SCM(p,COL_MKEK,"Lejárt a Autó tiltásod!");
				SCM(p,COL_MKEK,"Most már eltudod indítani a jármûveket!!");
			}
		}	
		if(PlayerInfo[p][pASTiltas] > 0)
		{
			PlayerInfo[p][pASTiltas]--;
			if(PlayerInfo[p][pASTiltas] == 0)
			{
				SCM(p,COL_MKEK,"Lejárt a AS tiltásod!");
				SCM(p,COL_MKEK,"Most már tudod használni az AS parancsokat!");
			}
		}
		if(PlayerInfo[p][pAduty] == false && !Admin(p,FOADMIN_SZINT))
		{
			if(CsomagtartoAFK[p] > MAXAFK || PlayerInfo[p][pAfkIdo] > MAXAFK)
			{
				if(AFKDialogShowing[p] == 0)
				{
					AFKDialogShowing[p] = 1;
					ShowPlayerDialog(p, DIALOG_NINCS, DIALOG_STYLE_MSGBOX, "{FF0000}Anti AFK", "Haló, ittvagy?\n{FF0000}Ha 20mp-ne belül nem reagálsz, kickellek!", "Igen", "Nem");
					AFKTimer[p] = SetTimerEx("AFKKick",20000,false,"d",p);
				}
			}
		}
		if(PlayerInfo[p][pTaxiorastart] >= 1)
		{
			PlayerInfo[p][pTaxiorastart]++;
		}
		new fid = PlayerInfo[p][pFegyver];
		if(fid == 22 || fid == 23 || fid == 24 || fid == 25 || fid == 26 || fid == 27 || fid == 28 || fid == 29 || fid == 30 || fid == 31 || fid == 32 || fid == 33 || fid == 34)
		{
			targetplayer = GetPlayerTargetPlayer(p);
			if((targetplayer != INVALID_PLAYER_ID) && (GetPlayerDistanceFromPlayer(p, targetplayer) < 8.0) && IsPlayerNPC(targetplayer))
			{
				if(targetplayer == BankBotok[bankNPCID])
				{
					if(ServerInfo[0][sBankrob] > 0)
					{
						new uzenet1[128];
						format(uzenet1,128,"A bankot nemrégiben rabolták, ezért még nem rabolhatod!\nLátogass vissza %d perc múlva!",ServerInfo[0][sBankrob]/60);
						ShowPlayerDialog(p,NINCS,DIALOG_STYLE_MSGBOX,"Jelenleg nem rabolható!",uzenet,"OK","");
						return 1;
					}
					if(BankInfo[bBankInditva] == true)
					{
						Info_Dialog(p, "Jelenleg nem rabolható!", "Jelenleg is Rabolják!!");
						return 1;
					}
				}
				if(!BankBotok[bankAnim] && (targetplayer != INVALID_PLAYER_ID) && (targetplayer == BankBotok[bankNPCID]))
				{
					if(ServerInfo[0][sBankrob] > 0)
					{
						new uzenet1[128];
						format(uzenet1,128,"A bankot nemrégiben rabolták, ezért még nem rabolhatod!\nLátogass vissza %d perc múlva!",ServerInfo[0][sBankrob]/60);
						ShowPlayerDialog(p,NINCS,DIALOG_STYLE_MSGBOX,"Jelenleg nem rabolható!",uzenet,"OK","");
						return 1;
					}

					if(OnlineTagok(FRAKCIO_LSPD) >= BOLT_RABOLHATO)
					{
							BankBotok[bankAnim] = true;
							LoopingAnim(targetplayer, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0);
							ShowPlayerDialog(p, DIALOG_BANKROB, DIALOG_STYLE_MSGBOX, "Bankrablás", "Biztos vagy benne, hogy kiakarod rabolni a bankot?", "Igen", "Nem");
					} else
						Info_Dialog(p, "Jelenleg nem rabolható!", "Sajnálom de jelenleg nincs elegendõ Online rendõr\nahhoz, hogy kirabolhasd. Látogass vissza késõbb!");
				}
				
				new bo = -1;
				for(;++bo < sizeof(BoltBot);)
				{
					if((targetplayer != INVALID_PLAYER_ID) && (targetplayer == BoltRablas[bo][npcID]) && BoltRablas[bo][npcRabolhato])
					{
						if(OnlineTagok(FRAKCIO_LSPD) >= BOLT_RABOLHATO)
						{
							if(BoltRablas[bo][npcRabolva] > gettime())
							{
								new form[128];
								format(form, sizeof(form), #COL_FEHER"Sajnálom de ez a bolt nem rég volt kirabolva\nezért még várnod kell"#COL_MKEK"%d percet"#COL_FEHER",\nhogy kirabolhasd!", ((BoltRablas[bo][npcRabolva] - gettime()) / 60));
								Info_Dialog(p, "Nem rég kivolt rabolva", form);
							}
							else if(!BoltRablas[bo][npcAnim] && (BoltRablas[bo][npcKicsoda] == -1))
							{
								LoopingAnim(targetplayer, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0);
								BoltRablas[bo][npcAnim] = true;
								
								BoltRablas[bo][npcKicsoda] = p;
								BoltRablas[bo][npcRabolas] = true;
								ShowPlayerDialog(p, DIALOG_BOLTROB, DIALOG_STYLE_MSGBOX, "Biztos kiakarod rabolni?", "Biztos vagy abban, hogy kiakarod rabolni ezt a boltot?", "Igen", "Nem");
							}
						} else
							Info_Dialog(p, "Jelenleg nem rabolható!", "Sajnálom de jelenleg nincs elegendõ Online rendõr\nahhoz, hogy kirabolhasd. Látogass vissza késõbb!");
					}
				}
			}
		}
		
		/* --------------- AFK Updater ------------------*/
		PlayerInfo[p][pAfkIdo]++;
		if(PlayerInfo[p][pAfkIdo] > 60 && !PlayerInfo[p][pSzunetel]) CallLocalFunction("OnPlayerPause", "dd", p, 1);
		if(PlayerInfo[p][pSzunetel])
			UpdateDynamic3DTextLabelText(PlayerInfo[p][pAFK_text], COLOR_ROZSA, (format(uzenet, sizeof(uzenet), "[AFK: %s]", TimeFormat( PlayerInfo[p][pAfkIdo], true )), uzenet));
		
		/*---------------- AntiCheat (Fegyver, Pénz, stb) ---------------*/
		
		/*if(GetPlayerMoney(p) > 0)
		{
			ResetPlayerMoney(p);
			nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: Pénz (%s)", p, JatekosNev(p), (Admin(p, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
			AdminUzenetEx(COLOR_WHITE, 1001, string);
			Log(FILE_CHEAT, string);
			
			if(!Admin(p, FOADMIN_SZINT))
				ServerBan(p, 0, "[AC] Pénz Cheat", NINCS, (!Belepve(p) ? true : false), true, true);
			
			continue;
		}*/
		//Valami kis minimális legalább!!
		if(GetPlayerMoney(p) != PlayerInfo[p][ppenz])
		{
			ResetPlayerMoney(p);
			GivePlayerMoney(p,PlayerInfo[p][ppenz]);
		}
		if(CsipogoIdo[p] > 0)
		{
			CsipogoIdo[p] --;
			if(CsipogoIdo[p] <= 0)
			{
				CsipogoIdo[p] = 0;
				SCM(p,COL_LRED,"Lejárt a csipogó jele!");
				foreach(Player, c)
				{
					SetPlayerMarkerForPlayer(c, p, COLOR_INVISIBLE);
				}				
			}
		}
		if(NumPlayerWeapons(p) > 1)
		{
			nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: Fegyver[1] - Több fegyver (%s)", p, JatekosNev(p), (Admin(p, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
			AdminUzenetEx(COLOR_WHITE, 1001, string);
			Log(FILE_CHEAT, string);
			
			ResetPlayerWeapons(p);
			
			if(!Admin(p, FOADMIN_SZINT))
				ServerBan(p, 0, "[AC] Fegyver Cheat[1]", NINCS, (!Belepve(p) ? true : false), true, true);
			
			continue;
		}
		
		GetPlayerWeaponData(p, 0, weapons[0], weapons[1]);
		if(!weapons[0] && weapons[1] > 0)
		{
			nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: Fegyver[2] - [%d]%s (%s)", p, JatekosNev(p),  weapons[0], aWeaponNames[weapons[0]], (Admin(p, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
			AdminUzenetEx(COLOR_WHITE, 1001, string);
			Log(FILE_CHEAT, string);
			
			ResetPlayerWeapons(p);
			if(!Admin(p, FOADMIN_SZINT))
				ServerBan(p, 0, "[AC] Fegyver Cheat[2]", NINCS, (!Belepve(p) ? true : false), true, true);
				
			continue;
		}
		
		if(!PlayerInfo[p][pSzunetel])
		{
			if(PlayerInfo[p][pCarEntering] > 0)
				PlayerInfo[p][pCarEntering]--;

			if(PlayerInfo[p][pCarFloodTime] > 0)
			{
				PlayerInfo[p][pCarFloodTime]--;
				if(PlayerInfo[p][pCarFloodTime] == 0)
					PlayerInfo[p][pCarFlood] = 0;
			}
			
			if(PlayerInfo[p][pFakeKill][1] > 0)
			{
				PlayerInfo[p][pFakeKill][0]--;
				if(!PlayerInfo[p][pFakeKill][0])
					PlayerInfo[p][pFakeKill][1] = 0;
			}

			if(PlayerInfo[p][pCarTeleportTime] > 0)
			{
				PlayerInfo[p][pCarTeleportTime]--;
				if(PlayerInfo[p][pCarTeleportTime] == 0)
					PlayerInfo[p][pCarTeleportFlood] = 0;
			}
			
			if(PlayerInfo[p][pVehiclePosUpdated])
				PlayerInfo[p][pVehiclePosUpdated] = false;
				
			//if(PlayerInfo[p][pJailIdo] > 0)
			if((Bortonben(p) != 0) && (PlayerInfo[p][pJailIdo] > 0))
			{
				PlayerInfo[p][pJailIdo]--;
				if(PlayerInfo[p][pJailIdo] == 1)
					Borton(p, 0);
				else
					Borton(p, 100);//szökés check
			}
				
			if(PlayerInfo[p][pSpawnVedelem] > 0)
				PlayerInfo[p][pSpawnVedelem]--;
				
			if(PlayerInfo[p][pBilincsIdo] > 0)
			{
				PlayerInfo[p][pBilincsIdo] --;
				if(PlayerInfo[p][pBilincsIdo] <= 0)
					Bilincs(p, 0);
			}
		}
		
		if(PlayerInfo[p][pDrogMuvelet][3] < gettime() && PlayerInfo[p][pDrogMuvelet][3] != 0)
		{
			PlayerInfo[p][pDrogMuvelet][0] = 0;
			PlayerInfo[p][pDrogMuvelet][2] = 0;
			PlayerInfo[p][pDrogMuvelet][3] = 0;
		}
		
		if(PlayerInfo[p][pVizsga][2])
		{
			PlayerInfo[p][pVizsga][2]--;
			if(!PlayerInfo[p][pVizsga][2])
			{
				PlayerInfo[p][pVizsga][1] = 0; //melyik vizsga
				PlayerInfo[p][pVizsga][0] = 0; // viszga cp hol tart
				PlayerInfo[p][pVizsga][2] = 0;//max vizsga idõ
				PlayerInfo[p][pCP] = 0;
				DisablePlayerCheckpoint(p);
				SCM(p, COL_LRED, "Sajnálom kedves vizsgázó, de az idõd letelt, ezért a megkezdett vizsgád sikertelen!");
				
				if(PlayerInfo[p][pJarmuben] && vInfo[ PlayerInfo[p][pJarmuben] ][vMunka] == 101)//oktatós jármû
				{
					SetVehicleToRespawn( vInfo[ PlayerInfo[p][pJarmuben] ][vID] );
				}
			}
		}
		
		if(PlayerInfo[p][pVisz] != NINCS && !IsPlayerNPC(PlayerInfo[p][pVisz]))
		{
			new Float:X, Float:Y, Float:Z;
			GetPlayerPos(p, X, Y, Z);
			
			SetPos(PlayerInfo[p][pVisz], (X+0.5), Y, Z);
			SetInterior(PlayerInfo[p][pVisz], GetPlayerInterior(p));
			SetVirtualWorld(PlayerInfo[p][pVisz], GetPlayerVirtualWorld(p));
		}
		
		/*---------------- Tûz rendszer - check ---------------*/
		if(ServerInfo[0][sTuzVan] && ServerInfo[0][sTuzIdo][0] > 0)
		{
			sk = GetPlayerSkin(p);
			for(new t = 0; t < TUZ_MAX; t++)
			{
				if(!Tuz[t][tuzAktiv]) continue;
				if((GetDistanceToPointEx(p, PosExt(Tuz[t][tPoz])) < TUZ_SERULES_TAV) && sk != 277 && sk != 278 && sk != 279 && sk != 219)
				{
					SetHealth(p, (PlayerInfo[p][pElet] - TUZ_SERULES));
					SCM(p, COL_LRED, "Vigyázz!! Még a végén megégsz! Menj a tûz közelébõl!");
				}

				if(PlayerInfo[p][pTuzetOlt] && PlayerInfo[p][pFrakcio] == FRAKCIO_LSFD)
				{
					van[1] = false;
					if(IsPlayerInAnyVehicle(p) && !GetPlayerVehicleSeat(p))
					{
						GetPlayerCameraPos(p, PosExt(cpos));
						GetVehiclePos(vInfo[ PlayerInfo[p][pJarmuben] ][vID], PosExt(pos));
						if(
							(GetDistance(PosExt(cpos), PosExt(Tuz[t][tPoz])) < 30.0) && 
							(vInfo[ PlayerInfo[p][pJarmuben] ][vModel] == 407) &&
							(GetDistance(PosExt(pos), PosExt(Tuz[t][tPoz])) < 35.0)
						)
							van[1] = true;
					}
					
					GetXYZInFrontOfPlayer(p, PosExt(pos), 1.0);
					if((GetDistance(PosExt(pos), PosExt(Tuz[t][tPoz])) < TUZ_OLTO_TAV) || van[1] )
					{
						if(!van[1]) Tuz[t][tHP]--;
						else Tuz[t][tHP]-= 3;
						
						if(Tuz[t][tHP] > 0)
						{
							format(str, 128, "[ %d / %d ]", Tuz[t][tHP], Tuz[t][tMaxHP]);
							UpdateDynamic3DTextLabelText(Tuz[t][tFelirat], COLOR_MKEK, str);
							Streamer_Update(p);
						
						} else {
						
							DestroyDynamic3DTextLabel(Tuz[t][tFelirat]);
							DestroyDynamicMapIcon(Tuz[t][tMap]);

							for(new o = 0; o < TUZ_OBJECT; o++)
								DestroyDynamicObject(Tuz[t][tObject][o]);

							Tuz[t][tuzAktiv] = false;
							for(new b = 0; b < TUZ_MAX; b++)
							{
								if(Tuz[b][tuzAktiv])
								{
									van[0] = true;
									break;
								}
							}
							
							if(!van[0])
							{
								format(str, sizeof(str), "===================== [ "#COL_FEHER"Felhívás"#COL_LRED" ] =====================");
								FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_LSFD, str);
								format(str, sizeof(str), "Sikeresen eloltottátok a tüzet! A jutalom nem marad el, az államtól %s$-rt kaptatok.", FormatNumber(ServerInfo[0][sTuzPenz], 0, ','));
								FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LSFD, str);
								
								FInfo[ FRAKCIO_LSFD ][ fPenz ] += ServerInfo[0][sTuzPenz];
								ServerInfo[0][sTuzIdo][1] = Rand(TUZ_IDO_MIN, TUZ_IDO_MAX); //mikor indul a kövi tûz
								ServerInfo[0][sTuzVan] = false;
								ServerInfo[0][sTuzIdo][0] = 0;
							} else {
								
								format(str, sizeof(str), "===================== [ "#COL_FEHER"TÛZRIADÓ"#COL_LRED" ] =====================");
								FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_LSFD, str);
								format(str, sizeof(str), "Sikeresen eloltottatok egy tüzet, de még nem végeztetek, siessetek a következõhöz és a jutalom nem marad el!");
								FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LSFD, str);
							}
						}
					}
				}
			}
		}
		/*---------------- Tûz rendszer - check vége ---------------*/
	}
	
	/*----------------- Race System ---------------------------*/
	new id;
	for(;++id < MAX_RACE;)
	{
		if(Race[id][rStatusz] == RACE_MEGY)
		{
			if(Race[id][rIdoHatra] > 0)
			{
				Race[id][rIdoHatra]--;
				if(!Race[id][rIdoHatra])
				{
					Race[id][rStatusz] = RACE_VEGE;
					Race[id][rBentvan] = 0;
					foreach(Player, x)
					{
						if(PlayerRace[x][rVersenyen] == id)
						{
							SetPlayerColor(x, COLOR_INVISIBLE);
							DisablePlayerRaceCheckpoint(x);
							PlayerRace[x][rVersenyen] = 0;
							
							SCM(x, COL_LRED, "Mivel nem tudtad megadott idõn belül teljesíteni a távot kiestél a versenybõl!");
						}
					}
				}
			}
		}
	
		if(Race[id][rStatusz] == RACE_INDUL)
		{
			Race[id][rIdo]--;
			new ido = Race[id][rIdo];
			
			foreach(Player, p)
			{
				if(!Belepve(p))
					continue;
				
				if((ido >= 1800 && (ido % 1800) == 0) || (ido >= 600 && ido < 1800 && (ido % 600) == 0))
				{
					SendClientMessage(p, COLOR_WHITE, "============= [ "#COL_VZOLD"Racing Team"#COL_FEHER" ] =============");
					SendFormatMessage(p, COLOR_WHITE, "A(z) "#COL_MKEK"%s"#COL_FEHER" %s múlva indul!", Race[id][rNev], TimeFormat(ido));
				}
				else if(ido >= 120 && ido < 600 && (ido % 60) == 0)
				{
					SendClientMessage(p, COLOR_WHITE, "============= [ "#COL_VZOLD"Racing Team"#COL_FEHER" ] =============");
					SendFormatMessage(p, COLOR_WHITE, "A(z) "#COL_MKEK"%s"#COL_FEHER" %s múlva indul!", Race[id][rNev], TimeFormat(ido));
				}
				else if(ido == 60)
				{
					SendClientMessage(p, COLOR_WHITE, "============= [ "#COL_VZOLD"Racing Team"#COL_FEHER" ] =============");
					SendFormatMessage(p, COLOR_WHITE, "A(z) "#COL_MKEK"%s"#COL_FEHER" egy percen belül indul!", Race[id][rNev]);
				}
				else if(ido == 30)
				{
					SendClientMessage(p, COLOR_WHITE, "============= [ "#COL_VZOLD"Racing Team"#COL_FEHER" ] =============");
					SendFormatMessage(p, COLOR_WHITE, "A(z) "#COL_MKEK"%s"#COL_FEHER" 30 másodpercen belül indul!", Race[id][rNev]);
				}
				else if(ido <= 10 && ido > 0)
				{
					if(PlayerRace[p][rVersenyen] == id)
					{
						//if(ido > 10) format(str, sizeof(str), "~g~%d", ido);
						if(ido <= 10 && ido >= 8) format(str, sizeof(str), "~g~~h~%d", ido);
						else if(ido <= 7&& ido >= 6) format(str, sizeof(str), "~y~%d", ido);
						else if(ido <= 5 && ido >= 4) format(str, sizeof(str), "~r~~h~~h~%d", ido);
						else if(ido <= 3 && ido >= 2) format(str, sizeof(str), "~r~~h~%d", ido);
						else if(ido < 2) format(str, sizeof(str), "~r~%d", ido);
						GameTextForPlayer(p, str, 925, 5);
					}
				}
				else if(ido <= 0)
				{
					Race[id][rIdoHatra] = 1800;//eddig mehet a verseny max
					Race[id][rStatusz] = RACE_MEGY;
					
					if(PlayerRace[p][rVersenyen] == NINCS)
					{
						DisablePlayerRaceCheckpoint(p);
						continue;
					}
					
					if(PlayerRace[p][rVersenyen] == id)
					{
						PlayerPlaySound(p, 1057, 0.0, 0.0, 0.0);
						GameTextForPlayer(p, "~r~~h~==] GO ]==", 3000, 5);
						PlayerRace[p][rVersenyCP] = RACE_START_CP;

						PlayerRace[p][rPIdo] = 0;
						SetRaceCP(p);
					}
				}
			}
		}
		else if(Race[id][rStatusz] == RACE_MEGY)
		{
			foreach(Player, p)
			{
				if(!Belepve(p) || PlayerRace[p][rVersenyen] != id)
					continue;
				
				PlayerRace[p][rPIdo]++;
			}
		}
	}
	/*----------------- Race System vége ---------------------------*/
	
	if(ServerInfo[0][sCarResi][0] > 0)
	{
		ServerInfo[0][sCarResi][0]--;
		if(ServerInfo[0][sCarResi][0] == 30)
			SendClientMessageToAll(COLOR_WHITE, ""#COL_MKEK"Felhívás:"#COL_FEHER" Az elhagyott jármûvek "#COL_MKEK"30"#COL_FEHER" másodpercen belül elvontatásra kerülnek!");
			
		if(!ServerInfo[0][sCarResi][0])
		{
			JarmuRespawn(ServerInfo[0][sCarResi][1]);
			ServerInfo[0][sCarResi][0] = 3600;//1h múlva automata respawn
			ServerInfo[0][sCarResi][1] = 0; //esetleges automata respawn javítás nélkül
			SendClientMessageToAll(COLOR_WHITE, ""#COL_MKEK"Felhívás:"#COL_FEHER" Elhagyott és használaton kívüli jármûvek elvontatva!");
		}
	}
	
	if(ServerInfo[0][sTuzIdo][0] > 0)
	{
		ServerInfo[0][sTuzIdo][0]--;
		if(ServerInfo[0][sTuzVan] && !ServerInfo[0][sTuzIdo][0]) //ha lejár az idõ
		{
			TuzMuvelet( 4, NINCS );
			new penz = ((ServerInfo[0][sTuzPenz] / 2)/235);
			FInfo[ FRAKCIO_LSFD ][fPenz] -= penz;
			format(str, sizeof(str), "===================== [ "#COL_FEHER"Felhívás"#COL_LRED" ] =====================");
			FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_LSFD, str);
			format(str, sizeof(str), "A tüzet nem sikerült eloltani, ezért az állam %sFt büntetést szabott ki!", FormatNumber(penz, 0, ','));
			FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LSFD, str);
		}
	}
	if(ServerInfo[0][sTuzIdo][1] > 0)
	{
		ServerInfo[0][sTuzIdo][1]--;
		if(!ServerInfo[0][sTuzIdo][1])
			TuzGeneral();
	}
	
	ServerInfo[0][sUCP_Check]++;
	if(ServerInfo[0][sUCP_Check] >= 600)//10percenként check
	{
		UCP_Check(1 );
	}
	ServerInfo[0][sIdojarasIdo]++;
	if(ServerInfo[0][sIdojarasIdo] >= 3600)
	{
		Idojaras(NINCS, NINCS);
		ServerInfo[0][sIdojarasIdo] = 0;
	}
	
	SzerverNev();
	return true;
}

funkcio GTimer(process, extra)
{
	switch(process)
	{
		case GT_HIRDETES:
		{
			ServerInfo[0][sHirdetes] = false;
		}
	}
	return true;
}

funkcio UCP_Check( muvelet )
{
	ServerInfo[0][sUCP_Check] = 0;
	new str[128];
	switch( muvelet )
	{
		case 1://check
		{
			format(str, sizeof(str), "SELECT * FROM `accountok` WHERE Letrehozas = '1'");
			mysql_tquery(sql_ID, str, "UCP_Check", "i", 2);
		}
		case 2:
		{
			new nums, fields;
			cache_get_data(nums, fields);
			
			if(nums)
				AdminUzenet(COLOR_TKEK, 1001, "[UserCP]: Jelenleg "#COL_MKEK"%d"#COL_TKEK" karakter vár megerõsítésre!", nums);
		}
	}
	
	return true;
}

funkcio Timer(playerid, process, extra, egyeb)
{
	if(!IsPlayerConnected(playerid) || !Belepve(playerid))
		return true;
	
	if(!PlayerInfo[playerid][pTimerFut] && (IsPlayerConnected(extra) && !PlayerInfo[extra][pTimerFut]))
		return true;
	
	new str[128];
	PlayerInfo[playerid][pTimerFut] = false;
	PlayerInfo[playerid][pFoglalt] = false;
	
	switch( process )
	{
		case T_TUKERES:
		{
			if(KozeliObject( playerid, 3 ) == NINCS)
				return SCM(playerid, COL_LRED, "Elmentél a kuka közelébõl ezért nem találtál semmit!");
			
			switch(random(100))
			{
				case 0 .. 30:
					return SCM(playerid, COL_LRED, "Sajnos nem találtál tût a kukában, nézd át jobban..");
				case 31 .. 100:
				{
					SCM(playerid, COL_VZOLD, "Találtál egy tût a kukában..");
					Cselekves(playerid, "talált valamit az egyik kukában");
					PlayerInfo[playerid][pBoltCucc][ BL_TU ]++;
					return true;
				}
			}
		}
		case T_PENZPAKOLAS:
		{
			new randomo = Rand(150, 160);
			if(PlayerInfo[playerid][pBMennyi] >= 10000)
			{
				TogglePlayerControllable(playerid, true);
				SCM(playerid, COL_MKEK, "Befejezted a pénz pakolását!");
				
				KillTimer(PlayerInfo[playerid][pPenzTimer]);
				PlayerInfo[playerid][pPenzTimer] = 0;
				SetPlayerAttachedObject(playerid, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
				DestroyDynamicObject(PlayerInfo[playerid][pHatizsakO]);
				return true;
			}
			
			if(ServerInfo[0][sBankPenz][0] - randomo <= 0)
			{
				TogglePlayerControllable(playerid, true);
				SCM(playerid, COL_MKEK, "Befejezted a pakolást, mert nincs több pénz a széfben.");
				KillTimer(PlayerInfo[playerid][pPenzTimer]);
				PlayerInfo[playerid][pPenzTimer] = 0;
				SetPlayerAttachedObject(playerid, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
				DestroyDynamicObject(PlayerInfo[playerid][pHatizsakO]);
				return true;
			}
			PlayerInfo[playerid][pBMennyi] += randomo;
			ServerInfo[0][sBankPenz][0] -= randomo;
			
			SFM(playerid, COL_VZOLD, "Táskába sikeresen bepakoltál %s$-ot!", FormatNumber(randomo, 0, ','));
			return true;
		}
		case T_HACKPANEL:
		{
			//pBHackJegyek
			/*
			new i = -1;
			for(;++i < 5;)
				PlayerTextDrawShow(playerid, SzamJegy[playerid][i]);
			
			i = -1;
			for(;++i < 3;)
				PlayerTextDrawShow(playerid, Hatter[playerid][i]);
			
			i = -1;
			for(;++i < 5;)
				PlayerTextDrawShow(playerid, Elerte[playerid][i]);
			*/
			
			new val[2];
			new i = PlayerInfo[playerid][pBHackMelyik];
			
			//printf("IA1: %d", i);
			if(PlayerInfo[playerid][pBHackJegyek][i] != BankInfo[bBankSzefterem][i])
			{
				PlayerInfo[playerid][pBHackJegyek][i]++;
				
				valstr(val, PlayerInfo[playerid][pBHackJegyek][i]);
				PlayerTextDrawSetString(playerid, SzamJegy[playerid][i], val);
				
				if(PlayerInfo[playerid][pBHackJegyek][i] == BankInfo[bBankSzefterem][i])
				{
					PlayerTextDrawBoxColor(playerid, Elerte[playerid][i], 16711935);
					PlayerTextDrawHide(playerid, Elerte[playerid][i]);
					PlayerTextDrawShow(playerid, Elerte[playerid][i]);
					PlayerPlaySound(playerid, 21002, 0.0, 0.0, 0.0);
					PlayerInfo[playerid][pBHackMelyik]++;
					//printf("IA2: %d", PlayerInfo[playerid][pBHackMelyik]);
/*					if(PlayerInfo[playerid][pBHackMelyik] == 5)
					{
						new randomsz = Rand(0,100);
						if(randomsz < 15)
						{
						    PlayerInfo[playerid][pBHackMelyik] = 0;
							SCM(playerid,COL_LRED,"A Tûzfal megakadályozta a belépést és új jelszót állított be! Sajnos ez van! Próbálkozz!!");
							new x = -1;
							for(;++x < 5;)
								PlayerTextDrawHide(playerid, SzamJegy[playerid][x]);
							
							x = -1;
							for(;++x < 3;)
								PlayerTextDrawHide(playerid, Hatter[playerid][x]);
							
							x = -1;
							for(;++x < 5;)
								PlayerTextDrawHide(playerid, Elerte[playerid][x]);
							
							KillTimer(PlayerInfo[playerid][pBHackTimer]);
							
							PlayerTextDrawSetString(playerid, SzamJegy[playerid][0], "0");
							PlayerTextDrawSetString(playerid, SzamJegy[playerid][1], "0");
							PlayerTextDrawSetString(playerid, SzamJegy[playerid][2], "0");
							PlayerTextDrawSetString(playerid, SzamJegy[playerid][3], "0");
							PlayerTextDrawSetString(playerid, SzamJegy[playerid][4], "0");
							PlayerTextDrawSetString(playerid, Elerte[playerid][0], "~n~");
							PlayerTextDrawSetString(playerid, Elerte[playerid][1], "~n~");
							PlayerTextDrawSetString(playerid, Elerte[playerid][2], "~n~");
							PlayerTextDrawSetString(playerid, Elerte[playerid][3], "~n~");
							PlayerTextDrawSetString(playerid, Elerte[playerid][4], "~n~");
							PlayerTextDrawBoxColor(playerid, Elerte[playerid][0], -16776961);
							PlayerTextDrawBoxColor(playerid, Elerte[playerid][1], -16776961);
							PlayerTextDrawBoxColor(playerid, Elerte[playerid][2], -16776961);
							PlayerTextDrawBoxColor(playerid, Elerte[playerid][3], -16776961);
							PlayerTextDrawBoxColor(playerid, Elerte[playerid][4], -16776961);
							PlayerInfo[playerid][pBHackJegyek][0] = 0;
							PlayerInfo[playerid][pBHackJegyek][1] = 0;
							PlayerInfo[playerid][pBHackJegyek][2] = 0;
							PlayerInfo[playerid][pBHackJegyek][3] = 0;
							PlayerInfo[playerid][pBHackJegyek][4] = 0;
							BankInfo[bBankSzefterem][0] = Rand(1, 9);
							BankInfo[bBankSzefterem][1] = Rand(1, 9);
							BankInfo[bBankSzefterem][2] = Rand(1, 9);
							BankInfo[bBankSzefterem][3] = Rand(1, 9);
							BankInfo[bBankSzefterem][4] = Rand(1, 9);
							x = -1;
							for(;++x < 5;)
							PlayerTextDrawShow(playerid, SzamJegy[playerid][x]);

							x = -1;
							
							for(;++x < 3;)
								PlayerTextDrawShow(playerid, Hatter[playerid][x]);
							
							x = -1;
							for(;++x < 5;)
								PlayerTextDrawShow(playerid, Elerte[playerid][x]);
							
							TogglePlayerControllable(playerid, false);
							LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
							PlayerInfo[playerid][pBHackTimer] = SetTimerEx("Timer", 2000, true, "iiii", playerid, T_HACKPANEL, NINCS, NINCS);
						}
						return 1;
					}*/
					if(PlayerInfo[playerid][pBHackMelyik] == 5)
					{
						SCM(playerid, COL_MKEK, "Széftermi biztonsági lézer kikapcsolva!");
						dforeach(BankSZLezer, lezer)
							DestroyDynamicObject(lezer);
						
						BankInfo[bBankSZLezerK] = true;
						TogglePlayerControllable(playerid, true);
						
						new x = -1;
						for(;++x < 5;)
							PlayerTextDrawHide(playerid, SzamJegy[playerid][x]);
						
						x = -1;
						for(;++x < 3;)
							PlayerTextDrawHide(playerid, Hatter[playerid][x]);
						
						x = -1;
						for(;++x < 5;)
							PlayerTextDrawHide(playerid, Elerte[playerid][x]);
						
						KillTimer(PlayerInfo[playerid][pBHackTimer]);
						return true;
					}
					return true;
				}
				return true;
			} else PlayerInfo[playerid][pBHackMelyik]++;
			if(PlayerInfo[playerid][pBHackJegyek][0] != BankInfo[bBankSzefterem][0])
			{
				PlayerInfo[playerid][pBHackJegyek][0]++;
				
				valstr(val, PlayerInfo[playerid][pBHackJegyek][0]);
				PlayerTextDrawSetString(playerid, SzamJegy[playerid][0], val);
				
				if(PlayerInfo[playerid][pBHackJegyek][0] != BankInfo[bBankSzefterem][0])
				{
					PlayerTextDrawBoxColor(playerid, Elerte[playerid][0], 16711935);
					PlayerTextDrawHide(playerid, Elerte[playerid][0]);
					PlayerTextDrawShow(playerid, Elerte[playerid][0]);
					return true;
				}
				return true;
			}
			if(PlayerInfo[playerid][pBHackJegyek][1] != BankInfo[bBankSzefterem][1])
			{
				PlayerInfo[playerid][pBHackJegyek][1]++;
				
				valstr(val, PlayerInfo[playerid][pBHackJegyek][1]);
				PlayerTextDrawSetString(playerid, SzamJegy[playerid][1], val);
				
				if(PlayerInfo[playerid][pBHackJegyek][1] != BankInfo[bBankSzefterem][1])
				{
					PlayerTextDrawBoxColor(playerid, Elerte[playerid][1], 16711935);
					PlayerTextDrawHide(playerid, Elerte[playerid][1]);
					PlayerTextDrawShow(playerid, Elerte[playerid][1]);
					return true;
				}
				return true;
			}
			if(PlayerInfo[playerid][pBHackJegyek][2] != BankInfo[bBankSzefterem][2])
			{
				PlayerInfo[playerid][pBHackJegyek][2]++;
				
				valstr(val, PlayerInfo[playerid][pBHackJegyek][2]);
				PlayerTextDrawSetString(playerid, SzamJegy[playerid][2], val);
				
				if(PlayerInfo[playerid][pBHackJegyek][2] != BankInfo[bBankSzefterem][2])
				{
					PlayerTextDrawBoxColor(playerid, Elerte[playerid][2], 16711935);
					PlayerTextDrawHide(playerid, Elerte[playerid][2]);
					PlayerTextDrawShow(playerid, Elerte[playerid][2]);
					return true;
				}
				return true;
			}
			if(PlayerInfo[playerid][pBHackJegyek][3] != BankInfo[bBankSzefterem][3])
			{
				PlayerInfo[playerid][pBHackJegyek][3]++;
				
				valstr(val, PlayerInfo[playerid][pBHackJegyek][3]);
				PlayerTextDrawSetString(playerid, SzamJegy[playerid][3], val);
				
				if(PlayerInfo[playerid][pBHackJegyek][3] != BankInfo[bBankSzefterem][3])
				{
					PlayerTextDrawBoxColor(playerid, Elerte[playerid][3], 16711935);
					PlayerTextDrawHide(playerid, Elerte[playerid][3]);
					PlayerTextDrawShow(playerid, Elerte[playerid][3]);
					return true;
				}
				return true;
			}
			if(PlayerInfo[playerid][pBHackJegyek][4] != BankInfo[bBankSzefterem][4])
			{
				PlayerInfo[playerid][pBHackJegyek][4]++;
				
				valstr(val, PlayerInfo[playerid][pBHackJegyek][4]);
				PlayerTextDrawSetString(playerid, SzamJegy[playerid][4], val);
				
				if(PlayerInfo[playerid][pBHackJegyek][4] != BankInfo[bBankSzefterem][4])
				{
					PlayerTextDrawBoxColor(playerid, Elerte[playerid][4], 16711935);
					PlayerTextDrawHide(playerid, Elerte[playerid][4]);
					PlayerTextDrawShow(playerid, Elerte[playerid][4]);
					return true;
				}
				return true;
			}
			return true;
		}
		/*case T_C4PLANT:
		{
			ClearAnimations(playerid, 1);
			SCM(playerid, COL_MKEK, "A bomba sikeresen felszerelve! Most pedig futás az elõcsarnokból!");
			
			BankInfo[bBankC4] = CreateDynamicObject(1252, 1768.79749, -1117.43945, 24.41430,   0.00000, 45.00000, 0.00000);
			BankInfo[bBankC4Fel] = true;
			
			Streamer_Update(playerid);
			return true;
		}*/
		case T_DROGKESZITES:
		{
			//Marihuana [%dg]\n%sKokain [%dg]\n%sHeroin [%dg]
			//PlayerInfo[playerid][pDrogAnyag][listitem]
			
			new mennyi = floatround(PlayerInfo[playerid][pDrogAnyag][egyeb] / 2);
			PlayerInfo[playerid][pDrogAnyag][egyeb] = 0;
			
			switch(egyeb)
			{
				case 0:
					PlayerInfo[playerid][pMarihuana] += mennyi;
				case 1:
					PlayerInfo[playerid][pKokain] += mennyi;
				case 2:
					PlayerInfo[playerid][pHeroin] += mennyi;
			}
			
			ClearAnimations(playerid, 1);
			SFM(playerid, COL_MKEK, "Sikeresen elõállítottál "#COL_MKEK"%dg "#COL_FEHER"drogot!", mennyi);
			return true;
		}
		case T_UTZAR:
		{
			DestroyDynamicObject(Utzarak[playerid][uObject]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][0]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][1]);
			DestroyDynamic3DTextLabel(Utzarak[playerid][uText]);
			Utzarak[playerid][uVan] = false;
			Utzarak[playerid][uTipus] = 0;
			Utzarak[playerid][uPickup] = {NINCS, NINCS, NINCS, NINCS};
			
			Streamer_Update(playerid);
			
			SCM(playerid, COL_MKEK, "Útzár automatikusan felvéve!");
			
			return 1;
		}
		case T_FKESZITES:
		{
			SFM(playerid, COL_MKEK, "Sikeresen elkészítettél egy "#COL_MKEK"%s"#COL_FEHER"-t!", Fegyverek[egyeb][fNev]);
			
			if(((PlayerInfo[playerid][pFegyverSkill] - Fegyverek[egyeb][fSkill]) <= 49))
			{
				SCM(playerid, COL_MKEK, "Fegyverkészítési tapasztalatod növekedett 1-el!");
				
				PlayerInfo[playerid][pFegyverSkill]++;
			}
			
			PlayerInfo[playerid][pMaterial] -= Fegyverek[egyeb][fMati];
			SFM(playerid, COL_MKEK, "Megmaradt materialod: "#COL_MKEK"%d"#COL_FEHER"db", PlayerInfo[playerid][pMaterial]);
			
			if(PlayerInfo[playerid][pFegyver])
			{
				new wep;
				GetPlayerWeaponData(playerid, aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ], wep, PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);
				
				PlayerInfo[playerid][pFegyver] = 0;
				
				ResetPlayerWeapons(playerid);
				SetPlayerAttachedWeapon(playerid);
			}
			
			switch(egyeb)
			{
				case 0: GiveWeapon(playerid, 8, Fegyverek[egyeb][fTolteny]);
				case 1: GiveWeapon(playerid, 15, Fegyverek[egyeb][fTolteny]);
				case 2: GiveWeapon(playerid, 7, Fegyverek[egyeb][fTolteny]);
				case 3: GiveWeapon(playerid, 5, Fegyverek[egyeb][fTolteny]);
				case 4: GiveWeapon(playerid, 6, Fegyverek[egyeb][fTolteny]);
				case 5: GiveWeapon(playerid, 22, Fegyverek[egyeb][fTolteny]);
				case 6: GiveWeapon(playerid, 23, Fegyverek[egyeb][fTolteny]);
				case 7: GiveWeapon(playerid, 25, Fegyverek[egyeb][fTolteny]);
				case 8: GiveWeapon(playerid, 24, Fegyverek[egyeb][fTolteny]);
				case 9: GiveWeapon(playerid, 29, Fegyverek[egyeb][fTolteny]);
				case 10: GiveWeapon(playerid, 28, Fegyverek[egyeb][fTolteny]);
				case 11: GiveWeapon(playerid, 30, Fegyverek[egyeb][fTolteny]);
				case 12: GiveWeapon(playerid, 31, Fegyverek[egyeb][fTolteny]);
				case 13: GiveWeapon(playerid, 34, Fegyverek[egyeb][fTolteny]);
				case 14: GiveWeapon(playerid, 27, Fegyverek[egyeb][fTolteny]);
				case 15: SetArmour(playerid, Fegyverek[egyeb][fTolteny]);
			}
			
			PlayerInfo[playerid][pFoglalt] = false;
			ClearAnimations(playerid, 1);
			
			//CallLocalFunction("OnPlayerFinishJob", "ii", playerid, MUNKA_FEGYVER);
			
			return true;
		}
		case T_MATIKESZITES:
		{
			new rand, i = -1;
			
			for(;++i < egyeb;)
				rand += Rand(25, 100);
			
			ClearAnimations(playerid, 1);
			
			PlayerInfo[playerid][pMaterial] += rand;
			PlayerInfo[playerid][pVas] = 0;
			SFM(playerid, COL_MKEK, "Sikeresen készítettél "#COL_MKEK"%d"#COL_FEHER"db materialt!", rand);
			return true;
		}
		
		case T_VAS:
		{
			ClearAnimations(playerid, 1);
			TogglePlayerControllable(playerid, true);
			
			new rand = random(2);
			switch(rand)
			{
				case 0:
				{
					SCM(playerid, COL_LRED, "Sajnos nem találtál semmi használhatót!");
					return true;
				}
				case 1:
				{
					new vasrand = (random(2) + 1);
					SFM(playerid, COL_MKEK, "Sikeresen gyûjtöttél "#COL_MKEK"%d"#COL_FEHER"kg vasat!", vasrand);
					
					PlayerInfo[playerid][pVas] += vasrand;
					
					if(PlayerInfo[playerid][pVas] > P_MAX_VAS)
						PlayerInfo[playerid][pVas] = P_MAX_VAS;
					
					return true;
				}
			}
			return true;
		}
		case T_MSEGIT:
			goto tsegit;
		case T_SEGIT:
		{
			tsegit:
			if(!PlayerInfo[playerid][pMeghalt])
				return true;
				
			if(process == T_SEGIT && GetPlayerDistanceFromPlayer(playerid, extra) > 4)
				return true;
				
			PlayerInfo[playerid][pMeghalt] = 0;
			if(!IsPlayerInAnyVehicle(playerid))
				ClearAnimations(playerid);
				
			SetPlayerDrunkLevel(playerid, 0);
			Freeze(playerid, NINCS);
			
			new Float:hp = PlayerInfo[playerid][pElet];
			if(hp < 15.0) SetHealth(playerid, 35.0);
			else if(hp < 95.0) SetHealth(playerid, (hp + 5.0));
			
			if(process == T_MSEGIT)
			{
				SCM(playerid, COL_MKEK, "Sikeresen elláttad a sérüléseid!");
				Cselekves(playerid, "ellátta a sérüléseit..");
			
			} else if(process == T_SEGIT)
			{
				SFM(playerid, COL_MKEK, "%s sikeresen ellátta a sérüléseid!", JatekosNev(extra));
				format(str, sizeof(str), "ellátta %s sérüléseit.", JatekosNev(playerid, true));
				Cselekves(playerid, str, 1);
				
				if(PlayerInfo[extra][pFrakcio] == FRAKCIO_LSMD && PlayerInfo[extra][pDuty])
				{
					SFM(extra, COL_MKEK, "Sikeresen elláttad "#COL_MKEK"%s"#COL_FEHER" sérüléseit, ezért a Mentõszolgálat 8$-ot kapott a TB-bõl!", JatekosNev(playerid, true));
					FInfo[ FRAKCIO_LSMD ][fPenz] += 8;
				}
				KillTimer(Korhazbakerules(playerid));
				KillTimer(Hasznalhatja(playerid));
				SetCameraBehindPlayer(playerid);
				SetPlayerWeather(playerid, 1);
				DestroyDynamic3DTextLabel(PlayerInfo[playerid][pHalalText]);
				PlayerInfo[playerid][pHalalText] = INVALID_3D_TEXT_ID;
				PlayerInfo[extra][pTimerFut] = false;
				PlayerInfo[extra][pFoglalt] = false;
				
				Freeze(extra, NINCS);
				if(!IsPlayerInAnyVehicle(extra))
					ClearAnimations(extra);
			}
			return true;
		}
		case T_SISAK:
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return true;
			
			Freeze(playerid, NINCS);
			switch(GetPlayerSkin(playerid))
			{
				#define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, SLOT_SISAK, 18645, 2, (%0), (%1), (%2), (%3), (%4), (%5));
				case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
				case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
				case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
				case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
				case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
				case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
			}
			
			Cselekves(playerid, "felvette a sisakot");
			PlayerInfo[playerid][pSisak] = true;
		}
	}
	
	return true;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat)
{
	new Float:pos[3];
	GetVehiclePos(vehicleid, PosExt(pos));
	
	if(VehiclePos[vehicleid][0] != 0.0 && VehiclePos[vehicleid][1] != 0.0 && VehiclePos[vehicleid][2] != 0.0 && GetVehicleTrailer(vehicleid))
	{
		new
			Float:dist = GetVehicleDistanceFromPoint(vehicleid, PosExt( VehiclePos[vehicleid] )),
			Float:distp = GetPlayerDistanceFromPoint(playerid, PosExt(pos));
			
		if(dist >= 15.0 && distp <= 15.0)
		{
			PlayerInfo[playerid][pCarTeleportFlood]++;
			PlayerInfo[playerid][pCarTeleportTime] += 2;
			
			nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: Jármû teleport - %d (%.0f, %.0f) - %dx", playerid, JatekosNev(playerid), vehicleid, dist, distp, PlayerInfo[playerid][pCarTeleportFlood]);
			Log(FILE_CHEAT, string);
			
			if(PlayerInfo[playerid][pCarTeleportFlood] >= 2)
				AdminUzenetEx(COLOR_WHITE, 1001, string);
			
			SetVehiclePos(vehicleid, PosExt( VehiclePos[vehicleid] ));
		}
		else
			VehiclePos[vehicleid] = pos;
	}
	else	
		VehiclePos[vehicleid] = pos;
	
	/*----------------- Jármû sérülés -----------------*/
	/*if(passenger_seat != 0)
		return true;
	
	new cm = GetPlayerCameraMode(playerid);
	if(cm != 53 && cm != 51)
		return true;
	
	new keys, tmp;
	GetPlayerKeys(playerid, keys, tmp, tmp);
	if(!(keys & KEY_FIRE))
		return true;
	
	new Float:vhp; GetVehicleHealth(vehicleid, vhp);
	switch (GetPlayerWeapon(playerid))
	{
		case WEAPON_COLT45: DecreaseVehHP(VEHICLE_DMG_COLT45);
		case WEAPON_SILENCED: DecreaseVehHP(VEHICLE_DMG_SILENCED);
		case WEAPON_DEAGLE: DecreaseVehHP(VEHICLE_DMG_DEAGLE);
		case WEAPON_SHOTGUN: DecreaseVehHP(VEHICLE_DMG_SHOTGUN);
		case WEAPON_SAWEDOFF: DecreaseVehHP(VEHICLE_DMG_SAWEDOFF);
		case WEAPON_SHOTGSPA: DecreaseVehHP(VEHICLE_DMG_SHOTGSPA);
		case WEAPON_UZI: DecreaseVehHP(VEHICLE_DMG_UZI);
		case WEAPON_MP5: DecreaseVehHP(VEHICLE_DMG_MP5);
		case WEAPON_AK47: DecreaseVehHP(VEHICLE_DMG_AK47);
		case WEAPON_M4: DecreaseVehHP(VEHICLE_DMG_M4);
		case WEAPON_TEC9: DecreaseVehHP(VEHICLE_DMG_TEC9);
		case WEAPON_RIFLE: DecreaseVehHP(VEHICLE_DMG_RIFLE);
		case WEAPON_ROCKETLAUNCHER: DecreaseVehHP(VEHICLE_DMG_ROCKETLAUNCHER);
		case WEAPON_HEATSEEKER: DecreaseVehHP(VEHICLE_DMG_HEATSEEKER);
		case WEAPON_MINIGUN: DecreaseVehHP(VEHICLE_DMG_MINIGUN);
		default: DecreaseVehHP(VEHICLE_DMG_DEFAULT);
	}*/
	
	return true;
}

stock GetPlayerSpeed(playerid)
{
	new Float:vVectors[3];
	GetPlayerVelocity(playerid, vVectors[0], vVectors[1], vVectors[2]);
	return floatround(VectorSize(vVectors[0],vVectors[1],vVectors[2])*136.666667);
}

stock GetVehicleSpeed( vehicleid ) 
{
	new Float:vSpeed[3];
	GetVehicleVelocity( vehicleid, vSpeed[0], vSpeed[1], vSpeed[2] );

	new Float:vSpeed_Float;
	vSpeed_Float = VectorSize(vSpeed[0], vSpeed[1], vSpeed[2]) * 161.0;

	new vSpeed_Int;
	vSpeed_Int = floatround( vSpeed_Float, floatround_round );

	return vSpeed_Int;
}

funkcio JarmuInditas(playerid, vehicleid)
{
	new jarmuidje = JarmuID(vehicleid, playerid);
	
	vInfo[jarmuidje][vMotorelinditva] = true;
	SetJarmu(vehicleid, KOCSI_MOTOR, 1);
	SendClientMessage(playerid, COLOR_GREEN, "A jármû sikeresen beindítva!");
	Cselekves(playerid, "beindította a jármûvét", 1);
	PlayerInfo[playerid][pmotortinditja] = false;
	return true;
}

funkcio Kifagyaszt(playerid)
{
	TogglePlayerControllable(playerid, 1);
	PlayerInfo[playerid][pobjectbetoltes] = false;
	GameTextForPlayer(playerid, "~g~Objectek ~y~betöltése megtörtént!", 2000, 3);
	return true;
}

funkcio Berakodas(playerid)
{
	TogglePlayerControllable(playerid, 1);
	
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 578)
	{
		new szinek[3] = {2934, 2935, 2932};
		new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
		vInfo[vid][vKObject] = CreateDynamicObject(szinek[random(sizeof(szinek))], 0, 0, -1000, 0, 0, 0);
		//CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 200.0);
		AttachDynamicObjectToVehicle(vInfo[vid][vKObject], GetPlayerVehicleID(playerid), 0.0, -1.725000, 1.200000, 0.0, 0.0, 0.0);
		Streamer_Update(playerid);
		SCM(playerid, COL_MKEK, "Felrakva!");
	}
	
	GameTextForPlayer(playerid, "RAKODÁS MEGTÖRTÉNT", 2000, 3);
	return true;
}

funkcio Kirakodas(playerid)
{
	TogglePlayerControllable(playerid, 1);
	GameTextForPlayer(playerid, "KIRAKODÁS MEGTÖRTÉNT", 2000, 3);
	
	new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
	new Float:tavolsag = GetDistanceBetweenPoints(PosExt(KamionUtak[PlayerInfo[playerid][pKamions]]), PosExt(KamionUtak[PlayerInfo[playerid][pKamionc]]));
	new kerekites = ((floatround((Kerekites(floatround(tavolsag), SZAZAS) * 7) * 1.25) + 15000)/235);// + 25% fizetés
	CallLocalFunction("OnPlayerFinishJob", "iii", playerid, MUNKA_KAMION, kerekites);
	
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 578)
		DestroyDynamicObject(vInfo[vid][vKObject]);
	
	//SendFormatMessage(playerid, COLOR_DARKORANGE, "Az áru kirakodása megtörtént! Az áruért kaptál: %d$-ot!", kerekites);
	return true;
}

funkcio JatekosTeleportalhat(playerid, bool:ertek)
	return PlayerInfo[playerid][pbemehet] = ertek;

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(!Belepve(playerid))
	{
		ServerBan(playerid, 0, "[AC] Sobeit", NINCS, true, true, false);
	}
	if(!ispassenger && GetVehicleDriver(vehicleid) != INVALID_PLAYER_ID)
	{
		ClearAnimations(playerid);
		Freeze(playerid, 5000);
		SCM(playerid, COL_LRED, "Ez nonos jármû lopás! Használd a /kiszed parancsot.");
		return true;
	}
	if(!ispassenger && PlayerInfo[playerid][pMeghalt])
	{
		ClearAnimations(playerid);
		Freeze(playerid, 5000);
		SCM(playerid, COL_LRED, "Így ne vezess!");
		return true;
	}
	new vi = JarmuID(vehicleid, playerid), tipusa = GetVehicleModel(vehicleid);
	PlayerInfo[playerid][pJarmubenUlt] = vi;
	if(!vInfo[vi][vInsert])
		SendClientMessage(playerid, COLOR_WHITE, "(( Ez egy Admin által lehívott jármû! ))");
    else if(vInfo[vi][vTulajID] == NINCS && !vInfo[vi][vMunka] && !ispassenger)
    {
		SendClientMessage(playerid, COLOR_WHITE, "Ez a jármû "#COL_MKEK"eladó"#COL_FEHER", ha megszeretnéd venni írd be, hogy "#COL_MKEK"/v (frakció) vesz");
		SendFormatMessage(playerid, COLOR_WHITE, "Típusa: "#COL_MKEK"%s (%d)"#COL_FEHER" | Rendszám: "#COL_MKEK"%d[%d]"#COL_FEHER" | Ára: "#COL_MKEK"%s$", VehicleNames[tipusa-400], tipusa, vehicleid, vi, FormatNumber(vInfo[vi][vAr], 0, ','));
	}
	else if(JarmuKulcs( playerid, vi ))
	{
		if(NincsBenne_Radio(vInfo[vi][vModel]))
			SendClientMessage(playerid, COLOR_WHITE, "A jármû indításához használd a "#COL_MKEK"/motor"#COL_FEHER" parancsot, vagy a "#COL_MKEK"~k~~VEHICLE_ACCELERATE~"#COL_FEHER" gombot, a lámpa felkapcsolásához a "#COL_MKEK"~k~~KEY_YES~"#COL_FEHER" gombot.");
		else
			SendClientMessage(playerid, COLOR_WHITE, "A jármû indításához használd a "#COL_MKEK"/motor"#COL_FEHER" parancsot, vagy a "#COL_MKEK"~k~~VEHICLE_ACCELERATE~"#COL_FEHER" gombot, a lámpa felkapcsolásához a "#COL_MKEK"~k~~KEY_YES~"#COL_FEHER" gombot. "#COL_MKEK"Rádió: /v rádió");
	}
	else if(vInfo[vi][vMunka] == 100 && !ispassenger)//bérelhetõ
		SendFormatMessage(playerid, COLOR_WHITE, "A jármû bérlésének összege "#COL_MKEK"%s"#COL_FEHER"$ - bérléshez írd be: "#COL_MKEK"/v bérel", FormatNumber(vInfo[vi][vAr], 0, ','));
	
	if((vInfo[vi][vMunka] != 101) && (PlayerInfo[playerid][pVizsga][2]))
	{
		ClearAnimations(playerid, 1);
		SCM(playerid, COL_LRED, "Jelenleg vizsgázol, nem szállhatsz be más jármûbe!");
	}
	if((vInfo[vi][vMunka] == 101) && (PlayerInfo[playerid][pVizsga] != 0))
	{
	    SetJarmu(vi,KOCSI_MOTOR,1);
	    SCM(playerid,COL_MKEK,"Vizsgajármûbe ültél, a motor elindult.");
	}
	if(vInfo[vi][vModel] == 481 || vInfo[vi][vModel] == 509 || vInfo[vi][vModel] == 510)
	{
	    SetJarmu(vehicleid	,KOCSI_MOTOR,1);
	}
	SendClientMessage(playerid, COLOR_WHITE, "A jármû indításához használd a "#COL_MKEK"/motor"#COL_FEHER" parancsot, vagy a "#COL_MKEK"~k~~VEHICLE_ACCELERATE~"#COL_FEHER" gombot, a lámpa felkapcsolásához a "#COL_MKEK"~k~~KEY_YES~"#COL_FEHER" gombot. "#COL_MKEK"Rádió: /v rádió");
	return true;
}
funkcio smtimer(playerid)
{
	return DestroyVehicle(smkocsiid[playerid]);
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
	if(PlayerInfo[playerid][pSMkocsi] == 1)
	{
	    smkocsiid[playerid] = vehicleid;
	    SCM(playerid,COL_MKEK,"Kiszálltál, ezért a kocsi törlodött.");
	    SetPlayerHealth(playerid,MAX_HP);
		PlayerInfo[playerid][pMeghalt] = 0;
		SetPlayerDrunkLevel(playerid, 0);
		PlayerInfo[playerid][pSMkocsi] = 0;
		SetTimerEx("smtimer",1000,false,"d",playerid);
		if(!IsPlayerInAnyVehicle(playerid))
			ClearAnimations(playerid);
	}
	new vid = JarmuID(vehicleid, INVALID_PLAYER_ID);
	new Float:elet;
	GetVehicleHealth(vehicleid,elet);
	vInfo[vid][vElet] = elet;
	vUpdate(vid, vuElet);
	KocsiUtolsoHasznalat[vehicleid] = gettime();
	if(PlayerInfo[playerid][pOv])
	{
		PlayerInfo[playerid][pOv] = false;
		Cselekves(playerid, "kikapcsolta a biztonsági övet");
		return true;
	}
	if(PlayerInfo[playerid][pSisak])
	{
		RemovePlayerAttachedObject(playerid, SLOT_SISAK);
		Cselekves(playerid, "levette a bukósisakot");
		PlayerInfo[playerid][pSisak] = false;
	}
	
	if(PlayerInfo[playerid][pTaxiban] == 1)
	{
	    TaxiOraStop(PlayerInfo[playerid][pTaxisid],playerid);
	    PlayerInfo[playerid][pTaxisid] = INVALID_PLAYER_ID;
	}
	
	if(GetJarmu(vehicleid, KOCSI_MOTOR) == 1 && GetPlayerState(playerid) == 2 && GetVehicleType(vehicleid) != BIKE)
		SCM(playerid, COL_MKEK, "Nem állítottad le a jármû motorját!");
		
	vInfo[ JarmuID(vehicleid, playerid) ][vLastActive] = gettime();
	return true;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(!Belepve(playerid))
	{
		ServerBan(playerid, 0, "[AC] Sobeit", NINCS, true, true, false);
	}
	new halal = (PlayerInfo[playerid][pLastDeath] == 0 ? 30 : gettime() - PlayerInfo[playerid][pLastDeath]);
	PlayerInfo[playerid][pLastDeath] = gettime();

	if(PlayerInfo[playerid][pScriptShoot][0] != NINCS && PlayerInfo[playerid][pScriptShoot][1] != NINCS)
	{
		killerid = PlayerInfo[playerid][pScriptShoot][0];
		reason = PlayerInfo[playerid][pScriptShoot][1];
		
		PlayerInfo[playerid][pScriptShoot][0] = NINCS;
		PlayerInfo[playerid][pScriptShoot][1] = NINCS;
		PlayerInfo[playerid][pScriptShoot][2] = 0;
	}
	else if(!PlayerInfo[playerid][pScriptShoot][2] && killerid != INVALID_PLAYER_ID && (Shooted[playerid][killerid] < (gettime() - 10) || reason <= 42 && GetPlayerWeapon(killerid) != reason || halal <= 3))
	{
		PlayerInfo[playerid][pFakeKill][0]++;
		PlayerInfo[playerid][pFakeKill][1]+= 3;

		if(PlayerInfo[playerid][pFakeKill][0] >= 2)
		{
			nformat(astr, 128, "[AntiCheat]: [%d]%s - Cheat: FakeKill (%s)", playerid, JatekosNev(playerid), (Admin(playerid, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
			AdminUzenetEx(COLOR_WHITE, 1001, astr);
			Log(FILE_CHEAT, astr);
		
			if(!Admin(playerid, FOADMIN_SZINT))
				ServerBan(playerid, 0, "[AC] FakeKill", NINCS, (!Belepve(playerid) ? true : false), true, true);
			
			return true;
		}
	}
	
	if((killerid == INVALID_PLAYER_ID || !IsPlayerConnected(killerid)) && (PlayerInfo[playerid][pScriptShoot][2] == 100 || PlayerInfo[playerid][pScriptShoot][2] == 1))
		reason = (PlayerInfo[playerid][pScriptShoot][2] == 100 ? 100 : 101);
	
	if(((PlayerInfo[playerid][pFegyverSkill] - 5) >= 0) && !PlayerInfo[playerid][pAduty] && !PlayerInfo[playerid][pPaintBall][0] && !PlayerInfo[playerid][pPaintBall][0]  && !PlayerInfo[playerid][pSpeedBoots] && killerid != INVALID_PLAYER_ID)
		PlayerInfo[playerid][pFegyverSkill] -= 5;
	
	PlayerInfo[playerid][pEhseg] = 0.0;
	PlayerInfo[playerid][pVizelet] = 0.0;
	PlayerInfo[playerid][pScriptShoot][2] = 0;
	PlayerInfo[playerid][pVisz] = NINCS;
	PlayerInfo[playerid][pUsingLoopingAnim] = 0;
	PlayerInfo[playerid][phaz] = -1;
	PlayerInfo[playerid][pMP3_Megy] = false;
	PlayerInfo[playerid][pBMennyi] = 0;
	PlayerInfo[playerid][pHatizsak] = 0;
	StopAudioStreamForPlayer(playerid);
	//ClearAnimations(playerid);
	
	
	new index;
	if(DivatInfo[SLOT_SAPKA][playerid][dVan] == 1)
	{
		index = SLOT_SAPKA;
		SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
	}
	if(DivatInfo[SLOT_SZEMUVEG][playerid][dVan] == 1)
	{
		index = SLOT_SZEMUVEG;
		SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
	}
	if(DivatInfo[SLOT_KARORA][playerid][dVan] == 1)
	{
		index = SLOT_KARORA;
		SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 13, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
	}
	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
	    PlayerInfo[playerid][pMaszkVisel] = false;
	}
	
	for(new i = NINCS; ++i < MAX_PLAYER_ATTACHED_OBJECTS;)
		if(IsPlayerAttachedObjectSlotUsed(playerid, i))
			RemovePlayerAttachedObject(playerid, i);
	
	//PaintBall mûveletek
	if(killerid != INVALID_PLAYER_ID && PlayerInfo[playerid][pPaintBall][0] != 0 && PlayerInfo[killerid][pPaintBall][0] != 0)
	{
		PlayerInfo[killerid][pPaintBall][1]++;
		
		if((PlayerInfo[killerid][pPaintBall][1] > ServerInfo[0][sPaintBall][0]) || (ServerInfo[0][sPaintBall][1] == INVALID_PLAYER_ID))
		{
			ServerInfo[0][sPaintBall][0] = PlayerInfo[killerid][pPaintBall][1];
			new poid = ServerInfo[0][sPaintBall][1];
			foreach(Player, i)
			{
				if(!Belepve(i) || !PlayerInfo[i][pPaintBall][0])
					continue;
				
				if(Belepve(poid) && poid != killerid && PlayerInfo[poid][pPaintBall][0] != 0)
					SendFormatMessage(i, COLOR_TKEK, "** Hoppá! "#COL_MKEK"%s"#COL_TKEK" megölte %s-t ezzel átvette a vezetést! Jelenleg "#COL_MKEK"%d"#COL_TKEK" öléssel vezet!", JatekosNev(killerid, true), JatekosNev(playerid, true), ServerInfo[0][sPaintBall][0]);
				else
					SendFormatMessage(i, COLOR_TKEK, "** Jelenleg "#COL_MKEK"%s"#COL_TKEK" vezet "#COL_MKEK"%d"#COL_TKEK" öléssel!", JatekosNev(killerid, true), ServerInfo[0][sPaintBall][0]);
			}
			
			ServerInfo[0][sPaintBall][1] = killerid;
		}
		
		return true;
	}
	
	/*if(killerid != INVALID_PLAYER_ID && Bortonben( killerid ) != 0)
	{
		AdminUzenet(COLOR_LIGHTRED, 1, "%s %s DM-elt ezért a rendszer AdminJailbe zárta %d percre!", JatekosNev(killerid), BortonNev(PlayerInfo[killerid][pjail]), floatround((1800 + PlayerInfo[killerid][pJailIdo]) / 60));
		SFM(playerid, COL_MKEK, "Mivel %s DM-eltél %d perc AdminJail-t kaptál!", BortonNev(PlayerInfo[killerid][pjail]), floatround((1800 + PlayerInfo[killerid][pJailIdo]) / 60));
		
		BortonInfo(killerid, "Rendszer", (format(uzenet, sizeof(uzenet), "%s DM",  BortonNev(PlayerInfo[killerid][pjail])), uzenet));
		PlayerInfo[killerid][pjail] = 3;
		PlayerInfo[killerid][pJailIdo] = (1800 + PlayerInfo[killerid][pJailIdo]);
		Borton(killerid, 3);
		return true;
	}*/
	
	if(Bortonben( playerid ) != 0)
		return Borton(playerid, Bortonben( playerid ));

	new Float:pos[3];
	GetPlayerPos(playerid, PosExt(pos));
	
	
	if(killerid != INVALID_PLAYER_ID && !PlayerInfo[killerid][pAduty] && !PlayerInfo[killerid][pHarcol] && !PlayerInfo[killerid][pMaszkVisel])
	{
		//SendFormatMessage(playerid, COLOR_YELLOW, "Figyelem! %s megölt téged! Ha szerinted nonosan tette, jelentsd az Adminoknak! /report vagy nyiss panaszkönyvet", JatekosNev(killerid));
		
		if((FInfo[ PlayerInfo[killerid][pFrakcio] ][fLegalis] != FK_REND && !PlayerInfo[killerid][pDuty][0]))
		{
		//	if(reason != 49) Korozes_Kiad(killerid, NINCS, "Gyilkosság", 1);//ha nem jármûvel öl
			/*else*/ 
			if(reason == 49) Korozes_Kiad(killerid, NINCS, "Cserbenhagyás", 1);//ha jármûvel elüti
		}
	}
	
	if(TilosOlni == 1 && !IsPlayerNPC(killerid) && IsPlayerConnected(killerid) && killerid != INVALID_PLAYER_ID && killerid >= 0 && killerid < MAX_PLAYERS)
	{
		SCM(killerid,COL_LRED, "Zeró tolerancia érvényben van, es mivel megszegted, 2 óra jail!");
		BortonInfo(killerid, "Rendszer", "Zeró Tolerancia");
		PlayerInfo[killerid][pjail] = 3;
		PlayerInfo[killerid][pJailIdo] = 7200;
	}

	
	PlayerInfo[playerid][pMaszkVisel] = false;
	/*-------------------------- Halál okai --------------------------*/
	new str[128];
	if((reason == 16 || reason == 38 || reason >= 0 && reason <= 47) && killerid != INVALID_PLAYER_ID)
		format(str, sizeof(str), "[Halál]: [%d]%s súlyosan megsebesítette [%d]%s-t ezzel: %s - Pénz: %s$ | X: %.1f Y: %.1f Z: %.1f", killerid, JatekosNev(killerid), playerid, JatekosNev(playerid), aWeaponNames[reason], FormatNumber(PlayerInfo[playerid][ppenz], 0, ','), pos[0], pos[1], pos[2]);
	else if(reason == 51 && killerid != INVALID_PLAYER_ID)
		format(str, sizeof(str), "[Halál]: [%d]%s felrobbantotta [%d]%s-t - Pénz: %s$ | X: %.1f Y: %.1f Z: %.1f", killerid, JatekosNev(killerid), playerid, JatekosNev(playerid), FormatNumber(PlayerInfo[playerid][ppenz], 0, ','), pos[0], pos[1], pos[2]);
	else if((reason >= 49 && reason <= 54 && reason != 52) || reason == 100 || reason == 101)
	{
		new oka[32];
		switch( reason )
		{
			case 49: oka = "Autó";
			case 50: oka = "Helikopter";
			case 51: oka = "Robbanás";
			case 53: oka = "Megfulladt";
			case 54: oka = "Leesett";
			case 100: oka = "Szükségletek";
			case 101: oka = "Rendszer";
		}
		
		if(reason != 54 && reason != 53 && reason != 51 && reason != 100 && reason != 101)
		{
			new killer = GetClosestPlayer(playerid);
			format(str, sizeof(str), "[Halál]: [%d]%s meghalt | Oka: %s | Közelben volt: %s - Pénz: %s$ | X: %f Y: %f Z: %f", playerid, JatekosNev(playerid), oka, (killer == NINCS ? ("Nincs adat") : JatekosNev(killer)), FormatNumber(PlayerInfo[playerid][ppenz], 0, ','), pos[0], pos[1], pos[2]);
		
		} else
			format(str, sizeof(str), "[Halál]: [%d]%s meghalt | Oka: %s - Pénz: %s$ | X: %f Y: %f Z: %f", playerid, JatekosNev(playerid), oka, FormatNumber(PlayerInfo[playerid][ppenz], 0, ','), pos[0], pos[1], pos[2]);
	}
	
	if(!strlen(str)) format(str, sizeof(str), "[Halál]: [%d]%s meghalt | Oka: Ismeretlen(%d) - Pénz: %s$ | X: %f Y: %f Z: %f", playerid, JatekosNev(playerid), reason, FormatNumber(PlayerInfo[playerid][ppenz], 0, ','), pos[0], pos[1], pos[2]);
	
	if(!PlayerInfo[playerid][pHarcol])
		AdminUzenetEx(COLOR_WHITE, 1001, str);
	
	Log(FILE_HALAL, str);
	
	/*-------------------------- Halál okai vége --------------------------*/
	if(PlayerInfo[playerid][pMeghalt] == 1)
	{
		PlayerInfo[playerid][pMeghalt] = 0;
		TogglePlayerControllable(playerid, true);
		ClearAnimations(playerid);
		SCM(playerid, COL_LRED, "Kórházba kerültél!");
		SCM(playerid, COL_LRED, "A kórházi költség 100 $ volt!");
		GiveMoney(playerid,-100);
		PlayerInfo[playerid][pJailIdo] = 900;
		PlayerInfo[playerid][pjail] = 1;
		Borton(playerid, 1);
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pHalalText]);
		PlayerInfo[playerid][pHalalText] = INVALID_3D_TEXT_ID;
		BortonInfo(playerid, "Rendszer", "Halál");
		PlayerInfo[playerid][pFegyver] = 0;
		DeleteWeapon(playerid);
		if(PlayerInfo[playerid][ppenz]>0)
		{
			SetMoney(playerid,0);
		}	
		
		if(Korozes[playerid][krSzint])
		{
			new penz = (Korozes[playerid][krSzint] * 100);
			PlayerInfo[playerid][pBszPenz] -= penz;
			FInfo[ FRAKCIO_LSPD ][fPenz] += penz;
			Korozes[playerid][krSzint] = 0;
			SFM(playerid, COL_LRED, "Mivel kórházba kerülésed elõtt körözés volt rajtad, azért %s$ levonásra került a bankszámládról!", FormatNumber(penz, 0, ','));
		}
		SetCameraBehindPlayer(playerid);
		return true;
	}
	if(!PlayerInfo[playerid][pAduty])
	{
//		if(killerid != INVALID_PLAYER_ID) HullaLerak(playerid, PosExt(pos), reason, GetPlayerVirtualWorld(playerid), JatekosNev(killerid));
//		else HullaLerak(playerid, PosExt(pos), reason, GetPlayerVirtualWorld(playerid));
		
		if(ServerInfo[0][sHarcVan] != NINCS && PlayerInfo[playerid][pHarcol])
			HarcKieses(playerid, "Meghalt");
		
		new Float:pX, Float:pY, Float:pZ;
		GetPlayerPos(playerid, pX, pY, pZ);
		PlayerInfo[playerid][pMeghalt] = 1;
		PlayerInfo[playerid][pHx] = pX;
		PlayerInfo[playerid][pHy] = pY;
		PlayerInfo[playerid][pHz] = pZ;
		//Kórház idõ és egyebek beállítása
		/*SCM(playerid, COL_MKEK, "Meghaltál, ezért néhány emléked elveszett!");
		PlayerInfo[playerid][pJailIdo] = 900;
		PlayerInfo[playerid][pjail] = 1;
		Borton(playerid, 1);
		BortonInfo(playerid, "Rendszer", "Halál");*/
//		PlayerInfo[playerid][pFegyver] = 0;
//		DeleteWeapon(playerid);
		/*if(PlayerInfo[playerid][ppenz]>0)
		{
			PlayerInfo[playerid][ppenz]=0;
		}
		
		if(Korozes[playerid][krSzint])
		{
			new penz = (Korozes[playerid][krSzint] * 100);
			PlayerInfo[playerid][pBszPenz] -= penz;
			FInfo[ FRAKCIO_LSPD ][fPenz] += penz;
			Korozes[playerid][krSzint] = 0;
			SFM(playerid, COL_LRED, "Mivel halálod elõtt körözés volt rajtad, azért %s$ levonásra került a bankszámládról!", FormatNumber(penz, 0, ','));
		}*/
		
	} else {
	
		SetPos(playerid, PosExt(pos));
		SCM(playerid, COL_MKEK, "Mivel Adminszolgálatban vagy, így visszakerültél a halálod helyszínére.");
	}
	
	return true;
}

public OnVehicleDeath(vehicleid, killerid)
{
	if(GetJarmu(vehicleid, KOCSI_MOTOR) == 1)
		SetJarmu(vehicleid, KOCSI_MOTOR, 0);
	new vid = JarmuID(vehicleid, killerid);
	
	SetVehicleHealth(vehicleid, 450.0);
	vInfo[vid][vElet] = 450.0;
	vUpdate(vid, vuElet);
	return true;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	new vid = JarmuID(vehicleid, forplayerid);
	
	if(vInfo[vid][vZarva])
		SetVehicleParamsForPlayer(vInfo[vid][vID], forplayerid, 0, 1);
		
    PlayerInfo[forplayerid][pStreameltvehicle]++;
	return true;
}

public OnVehicleSpawn(vehicleid)
{
	new vid = JarmuID(vehicleid, INVALID_PLAYER_ID);
	if(vid)
	{
		if(vInfo[vid][vMunka] == 100 || vInfo[vid][vMunka] >= 20)
		{
			vInfo[vid][vZarva] = false;
			vInfo[vid][vUzemanyag] = MAX_Benzin[ vInfo[vid][vModel] - 400 ];
			vInfo[vid][vBerelt] = false;
		}
		
		SetVehicleHealth(vehicleid, vInfo[vid][vElet]);
		vInfo[vid][vRadio] = 0;
		vInfo[vid][vMotorelinditva] = false;
			
		ChangeVehicleColor(vehicleid, vInfo[vid][vSzin1], vInfo[vid][vSzin2]);
		SetVehicleNeon( vid, 0 );
		
		if(IsValidDynamicObject(vInfo[vid][BalIndex1])) DestroyDynamicObject(vInfo[vid][BalIndex1]);
		if(IsValidDynamicObject(vInfo[vid][BalIndex2])) DestroyDynamicObject(vInfo[vid][BalIndex2]);
		if(IsValidDynamicObject(vInfo[vid][BalTrailer1])) DestroyDynamicObject(vInfo[vid][BalTrailer1]);
		if(IsValidDynamicObject(vInfo[vid][BalTrailer2])) DestroyDynamicObject(vInfo[vid][BalTrailer2]);
		
		vInfo[vid][BalIndex1] = 0;
		vInfo[vid][BalIndex2] = 0;
		vInfo[vid][BalTrailer1] = 0;
		vInfo[vid][BalTrailer2] = 0;
		vInfo[vid][BalIndex] = 0;
						
		if(IsValidDynamicObject(vInfo[vid][JobbIndex1])) DestroyDynamicObject(vInfo[vid][JobbIndex1]);
		if(IsValidDynamicObject(vInfo[vid][JobbIndex2])) DestroyDynamicObject(vInfo[vid][JobbIndex2]);
		if(IsValidDynamicObject(vInfo[vid][JobbTrailer1])) DestroyDynamicObject(vInfo[vid][JobbTrailer1]);
		if(IsValidDynamicObject(vInfo[vid][JobbTrailer2])) DestroyDynamicObject(vInfo[vid][JobbTrailer2]);
		
		vInfo[vid][JobbIndex1] = 0;
		vInfo[vid][JobbIndex2] = 0;
		vInfo[vid][JobbTrailer1] = 0;
		vInfo[vid][JobbTrailer2] = 0;
		vInfo[vid][JobbIndex] = 0;
		
		TuningBetolt(vehicleid);
		KocsinObject[vid] = 0;
		KocsinObject1[vid] = 0;
		KocsinObject2[vid] = 0;
		KocsinObject3[vid] = 0;
		KocsinObject4[vid] = 0;
		KocsinDarab[vid] = 0;
		Alvany[vid] = 0;
		Mosogep[vid] = 0;
		Tv[vid] = 0;
		Radiator[vid] = 0;
		Video[vid] = 0;
	}
	
	return true;
}

/*public göbölyösféleclickmap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if(PlayerInfo[playerid][pTeruletSzerkeszt] == 1)
	{
		tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0] = fX;
		tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1] = fY;
		PlayerInfo[playerid][pTeruletSzerkeszt] = 2;
		
		SendClientMessage(playerid, COLOR_MKEK, "Balfelsõ pozició kiválasztva!");
		SendClientMessage(playerid, COLOR_MKEK, "Most válaszd ki a jobbalsó poziciót!");
		return true;
	}else if(PlayerInfo[playerid][pTeruletSzerkeszt] == 2)
	{
		tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0] = fX;
		tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1] = fY;
		
		tInfo[PlayerInfo[playerid][pTerulet]][tZone] = GangZoneCreate(floatround(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0]), floatround(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1]), floatround(tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0]), floatround(tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1]));
		tInfo[PlayerInfo[playerid][pTerulet]][tArea] = CreateDynamicRectangle(floatround(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0]), floatround(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1]), floatround(tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0]), floatround(tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1]));
		
		GangZoneShowForAll(tInfo[PlayerInfo[playerid][pTerulet]][tZone], -8388424);
		TeruletMentesID(PlayerInfo[playerid][pTerulet]);
		PlayerInfo[playerid][pTeruletSzerkeszt] = 0;
		PlayerInfo[playerid][pTerulet] = 0;
		SendFormatMessage(playerid, COLOR_MKEK, "%s terület sikeresen létrehozva!", tInfo[PlayerInfo[playerid][pTerulet]][tNev]);
		return true;
	}
    return 1;
}*/

public OnPlayerClickMap(playerid,Float:fX,Float:fY,Float:fZ)
{
	if(Admin(playerid,1))
	{
	    PlayerInfo[playerid][pWPjelolve] = 1;
	    PlayerInfo[playerid][pWPX] = fX;
	    PlayerInfo[playerid][pWPY] = fY;
	    PlayerInfo[playerid][pWPZ] = fZ;
	    SCM(playerid,COL_MKEK,"Kijelölted a WayPointot, használd a /wp parancsot a teleportáláshoz.");
	}
	return 1;
}

public OnPlayerUpdate(playerid)//opu
{
	if(!Belepve(playerid))
	{
	    if(GetPlayerSpeed(playerid) > 1)
	    {
	        ServerBan(playerid, 0, "[AC] Sobeit", NINCS, true, true, false);
	    }
	}
	if(!Belepve(playerid))
		return true;

	new Float:XXXX,Float:YYYY,Float:ZZZZ;
	GetPlayerPos(playerid,XXXX,YYYY,ZZZZ);
	if(XXXX > 20000 || YYYY > 20000 || ZZZZ > 20000)
	{
		SetPos(playerid, 1473.779, -1723.145, 13.546, 0.236, true);
		SCM(playerid,COL_LRED,"Rossz helyre kerültél ezért a rendszer vissza rakott!!");
	}

	onPause_Update(playerid);
	
	GetPlayerHealth(playerid, PlayerInfo[playerid][pUjElet]);
	// if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	// {
		// if((GetTickCount() - BoostTicTimer[playerid]) > 400)
			// SpeedBoost(playerid);
	// }
	if(Lefagyasztva[playerid] == 1)
	{
		if(!IsScripter(playerid))
		{
			TogglePlayerControllable(playerid, false);
			new Float:x, Float:y, Float:z;
			GetPlayerCameraFrontVector(playerid, x, y, z);
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid,X,Y,Z);
			if(z < -0.18 && Z < 200)
			{
				Warning[playerid]++;
				if(Warning[playerid] > 3)
				{
					AdminUzenet(0xcc2200AA, 1337, "%s [ID: %d] valószínûleg sobeitezik, ellenõrizd!", JatekosNev(playerid),playerid);
					AdminUzenet(0xcc2200AA, 1337, "A rendszer logolja, semmi pánik.", JatekosNev(playerid));
					new date[3],time[3];
					getdate(date[0], date[1], date[2]);
					gettime(time[0], time[1], time[2]);
					new Stringje[256];
					format(Stringje,256,"Név: %s | IP: %s | Mikor: %d-%02d-%02d %02d:%02d | Indok: Sobeit",JatekosNev(playerid),JatekosIP(playerid),PosExt(date), time[0], time[1]);
					Log(FILE_Sobeit, Stringje);
					
					Lefagyasztva[playerid] = 0;
					Warning[playerid] = 0;
				}
			}
		}
		return 1;
	}
	if(VasNala[playerid] == 1)
	{
		new Keys,ud,lr;
		GetPlayerKeys(playerid,Keys,ud,lr);
		if((ud == KEY_UP || ud == KEY_DOWN || lr == KEY_LEFT || lr == KEY_RIGHT))
		{
		   ApplyAnimation(playerid,"BOX","bxhipwlk",1300,1,1,1,1,5000);
		}
	}
	if(PlayerInfo[playerid][pGodmode] == 1)
	{
	    SetPlayerHealth(playerid,150);
	    SetPlayerArmour(playerid,150);
	}
	if(PlayerInfo[playerid][pUjElet] > MAX_HP)
	{
		nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: Élet (%s) | Kliens oldalon: %.1f | Szerver oldalon: %.1f | Differencia: %.1f", playerid, JatekosNev(playerid), (Admin(playerid, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")), PlayerInfo[playerid][pUjElet], PlayerInfo[playerid][pElet], (PlayerInfo[playerid][pUjElet] - PlayerInfo[playerid][pElet]));
		AdminUzenetEx(COLOR_WHITE, 1001, string);
		Log(FILE_CHEAT, string);
		
		SetHealth(playerid, PlayerInfo[playerid][pElet], false);
		PlayerInfo[playerid][pUjElet] = PlayerInfo[playerid][pElet];
		
		if(!Admin(playerid, FOADMIN_SZINT))
			ServerBan(playerid, 0, "[AC] Élet Cheat", NINCS, (!Belepve(playerid) ? true : false), true, true);
	}
	GetPlayerArmour(playerid, PlayerInfo[playerid][pUjPancel]);
	if(PlayerInfo[playerid][pUjPancel] > MAX_ARMOUR)
	{
		nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: Armour (%s) | Kliens oldalon: %.1f | Szerver oldalon: %.1f | Differencia: %.1f", playerid, JatekosNev(playerid), (Admin(playerid, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")), PlayerInfo[playerid][pUjPancel], PlayerInfo[playerid][pPancel], (PlayerInfo[playerid][pUjPancel] - PlayerInfo[playerid][pPancel]));
		AdminUzenetEx(COLOR_WHITE, 1001, string);
		Log(FILE_CHEAT, string);
		
		SetArmour(playerid, 0.0, true);
		
		if(!Admin(playerid, FOADMIN_SZINT))
			ServerBan(playerid, 0, "[AC] Armour Cheat", NINCS, (!Belepve(playerid) ? true : false), true, true);
	}

	/*------------------------------------ [GangZone készítõ ] ------------------------------------*/
	if(PlayerInfo[playerid][pTeruletSzerkeszt])
	{
		new
			Keys,
			UpDown,
			LeftRight;
		
		GetPlayerKeys(playerid, Keys, UpDown, LeftRight);
		TogglePlayerControllable(playerid, false);
		
		if(LeftRight == KEY_LEFT)
			tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0] -= 8.0;
		else if(LeftRight & KEY_LEFT && Keys & KEY_FIRE)
			tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0] += 8.0;
		else if(LeftRight == KEY_RIGHT)
			tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0] += 8.0;
		else if(LeftRight & KEY_RIGHT && Keys & KEY_FIRE)
			tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0] -= 8.0;
		else if(UpDown == KEY_UP)
			tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1] += 8.0;
		else if(UpDown & KEY_UP && Keys & KEY_FIRE)
			tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1] -= 8.0;
		else if(UpDown == KEY_DOWN)
			tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1] -= 8.0;
		else if(UpDown & KEY_DOWN && Keys & KEY_FIRE)
			tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1] += 8.0;
		else if(Keys & KEY_SECONDARY_ATTACK)
		{
			TogglePlayerControllable(playerid, true);
			TeruletMentesID(PlayerInfo[playerid][pTerulet]);
			SendFormatMessage(playerid, COLOR_MKEK, "%s terület sikeresen létrehozva!", tInfo[PlayerInfo[playerid][pTerulet]][tNev]);
			PlayerInfo[playerid][pTerulet] = 0;
			PlayerInfo[playerid][pTeruletSzerkeszt] = false;
			TeruletFrissites();
		}
		
		GangZoneDestroy(tInfo[PlayerInfo[playerid][pTerulet]][tZone]);
		DestroyDynamicArea(tInfo[PlayerInfo[playerid][pTerulet]][tArea]);
		tInfo[PlayerInfo[playerid][pTerulet]][tZone] = GangZoneCreate(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1]);
		tInfo[PlayerInfo[playerid][pTerulet]][tArea] = CreateDynamicRectangle(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1]);
		
		GangZoneShowForPlayer(playerid, tInfo[ PlayerInfo[playerid][pTerulet] ][tZone], COLOR_TERULET_GREY);
		return true;
	}
    /*------------------------------------ [ CarFlood AntiCheat ] ------------------------------------*/
    
	if(GetPlayerVehicleID(playerid) && !PlayerInfo[playerid][pVehiclePosUpdated])
	{
		new vehicleid = GetPlayerVehicleID(playerid);
		GetVehiclePos(vehicleid, VehiclePos[vehicleid][0], VehiclePos[vehicleid][1], VehiclePos[vehicleid][2]);
		PlayerInfo[playerid][pVehiclePosUpdated] = true;
	}
	
	/*------------------------------------ [ FlyMode ] ------------------------------------*/
	
	if(noclipdata[playerid][cameramode] == CAMERA_MODE_FLY)
	{
		new keys,ud,lr;
		GetPlayerKeys(playerid,keys,ud,lr);

		if(noclipdata[playerid][mode] && (GetTickCount() - noclipdata[playerid][lastmove] > 100))
		{
		    MoveCamera(playerid);
		}
		if(noclipdata[playerid][udold] != ud || noclipdata[playerid][lrold] != lr)
		{
			if((noclipdata[playerid][udold] != 0 || noclipdata[playerid][lrold] != 0) && ud == 0 && lr == 0)
			{
				StopPlayerObject(playerid, noclipdata[playerid][flyobject]);
				noclipdata[playerid][mode]      = 0;
				noclipdata[playerid][accelmul]  = 0.0;
			}
			else
			{
				noclipdata[playerid][mode] = GetMoveDirectionFromKeys(ud, lr);
				MoveCamera(playerid);
			}
		}
		noclipdata[playerid][udold] = ud; noclipdata[playerid][lrold] = lr;
		return false;
	}
	
	/*------------------------------------ [ TextDraw Update ] ------------------------------------*/
	
	if(IsPlayerInAnyVehicle(playerid))
		UpdateVehicleSpeedInfo( playerid );
		
	if(PlayerInfo[playerid][pSzunetel] && !IsPlayerInAnyVehicle(playerid) && GetPlayerSpeed(playerid) > 1)
		CallLocalFunction("OnPlayerPause", "dd", playerid, 0);
		
	if(!IsPlayerInAnyVehicle(playerid) && PlayerInfo[playerid][pJarmuTDMutat]) {
		HideVehicleTextDraw(playerid);
		PlayerInfo[playerid][pJarmuTDMutat] = false;
		PlayerInfo[playerid][pJarmuben] = 0;
	}
	
	if(!PlayerInfo[playerid][pMP3_Megy])
	{
		if(!PlayerInfo[playerid][pJarmuZene] && IsPlayerInAnyVehicle(playerid))
		{
			new cid = JarmuID(GetPlayerVehicleID(playerid), playerid);
			if(cid && vInfo[ cid ][vRadio])
			{
				PlayerTextDrawHide(playerid, Info[playerid][1]);
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, RadioLista[ vInfo[ cid ][vRadio] - 1 ][0]);
			}
				
			PlayerInfo[playerid][pJarmuZene] = true;
		}
		else if(PlayerInfo[playerid][pJarmuZene] && !IsPlayerInAnyVehicle(playerid))
		{
			PlayerInfo[playerid][pJarmuZene] = false;
			PlayerTextDrawShow(playerid, Info[playerid][1]);
			StopAudioStreamForPlayer(playerid);
		}
	}
	/*------------------------------------ [ Fegyver AntiCheat ] ------------------------------------*/
	
	if((PlayerInfo[playerid][pFegyver] != 0) && (GetPlayerWeapon(playerid) == PlayerInfo[playerid][pFegyver]))
	{
		new weapon[2];
		GetPlayerWeaponData(playerid, aWeaponSlotok[PlayerInfo[playerid][pFegyver]], weapon[0], weapon[1]);
		
		if(PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] >= weapon[1])
			PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = weapon[1];
	}
		
	if((PlayerInfo[playerid][pFegyver] != 0) && (GetPlayerWeapon(playerid) != PlayerInfo[playerid][pFegyver]))
	{
		if(PlayerInfo[playerid][pFegyver] > 47)
			PlayerInfo[playerid][pFegyver] = 0;
		
		new wp1, wp2;
		//GetPlayerWeaponData(playerid, slot, weapon, ammo);
		GetPlayerWeaponData(playerid, aWeaponSlotok[PlayerInfo[playerid][pFegyver]], wp1, wp2);

		/*if((PlayerInfo[playerid][pFegyverMuvelet] < gettime()) && wp2 != 0 && wp1 != 0)
		{
			if(wp2 > PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] && (wp2 - PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] > 15))
			{
				new astr[256];
				format(astr, 256, "[AntiCheat]: [%d]%s - Cheat: Fegyver[3] - [%d]%s - K: %d | Sz: %d | D: %d (%s)", playerid, JatekosNev(playerid),
				wp1, aWeaponNames[wp1], wp2, PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]],
				(wp2 - PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]),
				(Admin(playerid, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
				
				AdminUzenetEx(COLOR_WHITE, 1001, astr);
				Log(FILE_CHEAT, astr);
				
				if(!Admin(playerid, FOADMIN_SZINT))
					ServerBan(playerid, 0, "[AC] Fegyver Cheat[3]", NINCS, (!Belepve(playerid) ? true : false), true, true);
			}
			
			//PlayerInfo[playerid][pFegyverek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = ((weapons[0] && (weapons[1] > 0)) ? weapons[0] : 0);
			//PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = ((weapons[0] && (weapons[1] > 0)) ? weapons[1] : 0);
		}*/
		
		//Hogy ki lehessen hajolni
		if(PlayerInfo[playerid][pFegyverMuvelet] < gettime() && !IsPlayerInAnyVehicle(playerid))
		{
			if((wp2 <= 5) && (wp1 > 15))
				PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = 0;

			ResetPlayerWeapons(playerid);
			PlayerInfo[playerid][pFegyver] = 0;
			SetPlayerAttachedWeapon(playerid);
			PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);

			SCM(playerid, COL_MKEK, "A fegyveredet elraktad a zsebedbe!");
		}
	}
	
	if(PlayerInfo[playerid][pDesync])//Szinkronizálás kikapcsolása
		return false;
	
	/*------------------------------------ [ GTA4 Kiesés ] ------------------------------------*/
	
	if( IsPlayerInAnyVehicle( playerid ) && !PlayerInfo[playerid][pSpeedBoots])
	{
		new Float:vehh, v_id;
		v_id = GetPlayerVehicleID( playerid );
		GetVehicleHealth( v_id, vehh );
		if( vehh != vehicleh[ v_id ] )
		{
			CallLocalFunction("OnVehicleHealthChange", "iiff", playerid, v_id, vehicleh[ v_id ], vehh);
			vehicleh[ v_id ] = vehh;
		}
	}
	/*if(GetPVarInt(playerid, "FallFromVeh") == 1)
	{
		new Float:vX, Float:vY, Float:vZ;
		GetPlayerVelocity(playerid ,vX, vY, vZ);
		if(vZ == 0)
		{
			ClearAnimations(playerid);
			GetPlayerHealth(playerid, hp);
			hp -= 30.0;
			SetHealth(playerid, hp);
			if(hp <= 0.0) {
			
				SetPlayerDrunkLevel(playerid, 0);
				
			} else {
			
				SetPlayerDrunkLevel(playerid, 10000);
				SetTimerEx("Refix", 5000, 0, "i", playerid);
				TogglePlayerControllable(playerid, 0);
				LoopingAnim(playerid, "PARACHUTE", "FALL_skyDive_DIE",4,0,0,0,1,0);
			}
			SetPVarInt(playerid, "FallFromVeh", 0);
		}
	}*/
	
    /*if(GetPlayerAnimationIndex(playerid))
    {
        new animlib[32];
        new animname[32];
        new msg[128];
        GetAnimationName(GetPlayerAnimationIndex(playerid),animlib,32,animname,32);
        format(msg, 128, "Running anim: %s %s", animlib, animname);
        SendClientMessage(playerid, 0xFFFFFFFF, msg);
    }*/
	
	if(PlayerInfo[playerid][pSK] && IsPlayerInAnyVehicle(playerid))
		Sebessegkorlat(playerid);
	
	return 1;
}

//Én -> Aki lõ engem -> Sebzés mértéke -> Fegyver
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{

	//AdminUzenet(COLOR_LIGHTRED, 1001, "[Debug]: OPTD: playerid: %d | issuerid: %d | amount: %d | weaponid: %d", playerid, issuerid, amount, weaponid);
	if(PlayerInfo[playerid][pAduty] && !Admin(issuerid,1) && dmoff == 1)
	{
        if(issuerid != INVALID_PLAYER_ID) return SeeKick(issuerid,"Adminszolgálatos sebzése.",NINCS);
	}
	if(PlayerInfo[playerid][pGodmode] == 1)
	{
	    SetPlayerHealth(playerid,150);
	    SetPlayerArmour(playerid,150);
		SetHealth(playerid, 150);
	}
    if(issuerid != INVALID_PLAYER_ID) 
	{
		if(PlayerInfo[playerid][pSpawnVedelem] || PlayerInfo[playerid][pAduty])
			return true;
		
		/*if(PlayerInfo[issuerid][pUzemmod] == 1)
		{
			if(GetPlayerWeapon(issuerid) == 24)
			{
				if( !PlayerToPlayer( playerid, issuerid, 10.0 ) ) //csak adott körzetben menjen
					return false;
				new Float:elet;
				GetPlayerHealth(playerid,elet);
				SetHealth(playerid, elet + amount);
				SetPlayerHealth(playerid,elet + amount);
				TogglePlayerControllable(playerid, false);
				SetTimerEx("Sokk", 20000, 0, "d", playerid);
				LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SCM(playerid, COL_LRED, "Egy rendõr lesokkolt!");
				SCM(issuerid, COL_LRED, "Lesokkoltad!");
			}
			return false;
		}*/
		if(GetPlayerWeapon(issuerid) == 34)
		{
			new Float:Elet;
			GetPlayerHealth(playerid,Elet);
			SetHealth(playerid, (PlayerInfo[playerid][pElet] - 300.0));
			return 1;
		}
		if(issuerid != INVALID_PLAYER_ID)
		{
		
			if(ServerInfo[0][sDMOff] && PlayerInfo[playerid][pAduty] && !Admin(issuerid, 0))
			{
				SCM(issuerid, COL_LRED, "Azért van Adminszolgálatban, hogy segítsen, ne bántsd...");
				SeeKick(issuerid,"Ne lõdd az Adminszolgálatost!",NINCS);
			}
		
			if(PlayerInfo[issuerid][pFegyver] == 9)
			{
				SetHealth(playerid, (PlayerInfo[playerid][pElet] + amount));
				PlayerInfo[issuerid][pFureszelt]++;
				if(PlayerInfo[issuerid][pFureszelt] == 5) //ezt hagyd így xd Martin
														  //nem hagyom úgy "xd" - krisk
				{
					SCM(issuerid, COL_LRED, "Legyen már eszed! IRL se tennél ilyet...");
					SeeKick(issuerid,"Láncfurész helytelen használata",NINCS);
				}
			}
			
			Shooted[playerid][issuerid] = gettime();
			
		}
		else 
		{
		
			if((PlayerInfo[playerid][pPancel] - amount) >= 0)
				SetArmour(playerid, (PlayerInfo[playerid][pPancel] - amount));
			else
			{
				if((PlayerInfo[playerid][pElet] - amount) <= 0)
				{
					SetHealth(playerid, 0.0);
					return true;
				}
				else
					SetHealth(playerid, (PlayerInfo[playerid][pElet] - amount));
			}
		}
	}
    return true;
}

//Én -> Akit lövök -> Sebzés mértéke -> Fegyver
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{

	//AdminUzenet(COLOR_LIGHTRED, 1001, "[Debug]: OPGD: playerid: %d | damagedid: %d | amount: %d | weaponid: %d", playerid, damagedid, amount, weaponid);
	if(damagedid == INVALID_PLAYER_ID || PlayerInfo[damagedid][pAduty] || PlayerInfo[damagedid][pSpawnVedelem] || PlayerInfo[damagedid][pMeghalt] == 1)
		return true;
	if(PlayerInfo[damagedid][pGodmode] == 1)
	{
	    SetPlayerHealth(damagedid,150);
	    SetPlayerArmour(damagedid,150);
		SetHealth(damagedid,150);
	}
	//Kokain hatása alatt -30%-kal kevesebb sebzés
	if(PlayerInfo[playerid][pDrogMuvelet][0] == 2)
		amount -= ((amount * 30) / 100);
	
	if((PlayerInfo[damagedid][pPancel] - amount) >= 0)
		SetArmour(damagedid, (PlayerInfo[damagedid][pPancel] - amount));
	else
	{
		if((PlayerInfo[damagedid][pElet] - amount) <= 0)
		{
			Shooted[damagedid][playerid] = gettime();
			PlayerInfo[damagedid][pScriptShoot][0] = playerid;
			PlayerInfo[damagedid][pScriptShoot][1] = weaponid;
			SetHealth(damagedid, 0.0);
			return true;
		}
		else
			SetHealth(damagedid, (PlayerInfo[damagedid][pElet] - amount));
	}
	if(GetPlayerWeapon(playerid) == 34)
	{
		new Float:Elet;
		GetPlayerHealth(damagedid,Elet);
		SetHealth(damagedid, (PlayerInfo[damagedid][pElet] - 300.0));
		SetPlayerHealth(damagedid,Elet-300.0);
		return 1;
	}
	if(Bejelzett[playerid] == 0)
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		{
		    if(weaponid == 22 || weaponid == 23 || weaponid == 24 || weaponid == 25 || weaponid == 26 || weaponid == 27 || weaponid == 28 || weaponid == 29 || weaponid == 30 || weaponid == 31 || weaponid == 32 || weaponid == 33 || weaponid == 34)
		    {
				new str1[250];
				new zona[MAX_PLAYER_NAME];
				GetPlayer2DZone(playerid, zona, MAX_ZONE_NAME);
				format(str1, sizeof(str1), "%s körzetben lövöldözés történt, ellenõrizd a CCTV kamerákat. (/cctv)",zona);
				FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LSPD, str1);
				FrakcioUzenet(COLOR_YELLOW, FRAKCIO_KATONA, str1);
				Bejelzett[playerid] = 60;
			}
		}
	}
	return true;
}

funkcio OnPlayerHealthChange(playerid, Float:newhealth, Float:oldhealth)
{
	if(PlayerInfo[playerid][pSpawnVedelem] && newhealth < MAX_HP)
		SetHealth(playerid, MAX_HP);
	return true;
}

funkcio OnVehicleHealthChange( playerid, vehicleid, Float:regielet, Float:ujelet )
{
	new
		Float:jatekoselet,
		Float:Elet,
		Float:kulonbseg = (regielet - ujelet);
	
	/*if((regielet - ujelet) >= 150 && (ujelet < regielet))//Cuna ez itt szar volt, javítottam
	{
			new
				Float:x,
				Float:y,
				Float:z,
				Float:a;
				
			GetVehiclePos(vehicleid, x, y, z);
			GetVehicleZAngle(vehicleid, a);
			SetPlayerPos(playerid, x, y, z+2);
			GetVehicleVelocity(vehicleid, x, y, z);
			SetPlayerVelocity(playerid, velX[playerid], velY[playerid], z+1);
			//SetPlayerDrunkLevel(playerid, 10000);
			SetTimerEx("FallSet", 500, 0, "i", playerid);
	}
	else*/
	if(regielet > ujelet && (regielet - ujelet) > (UtkozesErzekenyseg * 2.8))
	{
		//GetPlayerHealth(playerid, jatekoselet);
		jatekoselet = PlayerInfo[playerid][pElet];
		
		if(GetPlayerState(playerid) == 2)
		{
			if(PlayerInfo[playerid][pOv])
				Elet = jatekoselet - ((kulonbseg / UtkozesErzekenyseg) / 2);
			else
				Elet = jatekoselet - (kulonbseg / UtkozesErzekenyseg);
		}
			
		else if(GetPlayerState(playerid) == 3)
		{
			if(PlayerInfo[playerid][pOv])
				Elet = jatekoselet - (kulonbseg / ((UtkozesErzekenyseg + 3) / 2));
			else
				Elet = jatekoselet - (kulonbseg / (UtkozesErzekenyseg + 3));
		}
		
		SetHealth(playerid, Elet);
		
		/*if(!PlayerInfo[playerid][pOv])
			FadePlayerScreen(playerid, COLOR_BLACK, 25);*/
	}
	return true;
}

funkcio FallSet( playerid ) return SetPVarInt(playerid, "FallFromVeh", 1);
funkcio Refix( playerid )
{
	SetTimerEx("Controllable",1800,0,"i",playerid);
	SetTimerEx("DrunkClean",3000,0,"i",playerid);
	return true;
}

funkcio Controllable(playerid)
{
	TogglePlayerControllable(playerid, 1);
	ApplyPlayerAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 0, 0, 0, 0, 1);
	return true;
}
funkcio DrunkClean(playerid) return SetPlayerDrunkLevel(playerid,0);

funkcio Restart(idx)
{
	#if NPC_KELL == 1
		new i = -1;
		for(;++i < 100;)
		{
			if(BotInformacio[i][botID])
				FCNPC_Destroy(BotInformacio[i][botID]);
		}
	#endif
	
	//mysql_close();
	SendClientMessage(idx, COLOR_MKEK, "[Szerver]: Mentés lefutott -> Újraindítás folyamatban! (Éles szerver esetén UCP-n indítsd újra!)");
	
	#if defined HAZI_SZERVER
		SendRconCommand("gmx");
	#endif
	
	return true;
}

//Ne írd át! Ha mentés kell, akkor az enumban add meg - Martin
stock vUpdate(id, ...)
{
	if(!vInfo[id][vInsert])
		return true;
	
	new idx;
	for(;++idx < numargs();)
		vUpdates[id][vehUpdate:(getarg(idx))] = true;
	
	return true;
}

//Terhelés elosztás -> Frakció - Martin
stock FkUpdate(id, ...)
{
	new idx;
	for(;++idx < numargs();)
		FUpdates[id][fk_Update:(getarg(idx))] = true;
	
	//FInfo[id][fKellUpdates] = true;
	return true;
}

stock JarmuToID(const vname[])
{
	for(new i = 0; i < 211; i++)
	{
		if(!strfind(VehicleNames[i], vname, true))
			return i + 400;
	}
	return -1;
}

stock Belepve(playerid, bool:online = true)
{
	if(online && !IsPlayerConnected(playerid))
		return false;
	if(!PlayerInfo[playerid][pbelepve])
		return false;

	return true;
}

funkcio BanTorles(playerid)
{
	new nums, fields;
	cache_get_data(nums, fields);
	
	if(nums)
	{
		new get[3][64], form[128];
		cache_get_field_content(0, "Cim", 		get[0]);
		cache_get_field_content(0, "Banolta", 	get[1]);
		cache_get_field_content(0, "Oka", 		get[2]);
		
		if(!strcmp(PlayerInfo[playerid][pNev], get[1]) || Admin(playerid, FOADMIN_SZINT))
		{
			AdminLog("[Unban] %s feloldott egy tiltást! Név/IP: %s | Tiltó: %s | Oka: %s", JatekosNev(playerid, false, true), get[0], get[1], get[2]);
			AdminUzenet(COLOR_LIGHTRED, 1, "%s feloldott egy tiltást! Név/IP: %s | Tiltó: %s", JatekosNev(playerid, false, true), get[0], get[1]);
			
			mysql_tquery(sql_ID, (format(form, sizeof(form), "DELETE FROM `"#MYSQL_BAN_TABLA"` WHERE Cim = '%s'", get[0]), form), "", "");
			SendFormatMessage(playerid, COLOR_MKEK, "[Unban]: Tiltás feloldva! Név/IP: %s | Tiltó: %s | Oka: %s", get[0], get[1], get[2]);
		} else
			SendFormatMessage(playerid, COLOR_WHITE, "[Unban]: Ezt a tiltást nem odhatod fel mivel "#COL_MKEK"%s"#COL_FEHER" tiltota nem pedig te!", get[1]);
		
	} else {
		SendClientMessage(playerid, COLOR_MKEK, "[Unban]: Nincs találat az adatbázisban!");
	}
	
	return true;
}

funkcio GlobalNevValtas( const nev[], jatekos, playerid )
{
	new nums, fields;
	cache_get_data(nums, fields);
	
	if(!nums)
	{
		AdminUzenet(COLOR_LIGHTRED, 1, "%s leváltotta %s nevét erre: %s (uID: %d)", JatekosNev(playerid), JatekosNev(jatekos), nev, PlayerInfo[jatekos][pID]);
		nformat(nevvaltasstr,128,"Admin: %s leváltotta %s nevét %s -re",JatekosNev(playerid),PlayerInfo[jatekos][pNev],nev);
		Log(FILE_NEVVALTAS, nevvaltasstr);
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery( "INSERT INTO `nevvaltas` (KID,AID,ANev,Regi,Uj,Elfogadva,Elbiralva,Datum) VALUES('%d','%d','%s','%s','%s','i','i','%d-%02d-%02d %02d:%02d')", SQLID(jatekos),AccountID[playerid],UserControl[playerid][uUserName],PlayerInfo[jatekos][pNev],nev,PosExt(date), time[0], time[1]);
		strmid(PlayerInfo[jatekos][pNev], nev, 0, strlen(nev), MAX_PLAYER_NAME);
		SetPlayerName(jatekos, nev);
		
		nformat(query, 128, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET nev = '%s' WHERE id = '%d'", nev, PlayerInfo[jatekos][pID]);
		mysql_tquery(sql_ID, query, "", "");
		
		
		
		Adat_Update( jatekos, ADAT_MINDEN );
		
		
		
		SendFormatMessage(jatekos, COLOR_MKEK, "[Névváltás]: Admin %s leváltotta a nevedet erre: %s (uID: %d)", JatekosNev(playerid), PlayerInfo[jatekos][pNev], PlayerInfo[jatekos][pID]);
	} else {
		SendFormatMessage(playerid, COLOR_MKEK, "[Névváltás]: A választott név ("#COL_FEHER"%s"#COL_MKEK") már szerepel az adatbázisban! Válassz másikat!",nev);
	}
	
	return true;
}

funkcio BanCheck( playerid, muvelet )
{
	new nums, fields;
	cache_get_data(nums, fields);
	
	if(nums)
	{
		new ido, banolta[MAX_PLAYER_NAME], oka[50], mikor[16], str[64];
		mysql_get_int(0, "UIdo", ido);
		cache_get_field_content(0, "Banolta", banolta);
		cache_get_field_content(0, "Oka", oka);
		cache_get_field_content(0, "Mikor", mikor);
		
		new mikor2 = floatround((0.0 + ido - gettime()) / 3600.0, floatround_round);
		if((mikor2 > 0) || (ido == 0))
		{
			PlayerInfo[playerid][pTiltvaVan] = true;
		
			SetSpawnInfo(playerid, 0, 1, 175.2608, -150.5269, 1.5781, 0, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);
			
			if(ido)
			{
				new ev, ho, nap, ora, perc, mperc;
				uDate(ido, ev, ho, nap, ora, perc, mperc, 1);
				format(str, sizeof(str), "%d.%02d.%02d %02d:%02d", ev, ho, nap, ora, perc);
			} else 
				format(str, sizeof(str), "Soha (Örök ban)");
			
			nformat(uze, 512, ""#COL_FEHER"Oka:"#COL_MKEK" %s\n"#COL_FEHER"Banolt:"#COL_MKEK" %s\n"#COL_FEHER"Lejár:"#COL_MKEK" %s\n"#COL_FEHER"Idõpont:"#COL_MKEK" %s", oka, banolta, str, mikor);
			ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""#COL_MKEK"Figyelem!"#COL_SZURKE" Ki vagy tiltva!", uze, "OK", "");
			Kick(playerid);
			
			return false;
		
		} else {
		
			nformat(que, 256, "DELETE FROM `"#MYSQL_BAN_TABLA"` WHERE Cim = '%s' OR Cim = '%s'", JatekosNev(playerid), JatekosIP(playerid));
			mysql_tquery(sql_ID, que, "", "");
		}
	}
	
	//Melyik karakterét töltse be a ban check-et követõen
	if(muvelet != 0)
	{
		if(muvelet == 1 || muvelet == 2)
		{
			nformat(queryc, 256, "SELECT * FROM `"#MYSQL_JATEKOS_TABLA"` WHERE id = '%d'", UserControl[playerid][uKarakter][muvelet - 1]);
			mysql_tquery(sql_ID, queryc, "AdatBetoltes", "i", playerid);
		}
		return true;
	}
	
	TextDrawBetoltes(playerid);
	
	#if ACCOUNT_KEZELES == 1
		LoginDrawBetoltes(playerid);
	#endif
	
	if(ServerInfo[0][sRestart] && !IsScripter(playerid))
		ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Figyelem!", "Jelenleg restart folyik a szerveren!\nKérlek várj türelemesen, míg a rendszer helyreállítódik!\nMegértésedet köszönjük!", "OK", "");
	else
	{
		#if ACCOUNT_KEZELES == 0
			nformat(queryc, 256, "SELECT * FROM `"#MYSQL_JATEKOS_TABLA"` WHERE nev = '%s'", JatekosNev(playerid));
			mysql_tquery(sql_ID, queryc, "CheckPlayer", "i", playerid);
		#else
		
			new i = -1;
			for(;++i < 8;)
				PlayerTextDrawShow(playerid, LoginDraw[playerid][i]);
			
			SelectTextDraw(playerid, 0xF7C25EAA);
			
			i = NINCS;
			for(;++i < 15;)
				SendClientMessage(playerid, COLOR_WHITE, "");
			
			SendClientMessage(playerid, COLOR_WHITE, "====================== [ "#COL_VKEK"Információ"#COL_FEHER" ] ======================");
			SendClientMessage(playerid, COLOR_WHITE, "Üdvözöllek kedves játékos! Ha még nincs regisztált felhasználód (Accountod) a");
			SendClientMessage(playerid, COLOR_WHITE, ""#COL_MKEK"http://seerpg.eu/ucp"#COL_FEHER" oldalon regisztrálhatsz egyet. Weboldalunk: "#COL_MKEK"http://seerpg.eu/");
			
			i = NINCS;
			for(;++i < 7;)
				SendClientMessage(playerid, COLOR_WHITE, "");
		#endif
	}
	return true;
}

stock FrakcioUzenet(szin = COLOR_YELLOW, fk, str[], rang = 1)
{
	foreach(Player, i)
	{
		if(!Belepve(i)) continue;
		if(PlayerInfo[i][pFrakcio] == fk && PlayerInfo[i][prang] >= rang)
			SendClientMessage(i, szin, str);
	}
}

stock OnlineTagok(frakcio, bool:duty = false)
{
	new db;
	foreach(Player, i)
	{
		if(!Belepve(i) || PlayerInfo[i][pAfkIdo] > 180) continue;
		if(duty && !PlayerInfo[i][pDuty]) continue;
		if(PlayerInfo[i][pFrakcio] == frakcio)
			db++;
	}
	return db;
}

stock Float:floatrand(Float:min, Float:max)
{
	new imin = floatround(min);
	return floatdiv(float(random((floatround(max)-imin)*100)+(imin*100)),100.0);
}

//by Martin
stock TuzGeneral( bool:direkt = false )
{
	if(!ServerInfo[0][sTuzVan] || direkt) // új tûz generálása
	{
		new tagok = OnlineTagok(FRAKCIO_LSFD, true);
		if(tagok >= TUZ_MINTAG)
		{
			new Iterator:Tuzek<TUZ_MAX_POZ>;
			new x = -1, num = 0;
			
			for(;++x < TUZ_MAX_POZ;)
			{
				if(TuzPoz[x][tPoz][0] != 0.0)
				{
					Iter_Add(Tuzek, x);
					num++;
				}
			}
			
			if(!num) return true; //ha nincs betöltve tûz
			new str[128], helyek;
			
			if(tagok > 5) helyek = TUZ_MAX;
			else helyek = ( random(TUZ_MAX) +1 );
			if(helyek > num) helyek = 1;
			if(tagok > 5)
			{
				tagok = 5;
			}//NE LEGYEN MÁÁÁN SOK PÍZ
			
			if(direkt) ServerInfo[0][sTuzPenz] = (((300 * (helyek * tagok * 100)) / 3)/235);//ha direkt indított ne kapjanak annyit..
			else ServerInfo[0][sTuzPenz] = ((300 * (helyek * tagok * 100))/235);
			
			if(ServerInfo[0][sTuzPenz] > 3000)
			{
				ServerInfo[0][sTuzPenz]=3000;
			}
			
			for(new t = 0; t < helyek; t++)
			{
				new poz = Iter_Random(Tuzek);
				Iter_Remove(Tuzek, poz);
				
				Tuz[t][tuzAktiv] = true;

				Tuz[t][tPoz][0] = TuzPoz[poz][tPoz][0];
				Tuz[t][tPoz][1] = TuzPoz[poz][tPoz][1];
				Tuz[t][tPoz][2] = TuzPoz[poz][tPoz][2];

				Tuz[t][tMaxHP] = 50 + (tagok * 80);
				Tuz[t][tHP] = Tuz[t][tMaxHP];

				format(str, 128, "[ %d / %d ]", Tuz[t][tHP], Tuz[t][tMaxHP]);
				Tuz[t][tFelirat] = CreateDynamic3DTextLabel(str, COLOR_MKEK, TuzPoz[ poz ][tPoz][0], TuzPoz[ poz ][tPoz][1],TuzPoz[ poz ][tPoz][2] + 1.0, 20, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);

				for(new o = 0; o < TUZ_OBJECT; o++)
					Tuz[t][tObject][o] = CreateDynamicObject(18691, TuzPoz[poz][tPoz][0] + floatrand(-TUZ_TAV, TUZ_TAV), TuzPoz[poz][tPoz][1] + floatrand(-TUZ_TAV, TUZ_TAV), TuzPoz[poz][tPoz][2] - 2.0, 0.0, 0.0, 0.0, .streamdistance = 200.0);

				Tuz[t][tMap] = CreateDynamicMapIcon(TuzPoz[poz][tPoz][0], TuzPoz[poz][tPoz][1],TuzPoz[poz][tPoz][2], 20, 0, NINCS, NINCS, NINCS, 6000.0);
				Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_STYLE, MAPICON_GLOBAL);
				if(Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, NINCS))
					Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, NINCS);

				printf("Szerver: Tûz gyújtása! ID: %d", poz);
			}

			foreach(Player, idx)
			{
				if(!Belepve(idx)) continue;
				if(PlayerInfo[idx][pFrakcio] == FRAKCIO_LSFD)
				{
					SendClientMessage(idx, COLOR_LIGHTRED, "===================== [ "#COL_FEHER"TÛZRIADÓ"#COL_LRED" ] =====================");
					SendClientMessage(idx, COLOR_YELLOW, "Koordináták betáplálva a GPS-be, oltsátok el minél hamarabb!");
					
					for(new t = 0; t < helyek; t++)
					{
						if(Tuz[t][tuzAktiv] && !Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, idx))
							Streamer_AppendArrayData( STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, idx );
					}
					
					Streamer_Update(idx);
				}
			}

			ServerInfo[0][sTuzVan] = true;
			ServerInfo[0][sTuzIdo][0] = 900; //15 percig olthatják el, különben sikertelen
			ServerInfo[0][sTuzIdo][1] = 0;
		}
	}
	
	return true;
}

funkcio FizetesHang(playerid, ertek)
{
	switch(ertek)
	{
		case 1:
		{
			SetTimerEx("FizetesHang", 4000, false, "ii", playerid, 2);
			PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		}
		case 2:
			PlayerPlaySound(playerid, 1069, 0.0, 0.0, 0.0);
	}
}

stock TuzMuvelet( muvelet = 1, idx = NINCS )
{
	if(!fexist(LSQL_ADATBAZIS))
		return print("Szerver: Kritikus hiba történt a TuzMuvelet funkcióban! Oka: Hiányzó adatbázis!");
		
	new DB:TuzDB = db_open(LSQL_ADATBAZIS), aquery[128];

	switch( muvelet )
	{
		case 1: //betöltés
		{
			print("Szerver: Tûz pozíciók betöltése!");
			new DBResult:syn = db_query(TuzDB, "SELECT * FROM `"#LSQL_TUZ_TABLA"`");
			new i = NINCS, num = db_num_rows(syn), id, pos[128];
			if(num)
			{
				for(;++i < num;)
				{
					db_get_int(syn, "Id", id);
					db_get_str(syn, "Pos", pos, 128);
					sscanf(pos, "p<,>fff", PosExt(TuzPoz[id][tPoz]));
					
					if(TuzPoz[id][tPoz][0] != 0.0)
					{
						TuzPoz[id][tMapID] = CreateDynamicMapIcon(PosExt(TuzPoz[id][tPoz]), 36, 0, NINCS, NINCS, NINCS, TUZ_MUTAT_TAV);
						Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_STYLE, 3);
						if(Streamer_IsInArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS))
							Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS);
					}
					
					db_next_row(syn);
				}
			}
			
			printf("Szerver: %d tûz pozíció sikeresen betöltve!", num);
			db_free_result(syn);
		}
		case 2: //mentés
		{	
			format(aquery, 128, "INSERT INTO `"#LSQL_TUZ_TABLA"` (Id, pos) VALUES ('%d', '%f,%f,%f')", idx, PosExt(TuzPoz[idx][tPoz]));
			db_free_result(db_query(TuzDB, aquery));
		}
		case 3: //törlés
		{
			format(aquery, 128, "DELETE FROM `"#LSQL_TUZ_TABLA"` WHERE Id = '%d'", idx);
			db_free_result(db_query(TuzDB, aquery));
		}
		case 4: //tûz stop
		{
			for(new t = 0; t < TUZ_MAX; t++)
			{
				if(Tuz[t][tuzAktiv])
				{
					DestroyDynamic3DTextLabel(Tuz[t][tFelirat]);
					DestroyDynamicMapIcon(Tuz[t][tMap]);

					for(new o = 0; o < TUZ_OBJECT; o++)
						DestroyDynamicObject(Tuz[t][tObject][o]);

					Tuz[t][tuzAktiv] = false;
				}
			}

			ServerInfo[0][sTuzIdo][1] = Rand(TUZ_IDO_MIN, TUZ_IDO_MAX);
			ServerInfo[0][sTuzVan] = false;
			if(idx != NINCS && muvelet == 4)
			{
				nformat(str, 128, "<< %s leállította a tûz akciót! (Pénz nem kerül levonásra) >>", JatekosNev(idx));
				FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LSFD, str);
			}
		}
	}
	
	db_close(TuzDB);
	return true;
}

funkcio AkaMuvelet(pid, id, muvelet)
{
	new nums, fields, str[256], nev[MAX_PLAYER_NAME], sql[128];
	cache_get_data(nums, fields);
	
	switch(muvelet)
	{
		case 1:
		{
			if(nums) 
			{
				new i = NINCS, uid, bool:val;
				for(;++i < nums;)
				{
					//mysql_get_string(i, "Nev", nev);
					mysql_get_int(i, "Uid", uid);
					/*if(strcmp(nev, JatekosNev(pid)))
					{
						if(!szam) format(str, sizeof(str), "%s", nev);
						else format(str, sizeof(str), "%s, %s", str, nev);
						szam++;
					}*/
					if(!val)
					{
						if(PlayerInfo[pid][pID] == uid)
						{
							val = true;
							format(sql, sizeof(sql), "UPDATE `"#MYSQL_AKA_SYSTEM"` SET Ido='%d' WHERE Uid='%d'", gettime(), PlayerInfo[pid][pID]);
						}
						else
							format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_AKA_SYSTEM"` (Uid, Nev, IP, Ido) VALUES('%d', '%s', '%s', '%d')", PlayerInfo[pid][pID], PlayerInfo[pid][pNev], JatekosIP(pid), gettime());
					}
				}
			} else {
				format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_AKA_SYSTEM"` (Uid, Nev, IP, Ido) VALUES('%d', '%s', '%s', '%d')", PlayerInfo[pid][pID], PlayerInfo[pid][pNev], JatekosIP(pid), gettime());
			}
			
			mysql_tquery(sql_ID, sql, "", "");
			
			//if(!strlen(str)) format(str, sizeof(str), "Nincs");
			//format(str, sizeof(str), "%s belépett! Aka: %s", JatekosNev(pid), str);
			//AdminUzenetEx(COLOR_LIGHTRED,1, str);
		}
		case 2:
		{
			str[0] = EOS;
			if(nums)
			{
				new i = -1, szam;
				for(;++i < nums;)
				{
					mysql_get_string(i, "Nev", nev);
					if(!egyezik(nev, JatekosNev(pid)))
					{
						if(!szam) format(str, sizeof(str), "%s", nev);
						else format(str, sizeof(str), "%s, %s", str, nev);
						szam++;
					}
				}
			} else {
				format(str, sizeof(str), "Nincs");
			}
			
			if(!strlen(str)) format(str, sizeof(str), "Nincs");
			format(str, sizeof(str), "%s aka: %s", JatekosNev(pid), str);
			SendClientMessage(id, COLOR_MKEK, str);
		}
	}
	return true;
}

funkcio AdatBetoltes( playerid )
{
	if(PlayerInfo[playerid][pTiltvaVan])
		return false;
	
	new nums, fields, str[128];
	cache_get_data(nums, fields);
	if(nums)
	{
		new toltenyek[64], fegyverek[64];
		mysql_get_string(0, "nev", PlayerInfo[playerid][pNev]);
	    mysql_get_int(0, "id", PlayerInfo[playerid][pID]);
		//mysql_get_string(0, "pAlnev", PlayerInfo[playerid][pAlnev]);
		//pOnline
		//pUtoljara
		mysql_get_int(0, "penz", PlayerInfo[playerid][ppenz]);
	    mysql_get_int(0, "skin", PlayerInfo[playerid][pskin]);
	    mysql_get_int(0, "szint", PlayerInfo[playerid][pjatekosszint]);
        mysql_get_int(0, "interior", PlayerInfo[playerid][pinterior]);
        mysql_get_int(0, "vw", PlayerInfo[playerid][pvirtualworld]);
        mysql_get_int(0, "jail", PlayerInfo[playerid][pjail]);
		mysql_get_int(0, "pJailIdo", PlayerInfo[playerid][pJailIdo]);
        //mysql_get_int(0, "halal", PlayerInfo[playerid][phalal]);
        mysql_get_int(0, "admin", ALogIn[playerid][0]);
		mysql_get_int(0, "pAS", PlayerInfo[playerid][pAS]);
		mysql_get_string(0, "pDefense", PlayerInfo[playerid][pDefense]);
        mysql_get_int(0, "bankszamla", PlayerInfo[playerid][pBsz]);
		mysql_get_int(0, "bankszamlaegyenleg", PlayerInfo[playerid][pBszPenz]);
        mysql_get_int(0, "bankszamlapin", PlayerInfo[playerid][pBszPin]);
        mysql_get_float(0, "posx", PlayerInfo[playerid][posx]);
        mysql_get_float(0, "posy", PlayerInfo[playerid][posy]);
        mysql_get_float(0, "posz", PlayerInfo[playerid][posz]);
        mysql_get_float(0, "angle", PlayerInfo[playerid][pangle]);
		mysql_get_float(0, "pPancel", PlayerInfo[playerid][pPancel]);
        mysql_get_int(0, "regisztracio", PlayerInfo[playerid][pregisztracio]);
		mysql_get_int(0, "pfrakcio", PlayerInfo[playerid][pFrakcio]);
		mysql_get_int(0, "prang", PlayerInfo[playerid][prang]);
		mysql_get_int(0, "ptelefonszam", PlayerInfo[playerid][ptelefonszam]);
		mysql_get_int(0, "pszintlepesperc", PlayerInfo[playerid][pszintlepesperc]);
		mysql_get_int(0, "pszintlepesora", PlayerInfo[playerid][pszintlepesora]);
		mysql_get_int(0, "pszintlepeshez", PlayerInfo[playerid][pszintlepeskell]);
		mysql_get_int(0, "pHitman", PlayerInfo[playerid][pHitman]);
		mysql_get_int(0, "pLeader", PlayerInfo[playerid][pLeader]);
		mysql_get_string(0, "pAdminAlnev", PlayerInfo[playerid][pAdminAlnev]);
		
		mysql_get_string(0, "pHitmanNev", PlayerInfo[playerid][pHitmanNev]);
		
		mysql_get_int(0, "pSWAT", PlayerInfo[playerid][pSWAT]);
		mysql_get_int(0, "pSWATRang", PlayerInfo[playerid][pSWATRang]);
		mysql_get_int(0, "pJarmuKolcson", PlayerInfo[playerid][pJarmuKolcson]);
		
		mysql_get_int(0, "pBox", PlayerInfo[playerid][pBox]);
		mysql_get_int(0, "pElbow", PlayerInfo[playerid][pElbow]);
		mysql_get_int(0, "pKungfu", PlayerInfo[playerid][pKungfu]);
		mysql_get_int(0, "pKneehead", PlayerInfo[playerid][pKneehead]);
		mysql_get_int(0, "pGrabkick", PlayerInfo[playerid][pGrabkick]);
		
		mysql_get_int(0, "pSM", PlayerInfo[playerid][pSM]);
		mysql_get_int(0, "pSMrang", PlayerInfo[playerid][pSMrang]);
		mysql_get_int(0, "pCsipogo", PlayerInfo[playerid][pCsipogo]);
		mysql_get_int(0, "pKanna", PlayerInfo[playerid][pKanna]);
		mysql_get_int(0, "pKannaBenzin", PlayerInfo[playerid][pKannaBenzin]);
		
		mysql_get_int(0, "pSKV", PlayerInfo[playerid][pSKV]);
		mysql_get_int(0, "pSKVrang", PlayerInfo[playerid][pSKVrang]);

		
		if(PlayerInfo[playerid][pszintlepeskell] <= 0)
			PlayerInfo[playerid][pszintlepeskell] = PlayerInfo[playerid][pjatekosszint] * 4;
			
		mysql_get_int(0, "pnem", PlayerInfo[playerid][pnem]);
		mysql_get_int(0, "peletkor", PlayerInfo[playerid][peletkor]);
		mysql_get_int(0, "pszarmazas", PlayerInfo[playerid][pszarmazas]);
		//paktivalva
		mysql_get_int(0, "phaz", PlayerInfo[playerid][phaz]);
		
		fegyverek[0] = EOS;
		mysql_get_string(0, "pFegyverek", fegyverek);
		sscanf(fegyverek, "p<,>a<d>[13]", PlayerInfo[playerid][pFegyverek]);
		
		fegyverek[0] = EOS;
		mysql_get_string(0, "pToltenyek", toltenyek);
		sscanf(toltenyek, "p<,>a<d>[13]", PlayerInfo[playerid][pToltenyek]);
		
		//Mikor - int
		//IP - str
		str[0] = EOS;
		mysql_get_string(0, "pKorozes", str);
		sscanf(str, "p<|>is[24]s[24]s[64]", Korozes[playerid][krSzint], Korozes[playerid][krNev], Korozes[playerid][krKiadta], Korozes[playerid][krOka]);
		
		mysql_get_int(0, "pPremiumPont", PlayerInfo[playerid][pPremiumPont]);
		mysql_get_int(0, "pPremiumIdo", PlayerInfo[playerid][pPremiumIdo]);
		mysql_get_int(0, "pPremiumCsomag", PlayerInfo[playerid][pPremiumCsomag]);
		mysql_get_int(0, "pVas", PlayerInfo[playerid][pVas]);
		mysql_get_int(0, "pMaterial", PlayerInfo[playerid][pMaterial]);
		mysql_get_int(0, "pHeroin", PlayerInfo[playerid][pHeroin]);
		mysql_get_int(0, "pKokain", PlayerInfo[playerid][pKokain]);
		mysql_get_int(0, "pMarihuana", PlayerInfo[playerid][pMarihuana]);//sorrendben nem itt van
		mysql_get_int(0, "pFegyverSkill", PlayerInfo[playerid][pFegyverSkill]);
		mysql_get_int(0, "pFizetesIdo", PlayerInfo[playerid][pFizetesIdo]);
		
		if(PlayerInfo[playerid][pFizetesIdo] <= 0)
			PlayerInfo[playerid][pFizetesIdo] = FIZETES_IDO;
		
		mysql_get_int(0, "pFizetes", PlayerInfo[playerid][pFizetes]);
		//pTehetseg
		mysql_get_int(0, "pJatszottOra", PlayerInfo[playerid][pJatszottOra]);
		mysql_get_int(0, "pGPS", PlayerInfo[playerid][pGPSV]);
		mysql_get_int(0, "pKotszer", PlayerInfo[playerid][pKotszer]);
		mysql_get_int(0, "pTelefonPenz", PlayerInfo[playerid][pTelefonPenz]);
		mysql_get_int(0, "pMunka1", PlayerInfo[playerid][pMunka1]);
		mysql_get_int(0, "pMunka2", PlayerInfo[playerid][pMunka2]);
		mysql_get_int(0, "pTelefonKonyv", PlayerInfo[playerid][pTelefonKonyv]);
		mysql_get_int(0, "pExpLegal", PlayerInfo[playerid][pExp][1]);
		mysql_get_int(0, "pExpIllegal", PlayerInfo[playerid][pExp][3]);
		mysql_get_int(0, "pDutySkin", PlayerInfo[playerid][pDutySkin]);
		
		mysql_get_int(0, "pKereskedo", PlayerInfo[playerid][pKereskedo]);
		mysql_get_int(0, "pHifi", PlayerInfo[playerid][pHifi]);
		mysql_get_int(0, "pLampa", PlayerInfo[playerid][pLampa]);		
		mysql_get_int(0, "pHal", PlayerInfo[playerid][pHal]);
		mysql_get_int(0, "pClub", PlayerInfo[playerid][pClub]);
		mysql_get_int(0, "pFrakcioTiltas", PlayerInfo[playerid][pFrakcioTiltas]);
		mysql_get_int(0, "pReportTiltas", PlayerInfo[playerid][pReportTiltas]);
		mysql_get_int(0, "pFegyverTiltas", PlayerInfo[playerid][pFegyverTiltas]);
		mysql_get_int(0, "pAutoTiltas", PlayerInfo[playerid][pAutoTiltas]);
		mysql_get_int(0, "pASTiltas", PlayerInfo[playerid][pASTiltas]);
		mysql_get_int(0, "pLottounix", PlayerInfo[playerid][pLottounix]);
		
		str[0] = EOS;
		mysql_get_string(0, "pEngedely", str);
		sscanf(str, "p<,>a<d>["#MAX_ENGEDELY"]", PlayerInfo[playerid][pEngedely]);
	
		mysql_get_int(0, "pHatizsak", PlayerInfo[playerid][pHatizsak]);
		mysql_get_int(0, "pSzendvics", PlayerInfo[playerid][pSzendvics]);
		
		mysql_get_int(0, "pMaszk", PlayerInfo[playerid][pMaszk]);
		
		str[0] = EOS;
		mysql_get_string(0, "BortonInfo", str);
		sscanf(str, "p<|>s["#MAX_PLAYER_NAME"]s[64]", PlayerInfo[playerid][pJailAdta], PlayerInfo[playerid][pJailOk]);
		
		str[0] = EOS;
		mysql_get_string(0, "pBoltCucc", str);
		sscanf(str, "p<,>a<d>[50]", PlayerInfo[playerid][pBoltCucc]);
		
		mysql_get_int(0, "pSzemelyi", PlayerInfo[playerid][pSzemelyi]);
		mysql_get_int(0, "pValaszok", PlayerInfo[playerid][pValaszok]);
		mysql_get_int(0, "pLakcimkartya", PlayerInfo[playerid][pLakcimkartya]);
		
		//PlayerInfo[kinek][pDrogAnyag]
		str[0] = EOS;
		mysql_get_string(0, "pDrogAnyag", str);
		sscanf(str, "p<,>a<d>[3]", PlayerInfo[playerid][pDrogAnyag]);
		
		str[0]= EOS;
		mysql_get_string(0,"Divat_Sapka",str);
		sscanf(str, "p<,>dfffffffffd",
		DivatInfo[SLOT_SAPKA][playerid][dVan],DivatInfo[SLOT_SAPKA][playerid][dPosX],DivatInfo[SLOT_SAPKA][playerid][dPosY],DivatInfo[SLOT_SAPKA][playerid][dPosZ],
		DivatInfo[SLOT_SAPKA][playerid][dRotX],DivatInfo[SLOT_SAPKA][playerid][dRotY],DivatInfo[SLOT_SAPKA][playerid][dRotZ],DivatInfo[SLOT_SAPKA][playerid][dScaleX],
		DivatInfo[SLOT_SAPKA][playerid][dScaleY],DivatInfo[SLOT_SAPKA][playerid][dScaleZ],DivatInfo[SLOT_SAPKA][playerid][dmodelid]);
		
		str[0]= EOS;
		mysql_get_string(0,"Divat_Szemuveg",str);
		sscanf(str, "p<,>dfffffffffd",
		DivatInfo[SLOT_SZEMUVEG][playerid][dVan],DivatInfo[SLOT_SZEMUVEG][playerid][dPosX],DivatInfo[SLOT_SZEMUVEG][playerid][dPosY],DivatInfo[SLOT_SZEMUVEG][playerid][dPosZ],
		DivatInfo[SLOT_SZEMUVEG][playerid][dRotX],DivatInfo[SLOT_SZEMUVEG][playerid][dRotY],DivatInfo[SLOT_SZEMUVEG][playerid][dRotZ],DivatInfo[SLOT_SZEMUVEG][playerid][dScaleX],
		DivatInfo[SLOT_SZEMUVEG][playerid][dScaleY],DivatInfo[SLOT_SZEMUVEG][playerid][dScaleZ],DivatInfo[SLOT_SZEMUVEG][playerid][dmodelid]);
		
		str[0]= EOS;
		mysql_get_string(0,"Divat_Karora",str);
		sscanf(str, "p<,>dfffffffffd",
		DivatInfo[SLOT_KARORA][playerid][dVan],DivatInfo[SLOT_KARORA][playerid][dPosX],DivatInfo[SLOT_KARORA][playerid][dPosY],DivatInfo[SLOT_KARORA][playerid][dPosZ],
		DivatInfo[SLOT_KARORA][playerid][dRotX],DivatInfo[SLOT_KARORA][playerid][dRotY],DivatInfo[SLOT_KARORA][playerid][dRotZ],DivatInfo[SLOT_KARORA][playerid][dScaleX],
		DivatInfo[SLOT_KARORA][playerid][dScaleY],DivatInfo[SLOT_KARORA][playerid][dScaleZ],DivatInfo[SLOT_KARORA][playerid][dmodelid]);
		
		
		str[0]= EOS;
		mysql_get_string(0,"Divat_Maszk",str);
		sscanf(str, "p<,>dfffffffffd",
		DivatInfo[SLOT_MASZK][playerid][dVan],DivatInfo[SLOT_MASZK][playerid][dPosX],DivatInfo[SLOT_MASZK][playerid][dPosY],DivatInfo[SLOT_MASZK][playerid][dPosZ],
		DivatInfo[SLOT_MASZK][playerid][dRotX],DivatInfo[SLOT_MASZK][playerid][dRotY],DivatInfo[SLOT_MASZK][playerid][dRotZ],DivatInfo[SLOT_MASZK][playerid][dScaleX],
		DivatInfo[SLOT_MASZK][playerid][dScaleY],DivatInfo[SLOT_MASZK][playerid][dScaleZ],DivatInfo[SLOT_MASZK][playerid][dmodelid]);
		
		mysql_get_string(0,"pHazasodvaVele",PlayerInfo[playerid][pHazasodvaVele]);
		
		str[0] = EOS;
		mysql_get_string(0,"pFegyvertVasarolt",str);
		sscanf(str,"p<,>ddddddddd",PlayerInfo[playerid][pFegyvertVasarolt][0],PlayerInfo[playerid][pFegyvertVasarolt][1],PlayerInfo[playerid][pFegyvertVasarolt][2],PlayerInfo[playerid][pFegyvertVasarolt][3],PlayerInfo[playerid][pFegyvertVasarolt][4],PlayerInfo[playerid][pFegyvertVasarolt][5],PlayerInfo[playerid][pFegyvertVasarolt][6],PlayerInfo[playerid][pFegyvertVasarolt][7],PlayerInfo[playerid][pFegyvertVasarolt][8]);
		
		str[0] = EOS;
		mysql_get_string(0,"pNPCSzobaAll",str);
		sscanf(str,"p<,>ddddddddd",PlayerInfo[playerid][pNPCSzobaAll][0],PlayerInfo[playerid][pNPCSzobaAll][1],PlayerInfo[playerid][pNPCSzobaAll][2],PlayerInfo[playerid][pNPCSzobaAll][3],PlayerInfo[playerid][pNPCSzobaAll][4],PlayerInfo[playerid][pNPCSzobaAll][5],PlayerInfo[playerid][pNPCSzobaAll][6],PlayerInfo[playerid][pNPCSzobaAll][7],PlayerInfo[playerid][pNPCSzobaAll][8]);
		
		str[0] = EOS;
		mysql_get_string(0,"pTog",str);
		sscanf(str,"p<,>ddddddddddddddd",PlayerInfo[playerid][pTog][0],PlayerInfo[playerid][pTog][1],PlayerInfo[playerid][pTog][2],PlayerInfo[playerid][pTog][3],PlayerInfo[playerid][pTog][4],PlayerInfo[playerid][pTog][5],PlayerInfo[playerid][pTog][6],PlayerInfo[playerid][pTog][7],PlayerInfo[playerid][pTog][8],PlayerInfo[playerid][pTog][9],PlayerInfo[playerid][pTog][10],PlayerInfo[playerid][pTog][11],PlayerInfo[playerid][pTog][12],PlayerInfo[playerid][pTog][13],PlayerInfo[playerid][pTog][14]);


		
		if(PlayerInfo[playerid][pVas] > P_MAX_VAS)
			PlayerInfo[playerid][pVas] = P_MAX_VAS;
		
		#if ACCOUNT_KEZELES == 1
			new y = -1;
			for(;++y < 7;)
				PlayerTextDrawHide(playerid, CharacterDraw[playerid][y]);
		#endif
		
		if(ServerInfo[0][sWhiteList] && !PlayerInfo[playerid][padmin])
		{
			SCM(playerid, COL_LRED, "A szerver jelenleg karbantartás módban fut! Kérlek látogass vissza késõbb!");
			Kick(playerid);
			return true;
		}
		
		PlayerInfo[playerid][pSpawnVedelem] = 5;
		if(!PlayerInfo[playerid][pbelepve])
		{
			new bool:van;
			
			do
			{
				van = false;
				PlayerInfo[playerid][pBID] = Rand(1000, 9999);
				foreach(Player, i)
				{
					if(!Belepve(i) || IsPlayerNPC(i) || i == playerid)
						continue;

					if(PlayerInfo[i][pBID] == PlayerInfo[playerid][pBID])
					{
						van = true;
						break;
					}
				}
			}while(van);
		
			SetReport(playerid);
			Kapcsolodasok(playerid, 2);
			PlayerInfo[playerid][pbelepve] = true;
			
			if(PlayerInfo[playerid][pPancel] > 0.0)
				SetArmour(playerid, PlayerInfo[playerid][pPancel], false);
			
			//Saját jármû, ház, stb változók feltöltése
			Adat_Update( playerid, ADAT_MINDEN );
			
			format(PlayerInfo[playerid][pIP], 16, "%s", JatekosIP(playerid));
			printf("Szerver: %s belepett - uID: %d | BID: %d", PlayerInfo[playerid][pNev], PlayerInfo[playerid][pID], PlayerInfo[playerid][pBID]);
			
			if(ServerInfo[0][sPort] != 7777) SendClientMessage(playerid, COLOR_MKEK, "Figyelem! A szerver jelenleg Tesztüzem módban fut!");
			else SCM(playerid, COL_VZOLD, "Sikeresen bejelentkeztél, kellemes játékot kívánunk!");
			
			if(PlayerInfo[playerid][pjatekosszint] == 1)
			{
				SCM(playerid,COL_CITROM,"Ha jobban megismernéd a szervert, használd a /körbevezetés parancsot.");
			}
			
			DefenseCheck( playerid );
			doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pUtoljara = '%d', pOnline = '1' WHERE id = '%d'", gettime(), PlayerInfo[playerid][pID]);
			

			PlayerInfo[playerid][pNevek] = true;
			MutatNevek(playerid, true);
			SCM(playerid, COL_MKEK, "Automatikusan látod mindenki nevét. Ha ki szeretnéd kapcsolni: /nevek");
			
			if(Bortonben(playerid) != 0)
				cmd_buntetesem(playerid, "");
			
			//Progressbar-ok
			//PlayerBar:CreatePlayerProgressBar(playerid, Float:x, Float:y, Float:width=55.5, Float:height=3.2, color, Float:max=100.0)
		
			EhsegBar[playerid] = CreatePlayerProgressBar(playerid, 548.0, 27.0, 55.5, 3.2, COLOR_LIGHTBLUE, 100.0);
			VizeletBar[playerid] = CreatePlayerProgressBar(playerid, 548.0, 37.0, 55.5, 3.2, 0xFFFF00FF, 100.0);
		}
		if(TilosOlni == 1)
		{
			PlayerTextDrawShow(playerid,Zero[playerid]);
			SCM(playerid, COL_MKEK, "============[Zero Tolerancia]============");
			SCM(playerid, COL_LRED, "* Zero tolerancia bekapcsolva!");
			SCM(playerid, COL_LRED, "* Amíg ez érvényben van, tilos ölni, aki megszegi automata 2 óra jail!");
		}
		SCM(playerid, COL_LRED, "A szerverre bekerült, a v2.6-es frissítés!");
		SCM(playerid, COL_LRED, "Gyors átváltási segítség: /szg - További információk: Fórum / Frissitések");
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Belepes')", JatekosNev(playerid), PosExt(date), time[0], time[1]);
		TogglePlayerSpectating(playerid, false);
		SpawnPlayer( playerid );
		Hatarozas[playerid] = UnixTime;
		ShowPlayerDialog(playerid, DIALOG_TAMASIPW, DIALOG_STYLE_INPUT, "Tamási", #COL_FEHER"Írd be a PW-t!", "Ok", "Mégse");
		return true;
	} else {
	
		#if ACCOUNT_KEZELES == 1
			
			SCM(playerid, COL_LRED, "Hiba történt a karaktered betöltésekor! Kérjük csatlakozz újra a szerverre!");
			SCM(playerid, COL_LRED, "Ha továbbra is ezt a hiba üzenetet kapod, akkor szólj egy adminnak!");
		
		#else
		
			if(PlayerInfo[playerid][probalkozasok] == MAX_PROBALKOZASOK)
			{
				Kapcsolodasok(playerid, 3, "Hibás jelszó!");
				Kick(playerid);
			}

			PlayerInfo[playerid][probalkozasok]++;
			format(uzenet, sizeof(uzenet), #COL_FEHER"Hibás jelszó!\nHátralévõ próbálkozások száma: %d/%d\nKérlek írd be a lentebbi mezõbe a jelszót!", PlayerInfo[playerid][probalkozasok], MAX_PROBALKOZASOK);
			ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Bejelentkezés", uzenet, "Belépés", "Mégse");
			SCM(playerid, COL_LRED, "Érvénytelen jelszó!");
		
		#endif
	    return true;
	}
}

stock FeliratMutat( playerid, bool:muvelet )
{
	if(!Belepve(playerid))
		return true;
	
	foreach(Player, p)
	{
		if(p == playerid || !Belepve(p) || !IsValidDynamic3DTextLabel( PlayerInfo[p][pFelirat] ) || (PlayerInfo[p][pAduty] && muvelet))
			continue;
		
		if(muvelet)
			Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, PlayerInfo[p][pFelirat], E_STREAMER_PLAYER_ID, playerid);
		else
			Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, PlayerInfo[p][pFelirat], E_STREAMER_PLAYER_ID, playerid);
	}
	
	return true;
}

stock Felirat( playerid, bool:felrak )
{
	if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pFelirat] ))
		DestroyDynamic3DTextLabel( PlayerInfo[playerid][pFelirat] );
	
	if(Belepve(playerid) && felrak)
	{
		nformat(str, 8, "%d", PlayerInfo[playerid][pBID]);
		PlayerInfo[playerid][pFelirat] = CreateDynamic3DTextLabel(str, COLOR_DARKYELLOW, 0.0, 0.0, 0.1, 250.0, playerid, INVALID_VEHICLE_ID, 1, NINCS, NINCS, playerid, 300.0);

		foreach(Player, p)
		{
			if(!Belepve(p) || !PlayerInfo[p][pBejelento] || p == playerid) continue;
			Streamer_AppendArrayData(STREAMER_TYPE_3D_TEXT_LABEL, PlayerInfo[playerid][pFelirat], E_STREAMER_PLAYER_ID, p);
		}
		
	} else {
		
		foreach(Player, p)
		{
			if(!Belepve(p) || p == playerid || !IsValidDynamic3DTextLabel( PlayerInfo[p][pFelirat] )) continue;
			Streamer_RemoveArrayData(STREAMER_TYPE_3D_TEXT_LABEL, PlayerInfo[p][pFelirat], E_STREAMER_PLAYER_ID, playerid);
		}
	}
	
	return true;
}

stock SetReport(playerid, channel = -2)
{
	if(channel == -2)
	{
		if(IsAS(playerid)) PlayerInfo[playerid][pReport][1] = 0;
		else if(PlayerInfo[playerid][padmin] > 0 && PlayerInfo[playerid][padmin] < 7) PlayerInfo[playerid][pReport][1] = 1;
		else if(PlayerInfo[playerid][padmin] == FOADMIN_SZINT || PlayerInfo[playerid][padmin] == SZUPER_SZINT || PlayerInfo[playerid][padmin] == FEJLESZTO_SZINT || PlayerInfo[playerid][padmin] == AC_SZINT) PlayerInfo[playerid][pReport][1] = 2;
		else if(PlayerInfo[playerid][padmin] >= TULAJ_SZINT) PlayerInfo[playerid][pReport][1] = 3;
		else PlayerInfo[playerid][pReport][1] = NINCS;
		
	} else {
	
		PlayerInfo[playerid][pReport][1] = channel;
	}
	return true;
}

stock BankLezerBetoltes( bool:szef = false, bool:ajto = false)
{
	if(ajto)
	{
		if(IsValidDynamicObject(BankInfo[bAjto][0])) DestroyDynamicObject(BankInfo[bAjto][0]);
		if(IsValidDynamicObject(BankInfo[bAjto][1])) DestroyDynamicObject(BankInfo[bAjto][1]);
		BankInfo[bAjto][0] = CreateDynamicObject(2634, 2316.69751, -6.80970, 23.31470,   0.00000, 0.00000, 90.00000);
		BankInfo[bAjto][1] = CreateDynamicObject(19302, 2319.90625, -6.74310, 23.07072,   0.00000, 0.00000, 90.00000);
	}
	
	if(szef)
	{
		dforeach(BankSZLezer, lezer)
			if(IsValidDynamicObject(lezer))
				DestroyDynamicObject(lezer);
	
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.369628,-10.174092,23.741739,0.000000,0.000000,94.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.369628,-10.174092,23.211738,0.000000,0.000000,94.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.369628,-10.174092,22.671735,0.000000,0.000000,94.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.369628,-10.174092,24.231731,-0.600000,21.600000,94.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.431152,-10.597762,21.604623,2.499999,-22.899997,87.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.429199,-10.641340,21.561004,2.499999,-22.899997,87.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.209472,-10.659071,22.354316,-3.400001,-7.000004,87.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.165039,-10.611978,23.134262,-3.400001,-7.000004,87.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.118896,-10.697793,23.847635,-3.400001,-0.700004,87.500000));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2323.043945,-10.778247,23.902299,-3.400001,8.099994,87.900001));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.479492,-10.599168,24.058338,-3.400001,14.899995,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.740966,-10.568235,24.014448,-3.400001,14.899995,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2323.097412,-10.625087,24.095108,-3.400001,-3.000004,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2323.097412,-10.625087,24.095108,-3.400001,-3.000004,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.139892,-10.584959,24.038173,-3.400001,-3.000004,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2320.932861,-10.534378,23.966407,-3.400001,-3.000004,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.520996,-10.559041,24.001392,-3.400001,5.399995,87.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2320.449707,-10.714961,21.982276,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2320.980224,-10.709411,21.984127,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2321.520751,-10.703755,21.986015,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2322.621826,-10.692237,21.989858,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2323.512695,-10.682915,21.992973,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2324.763183,-10.669835,22.247341,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2325.493652,-10.662189,22.249889,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2325.051513,-10.666818,22.778352,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2323.051757,-10.687761,22.771373,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2324.879394,-10.668620,23.337755,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2325.359375,-10.663593,23.339433,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2324.697265,-10.670521,23.827125,-0.200001,-0.000003,90.599998));
		DIter_Add(BankSZLezer, CreateDynamicObject(18643,2324.697265,-10.670521,23.827125,-0.200001,-0.000003,90.599998));
	}
	return true;
}
stock BankBotBetoltes()
{
	//Lézer bankhoz - Hanci - 2013.07.20
	
	print("Szerver: Botok betöltése!");
	new /*i = -1, */botname[MAX_PLAYER_NAME];
	format(botname, sizeof(botname), "[NPC]bankbot_%d", 0);
	ConnectNPCEx(botname);
	print("Szerver: BoltBotok betöltése megtörtént!");
	return true;
}

stock BoltBotBetoltes()
{
	print("Szerver: Botok betoltese folyamatban!");
	new i = -1, botname[MAX_PLAYER_NAME];
	
	for(;++i < sizeof(BoltBot);)
	{
		BoltRablas[i][npcKicsoda] = -1;
		format(botname, sizeof(botname), "[NPC]boltbot_%d", i);
		
		BoltRablas[i][npcID] = ConnectNPCEx(botname);
		BoltRablas[i][npcArea] = CreateDynamicCircle(BoltBot[i][bBotPosX], BoltBot[i][bBotPosY], 10.0);
		
		/*BoltRablas[i][npcID] = FCNPC_Create(botname);
		FCNPC_Spawn(BoltRablas[i][npcID], 1, PosExt(BoltBot[i]));
		FCNPC_SetAngle(BoltRablas[i][npcID], BoltBot[i][3]);
		FCNPC_SetHealth(BoltRablas[i][npcID], FLOAT_INFINITY);
		
		BoltRablas[i][npcArea] = CreateDynamicCircle(BoltBot[i][0], BoltBot[i][1], 10.0);
		BotInformacio[num][botID] = FCNPC_Create(botname);
		
		format(botname, sizeof(botname), "botvagyok_%d", num);
		BotInformacio[num][botID] = FCNPC_Create(botname);
		
		new rand = random(sizeof(GyarPoziciok));
		FCNPC_Spawn(BotInformacio[num][botID], BallasSkins[botskin], GyarPoziciok[rand][kozPosX], GyarPoziciok[rand][kozPosY], GyarPoziciok[rand][kozPosZ]);
		FCNPC_SetWeapon(BotInformacio[num][botID], 32);
		FCNPC_SetAmmo(BotInformacio[num][botID], 2000);
		FCNPC_SetWeaponSkillLevel(BotInformacio[num][botID], WEAPONSKILL_MICRO_UZI, 100);
		
		new hova = (rand - (random(2) ? 1 : -1));
		
		if(hova < 0)
			hova = (sizeof(GyarPoziciok) - 1);
		else if(hova > (sizeof(GyarPoziciok) - 1))
			hova = 0;
		
		FCNPC_GoTo(BotInformacio[num][botID], GyarPoziciok[rand][kozPosX], GyarPoziciok[rand][kozPosY], GyarPoziciok[rand][kozPosZ], MOVE_TYPE_WALK, 1);
		
		BotInformacio[num][botMost] = rand;
		BotInformacio[num][botKovetkezo] = hova;
		
		botskin--;
		num++;*/
	}
	print("Szerver: BoltBotok betöltése megtörtént!");
	
	return true;
}


#if NPC_KELL == 1

stock BotBetoltes()
{
	//BallasSkins
	//GyarPoziciok
	new k = -1, e = -1;
	
	for(;++k < 100;)
		for(;++e < sizeof(BotInformacio[]);)
			BotInformacio[k][botEnum:e] = 0;
	
	print("Szerver: Botok betöltése!");
	new i = -1, num = 0, botskin = (sizeof(BallasSkins) - 1), botname[MAX_PLAYER_NAME];
	for(;++i < 1;)
	{
		format(botname, sizeof(botname), "bankbot_%d", num);
		BotInformacio[num][botID] = FCNPC_Create(botname);
		
		new rand = random(sizeof(GyarPoziciok));
		FCNPC_Spawn(BotInformacio[num][botID], BallasSkins[botskin], GyarPoziciok[rand][kozPosX], GyarPoziciok[rand][kozPosY], GyarPoziciok[rand][kozPosZ]);
		FCNPC_SetWeapon(BotInformacio[num][botID], 32);
		FCNPC_SetAmmo(BotInformacio[num][botID], 2000);
		FCNPC_SetWeaponSkillLevel(BotInformacio[num][botID], WEAPONSKILL_MICRO_UZI, 100);
		
		new hova = (rand - (random(2) ? 1 : -1));
		
		if(hova < 0)
			hova = (sizeof(GyarPoziciok) - 1);
		else if(hova > (sizeof(GyarPoziciok) - 1))
			hova = 0;
		
		FCNPC_GoTo(BotInformacio[num][botID], GyarPoziciok[rand][kozPosX], GyarPoziciok[rand][kozPosY], GyarPoziciok[rand][kozPosZ], MOVE_TYPE_WALK, 1);
		
		BotInformacio[num][botMost] = rand;
		BotInformacio[num][botKovetkezo] = hova;
		
		botskin--;
		num++;
	}
	print("Szerver: Botok betöltése megtörtént!");
	return true;
}

public FCNPC_OnReachDestination(npcid)
{
	new i = -1;
	for(;++i < 100;)
	{
		if(npcid == BotInformacio[i][botID])
		{
			BotInformacio[i][botKElozo] =	BotInformacio[i][botElozo];
			BotInformacio[i][botElozo] 	= 	BotInformacio[i][botMost];
			BotInformacio[i][botMost]	= 	BotInformacio[i][botKovetkezo];
			
			//{0, {1045.0146, -1312.5759, 13.5469}, {1, 7, 3}} most: 2 | elõzõ: 1
			/*new HovaMehet[5];
			new l = -1;
			for(;++l < sizeof(HovaMehet);)
			{
				HovaMehet[l] = GyarPoziciok[BotInformacio[i][botMost]][kozMerre][l];
			}*/
			//HovaMehet = GyarPoziciok[BotInformacio[i][botMost]][kozMerre];
			
			/*new x = -1;
			for(;++x < sizeof(HovaMehet);)
			{
				if((HovaMehet[x] - 1) == BotInformacio[i][botElozo])
				{
					HovaMehet[x] = 0;
					break;
				}
			}*/
			//GetPointAngleToPoint
			/*
			{0, 1045.5754, -1228.9409, 16.9199, {2, 4, 15, 0, 0}}, // NPC1
			{0, 1045.0146, -1312.5759, 13.5469, {1, 7, 3, 0, 0}}, // NPC2
			{0, 950.0192, -1312.7231, 13.5469, {2, 4, 5, 7, 0}}, // NPC3
			{0, 950.5178, -1228.4989, 16.9065, {1, 3, 5, 15, 0}}, // NPC4
			{0, 950.0499, -1273.4552, 15.3544, {3, 4, 6, 0, 0}}, // NPC5 (köz 0-3)
			{0, 973.6544, -1273.6064, 15.1174, {5, 7, 8, 0, 0}}, // NPC6 (5-bõl indulva)
			{0, 974.0480, -1312.5380, 13.4533, {2, 3, 6, 0, 0}}, // NPC7 (6-bõl indulva, köz 3-4)
			{0, 997.5511, -1269.6351, 15.1797, {6, 9, 0, 0, 0}}, // NPC8 (6-bõl indulva)
			{0, 997.7208, -1259.3693, 15.0313, {8, 10, 0, 0, 0}}, // NPC9 (8-bõl indulva)
			{0, 997.6831, -1251.6245, 19.3968, {9, 11, 0, 0, 0}}, // NPC10 (9-bõl indulva)
			{0, 997.7750, -1246.7592, 19.4086, {10, 12, 0, 0, 0}}, // NPC11 (10-bõl indulva)
			{0, 992.0689, -1246.8112, 19.4118, {11, 13, 0, 0, 0}}, // NPC12 (11-bõl indulva)
			{0, 992.0351, -1238.8540, 19.3941, {12, 14, 0, 0, 0}}, // NPC13 (12-bõl indulva)
			{0, 991.9806, -1234.0807, 16.9475, {13, 15, 0, 0, 0}}, // NPC14 (13-bõl indulva)
			{0, 991.9255, -1228.6942, 16.9050, {1, 4, 14, 0, 0}} // NPC15 (14-bõl indulva, köz 0-1)
			*/
			printf("Elõzõ: %d | Most: %d", BotInformacio[i][botElozo], BotInformacio[i][botMost]);
			new x = -1, kovetkezo[10], num = 0;
			for(;++x < sizeof(GyarPoziciok);)
			{
				//printf("Num(1): %d", num);
				new szog = floatround(GetPointAngleToPoint(GyarPoziciok[BotInformacio[i][botMost]][kozPosX], GyarPoziciok[BotInformacio[i][botMost]][kozPosY], GyarPoziciok[x][kozPosX], GyarPoziciok[x][kozPosY]));
				
				//printf("Index: %d", x);
				if((BotInformacio[i][botElozo] == x) || (BotInformacio[i][botMost] == x))
					continue;
				
				//printf("Index(2): %d", x);
				if((!(szog % 90)) || (!((szog + 1) % 90)) || (!((szog - 1) % 90)))
				{
					printf("Szögecske: %d | %d", szog, x);
					//printf("Melyik: %d | %d | %d", x, szog, floatround(GetPointAngleToPoint(GyarPoziciok[BotInformacio[i][botMost]][kozPosX], GyarPoziciok[BotInformacio[i][botMost]][kozPosY], GyarPoziciok[x][kozPosX], GyarPoziciok[x][kozPosX])));
					//kovetkezo = x;
					kovetkezo[num] = x;
					num++;
				}
				//printf("Num(2): %d", num);
			}
			
			new randomo = random(num);
			
			if(randomo > 9)
				randomo = 0;
			printf("Randomo: %d", randomo);
			/*while(kovetkezo[randomo] == 0)
				randomo = random(sizeof(kovetkezo));*/
			
			//printf("Randomo: %d", randomo);
			//new randomo = random(strlen(kovetkezo));
			printf("Hova: %d", kovetkezo[randomo]);
			FCNPC_GoTo(BotInformacio[i][botID], GyarPoziciok[kovetkezo[randomo]][kozPosX], GyarPoziciok[kovetkezo[randomo]][kozPosY], GyarPoziciok[kovetkezo[randomo]][kozPosZ], MOVE_TYPE_WALK, 1);
			BotInformacio[i][botKovetkezo] = kovetkezo[randomo];
			break;
		}
	}
	return true;
}

#endif

funkcio CheckPlayer(playerid)
{
	new nums, fields;
	cache_get_data(nums, fields);
	
	if(nums)
	{
		#if ACCOUNT_KEZELES == 1
		
			new i = -1;
			for(;++i < 8;)
				PlayerTextDrawHide(playerid, LoginDraw[playerid][i]);
			
			
			new tempChar[2];
			
			mysql_get_int(0, "Karakter1", tempChar[0]);
			mysql_get_int(0, "Karakter2", tempChar[1]);
			mysql_get_int(0, "ID", AccountID[playerid]);
			
			if(!tempChar[0] && !tempChar[1])
			{
				//SFM(playerid, COL_LRED, "Kurva: %d | %d", tempChar[0], tempChar[1]);
				SCM(playerid, COL_MKEK, "Sajnáljuk, de ezen a felhasználón még nincs karakter regisztrálva.");
				SCM(playerid, COL_MKEK, "Kérlek látogass el a http://seerpg.eu/ucp oldalra és regisztrálj egyet a Karakter menüpont alatt!");
				Kick(playerid);
				return true;
			}
			
			new queryf[256];
			
			if(tempChar[0])
			{
				UserControl[playerid][uKarakter][0] = tempChar[0];
				UserControl[playerid][uKarakterek]++;
				
				format(queryf, sizeof(queryf), "SELECT * FROM `"#MYSQL_JATEKOS_TABLA"` WHERE id = '%d'", tempChar[0]);
				mysql_tquery(sql_ID, queryf, "LoadCharacter", "i", playerid);
			}
			
			if(tempChar[1])
			{
				//egyenlõre nem kell auto-korrekció
				/*if(!tempChar[0])
				{
					new kar[128];
					format(kar, 128, "UPDATE `"#MYSQL_ACCOUNT_TABLA"` SET Karakter1 = '%d', Karakter2 = '0' WHERE Felhasznalonev = '%s' AND Jelszo = '%s'", tempChar[1], UserControl[playerid][uUserName], MD5_Hash(UserControl[playerid][uPassword]));
					mysql_tquery(sql_ID, kar, "", "");
					UserControl[playerid][uKarakter][0] = tempChar[1];
				}
				else
				{*/
				UserControl[playerid][uKarakter][1] = tempChar[1];
				UserControl[playerid][uKarakterek]++;
				//}
				
				format(queryf, sizeof(queryf), "SELECT * FROM `"#MYSQL_JATEKOS_TABLA"` WHERE id = '%d'", tempChar[1]);
				mysql_tquery(sql_ID, queryf, "LoadCharacter", "i", playerid);
			}
		#else
			ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Bejelentkezés", #COL_FEHER"Ez a név már regisztrálva van!\n\nKérlek írd be a lentebbi mezõbe a jelszót!", "Belépés", "Mégse");
		#endif
	} else {
		#if ACCOUNT_KEZELES == 0
			ShowPlayerDialog(playerid, DIALOG_REGISTER, DIALOG_STYLE_PASSWORD, "Regisztráció", #COL_FEHER"Ez a név még nincs regisztrálva!\n\nKérlek írd be a lentebbi mezõbe a kívánt jelszót!", "Regisztrál", "Mégse");
		#else
			SelectTextDraw(playerid, 0xF7C25EAA);
			SCM(playerid, COL_MKEK, "Hibás felhasználónév és/vagy jelszó! Kérlek ellenõrizd, hogy helyesen adtad-e meg az adatokat!");
		#endif
	}
	return true;
}

funkcio LoadCharacter(playerid)
{
	UserControl[playerid][uKBetoltve]++;

	new nums, fields,belepve = 0;
	cache_get_data(nums, fields);
	if(nums)
	{
		new jat[MAX_PLAYER_NAME], modelll;
		mysql_get_string(0, "nev", jat);
		mysql_get_int(0, "skin", modelll);
		mysql_get_int(0, "ValtsJelszot", belepve);
		//mysql_get_int(0, "pOnline", online);

		if(UserControl[playerid][uKBetoltve] == 1)
		{
			PlayerTextDrawSetPreviewModel(playerid, CharacterDraw[playerid][2], modelll);
			PlayerTextDrawSetPreviewRot(playerid, CharacterDraw[playerid][2], 0.000000, 0.000000, 0.000000, 1.000000);
			PlayerTextDrawSetString(playerid, CharacterDraw[playerid][4], jat);
			//UserControl[playerid][uKarakterA][0] = aktivalvavan;
			//UserControl[playerid][uKarakterO][0] = online;
			format(UserControl[playerid][uKNev1], MAX_PLAYER_NAME, "%s", jat);

		} else if(UserControl[playerid][uKBetoltve] == 2) {

			PlayerTextDrawSetPreviewModel(playerid, CharacterDraw[playerid][3], modelll);
			PlayerTextDrawSetPreviewRot(playerid, CharacterDraw[playerid][3], 0.000000, 0.000000, 0.000000, 1.000000);
			PlayerTextDrawSetString(playerid, CharacterDraw[playerid][5], jat);
			//UserControl[playerid][uKarakterA][1] = aktivalvavan;
			//UserControl[playerid][uKarakterO][1] = online;
			format(UserControl[playerid][uKNev2], MAX_PLAYER_NAME, "%s", jat);
		}

		//return true;
	} else if(!UserControl[playerid][uKBetoltve]) {
		SCM(playerid, COL_MKEK, "Sajnáljuk, de ezen a felhasználón még nincs karakter regisztrálva.");
		SCM(playerid, COL_MKEK, "Kérlek látogass el a http://seerpg.eu/ucp oldalra és regisztrálj egyet a Karakter menüpont alatt!");
	}
	if(belepve == 1)
	{
		SCM(playerid,COL_MKEK,"Biztonsági okokból, felhasználódon egy Adminisztrátor kötelezte a Jelszóváltást!");
		SCM(playerid,COL_MKEK,"Kérlek változtasd meg jelszavadat kezelõfelületünkön!");
		SCM(playerid,COL_MKEK,"http://seerpg.eu/ucp!");
		Kick(playerid);
		return 1;
	}
	if(UserControl[playerid][uKBetoltve] == UserControl[playerid][uKarakterek])
	{
		SCM(playerid, COL_MKEK, "Sikeresen bejelentkeztél!");
		SCM(playerid, COL_MKEK, "Kérlek válassz a karaktereid közül!");

		new y = -1;
		for(;++y < 7;)
			PlayerTextDrawShow(playerid, CharacterDraw[playerid][y]);

		SelectTextDraw(playerid, 0xF7C25EAA);
	}
	return true;
}


stock AjtokBetoltese()
{
	print("Szerver: Ajtók betöltése!");
	
	if(!fexist(LSQL_ADATBAZIS))
		return print("Szerver: Kritikus hiba történt az AjtokBetoltese funkcióban! Oka: Hiányzó adatbázis!");
	
	new DB:AjtoDB = db_open(LSQL_ADATBAZIS);
	new DBResult:AjtoE = db_query(AjtoDB, "SELECT * FROM `"#LSQL_AJTO_TABLA"`");
	new i = -1, ajtoid, formazas[128], ajtoallapot, ajtojarmu, num = db_num_rows(AjtoE);
	if(num)
	{
		for(;++i < num;)
		{
			db_get_int(AjtoE, "id", ajtoid);
			db_get_str(AjtoE, "anev", AjtoInfo[ajtoid][anev], 32);
			db_get_float(AjtoE, "abeposx", AjtoInfo[ajtoid][abepos][0]);
			db_get_float(AjtoE, "abeposy", AjtoInfo[ajtoid][abepos][1]);
			db_get_float(AjtoE, "abeposz", AjtoInfo[ajtoid][abepos][2]);
			db_get_float(AjtoE, "abeangle", AjtoInfo[ajtoid][abepos][3]);
			db_get_float(AjtoE, "akiposx", AjtoInfo[ajtoid][akipos][0]);
			db_get_float(AjtoE, "akiposy", AjtoInfo[ajtoid][akipos][1]);
			db_get_float(AjtoE, "akiposz", AjtoInfo[ajtoid][akipos][2]);
			db_get_float(AjtoE, "akiangle", AjtoInfo[ajtoid][akipos][3]);
			db_get_int(AjtoE, "afreeze", AjtoInfo[ajtoid][afreeze]);
			db_get_int(AjtoE, "anyitva", ajtoallapot);
			AjtoInfo[ajtoid][anyitva] = ajtoallapot ? true : false;
			db_get_int(AjtoE, "ajarmu", ajtojarmu);
			AjtoInfo[ajtoid][ajarmu] = ajtojarmu ? true : false;
			db_get_int(AjtoE, "abeinterior", AjtoInfo[ajtoid][abeinterior]);
			db_get_int(AjtoE, "akiinterior", AjtoInfo[ajtoid][akiinterior]);
			db_get_int(AjtoE, "abevw", AjtoInfo[ajtoid][abevw]);
			db_get_int(AjtoE, "akivw", AjtoInfo[ajtoid][akivw]);
			AjtoInfo[ajtoid][ahasznalva] = true;
			
			format(formazas, sizeof(formazas), #COL_NARANCS"[Bejárat]\n"#COL_SKEK"%s", AjtoInfo[ajtoid][anev]);
			
			if(AjtoInfo[ajtoid][abepos][0] != 0.0)
			{
				AjtoInfo[ajtoid][abelabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, PosExt(AjtoInfo[ajtoid][abepos])+0.75,20, .worldid = AjtoInfo[ajtoid][abevw], .interiorid = AjtoInfo[ajtoid][abeinterior]);
				AjtoInfo[ajtoid][abepickup] = CreateDynamicPickup(1318, 23, PosExt(AjtoInfo[ajtoid][abepos]), AjtoInfo[ajtoid][abevw], AjtoInfo[ajtoid][abeinterior]);
				
				if(AjtoInfo[ajtoid][ajarmu])
					AjtoInfo[ajtoid][abepickupk] = CreateDynamicPickup(1007, 14, PosExt(AjtoInfo[ajtoid][abepos]), AjtoInfo[ajtoid][abevw], AjtoInfo[ajtoid][abeinterior]);
			}
			
			if(AjtoInfo[ajtoid][akipos][0] != 0.0)
			{
				//AjtoInfo[ajtoid][akipos][0], AjtoInfo[ajtoid][akipos][1], AjtoInfo[ajtoid][akipos][2]+0.75
				AjtoInfo[ajtoid][akilabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, PosExt(AjtoInfo[ajtoid][akipos])+0.75,20, .worldid = AjtoInfo[ajtoid][akivw], .interiorid = AjtoInfo[ajtoid][akiinterior]);
				AjtoInfo[ajtoid][akipickup] = CreateDynamicPickup(1318, 23, PosExt(AjtoInfo[ajtoid][akipos]), AjtoInfo[ajtoid][akivw], AjtoInfo[ajtoid][akiinterior]);
				
				if(AjtoInfo[ajtoid][ajarmu])
					AjtoInfo[ajtoid][akipickupk] = CreateDynamicPickup(1007, 14, PosExt(AjtoInfo[ajtoid][akipos]), AjtoInfo[ajtoid][akivw], AjtoInfo[ajtoid][akiinterior]);
			}
			db_next_row(AjtoE);
		}
	}
	printf("Szerver: %d ajtó sikeresen betöltve!", num);
	
	db_free_result(AjtoE);
	db_close(AjtoDB);
	
	return true;
}

funkcio HazBetoltes()
{
	print("Szerver: Házak betöltése!");
	
	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
		new i = -1, hdb, hsz[64], drog[513], zarva;
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "id", hdb);
			mysql_get_string(i, "tulaj", HazInfo[hdb][tulaj]);
			mysql_get_int(i, "TulajID", HazInfo[hdb][hTulajID]);
			mysql_get_float(i, "poziciox", HazInfo[hdb][posx]);
			mysql_get_float(i, "pozicioy", HazInfo[hdb][posy]);
			mysql_get_float(i, "pozicioz", HazInfo[hdb][posz]);
			mysql_get_int(i, "interior", HazInfo[hdb][inter]);
			mysql_get_int(i, "ar", HazInfo[hdb][hazar]);
			mysql_get_int(i, "butorok", HazInfo[hdb][butorsz]);
			
			mysql_get_string(i, "hazSzef", hsz);
			sscanf(hsz, "p<,>a<d>[5]", HazInfo[hdb][hazSzef]);
			
			mysql_get_string(i, "drogMi", drog);
			sscanf(drog, "p<,>a<d>[50]", HazInfo[hdb][hDrogMi]);
			
			mysql_get_string(i, "drogAll", drog);
			sscanf(drog, "p<,>a<d>[50]", HazInfo[hdb][hDrogAllapot]);
			
			mysql_get_int(i, "hZarva", zarva);
			HazInfo[hdb][hZarva] = (zarva ? true : false);
			
			mysql_get_string(i, "hFegyver", drog);
			sscanf(drog, "p<,>a<d>[15]", HazInfo[hdb][hFegyver]);
			
			mysql_get_string(i, "hTolteny", drog);
			sscanf(drog, "p<,>a<d>[15]", HazInfo[hdb][hTolteny]);
			
			mysql_get_int(i, "hTipus", HazInfo[hdb][hTipus]);
			mysql_get_int(i, "hPince", HazInfo[hdb][hPince]);
			
			mysql_get_int(i, "hGarazs", HazInfo[hdb][hGarazs]);
			
			HazInfo[hdb][hasznalatban] = true;
			
			if(HazInfo[hdb][hTulajID] == NINCS)
				format(uzenet, sizeof(uzenet), "Házszám: ~g~%d.~n~~w~Ár: ~g~%s$.~n~~w~Tulaj: ~g~Senki.", hdb, FormatNumber(HazInfo[hdb][hazar], 0, '.'));
			else
				format(uzenet, sizeof(uzenet), "Házszám: ~g~%d.~n~~w~Tulaj: ~g~%s.", hdb, HazInfo[hdb][tulaj]);
			
			HazInfo[hdb][hasznalatban] = true;
			SpawnHouse(hdb, uzenet, (HazInfo[hdb][hTulajID] == NINCS ? HAZ_MEGVEHETO_MODEL : HAZ_MEGVETT_MODEL));
			BelsoPickup(hdb, HazInfo[hdb][inter]);
			
			//PDrogHelyek
			UjUltetveny( hdb );
			
	    }
	}
  	printf("Szerver: %d ház sikeresen betöltve!", nums);
 	return true;
}

stock UjUltetveny( hdb )
{
	new p = -1, which = 1, form[64];
	for(;++p < sizeof(PDrogHelyek);)
	{
		new Float:DPos[3], Float:fordit = (PDrogHelyek[p][pFordit] ? -0.7 : 0.7);
		
		if(PDrogHelyek[p][pEnged][1])
		{
			DPos[0] = PDrogHelyek[p][pDrogX];
			DPos[1] = PDrogHelyek[p][pDrogY];
			DPos[2] = PDrogHelyek[p][pDrogA];
			
			GetXYInFrontOfPoint(PosExt(DPos) + 90.0, fordit);
			PDrogHely[which + DROG_KOZEP][0] = DPos[0];
			PDrogHely[which + DROG_KOZEP][1] = DPos[1];
			PDrogHely[which + DROG_KOZEP][2] = PDrogHelyek[p][pDrogZ];
			PDrogHely[which + DROG_KOZEP][3] = DPos[2];
	
			if((HazInfo[hdb][hDrogMi][which + DROG_KOZEP] > 0))
			{
				switch(HazInfo[hdb][hDrogMi][which + DROG_KOZEP])
				{
					case 1: format(form, sizeof(form), "Marihuana");
					case 2: format(form, sizeof(form), "Kokain");
					case 3: format(form, sizeof(form), "Heroin");
				}
			
				format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%", form, HazInfo[hdb][hDrogAllapot][which + DROG_KOZEP]);
			} else
				format(form, sizeof(form), "[Drog hely]\nSzabad");
			
			HazInfo[hdb][hDrogHely][which + DROG_KOZEP] = CreateDynamic3DTextLabel(form, 0xFFFFFFFF, PDrogHelyek[p][pDrogX], PDrogHelyek[p][pDrogY], PDrogHelyek[p][pDrogZ] + 0.4, 20.0, .worldid = hdb, .interiorid = 123);
			/*format(form, sizeof(form), "Valami %d | %d", (which + DROG_KOZEP), p);
			CreateDynamic3DTextLabel(form, -1, PosExt(PDrogHely[which + DROG_KOZEP]) + 0.4, 20.0, .worldid = hdb, .interiorid = 123);*/
			//GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance)
		}
		
		if(PDrogHelyek[p][pEnged][0])
		{
			DPos[0] = PDrogHelyek[p][pDrogX];
			DPos[1] = PDrogHelyek[p][pDrogY];
			DPos[2] = PDrogHelyek[p][pDrogA];
			
			GetXYInFrontOfPoint(PosExt(DPos), -0.85);
			PDrogHely[which + DROG_BAL][0] = DPos[0];
			PDrogHely[which + DROG_BAL][1] = DPos[1];
			PDrogHely[which + DROG_BAL][2] = PDrogHelyek[p][pDrogZ];
			PDrogHely[which + DROG_BAL][3] = PDrogHelyek[p][pDrogA];
			GetXYInFrontOfPoint(PDrogHely[which + DROG_BAL][0], PDrogHely[which + DROG_BAL][1], PDrogHely[which + DROG_BAL][3] + 90.0, fordit);
			
			if((HazInfo[hdb][hDrogMi][which + DROG_BAL] > 0))
			{
				switch(HazInfo[hdb][hDrogMi][which + DROG_BAL])
				{
					case 1: format(form, sizeof(form), "Marihuana");
					case 2: format(form, sizeof(form), "Kokain");
					case 3: format(form, sizeof(form), "Heroin");
				}
			
				format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%", form, HazInfo[hdb][hDrogAllapot][which + DROG_BAL]);
			} else
				format(form, sizeof(form), "[Drog hely]\nSzabad");
			
			HazInfo[hdb][hDrogHely][which + DROG_BAL] = CreateDynamic3DTextLabel(form, 0xFFFFFFFF, DPos[0], DPos[1], PDrogHelyek[p][pDrogZ] + 0.4, 20.0, .worldid = hdb, .interiorid = 123);
			/*format(form, sizeof(form), "Valami %d | %d", (which + DROG_BAL), p);
			CreateDynamic3DTextLabel(form, -1, PosExt(PDrogHely[which + DROG_BAL]) + 0.4, 20.0, .worldid = hdb, .interiorid = 123);*/
		}
		
		if(PDrogHelyek[p][pEnged][2])
		{
			DPos[0] = PDrogHelyek[p][pDrogX];
			DPos[1] = PDrogHelyek[p][pDrogY];
			DPos[2] = PDrogHelyek[p][pDrogA];
			
			GetXYInFrontOfPoint(PosExt(DPos), 0.85);
			PDrogHely[which + DROG_JOBB][0] = DPos[0];
			PDrogHely[which + DROG_JOBB][1] = DPos[1];
			PDrogHely[which + DROG_JOBB][2] = PDrogHelyek[p][pDrogZ];
			PDrogHely[which + DROG_JOBB][3] = PDrogHelyek[p][pDrogA];
			GetXYInFrontOfPoint(PDrogHely[which + DROG_JOBB][0], PDrogHely[which + DROG_JOBB][1], PDrogHely[which + DROG_JOBB][3] + 90.0, fordit);
			
			if((HazInfo[hdb][hDrogMi][which + DROG_JOBB] > 0))
			{
				switch(HazInfo[hdb][hDrogMi][which + DROG_JOBB])
				{
					case 1: format(form, sizeof(form), "Marihuana");
					case 2: format(form, sizeof(form), "Kokain");
					case 3: format(form, sizeof(form), "Heroin");
				}
			
				format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%", form, HazInfo[hdb][hDrogAllapot][which + DROG_JOBB]);
			} else
				format(form, sizeof(form), "[Drog hely]\nSzabad");
				
			HazInfo[hdb][hDrogHely][which + DROG_JOBB] = CreateDynamic3DTextLabel(form, 0xFFFFFFFF, DPos[0], DPos[1], PDrogHelyek[p][pDrogZ] + 0.4, 20.0, .worldid = hdb, .interiorid = 123);
			/*format(form, sizeof(form), "Valami %d | %d", (which + DROG_JOBB), p);
			CreateDynamic3DTextLabel(form, -1, PosExt(PDrogHely[which + DROG_JOBB]) + 0.4, 20.0, .worldid = hdb, .interiorid = 123);*/
		}
		
		which += 3;
	}
	
	return true;
}

stock AutomataModel(tipusid)
{
	switch(tipusid)
	{
		case 1: return 2942; //ATM
		case 2: return 1340; //Hotdog
		case 3: return 1227;//Kék kuka
		default: return 2942;
	}
	return true;
}

funkcio ButorBetoltes()
{
    new x = NINCS;
	for( ;++x < MAXBUTORSZAM; )
	{
		ButorInfo[x][butorTipus] = NINCS;
		ButorInfo[x][butorListitem] = NINCS;
	}
	
	new nums, fields, butordat;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1;
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "id", butordat);
			mysql_get_float(i, "butorPosX", ButorInfo[butordat][butorPosX]);
			mysql_get_float(i, "butorPosY", ButorInfo[butordat][butorPosY]);
			mysql_get_float(i, "butorPosZ", ButorInfo[butordat][butorPosZ]);
			mysql_get_float(i, "butorPosRX", ButorInfo[butordat][butorPosRX]);
			mysql_get_float(i, "butorPosRY", ButorInfo[butordat][butorPosRY]);
			mysql_get_float(i, "butorPosRZ", ButorInfo[butordat][butorPosRZ]);
			mysql_get_int(i, "butorModel", ButorInfo[butordat][butorModel]);
			mysql_get_int(i, "butorVW", ButorInfo[butordat][butorVW]);
			mysql_get_int(i, "butorInterior", ButorInfo[butordat][butorInterior]);
			ButorInfo[butordat][butorHasznalva] = true;
			ButorInfo[butordat][butorMegveve] = true;
			mysql_get_int(i, "butorTipus", ButorInfo[butordat][butorTipus]);
			mysql_get_int(i, "butorListitem", ButorInfo[butordat][butorListitem]);
			ButorInfo[butordat][butorObject] = CreateDynamicObject(ButorInfo[butordat][butorModel], ButorInfo[butordat][butorPosX], ButorInfo[butordat][butorPosY], ButorInfo[butordat][butorPosZ], ButorInfo[butordat][butorPosRX], ButorInfo[butordat][butorPosRY], ButorInfo[butordat][butorPosRZ], ButorInfo[butordat][butorVW], ButorInfo[butordat][butorInterior]);
		}
	}
	printf("Szerver: %d bútor sikeresen betöltve!", nums);
	return 1;
}

funkcio AutomataBetoltes()
{	
	print("Szerver: Automatak betoltese!");
	
	if(!fexist(LSQL_ADATBAZIS))
		return print("Szerver: Kritikus hiba történt az AutomataBetoltes funkcióban! Oka: Hiányzó adatbázis!");
	
	new DB:AutoDB = db_open(LSQL_ADATBAZIS);
	new DBResult:AutoE = db_query(AutoDB, "SELECT * FROM `"#LSQL_AUTOMATA_TABLA"`");
	new i = -1, auid, num = db_num_rows(AutoE);
	
	if(num)
	{
		for(;++i < num;)
		{
			db_get_int(AutoE, "id", auid);
			db_get_int(AutoE, "autipus", AutomataInfo[auid][autipus]);
			db_get_int(AutoE, "aupenz", AutomataInfo[auid][aupenz]);
			db_get_float(AutoE, "auposx", AutomataInfo[auid][aupos][0]);
			db_get_float(AutoE, "auposy", AutomataInfo[auid][aupos][1]);
			db_get_float(AutoE, "auposz", AutomataInfo[auid][aupos][2]);
			db_get_float(AutoE, "aurotx", AutomataInfo[auid][aupos][3]);
			db_get_float(AutoE, "auroty", AutomataInfo[auid][aupos][4]);
			db_get_float(AutoE, "aurotz", AutomataInfo[auid][aupos][5]);
			db_get_int(AutoE, "vw", AutomataInfo[auid][auVW]);
			db_get_int(AutoE, "int", AutomataInfo[auid][auInt]);
			AutomataInfo[auid][auhasznalva] = true;
			//printf("%d | %d | %d | %f | %f | %f | %f | %f | %f | %d | %d", auid, AutomataInfo[auid][autipus], AutomataInfo[auid][aupenz], PosExt(AutomataInfo[auid][aupos]), AutomataInfo[auid][aupos][3], AutomataInfo[auid][aupos][4], AutomataInfo[auid][aupos][5], AutomataInfo[auid][auVW], AutomataInfo[auid][auInt]);
			
			AutomataInfo[auid][auobject] = CreateDynamicObject(AutomataModel(AutomataInfo[auid][autipus]), PosExt(AutomataInfo[auid][aupos]), AutomataInfo[auid][aupos][3], AutomataInfo[auid][aupos][4], AutomataInfo[auid][aupos][5], AutomataInfo[auid][auVW], AutomataInfo[auid][auInt]);
			
			if(AutomataInfo[auid][autipus] == 2)
				AutomataInfo[auid][autext] = CreateDynamic3DTextLabel("(( /menü ))", COLOR_MKEK, PosExt(AutomataInfo[auid][aupos]), 40.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AutomataInfo[auid][auVW], AutomataInfo[auid][auInt]);
			
			db_next_row(AutoE);
		}
	}
	printf("Szerver: %d automata sikeresen betoltve!", num);
	return true;
}

funkcio FrakcioBetoltes()
{
    print("Szerver: Frakciók betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1, fk, szefobject, szefpos[100], fegytol[256], fizetes[256];
	    for(;++i < nums;)
	    {
            mysql_get_int(i, "ID", fk);
			mysql_get_string(i, "FNev", FInfo[fk][fNev]);
			mysql_get_string(i, "Rang1", FInfo[fk][fRang1]);
			mysql_get_string(i, "Rang2", FInfo[fk][fRang2]);
			mysql_get_string(i, "Rang2", FInfo[fk][fRang2]);
			mysql_get_string(i, "Rang3", FInfo[fk][fRang3]);
			mysql_get_string(i, "Rang4", FInfo[fk][fRang4]);
			mysql_get_string(i, "Rang5", FInfo[fk][fRang5]);
			mysql_get_string(i, "Rang6", FInfo[fk][fRang6]);
			mysql_get_string(i, "Rang7", FInfo[fk][fRang7]);
			mysql_get_string(i, "Rang8", FInfo[fk][fRang8]);
			mysql_get_string(i, "Rang9", FInfo[fk][fRang9]);
			mysql_get_string(i, "Rang10", FInfo[fk][fRang10]);
			mysql_get_string(i, "Rang11", FInfo[fk][fRang11]);
			mysql_get_string(i, "Rang12", FInfo[fk][fRang12]);
			mysql_get_string(i, "Rang13", FInfo[fk][fRang13]);
			mysql_get_string(i, "Rang14", FInfo[fk][fRang14]);
			mysql_get_string(i, "Rang15", FInfo[fk][fRang15]);
			mysql_get_string(i, "Rang16", FInfo[fk][fRang16]);
			mysql_get_int(i, "SzefRang", FInfo[fk][fSzefRang]);
			
			//printf("%s | %s | %s | %s | %s | %s | %s | %s | %s | %s | %s", FInfo[fk][fNev], FInfo[fk][fRang1], FInfo[fk][fRang2], FInfo[fk][fRang3], FInfo[fk][fRang4], FInfo[fk][fRang5], FInfo[fk][fRang6], FInfo[fk][fRang7], FInfo[fk][fRang8], FInfo[fk][fRang9], FInfo[fk][fRang10]);
			
			mysql_get_int(i, "Legalis", FInfo[fk][fLegalis]);
			//FInfo[fk][fLegalis] = legalis ? true : false;
			
			mysql_get_int(i, "SzefObject", szefobject);
			FInfo[fk][fSzefObject] = szefobject ? true : false;
			
			mysql_get_string(i, "SzefPos", szefpos);
			sscanf(szefpos, "p<,>a<f>[3]", FInfo[fk][fSzefPos]);
			
			mysql_get_string(i, "SzefPosR", szefpos);
			sscanf(szefpos, "p<,>a<f>[3]", FInfo[fk][fSzefPosR]);
			
			mysql_get_int(i, "Penz", FInfo[fk][fPenz]);
			mysql_get_int(i, "Material", FInfo[fk][fMaterial]);
			mysql_get_int(i, "Heroin", FInfo[fk][fHeroin]);
			mysql_get_int(i, "Kokain", FInfo[fk][fKokain]);
			mysql_get_int(i, "Marihuana", FInfo[fk][fMarihuana]);
			
			mysql_get_string(i, "Fegyverek", fegytol);
			sscanf(fegytol, "p<,>a<d>[50]", FInfo[fk][fFegyverek]);
			
			mysql_get_string(i, "Toltenyek", fegytol);
			sscanf(fegytol, "p<,>a<d>[50]", FInfo[fk][fToltenyek]);
			
			mysql_get_int(i, "VW", FInfo[fk][fVW]);
			mysql_get_int(i, "Interior", FInfo[fk][fInterior]);
			
			mysql_get_string(i, "Fizetesek", fizetes);
			sscanf(fizetes, "p<,>a<d>[16]", FInfo[fk][fFizetes]);
			
			mysql_get_int(i,"MaxRang",FInfo[fk][fMaxRang]);
			
			FInfo[fk][fVan] = true;
			
			if(FInfo[fk][fSzefObject])
				FInfo[fk][fObjectID] = CreateDynamicObject(2332, FInfo[fk][fSzefPos][0], FInfo[fk][fSzefPos][1], FInfo[fk][fSzefPos][2], FInfo[fk][fSzefPosR][0], FInfo[fk][fSzefPosR][1], FInfo[fk][fSzefPosR][2], FInfo[fk][fVW], FInfo[fk][fInterior]);
				
	    }
	}
	printf("Szerver: %d frakció sikeresen betöltve!", nums);
	return true;
}
funkcio LoadEldobottCuccok()
{
    print("Szerver: Eldobtt Cuccok Betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1,pos[100];
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "Tipus", dInfo[i][dTipus]);
			mysql_get_int(i, "Fegyver", dInfo[i][dFegyver]);
			mysql_get_int(i, "Ertek", dInfo[i][dErtek]);
			mysql_get_string(i, "Pozicio", pos);
			sscanf(pos, "p<,>a<f>[3]", dInfo[i][dPos]);
			mysql_get_int(i, "Int", dInfo[i][dInt]);
			mysql_get_int(i, "VW", dInfo[i][dVirtual]);
			mysql_get_int(i, "TorlesiAzonosito", dInfo[i][dTorlesiAzonosito]);
			dInfo[i][dHasznalva] = true;
			if(dInfo[i][dFegyver] != 0)
			{
				dInfo[i][dObject] =	CreateDynamicObject(aWeaponModel[dInfo[i][dFegyver]], dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
			if(dInfo[i][dTipus] == ELDOB_MATERIAL)
			{
				dInfo[i][dObject]	=	CreateDynamicObject(2060, dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
			if(dInfo[i][dTipus] == ELDOB_HEROIN)
			{
				dInfo[i][dObject]	=	CreateDynamicObject(2060, dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
			if(dInfo[i][dTipus] == ELDOB_KOKAIN)
			{
				dInfo[i][dObject]	=	CreateDynamicObject(1575, dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
			if(dInfo[i][dTipus] == ELDOB_MARI)
			{
				dInfo[i][dObject]	=	CreateDynamicObject(1576, dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
			if(dInfo[i][dTipus] == ELDOB_PENZ)
			{
				dInfo[i][dObject]	=	CreateDynamicObject((dInfo[i][dErtek] > 1500000 ? 1550 : 1212), dInfo[i][dPos][0], dInfo[i][dPos][1], dInfo[i][dPos][2] - 1.0, 80.0, 0.0, random(360), dInfo[i][dVirtual], dInfo[i][dInt]);
			}
		}
	}
	printf("Szerver: %d eldobott cucc betöltve!", nums);
	return true;
}
funkcio TeruletBetoltes()
{
	print("Szerver: Területek betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1, tid, pos[32];
	    for(;++i < nums;)
	    {
            mysql_get_int(i, "ID", tid);
			mysql_get_string(i, "Nev", tInfo[tid][tNev]);
			mysql_get_string(i, "MinPos", pos);
			sscanf(pos, "p<,>a<f>[2]", tInfo[tid][tMinPos]);
			mysql_get_string(i, "MaxPos", pos);
			sscanf(pos, "p<,>a<f>[2]", tInfo[tid][tMaxPos]);
			mysql_get_int(i, "Frakcio", tInfo[tid][tFrakcio]);
			mysql_get_string(i, "Haszon", pos);
			sscanf(pos, "p<,>a<d>[5]", tInfo[tid][tHaszon]);
			mysql_get_int(i, "HaszonIdo", tInfo[tid][tHaszonIdo]);
			mysql_get_int(i, "VarakozasIdo", tInfo[tid][tVarakozasIdo]);
			tInfo[tid][tVan] = true;
			
			tInfo[tid][tZone] = GangZoneCreate(tInfo[tid][tMinPos][0], tInfo[tid][tMinPos][1], tInfo[tid][tMaxPos][0], tInfo[tid][tMaxPos][1]);
			tInfo[tid][tArea] = CreateDynamicRectangle(tInfo[tid][tMinPos][0], tInfo[tid][tMinPos][1], tInfo[tid][tMaxPos][0], tInfo[tid][tMaxPos][1]);
	    }
	}
	printf("Szerver: %d terület sikeresen betöltve!", nums);
	return true;
}

funkcio JarmuadatBetoltes()
{
    print("Szerver: Jarmuadatok betoltese!");
	
	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = NINCS, id;
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "id", id);
			mysql_get_string(i, "nev", JarmuAdat[id][jNev]);
			mysql_get_string(i, "ujnev", JarmuAdat[id][jUjNev]);
			mysql_get_int(i, "ar", JarmuAdat[id][jAr]);
			mysql_get_int(i, "lophato", JarmuAdat[id][jLophato]);
		}
	}
	
	printf("Szerver: %d jarmuadat sikeresen betoltve!", nums);
	return true;
}

funkcio JarmuBetoltes()
{
    print("Szerver: Jármûvek betöltése!");
	
	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1, vdb, vZarva2, fegyver[64];
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "ID", vdb);
			mysql_get_string(i, "Tulaj", vInfo[vdb][vTulaj]);
			mysql_get_int(i, "TulajID", vInfo[vdb][vTulajID]);
			mysql_get_int(i, "Ar", vInfo[vdb][vAr]);
			mysql_get_int(i, "Model", vInfo[vdb][vModel]);
			mysql_get_int(i, "Munka", vInfo[vdb][vMunka]);
			mysql_get_int(i, "Szin1", vInfo[vdb][vSzin1]);
			mysql_get_int(i, "Szin2", vInfo[vdb][vSzin2]);
			mysql_get_float(i, "VPosx", vInfo[vdb][vPosx]);
			mysql_get_float(i, "VPosy", vInfo[vdb][vPosy]);
			mysql_get_float(i, "VPosz", vInfo[vdb][vPosz]);
			mysql_get_float(i, "VAngle", vInfo[vdb][vAngle]);
			mysql_get_float(i, "VElet", vInfo[vdb][vElet]);
			mysql_get_int(i, "VHiba", vInfo[vdb][vHiba]);
			mysql_get_int(i, "VZarva", vZarva2);
			vInfo[vdb][vZarva] = vZarva2 ? true : false;
			mysql_get_int(i, "VRang", vInfo[vdb][vRang]);
			mysql_get_float(i, "VKilometer", vInfo[vdb][vKilometer]);
			mysql_get_float(i, "VUzemanyag", vInfo[vdb][vUzemanyag]);
			mysql_get_int(i, "VPanels", vInfo[vdb][vPanels]);
			mysql_get_int(i, "VDoors", vInfo[vdb][vDoors]);
			mysql_get_int(i, "VLights", vInfo[vdb][vLights]);
			mysql_get_int(i, "VTires", vInfo[vdb][vTires]);

			//Jármûben lévõ tárgyak
			vInfo[vdb][vVas] = 0;
			mysql_get_int(i, "vVas", 		vInfo[vdb][vVas]);
			vInfo[vdb][vMaterial] = 0;
			mysql_get_int(i, "vMaterial", 	vInfo[vdb][vMaterial]);
			vInfo[vdb][vHeroin] = 0;
			mysql_get_int(i, "vHeroin", 	vInfo[vdb][vHeroin]);
			vInfo[vdb][vKokain] = 0;
			mysql_get_int(i, "vKokain", 	vInfo[vdb][vKokain]);
			vInfo[vdb][vMarihuana] = 0;
			mysql_get_int(i, "vMarihuana", 	vInfo[vdb][vMarihuana]);

			//Fegyver betoltés
			mysql_get_string(i, "vFegyver", fegyver);
			sscanf(fegyver, "p<,>a<d>[5]", vInfo[vdb][vFegyver]);

			mysql_get_string(i, "vTolteny", fegyver);
			sscanf(fegyver, "p<,>a<d>[5]", vInfo[vdb][vTolteny]);
			
			mysql_get_int(i, "vLastActive", vInfo[vdb][vTLastActive]);
			//printf("Jármû: %d - LastActive: %d", vdb, vInfo[vdb][vTLastActive]);
			
			vInfo[vdb][vRendszam][0] = EOS;
			mysql_get_string(i, "vRendszam", vInfo[vdb][vRendszam]);
			mysql_get_int(i, "vNeon", vInfo[vdb][vNeon][0]);
			
			mysql_get_int(i, "vMod0", vInfo[vdb][vMod][0]);
			mysql_get_int(i, "vMod1", vInfo[vdb][vMod][1]);
			mysql_get_int(i, "vMod2", vInfo[vdb][vMod][2]);
			mysql_get_int(i, "vMod3", vInfo[vdb][vMod][3]);
			mysql_get_int(i, "vMod4", vInfo[vdb][vMod][4]);
			mysql_get_int(i, "vMod5", vInfo[vdb][vMod][5]);
			mysql_get_int(i, "vMod6", vInfo[vdb][vMod][6]);
			mysql_get_int(i, "vMod7", vInfo[vdb][vMod][7]);
			mysql_get_int(i, "vMod8", vInfo[vdb][vMod][8]);
			mysql_get_int(i, "vMod9", vInfo[vdb][vMod][9]);
			mysql_get_int(i, "vMod10", vInfo[vdb][vMod][10]);
			mysql_get_int(i, "vMod11", vInfo[vdb][vMod][11]);
			mysql_get_int(i, "vMod12", vInfo[vdb][vMod][12]);
			mysql_get_int(i, "vHidraulika", vInfo[vdb][vHidraulika]);
			mysql_get_int(i, "vMatrica", vInfo[vdb][vMatrica]);
			mysql_get_int(i, "vApben", vInfo[vdb][vApben]);
			mysql_get_int(i, "vGarazsban", vInfo[vdb][vGarazsban]);
			mysql_get_float(i, "vElet", vInfo[vdb][vElet]);

			vInfo[vdb][vBerelt] = false;
			vInfo[vdb][vHasznalva] = true;
			vInfo[vdb][vInsert] = true;
			vInfo[vdb][vRadio] = 0;
			
			JarmuSpawn(vdb, vInfo[vdb][vModel], vInfo[vdb][vPosx], vInfo[vdb][vPosy], vInfo[vdb][vPosz], vInfo[vdb][vAngle], vInfo[vdb][vSzin1], vInfo[vdb][vSzin2]);
				
			if(vInfo[vdb][vMunka] == 101)
				vInfo[vdb][vOktato] = CreateDynamic3DTextLabel("Tanuló vezetõ", COLOR_MKEK, vInfo[vdb][vPosx], vInfo[vdb][vPosy], vInfo[vdb][vPosz]+0.75, 20.0, .attachedvehicle = vInfo[vdb][vID]);
			
			
			if(vInfo[vdb][vMunka] < 20)
			{
				UpdateVehicleDamageStatus(vInfo[vdb][vID], vInfo[vdb][vPanels], vInfo[vdb][vDoors], vInfo[vdb][vLights], vInfo[vdb][vTires]);
				SetVehicleHealth(vInfo[vdb][vID], vInfo[vdb][vElet] > 350.0 ? vInfo[vdb][vElet] : 450.0);
				vehicleh[ vInfo[vdb][vID] ] = vInfo[vdb][vElet];
				
			}
			else {

				vehicleh[vInfo[vdb][vID]] = 1000.0;
				vInfo[vdb][vElet] = 1000.0;
			}
			if(vInfo[vdb][vApben] == 1)
				SetVehicleVirtualWorld(vdb,AP_VW);

		}
	}
	printf("Szerver: %d jármû sikeresen betöltve!", nums);
/*	for(new asd; asd < MAX_VEHICLES; asd++)
	{
		JarmuRespawn(asd);
	}*/
	return true;
}

funkcio CegMuvelet( muvelet )
{
	switch( muvelet )
	{
		case 1: //cégek betöltése
		{
			print("Szerver: Cegek betoltese!");
			
			new nums, fields;
			cache_get_data(nums, fields);
			
			if(nums)
			{
				new i = NINCS, cdb, pos[64];
				for(;++i < nums;)
				{
					mysql_get_int(i, "Id", cdb);
					mysql_get_string(i, "ANev", CegInfo[cdb][cANev]);
					mysql_get_string(i, "Nev", CegInfo[cdb][cNev]);
					mysql_get_int(i, "Tipus", CegInfo[cdb][cTipus]);
					mysql_get_string(i, "Tulaj", CegInfo[cdb][cTulaj]);
					mysql_get_int(i, "TulajID", CegInfo[cdb][cTulajID]);
					mysql_get_int(i, "FTulaj", CegInfo[cdb][cFTulaj]);
					mysql_get_int(i, "Belepo", CegInfo[cdb][cBelepo]);
					mysql_get_int(i, "Kassza", CegInfo[cdb][cKassza]);
					mysql_get_int(i, "Ar", CegInfo[cdb][cAr]);
					
					pos[0] = EOS;
					mysql_get_string(i, "PosBe", pos);
					sscanf(pos, "p<,>ffff", PosExt(CegInfo[cdb][cPosBe]), CegInfo[cdb][cPosBe][3]);
					
					pos[0] = EOS;
					mysql_get_string(i, "PosKi", pos);
					sscanf(pos, "p<,>ffff", PosExt(CegInfo[cdb][cPosKi]), CegInfo[cdb][cPosKi][3]);
					
					pos[0] = EOS;
					mysql_get_string(i, "Vw", pos);
					sscanf(pos, "p<,>dd", CegInfo[cdb][cVw][0], CegInfo[cdb][cVw][1]);
					
					pos[0] = EOS;
					mysql_get_string(i, "Inte", pos);
					sscanf(pos, "p<,>dd", CegInfo[cdb][cInt][0], CegInfo[cdb][cInt][1]);
					
					CegInfo[cdb][cPickup] = CreateDynamicPickup(1239, 23, PosExt(CegInfo[cdb][cPosBe]), CegInfo[cdb][cVw][0], CegInfo[cdb][cInt][0], NINCS);
					CegInfo[cdb][cVan] = true;
				}
			}
			
			printf("Szerver: %d ceg sikeresen betoltve!", nums);
		}
		
		case 2://cégek mentése
		{
			new query[1024], i = NINCS;
			for(;++i < MAX_CEG;)
			{
				if(CegInfo[i][cVan])
				{
					format(query, sizeof(query), "UPDATE `"#MYSQL_CEGEK_TABLA"` SET ");
					//MySQLUpdateSTR(query, "ANev", CegInfo[i][cANev]);
					//MySQLUpdateSTR(query, "Nev", CegInfo[i][cNev]);
					//MySQLUpdateINT(query, "Tipus", CegInfo[i][cTipus]);
					MySQLUpdateSTR(query, "Tulaj", CegInfo[i][cTulaj]);
					MySQLUpdateINT(query, "TulajID", CegInfo[i][cTulajID]);
					MySQLUpdateINT(query, "FTulaj", CegInfo[i][cFTulaj]);
					
					MySQLUpdateINT(query, "Belepo", CegInfo[i][cBelepo]);
					MySQLUpdateINT(query, "Kassza", CegInfo[i][cKassza]);
					
					//format(pos, 256, "%f,%f,%f,%f", PosExt(CegInfo[i][cPosBe]), CegInfo[i][cAngBe][3]);
					//MySQLUpdateSTR(query, "PosBe", pos);
					
					//format(pos, 256, "%f,%f,%f,%f", PosExt(CegInfo[i][cPosKi]), CegInfo[i][cAngKi][3]);
					//MySQLUpdateSTR(query, "PosKi", pos);
					
					//MySQLUpdateINT(query, "Vw", CegInfo[i][cVw]);
					//MySQLUpdateINT(query, "Inte", CegInfo[i][cInt]);
					
					MySQLFinalUpdate(query, "Id", i);
				}
			}
		} //cég mentés vége
	}
	return true;
}


funkcio BenzinkutBetoltes()
{
	print("Szerver: Benzinkútak betöltése!");

	new nums, fields, bid = 0;
	cache_get_data(nums, fields);

	if(nums)
	{
		new i = -1;
		for(;++i < nums;)
		{
			mysql_get_int(i, "id", bid);
			mysql_get_string(i, "bnev", BenzinkutInfo[bid][bnev]);
			mysql_get_float(i, "bposx", BenzinkutInfo[bid][bposx]);
			mysql_get_float(i, "bposy", BenzinkutInfo[bid][bposy]);
			mysql_get_float(i, "bposz", BenzinkutInfo[bid][bposz]);
			mysql_get_int(i, "bbenzinmennyiseg", BenzinkutInfo[bid][bbenzinmennyiseg]);
			mysql_get_int(i, "bdieselmennyiseg", BenzinkutInfo[bid][bdieselmennyiseg]);
			mysql_get_float(i, "bradius", BenzinkutInfo[bid][bradius]);
			BenzinkutInfo[bid][bhasznalva] = true;
			BenzinkutInfo[bid][blistitem] = -1;
			bid++;
		}
	}

	if(bid) printf("Szerver: %d benzinkút sikeresen betöltve!", bid);
	else print("Szerver: Nem lett betöltve benzinkút!");
	return true;
}
funkcio GPSBetoltes()
{
	print("Szerver: GPS Koordináták betöltése!");

	new nums, fields, gid = 0;
	cache_get_data(nums, fields);

	if(nums)
	{
		new i = -1;
		for(;++i < nums;)
		{
			mysql_get_int(i, "id", gid);
			mysql_get_float(i, "posx", GPSInfo[gid][gposx]);
			mysql_get_float(i, "posy", GPSInfo[gid][gposy]);
			mysql_get_float(i, "posz", GPSInfo[gid][gposz]);
			mysql_get_string(i, "gnev", GPSInfo[gid][gnev]);
			GPSInfo[gid][gHasznalva] = true;
			gid++;
		}
	}

	if(gid) printf("Szerver: %d GPS koordináta lett betöltve!", gid);
	else print("Szerver: Nem lett betöltve GPS Koordináta!");
	return true;
}

stock FavagoFak()
{
	new x = -1;
	for(;++x < sizeof(FaHelyek);)
	{
		FaObjectek[x] = CreateDynamicObject(618, FaHelyek[x][fPosX], FaHelyek[x][fPosY], FaHelyek[x][fPosZ], 0.0, 0.0, 0.0);
	}
	print("Szerver: Fák sikeresen lerakva!");
	return true;
}

funkcio KapuBetoltes()
{
	print("Szerver: Kapuk betöltése!");

	new nums, fields, kid = 0;
	cache_get_data(nums, fields);

	if(nums)
	{
		new i = -1, kapupos[64], hasznalo[64], nyit;
		for(;++i < nums;)
		{
			mysql_get_int(i, "ID", kid);
			mysql_get_string(i, "Nev", Kapu[kid][kNev]);
			mysql_get_int(i, "Model", Kapu[kid][kModel]);
			mysql_get_float(i, "Tav", Kapu[kid][kTav]);
			mysql_get_float(i, "Speed", Kapu[kid][kSpeed]);

			mysql_get_string(i, "Pos", kapupos);
			sscanf(kapupos, "p<,>fff", PosExt(Kapu[kid][kPos]));

			mysql_get_string(i, "NPos", kapupos);
			sscanf(kapupos, "p<,>fff", PosExt(Kapu[kid][kNPos]));

			mysql_get_string(i, "NRPos", kapupos);
			sscanf(kapupos, "p<,>fff", PosExt(Kapu[kid][kNRPos]));

			mysql_get_string(i, "ZPos", kapupos);
			sscanf(kapupos, "p<,>fff", PosExt(Kapu[kid][kZPos]));

			mysql_get_string(i, "ZRPos", kapupos);
			sscanf(kapupos, "p<,>fff", PosExt(Kapu[kid][kZRPos]));

			if(Kapu[kid][kSpeed] <= 0.0) Kapu[kid][kMozgo] = false;
			else Kapu[kid][kMozgo] = true;

			mysql_get_string(i, "Hasznalo", hasznalo);
			sscanf(hasznalo, "p<,>a<d>["#MAX_KAPU_HASZNALO"]", Kapu[kid][kHasznalo]);

			mysql_get_int(i, "nyit", nyit); 
			Kapu[kid][kNyit] = nyit ? true : false;
			
			mysql_get_int(i, "Vw", Kapu[kid][kVW]);
			mysql_get_int(i, "Kod", Kapu[kid][kKod]);

			Kapu[kid][kOID] = CreateDynamicObject(Kapu[kid][kModel], PosExt(Kapu[kid][kZPos]), PosExt(Kapu[kid][kZRPos]),Kapu[kid][kVW]);

			Kapu[kid][kVan] = true;
			kid++;
		}
	}

	if(kid) printf("Szerver: %d kapu sikeresen betöltve!", kid);
	else print("Szerver: Nem lett betöltve kapu!");

	new k = -1;
	for(;++k < MAX_KAPU;)
	{
		if(Kapu[k][kNyit])
		{
			printf("Szerver: Kapu nyitása: %d",k);
			if(Kapu[k][kMozgo])
				MoveDynamicObject(Kapu[k][kOID], PosExt(Kapu[k][kNPos]), Kapu[k][kSpeed]);
			else
			{
				SetDynamicObjectPos(Kapu[k][kOID], PosExt(Kapu[k][kNPos]));
				SetDynamicObjectRot(Kapu[k][kOID], PosExt(Kapu[k][kNRPos]));
			}
		}
	}
	return true;
}

stock Adat_Num( id, mit )
{
	new num = 0, i = NINCS;
	for(;++i < MAX_HAZ_JARMU;)
	{
		if(mit == ADAT_HAZ && (PlayerInfo[id][pHazKulcs][i] != NINCS))
			num++;
		
		if(mit == ADAT_JARMU && (PlayerInfo[id][pJarmuKulcs][i] != NINCS && vInfo[PlayerInfo[id][pJarmuKulcs][i]][vHasznalva]))
			num++;
	}
	return num;
}

stock Adat_Update(id, mit)
{
	new i = -1, num = 0, vid, str[128];
	if(mit == ADAT_HAZ || !mit)
	{
		for(;++i < MAX_HOUSE;)
		{
			if(HazInfo[i][hasznalatban])
			{
				//if(strlen(HazInfo[i][tulaj]) && !strcmp(JatekosNev(id), HazInfo[i][tulaj]))
				if(HazInfo[i][hTulajID] == PlayerInfo[id][pID])
				{
					if(num < MAX_HAZ_JARMU)
					{
						str[0] = EOS;
						format(HazInfo[i][tulaj], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pNev]);
						format(str, sizeof(str), "Házszám: ~g~%d.~n~~w~Tulaj: ~g~%s.", i, HazInfo[i][tulaj]);
						TextDrawSetString(HazInfo[i][HazTextDraw], str);
						PlayerInfo[id][pHazKulcs][num] = i;
						num++;
						if(num == MAX_HAZ_JARMU) break;
					}
				}
			}
		}
	}
	if(mit == ADAT_JARMU || !mit)
	{
		num = 0;
		foreach(Jarmuvek, kid)
		{
			vid = JarmuID(kid, id);
			if(vInfo[vid][vHasznalva])
			{
				if(vInfo[vid][vTulajID] == PlayerInfo[id][pID])
				{
					if(num < MAX_HAZ_JARMU)
					{
						format(vInfo[vid][vTulaj], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pNev]);
						PlayerInfo[id][pJarmuKulcs][num] = vid;
						vInfo[vid][vTLastActive] = gettime();//utoljára aktív
						num++;
						if(num == MAX_HAZ_JARMU) break;
					}
				}
			}
		}
	}
	if(mit == ADAT_CEG || !mit)
	{
		i = NINCS;
		for(;++i < MAX_CEG;)
		{
			if(!CegInfo[i][cVan] || CegInfo[i][cTulajID] != PlayerInfo[id][pID])
				continue;
			
			format(CegInfo[i][cTulaj], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pNev]);
			PlayerInfo[id][pCegKulcs] = i;
		}
	}
	//ExProcess -> update
	if(mit == ADAT_HAZ_EX || mit == ADAT_MINDEN_EX)
	{
		i = NINCS;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[id][pHazKulcs][i] != NINCS)
			{
				str[0] = EOS;
				format(HazInfo[ PlayerInfo[id][pHazKulcs][i] ][tulaj], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pNev]);
				format(str, sizeof(str), "Házszám: ~g~%d.~n~~w~Tulaj: ~g~%s.", PlayerInfo[id][pHazKulcs][i], HazInfo[ PlayerInfo[id][pHazKulcs][i] ][tulaj]);
				TextDrawSetString(HazInfo[ PlayerInfo[id][pHazKulcs][i] ][HazTextDraw], str);
			}
		}
	}
	if(mit == ADAT_JARMU_EX || mit == ADAT_MINDEN_EX)
	{
		i = NINCS;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[id][pJarmuKulcs][i] != NINCS)
			{
				format(vInfo[ PlayerInfo[id][pJarmuKulcs][i] ][vTulaj], MAX_PLAYER_NAME, "%s", PlayerInfo[id][pNev]);
				
				vInfo[vid][vTLastActive] = gettime();//utoljára aktív
				vUpdate(PlayerInfo[id][pJarmuKulcs][i], vuTulaj);
			}
		}
	}
	return true;
}

stock DefenseCheck( playerid )
{
	new regi = PlayerInfo[playerid][padmin];
	//if(IsScripter(playerid) && regi != 5555)
		//PlayerInfo[playerid][padmin] = 5555;
	if(regi > TULAJ_SZINT && !IsScripter(playerid))
		PlayerInfo[playerid][padmin] = TULAJ_SZINT;
	else if(regi < 0) PlayerInfo[playerid][padmin] = 0;
	
	if(regi != PlayerInfo[playerid][padmin])
		SFM(playerid, COL_LRED, "Adminszint korrekció! Régi: %d -> új: %d", regi, PlayerInfo[playerid][padmin]);
	
	#if !defined HAZI_SZERVER
	if(PlayerInfo[playerid][padmin] > 0)
	{
		if(strlen(PlayerInfo[playerid][pDefense]) > 0)
			ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_FEHER"Kérlek add meg az Admin jelszavad!", "Belépés", "Mégse");
		else
		{
			PlayerInfo[playerid][pDefensed][1] = 1;
			ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_FEHER"Kérlek add meg leendõ Admin jelszavad!\n"#COL_PIROS"Ne felejtsd el, mert minden belépésnél szükséged lesz rá!", "Mentés", "Mégse");
		}
	}
	#endif
	
	return true;
}

stock FajlIras(fajl[], szoveg[])
{
	new File:teszt;
	teszt = fopen(fajl, io_append);
	fwrite(teszt, szoveg);
	fclose(teszt);
}

stock KozeliHaz(playerid)
{
	new
	    ciklus = -1,
	    houseid = -1;

	for(;++ciklus < MAX_HOUSE;)
	{
	    if(HazInfo[ciklus][hasznalatban])
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 1.0, HazInfo[ciklus][posx], HazInfo[ciklus][posy], HazInfo[ciklus][posz]))
	        {
	            houseid = ciklus;
	            break; //megtaláltuk a házat! :D
	        }
	    }
	}
	return houseid;
}


stock AdminUzenetEx(colour = COLOR_LIGHTRED, szint = 1, const szoveg[])
{
	new formazas[128];
	if(szint == 1000 || szint == 1001)//prefix nélkül, így nem kell új funkció xd
		format(formazas, sizeof(formazas), "%s", szoveg);
	else
		format(formazas, sizeof(formazas), "[Admin]: %s", szoveg);
		
	if(szint == 1000) szint = 0;
	else if(szint == 1001) szint = 1;
	else if(szint > FOADMIN_SZINT && szint != 5555) szint = FOADMIN_SZINT;
	
	foreach(Player, playerid)
	{
		if(Belepve(playerid) && !PlayerInfo[playerid][pTog][3])
		{
			if((szint != 0 && Admin(playerid, szint)) || (szint == 0 && IsAS(playerid)))
				SendClientMessage(playerid, colour, formazas);
		}
	}
	return true;
}

stock SpawnHouse(houseid, text[], pickupmodel)
{
	//HazInfo[houseid][label] = CreateDynamic3DTextLabel(text,0xFFFFFF,HazInfo[houseid][posx],HazInfo[houseid][posy],HazInfo[houseid][posz]+0.75,20,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,true,0,0,-1);
	HazInfo[houseid][HazTextDraw] = TextDrawCreate(310.000000, 182.000000, text);
	TextDrawAlignment(HazInfo[houseid][HazTextDraw], 2);
	TextDrawBackgroundColor(HazInfo[houseid][HazTextDraw], 255);
	TextDrawFont(HazInfo[houseid][HazTextDraw], 1);
	TextDrawLetterSize(HazInfo[houseid][HazTextDraw], 0.539999, 1.799998);
	TextDrawColor(HazInfo[houseid][HazTextDraw], -1);
	TextDrawSetOutline(HazInfo[houseid][HazTextDraw], 1);
	TextDrawSetProportional(HazInfo[houseid][HazTextDraw], 1);
	TextDrawUseBox(HazInfo[houseid][HazTextDraw], 1);
	TextDrawBoxColor(HazInfo[houseid][HazTextDraw], 50);
	TextDrawTextSize(HazInfo[houseid][HazTextDraw], 396.000000, 254.000000);
	//printf("%f|%f|%f", HazInfo[houseid][posx],HazInfo[houseid][posy],HazInfo[houseid][posz]);
	HazInfo[houseid][pickup] = CreateDynamicPickup(pickupmodel,23,HazInfo[houseid][posx],HazInfo[houseid][posy],HazInfo[houseid][posz],0,0,-1);
}

stock BelsoPickup(houseid, belso) {
	HazInfo[houseid][belsolabel] = CreateDynamic3DTextLabel("Kijárat",0xFFFFFF,BelsoInterior[HazInfo[houseid][inter]][belsox],BelsoInterior[HazInfo[houseid][inter]][belsoy],BelsoInterior[HazInfo[houseid][inter]][belsoz]+0.75,20,.worldid=houseid,.interiorid=BelsoInterior[belso][interior]);
	HazInfo[houseid][belsopickup] = CreateDynamicPickup(1318,23,BelsoInterior[HazInfo[houseid][inter]][belsox],BelsoInterior[HazInfo[houseid][inter]][belsoy],BelsoInterior[HazInfo[houseid][inter]][belsoz],houseid,BelsoInterior[HazInfo[houseid][inter]][interior],-1);
}

stock GetNewHouseID() {
	new
	    i = -1,
	    houseid = -1;
	for (;++i < MAX_HOUSE; )
	{
		if(!HazInfo[i][hasznalatban])
		{
			houseid = i;
			break;
		}
	}
	return houseid;
}

stock PutPlayerInHouse(playerid, houseid)
{
	if(houseid == -1)
		return false;
	
	new interior2 = HazInfo[houseid][inter];
	SetInterior(playerid, BelsoInterior[interior2][interior]);
	SetVirtualWorld(playerid, houseid);
	SetPos(playerid, BelsoInterior[interior2][belsox],BelsoInterior[interior2][belsoy],BelsoInterior[interior2][belsoz]);
	SetPlayerFacingAngle(playerid, BelsoInterior[interior2][belsoszog]);
	SetCameraBehindPlayer(playerid);
	PlayerInfo[playerid][phaz] = houseid;
	Freeze(playerid,5000);
	Streamer_Update(playerid);
	return true;
}

stock RemovePlayerFromHouse(playerid, houseid)
{
	if(houseid == -1)
		return false;
	
	SetPlayerInterior(playerid, 0);
	SetVirtualWorld(playerid, 0);
	SetPlayerPos(playerid, HazInfo[houseid][posx], HazInfo[houseid][posy], HazInfo[houseid][posz]+0.50);
	SetCameraBehindPlayer(playerid);
	PlayerInfo[playerid][phaz] = -1;
	Freeze(playerid, 2500);
	return true;
}

stock BanIdo(hour, bool:extra)
{
	new meddig[32];
	if(extra) meddig = "Örökre";
	else meddig = "Soha";
	
	if(hour <= 0)
	    return meddig;
		
	if(hour < 24)
		format(meddig, sizeof(meddig), "%d órára", hour);
	else if(hour >= 24 && hour < (24*7))
	{
		if(hour % 24 == 0)
			format(meddig, sizeof(meddig), "%d napra", (hour / 24));
		else
			format(meddig, sizeof(meddig), "%d napra és %d órára", floatround(hour/24, floatround_floor), (hour%24));
	}
	else if(hour >= (24*7))
	{
		if(hour % (24*7) == 0)
			format(meddig, sizeof(meddig), "%d hétre", (hour/24/7));
		else
		{
			if(hour % 24 == 0)
				format(meddig, sizeof(meddig), "%d hétre és %d napra", floatround(hour/24/7, floatround_floor), floatround((hour/24)%7, floatround_floor));
			else
				format(meddig, sizeof(meddig), "%d hétre, %d napra, és %d órára", floatround(hour/24/7, floatround_floor), floatround((hour/24)%7, floatround_floor), (hour%24));
		}
	}
	return meddig;
}

stock ValtozokNullazasa( playerid )//vnull
{
	new i = NINCS;
	
	for(;++i != sizeof(PlayerInfo[]);)
		PlayerInfo[playerid][playerInfo:i] = EOS;
	
	#if ACCOUNT_KEZELES == 1
	
	i = NINCS;
	for(;++i != sizeof(UserControl[]);)
		UserControl[playerid][userControl:i] = EOS;
	
	#endif
	
	UserControl[playerid][uKarakterO][0] = 0;
	UserControl[playerid][uKarakterO][1] = 0;
	//IDE AMI ALAPBÓL NEM NULLA AZ ÉRTÉKE
	strmid(HifiZene[playerid],"-",0,strlen("-"),256);
	ALogIn[playerid] = {0, 0};
	CsomagtartoAFK[playerid] = 0;
	MunkaCP[playerid][0] = 0.0;
	SetPlayerVirtualWorld(playerid,6534);
	KillTimer(PlayerInfo[playerid][pBHackTimer]);
	MunkaCP[playerid][1] = 0.0;
	MunkaCP[playerid][2] = 0.0;
	strmid(ZeneHallgatHifibol[playerid],"---",0,strlen("---"),32);
	ZenetHallgat[playerid] = 0;
	CPbe[playerid][0] = 0.0;
	Megmotozna[playerid] = NINCS;
	HifiObjectLerakas[playerid] = -1;
	Warning[playerid] = 0;Lefagyasztva[playerid] = 0;AlapVWje[playerid] = 0;
	NPCFloodVedelem[playerid] = 0;
	Bejelzett[playerid] = 0;
	AccountID[playerid] = 0;
	KezetfognaStilus[playerid] = NINCS;
	Kezetfogna[playerid] = NINCS;
	PenztRabol[playerid] = 0;
	LeCheckolva[playerid] = 0;
	CPbe[playerid][1] = 0.0;
	CPbe[playerid][2] = 0.0;
	Insertalta[playerid] = 0;

	Hatarozas[playerid] = 0;
	Fishing[playerid] = 0;
	GraffitiObjectLerakas[playerid] = NINCS;
	NPCBeszelgetes[playerid] = 0;
	GPSFloodolas[playerid] = 0;
	AFKDialogShowing[playerid] = 0;
	PlayerInfo[playerid][pAdminAlnevbe] = false;
	Elso[playerid] = 0;
	AFKTimer[playerid] = 0;
	HuzzadVaze[playerid] = 0;
	VasPlayerID[playerid] = 0;
	VasNala[playerid] = 0;
	PlayerInfo[playerid][pBMennyi] = 0;
	PlayerInfo[playerid][pallreport] = false;
	PlayerInfo[playerid][pNoname] = 0;
	smkocsiid[playerid] = 0;
	strmid(PlayerInfo[playerid][pHazasodvaVele],"Senki",0,strlen("Senki"),MAX_PLAYER_NAME);

	PlayerInfo[playerid][pAlnevbe] = false;
	strmid(PlayerInfo[playerid][pAlnev],"Senki",0,strlen("Senki"),32);

	Beirhatjahogyigen[playerid] = -1;
	Hazassag[playerid] = -1;
    SzereloDuty[playerid] = false;
	CsipogoIdo[playerid] = 0;
	PlayerInfo[playerid][pCsipogo] = 0;
	PlayerInfo[playerid][pKanna] = 0;
	PlayerInfo[playerid][pKannaBenzin] = 0;
    PlayerInfo[playerid][pID] 					= NINCS;
	PlayerInfo[playerid][pwarnok] 				= 1;
	PlayerInfo[playerid][phaz] 					= NINCS;
	PlayerInfo[playerid][pbemehet] 				= true;
	PlayerInfo[playerid][ptelefonaloid] 		= NINCS;
	PlayerInfo[playerid][pElet] 				= MAX_HP;
	PlayerInfo[playerid][pMelyikKapu] 			= NINCS;
	PlayerInfo[playerid][pMegerosites]			= NINCS;
	PlayerInfo[playerid][pFrakcioKezeles] 		= NINCS;
	PlayerInfo[playerid][pTV][0]				= NINCS;
	PlayerInfo[playerid][pTV][2]				= NINCS;
	PlayerInfo[playerid][pKiertMegy] 			= NINCS;
	PlayerInfo[playerid][pVisz] 				= NINCS;
	PlayerInfo[playerid][pReport][1] 			= NINCS;
	PlayerInfo[playerid][pCamera]				= 0;
	PlayerInfo[playerid][pCameraE]				= 0;
	PlayerInfo[playerid][pBHackMelyik] 			= 0;
	PlayerInfo[playerid][pFegyver]				= 0;
	AutomataID[playerid]						= NINCS;
	PlayerInfo[playerid][peladokitol] 			= NINCS;
	PlayerInfo[playerid][pScriptShoot][0] 		= NINCS;
	PlayerInfo[playerid][pScriptShoot][1] 		= NINCS;
	PlayerInfo[playerid][pHarcstilusTanul]     = false;
	for(new ci=0;ci<9;ci++)
	{
		PlayerInfo[playerid][pFegyvertVasarolt][ci]     = 0;
		PlayerInfo[playerid][pNPCSzobaAll][ci]     = 0;
	}
	PlayerInfo[playerid][pNPCSzobaAll]     = 0;
	PlayerInfo[playerid][pFegyver]				= 0;
	//0 = melyik channel, 1 = idõ, 2 = admin nézi, 3 = eddig repoltolhat
	
	i = NINCS;
	for(;++i < MAX_HAZ_JARMU;)
	{
		PlayerInfo[playerid][pHazKulcs][i] = NINCS;
		PlayerInfo[playerid][pJarmuKulcs][i] = NINCS;
	}
	
	SzerkesztesAllas[playerid] = 0;
	KapuID[playerid] = NINCS;
	
	noclipdata[playerid][cameramode] 	= 	CAMERA_MODE_NONE;//FlyMode
	noclipdata[playerid][lrold]	   	 	= 	0;
	noclipdata[playerid][udold]   		= 	0;
	noclipdata[playerid][mode]   		= 	0;
	noclipdata[playerid][lastmove]   	= 	0;
	noclipdata[playerid][accelmul]   	= 	0.0;
}

stock BotCheck(playerid)
{
	new gpciserial[128], valami[128];
	gpci(playerid, gpciserial, sizeof(gpciserial));
	new DB:SERIALS = db_open("botserials.db");

	if(SERIALS)
	{
		new DBResult:EREDMENY;
		format(valami, sizeof(valami), "SELECT * FROM serialok WHERE serialok = '%s'", gpciserial);
		EREDMENY = db_query(SERIALS, valami);
		if(db_num_rows(EREDMENY) != 0)
		{
			db_close(SERIALS);
			return false;
		}
	}
	db_close(SERIALS);
	return true;
}

stock ShowVehicleTextDraw( p )
{
	new i = -1;

	if(!IsABicikli(vInfo[ PlayerInfo[p][pJarmuben] ][vModel]))
		for(;++i < 7;) PlayerTextDrawShow(p, JarmuInfo[p][i]);
	else
		for(;++i < 6;) PlayerTextDrawShow(p, JarmuInfo[p][i]);

	return true;
}

stock HideVehicleTextDraw(playerid)
{
	new i = -1;

	for(;++i < 7;)
		PlayerTextDrawHide(playerid, JarmuInfo[playerid][i]);

	return true;
}

//Alsó ts mutatás
stock ShowInfoTextDraw(playerid)
{
	new i = -1;

	for(;++i < 7;)
		PlayerTextDrawShow(playerid, Info[playerid][i]);

	return true;
}

//Alsó TD elrejtés
stock HideInfoTextDraw(playerid)
{
	new i = -1;

	for(;++i < 7;)
		PlayerTextDrawHide(playerid, Info[playerid][i]);

	return true;
}
stock UpdateVehicleInfo(playerid, vid)
{
	if(IsPlayerInAnyVehicle(playerid) && !GetPlayerVehicleSeat(playerid))
	{
		new fo[64];

	//	if(strlen(JarmuAdat[vInfo[vid][vModel] - 400][jUjNev]) > 2)
	//		format(fo, sizeof(fo), "Model:_%s", JarmuAdat[ vInfo[vid][vModel] - 400 ][jUjNev]);
		/*else*/ 
		//format(fo, sizeof(fo), "Sebesség:_%d km/h", GetVehicleSpeed(vInfo[vid][vID])); //OnPlayerUpdate alatt
		//PlayerTextDrawSetString(playerid, JarmuInfo[playerid][3], fo);

		if(vInfo[vid][vKilometer] <= 1000)
			format(fo, sizeof(fo), "Kilométer:_%.2fm", vInfo[vid][vKilometer]);
		else
			format(fo, sizeof(fo), "Kilométer:_%.2fkm", vInfo[vid][vKilometer] / 1000);
			
		PlayerTextDrawSetString(playerid, JarmuInfo[playerid][1], fo);

		if(!IsABicikli(vInfo[vid][vModel]) && Uzemanyagok[ vInfo[vid][vModel] - 400 ] != 0)
		{
			if(Uzemanyagok[ vInfo[vid][vModel] - 400 ] == 1)
				format(fo, sizeof(fo), "Üzemanyag:_%.1f/%d_B", vInfo[vid][vUzemanyag], MAX_Benzin[ vInfo[vid][vModel] - 400 ]);
			else if(Uzemanyagok[ vInfo[vid][vModel] - 400 ] == 2)
				format(fo, sizeof(fo), "Üzemanyag:_%.1f/%d_D", vInfo[vid][vUzemanyag], MAX_Benzin[ vInfo[vid][vModel] - 400]);
			PlayerTextDrawSetString(playerid, JarmuInfo[playerid][2], fo);
		}
	}
	return true;
}

stock UpdateVehicleSpeedInfo( playerid )
{
	if(IsPlayerInAnyVehicle(playerid) && !GetPlayerVehicleSeat(playerid))
	{
		new fo[64], kmh = GetVehicleSpeed( GetPlayerVehicleID(playerid) );
		format(fo, sizeof(fo), "Sebesség:_%d km/h", kmh);
		PlayerTextDrawSetString(playerid, JarmuInfo[playerid][0], fo);
		if(PlayerInfo[playerid][pSzunetel] && IsPlayerInAnyVehicle(playerid) && kmh > 1)
			CallLocalFunction("OnPlayerPause", "dd", playerid, 0);
	}
	return true;
}

stock UpdatePlayerInfo(playerid)
{
	new fo[64], date[3], time[3];
	if(!PlayerInfo[playerid][pFrakcio]) {
	    format(fo, sizeof(fo), "Frakció: Nincs (Civil)");
	    PlayerTextDrawSetString(playerid, Info[playerid][2], fo);

	    format(fo, sizeof(fo), "Rang: Nincs");
		PlayerTextDrawSetString(playerid, Info[playerid][3], fo);
	} else {
		format(fo, sizeof(fo), "Frakció: %s", FInfo[PlayerInfo[playerid][pFrakcio]][fNev]);
		PlayerTextDrawSetString(playerid, Info[playerid][2], fo);

		format(fo, sizeof(fo), "Rang: %s(%d)", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), PlayerInfo[playerid][prang]);
		PlayerTextDrawSetString(playerid, Info[playerid][3], fo);
	}

	format(fo, sizeof(fo), "Fizetés: még %d perc", PlayerInfo[playerid][pFizetesIdo]);
	PlayerTextDrawSetString(playerid, Info[playerid][4], fo);

	getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);

	format(fo, sizeof(fo), "Dátum: %d-%02d-%02d %02d:%02d", PosExt(date), time[0], time[1]);
	PlayerTextDrawSetString(playerid, Info[playerid][5], fo);
	return true;
}

stock LoginDrawBetoltes(playerid)
{
	LoginDraw[playerid][0] = CreatePlayerTextDraw(playerid,159.000000, 121.000000, "Bejelentkezés");
	PlayerTextDrawBackgroundColor(playerid,LoginDraw[playerid][0], 255);
	PlayerTextDrawFont(playerid,LoginDraw[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,LoginDraw[playerid][0], 0.439999, 1.799999);
	PlayerTextDrawColor(playerid,LoginDraw[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,LoginDraw[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,LoginDraw[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,LoginDraw[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,LoginDraw[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,LoginDraw[playerid][0], 512819010);
	PlayerTextDrawTextSize(playerid,LoginDraw[playerid][0], 481.000000, -330.000000);
	PlayerTextDrawSetSelectable(playerid,LoginDraw[playerid][0], 0);

	LoginDraw[playerid][1] = CreatePlayerTextDraw(playerid,159.000000, 142.000000, "~n~");
	PlayerTextDrawBackgroundColor(playerid,LoginDraw[playerid][1], 255);
	PlayerTextDrawFont(playerid,LoginDraw[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid,LoginDraw[playerid][1], 0.500000, 15.300000);
	PlayerTextDrawColor(playerid,LoginDraw[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,LoginDraw[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,LoginDraw[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,LoginDraw[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,LoginDraw[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid,LoginDraw[playerid][1], 80);
	PlayerTextDrawTextSize(playerid,LoginDraw[playerid][1], 481.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,LoginDraw[playerid][1], 0);

	LoginDraw[playerid][2] = CreatePlayerTextDraw(playerid,188.000000, 178.000000, "Felhasználónév:");
	PlayerTextDrawBackgroundColor(playerid,LoginDraw[playerid][2], 255);
	PlayerTextDrawFont(playerid,LoginDraw[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid,LoginDraw[playerid][2], 0.430000, 1.800000);
	PlayerTextDrawColor(playerid,LoginDraw[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,LoginDraw[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,LoginDraw[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,LoginDraw[playerid][2], 1);
	PlayerTextDrawSetSelectable(playerid,LoginDraw[playerid][2], 0);

	LoginDraw[playerid][3] = CreatePlayerTextDraw(playerid,305.000000, 182.000000, "felhasználónév");
	PlayerTextDrawBackgroundColor(playerid,LoginDraw[playerid][3], 255);
	PlayerTextDrawFont(playerid,LoginDraw[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid,LoginDraw[playerid][3], 0.340000, 1.299900);
	PlayerTextDrawColor(playerid,LoginDraw[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,LoginDraw[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,LoginDraw[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,LoginDraw[playerid][3], 1);
	PlayerTextDrawUseBox(playerid,LoginDraw[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid,LoginDraw[playerid][3], 512819010);
	PlayerTextDrawTextSize(playerid,LoginDraw[playerid][3], 462.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid,LoginDraw[playerid][3], true);

	LoginDraw[playerid][4] = CreatePlayerTextDraw(playerid,247.000000, 200.000000, "Jelszó:");
	PlayerTextDrawBackgroundColor(playerid,LoginDraw[playerid][4], 255);
	PlayerTextDrawFont(playerid,LoginDraw[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid,LoginDraw[playerid][4], 0.460000, 1.700000);
	PlayerTextDrawColor(playerid,LoginDraw[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,LoginDraw[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,LoginDraw[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,LoginDraw[playerid][4], 1);
	PlayerTextDrawSetSelectable(playerid,LoginDraw[playerid][4], 0);

	LoginDraw[playerid][5] = CreatePlayerTextDraw(playerid,305.000000, 203.000000, "jelszó");
	PlayerTextDrawBackgroundColor(playerid,LoginDraw[playerid][5], 255);
	PlayerTextDrawFont(playerid,LoginDraw[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid,LoginDraw[playerid][5], 0.340000, 1.299999);
	PlayerTextDrawColor(playerid,LoginDraw[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,LoginDraw[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,LoginDraw[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,LoginDraw[playerid][5], 1);
	PlayerTextDrawUseBox(playerid,LoginDraw[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid,LoginDraw[playerid][5], 512819010);
	PlayerTextDrawTextSize(playerid,LoginDraw[playerid][5], 462.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid,LoginDraw[playerid][5], true);

	LoginDraw[playerid][6] = CreatePlayerTextDraw(playerid,318.000000, 242.000000, "Belépés");
	PlayerTextDrawAlignment(playerid,LoginDraw[playerid][6], 2);
	PlayerTextDrawBackgroundColor(playerid,LoginDraw[playerid][6], 255);
	PlayerTextDrawFont(playerid,LoginDraw[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid,LoginDraw[playerid][6], 0.480000, 1.799999);
	PlayerTextDrawColor(playerid,LoginDraw[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid,LoginDraw[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,LoginDraw[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid,LoginDraw[playerid][6], 1);
	PlayerTextDrawUseBox(playerid,LoginDraw[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid,LoginDraw[playerid][6], 512819010);
	PlayerTextDrawTextSize(playerid,LoginDraw[playerid][6], 24.000000, 191.000000);
	PlayerTextDrawSetSelectable(playerid,LoginDraw[playerid][6], true);

	LoginDraw[playerid][7] = CreatePlayerTextDraw(playerid,236.000000, 144.000000, "SeeRPG");//Phoenix RolePlay
	PlayerTextDrawBackgroundColor(playerid,LoginDraw[playerid][7], 255);
	PlayerTextDrawFont(playerid,LoginDraw[playerid][7], 0);
	PlayerTextDrawLetterSize(playerid,LoginDraw[playerid][7], 0.820000, 2.700000);
	PlayerTextDrawColor(playerid,LoginDraw[playerid][7], -1);
	PlayerTextDrawSetOutline(playerid,LoginDraw[playerid][7], 0);
	PlayerTextDrawSetProportional(playerid,LoginDraw[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid,LoginDraw[playerid][7], 1);
	PlayerTextDrawSetSelectable(playerid,LoginDraw[playerid][7], 0);

	CharacterDraw[playerid][0] = CreatePlayerTextDraw(playerid,154.000000, 124.000000, "Kérlek válassz karaktert!");
	PlayerTextDrawBackgroundColor(playerid,CharacterDraw[playerid][0], 255);
	PlayerTextDrawFont(playerid,CharacterDraw[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid,CharacterDraw[playerid][0], 0.310000, 1.299999);
	PlayerTextDrawColor(playerid,CharacterDraw[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid,CharacterDraw[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid,CharacterDraw[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid,CharacterDraw[playerid][0], 1);
	PlayerTextDrawUseBox(playerid,CharacterDraw[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid,CharacterDraw[playerid][0], 512819010);
	PlayerTextDrawTextSize(playerid,CharacterDraw[playerid][0], 489.000000, 340.000000);
	PlayerTextDrawSetSelectable(playerid,CharacterDraw[playerid][0], 0);

	CharacterDraw[playerid][1] = CreatePlayerTextDraw(playerid,154.000000, 140.000000, "~n~");
	PlayerTextDrawBackgroundColor(playerid,CharacterDraw[playerid][1], 255);
	PlayerTextDrawFont(playerid,CharacterDraw[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid,CharacterDraw[playerid][1], 0.500000, 20.899999);
	PlayerTextDrawColor(playerid,CharacterDraw[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid,CharacterDraw[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid,CharacterDraw[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid,CharacterDraw[playerid][1], 1);
	PlayerTextDrawUseBox(playerid,CharacterDraw[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid,CharacterDraw[playerid][1], 80);
	PlayerTextDrawTextSize(playerid,CharacterDraw[playerid][1], 489.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,CharacterDraw[playerid][1], 0);

	CharacterDraw[playerid][2] = CreatePlayerTextDraw(playerid,180.000000, 165.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid,CharacterDraw[playerid][2], 512819010);
	PlayerTextDrawFont(playerid,CharacterDraw[playerid][2], 5);
	PlayerTextDrawLetterSize(playerid,CharacterDraw[playerid][2], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,CharacterDraw[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid,CharacterDraw[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid,CharacterDraw[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid,CharacterDraw[playerid][2], 1);
	PlayerTextDrawUseBox(playerid,CharacterDraw[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid,CharacterDraw[playerid][2], 0);
	PlayerTextDrawTextSize(playerid,CharacterDraw[playerid][2], 132.000000, 145.000000);
	PlayerTextDrawSetPreviewModel(playerid, CharacterDraw[playerid][2], 0);
	PlayerTextDrawSetPreviewRot(playerid, CharacterDraw[playerid][2], 0.000000, 0.000000, 0.000000, 100.000000);
	PlayerTextDrawSetSelectable(playerid,CharacterDraw[playerid][2], 1);

	CharacterDraw[playerid][3] = CreatePlayerTextDraw(playerid,331.000000, 164.000000, "New Textdraw");
	PlayerTextDrawBackgroundColor(playerid,CharacterDraw[playerid][3], 512819010);
	PlayerTextDrawFont(playerid,CharacterDraw[playerid][3], 5);
	PlayerTextDrawLetterSize(playerid,CharacterDraw[playerid][3], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,CharacterDraw[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid,CharacterDraw[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid,CharacterDraw[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid,CharacterDraw[playerid][3], 1);
	PlayerTextDrawUseBox(playerid,CharacterDraw[playerid][3], 1);
	PlayerTextDrawBoxColor(playerid,CharacterDraw[playerid][3], 0);
	PlayerTextDrawTextSize(playerid,CharacterDraw[playerid][3], 132.000000, 145.000000);
	PlayerTextDrawSetPreviewModel(playerid, CharacterDraw[playerid][3], 0);
	PlayerTextDrawSetPreviewRot(playerid, CharacterDraw[playerid][3], 0.000000, 0.000000, 0.000000, 100.000000);
	PlayerTextDrawSetSelectable(playerid,CharacterDraw[playerid][3], 1);

	CharacterDraw[playerid][4] = CreatePlayerTextDraw(playerid,246.000000, 305.000000, "Nincs karakter");
	PlayerTextDrawAlignment(playerid,CharacterDraw[playerid][4], 2);
	PlayerTextDrawBackgroundColor(playerid,CharacterDraw[playerid][4], 255);
	PlayerTextDrawFont(playerid,CharacterDraw[playerid][4], 1);
	PlayerTextDrawLetterSize(playerid,CharacterDraw[playerid][4], 0.250000, 1.200000);
	PlayerTextDrawColor(playerid,CharacterDraw[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid,CharacterDraw[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid,CharacterDraw[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid,CharacterDraw[playerid][4], 1);
	PlayerTextDrawUseBox(playerid,CharacterDraw[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid,CharacterDraw[playerid][4], -176);
	PlayerTextDrawTextSize(playerid,CharacterDraw[playerid][4], 0.000000, 110.000000);
	PlayerTextDrawSetSelectable(playerid,CharacterDraw[playerid][4], 1);
	
	CharacterDraw[playerid][5] = CreatePlayerTextDraw(playerid,397.000000, 305.000000, "Nincs karakter");
	PlayerTextDrawAlignment(playerid,CharacterDraw[playerid][5], 2);
	PlayerTextDrawBackgroundColor(playerid,CharacterDraw[playerid][5], 255);
	PlayerTextDrawFont(playerid,CharacterDraw[playerid][5], 1);
	PlayerTextDrawLetterSize(playerid,CharacterDraw[playerid][5], 0.250000, 1.200000);
	PlayerTextDrawColor(playerid,CharacterDraw[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid,CharacterDraw[playerid][5], 0);
	PlayerTextDrawSetProportional(playerid,CharacterDraw[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid,CharacterDraw[playerid][5], 1);
	PlayerTextDrawUseBox(playerid,CharacterDraw[playerid][5], 1);
	PlayerTextDrawBoxColor(playerid,CharacterDraw[playerid][5], -176);
	PlayerTextDrawTextSize(playerid,CharacterDraw[playerid][5], 0.000000, 110.000000);
	PlayerTextDrawSetSelectable(playerid,CharacterDraw[playerid][5], 1);

	CharacterDraw[playerid][6] = CreatePlayerTextDraw(playerid,251.000000, 138.000000, "SeeRPG");//Phoenix RolePlay
	PlayerTextDrawBackgroundColor(playerid,CharacterDraw[playerid][6], 255);
	PlayerTextDrawFont(playerid,CharacterDraw[playerid][6], 0);
	PlayerTextDrawLetterSize(playerid,CharacterDraw[playerid][6], 0.659999, 2.299999);
	PlayerTextDrawColor(playerid,CharacterDraw[playerid][6], -1);
	PlayerTextDrawSetOutline(playerid,CharacterDraw[playerid][6], 0);
	PlayerTextDrawSetProportional(playerid,CharacterDraw[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid,CharacterDraw[playerid][6], 1);
	PlayerTextDrawSetSelectable(playerid,CharacterDraw[playerid][6], 0);
	return true;
}

stock TextDrawBetoltes(playerid)
{
	Info[playerid][0] = CreatePlayerTextDraw(playerid, 556.190185, 5.119997, "www.seerpg.eu");
	PlayerTextDrawLetterSize(playerid, Info[playerid][0], 0.250761, 1.228800);
	PlayerTextDrawAlignment(playerid, Info[playerid][0], 1);
	PlayerTextDrawColor(playerid, Info[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, Info[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Info[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][0], 51);
	PlayerTextDrawFont(playerid, Info[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][0], 1);

	Info[playerid][1] = CreatePlayerTextDraw(playerid, 8.380960, 431.360015, "TS3: 178.32.152.76");
	PlayerTextDrawLetterSize(playerid, Info[playerid][1], 0.279713, 1.343999);
	PlayerTextDrawAlignment(playerid, Info[playerid][1], 1);
	PlayerTextDrawColor(playerid, Info[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, Info[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Info[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][1], 51);
	PlayerTextDrawFont(playerid, Info[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][1], 1);

    Zero[playerid] = CreatePlayerTextDraw(playerid, 57.000000, 314.000000, "~r~Zero Tolerancia bekapcsolva!");
	PlayerTextDrawLetterSize(playerid, Zero[playerid], 0.240000, 1.200000);
	//PlayerTextDrawTextSize(playerid, Zero[playerid], 744.799499, 5.973332);
	PlayerTextDrawAlignment(playerid, Zero[playerid], 1);
	PlayerTextDrawColor(playerid, Zero[playerid], -1);
	//PlayerTextDrawUseBox(playerid, Zero[playerid], false);
//	PlayerTextDrawBoxColor(playerid, Zero[playerid], 80);
	PlayerTextDrawSetShadow(playerid, Zero[playerid], 1);
	PlayerTextDrawSetOutline(playerid, Zero[playerid], 0);
	//PlayerTextDrawBackgroundColor(playerid, Zero[playerid], 51);
	PlayerTextDrawFont(playerid, Zero[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Zero[playerid], 1);

	JarmuInfo[playerid][0] = CreatePlayerTextDraw(playerid, 630.095214, 370.773315, "Sebesseg: 450 km/h");
	PlayerTextDrawLetterSize(playerid, JarmuInfo[playerid][0],0.315904, 1.194666);
	PlayerTextDrawAlignment(playerid, JarmuInfo[playerid][0], 3);
	PlayerTextDrawColor(playerid, JarmuInfo[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, JarmuInfo[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, JarmuInfo[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, JarmuInfo[playerid][0], 51);
	PlayerTextDrawFont(playerid, JarmuInfo[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, JarmuInfo[playerid][0], 1);

	JarmuInfo[playerid][1] = CreatePlayerTextDraw(playerid, 631.119201, 400.079956, "Kilometer: 0 km");
	PlayerTextDrawLetterSize(playerid, JarmuInfo[playerid][1], 0.315904, 1.194666);
	PlayerTextDrawAlignment(playerid, JarmuInfo[playerid][1], 3);
	PlayerTextDrawColor(playerid, JarmuInfo[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, JarmuInfo[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, JarmuInfo[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, JarmuInfo[playerid][1], 51);
	PlayerTextDrawFont(playerid, JarmuInfo[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, JarmuInfo[playerid][1], 1);

	JarmuInfo[playerid][2] = CreatePlayerTextDraw(playerid, 631.857055, 385.000000, "Üzemanyag: 300/300.0 (B)");
	PlayerTextDrawLetterSize(playerid, JarmuInfo[playerid][2], 0.315904, 1.194666);
	PlayerTextDrawAlignment(playerid, JarmuInfo[playerid][2], 3);
	PlayerTextDrawColor(playerid, JarmuInfo[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, JarmuInfo[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, JarmuInfo[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, JarmuInfo[playerid][2], 51);
	PlayerTextDrawFont(playerid, JarmuInfo[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, JarmuInfo[playerid][2], 1);

	Hatter[playerid][0] = CreatePlayerTextDraw(playerid, 148.989776, 140.000076, "~n~");
	PlayerTextDrawLetterSize(playerid, Hatter[playerid][0], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Hatter[playerid][0], 491.010375, 11.666667);
	PlayerTextDrawAlignment(playerid, Hatter[playerid][0], 1);
	PlayerTextDrawColor(playerid, Hatter[playerid][0], 1086292479);
	PlayerTextDrawUseBox(playerid, Hatter[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, Hatter[playerid][0], 512819010);
	PlayerTextDrawSetShadow(playerid, Hatter[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Hatter[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, Hatter[playerid][0], 51);
	PlayerTextDrawFont(playerid, Hatter[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Hatter[playerid][0], 1);

	Hatter[playerid][1] = CreatePlayerTextDraw(playerid, 283.455383, 138.250030, "Kód megadása");
	PlayerTextDrawLetterSize(playerid, Hatter[playerid][1], 0.278052, 1.565000);
	PlayerTextDrawAlignment(playerid, Hatter[playerid][1], 1);
	PlayerTextDrawColor(playerid, Hatter[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, Hatter[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Hatter[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Hatter[playerid][1], 51);
	PlayerTextDrawFont(playerid, Hatter[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Hatter[playerid][1], 1);

	Hatter[playerid][2] = CreatePlayerTextDraw(playerid, 148.990066, 159.250015, "~n~");
	PlayerTextDrawLetterSize(playerid, Hatter[playerid][2], 0.492635, 14.474163);
	PlayerTextDrawTextSize(playerid, Hatter[playerid][2], 491.010375, 12.833334);
	PlayerTextDrawAlignment(playerid, Hatter[playerid][2], 1);
	PlayerTextDrawColor(playerid, Hatter[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, Hatter[playerid][2], true);
	PlayerTextDrawBoxColor(playerid, Hatter[playerid][2], 80);
	PlayerTextDrawSetShadow(playerid, Hatter[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, Hatter[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, Hatter[playerid][2], 51);
	PlayerTextDrawFont(playerid, Hatter[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, Hatter[playerid][2], 1);

	SzamJegy[playerid][0] = CreatePlayerTextDraw(playerid, 190.219635, 174.416656, "0");
	PlayerTextDrawLetterSize(playerid, SzamJegy[playerid][0], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, SzamJegy[playerid][0], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, SzamJegy[playerid][0], 2);
	PlayerTextDrawColor(playerid, SzamJegy[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, SzamJegy[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, SzamJegy[playerid][0], 512819010);
	PlayerTextDrawSetShadow(playerid, SzamJegy[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, SzamJegy[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, SzamJegy[playerid][0], 51);
	PlayerTextDrawFont(playerid, SzamJegy[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SzamJegy[playerid][0], 1);

	SzamJegy[playerid][1] = CreatePlayerTextDraw(playerid, 254.470184, 174.250015, "0");
	PlayerTextDrawLetterSize(playerid, SzamJegy[playerid][1], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, SzamJegy[playerid][1], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, SzamJegy[playerid][1], 2);
	PlayerTextDrawColor(playerid, SzamJegy[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, SzamJegy[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, SzamJegy[playerid][1], 512819010);
	PlayerTextDrawSetShadow(playerid, SzamJegy[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, SzamJegy[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, SzamJegy[playerid][1], 51);
	PlayerTextDrawFont(playerid, SzamJegy[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SzamJegy[playerid][1], 1);

	SzamJegy[playerid][2] = CreatePlayerTextDraw(playerid, 319.188995, 174.083328, "0");
	PlayerTextDrawLetterSize(playerid, SzamJegy[playerid][2], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, SzamJegy[playerid][2], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, SzamJegy[playerid][2], 2);
	PlayerTextDrawColor(playerid, SzamJegy[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, SzamJegy[playerid][2], true);
	PlayerTextDrawBoxColor(playerid, SzamJegy[playerid][2], 512819010);
	PlayerTextDrawSetShadow(playerid, SzamJegy[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, SzamJegy[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, SzamJegy[playerid][2], 51);
	PlayerTextDrawFont(playerid, SzamJegy[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, SzamJegy[playerid][2], 1);

	SzamJegy[playerid][3] = CreatePlayerTextDraw(playerid, 383.439697, 174.500015, "0");
	PlayerTextDrawLetterSize(playerid, SzamJegy[playerid][3], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, SzamJegy[playerid][3], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, SzamJegy[playerid][3], 2);
	PlayerTextDrawColor(playerid, SzamJegy[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, SzamJegy[playerid][3], true);
	PlayerTextDrawBoxColor(playerid, SzamJegy[playerid][3], 512819010);
	PlayerTextDrawSetShadow(playerid, SzamJegy[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, SzamJegy[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, SzamJegy[playerid][3], 51);
	PlayerTextDrawFont(playerid, SzamJegy[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, SzamJegy[playerid][3], 1);

	SzamJegy[playerid][4] = CreatePlayerTextDraw(playerid, 446.284576, 174.916671, "0");
	PlayerTextDrawLetterSize(playerid, SzamJegy[playerid][4], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, SzamJegy[playerid][4], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, SzamJegy[playerid][4], 2);
	PlayerTextDrawColor(playerid, SzamJegy[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, SzamJegy[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, SzamJegy[playerid][4], 512819010);
	PlayerTextDrawSetShadow(playerid, SzamJegy[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, SzamJegy[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, SzamJegy[playerid][4], 51);
	PlayerTextDrawFont(playerid, SzamJegy[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, SzamJegy[playerid][4], 1);

	Elerte[playerid][0] = CreatePlayerTextDraw(playerid, 164.450973, 263.083282, "~n~");
	PlayerTextDrawLetterSize(playerid, Elerte[playerid][0], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Elerte[playerid][0], 216.925308, 4.666666);
	PlayerTextDrawAlignment(playerid, Elerte[playerid][0], 1);
	PlayerTextDrawColor(playerid, Elerte[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, Elerte[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, Elerte[playerid][0], -16776961);
	PlayerTextDrawSetShadow(playerid, Elerte[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Elerte[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, Elerte[playerid][0], 51);
	PlayerTextDrawFont(playerid, Elerte[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Elerte[playerid][0], 1);

	Elerte[playerid][1] = CreatePlayerTextDraw(playerid, 228.232833, 262.916442, "~n~");
	PlayerTextDrawLetterSize(playerid, Elerte[playerid][1], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Elerte[playerid][1], 281.112701, -5.833333);
	PlayerTextDrawAlignment(playerid, Elerte[playerid][1], 1);
	PlayerTextDrawColor(playerid, Elerte[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, Elerte[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, Elerte[playerid][1], -16776961);
	PlayerTextDrawSetShadow(playerid, Elerte[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Elerte[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Elerte[playerid][1], 51);
	PlayerTextDrawFont(playerid, Elerte[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Elerte[playerid][1], 1);

	Elerte[playerid][2] = CreatePlayerTextDraw(playerid, 293.420471, 262.749725, "~n~");
	PlayerTextDrawLetterSize(playerid, Elerte[playerid][2], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Elerte[playerid][2], 345.300201, -0.583333);
	PlayerTextDrawAlignment(playerid, Elerte[playerid][2], 1);
	PlayerTextDrawColor(playerid, Elerte[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, Elerte[playerid][2], true);
	PlayerTextDrawBoxColor(playerid, Elerte[playerid][2], -16776961);
	PlayerTextDrawSetShadow(playerid, Elerte[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, Elerte[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, Elerte[playerid][2], 51);
	PlayerTextDrawFont(playerid, Elerte[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, Elerte[playerid][2], 1);

	Elerte[playerid][3] = CreatePlayerTextDraw(playerid, 357.670959, 263.749725, "~n~");
	PlayerTextDrawLetterSize(playerid, Elerte[playerid][3], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Elerte[playerid][3], 409.956298, -0.583333);
	PlayerTextDrawAlignment(playerid, Elerte[playerid][3], 1);
	PlayerTextDrawColor(playerid, Elerte[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, Elerte[playerid][3], true);
	PlayerTextDrawBoxColor(playerid, Elerte[playerid][3], -16776961);
	PlayerTextDrawSetShadow(playerid, Elerte[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, Elerte[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, Elerte[playerid][3], 51);
	PlayerTextDrawFont(playerid, Elerte[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, Elerte[playerid][3], 1);

	Elerte[playerid][4] = CreatePlayerTextDraw(playerid, 420.515716, 264.166412, "~n~");
	PlayerTextDrawLetterSize(playerid, Elerte[playerid][4], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Elerte[playerid][4], 473.206665, -4.666667);
	PlayerTextDrawAlignment(playerid, Elerte[playerid][4], 1);
	PlayerTextDrawColor(playerid, Elerte[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, Elerte[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, Elerte[playerid][4], -16776961);
	PlayerTextDrawSetShadow(playerid, Elerte[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, Elerte[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, Elerte[playerid][4], 51);
	PlayerTextDrawFont(playerid, Elerte[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, Elerte[playerid][4], 1);
}

/*stock TextDrawBetoltes(playerid)
{*/
	/* -------------------------- BELIKOV FÉLE -------------------------- */
	/*Info[playerid][0] = CreatePlayerTextDraw(playerid, 501.000000, 11.000000, ""); // paraszt neve
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][0], 255);
	PlayerTextDrawFont(playerid, Info[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, Info[playerid][0], 0.179998, 0.899999);
	PlayerTextDrawColor(playerid, Info[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, Info[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][0], 1);

	Info[playerid][1] = CreatePlayerTextDraw(playerid, 544.000000, 21.000000, ""); // bsz összeg
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][1], 255);
	PlayerTextDrawFont(playerid, Info[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, Info[playerid][1], 0.219999, 0.899999);
	PlayerTextDrawColor(playerid, Info[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, Info[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][1], 1);

	Info[playerid][2] = CreatePlayerTextDraw(playerid, 50.000000, 332.000000, "TS3:gold.voic.in:7570");
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][2], 255);
	PlayerTextDrawFont(playerid, Info[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, Info[playerid][2], 0.159999, 0.799997);
	PlayerTextDrawColor(playerid, Info[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, Info[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][2], 1);

	Info[playerid][3] = CreatePlayerTextDraw(playerid, 2.000000, 427.000000, ""); // frakció
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][3], 255);
	PlayerTextDrawFont(playerid, Info[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, Info[playerid][3], 0.159999, 0.799998);
	PlayerTextDrawColor(playerid, Info[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, Info[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][3], 1);

	Info[playerid][4] = CreatePlayerTextDraw(playerid, 500.000000, 23.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][4], 255);
	PlayerTextDrawFont(playerid, Info[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, Info[playerid][4], 0.519999, -0.500001);
	PlayerTextDrawColor(playerid, Info[playerid][4], -1);
	PlayerTextDrawSetOutline(playerid, Info[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][4], 1);
	PlayerTextDrawUseBox(playerid, Info[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, Info[playerid][4], 255);
	PlayerTextDrawTextSize(playerid, Info[playerid][4], 734.000000, -4.000000);
	
	Info[playerid][5] = CreatePlayerTextDraw(playerid, 20.000000, 436.000000, ""); // rang neve
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][5], 255);
	PlayerTextDrawFont(playerid, Info[playerid][5], 2);
	PlayerTextDrawLetterSize(playerid, Info[playerid][5], 0.180000, 0.799998);
	PlayerTextDrawColor(playerid, Info[playerid][5], -1);
	PlayerTextDrawSetOutline(playerid, Info[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][5], 1);

	Info[playerid][6] = CreatePlayerTextDraw(playerid, 99.000000, 436.000000, ""); // a rang számmal
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][6], 255);
	PlayerTextDrawFont(playerid, Info[playerid][6], 1);
	PlayerTextDrawLetterSize(playerid, Info[playerid][6], 0.230000, 0.899999);
	PlayerTextDrawColor(playerid, Info[playerid][6], 730909439);
	PlayerTextDrawSetOutline(playerid, Info[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][6], 1);
	
	Info[playerid][7] = CreatePlayerTextDraw(playerid, 618.000000, 11.000000, ""); // a gyerek ID-je
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][7], 255);
	PlayerTextDrawFont(playerid, Info[playerid][7], 2);
	PlayerTextDrawLetterSize(playerid, Info[playerid][7], 0.200000, 0.899999);
	PlayerTextDrawColor(playerid, Info[playerid][7], 730909439);
	PlayerTextDrawSetOutline(playerid, Info[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][7], 1);*/
	
	/* ---------------------------------------------------------- */

	/*JarmuInfo[playerid][0] = CreatePlayerTextDraw(playerid, 506.000000, 318.000000, ""); // sebesség
	PlayerTextDrawBackgroundColor(playerid, JarmuInfo[playerid][0], 255);
	PlayerTextDrawFont(playerid, JarmuInfo[playerid][0], 2);
	PlayerTextDrawLetterSize(playerid, JarmuInfo[playerid][0], 0.469999, 1.899999);
	PlayerTextDrawColor(playerid, JarmuInfo[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, JarmuInfo[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, JarmuInfo[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, JarmuInfo[playerid][0], 1);

	JarmuInfo[playerid][1] = CreatePlayerTextDraw(playerid, 541.000000, 324.000000, "KM/H");
	PlayerTextDrawBackgroundColor(playerid, JarmuInfo[playerid][1], 255);
	PlayerTextDrawFont(playerid, JarmuInfo[playerid][1], 2);
	PlayerTextDrawLetterSize(playerid, JarmuInfo[playerid][1], 0.419999, 1.100000);
	PlayerTextDrawColor(playerid, JarmuInfo[playerid][1], 241934847);
	PlayerTextDrawSetOutline(playerid, JarmuInfo[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, JarmuInfo[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, JarmuInfo[playerid][1], 1);

	JarmuInfo[playerid][2] = CreatePlayerTextDraw(playerid, 580.000000, 336.000000, ""); // üzemanyag
	PlayerTextDrawBackgroundColor(playerid, JarmuInfo[playerid][2], 255);
	PlayerTextDrawFont(playerid, JarmuInfo[playerid][2], 2);
	PlayerTextDrawLetterSize(playerid, JarmuInfo[playerid][2], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, JarmuInfo[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, JarmuInfo[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, JarmuInfo[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, JarmuInfo[playerid][2], 1);

	JarmuInfo[playerid][3] = CreatePlayerTextDraw(playerid, 631.000000, 335.000000, "L");
	PlayerTextDrawBackgroundColor(playerid, JarmuInfo[playerid][3], 255);
	PlayerTextDrawFont(playerid, JarmuInfo[playerid][3], 2);
	PlayerTextDrawLetterSize(playerid, JarmuInfo[playerid][3], 0.219999, 1.200000);
	PlayerTextDrawColor(playerid, JarmuInfo[playerid][3], 6749354);
	PlayerTextDrawSetOutline(playerid, JarmuInfo[playerid][3], 0);
	PlayerTextDrawSetProportional(playerid, JarmuInfo[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, JarmuInfo[playerid][3], 1);

	JarmuInfo[playerid][4] = CreatePlayerTextDraw(playerid, 557.000000, 335.000000, "KM");
	PlayerTextDrawBackgroundColor(playerid, JarmuInfo[playerid][4], 255);
	PlayerTextDrawFont(playerid, JarmuInfo[playerid][4], 2);
	PlayerTextDrawLetterSize(playerid, JarmuInfo[playerid][4], 0.249999, 1.200000);
	PlayerTextDrawColor(playerid, JarmuInfo[playerid][4], -1088874838);
	PlayerTextDrawSetOutline(playerid, JarmuInfo[playerid][4], 0);
	PlayerTextDrawSetProportional(playerid, JarmuInfo[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, JarmuInfo[playerid][4], 1);*/
	
	/*Textdraw5 = TextDrawCreate(645.000000, 338.000000, "__");
	TextDrawBackgroundColor(Textdraw5, 255);
	TextDrawFont(Textdraw5, 3);
	TextDrawLetterSize(Textdraw5, 0.250000, -0.499998);
	TextDrawColor(Textdraw5, -1);
	TextDrawSetOutline(Textdraw5, 0);
	TextDrawSetProportional(Textdraw5, 1);
	TextDrawSetShadow(Textdraw5, 1);
	TextDrawUseBox(Textdraw5, 1);
	TextDrawBoxColor(Textdraw5, 373854463);
	TextDrawTextSize(Textdraw5, 500.000000, 18.000000);

	Textdraw13 = TextDrawCreate(120.000000, 437.000000, "_");
	TextDrawBackgroundColor(Textdraw13, 255);
	TextDrawFont(Textdraw13, 1);
	TextDrawLetterSize(Textdraw13, 0.500000, -0.300000);
	TextDrawColor(Textdraw13, -1);
	TextDrawSetOutline(Textdraw13, 0);
	TextDrawSetProportional(Textdraw13, 1);
	TextDrawSetShadow(Textdraw13, 1);
	TextDrawUseBox(Textdraw13, 1);
	TextDrawBoxColor(Textdraw13, 255);
	TextDrawTextSize(Textdraw13, -4.000000, 0.000000);*/

    /* -------------------------- BELIKOV FÉLE VÉGE -------------------------- */

	/*Info[playerid][0] = CreatePlayerTextDraw(playerid, 556.190185, 5.119997, "www.see-life.hu");
	PlayerTextDrawLetterSize(playerid, Info[playerid][0], 0.250761, 1.228800);
	PlayerTextDrawAlignment(playerid, Info[playerid][0], 1);
	PlayerTextDrawColor(playerid, Info[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, Info[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Info[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][0], 51);
	PlayerTextDrawFont(playerid, Info[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][0], 1);

	Info[playerid][1] = CreatePlayerTextDraw(playerid, 8.380960, 431.360015, "TS3: gold.voic.in:7570");
	PlayerTextDrawLetterSize(playerid, Info[playerid][1], 0.279713, 1.343999);
	PlayerTextDrawAlignment(playerid, Info[playerid][1], 1);
	PlayerTextDrawColor(playerid, Info[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, Info[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Info[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Info[playerid][1], 51);
	PlayerTextDrawFont(playerid, Info[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Info[playerid][1], 1);*/

    /*Zero[playerid] = CreatePlayerTextDraw(playerid, 57.000000, 314.000000, "~r~Zero Tolerancia bekapcsolva!");
	PlayerTextDrawLetterSize(playerid, Zero[playerid], 0.240000, 1.200000);
	//PlayerTextDrawTextSize(playerid, Zero[playerid], 744.799499, 5.973332);
	PlayerTextDrawAlignment(playerid, Zero[playerid], 1);
	PlayerTextDrawColor(playerid, Zero[playerid], -1);
	//PlayerTextDrawUseBox(playerid, Zero[playerid], false);
//	PlayerTextDrawBoxColor(playerid, Zero[playerid], 80);
	PlayerTextDrawSetShadow(playerid, Zero[playerid], 1);
	PlayerTextDrawSetOutline(playerid, Zero[playerid], 0);
	//PlayerTextDrawBackgroundColor(playerid, Zero[playerid], 51);
	PlayerTextDrawFont(playerid, Zero[playerid], 1);
	PlayerTextDrawSetProportional(playerid, Zero[playerid], 1);*/

	/*JarmuInfo[playerid][0] = CreatePlayerTextDraw(playerid, 630.095214, 370.773315, "Sebesseg: 450 km/h");
	PlayerTextDrawLetterSize(playerid, JarmuInfo[playerid][0],0.315904, 1.194666);
	PlayerTextDrawAlignment(playerid, JarmuInfo[playerid][0], 3);
	PlayerTextDrawColor(playerid, JarmuInfo[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, JarmuInfo[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, JarmuInfo[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, JarmuInfo[playerid][0], 51);
	PlayerTextDrawFont(playerid, JarmuInfo[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, JarmuInfo[playerid][0], 1);

	JarmuInfo[playerid][1] = CreatePlayerTextDraw(playerid, 631.119201, 400.079956, "Kilometer: 0 km");
	PlayerTextDrawLetterSize(playerid, JarmuInfo[playerid][1], 0.315904, 1.194666);
	PlayerTextDrawAlignment(playerid, JarmuInfo[playerid][1], 3);
	PlayerTextDrawColor(playerid, JarmuInfo[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, JarmuInfo[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, JarmuInfo[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, JarmuInfo[playerid][1], 51);
	PlayerTextDrawFont(playerid, JarmuInfo[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, JarmuInfo[playerid][1], 1);

	JarmuInfo[playerid][2] = CreatePlayerTextDraw(playerid, 631.857055, 385.000000, "Üzemanyag: 300/300.0 (B)");
	PlayerTextDrawLetterSize(playerid, JarmuInfo[playerid][2], 0.315904, 1.194666);
	PlayerTextDrawAlignment(playerid, JarmuInfo[playerid][2], 3);
	PlayerTextDrawColor(playerid, JarmuInfo[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, JarmuInfo[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, JarmuInfo[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, JarmuInfo[playerid][2], 51);
	PlayerTextDrawFont(playerid, JarmuInfo[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, JarmuInfo[playerid][2], 1);*/

/*	Hatter[playerid][0] = CreatePlayerTextDraw(playerid, 148.989776, 140.000076, "~n~");
	PlayerTextDrawLetterSize(playerid, Hatter[playerid][0], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Hatter[playerid][0], 491.010375, 11.666667);
	PlayerTextDrawAlignment(playerid, Hatter[playerid][0], 1);
	PlayerTextDrawColor(playerid, Hatter[playerid][0], 1086292479);
	PlayerTextDrawUseBox(playerid, Hatter[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, Hatter[playerid][0], 512819010);
	PlayerTextDrawSetShadow(playerid, Hatter[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Hatter[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, Hatter[playerid][0], 51);
	PlayerTextDrawFont(playerid, Hatter[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Hatter[playerid][0], 1);

	Hatter[playerid][1] = CreatePlayerTextDraw(playerid, 283.455383, 138.250030, "Kód megadása");
	PlayerTextDrawLetterSize(playerid, Hatter[playerid][1], 0.278052, 1.565000);
	PlayerTextDrawAlignment(playerid, Hatter[playerid][1], 1);
	PlayerTextDrawColor(playerid, Hatter[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, Hatter[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Hatter[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Hatter[playerid][1], 51);
	PlayerTextDrawFont(playerid, Hatter[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Hatter[playerid][1], 1);

	Hatter[playerid][2] = CreatePlayerTextDraw(playerid, 148.990066, 159.250015, "~n~");
	PlayerTextDrawLetterSize(playerid, Hatter[playerid][2], 0.492635, 14.474163);
	PlayerTextDrawTextSize(playerid, Hatter[playerid][2], 491.010375, 12.833334);
	PlayerTextDrawAlignment(playerid, Hatter[playerid][2], 1);
	PlayerTextDrawColor(playerid, Hatter[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, Hatter[playerid][2], true);
	PlayerTextDrawBoxColor(playerid, Hatter[playerid][2], 80);
	PlayerTextDrawSetShadow(playerid, Hatter[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, Hatter[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, Hatter[playerid][2], 51);
	PlayerTextDrawFont(playerid, Hatter[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, Hatter[playerid][2], 1);

	SzamJegy[playerid][0] = CreatePlayerTextDraw(playerid, 190.219635, 174.416656, "0");
	PlayerTextDrawLetterSize(playerid, SzamJegy[playerid][0], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, SzamJegy[playerid][0], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, SzamJegy[playerid][0], 2);
	PlayerTextDrawColor(playerid, SzamJegy[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, SzamJegy[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, SzamJegy[playerid][0], 512819010);
	PlayerTextDrawSetShadow(playerid, SzamJegy[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, SzamJegy[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, SzamJegy[playerid][0], 51);
	PlayerTextDrawFont(playerid, SzamJegy[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, SzamJegy[playerid][0], 1);

	SzamJegy[playerid][1] = CreatePlayerTextDraw(playerid, 254.470184, 174.250015, "0");
	PlayerTextDrawLetterSize(playerid, SzamJegy[playerid][1], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, SzamJegy[playerid][1], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, SzamJegy[playerid][1], 2);
	PlayerTextDrawColor(playerid, SzamJegy[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, SzamJegy[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, SzamJegy[playerid][1], 512819010);
	PlayerTextDrawSetShadow(playerid, SzamJegy[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, SzamJegy[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, SzamJegy[playerid][1], 51);
	PlayerTextDrawFont(playerid, SzamJegy[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, SzamJegy[playerid][1], 1);

	SzamJegy[playerid][2] = CreatePlayerTextDraw(playerid, 319.188995, 174.083328, "0");
	PlayerTextDrawLetterSize(playerid, SzamJegy[playerid][2], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, SzamJegy[playerid][2], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, SzamJegy[playerid][2], 2);
	PlayerTextDrawColor(playerid, SzamJegy[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, SzamJegy[playerid][2], true);
	PlayerTextDrawBoxColor(playerid, SzamJegy[playerid][2], 512819010);
	PlayerTextDrawSetShadow(playerid, SzamJegy[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, SzamJegy[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, SzamJegy[playerid][2], 51);
	PlayerTextDrawFont(playerid, SzamJegy[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, SzamJegy[playerid][2], 1);

	SzamJegy[playerid][3] = CreatePlayerTextDraw(playerid, 383.439697, 174.500015, "0");
	PlayerTextDrawLetterSize(playerid, SzamJegy[playerid][3], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, SzamJegy[playerid][3], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, SzamJegy[playerid][3], 2);
	PlayerTextDrawColor(playerid, SzamJegy[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, SzamJegy[playerid][3], true);
	PlayerTextDrawBoxColor(playerid, SzamJegy[playerid][3], 512819010);
	PlayerTextDrawSetShadow(playerid, SzamJegy[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, SzamJegy[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, SzamJegy[playerid][3], 51);
	PlayerTextDrawFont(playerid, SzamJegy[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, SzamJegy[playerid][3], 1);

	SzamJegy[playerid][4] = CreatePlayerTextDraw(playerid, 446.284576, 174.916671, "0");
	PlayerTextDrawLetterSize(playerid, SzamJegy[playerid][4], 1.270848, 8.815836);
	PlayerTextDrawTextSize(playerid, SzamJegy[playerid][4], 0.937121, 51.916645);
	PlayerTextDrawAlignment(playerid, SzamJegy[playerid][4], 2);
	PlayerTextDrawColor(playerid, SzamJegy[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, SzamJegy[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, SzamJegy[playerid][4], 512819010);
	PlayerTextDrawSetShadow(playerid, SzamJegy[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, SzamJegy[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, SzamJegy[playerid][4], 51);
	PlayerTextDrawFont(playerid, SzamJegy[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, SzamJegy[playerid][4], 1);

	Elerte[playerid][0] = CreatePlayerTextDraw(playerid, 164.450973, 263.083282, "~n~");
	PlayerTextDrawLetterSize(playerid, Elerte[playerid][0], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Elerte[playerid][0], 216.925308, 4.666666);
	PlayerTextDrawAlignment(playerid, Elerte[playerid][0], 1);
	PlayerTextDrawColor(playerid, Elerte[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, Elerte[playerid][0], true);
	PlayerTextDrawBoxColor(playerid, Elerte[playerid][0], -16776961);
	PlayerTextDrawSetShadow(playerid, Elerte[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, Elerte[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, Elerte[playerid][0], 51);
	PlayerTextDrawFont(playerid, Elerte[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, Elerte[playerid][0], 1);

	Elerte[playerid][1] = CreatePlayerTextDraw(playerid, 228.232833, 262.916442, "~n~");
	PlayerTextDrawLetterSize(playerid, Elerte[playerid][1], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Elerte[playerid][1], 281.112701, -5.833333);
	PlayerTextDrawAlignment(playerid, Elerte[playerid][1], 1);
	PlayerTextDrawColor(playerid, Elerte[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, Elerte[playerid][1], true);
	PlayerTextDrawBoxColor(playerid, Elerte[playerid][1], -16776961);
	PlayerTextDrawSetShadow(playerid, Elerte[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, Elerte[playerid][1], 1);
	PlayerTextDrawBackgroundColor(playerid, Elerte[playerid][1], 51);
	PlayerTextDrawFont(playerid, Elerte[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, Elerte[playerid][1], 1);

	Elerte[playerid][2] = CreatePlayerTextDraw(playerid, 293.420471, 262.749725, "~n~");
	PlayerTextDrawLetterSize(playerid, Elerte[playerid][2], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Elerte[playerid][2], 345.300201, -0.583333);
	PlayerTextDrawAlignment(playerid, Elerte[playerid][2], 1);
	PlayerTextDrawColor(playerid, Elerte[playerid][2], -1);
	PlayerTextDrawUseBox(playerid, Elerte[playerid][2], true);
	PlayerTextDrawBoxColor(playerid, Elerte[playerid][2], -16776961);
	PlayerTextDrawSetShadow(playerid, Elerte[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, Elerte[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, Elerte[playerid][2], 51);
	PlayerTextDrawFont(playerid, Elerte[playerid][2], 1);
	PlayerTextDrawSetProportional(playerid, Elerte[playerid][2], 1);

	Elerte[playerid][3] = CreatePlayerTextDraw(playerid, 357.670959, 263.749725, "~n~");
	PlayerTextDrawLetterSize(playerid, Elerte[playerid][3], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Elerte[playerid][3], 409.956298, -0.583333);
	PlayerTextDrawAlignment(playerid, Elerte[playerid][3], 1);
	PlayerTextDrawColor(playerid, Elerte[playerid][3], -1);
	PlayerTextDrawUseBox(playerid, Elerte[playerid][3], true);
	PlayerTextDrawBoxColor(playerid, Elerte[playerid][3], -16776961);
	PlayerTextDrawSetShadow(playerid, Elerte[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, Elerte[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, Elerte[playerid][3], 51);
	PlayerTextDrawFont(playerid, Elerte[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, Elerte[playerid][3], 1);

	Elerte[playerid][4] = CreatePlayerTextDraw(playerid, 420.515716, 264.166412, "~n~");
	PlayerTextDrawLetterSize(playerid, Elerte[playerid][4], 0.449999, 1.600000);
	PlayerTextDrawTextSize(playerid, Elerte[playerid][4], 473.206665, -4.666667);
	PlayerTextDrawAlignment(playerid, Elerte[playerid][4], 1);
	PlayerTextDrawColor(playerid, Elerte[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, Elerte[playerid][4], true);
	PlayerTextDrawBoxColor(playerid, Elerte[playerid][4], -16776961);
	PlayerTextDrawSetShadow(playerid, Elerte[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, Elerte[playerid][4], 1);
	PlayerTextDrawBackgroundColor(playerid, Elerte[playerid][4], 51);
	PlayerTextDrawFont(playerid, Elerte[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, Elerte[playerid][4], 1);
}*/


/*public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(!IsScripter(playerid))
		return true;
		
	new str[128];
	format(str, sizeof(str), "Játékos hálózati adatai");
	ShowPlayerDialog(playerid, DIALOG_ADMIN_MENU, DIALOG_STYLE_LIST, "Adminisztriációs panel", str, "Mehet", "Mégse");
	
    return 1;
}*/
stock MakeMarkerInvisible( playerid )
{
    foreach( Player, i )
    {
        SetPlayerMarkerForPlayer( i, playerid, ( GetPlayerColor( playerid ) & 0xFFFFFF00 ) );
    }
}
public OnPlayerConnect(playerid)
{
	//http://kepfeltoltes.hu/141222/sa-mp-086_www.kepfeltoltes.hu_.png
	KillTimer(PlayerInfo[playerid][pBHackTimer]);
	new PSerial[128];
    gpci(playerid, PSerial, sizeof(PSerial));
 	format(PSerial, sizeof(PSerial), "Üdv! A szériaszámod: %s", PSerial);
 	print(PSerial);
	if(!strcmp(JatekosNev(playerid, false, true), "[NPC]", .length = 5) && IsPlayerNPC(playerid))
	{
		if(strfind(JatekosNev(playerid, false, true), "boltbot_") != -1)
		{
			ServerInfo[0][sBoltBot]++;
			if(ServerInfo[0][sBoltBot] == sizeof(BoltBot))
			{
				new l = 0;
	
				foreach(new botid : Bot)
				{
					if(strfind(JatekosNev(botid, false, true), "boltbot_") != -1)
					{
						BoltRablas[l][npcID] = botid;
						SetPlayerColor(botid, COLOR_INVISIBLE);
						l++;
						//printf("Bot: %d", l);
					}
				}
			}
		}
		else if(strfind(JatekosNev(playerid, false, true), "bankbot_") != -1)
		{
			ServerInfo[0][sBankBot]++;
			if(ServerInfo[0][sBankBot] == 1)
			{
				//new l = 0;
				foreach(new botid : Bot)
				{
					if(strfind(JatekosNev(botid, false, true), "bankbot_") != -1)
					{
						BankBotok[bankNPCID] = botid;
						SetPlayerColor(botid, COLOR_INVISIBLE);
					}
				}
			}
		}
		return true;
	}
	
	//PlayerInfo[playerid][pFilterID] = 0;
	if(!BotCheck(playerid))
	{
		SetSpawnInfo(playerid, 0, 1, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		BanEx(playerid, "[AntiBot]: IP Flood");
	}
	new GPCIDDRESS[200];
	gpci(playerid,GPCIDDRESS,sizeof(GPCIDDRESS));
	nformat(sqlquery,256, "SELECT * FROM `"#MYSQL_SERIAL_BAN"` WHERE Cim = '%s'", GPCIDDRESS);
	mysql_tquery(sql_ID, sqlquery,"SerialBanCheck", "i", playerid);

	ValtozokNullazasa(playerid);
	
	new ujnev[MAX_PLAYER_NAME];
	format(ujnev, MAX_PLAYER_NAME, "Nincs_Belepve%d", playerid);
	SetPlayerName(playerid, ujnev);
	
	PlayerInfo[playerid][pCrashobj] = INVALID_OBJECT_ID;

	Kapcsolodasok(playerid, 1);
	SetPlayerColor(playerid, COLOR_INVISIBLE);
	
	BoostTicTimer[playerid] = GetTickCount();
	KillTimer(PlayerInfo[playerid][pPenzTimer]);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 499 );
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 499 );
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 499 );
	
	#if !defined HAZI_SZERVER
	
	//Jelenleg 7 login zene van
	/*new music[128];
	PlayAudioStreamForPlayer(playerid, (format(music, sizeof(music), "http://samp.gc4.hu/adat/fajl/login%d.mp3", (random(8) + 1)), music));*/
	new rand = random(16);
	switch(rand)
	{
		case 0: PlayAudioStreamForPlayer(playerid, "http://kep.see-rpg.eu/uploads/fajlok/login1_1407257233.mp3");
		case 1: PlayAudioStreamForPlayer(playerid, "http://kep.see-rpg.eu/uploads/fajlok/login2_1407255540.mp3");
		case 2: PlayAudioStreamForPlayer(playerid, "http://kep.see-rpg.eu/uploads/fajlok/login3_1407254903.mp3");
		case 3: PlayAudioStreamForPlayer(playerid, "http://kep.see-rpg.eu/uploads/fajlok/login4_1407254782.mp3");
		case 4: PlayAudioStreamForPlayer(playerid, "http://kep.see-rpg.eu/uploads/fajlok/login5_1407254600.mp3");
		case 5: PlayAudioStreamForPlayer(playerid, "http://kep.see-rpg.eu/uploads/fajlok/login6_1407254448.mp3");
		case 6: PlayAudioStreamForPlayer(playerid, "http://kep.see-rpg.eu/uploads/fajlok/login7_1407492610.mp3");
		case 7: PlayAudioStreamForPlayer(playerid, "http://kep.see-rpg.eu/uploads/fajlok/login8_1407492861.mp3");
		case 8: PlayAudioStreamForPlayer(playerid, "http://file.see-rpg.eu/uploads/fajlok/1408878336.mp3");
		case 9: PlayAudioStreamForPlayer(playerid, "http://file.see-rpg.eu/uploads/fajlok/1408881173.mp3");
		case 10: PlayAudioStreamForPlayer(playerid, "http://file.see-rpg.eu/uploads/fajlok/1408881329.mp3");
		case 11: PlayAudioStreamForPlayer(playerid, "http://file.see-rpg.eu/uploads/fajlok/1408881570.mp3");
		case 12: PlayAudioStreamForPlayer(playerid, "http://file.see-rpg.eu/uploads/fajlok/1408881723.mp3");
		case 13: PlayAudioStreamForPlayer(playerid, "http://file.see-rpg.eu/uploads/fajlok/1408881808.mp3");
		case 14: PlayAudioStreamForPlayer(playerid, "http://file.see-rpg.eu/uploads/fajlok/1408882009.mp3");
		case 15: PlayAudioStreamForPlayer(playerid, "http://file.see-rpg.eu/uploads/fajlok/1408882346.mp3");
	}
	
	#endif
	
	CreateKeyPad(playerid);
	Felirat( playerid, false );
	
	PlayerInfo[playerid][pTog][4] = true; //Beszédanim alapból legyen bekapcsolva
	PlayerInfo[playerid][pTaxisid] = INVALID_PLAYER_ID;
	
	//Egyéb infok textdraw ne legyen alapból bekapcsolva
	PlayerTextDrawHide(playerid, Info[playerid][0]);
	PlayerTextDrawHide(playerid, Info[playerid][1]);
	PlayerTextDrawHide(playerid, Info[playerid][6]);
	PlayerTextDrawHide(playerid, AlsoFelso[playerid][0]);
	PlayerTextDrawHide(playerid, AlsoFelso[playerid][1]);
	PlayerTextDrawHide(playerid, Info[playerid][2]);
	PlayerTextDrawHide(playerid, Info[playerid][3]);
	PlayerTextDrawHide(playerid, Info[playerid][4]);
	PlayerTextDrawHide(playerid, Info[playerid][5]);
	return true;
}

public OnPlayerSpawn(playerid)
{
//	KillTimer(PlayerTimers[playerid][SCREEN_FADE]);
	
	if(PlayerInfo[playerid][pSzunetel])
		CallLocalFunction("OnPlayerPause", "dd", playerid, 0);
	
	PlayerInfo[playerid][pCamera] = NINCS;
	if(!PlayerInfo[playerid][pPaintBall][0])
		PlayerInfo[playerid][pSpawnVedelem] = 5;
	
	if(PlayerInfo[playerid][pTiltvaVan])
		return false;
	
	if(IsPlayerNPC(playerid))
	{
		new VWjuk = 0;
		if(ServerInfo[0][sRL_Time][0] > 20)
		{
			VWjuk = 0;
		}
		if(ServerInfo[0][sRL_Time][0] < 21)
		{
			VWjuk = Rand(1,9999);
		}
		
		if(egyezik(JatekosNev(playerid),"[NPC]Steve_Pullman"))
		{
			VasarlosNPCK[0] = playerid;
			SetPlayerVirtualWorld(playerid,VWjuk);
			SetPlayerPos(playerid,2690.316, -1975.359, 13.546);
			SetPlayerFacingAngle(playerid,357);
			SetPlayerSkin(playerid,20);
			SetPlayerColor(playerid, COLOR_INVISIBLE);
			NPCTextLabel[0] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,playerid,INVALID_PLAYER_ID,0,VWjuk,0,-1,100);
		}
		if(egyezik(JatekosNev(playerid),"[NPC]Wayne_Freeman"))
		{
			VasarlosNPCK[1] = playerid;
			SetPlayerVirtualWorld(playerid,VWjuk);
			SetPlayerPos(playerid,2322.841, -1259.185, 22.507);
			SetPlayerFacingAngle(playerid,270);
			SetPlayerSkin(playerid,21);
			SetPlayerColor(playerid, COLOR_INVISIBLE);
			NPCTextLabel[1] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,playerid,INVALID_PLAYER_ID,0,VWjuk,0,-1,100);
		}	
		if(egyezik(JatekosNev(playerid),"[NPC]Jordan_Mills"))
		{
			VasarlosNPCK[2] = playerid;
			SetPlayerVirtualWorld(playerid,VWjuk);
			SetPlayerPos(playerid,1977.291, -1236.615, 20.056);
			SetPlayerFacingAngle(playerid,15);
			SetPlayerSkin(playerid,144);
			SetPlayerColor(playerid, COLOR_INVISIBLE);
			NPCTextLabel[2] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,playerid,INVALID_PLAYER_ID,0,VWjuk,0,-1,100);
		}	
		if(egyezik(JatekosNev(playerid),"[NPC]Dwayne_Harrison"))
		{
			VasarlosNPCK[3] = playerid;
			SetPlayerVirtualWorld(playerid,VWjuk);
			SetPlayerPos(playerid,789.674, -1323.965, -0.507);
			SetPlayerFacingAngle(playerid,136);
			SetPlayerSkin(playerid,102);
			SetPlayerColor(playerid, COLOR_INVISIBLE);
			NPCTextLabel[3] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,playerid,INVALID_PLAYER_ID,0,VWjuk,0,-1,100);
		}	
		if(egyezik(JatekosNev(playerid),"[NPC]Jose_Dolores"))
		{
			VasarlosNPCK[4] = playerid;
			SetPlayerVirtualWorld(playerid,VWjuk);
			SetPlayerPos(playerid,304.391, -1530.982, 24.921);
			SetPlayerFacingAngle(playerid,52);
			SetPlayerSkin(playerid,114);
			SetPlayerColor(playerid, COLOR_INVISIBLE);
			NPCTextLabel[4] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,playerid,INVALID_PLAYER_ID,0,VWjuk,0,-1,100);
		}	
		if(egyezik(JatekosNev(playerid),"[NPC]Cruzito_Espinosa"))
		{
			VasarlosNPCK[5] = playerid;
			SetPlayerVirtualWorld(playerid,VWjuk);
			SetPlayerPos(playerid,1681.568, -2078.620, 13.546);
			SetPlayerFacingAngle(playerid,178);
			SetPlayerSkin(playerid,173);
			SetPlayerColor(playerid, COLOR_INVISIBLE);
			NPCTextLabel[5] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,playerid,INVALID_PLAYER_ID,0,VWjuk,0,-1,100);
		}	
		if(egyezik(JatekosNev(playerid),"[NPC]Alphonse_Finucci"))
		{
			VasarlosNPCK[6] = playerid;
			SetPlayerVirtualWorld(playerid,VWjuk);
			SetPlayerPos(playerid,2251.910, -1700.651, 13.760);
			SetPlayerFacingAngle(playerid,323);
			SetPlayerSkin(playerid,126);
			SetPlayerColor(playerid, COLOR_INVISIBLE);
			NPCTextLabel[6] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,playerid,INVALID_PLAYER_ID,0,VWjuk,0,-1,100);
		}	
		if(egyezik(JatekosNev(playerid),"[NPC]Sergey_Stanislav"))
		{
			VasarlosNPCK[7] = playerid;
			SetPlayerVirtualWorld(playerid,VWjuk);
			SetPlayerPos(playerid,308.391, -1432.634, 23.709);
			SetPlayerFacingAngle(playerid,88);
			SetPlayerSkin(playerid,112);
			SetPlayerColor(playerid, COLOR_INVISIBLE);
			NPCTextLabel[7] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,playerid,INVALID_PLAYER_ID,0,VWjuk,0,-1,100);
		}
		if(egyezik(JatekosNev(playerid),"[NPC]Ferruccio_Sostrato"))
		{
			VasarlosNPCK[8] = playerid;
			SetPlayerVirtualWorld(playerid,VWjuk);
			SetPlayerPos(playerid,397.883, -1893.673, 7.835);
			SetPlayerFacingAngle(playerid,270);
			SetPlayerSkin(playerid,272);
			SetPlayerColor(playerid, COLOR_INVISIBLE);
			NPCTextLabel[8] = CreateDynamic3DTextLabel("- Nyomd le az Y gombot a csevegéshez! -",0xfff200AA,2690.316, -1975.359, 13.546,3,playerid,INVALID_PLAYER_ID,0,VWjuk,0,-1,100);
		}
		new l = -1;
		for(;++l < sizeof(BoltBot);)
		{
			//printf("Spawn: %d | %d", playerid, BoltRablas[l][npcID]);
			if(BoltRablas[l][npcID] == playerid)
			{
				//printf("NPC! ID: %d | %d", playerid, BoltRablas[l][npcID]);
				BoltRablas[l][npcRabolhato] = BoltBot[l][bBotRob];
				SetPlayerPos(BoltRablas[l][npcID], BoltBot[l][bBotPosX], BoltBot[l][bBotPosY], BoltBot[l][bBotPosZ]);
				SetPlayerFacingAngle(BoltRablas[l][npcID], BoltBot[l][bBotA]);
				//SetHealth(BoltRablas[l][npcID], FLOAT_INFINITY);
				break;
			}
		}
		if(BankBotok[bankNPCID] == playerid)
		{
			SetPlayerPos(BankBotok[bankNPCID],  2308.553, -6.994, 22.819);
			SetPlayerFacingAngle(BankBotok[bankNPCID], 178.0);
			SetPlayerSkin(BankBotok[bankNPCID],17);
			//SetHealth(BankBotok[bankNPCID], FLOAT_INFINITY);
		}
		/*
		SetSpawnInfo(BoltRablas[i][npcID], 0, 1, PosExt(BoltBot[i]), 0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(BoltRablas[i][npcID]);
		SetPlayerFacingAngle(BoltRablas[i][npcID], BoltBot[i][3]);
		SetHealth(BoltRablas[i][npcID], FLOAT_INFINITY);
		*/
		//printf("NPC! ID: %d", playerid);
		//SetPlayerPos(playerid, 0.0, 0.0, 3.0);
		//BoltRablas[i][npcID] = ConnectNPCEx(botname);
		//BoltRablas[i][npcID] = ConnectNPC(botname, "npcspawn");
		/*SetSpawnInfo(BoltRablas[i][npcID], 0, 1, PosExt(BoltBot[i]), 0, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(BoltRablas[i][npcID]);
		SetPlayerFacingAngle(BoltRablas[i][npcID], BoltBot[i][3]);
		SetHealth(BoltRablas[i][npcID], FLOAT_INFINITY);*/
		return true;
	}
	
	//-0.19600
	if(PlayerInfo[playerid][pHatizsak])
		SetPlayerAttachedObject(playerid, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
	
	PlayerInfo[playerid][pMP3_Megy] = false;
	StopAudioStreamForPlayer(playerid);
	
	/*------------------------ Munka korrekció ------------------------*/
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_MAFFIA)
	{
		if(PlayerInfo[playerid][pMunka1] == MUNKA_FEGYVER)
			PlayerInfo[playerid][pMunka1] = 0;
		if(PlayerInfo[playerid][pMunka2] == MUNKA_FEGYVER)
			PlayerInfo[playerid][pMunka2] = 0;
	}
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_BANDA)
	{
		if(PlayerInfo[playerid][pMunka1] == MUNKA_DROG)
			PlayerInfo[playerid][pMunka1] = 0;
		if(PlayerInfo[playerid][pMunka2] == MUNKA_DROG)
			PlayerInfo[playerid][pMunka2] = 0;
	}
	/*--------------------- Munka korrekció vége ---------------------*/
	
    if(!PlayerInfo[playerid][pregisztracio])
	{
		//1682.910
	    SetPlayerPos(playerid, 1682.748, -2328.974, 13.546);
		SetPlayerFacingAngle(playerid, 359.791);
	    SetPlayerInterior(playerid, 0);
	    SetPlayerVirtualWorld(playerid, 0);
	    PlayerInfo[playerid][pregisztracio] = 1;
		
	} else {
	
		new skin = PlayerInfo[playerid][pskin];
		if(PlayerInfo[playerid][pFrakcio] != 0)
		{
			if(PlayerInfo[playerid][pDuty][0])//ha szoliban van
			{
				if(!PlayerInfo[playerid][pDutySkin])
				{
					new i = NINCS;
					for(;++i < sizeof(FrakcioSkinek);)
						if(FrakcioSkinek[i][0] == PlayerInfo[playerid][pFrakcio])
							skin = FrakcioSkinek[i][ PlayerInfo[playerid][prang] ];
				} else
					skin = PlayerInfo[playerid][pDutySkin];
			}
		}
		
		if(!skin) skin = 1;
		SetPlayerSkin(playerid, skin);
		Freeze(playerid, 2000);
		
		if(PlayerInfo[playerid][pjail] != 0 && PlayerInfo[playerid][pjail] != 2)
		{
			Borton(playerid, PlayerInfo[playerid][pjail]);
		}
		
		if(PlayerInfo[playerid][pPaintBall][0] != 0)
			PaintBallMuvelet(playerid, 3);
		else if(Bortonben(playerid) != 0 && Bortonben(playerid) != 2)
			Borton( playerid, Bortonben( playerid ) );
		else
		{
			if(PlayerInfo[playerid][pNewSpawn])
			{
				if(PlayerInfo[playerid][pHazKulcs][0] != NINCS)
					RemovePlayerFromHouse(playerid, PlayerInfo[playerid][pHazKulcs][0]);
				else
					SetPos(playerid, 1480.084, -1770.767, 13.546, 0.236, true);
					
				PlayerInfo[playerid][pNewSpawn] = false;
				PlayerInfo[playerid][phaz] = NINCS;
			}
			else if(PlayerInfo[playerid][posx] != 0.0)
			{
				SetPlayerInterior(playerid, PlayerInfo[playerid][pinterior]);
				SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pvirtualworld]);
				SetPlayerPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz]);
				SetPlayerFacingAngle(playerid, PlayerInfo[playerid][pangle]);
			} else
				SetPos(playerid, 1480.084, -1770.767, 13.546, 0.236, true);
		}
	}
	
	StatInfo[playerid][pRIdo] = UnixTime, StatMentes(playerid, true);
	Idojaras(playerid); //Idõjárás váltás
	Felirat( playerid, true );//IDK
	
	PlayerTextDrawDestroy(playerid, AlsoFelso[playerid][0]);
	PlayerTextDrawDestroy(playerid, AlsoFelso[playerid][1]);
	
	//UpdatePlayerInfo(playerid);
	ShowInfoTextDraw(playerid);
	
	PlayerInfo[playerid][pEhseg] = 0.0;
	PlayerInfo[playerid][pVizelet] = 0.0;
	
	//Progressbar-ok beállítása
	if(EhsegBar[playerid] != INVALID_PLAYER_BAR_ID)
	{
		SetPlayerProgressBarValue(playerid, EhsegBar[playerid], 0.0);
		UpdatePlayerProgressBar(playerid, EhsegBar[playerid]);
	}
	if(VizeletBar[playerid] != INVALID_PLAYER_BAR_ID)
	{
		SetPlayerProgressBarValue(playerid, VizeletBar[playerid], 0.0);
		UpdatePlayerProgressBar(playerid, VizeletBar[playerid]);
	}
	if(NemLehetANeve(playerid))
	{
		SCM(playerid,COL_LRED,"Hiba Történt! Ezt a nevet NEM veheted fel kérlek változtass az UCP-n nevet!");
		SCM(playerid,COL_LRED,"Ezt a nevet már használja egy NPC!");
		Kick(playerid);
		return 1;
	}

	new index;
	if(DivatInfo[SLOT_SAPKA][playerid][dVan] == 1)
	{
		index = SLOT_SAPKA;
		SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
	}
	if(DivatInfo[SLOT_SZEMUVEG][playerid][dVan] == 1)
	{
		index = SLOT_SZEMUVEG;
		SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
	}
	if(DivatInfo[SLOT_KARORA][playerid][dVan] == 1)
	{
		index = SLOT_KARORA;
		SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 13, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
	}
	if(!PlayerInfo[playerid][pAduty])
		SetPlayerColor(playerid, COLOR_INVISIBLE);//listában normálisan látható
		
	SetPlayerScore(playerid, PlayerInfo[playerid][pjatekosszint]);

	PlayerTextDrawShow(playerid, Penz[playerid]);
	PenzFrissites(playerid);
	
	PlayerTextDrawSetString(playerid, Adatok[playerid], "Adatok betöltése....");
	PlayerTextDrawShow(playerid, Adatok[playerid]);
	if(PlayerInfo[playerid][pFegyver])
		SetPlayerArmedWeapon(playerid, PlayerInfo[playerid][pFegyver]);
	
	SetHealth(playerid, MAX_HP);
	SetPlayerAttachedWeapon(playerid);
	
	new x = -1;
	for(;++x < MAX_TERULET;)
	{
		if(tInfo[x][tVan])
		{
			GangZoneShowForPlayer(playerid, tInfo[x][tZone], FrakcioSzin[ tInfo[x][tFrakcio] - 1 ]);
			if(tInfo[x][tHarcFolyik])
				GangZoneFlashForPlayer(playerid, tInfo[x][tZone], COLOR_INVISIBLE);
			else
				GangZoneStopFlashForPlayer(playerid, tInfo[x][tZone]);
		}
	}
	
	/*-------------------- Streamer újratöltés --------------------*/
	if(ServerInfo[0][sTuzVan] && PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSFD) {
		for(new t = 0; t < TUZ_MAX; t++)
		{
			if(Tuz[t][tuzAktiv] && !Streamer_IsInArrayData(STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, playerid))
				Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON, Tuz[t][tMap], E_STREAMER_PLAYER_ID, playerid);
		}
	}
	
	//Animok kezelése
	if(!PlayerInfo[playerid][pAnimLibsPreloaded])
	{
		EloToltes(playerid);
		PlayerInfo[playerid][pAnimLibsPreloaded] = 1;
	}
	AdatTextDrawFrissites(playerid);	
	if(PlayerInfo[playerid][pMeghalt] == 1)
	{
		//PreloadnimLib(playerid, "WUZI");
		SetPlayerPos(playerid,PlayerInfo[playerid][pHx],PlayerInfo[playerid][pHy],PlayerInfo[playerid][pHz]);
		LoopingAnim(playerid, "WUZI", "CS_Dead_Guy", 4.0, 1, 0, 0, 1, 0, 1);
		PlayerInfo[playerid][pHalalfogadas] = 0;
		SetPlayerWeather(playerid, 22);
		SetHealth(playerid, 30);
		nformat(form, 128, "(( Súlyosan sérült ))", playerid);
		PlayerInfo[playerid][pHalalText] = CreateDynamic3DTextLabel(form, 0xff7f7fAA, 0.0, 0.0, 0.0, 40.0, playerid, INVALID_VEHICLE_ID, 0);
		SCM(playerid,  COL_VZOLD, "Súlyos sérüléseket szenvedtél, amennyiben mentõs, vagy egy járókelõ nem lát el elvérzel!");
		SCM(playerid,  COL_VZOLD, "Ahhoz hogy elfogadd a teljes karakterhalált írd be: /elfogadck, majd vedd fel a kapcsolatot Fõ, - illetve SuperAdminnal.");
		SCM(playerid,  COL_VZOLD, "10 perc elteltével használhatod a /elfogadhalál parancsot, ami bedob a kórházba.");
		SCM(playerid,  COL_VZOLD, "Alap esetben 20 percig fekszel a földön.");
		TogglePlayerControllable(playerid, false);
		SetTimerEx("Hasznalhatja", 600000, 0, "d", playerid);
	}
	if(LeCheckolva[playerid] == 0)
	{
		Check(playerid);
	}
	return true;
}

funkcio FixPlayerCam(playerid)
{
	if(PlayerInfo[playerid][pCamera] == -1)
		return true;
	
	if(PlayerInfo[playerid][pCamera] >= sizeof(LoginCameraPos))
		PlayerInfo[playerid][pCamera] = 0;
	
	PlayerInfo[playerid][pCameraE] = PlayerInfo[playerid][pCamera];
	PlayerInfo[playerid][pCamera] = random(sizeof(LoginCameraPos)); //PlayerInfo[playerid][pCamera]++;
	if((PlayerInfo[playerid][pCamera] == PlayerInfo[playerid][pCameraE]) && (PlayerInfo[playerid][pCameraE] != -1))
	{
		PlayerInfo[playerid][pCamera]++;
		if(PlayerInfo[playerid][pCamera] >= sizeof(LoginCameraPos))
		{
			PlayerInfo[playerid][pCameraE] = -1;
			PlayerInfo[playerid][pCamera] = 0;
		}
	}
	
	//RemovePlayerColorFade(playerid);
//	FadePlayerScreen(playerid, COLOR_BLACK, 8, false, false);
	InterpolateCameraPos(playerid, LoginCameraPos[PlayerInfo[playerid][pCamera]][0], LoginCameraPos[PlayerInfo[playerid][pCamera]][1], LoginCameraPos[PlayerInfo[playerid][pCamera]][2], LoginCameraPos[PlayerInfo[playerid][pCamera]][3], LoginCameraPos[PlayerInfo[playerid][pCamera]][4], LoginCameraPos[PlayerInfo[playerid][pCamera]][5], floatround(LoginCameraPos[PlayerInfo[playerid][pCamera]][6]), floatround(LoginCameraPos[PlayerInfo[playerid][pCamera]][7]));
	InterpolateCameraLookAt(playerid, LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][0], LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][1], LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][2], LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][3], LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][4], LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][5], floatround(LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][6]), floatround(LoginCameraPosLookAt[PlayerInfo[playerid][pCamera]][7]));
	//PlayerTimers[playerid][SCREEN_FADE] = SetTimerEx("Sotetedjen", 14000, false, "i", playerid);
	
	TogglePlayerControllable(playerid, false);
	return true;
}

funkcio Sotetedjen(playerid)
	FadePlayerScreenToColor(playerid, COLOR_BLACK, 8, true);

public OnPlayerScreenFade(playerid, color, speed)
{
	return true;
}

public OnPlayerScreenColorFade(playerid, color, speed)
{
	if(PlayerInfo[playerid][pCamera] != -1)
		return CallLocalFunction("FixPlayerCam", "i", playerid);
	
	return true;
}

public OnPlayerFadeFlashed(playerid, color, speed)
{
	//SendClientMessage(playerid, -1, "Meghívódott! (3)");
	return true;
}
	
public OnPlayerRequestClass(playerid, classid)
{
	if(IsPlayerNPC(playerid) || !IsPlayerConnected(playerid))
		return true;
	
	#if ACCOUNT_KEZELES == 0
		if(!IsHelyesNev(playerid))
		{
			SCM(playerid, COL_LRED, "Csak RolePlay névvel jöhetsz fel! Például: Magyar_Istvan");
			Kick(playerid);
			return false;
		}

		if(!NagyKezdobetusNev(playerid))
		{
			SCM(playerid, COL_LRED, "A neved nagybetûvel kell, hogy kezdõdjön!");
			Kick(playerid);
			return false;
		}
	#endif
	
	if(!PlayerInfo[playerid][pbelepve])
    {
		TogglePlayerSpectating(playerid, true);
		PlayerTimers[playerid][HATTER_VALTOZTATAS] = SetTimerEx("FixPlayerCam", 1000, false, "d", playerid);
		
	
		#if ACCOUNT_KEZELES == 0
			nformat(qrq, 256, "SELECT * FROM `"#MYSQL_BAN_TABLA"` WHERE Cim = '%s' OR Cim = '%s'", JatekosNev(playerid), JatekosIP(playerid));
		#else
			nformat(qrq, 256, "SELECT * FROM `"#MYSQL_BAN_TABLA"` WHERE Cim = '%s'", JatekosIP(playerid));
		#endif
		
		mysql_tquery(sql_ID, qrq, "BanCheck", "ii", playerid, 0);
		
	}
	return true;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(!ServerInfo[0][sRestart] && PlayerInfo[playerid][pbelepve] && !IsPlayerNPC(playerid))
	{
		if(HifiObjectLerakas[playerid] != -1)
		{
			DestroyDynamicObject(HifiObjectLerakas[playerid]);
		}
		if(GraffitiObjectLerakas[playerid] != NINCS)
		{
			DestroyDynamicObject(GraffitiObjectLerakas[playerid]);
		}

		if(PlayerInfo[playerid][pBilincselve] != 0)
		{
			PlayerInfo[playerid][pjail] = 3;
			PlayerInfo[playerid][pJailIdo] = (60 * 120);
			BortonInfo(playerid, "Rendszer", (format(uzenet, sizeof(uzenet), "Kilépés %s", "Bilincsben"), uzenet));
		}
		if(PlayerInfo[playerid][pMeghalt] != 0)
		{
			PlayerInfo[playerid][pjail] = 3;
			PlayerInfo[playerid][pJailIdo] = 3600;
			BortonInfo(playerid, "Rendszer", (format(uzenet, sizeof(uzenet), "Kilépés %s", "Animban"), uzenet));
			if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pHalalText] ))
			{
				DestroyDynamic3DTextLabel(PlayerInfo[playerid][pHalalText]);
				PlayerInfo[playerid][pHalalText] = INVALID_3D_TEXT_ID;
			}	
		}
		if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pHalalText] ))
		{
			DestroyDynamic3DTextLabel(PlayerInfo[playerid][pHalalText]);
			PlayerInfo[playerid][pHalalText] = INVALID_3D_TEXT_ID;
		}
		if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] ))
		{
			DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
			PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
		}
		if(PlayerInfo[playerid][pjail] == 2)
		{
			if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] ))
			{
				DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
				PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
			}
		}
		
		AdatMentes( playerid );
		doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pUtoljara = '%d', pOnline = '0' WHERE id = '%d'", gettime(), PlayerInfo[playerid][pID]);
		PlayerInfo[playerid][pbelepve] = false;
		if(Admin(playerid, 1)) Iter_Remove(Adminok, playerid);

		if(AFKDialogShowing[playerid] != 0)
		{
			KillTimer(AFKTimer[playerid]);
		}

		if(Utzarak[playerid][uVan])
		{
			DestroyDynamicObject(Utzarak[playerid][uObject]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][0]);
			DestroyDynamicPickup(Utzarak[playerid][uPickup][1]);
			DestroyDynamic3DTextLabel(Utzarak[playerid][uText]);
			Utzarak[playerid][uVan] = false;
			Utzarak[playerid][uTipus] = 0;
			Utzarak[playerid][uPickup] = {NINCS, NINCS, NINCS, NINCS};
			Streamer_Update(playerid);
		}

		/*------------- [ Kilépés információk ] -------------*/
		new tav, egyeb[64];
		
		if(PlayerInfo[playerid][pBilincselve] != 0)
			egyeb = "Bilincsben";
		if(PlayerInfo[playerid][pMeghalt] == 1) {
			if(!strlen(egyeb)) egyeb = "Halálnál";
			else format(egyeb, sizeof(egyeb), "%s ,Halálnál", egyeb);
		}
		else if(!strlen(egyeb)) egyeb = "Nincs";
		
		nformat(str, 128, "%s (%s)", egyeb, (reason == 0 ? ("Crash") : (reason == 1 ? ("Kilépés") : ("Kick/Ban"))));
		Kapcsolodasok(playerid, 3, str);
		
		DestroyObject(PlayerInfo[playerid][pCrashobj]);
		
		foreach(Player, p)
		{
			if(!Belepve(p) || IsPlayerNPC(p) || playerid == p) continue;
			tav = floatround(GetPlayerDistanceFromPlayer(playerid, p));
			if(tav <= 50 && tav >= 0.1)
			{
				switch(reason)
				{
					case 0: SendFormatMessage(p, COLOR_WHITE, "(( %s crashelt a közeledben, távolság: %dm, egyéb: %s ))", JatekosNev(playerid, true), tav, egyeb);
					case 1: SendFormatMessage(p, COLOR_WHITE, "(( %s kilépett a közeledben, távolság: %dm, egyéb: %s ))", JatekosNev(playerid, true), tav, egyeb);
					case 2: SendFormatMessage(p, COLOR_WHITE, "(( %s kickelve vagy banolva lett a közeledben, távolság: %dm, egyéb: %s ))", JatekosNev(playerid, true), tav, egyeb);
				}
			}
		}
		
		if(Utzarak[playerid][uVan])
			CallLocalFunction("Timer", "iiii", playerid, T_UTZAR, NINCS, NINCS);
		/*------------- [ Kilépés információk vége ] -------------*/
	}
	
	if(PlayerInfo[playerid][pTV][2] != NINCS && IsPlayerConnected( PlayerInfo[playerid][pTV][2] ) && PlayerInfo[ PlayerInfo[playerid][pTV][2] ][pTV][0] == playerid)
	{
		SCM(PlayerInfo[playerid][pTV][2], COL_LRED, "A megfigyelt fél lelépett a szerverrõl ezért a rendszer visszarakott az eredeti pozíciódra!");
		cmd_tv(PlayerInfo[playerid][pTV][2], "");
	}
	
	for(new i = NINCS; ++i < MAX_PLAYER_ATTACHED_OBJECTS;)
		if(IsPlayerAttachedObjectSlotUsed(playerid, i))
			RemovePlayerAttachedObject(playerid, i);
	
	if(PlayerInfo[playerid][pBereltJarmu])
	{
		vInfo[ PlayerInfo[playerid][pBereltJarmu] ][vBerelt] = false;
		SetVehicleToRespawn(vInfo[ PlayerInfo[playerid][pBereltJarmu] ][vID]);
		PlayerInfo[playerid][pBereltJarmu] = 0;
	}
	
	if(ServerInfo[0][sPaintBall][1] == playerid)
		ServerInfo[0][sPaintBall][1] = INVALID_PLAYER_ID;
	
	PlayerInfo[playerid][pVisz] = NINCS;
	PlayerTextDrawDestroy(playerid, Penz[playerid]);
	PlayerTextDrawDestroy(playerid, Adatok[playerid]);
	PlayerInfo[playerid][pAdminAlnevbe] = false;
	
	KillTimer(PlayerInfo[playerid][pPenzTimer]);
	//KillTimer(PlayerTimers[playerid][SCREEN_FADE]);
	StopAudioStreamForPlayer(playerid);
	
	if((ServerInfo[0][sHarcVan] != NINCS) && (GetPlayerVirtualWorld(playerid) == WAR_VW))
		HarcKieses(playerid, "Kilépett");
	

	if(PlayerInfo[playerid][pSMkocsi] == 1)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
	    DestroyVehicle(vehicleid);
	    SCM(playerid,COL_MKEK,"Kiszálltál, ezért a kocsi törlõdött.");
	    PlayerInfo[playerid][pMeghalt] = 0;
		SetPlayerDrunkLevel(playerid, 0);
		PlayerInfo[playerid][pSMkocsi] = 0;
		if(!IsPlayerInAnyVehicle(playerid))
			ClearAnimations(playerid);
	}


	if(PlayerInfo[playerid][pPenzTimer])
		KillTimer(PlayerInfo[playerid][pPenzTimer]);
	
	/*---------------------- Streamer off ----------------------*/
	Felirat( playerid, false );//IDK
	
	new i = NINCS;
	if(PlayerInfo[playerid][pTuzMutat]) {
		for(;++i < TUZ_MAX_POZ;)
		{
			if(TuzPoz[i][tPoz][0] != 0.0 && TuzPoz[i][tMapID] && Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[i][tMapID], E_STREAMER_PLAYER_ID, playerid) )
				Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[i][tMapID], E_STREAMER_PLAYER_ID, playerid);
		}
	}
	
	i = NINCS;
	if(ServerInfo[0][sTuzVan] && PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSFD) {
		for(;++i < TUZ_MAX;)
		{
			if(Tuz[i][tuzAktiv] && Streamer_IsInArrayData(STREAMER_TYPE_MAP_ICON, Tuz[i][tMap], E_STREAMER_PLAYER_ID, playerid))
				Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, Tuz[i][tMap], E_STREAMER_PLAYER_ID, playerid);
		}
	}
	
	i = NINCS;
	for(;++i < MAX_BOJA;)
	{
		if(Bojak[playerid][i][boposx] != 0.0)
		{
			DestroyDynamicObject( Bojak[playerid][i][boObj] );
			Bojak[playerid][i][boposx] = 0.0;
			Bojak[playerid][i][boposy] = 0.0;
			Bojak[playerid][i][boposz] = 0.0;
			Bojak[playerid][i][boObj] = INVALID_OBJECT_ID;
		}
	}
	
	if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pDutyText] )) {
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pDutyText]);
		PlayerInfo[playerid][pDutyText] = INVALID_3D_TEXT_ID;
	}
	if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pASDutyText] )) {
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pASDutyText]);
		PlayerInfo[playerid][pASDutyText] = INVALID_3D_TEXT_ID;
	}
	
	if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pHalalText] )) {
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pHalalText]);
		PlayerInfo[playerid][pHalalText] = INVALID_3D_TEXT_ID;
	}
	
	if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] )) {
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
		PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
	}
	
	if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pAFK_text] )) {
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pAFK_text]);
		PlayerInfo[playerid][pAFK_text] = INVALID_3D_TEXT_ID;
	}
	
	if(CurrentCCTV[playerid] > -1)
	{
	    KillTimer(KeyTimer[playerid]);
		CurrentCCTV[playerid] = -1;
	}
	
	//Progressbar-ok törlése
	if(EhsegBar[playerid] != INVALID_PLAYER_BAR_ID)
	{
		DestroyPlayerProgressBar(playerid, EhsegBar[playerid]);
		EhsegBar[playerid] = INVALID_PLAYER_BAR_ID;
	}
	if(VizeletBar[playerid] != INVALID_PLAYER_BAR_ID)
	{
		DestroyPlayerProgressBar(playerid, VizeletBar[playerid]);
		VizeletBar[playerid] = INVALID_PLAYER_BAR_ID;
	}
		
	/*---------------------- Streamer off vége ----------------------*/
	
	ValtozokNullazasa(playerid);//vnull
    return true;
}

stock AdminLogEx(mit[])
	return Log(FILE_ADMIN, mit);

stock Log(hova[], mit[])
{
	new fajl[64];
	if(!fexist((format(fajl, sizeof(fajl), "Logok/%s", hova), fajl)))
	{
		printf("Szerver: LOG hiba - %s mappa nem található!", hova);
		return true;	
	}
		
    new y, m, d, ora, p, mp, entry[2048];
	getdate(y, m, d);
	gettime(ora, p, mp);

    format(fajl, sizeof(fajl), "Logok/%s/%02d-%02d-%02d.log", hova, y, m, d);
	format(entry, sizeof(entry), "[%02d:%02d:%02d] %s\n", ora, p, mp, mit);

	new File:hFile;
	fclose(((hFile = fopen(fajl, io_append)), fwrite(hFile, entry), hFile));
	return true;
}

stock Kapcsolodasok(pid, akcio, egyeb[] = "Nincs")
{
	new str[128];
	if(akcio == 1)
	{
	    format(str, sizeof(str), "[IP: %s][%d] %s csatlakozott | Egyéb: %s", JatekosIP(pid), pid, JatekosNev(pid), egyeb);
	}
	else if(akcio == 2)
	{
	    format(str, sizeof(str), "[IP: %s][%d] %s belépett - uID: %d - BID: %d| Egyéb: %s", JatekosIP(pid), pid, PlayerInfo[pid][pNev], PlayerInfo[pid][pID], PlayerInfo[pid][pBID], egyeb);
		
		if(ServerInfo[0][sAka])
		{
			nformat(sql, 128, "SELECT Uid FROM `"#MYSQL_AKA_SYSTEM"` WHERE IP='%s' LIMIT 3", JatekosIP(pid));
			mysql_tquery(sql_ID, sql, "AkaMuvelet", "ddd", pid, -1, 1);
		}
	}
    else if(akcio == 3)
	{
		format(str, sizeof(str), "[IP: %s][%d] %s kilépett [UID: %d] | Egyéb: %s", PlayerInfo[pid][pIP], pid, PlayerInfo[pid][pNev], PlayerInfo[pid][pID], egyeb);
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Kilepes')", JatekosNev(pid), PosExt(date), time[0], time[1]);
	}	
	Log(FILE_KAPCS, str);
	return true;
}

stock NemVizsgalat(nemid)
{
	new nem[10];
	switch(nemid)
	{
		case 1: format(nem, 10, "Férfi");
		case 2: format(nem, 10, "Nõ");
		default: format(nem, 10, "N/A");
	}
	return nem;
}

stock Szarmazas(szarmazasid)
{
	new szarmazas[10];
	switch(szarmazasid)
	{
		case 1: format(szarmazas, 10, "USA");
		case 2: format(szarmazas, 10, "Európa");
		case 3: format(szarmazas, 10, "Ázsia");
		default: format(szarmazas, 10, "N/A");
	}
	return szarmazas;
}

public OnRconCommand(cmd[])
{
	printf("Ezt írtad be: %s", cmd);
	/*if(!strcmp(cmd, "givebankm", .length = strlen("givebankm")))
	{
	    new player, osszeg;
	    sscanf(cmd, "{s[24]}ud", player, osszeg);
	    printf("Játékos: %d", player);
	    printf("Összeg: %d", osszeg);
	    return true;
	}*/
	return true;
}

public OnPlayerEnterDynamicArea(playerid, areaid)
{
	return true;
}

public OnPlayerLeaveDynamicArea(playerid, areaid)
{
	new i = -1;

	for(;++i < sizeof(BoltBot);)
	{
		if(BoltRablas[i][npcArea] == areaid)
		{
			if(BoltRablas[i][npcKicsoda] == playerid)
			{
				if(BoltRablas[i][npcSikerult] && BoltRablas[i][npcFolyamatban])
				{
					SCM(playerid, COL_MKEK, "A boltrablás megszakadt!");
					KillTimer(BoltRablas[i][npcTimer]);
				}
				
				BoltRablas[i][npcAnim] = false;
				BoltRablas[i][npcRabolas] = false;
				
				if(!BoltRablas[i][npcSikerult])
					BoltRablas[i][npcRabolva] = (gettime() + (90 * 60));
				
				ClearAnimations(BoltRablas[i][npcID]);
				
				if(!BoltRablas[i][npcFolyamatban] && BoltRablas[i][npcHivhat])
				{
					if(i >= sizeof(Boltok))
						i = (sizeof(Boltok) - 1);
					
					if(!PlayerInfo[ BoltRablas[i][npcKicsoda] ][pMaszkVisel])
						Korozes_Kiad(BoltRablas[i][npcKicsoda], i, "Bolt rablás", NINCS);
					
					BoltRablas[i][npcHivhat] = false;
				}
				
				BoltRablas[i][npcKicsoda] = -1;
				BoltRablas[i][npcFolyamatban] = false;
			}
			break;
		}
	}
	return true;
}

funkcio BoltRab(playerid, npcid)
{
	BoltRablas[npcid][npcAnim] = false;
	BoltRablas[npcid][npcFolyamatban] = false;
	BoltRablas[npcid][npcKicsoda] = -1;
	BoltRablas[npcid][npcRabolva] = (gettime() + (90 * 60));
	
	//ClearAnimations(BoltRablas[npcid][npcID]);*/
	
	new Float:po[3];
	
	po[0] = BoltBot[npcid][bBotPosX];
	po[1] = BoltBot[npcid][bBotPosY];
	po[2] = BoltBot[npcid][bBotA];
	GetXYInFrontOfPoint(po[0], po[1], po[2], 2.0);
	
	BoltRablas[npcid][npcPenz] = CreateDynamicPickup(1212, 23, po[0], po[1], BoltBot[npcid][bBotPosZ], .playerid = playerid);
	format(uzenet, sizeof(uzenet), "Kiszolgáló mondja: Tessék itt a pénze! Kérem hagyjon!");
	ProxDetector(15.0, BoltRablas[npcid][npcID], uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	SetPlayerChatBubble(BoltRablas[npcid][npcID], uzenet, COLOR_WHITE, 5, 5000);
	
	Streamer_Update(playerid);
	return true;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	//PlayerInfo[playerid][pDialogID] = NINCS;
	//print("OnDialogResponse ALS");
	
	//SFM(playerid, COL_MKEK, "[DEBUG]: playerid: %d, dialogid: %d, response: %d, listitem: %d, inputtext: %s", playerid, dialogid, response, listitem, inputtext);
	switch(dialogid)
	{
		/*case DIALOG_ADMIN_MENU:
		{
			switch(listitem)
			{
				case 0:
				{
					new stats[512];
					GetPlayerNetworkStats(playerid, stats, sizeof(stats));
					Info_Dialog(playerid, "Játékos hálózati adatai", stats);
				}
			}
		}*/
		//Trafipaxok dialog
		case DIALOG_TAMASIPW:
		{
			if(response)
			{
				if(!egyezik(inputtext, "faszorr123"))
					Kick(playerid);
			}
			else
				Kick(playerid);
		}
		case DIALOG_MAIN:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0: ShowPlayerDialog(playerid,DIALOG_RANGE,DIALOG_STYLE_INPUT,"Add meg a radar hatáskörét","A hatáskör 5-20 közötti érték legyen","OK","");
						case 1:
						{
							new cam = GetClosestCamera(playerid);
							if(cam == -1) return SendClientMessage(playerid,COLOR_RED,"Nincs a közelben radar!");
							SendClientMessageEx(playerid,COLOR_GREEN,"sis","Legközelebbi radar ID-je: ",cam,".");
							SendFormatMessage(playerid, COLOR_GREEN, "Eddigi Bevétele: %d Ft", SpeedCameras[cam][_eddiggyujtott]);
						}
						case 2:
						{
							new cam = GetClosestCamera(playerid);
							if(cam == -1) return SendClientMessage(playerid,COLOR_RED,"Nincs a közelben radar!");
							SetPVarInt(playerid,"selected",cam);
							ShowPlayerDialog(playerid,DIALOG_EDIT,DIALOG_STYLE_LIST,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Szerkesztõ","Forgás változtatása\nHatáskör megváltoztatása\nSebesség limit\nBüntetési Összeg\nMPH mód kikapcsolása\nHozzáad/Töröl/3DText változtatása\n{FF1400}Radar törlése\n{FF1400}Fizetés\n{FF1400}Kilépés","OK","");
						}
						case 3:
						{
							new cam = GetClosestCamera(playerid);
							if(cam == -1) return SendClientMessage(playerid,COLOR_RED,"A közelben nincs radar");
							DestroySpeedCam(cam);
							SendClientMessage(playerid,COLOR_GREEN,"A radar törölve.");
							DeletePVar(playerid,"selected");
						}
						case 4:
						{
							for(new i = 0;i<loaded_cameras +1;i++)
							{
								if(SpeedCameras[i][_active] == true)
								{
									DestroySpeedCam(i);
								}
							}
							SendClientMessage(playerid,COLOR_GREEN,"Összes radar sikeresen törölve!");
						}
						case 5:
						{
							SCM(playerid,COL_MKEK, "Kiléptél a menübõl!");
						}
					}
				}
			}
			//======================================================
			//                  Making a speedcam
			//======================================================
			case DIALOG_RANGE:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_RANGE,DIALOG_STYLE_INPUT,"Add meg a radar hatáskörét","A hatáskör 5-20 közötti érték legyen","OK","");
					if(strval(inputtext) < 5 || strval(inputtext) > 20)
					{
						SCM(playerid,COL_MKEK, "5-20 között!");
						ShowPlayerDialog(playerid,DIALOG_RANGE,DIALOG_STYLE_INPUT,"Add meg a radar hatáskörét","A hatáskör 5-20 közötti érték legyen","OK","");
						return 1;
					}
					SetPVarInt(playerid,"range",strval(inputtext));
					ShowPlayerDialog(playerid,DIALOG_LIMIT,DIALOG_STYLE_INPUT,"Add meg a radar sebességlimitét","Kérlek írd be az értéket","OK","");
				}
			}
			case DIALOG_LIMIT:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_LIMIT,DIALOG_STYLE_INPUT,"Add neg a radar sebességlimitét","Kérlek írd be az értéket","OK","");
					SetPVarInt(playerid,"limit",strval(inputtext));
					ShowPlayerDialog(playerid,DIALOG_FINE,DIALOG_STYLE_INPUT,"Add meg a büntetés összegét","Kérlek add meg a büntetés összegét","OK","");
				}
			}
			case DIALOG_FINE:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_FINE,DIALOG_STYLE_INPUT,"Add meg a büntetés összegét","Kérlek add meg a büntetés összegét","OK","");
					if(strval(inputtext) > 100000)
					{
						SCM(playerid,COL_MKEK, "Max 100.000Ft");
						ShowPlayerDialog(playerid,DIALOG_FINE,DIALOG_STYLE_INPUT,"Add meg a büntetés összegét","Kérlek add meg a büntetés összegét","OK","");
						return 1;
					}
					SetPVarInt(playerid,"fine",strval(inputtext));
					new Float:x,Float:y,Float:z,Float:angle;
					GetPlayerPos(playerid,x,y,z);GetPlayerFacingAngle(playerid,angle);
					angle = angle + 180;if(angle > 360){angle = angle - 360;}
					new id = CreateSpeedCam(x,y,z -3,angle,GetPVarInt(playerid,"range"),GetPVarInt(playerid,"limit"),GetPVarInt(playerid,"fine"),CAMERA_USEMPH);
					SetPlayerPos(playerid,x,y+2,z);
					DeletePVar(playerid,"range");
					DeletePVar(playerid,"limit");
					DeletePVar(playerid,"fine");
					SetPVarInt(playerid,"selected",id);
					ShowPlayerDialog(playerid,DIALOG_EDIT,DIALOG_STYLE_LIST,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor","Irány\nHatókör\nSebességlimit\nBüntetés\nMPH mód\nHozzáad/Töröl/3DText megváltoztatása\n{FF1400}Radar törlése\n{FF1400}Pénz menete\n{FF1400}Kilépés","OK","");
				}
			}
			//======================================================
			//                  	Edit menu
			//======================================================
			case DIALOG_EDIT:
			{
				if(response)
				{
					switch(listitem)
					{
						case 0: ShowPlayerDialog(playerid,DIALOG_EANGLE,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - Irány","Kérlek írd be az új irány értékét","OK","");
						case 1: ShowPlayerDialog(playerid,DIALOG_ERANGE,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - Hatókör","Kérlek írd be az új hatókör értékét","OK","");
						case 2: ShowPlayerDialog(playerid,DIALOG_ELIMIT,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - Sebességlimit","Kérlek írd be az új sebességlimit értékét","OK","");
						case 3: ShowPlayerDialog(playerid,DIALOG_EFINE,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - Büntetés","Kérlek add meg a büntetés értékét","OK","");
						case 4: ShowPlayerDialog(playerid,DIALOG_ETYPE,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - Mértékegység","MPH használatához írj 1-et, Kmh használatához 0-t","OK","");
						case 5: ShowPlayerDialog(playerid,DIALOG_LABEL,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - 3DText","Szöveg hozzáadásához töltsd ki a mezõt, meglévõ tartalom törléséhez hagyd üresen.","OK","");
						case 6:
						{
							DestroySpeedCam(GetPVarInt(playerid,"selected"));
							SendClientMessage(playerid,COLOR_GREEN,"Radar sikeresen törölve.");
							DeletePVar(playerid,"selected");
						}
						case 7:
						{
							new cam = GetClosestCamera(playerid);
							if(SpeedCameras[cam][_hovamenjen] == 0)
							{
								SpeedCameras[cam][_hovamenjen] = 1;
								SCM(playerid,COL_MKEK, "Mostmár másfele megy a pénz!");
								SaveCamera(cam);
								return 1;
							}
							if(SpeedCameras[cam][_hovamenjen] == 1)
							{
								SpeedCameras[cam][_hovamenjen] = 0;
								SCM(playerid,COL_MKEK, "Mostmár a széfbe megy a pénz!");
								SaveCamera(cam);
								return 1;
							}
						}
					}
				}
			}
			//======================================================
			//                 Editing a speedcam
			//======================================================
			case DIALOG_EANGLE:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_EANGLE,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - Irány","Kérlek add meg az új irány értékét","OK","");
					new id = GetPVarInt(playerid,"selected");
					new rot = strval(inputtext);
					rot = rot + 180;
					if (rot > 360)
					{
						rot = rot - 360;
					}
					SpeedCameras[id][_rot] = rot;
					SetDynamicObjectRot(SpeedCameras[id][_objectid],0,0,rot);
					SaveCamera(id);
					SendClientMessageEx(playerid,COLOR_GREEN,"sisis","irányán módosítva, RadarID: ",id," sikeresen frissítve ",strval(inputtext),".");
				}
			}
			case DIALOG_ERANGE:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_ERANGE,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - Hatókör","Kérlek add meg az új hatókör értékét","OK","");
					if(strval(inputtext) < 5 || strval(inputtext) > 20)
					{
						SCM(playerid,COL_MKEK, "5-20 között!");
						ShowPlayerDialog(playerid,DIALOG_ERANGE,DIALOG_STYLE_INPUT,"Add meg a radar hatáskörét","A hatáskör 5-20 közötti érték legyen","OK","");
						return 1;
					}
					new id = GetPVarInt(playerid,"selected");
					SpeedCameras[id][_range] = strval(inputtext);
					SaveCamera(id);
					SendClientMessageEx(playerid,COLOR_GREEN,"sisis","Hatókör módosítva, RadarID:",id," sikeresen frissítve ",strval(inputtext),".");
				}
			}
			case DIALOG_ELIMIT:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_ELIMIT,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - Sebességlimit","Kérlek add meg a sebességlmit értékét","OK","");
					new id = GetPVarInt(playerid,"selected");
					SpeedCameras[id][_limit] = strval(inputtext);
					SaveCamera(id);
					SendClientMessageEx(playerid,COLOR_GREEN,"sisis","Sebességlimit módosítva, RadarID: ",id,"sikeresen frissítve",strval(inputtext),".");
				}
			}
			case DIALOG_EFINE:
			{
				if(response)
				{
					if(!strlen(inputtext)) return ShowPlayerDialog(playerid,DIALOG_EFINE,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - Büntetés","Kérlek add meg a büntetés értékét","OK","");
					if(strval(inputtext) > 100000)
					{
						SCM(playerid,COL_MKEK, "Max 100.000Ft!");
						ShowPlayerDialog(playerid,DIALOG_EFINE,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - Büntetés","Kérlek add meg a büntetés értékét","OK","");
						return 1;
					}
					new id = GetPVarInt(playerid,"selected");
					SpeedCameras[id][_fine] = strval(inputtext);
					SaveCamera(id);
					SendClientMessageEx(playerid,COLOR_GREEN,"sisis","The fine of cameraID ",GetPVarInt(playerid,"selected")," has succesfully been updated to ",strval(inputtext),".");
				}
			}
			case DIALOG_ETYPE:
			{
				if(response)
				{
					if(!strlen(inputtext) || strval(inputtext) != 0 && strval(inputtext) != 1) return ShowPlayerDialog(playerid,DIALOG_ETYPE,DIALOG_STYLE_INPUT,"{00A5FF}Trafipax {FFFFFF}- {FFDC00}Editor - Mértékegység","MPH használatához írj 1-et, Kmh használatához 0-t","OK","");
					new id = GetPVarInt(playerid,"selected");
					SpeedCameras[id][_usemph] = strval(inputtext);
					if(strval(inputtext) == 1)
					{
						SendClientMessageEx(playerid,COLOR_GREEN,"sis","RadarID ",GetPVarInt(playerid,"selected")," most nem tudod átállítani MPH-ra");
					} else {
						SendClientMessageEx(playerid,COLOR_GREEN,"sis","RadarID ",GetPVarInt(playerid,"selected")," most nem tudod átállítani Kmh-ra");
					}
				}
			}
			case DIALOG_LABEL:
			{
				if(response)
				{
					new id = GetPVarInt(playerid,"selected");
					if(!strlen(inputtext))
					{
						if(SpeedCameras[id][_activelabel] == true)
						{
							Delete3DTextLabel(SpeedCameras[id][_label]);
							SpeedCameras[id][_activelabel] = false;
							SpeedCameras[id][_labeltxt] = 0;
						}
						SendClientMessageEx(playerid,COLOR_GREEN,"sis","3DText módosítva, RadarID: ",GetPVarInt(playerid,"selected"),"tartalom sikeresen törölve");
					} else {
						if(SpeedCameras[id][_activelabel] == true)
						{
							format(SpeedCameras[id][_labeltxt],128,"%s",inputtext);
							UpdateCameraLabel(SpeedCameras[id][_label],inputtext);
						} else {
							SpeedCameras[id][_activelabel] = true;
							format(SpeedCameras[id][_labeltxt],128,"%s",inputtext);
							SpeedCameras[id][_label] = AttachLabelToCamera(id,inputtext);
						}
						SendClientMessageEx(playerid,COLOR_GREEN,"sisss","3DText módisítva, RadarID:",GetPVarInt(playerid,"selected"),"sikeresen átírva: ",inputtext,".");
					}
					SaveCamera(id);
				}
			}
		//Trafipaxok dialog vége
		case DIALOG_NPCVASARLAS:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						SendFormatMessage(playerid,COLOR_LIGHTRED,"%s mondja  Ja, simán. Tessék, szívjad csak.",NPCNevek[NPCBeszelgetes[playerid]-1]);
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
						PlayerInfo[playerid][pBoltCucc][ BL_CIGI ]++;
						new miniuzenet[64];
						format(miniuzenet,sizeof(miniuzenet),"* %s odanyújt egy szál cigit a srácnak",NPCNevek[NPCBeszelgetes[playerid]-1]);
						ProxDetector(15.0, playerid, miniuzenet, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						PlayerInfo[playerid][pNPCSzobaAll][NPCBeszelgetes[playerid]-1] = 600;
					}
					case 1:
					{
						SendFormatMessage(playerid,COLOR_LIGHTRED,"%s mondja: Ha szeretnéd adok egy pofont, na húzz a picsába!",NPCNevek[NPCBeszelgetes[playerid]-1]);
						new miniuzenet[64];
						format(miniuzenet,sizeof(miniuzenet),"* %s megvonja a vállát, majd elnéz a másik irányba",NPCNevek[NPCBeszelgetes[playerid]-1]);
						ProxDetector(15.0, playerid, miniuzenet, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						PlayerInfo[playerid][pNPCSzobaAll][NPCBeszelgetes[playerid]-1] = 1200;
					}
					case 2:
					{
						SendFormatMessage(playerid,COLOR_LIGHTRED,"%s mondja: Ahogy mondod öreg, ahogy mondod. Figyelj, van itt pár cucc, ami segíthet rajtad.",NPCNevek[NPCBeszelgetes[playerid]-1]);
						new miniuzenet[64];
						format(miniuzenet,sizeof(miniuzenet),"* %s megvillantja a fegyverét.",NPCNevek[NPCBeszelgetes[playerid]-1]);
						ProxDetector(15.0, playerid, miniuzenet, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
						new fegyvervasarlas[1024], tmp[128], b = NINCS;
						for(;++b < sizeof(FegyverIllegalisLista);)
						{
							format(tmp, sizeof(tmp), "\nFegyver Név: %s\tLõszerszám: %d db\tÁr: %d $", FegyverIllegalisLista[b][0], FegyverIllegalisLista[b][2][0],FegyverIllegalisLista[b][3][0]);
							strcat(fegyvervasarlas, tmp, sizeof(fegyvervasarlas));
						}
						ShowPlayerDialog(playerid, DIALOG_VASARLAS, DIALOG_STYLE_LIST, "Fegyverek",fegyvervasarlas, "Megvesz", "Mégse");
					}
				}
				return 1;
			}
			return 1;
		}
		case DIALOG_VASARLAS:
		{
			if(response)
			{
				if(PlayerInfo[playerid][pFegyvertVasarolt][NPCBeszelgetes[playerid]-1] >= 3)
				{
					return 1;
				}
				if(PlayerInfo[playerid][ppenz] < FegyverIllegalisLista[listitem][3][0])
				{
					SFM(playerid,COL_LRED,"Hiba nincs élég pénzed! (%d $)",FegyverIllegalisLista[listitem][3][0]);
					return 1;
				}
	  			if(FegyverIllegalisLista[listitem][1][0] > 0 && SameWeaponSlot(PlayerInfo[playerid][pFegyverek][aWeaponSlotok[ FegyverIllegalisLista[listitem][1][0] ]], FegyverIllegalisLista[listitem][1][0]) && PlayerInfo[playerid][pMegerosites] != playerid)
				{
					SCM(playerid, COL_LRED, "Ezen a sloton már van fegyvered! Biztos, hogy felül akarod írni? Ha igen válaszd ki megint az adott fegyvert!");
					PlayerInfo[playerid][pMegerosites] = playerid;
					return true;
				}
				PlayerInfo[playerid][pMegerosites] = NINCS;
				GiveWeapon(playerid,FegyverIllegalisLista[listitem][1][0],FegyverIllegalisLista[listitem][2][0]);
				GiveMoney(playerid,-FegyverIllegalisLista[listitem][3][0]);
				SCM(playerid,COL_MKEK,"Sikeresen vettél egy fegyvert.");
				PlayerInfo[playerid][pFegyvertVasarolt][NPCBeszelgetes[playerid]-1]++;
				if(PlayerInfo[playerid][pFegyvertVasarolt][NPCBeszelgetes[playerid]-1] >= 3)
				{
					PlayerInfo[playerid][pFegyvertVasarolt][NPCBeszelgetes[playerid]-1] = 0;
					PlayerInfo[playerid][pNPCSzobaAll][NPCBeszelgetes[playerid]-1] += 10800;
				}
			}
			return 1;
		}
		case DIALOG_NINCS:
		{
			if(AFKDialogShowing[playerid] != 0)
			{
				if(response)
				{
					KillTimer(AFKTimer[playerid]);
					AFKDialogShowing[playerid] = 0;
					CsomagtartoAFK[playerid] = 0;
					PlayerInfo[playerid][pAfkIdo] = 0;
					SCM(playerid,COL_LRED,"Rendben!");
					return 1;
				}
				else
				{
					KillTimer(AFKTimer[playerid]);
					AFKDialogShowing[playerid] = 0;
					CsomagtartoAFK[playerid] = 0;
					PlayerInfo[playerid][pAfkIdo] = 0;
					SCM(playerid,COL_LRED,"Rendben!");
					return 1;
				}
			}
		}
		case DIALOG_OLTOZO:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:{PlayerInfo[playerid][pDutySkin] = 71; SetSkin(playerid, 71, false);}
					case 1:{PlayerInfo[playerid][pDutySkin] = 265; SetSkin(playerid, 265, false);}
					case 2:{PlayerInfo[playerid][pDutySkin] = 266; SetSkin(playerid, 266, false);}
					case 3:{PlayerInfo[playerid][pDutySkin] = 267; SetSkin(playerid, 267, false);}
					case 4:{PlayerInfo[playerid][pDutySkin] = 280; SetSkin(playerid, 280, false);}
					case 5:{PlayerInfo[playerid][pDutySkin] = 281; SetSkin(playerid, 281, false);}
					case 6:{PlayerInfo[playerid][pDutySkin] = 282; SetSkin(playerid, 282, false);}
					case 7:{PlayerInfo[playerid][pDutySkin] = 283; SetSkin(playerid, 283, false);}
					case 8:{PlayerInfo[playerid][pDutySkin] = 284; SetSkin(playerid, 284, false);}
					case 9:{PlayerInfo[playerid][pDutySkin] = 285; SetSkin(playerid, 285, false);}
					case 10:{PlayerInfo[playerid][pDutySkin] = 288; SetSkin(playerid, 288, false);}
				}
				Cselekves(playerid,"átöltözött");
			}
		}
		case DIALOG_KERESKEDES_ACCEPT2:
		{
		    if(response)
		    {
		        if(PlayerInfo[playerid][ppenz] < k_ar)
				{
					KerValtozokNullazasa();
					return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
				} 
		       // else if(vInfo[k_veh][vMunka] != 103) return SCM(playerid,COL_LRED,"Ezt nem tudod"
		        else if(Adat_Num(playerid,ADAT_JARMU) >= 1) {
		            KerValtozokNullazasa();
					return SCM(playerid,COL_LRED,"Ezt a jármûvet te már csak Prémium slotra tudnád tenni, keress fel egy fõadmint.");
				}
                format(vInfo[k_veh][vTulaj], MAX_PLAYER_NAME, "%s",JatekosNev(playerid));
				vInfo[k_veh][vMunka] = 0;
				vInfo[k_veh][vTulajID] = PlayerInfo[playerid][pID];
				vUpdate(k_veh, vuTulaj, vuMunka);
				SFM(playerid,COL_MKEK,"Kereskedõ %s eladta a %d ID-jû jármûvet neked %d$-ért.",JatekosNev(k_kereskedo),k_veh,k_ar);
				SFM(k_kereskedo,COL_MKEK,"Eladtad a %d ID-jû jármûvet %s számára %d$-ért.",k_veh,JatekosNev(playerid),k_ar);
				CegInfo[BIZ_KERESKEDO][cKassza] += k_ar;
				GiveMoney(playerid,-k_ar);
				KerValtozokNullazasa();
		    }
		    else
		    {
		        SFM(playerid,COL_MKEK,"Visszautasítottad %s ajánlatát.",JatekosNev(k_kereskedo));
		        SFM(k_kereskedo,COL_MKEK,"%s visszautasította az ajánlatod.",JatekosNev(playerid));
		        KerValtozokNullazasa();
		    }
		}
        case DIALOG_KERESKEDES_ELAD:
		{
		    if(response)
		    {
		        new id;
		        new veh;
		        new ar;
			//	new vid = JarmuID(veh,playerid);
		        if(sscanf(inputtext,"p<,>udd",id,veh,ar)) return ShowPlayerDialog(playerid,DIALOG_KERESKEDES_ELAD,DIALOG_STYLE_INPUT,"Kereskedés - Eladás","Nem adtad meg jól az adatokat!\nSzintaxis: játékos,jármûID,ár","Mehet","Mégse");
		        else if(id == INVALID_PLAYER_ID) return ShowPlayerDialog(playerid,DIALOG_KERESKEDES_ELAD,DIALOG_STYLE_INPUT,"Kereskedés - Vétel","Nincs ilyen játékos!\nSzintaxis: játékos,jármûID,ár","Mehet","Mégse");
		        else if(!PlayerToPlayer(playerid,id,3)) return SCM(playerid,COL_LRED,"A játékos mellett kell állnod!");
				new vid = JarmuID(veh,playerid);
		    	//else if(vInfo[veh][vTulajID] != PlayerInfo[playerid][pID]) return SCM(playerid,COL_LRED,"Ez a jármû nem az övé.");
		    	if(vInfo[vid][vMunka] != 103) return SCM(playerid,COL_LRED,"Ezt nem adhatod el!");
		        else {
//					new vid = veh;
		            new msg[128];
		            format(msg,128,""#COL_FEHER"Modell: "#COL_MKEK"%s\n"#COL_FEHER"Rendszám: "#COL_MKEK"See-%d\n"#COL_FEHER"Ár: "#COL_MKEK"%d$",VehicleNames[vInfo[veh][vModel] - 400],veh,ar);
					ShowPlayerDialog(id,DIALOG_KERESKEDES_ACCEPT2,DIALOG_STYLE_MSGBOX,"Kereskedés - "#COL_MKEK"Vétel",msg,"Megveszem","Mégse");
					k_uzleteles = 1;
				//	k_elado = id;
					k_veh = vid;
					k_ar = ar;
					k_kereskedo = playerid;
		        }
		    }
		    return 1;
		}
		case DIALOG_KERESKEDES_ACCEPT:
		{
		    if(response)
		    {
                format(vInfo[k_veh][vTulaj], MAX_PLAYER_NAME, "Használtkereskedés");
				vInfo[k_veh][vMunka] = 103;
				vInfo[k_veh][vTulajID] = NINCS;
				vUpdate(k_veh, vuTulaj, vuMunka);
				SFM(playerid,COL_MKEK,"Kereskedõ %s megvette a %d ID-jû jármûvedet %d$-ért.",JatekosNev(k_kereskedo),k_veh,k_ar);
				SFM(k_kereskedo,COL_MKEK,"Megvetted %s %d ID-jû jármûvét a kereskedésnek %d$-ért.",JatekosNev(playerid),k_veh,k_ar);
				CegInfo[BIZ_KERESKEDO][cKassza] -= k_ar;
				GiveMoney(playerid,k_ar);
				KerValtozokNullazasa();
		    }
		    else
		    {
		        SFM(playerid,COL_MKEK,"Visszautasítottad %s ajánlatát.",JatekosNev(k_kereskedo));
		        SFM(k_kereskedo,COL_MKEK,"%s visszautasította az ajánlatod.",JatekosNev(playerid));
		        KerValtozokNullazasa();
		    }
		}
		case DIALOG_KERESKEDES_VESZ:
		{
		    if(response)
		    {
		        new id;
		        new veh;
		        new ar;
		        if(sscanf(inputtext,"p<,>udd",id,veh,ar)) return ShowPlayerDialog(playerid,DIALOG_KERESKEDES_VESZ,DIALOG_STYLE_INPUT,"Kereskedés - Vétel","Nem adtad meg jól az adatokat!\nSzintaxis: játékos,jármûID,ár","Mehet","Mégse");
		        else if(id == INVALID_PLAYER_ID) return ShowPlayerDialog(playerid,DIALOG_KERESKEDES_VESZ,DIALOG_STYLE_INPUT,"Kereskedés - Vétel","Nincs ilyen játékos!\nSzintaxis: játékos,jármûID,ár","Mehet","Mégse");
		        else if(!PlayerToPlayer(playerid,id,3)) return SCM(playerid,COL_LRED,"A játékos mellett kell állnod!");
				new vid = JarmuID(veh,playerid);
		    	if(vInfo[vid][vTulajID] != PlayerInfo[id][pID]) return SCM(playerid,COL_LRED,"Ez a jármû nem az övé.");
		        else {
					//new vid = veh;
		            new msg[128];
		            format(msg,128,""#COL_FEHER"Modell: "#COL_MKEK"%s\n"#COL_FEHER"Rendszám: "#COL_MKEK"See-%d\n"#COL_FEHER"Ár: "#COL_MKEK"%d$",VehicleNames[vInfo[veh][vModel] - 400],veh,ar);
					ShowPlayerDialog(id,DIALOG_KERESKEDES_ACCEPT,DIALOG_STYLE_MSGBOX,"Kereskedés",msg,"Eladom","Mégse");
					k_uzleteles = 1;
					//k_elado = id;
					k_veh = vid;
					k_ar = ar;
					k_kereskedo = playerid;
		        }
		    }
		    return 1;
		}
		case DIALOG_DIVATBOLT_SZEMUVEG:
		{
			if(response)
			{
				new ara = (DivatBolt_SZEMUVEG[listitem][2][0]/235);
				if(PlayerInfo[playerid][ppenz] < ara) return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
				new objectid = DivatBolt_SZEMUVEG[listitem][3][0];
				new slotid = DivatBolt_SZEMUVEG[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				GiveMoney(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_FEJKENDO:
		{
			if(response)
			{
				new ara = (DivatBolt_FEJKENDO[listitem][2][0]/235);
				if(PlayerInfo[playerid][ppenz] < ara) return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
				new objectid = DivatBolt_FEJKENDO[listitem][3][0];
				new slotid = DivatBolt_FEJKENDO[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				GiveMoney(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_HOKIMASZK:
		{
			if(response)
			{
				new ara = DivatBolt_HOKIMASZK[listitem][2][0];
				if(PlayerInfo[playerid][ppenz] < ara) return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
				new objectid = DivatBolt_HOKIMASZK[listitem][3][0];
				new slotid = DivatBolt_HOKIMASZK[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				GiveMoney(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_SVAJCISAPKA:
		{
			if(response)
			{
				new ara = (DivatBolt_SVAJCISAPKA[listitem][2][0]/235);
				if(PlayerInfo[playerid][ppenz] < ara) return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
				new objectid = DivatBolt_SVAJCISAPKA[listitem][3][0];
				new slotid = DivatBolt_SVAJCISAPKA[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				GiveMoney(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_BASEBALLSAPKA:
		{
			if(response)
			{
				new ara = (DivatBolt_BASEBALLSAPKA[listitem][2][0]/235);
				if(PlayerInfo[playerid][ppenz] < ara) return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
				new objectid = DivatBolt_BASEBALLSAPKA[listitem][3][0];
				new slotid = DivatBolt_BASEBALLSAPKA[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				GiveMoney(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_KALAP:
		{
			if(response)
			{
				new ara = (DivatBolt_KALAP[listitem][2][0]/235);
				if(PlayerInfo[playerid][ppenz] < ara) return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
				new objectid = DivatBolt_KALAP[listitem][3][0];
				new slotid = DivatBolt_KALAP[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				GiveMoney(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_SAPKA:
		{
			if(response)
			{
				new ara = (DivatBolt_SAPKA[listitem][2][0]/235);
				if(PlayerInfo[playerid][ppenz] < ara) return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
				new objectid = DivatBolt_SAPKA[listitem][3][0];
				new slotid = DivatBolt_SAPKA[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,2);
				EditAttachedObject(playerid,slotid);
				GiveMoney(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_KARORA:
		{
			if(response)
			{
				new ara = (DivatBolt_KARORA[listitem][2][0]/235);
				if(PlayerInfo[playerid][ppenz] < ara) return SCM(playerid,COL_LRED,"Nincs elég pénzed!");
				new objectid = DivatBolt_KARORA[listitem][3][0];
				new slotid = DivatBolt_KARORA[listitem][4][0];
				SetPlayerAttachedObject(playerid,slotid,objectid,13);
				EditAttachedObject(playerid,slotid);
				GiveMoney(playerid,-ara);
				SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
				SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
			}
			return 1;
		}
		case DIALOG_DIVATBOLT_EDIT_2:
		{
			if(response)
			{
				if(listitem == 0)
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid,MitModosit[playerid]))
					{
						EditAttachedObject(playerid,MitModosit[playerid]);
						SCM(playerid,COL_MKEK, "Mozgasd a cuccot oda ahova szeretnéd, es ha végeztél, nyomj rá a mentes(FLOPI JEL) gombra");
						SCM(playerid,COL_MKEK, "Megjegyzes: ha SPACE-t nyomod (SPRINT GOMB) akkor tudod forgatni a kamerádat :)");
					}
					else
						SCM(playerid,COL_MKEK,"Nincs mit módosítani!");
				}
				else if(listitem == 1)
				{
					RemovePlayerAttachedObject(playerid,MitModosit[playerid]);
					MitModosit[playerid] = NINCS;
				}
				else if(listitem == 2)
				{
					if(MitModosit[playerid] == SLOT_SAPKA)
					{
						DivatInfo[SLOT_SAPKA][playerid][dVan] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dPosX] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dPosY] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dPosZ] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dRotX] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dRotY] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dRotZ] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dScaleX] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dScaleY] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dScaleZ] = 0;
						DivatInfo[SLOT_SAPKA][playerid][dmodelid] = 0;
					}
					else if(MitModosit[playerid] == SLOT_SZEMUVEG)
					{
						DivatInfo[SLOT_SZEMUVEG][playerid][dVan] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dPosX] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dPosY] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dPosZ] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dRotX] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dRotY] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dRotZ] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dScaleX] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dScaleY] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dScaleZ] = 0;
						DivatInfo[SLOT_SZEMUVEG][playerid][dmodelid] = 0;
					}
					else if(MitModosit[playerid] == SLOT_KARORA)
					{
						DivatInfo[SLOT_KARORA][playerid][dVan] = 0;
						DivatInfo[SLOT_KARORA][playerid][dPosX] = 0;
						DivatInfo[SLOT_KARORA][playerid][dPosY] = 0;
						DivatInfo[SLOT_KARORA][playerid][dPosZ] = 0;
						DivatInfo[SLOT_KARORA][playerid][dRotX] = 0;
						DivatInfo[SLOT_KARORA][playerid][dRotY] = 0;
						DivatInfo[SLOT_KARORA][playerid][dRotZ] = 0;
						DivatInfo[SLOT_KARORA][playerid][dScaleX] = 0;
						DivatInfo[SLOT_KARORA][playerid][dScaleY] = 0;
						DivatInfo[SLOT_KARORA][playerid][dScaleZ] = 0;
						DivatInfo[SLOT_KARORA][playerid][dmodelid] = 0;
					}
					else if(MitModosit[playerid] == SLOT_MASZK)
					{
						DivatInfo[SLOT_MASZK][playerid][dVan] = 0;
						DivatInfo[SLOT_MASZK][playerid][dPosX] = 0;
						DivatInfo[SLOT_MASZK][playerid][dPosY] = 0;
						DivatInfo[SLOT_MASZK][playerid][dPosZ] = 0;
						DivatInfo[SLOT_MASZK][playerid][dRotX] = 0;
						DivatInfo[SLOT_MASZK][playerid][dRotY] = 0;
						DivatInfo[SLOT_MASZK][playerid][dRotZ] = 0;
						DivatInfo[SLOT_MASZK][playerid][dScaleX] = 0;
						DivatInfo[SLOT_MASZK][playerid][dScaleY] = 0;
						DivatInfo[SLOT_MASZK][playerid][dScaleZ] = 0;
						DivatInfo[SLOT_MASZK][playerid][dmodelid] = 0;
					}
					RemovePlayerAttachedObject(playerid,MitModosit[playerid]);
					MitModosit[playerid] = NINCS;
				}
			}
			else
				MitModosit[playerid] = NINCS;
		}
		case DIALOG_DIVATBOLT_EDIT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: MitModosit[playerid] = SLOT_SAPKA;
					case 1: MitModosit[playerid] = SLOT_SZEMUVEG;
					case 2: MitModosit[playerid] = SLOT_KARORA;
					case 3: MitModosit[playerid] = SLOT_MASZK;
				}
				ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_EDIT_2, DIALOG_STYLE_LIST, "Mit szeretnél?", "Módosítás\nElrejtes(Ideiglenes törles)\nEltávolítás", "Ok", "Mégse");
			}
			else
				MitModosit[playerid] = NINCS;
		}
		case DIALOG_DIVATBOLT_VALASZTAS:
		{
			if(response)
			{
				new string[1024];
				new cuccid = 0;
				switch(listitem)
				{
					case 0: //Szemüvegek
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_SZEMUVEG); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_SZEMUVEG[0][1], (DivatBolt_SZEMUVEG[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_SZEMUVEG[cuccid][1],(DivatBolt_SZEMUVEG[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_SZEMUVEG, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 1://Fejkendõk
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_FEJKENDO); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_FEJKENDO[0][1], (DivatBolt_FEJKENDO[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_FEJKENDO[cuccid][1],(DivatBolt_FEJKENDO[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_FEJKENDO, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 2://Svájci Sapkák
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_SVAJCISAPKA); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_SVAJCISAPKA[0][1], (DivatBolt_SVAJCISAPKA[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_SVAJCISAPKA[cuccid][1],(DivatBolt_SVAJCISAPKA[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_SVAJCISAPKA, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 3://Baseball sapkák
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_BASEBALLSAPKA); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_BASEBALLSAPKA[0][1], (DivatBolt_BASEBALLSAPKA[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_BASEBALLSAPKA[cuccid][1],(DivatBolt_BASEBALLSAPKA[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_BASEBALLSAPKA, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 4://Kalapok
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_KALAP); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_KALAP[0][1], (DivatBolt_KALAP[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_KALAP[cuccid][1],(DivatBolt_KALAP[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_KALAP, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 5://Sapkák
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_SAPKA); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_SAPKA[0][1], (DivatBolt_SAPKA[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_SAPKA[cuccid][1],(DivatBolt_SAPKA[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_SAPKA, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 6://Karórák
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_KARORA); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_KARORA[0][1], (DivatBolt_KARORA[0][2][0]/235));
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_KARORA[cuccid][1],(DivatBolt_KARORA[cuccid][2][0]/235));
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_KARORA, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
					case 7://Maszkok
					{
						for(cuccid=0; cuccid < sizeof(DivatBolt_HOKIMASZK); cuccid++)
						{
							if(cuccid == 0)
								format(string,sizeof(string), "%s (%d $)", DivatBolt_HOKIMASZK[0][1], DivatBolt_HOKIMASZK[0][2][0]);
							else
								format(string,sizeof(string), "%s\n%s (%d $)", string, DivatBolt_HOKIMASZK[cuccid][1],DivatBolt_HOKIMASZK[cuccid][2][0]);
						}
						ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_HOKIMASZK, DIALOG_STYLE_LIST, "Lista", string,"Megvesz", "Vissza");
					}
				}
				return 1;
			}
		}
		case DIALOG_TUNING:
		{
		    if(!response)
		        return 1;
		    for(new i=0;i<=TuningSzamolo[playerid];i++)
		    {
				if(listitem == i)
				{
					if(IsVehicleUpgradeCompatible(GetVehicleModel(GetPlayerVehicleID(playerid)),KomponensID[playerid][i]))
					{
						new ara = (KomponensAra(KomponensID[playerid][i])/235);
						if(PlayerInfo[playerid][ppenz] >= ara)
						{
						    new kocsi = GetPlayerVehicleID(playerid);
						    TuningFelrak(playerid,kocsi, KomponensID[playerid][i]);
							SFM(playerid,COL_MKEK,"{FF6400}%s {FFFFFF}felszerelve!", GetComponentName(KomponensID[playerid][i]));
							GiveMoney(playerid,-ara);
						}
						else
						{
							SCM(playerid,COL_LRED,"Nincs elég pénzed!");
						}
						new vehiclemodel = GetVehicleModel(GetPlayerVehicleID(playerid));
						new tuningstr[3012];
						new component;
						TuningSzamolo[playerid] = 1;
						while(GetVehicleCompatibleUpgrades(vehiclemodel, TuningSzamolo[playerid], component))
						{
							if(TuningSzamolo[playerid] <= MAX_KOMPONENS)
							{
								if(TuningSzamolo[playerid] == 1) format(tuningstr, sizeof(tuningstr), "Tuning Neve: %s | Ára: %d $", GetComponentName(component),(KomponensAra(component)/235));
								else format(tuningstr, sizeof(tuningstr), "%s\nTuning Neve: %s | Ára: %d $", tuningstr, GetComponentName(component),(KomponensAra(component)/235));
								KomponensID[playerid][TuningSzamolo[playerid]-1] = component;
								TuningSzamolo[playerid]++;
							}
							else break;
						}
						new cim[80];
						format(cim,80, ":: Elérhetõ Tuning alkatreszek a jármûhöz {FF6400}(%d)", VehicleNames[vehiclemodel-400]);
						return ShowPlayerDialog(playerid, DIALOG_TUNING, DIALOG_STYLE_LIST, cim, tuningstr, "Felszerel", "Mégse");
					}
					else SCM(playerid,COL_LRED,"Ezt az alkatreszt nem lehet felszerelni erre a kocsira!");
				}
			}
		}
		case DIALOG_TUNING_V2:
		{
		    if(!response)
		        return 1;
		    for(new i=0;i<=TuningSzamolo[playerid];i++)
		    {
				if(listitem == i)
				{
					if(IsVehicleUpgradeCompatible(GetVehicleModel(GetPlayerVehicleID(playerid)),KomponensID[playerid][i]))
					{
 						new kocsi = GetPlayerVehicleID(playerid);
						TuningFelrak(playerid,kocsi, KomponensID[playerid][i]);
						SFM(playerid,COL_MKEK,"{FF6400}%s {FFFFFF}felszerelve!", GetComponentName(KomponensID[playerid][i]));

					}
					else SCM(playerid,COL_LRED,"Ezt az alkatreszt nem lehet felszerelni erre a kocsira!");
				}
			}
		}
		case DIALOG_VILLOGO1:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 1)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 1;
							}
						}
					}
					case 1:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 2)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 2;
							}
						}
					}
					case 2:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 3)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 3;
							}
						}
					}
					case 3:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 4)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 4;
							}
						}
					}
					case 4:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 5)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 5;
							}
						}
					}
					case 5:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 6)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 6;
							}
						}
					}
					case 6:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 7)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 7;
							}
						}
					}
					case 7:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 8)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 8;
							}
						}
					}
					case 8:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 9)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 9;
							}
						}
					}
					case 9:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 10)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 10;
							}
						}
					}
					case 10:
					{
						ShowPlayerDialog(playerid, DIALOG_VILLOGO2, DIALOG_STYLE_LIST, "Válassz az alábbiak közül", DIALOG2_MSG, "Felrakom", "Mégse" );
					}
				}
			}
		}
		case DIALOG_VILLOGO2:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 11)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 11;
							}
						}
					}
					case 1:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 12)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 12;
							}
						}
					}
					case 2:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 13)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 13;
							}
						}
					}
					case 3:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 14)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 14;
							}
						}
					}
					case 4:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 15)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 15;
							}
						}
					}
					case 5:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 16)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 16;
							}
						}
					}
					case 6:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 17)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 17;
							}
						}
					}
					case 7:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 18)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 18;
							}
						}
					}
					case 8:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 19)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 19;
							}
						}
					}
					case 9:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 20)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 20;
							}
						}
					}
					case 10:
					{
						ShowPlayerDialog(playerid, DIALOG_VILLOGO3, DIALOG_STYLE_LIST, "Válassz az alábbiak közül", DIALOG3_MSG, "Felrakom", "Mégse" );
					}
				}
			}
		}
		case DIALOG_VILLOGO3:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 21)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 21;
							}
						}
					}
					case 1:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 22)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 22;
							}
						}
					}
					case 2:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 23)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 23;
							}
						}
					}
					case 3:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 24)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 24;
							}
						}
					}
					case 4:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 25)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 25;
							}
						}
					}
					case 5:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 26)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 26;
							}
						}
					}
					case 6:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 27)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 27;
							}
						}
					}
					case 7:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 28)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 28;
							}
						}
					}
					case 8:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 29)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 29;
							}
						}
					}
					case 9:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 30)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 30;
							}
						}
					}
					case 10:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 31)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 31;
							}
						}
					}
					case 11:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 32)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 32;
							}
						}
					}
					case 12:
					{
						new Float:x, Float:y, Float:z, Float:angle;
						GetPlayerPos(playerid, x, y, z);
						GetPlayerFacingAngle(playerid, angle);
						for(new i=0; i<sizeof(Offsets); i++)
						{
							if(Offsets[i][SPU] == 33)
							{
								new vehicleid = GetPlayerVehicleID(playerid);
								DestroyObject(villog[vehicleid]);
								SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
								LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));
								villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
								AttachObjectToVehicle(villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
								Lamp[vehicleid] = 1;
								IsSpu[vehicleid] = 33;
							}
						}
					}
				}
			}
		}
		case DIALOG_FELSZERELES:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a felszerelés választóból!");
			switch(listitem)
			{
				case 0:
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24,100, false,true);//deagle
					GiveWeapon(playerid, 29,100,false,true);//mp5
					GiveWeapon(playerid, 25,25,false,true);//shoti
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					SCM(playerid, COL_MKEK, "Felvetted a cadet felszerelést!");
					SetPlayerColor(playerid, 0x8d8dffAA & 0xFFFFFF00);
					SetArmour(playerid, MAX_ARMOUR);
					SetHealth(playerid, MAX_HP);
					new sr[128];
					format(sr, sizeof(sr), "HQ: %s szolgálatba lépett. || Kadét felszerelés!", JatekosNev(playerid, true));
					FrakcioUzenet(COLOR_RADIO, PlayerInfo[playerid][pFrakcio], sr);
				}
				case 1:
				{
					if(PlayerInfo[playerid][prang] < 2)
						return SendClientMessage(playerid, COLOR_WHITE, "Ezt nem veheted fel");
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24,100, false,true);//deagle
					GiveWeapon(playerid, 29,125,false,true);//mp5
					GiveWeapon(playerid, 25,25,false,true);//shoti
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					SCM(playerid, COL_MKEK, "Felvetted az Officer felszerelést!");
					SetPlayerColor(playerid, 0x8d8dffAA & 0xFFFFFF00);
					SetArmour(playerid, MAX_ARMOUR);
					SetHealth(playerid, MAX_HP);
					new sr[128];
					format(sr, sizeof(sr), "HQ: %s szolgálatba lépett. || Officer felszerelés!", JatekosNev(playerid, true));
					FrakcioUzenet(COLOR_RADIO, PlayerInfo[playerid][pFrakcio], sr);
				}
				case 2:
				{
					if(PlayerInfo[playerid][prang] < 2)
						return SendClientMessage(playerid, COLOR_WHITE, "Ezt nem veheted fel");
					GiveWeapon(playerid, 24,100, false,true);//deagle
					GiveWeapon(playerid, 29,150,false,true);//mp5
					GiveWeapon(playerid, 25,50,false,true);//shoti
					GiveWeapon(playerid, 29,150,false,true);//mp5
					SCM(playerid, COL_MKEK, "Felvetted a Detektív felszerelést!");
					SetArmour(playerid, MAX_ARMOUR);
					SetHealth(playerid, MAX_HP);
					new sr[128];
					format(sr, sizeof(sr), "HQ: %s szolgálatba lépett. || Detektív felszerelés!", JatekosNev(playerid, true));
					FrakcioUzenet(COLOR_RADIO, PlayerInfo[playerid][pFrakcio], sr);
				}
				case 3:
				{
					if(PlayerInfo[playerid][prang] < 6)
						return SendClientMessage(playerid, COLOR_WHITE, "Ezt nem veheted fel");
					GiveWeapon(playerid, 24, 80, false, true);//deagle
					GiveWeapon(playerid, 31, 250,false, true);//m4
					GiveWeapon(playerid, 25, 125,false, true);//shoti
					GiveWeapon(playerid, 29, 280, false, true);//mp5
					SCM(playerid, COL_MKEK, "Felvetted az  Emergency felszerelést!");
					SetPlayerColor(playerid, 0x8d8dffAA & 0xFFFFFF00);
					SetArmour(playerid, MAX_ARMOUR);
					SetHealth(playerid, MAX_HP);
					new sr[128];
					format(sr, sizeof(sr), "HQ: %s szolgálatba lépett. || Emergency felszerelés!", JatekosNev(playerid, true));
					FrakcioUzenet(COLOR_RADIO, PlayerInfo[playerid][pFrakcio], sr);
				}
				case 4:
				{
					DeleteWeapon(playerid);
					SetHealth(playerid, MAX_HP);
					new skin = PlayerInfo[playerid][pskin];
					if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
						SetSkin(playerid, skin, false);
					new sr[128];
					format(sr, sizeof(sr), "HQ: %s kilépett a szolgálatból.", JatekosNev(playerid, true));
				}
			
			}
			return true;
		}
		case DIALOG_SWAT:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a felszerelés választóból!");
			switch(listitem)
			{
				case 0:
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24, 80, false, true);//deagle
					GiveWeapon(playerid, 29, 200, false, true);//mp5
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					SetArmour(playerid, MAX_ARMOUR);
					SetHealth(playerid, MAX_HP);
					SetSkin(playerid, 285, false);
					PlayerInfo[playerid][pSWATDuty] = 1;
					SCM(playerid, COL_MKEK, "Felvetted az alap felszerelést!");
				}
				case 1:
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24, 80, false, true);//deagle
					GiveWeapon(playerid, 29, 200, false, true);//mp5
					GiveWeapon(playerid, 34, 100, false, true);//sniper
					GiveWeapon(playerid, 17, 20, false, true);//teargas
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					SetArmour(playerid, MAX_ARMOUR);
					SetHealth(playerid, MAX_HP);
					SetSkin(playerid, 285,  false);
					PlayerInfo[playerid][pSWATDuty] = 1;
					SCM(playerid, COL_MKEK, "Felvetted a közepes felszerelést!");
				}
				case 2:
				{
					GiveWeapon(playerid, 3, 1, false, true);//gumibot
					GiveWeapon(playerid, 24, 80, false, true);//deagle
					GiveWeapon(playerid, 31, 500, false, true);//m4
					GiveWeapon(playerid, 27, 100, false, true);//combat
					GiveWeapon(playerid, 34, 100, false, true);//sniper
					GiveWeapon(playerid, 17, 20, false, true);//teargas
					GiveWeapon(playerid, 41, 3000, false, true);//spray
					SetArmour(playerid, MAX_ARMOUR);
					SetHealth(playerid, MAX_HP);
					SetSkin(playerid, 285,  false);
					PlayerInfo[playerid][pSWATDuty] = 1;
					SCM(playerid, COL_MKEK, "Felvetted a nehéz felszerelést!");
				}
				case 3:
				{
					PlayerInfo[playerid][pSWATDuty] = 0;
					SetArmour(playerid, 0.0);
					DeleteWeapon(playerid);
					SetPlayerSkin(playerid,PlayerInfo[playerid][pskin]);
				}
			}
			return true;
		}
		case DIALOG_HTANUL:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //box
					{
						SCM(playerid, COL_VZOLD, "Elkezdted a Box-ot tanulni!");
						SetTimerEx("Box", 60000, 0, "d", playerid);
						TogglePlayerControllable(playerid, false);
					}
					case 1: //grabkick
					{
						SCM(playerid, COL_VZOLD, "Elkezdted a Grabkick-et tanulni!");
						SetTimerEx("Grabkick", 60000, 0, "d", playerid);
						TogglePlayerControllable(playerid, false);
					}
					case 2: //elbow
					{
						SCM(playerid, COL_VZOLD, "Elkezdted a Elbow-ot tanulni!");
						SetTimerEx("Elbow", 60000, 0, "d", playerid);
						TogglePlayerControllable(playerid, false);
					}
					case 3: //kungfu
					{
						SCM(playerid, COL_VZOLD, "Elkezdted a Kungfu-t tanulni!");
						SetTimerEx("Kungfu", 60000, 0, "d", playerid);
						TogglePlayerControllable(playerid, false);
					}
					case 4: //kneehead
					{
						SCM(playerid, COL_VZOLD, "Elkezdted a Kneehead-et tanulni!");
						SetTimerEx("Kneehead", 60000, 0, "d", playerid);
						TogglePlayerControllable(playerid, false);
					}
				}
				PlayerInfo[playerid][pHarcstilusTanul] = true;
			}
			return true;
		}
		case DIALOG_HVALT:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: //box
					{
						if(PlayerInfo[playerid][pBox] != 1)
							return SCM(playerid, COL_LRED, "Nem tanultad még meg.");
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
						SCM(playerid, COL_LRED, "Átváltottál Boxra.");
					}
					case 1: //grabkick
					{
						if(PlayerInfo[playerid][pGrabkick] != 1)
							return SCM(playerid, COL_LRED, "Nem tanultad még meg.");
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
						SCM(playerid, COL_LRED, "Átváltottál Grabkickre.");
					}
					case 2: //elbow
					{
						if(PlayerInfo[playerid][pElbow] != 1)
							return SCM(playerid, COL_LRED, "Nem tanultad még meg.");
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
						SCM(playerid, COL_LRED, "Átváltottál Elbowra.");
					}
					case 3: //kungfu
					{
						if(PlayerInfo[playerid][pKungfu] != 1)
							return SCM(playerid, COL_LRED, "Nem tanultad még meg.");
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
						SCM(playerid, COL_LRED, "Átváltottál Kungfura.");
					}
					case 4: //kneehead
					{
						if(PlayerInfo[playerid][pKneehead] != 1)
							return SCM(playerid, COL_LRED, "Nem tanultad még meg.");
						SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
						SCM(playerid, COL_LRED, "Átváltottál Kneeheadre.");
					}
					case 5:
					{
						SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
						SCM(playerid, COL_LRED, "Visszaváltottál alapra.");
					}
				}
			}
			return true;
		}
		case DIALOG_SHOWTEXTDRAW:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél az info szerkesztõbõl!");
				
			switch(listitem)
			{
				case 0:
				{
					ShowPlayerDialog(playerid, DIALOG_TEXTDRAWBE, DIALOG_STYLE_LIST, "Választható opciók:", "Pénz\nAdatok\nSzükségletek\nKocsi infók\nKocsi sebesség\nEgyéb infók\nMinden", "Mehet", "Mégse");
				}
				case 1:
				{
					ShowPlayerDialog(playerid, DIALOG_TEXTDRAWKI, DIALOG_STYLE_LIST, "Választható opciók:", "Pénz\nAdatok\nSzükségletek\nKocsi infók\nKocsi sebesség\nEgyéb infók\nMinden", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_TEXTDRAWBE:
		{
			switch(listitem)
			{
				case 0://pénz
				{
					PlayerTextDrawShow(playerid, Penz[playerid]);
				}
				case 1://adatok
				{
					PlayerTextDrawShow(playerid, Adatok[playerid]);
				}
				case 2://szükségletek
				{
					ShowPlayerProgressBar(playerid, EhsegBar[playerid]);
					ShowPlayerProgressBar(playerid, VizeletBar[playerid]);
				}
				case 3://kocsi infók
				{
					if(IsPlayerInAnyVehicle(playerid))
					{
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][0]);
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][1]);
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][2]);
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][4]);
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][5]);
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][6]);
					}
				}
				case 4://kocsi sebesség
				{
					if(GetPlayerVehicleSeat(playerid) == 0)
					{
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][3]);
					}
				}
				case 5://egyéb infók
				{
					PlayerTextDrawShow(playerid, Info[playerid][0]);
					PlayerTextDrawShow(playerid, Info[playerid][1]);
					PlayerTextDrawShow(playerid, Info[playerid][6]);
					PlayerTextDrawShow(playerid, AlsoFelso[playerid][0]);
					PlayerTextDrawShow(playerid, AlsoFelso[playerid][1]);
					PlayerTextDrawShow(playerid, Info[playerid][2]);
					PlayerTextDrawShow(playerid, Info[playerid][3]);
					PlayerTextDrawShow(playerid, Info[playerid][4]);
					PlayerTextDrawShow(playerid, Info[playerid][5]);
				}
				case 6://összes
				{
					PlayerTextDrawShow(playerid, Penz[playerid]);
					PlayerTextDrawShow(playerid, Adatok[playerid]);
					PlayerTextDrawShow(playerid, Info[playerid][0]);
					PlayerTextDrawShow(playerid, Info[playerid][1]);
					PlayerTextDrawShow(playerid, Info[playerid][2]);
					PlayerTextDrawShow(playerid, Info[playerid][3]);
					PlayerTextDrawShow(playerid, Info[playerid][4]);
					PlayerTextDrawShow(playerid, Info[playerid][5]);
					PlayerTextDrawShow(playerid, Info[playerid][6]);
					PlayerTextDrawShow(playerid, AlsoFelso[playerid][0]);
					PlayerTextDrawShow(playerid, AlsoFelso[playerid][1]);
					ShowPlayerProgressBar(playerid, EhsegBar[playerid]);
					ShowPlayerProgressBar(playerid, VizeletBar[playerid]);
					if(GetPlayerVehicleSeat(playerid) == 0)
					{
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][0]);
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][1]);
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][2]);
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][3]);
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][4]);
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][5]);
						PlayerTextDrawShow(playerid, JarmuInfo[playerid][6]);
					}
				}
			}
			return true;
		}
		case DIALOG_TEXTDRAWKI:
		{
			switch(listitem)
			{
				case 0://pénz
				{
					PlayerTextDrawHide(playerid, Penz[playerid]);
				}
				case 1://adatok
				{
					PlayerTextDrawHide(playerid, Adatok[playerid]);
				}
				case 2://szükségletek
				{
					HidePlayerProgressBar(playerid, EhsegBar[playerid]);
					HidePlayerProgressBar(playerid, VizeletBar[playerid]);
				}
				case 3://kocsi infók
				{
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][0]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][1]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][2]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][4]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][5]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][6]);
				}
				case 4://kocsi sebesség
				{
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][3]);
				}
				case 5://egyéb infók
				{
					PlayerTextDrawHide(playerid, Info[playerid][0]);
					PlayerTextDrawHide(playerid, Info[playerid][1]);
					PlayerTextDrawHide(playerid, Info[playerid][6]);
					PlayerTextDrawHide(playerid, AlsoFelso[playerid][0]);
					PlayerTextDrawHide(playerid, AlsoFelso[playerid][1]);
					PlayerTextDrawHide(playerid, Info[playerid][2]);
					PlayerTextDrawHide(playerid, Info[playerid][3]);
					PlayerTextDrawHide(playerid, Info[playerid][4]);
					PlayerTextDrawHide(playerid, Info[playerid][5]);
				}
				case 6://összes
				{
					PlayerTextDrawHide(playerid, Penz[playerid]);
					PlayerTextDrawHide(playerid, Adatok[playerid]);
					PlayerTextDrawHide(playerid, Info[playerid][0]);
					PlayerTextDrawHide(playerid, Info[playerid][1]);
					PlayerTextDrawHide(playerid, Info[playerid][2]);
					PlayerTextDrawHide(playerid, Info[playerid][3]);
					PlayerTextDrawHide(playerid, Info[playerid][4]);
					PlayerTextDrawHide(playerid, Info[playerid][5]);
					PlayerTextDrawHide(playerid, Info[playerid][6]);
					PlayerTextDrawHide(playerid, AlsoFelso[playerid][0]);
					PlayerTextDrawHide(playerid, AlsoFelso[playerid][1]);
					HidePlayerProgressBar(playerid, EhsegBar[playerid]);
					HidePlayerProgressBar(playerid, VizeletBar[playerid]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][0]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][1]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][2]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][3]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][4]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][5]);
					PlayerTextDrawHide(playerid, JarmuInfo[playerid][6]);
				}
			}
			return true;
		}
		case DIALOG_RUHABOLT:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Köszönjük, hogy nálunk vásárolt! Viszlát késõbb!");

   			switch(listitem)
			{
				case 0:
				{
     				new skinek[512], i = NINCS, num = 0;
					if(PlayerInfo[playerid][pnem] == 1)
					{
						for(;++i < sizeof(FerfiSkinek);)
						{
							if((i + 1) >= sizeof(FerfiSkinek)) break;
							else skinek[num] = FerfiSkinek[i], num++;
						}
					}
					else if(PlayerInfo[playerid][pnem] == 2)
					{
						for(;++i < sizeof(NoiSkinek);)
						{
							if((i + 1) >= sizeof(NoiSkinek)) break;
							else skinek[num] = NoiSkinek[i], num++;
						}
					}

     				ShowModelSelectionMenuEx(playerid, skinek, sizeof( skinek ), "Válassz egy ruhát", SKIN_VALASZTAS, .dialogBGcolor = 512819010, .previewBGcolor = 80);
				}
				case 1:
				{
					if(PlayerInfo[playerid][pHatizsak] == 1)
						return SCM(playerid, COL_LRED, "Már van hátizsákod!");
					
					if(PlayerInfo[playerid][ppenz] < 170)
						return SCM(playerid, COL_LRED, "A hátizsák 170$-ba kerül!");
					
					SetPlayerAttachedObject(playerid, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
					PlayerInfo[playerid][pHatizsak] = 1;
					
					SCM(playerid, COL_VZOLD, "Vettél sikeresen egy hátizsákot 170$-ért!");
					GiveMoney(playerid,-170);
					CegPenz(BIZ_RUHA, 170);
					return true;
				}
				case 2:
				{
					if(!PlayerInfo[playerid][pFrakcio])
						return SCM(playerid, COL_LRED, "Te nem vagy egyik frakcióban sem!");
					
					new i = NINCS, skinek[32];
                    for(;++i < sizeof(FrakcioSkinek);)
					{
                        if(FrakcioSkinek[i][0] == PlayerInfo[playerid][pFrakcio])
						{
                            for(new x; ++x < 11;)
							{
                                skinek[x - 1] = FrakcioSkinek[i][x];
								if(x == 10) break;
							}
						}
					}
					
					ShowModelSelectionMenuEx(playerid, skinek, strlen(skinek), "Válassz egy munkaruhát", FK_SKIN_VALASZTAS, .dialogBGcolor = 512819010, .previewBGcolor = 80);
				}
				case 3:
				{
					ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_VALASZTAS, DIALOG_STYLE_LIST, "Divatbolt", "Szemüvegek\nFejkendõk\nSvájci Sapkák\nBaseball Sapkák\nKalapok\nSapkák\nKarórák\nMaszkok", "Tovább", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_RUHABOLT_BP:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Köszönjük, hogy nálunk vásárolt! Viszlát késõbb!");

   			switch(listitem)
			{
				case 0:
				{
     				new skinek[512], i = NINCS, num = 0;
					if(PlayerInfo[playerid][pnem] == 1)
					{
						for(;++i < sizeof(FerfiSkinek);)
						{
							if((i + 1) >= sizeof(FerfiSkinek)) break;
							else skinek[num] = FerfiSkinek[i], num++;
						}
					}
					else if(PlayerInfo[playerid][pnem] == 2)
					{
						for(;++i < sizeof(NoiSkinek);)
						{
							if((i + 1) >= sizeof(NoiSkinek)) break;
							else skinek[num] = NoiSkinek[i], num++;
						}
					}

     				ShowModelSelectionMenuEx(playerid, skinek, sizeof( skinek ), "Válassz egy ruhát", SKIN_VALASZTAS, .dialogBGcolor = 512819010, .previewBGcolor = 80);
				}
				case 1:
				{
					if(PlayerInfo[playerid][pHatizsak] == 1)
						return SCM(playerid, COL_LRED, "Már van hátizsákod!");
					
					if(PlayerInfo[playerid][pBszPenz] < 170)
						return SCM(playerid, COL_LRED, "A hátizsák 170$-ba kerül!");
					
					SetPlayerAttachedObject(playerid, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
					PlayerInfo[playerid][pHatizsak] = 1;
					
					SCM(playerid, COL_VZOLD, "Vettél sikeresen egy hátizsákot 170$-ért!");
					PlayerInfo[playerid][pBszPenz] =- 170;
					CegPenz(BIZ_RUHA, 170);
					return true;
				}
				case 2:
				{
					if(!PlayerInfo[playerid][pFrakcio])
						return SCM(playerid, COL_LRED, "Te nem vagy egyik frakcióban sem!");
					
					new i = NINCS, skinek[32];
                    for(;++i < sizeof(FrakcioSkinek);)
					{
                        if(FrakcioSkinek[i][0] == PlayerInfo[playerid][pFrakcio])
						{
                            for(new x; ++x < 11;)
							{
                                skinek[x - 1] = FrakcioSkinek[i][x];
								if(x == 10) break;
							}
						}
					}
					
					ShowModelSelectionMenuEx(playerid, skinek, strlen(skinek), "Válassz egy munkaruhát", FK_SKIN_VALASZTAS, .dialogBGcolor = 512819010, .previewBGcolor = 80);
				}
				case 3:
				{
					ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_VALASZTAS, DIALOG_STYLE_LIST, "Divatbolt", "Szemüvegek\nFejkendõk\nSvájci Sapkák\nBaseball Sapkák\nKalapok\nSapkák\nKarórák\nMaszkok", "Tovább", "Mégse");
				}
			}
			return true;
		}
		//Vizsga rendszer by Martin
		case DIALOG_VIZSGA_KRESZ:
		{
			new id = PlayerInfo[playerid][pKresz][0];
			if(response && KreszKerdesek[ id ][3][0] == 1 || !response && KreszKerdesek[ id ][3][0] == 2)
				PlayerInfo[playerid][pKresz][1]++;//helyes válaszok számolása
				
			if((id + 1) == sizeof(KreszKerdesek))
			{
				new str[512];
				if(sizeof(KreszKerdesek) - PlayerInfo[playerid][pKresz][1] > 3)
				{
					format(str, sizeof(str), "%s%s"#COL_MKEK"%d"#COL_FEHER"%s"#COL_MKEK"%d"#COL_FEHER"%s%s%s",
					""#COL_FEHER"Kedves tanuló sajnálattal kell közölnöm, hogy a KRESZ vizsgád "#COL_PIROS"Sikertelen!"#COL_FEHER"\n",
					"Összsen ", sizeof(KreszKerdesek), " kérdésre válaszoltál, melybõl ", (sizeof(KreszKerdesek) - PlayerInfo[playerid][pKresz][1]), " helytelen volt.\n",
					"Amennyiben szeretnéd megismételni, úgy kérlek ismételd át a kérdéseket,\ntanulj és gyere vissza mihamarabb.\n",
					"További kellemes napot kíván a "#COL_VZOLD"Los Santos Autósiskola");
					
					PlayerInfo[playerid][pEngedely][0] = 0;
					
				} else {
					
					format(str, sizeof(str), "%s%s"#COL_MKEK"%d"#COL_FEHER"%s"#COL_MKEK"%d"#COL_FEHER"%s%s%s",
					""#COL_FEHER"Kedves tanuló gratulálunk! "#COL_VZOLD"Sikeresen"#COL_FEHER" teljesítetted a KRESZ vizsgát.\n",
					"Összsen ", sizeof(KreszKerdesek), " kérdésre válaszoltál, melybõl ", (sizeof(KreszKerdesek) - PlayerInfo[playerid][pKresz][1]), " helytelen volt.\n",
					"Most már bele is vághatsz a vizsga következõ részébe, a gyakorlati vizsgába.\n",
					"További kellemes napot kíván a "#COL_VZOLD"Los Santos Autósiskola");
					
					PlayerInfo[playerid][pEngedely][0] = VizsgaLista[0][4][0];
				}
				
				PlayerInfo[playerid][pKresz][0] = 0;
				PlayerInfo[playerid][pKresz][1] = 0;
				Info_Dialog(playerid, ""#COL_FEHER"Vizsga információk - Los Santos Autósiskola!", str);
				return true;
			}
		
			new srt[512];
			format(srt, sizeof(srt), ""#COL_MKEK"Kérdés:"#COL_FEHER"\n%s\n\n"#COL_MKEK"A:"#COL_FEHER" %s\n"#COL_MKEK"B:"#COL_FEHER" %s",KreszKerdesek[id + 1][0], KreszKerdesek[id + 1][1], KreszKerdesek[id + 1][2]);
			PlayerInfo[playerid][pKresz][0]++;
			ShowPlayerDialog(playerid, DIALOG_VIZSGA_KRESZ, DIALOG_STYLE_MSGBOX, "Los Santos - Autósiskola", srt, "A", "B");
			return true;
		}
		case DIALOG_VIZSGA_LISTA:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");
			
			if(PlayerInfo[playerid][pVizsga][1])
			{
				new str[512];
				format(str, sizeof(str), #COL_FEHER"Egyszerre csak egy vizsgát tudsz letenni!\nFejezd be az aktuálisat és jöhet a következõ.");
				Info_Dialog(playerid, ""#COL_FEHER"Vizsga információk - Los Santos Autósiskola!", str);
				return true;
			}
			
			if(!PlayerInfo[playerid][pEngedely][0] && listitem)
			{
				new str[512];
				format(str, sizeof(str), "%s%s%s%s%s%s",
				""#COL_FEHER"Kedves tanuló sajnálattal kell közölnöm, hogy a KRESZ vizsgád "#COL_PIROS"érvénytelen."#COL_FEHER"\n",
				"Amennyiben szeretnéd elkezdeni a vizsgát, úgy kérlek a recepciós pultnál\n",
				"válaszd a KRESZ vizsga lehetõséget és legjobb tudásod szerint válaszolj a kérdésekre.\n",
				"Ha segítségre van szükséged, használd a kézikönyvet, melyet bármely boltban megtalálsz.\n",
				""#COL_FEHER"Sok sikert kíván a "#COL_VZOLD"Los Santos Autóiskola");
				Info_Dialog(playerid, ""#COL_FEHER"Vizsga információk - Los Santos Autósiskola!", str);
				return true;
			}
			
			if(PlayerInfo[playerid][pBszPenz] < VizsgaLista[listitem][1][0])
			{
				new str[512];
				format(str, sizeof(str), #COL_FEHER"A vizsga megkezdéséhez nincs elegendõ pénz a bankszámládon!");
				Info_Dialog(playerid, ""#COL_FEHER"Vizsga információk - Los Santos Autósiskola!", str);
				return true;
			}
			
			PlayerInfo[playerid][pBszPenz] -= VizsgaLista[listitem][1][0];
			if(listitem)
			{
				new str[512];
				format(str, sizeof(str), "%s"#COL_VZOLD" %s "#COL_FEHER"%s%s%s%s"#COL_MKEK" %s "#COL_FEHER"%s%s",
				""#COL_FEHER"Kedves tanuló jelenleg", VizsgaLista[listitem][0] ,"vezetésbõl teszel gyakorlati vizsgát.\n",
				"Kérlek a vizsga során fordíts kellõ figyelmet a sebességed megválasztására,\n",
				"illetve minden esetben törekedj a "#COL_MKEK"KRESZ"#COL_FEHER" szabályainak betartására!\n",
				"A pálya teljesítésére", VizsgaLista[listitem][2], "áll rendelkezésedre ezután a vizsga sikeretelen!\n",
				""#COL_PIROS"Amennyiben a jármûved megsérül a vizsga szintén sikertelen!\n",
				""#COL_FEHER"Kérlek fáradj egy a parkolóban található vizsga jármûhöz és már is kezdheted a vizsgát!\n",
				""#COL_FEHER"Sok sikert! - "#COL_VZOLD"Los Santos Autóiskola");
				Info_Dialog(playerid, ""#COL_FEHER"Vizsga információk - Los Santos Autósiskola", str);
			}
			
			switch(listitem)
			{
				case 0:
				{
					PlayerInfo[playerid][pKresz][0] = 0;
					PlayerInfo[playerid][pKresz][1] = 0;
					
					new srt[512];
					format(srt, sizeof(srt), ""#COL_MKEK"Kérdés:"#COL_FEHER"\n%s\n\n"#COL_MKEK"A:"#COL_FEHER" %s\n"#COL_MKEK"B:"#COL_FEHER" %s",KreszKerdesek[0][0], KreszKerdesek[0][1], KreszKerdesek[0][2]);
					
					ShowPlayerDialog(playerid, DIALOG_VIZSGA_KRESZ, DIALOG_STYLE_MSGBOX, "Los Santos - Autósiskola", srt, "A", "B");
				}
				case 1, 2://kocsi, motor
				{
					SetPlayerCheckpoint(playerid, PosExt( Vizsga_Alap[PlayerInfo[playerid][pVizsga][0]] ), 3.0);
					PlayerInfo[playerid][pVizsga][1] = (listitem == 1 ? VIZSGA_KOCSI : (listitem == 2 ? VIZSGA_MOTOR : VIZSGA_KOCSI)); //melyik vizsga
					PlayerInfo[playerid][pVizsga][0] = 0; // viszga cp hol tart
					PlayerInfo[playerid][pVizsga][2] = (VizsgaLista[listitem][3][0] * 60);//max vizsga idõ
					PlayerInfo[playerid][pCP] = CP_VIZSGA;
				}
				case 3://kamion
				{
					SetPlayerCheckpoint(playerid, PosExt( Vizsga_Kamion[ PlayerInfo[playerid][pVizsga][0] ] ), 4.0);
					PlayerInfo[playerid][pVizsga][1] = VIZSGA_KAMION; //melyik vizsga
					PlayerInfo[playerid][pVizsga][0] = 0; // viszga cp hol tart
					PlayerInfo[playerid][pVizsga][2] = (VizsgaLista[listitem][3][0] * 60);//max vizsga idõ
					PlayerInfo[playerid][pCP] = CP_VIZSGA;
				}
			}
			return true;
		}
		case DIALOG_BANKROBP1:
		{
			if(!response)
				return true;
			
			if(!IsNumeric(inputtext) || strval(inputtext) != BankInfo[bBankElocsarnok])
			{
				new str[250];
				format(str, sizeof(str), "===================== [ "#COL_FEHER"BANKRABLÁS"#COL_LRED" ] =====================");
				FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_LSPD, str);
				FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_KATONA, str);
				format(str, sizeof(str), "Figyelem minden egységnek! Valaki megpróbált betörni a See City-i bank biztonsági rendszerébe!");
				FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LSPD, str);
				FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_KATONA, str);
				
				SCM(playerid, COL_LRED, "Hiba a rendszerben! A rendszer értesítette a rendõrséget! A bankrablás megszakadt!");
				BankInfo[bBankInditva] = false;
				return true;
			}
			
			//DestroyDynamicObject
			MoveDynamicObject(BankInfo[bAjto][1], 2319.90, -5.23, 23.07,2,0.00, 0.00, 90.00);
			Streamer_Update(playerid);
			SCM(playerid, COL_MKEK, "Hátsó Kapu kinyitva!");
			SCM(playerid, COL_LRED,"[FIGYELEM] 5 perc múlva záródik a kapu automatikusan!!");
			BankIdo = 300;
			return true;
		}
		case DIALOG_BANKROB:
		{
			if(!response)
			{
				ClearAnimations(BankBotok[bankNPCID]);
				BankBotok[bankAnim] = false;
				SCM(playerid, COL_MKEK, "Ezek szerint mégsem szeretnéd kirabolni..");
				return true;
			}
			
			ServerInfo[0][sBankrob] = 10800; // 3óránként
			switch(random(100))
			{
				case 0 .. 49:
				{
					LoopingAnim(BankBotok[bankNPCID], "ped", "cower", 3.0, 1, 0, 0, 0, 0);
					SCM(playerid, COL_LRED, "A személyzet egyik tagja értesítette a rendõrséget! Fuss!");
					
					new str[250];
					format(str, sizeof(str), "===================== [ "#COL_FEHER"BANKRABLÁS"#COL_LRED" ] =====================");
					FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_LSPD, str);
					FrakcioUzenet(COLOR_LIGHTRED, FRAKCIO_KATONA, str);
					format(str, sizeof(str), "Figyelem minden egységnek! A See City bankból riasztás érkezett!");
					FrakcioUzenet(COLOR_YELLOW, FRAKCIO_LSPD, str);
					FrakcioUzenet(COLOR_YELLOW, FRAKCIO_KATONA, str);
					return true;
				}
				case 50 .. 100:
				{
					BankInfo[bBankInditva] = true;
					
					format(uzenet, sizeof(uzenet), "Bankár mondja: Kérem ne bántson adom is a kódot a biztonsági rendszerhez!");
					ProxDetector(15.0, BankBotok[bankNPCID], uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
					SetPlayerChatBubble(BankBotok[bankNPCID], uzenet, COLOR_WHITE, 5, 5000);
					
					format(uzenet, sizeof(uzenet), "Bankár mondja: Itt van a kód, kérem ne bántson: %d", BankInfo[bBankElocsarnok]);
					ProxDetector(15.0, BankBotok[bankNPCID], uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
					SetPlayerChatBubble(BankBotok[bankNPCID], uzenet, COLOR_WHITE, 5, 5000);
					
					//MoveObject(
					MoveDynamicObject(BankInfo[bAjto][0],2316.14, -5.36, 23.31,2,0.00, 0.00, 128.00);
					
					return true;
				}
			}
			return true;
		}
		case DIALOG_DROGKESZIT:
		{
			if(!response)
				return true;
			
			if(PlayerInfo[playerid][pDrogAnyag][listitem] < 1)
				return SCM(playerid, COL_LRED, "Nincs alapanyagod a készítéshez!");
			
			new i = -1, ido;
		
			for(;++i < PlayerInfo[playerid][pDrogAnyag][listitem];)
				ido += 1;
			
			ClearAnimations(playerid, 1);
			LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
			
			PlayerInfo[playerid][pFoglalt] = true;
			
			SFM(playerid, COL_MKEK, "Elkezdted a drog gyártását! Idõ: kb "#COL_MKEK"%d"#COL_FEHER" másodperc", ido);
			SetTimerEx("Timer", (ido * 1000), false, "iiii", playerid, T_DROGKESZITES, NINCS, listitem);
			return true;
		}
		case DIALOG_BOLTROB:
		{
			new i = -1, ret = -1;
			
			for(;++i < sizeof(BoltBot);)
			{
				if(BoltRablas[i][npcKicsoda] == playerid)
				{
					ret = i;
					break;
				}
			}
			
			if(ret == -1)
				return true;
			
			if(!response)
			{
				BoltRablas[ret][npcAnim] = false;
				BoltRablas[ret][npcKicsoda] = -1;
				BoltRablas[ret][npcRabolas] = false;
				
				ClearAnimations(BoltRablas[ret][npcID]);
				return SCM(playerid, COL_MKEK, "Ezek szerint mégsem szeretnéd kirabolni..");
			}
			
			new randomo = random(100);
			
			switch(randomo)
			{
				case 0 .. 55:
				{
					SCM(playerid, COL_MKEK, "Amint eltávolódsz a bolttól, a boltrablás véget ér!");
					BoltRablas[ret][npcSikerult] = true;
					BoltRablas[ret][npcHivhat] = true;
					BoltRablas[ret][npcFolyamatban] = true;
					
					format(uzenet, sizeof(uzenet), "Kiszolgáló mondja: Kérem ne bántson! Odaadom az összes pénzt, csak kérem ne bántson!");
					ProxDetector(15.0, BoltRablas[i][npcID], uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
					SetPlayerChatBubble(BoltRablas[i][npcID], uzenet, COLOR_WHITE, 5, 5000);
					
					format(uzenet, sizeof(uzenet), "Kiszolgáló mondja: Adjon két percet, és összeszedem a pénzt!");
					ProxDetector(15.0, BoltRablas[i][npcID], uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
					SetPlayerChatBubble(BoltRablas[i][npcID], uzenet, COLOR_WHITE, 5, 5000);
					
					BoltRablas[ret][npcTimer] = SetTimerEx("BoltRab", (2 * 60000), false, "ii", playerid, i);
				}
				case 56 .. 99:
				{
					LoopingAnim(BoltRablas[ret][npcID], "ped", "cower", 3.0, 1, 0, 0, 0, 0);
					SCM(playerid, COL_LRED, "A boltos értesítette a rendõrséget! Fuss!");
					BoltRablas[ret][npcHivhat] = true;
					BoltRablas[ret][npcSikerult] = false;
				}
			}
			
			//SCM(playerid, COL_MKEK, "Most már nincs vissza út! Elkezdted a rablást!");
			
			return true;
		}
		case DIALOG_DROGULT:
		{
			//Marihuana\nKokain\nHeroin
			if(!response)
				return true;
			
			new ret = NearestPlant(playerid),
				hdb = PlayerInfo[playerid][phaz];
			
			if(ret == -1)
				return SCM(playerid, COL_MKEK, "Nem vagy ültetvényes közelében!");
				
			new form[64];
			
			switch(listitem)
			{
				case 0: format(form, sizeof(form), "Marihuana");
				case 1: format(form, sizeof(form), "Kokain");
				case 2: format(form, sizeof(form), "Heroin");
			}
			
			/*
			Text3D:hDrogHely[50],
			hDrogAllapot[50],
			hDrogMi[50]
			*/
			
			switch(listitem)
			{
				case 0: //marihuánához kell lámpa is
				{
					if( PlayerInfo[playerid][pLampa] <= 0 )
						return SCM( playerid, COL_LRED, "Nincs lámpád az ültetéshez.");
					PlayerInfo[playerid][pLampa]--;
					
					new ultetvenyek = 0;
					
					for( new i = 0; i<50; i++ )
					{
						if( HazInfo[hdb][hDrogMi][i] == 1 )
							ultetvenyek++;
					}
					
					if( ultetvenyek >= 5 && random(5) == 0 ) //20%-al értesítse a rendoröket
					{
						foreach(Player, id)
						{
							if(PlayerInfo[id][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[id][pFrakcio] == FRAKCIO_KATONA)
							{
								SendFormatMessage(id, 0x00e1ffAA, "HQ: Figyelem minden egységnek. A %i-os házban gyanúsan sok áram fogy.", hdb);
							}
						}
					}					
				}
				default:
				{
				    return SCM( playerid, COL_LRED, "A többi drogot ideiglenesen nem tudod ültetni.");
				}
			}
			
			HazInfo[hdb][hDrogAllapot][ret] = 0;
			HazInfo[hdb][hDrogMi][ret] = (listitem + 1);
			
			format(form, sizeof(form), "["#COL_MKEK"%s"#COL_FEHER"]\nÁllapot: "#COL_MKEK"%d%%", form, HazInfo[hdb][hDrogAllapot][ret]);
			UpdateDynamic3DTextLabelText(HazInfo[hdb][hDrogHely][ret], 0xFFFFFFFF, form);
			//HazInfo[hdb][hDrogHely][which + DROG_KOZEP]
			//UpdateDynamic3DTextLabelText(HazInfo[houseid][label], 0xFFFFFF, uzenet);
			return true;
		}
		case DIALOG_RADIO_JARMU:
		{
			if(!response)
				return true;
				
			new id = GetPlayerVehicleID(playerid);
			if(!listitem)
			{
				foreach(Player, i)
				{
					if(!PlayerInfo[i][pMP3_Megy] && IsPlayerInAnyVehicle(i) && id == GetPlayerVehicleID(i))
					{
						PlayerTextDrawShow(i, Info[playerid][1]);
						StopAudioStreamForPlayer(i);
					}
				}
				
				SCM(playerid, COL_MKEK, "Rádió kikapcsolva!");
				Cselekves(playerid, "kikapcsolta a jármû rádióját");
				return true;
			}
			
			foreach(Player, i)
			{
				if(!PlayerInfo[i][pMP3_Megy] && IsPlayerInAnyVehicle(i) && id == GetPlayerVehicleID(i))
				{
					PlayerTextDrawHide(i, Info[playerid][1]);
					StopAudioStreamForPlayer(i);
					PlayAudioStreamForPlayer(i, RadioLista[listitem -1][0]);
				}
			}
			
			vInfo[ JarmuID(id, playerid) ][vRadio] = listitem;
			SFM(playerid, COL_MKEK, "Jelenleg ez szól a jármûben: "#COL_MKEK"%s", RadioLista[listitem -1][1]);
			Cselekves(playerid, "rádióállomást váltott a jármûben");
			return true;
		}
		case DIALOG_RADIO:
		{
			if(!response)
				return true;
				
			if(!listitem)
			{
				PlayerInfo[playerid][pMP3_Megy] = false;
				PlayerTextDrawShow(playerid, Info[playerid][1]);
				StopAudioStreamForPlayer(playerid);
				SCM(playerid, COL_MKEK, "Rádió kikapcsolva!");
				Cselekves(playerid, "kikapcsolta az MP3 lejátszóját");
				return true;
			}
			
			PlayerInfo[playerid][pMP3_Megy] = true;
			PlayerTextDrawHide(playerid, Info[playerid][1]);
			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, RadioLista[listitem -1][0]);
			SFM(playerid, COL_MKEK, "Jelenleg ezt hallgatod: "#COL_MKEK"%s", RadioLista[listitem -1][1]);
			Cselekves(playerid, "csatornát váltott az MP3 lejátszóján");
			return true;
		}
		case DIALOG_RADIO_VHifi:
		{
			if(!response)
				return true;
				
			if(!listitem)
			{
				new Float:X,Float:Y,Float:Z;
				GetPlayerPos(playerid,X,Y,Z);
				foreach(Player,i)
				{
					if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
					{
						StopAudioStreamForPlayer(i);
						strmid(HifiZene[i],"-",0,strlen("-"),256);
						strmid(HifiInfo[i][hURL],"-",0,strlen("-"),256);
					}
				}
				Cselekves(playerid, "kikapcsolta a zenét a hifin");
				return true;
			}
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid,X,Y,Z);
			foreach(Player,i)
			{
				if(IsPlayerInRangeOfPoint(i,5.0,X,Y,Z))
				{
					StopAudioStreamForPlayer(i);
					PlayAudioStreamForPlayer(i, RadioLista[listitem -1][0],X,Y,Z,5.0,1);
					strmid(HifiZene[i],RadioLista[listitem -1][0],0,strlen(RadioLista[listitem -1][0]),256);
					strmid(HifiInfo[i][hURL],RadioLista[listitem -1][0],0,strlen(RadioLista[listitem -1][0]),256);
				}
			}
			Cselekves(playerid, "csatornát váltott a Hifin");
			return 1;
		}
		case DIALOG_CAMERA:
		{
			if(response)
			{
				SetPlayerToCCTVCamera(playerid,listitem+1);
				SFM(playerid,COL_LRED,"Belenéztél a %s Kamerába",CameraName[listitem+1]);
			}
			return 1;
		}
		case DIALOG_ITALOK:
		{
			if(!response)
			{
				return 1;
			}
			if(PenzEgyenleg(playerid) < ItalLista[listitem][1][0])
				return SCM(playerid, COL_LRED, "Nincs nálad elegendõ készpénz, hogy ezt megvehesd!");
			
			
			if(PlayerInfo[playerid][peletkor] < 18) return SCM(playerid,COL_LRED,"Te még ehhez kicsi vagy!");
				
			switch(listitem)
			{
				case 0:{Cselekves(playerid,"vett egy üveg Ásvány vizet");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);}
				case 1:{Cselekves(playerid,"vett egy üveg Coca Colát");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);}
				case 2:{Cselekves(playerid,"vett egy üveg Fantát");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);}
				case 3:{Cselekves(playerid,"vett egy üveg Sprite -t");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);}
				case 4:{Cselekves(playerid,"vett egy üveg Cappy Ice Fruit");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);}
				case 5:{Cselekves(playerid,"vett egy üveg Sört");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 6:{Cselekves(playerid,"vett egy üveg Bort");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 7:{Cselekves(playerid,"vett egy üveg Vodkát");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 8:{Cselekves(playerid,"vett egy üveg Whiskey -t");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 9:{Cselekves(playerid,"vett egy üveg Gin -t");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 10:{Cselekves(playerid,"vett egy üveg Tequila -át");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 11:{Cselekves(playerid,"vett egy üveg Absinth-tot");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
				case 12:{Cselekves(playerid,"vett egy üveg Brandy-t");SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 1000));}
			}
			GiveMoney(playerid,-ItalLista[listitem][1][0]);
			return 1;
		}
		case DIALOG_BOLT:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Köszönjük, hogy minket választott! Viszlát késõbb!");
				
			if(PenzEgyenleg(playerid) < TargyLista[listitem][1][0])
				return SCM(playerid, COL_LRED, "Nincs nálad elegendõ készpénz, hogy ezt megvehesd!");
			
			switch(listitem)
			{
				case 0:
				{
					if(PlayerInfo[playerid][pGPSV])
						return SCM(playerid, COL_LRED, "Neked már van GPS-ed!");
					
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy GPS-t!");
					PlayerInfo[playerid][pGPSV] = 1;
				}
				case 1:
				{
					if(PlayerInfo[playerid][ptelefonszam] > 0)
						return SCM(playerid, COL_LRED, "Már van telefonod!");
						
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy Telefont!");
					
					new telefonszamod = UjTelefonSzam();
					PlayerInfo[playerid][ptelefonszam] = telefonszamod;
					SFM(playerid, COL_MKEK, "Új telefonszámod: %d", telefonszamod);
					nformat(queaary, 256, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET ptelefonszam = '%d' WHERE Id = '%d'", telefonszamod, PlayerInfo[playerid][pID]);
					//mysql_function_query(sql_ID, queaary, false, "", "");
					mysql_tquery(sql_ID, queaary, "", "");
				}
				case 2:
				{
					if((PlayerInfo[playerid][pKotszer] + 4) >P_MAX_KOTSZER)
						return SCM(playerid, COL_LRED, "Nem fér el nálad több kötszer!");
					
					PlayerInfo[playerid][pKotszer] += 4;
					SCM(playerid, COL_MKEK, "Sikeresen vettél 4db Kötszert!");
				}
				case 3:
				{
					if(PlayerInfo[playerid][pSzendvics] > 4)
						return SCM(playerid, COL_LRED, "Maximum 5 szendvics lehet nálad!");
					
					SCM(playerid, COL_VZOLD, "Sikeresen vettél 1db Szendvicset!");
					PlayerInfo[playerid][pSzendvics]++;
				}
				case 4:
				{
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy 15$ értékû feltöltõkártyát!");
					PlayerInfo[playerid][pTelefonPenz] += 15;
				}
				case 5:
				{
					if(PlayerInfo[playerid][pTelefonKonyv])
						return SCM(playerid, COL_LRED, "Már vettél egy Telefonkönyvet!");
					
					PlayerInfo[playerid][pTelefonKonyv] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy Telefonkönyvet!");
				}
				case 6:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_MP3 ])
						return SCM(playerid, COL_LRED, "Neked már van MP4 lejátszód!");
					
					PlayerInfo[playerid][pBoltCucc][ BL_MP3 ] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy MP3 lejátszót! (( /mp3 ))");
				}
				case 7:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_VONTATO ])
						return SCM(playerid, COL_LRED, "Neked már van vontatóköteled!");
					
					PlayerInfo[playerid][pBoltCucc][ BL_VONTATO ] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy vontatókötelet! (( /vontat ))");
				}
				case 8:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_PAPIR ])
						return SCM(playerid, COL_LRED, "Már van nálad cigipapír!");
					
					PlayerInfo[playerid][pBoltCucc][ BL_PAPIR ] = 10;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy cigipapírt!");
				}
				case 9:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_CIGI ])
						return SCM(playerid, COL_LRED, "Már van nálad egy doboz cigi!");
					
					PlayerInfo[playerid][pBoltCucc][ BL_CIGI ] = 19;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy doboz cigit!");
				}
				case 10:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_GYUJTO ])
						return SCM(playerid, COL_LRED, "Már van nálad öngyújtó!");
					
					PlayerInfo[playerid][pBoltCucc][ BL_GYUJTO ] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy öngyújtót!");
				}
				case 11:
				{
					if(PlayerInfo[playerid][pCsipogo] == 1)
						return SCM(playerid, COL_LRED, "Már van nálad csipogó!");
					
					PlayerInfo[playerid][pCsipogo] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy csipogót!");
				}
				case 12:
				{
					if(PlayerInfo[playerid][pKanna] == 1)
						return SCM(playerid, COL_LRED, "Már van nálad Benzines Kanna!");
					
					PlayerInfo[playerid][pKanna] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy Benzines Kannát!");
				}
				case 13:
				{
					GiveWeapon(playerid, 41, 1000);
					SCM(playerid,COL_MKEK,"Vettél egy csomag Festék szórót!");
				}
				case 14:
				{
					if(PlayerInfo[playerid][pHifi] > 0)
						return SCM(playerid,COL_LRED,"Már van egy Hifi torony nállad!");
						
					PlayerInfo[playerid][pHifi] = 1;
					SCM(playerid,COL_MKEK,"Vettél egy Hifi tornyot!");
				}
				case 15:
				{
					PlayerInfo[playerid][pLampa] += 2;
					SCM(playerid,COL_MKEK,"Vettél egy gyenge lámpát.");
				}
				case 16:
				{
					PlayerInfo[playerid][pLampa] += 3;
					SCM(playerid,COL_MKEK,"Vettél egy közepes lámpát.");
				}
				case 17:
				{
					PlayerInfo[playerid][pLampa] += 5;
					SCM(playerid,COL_MKEK,"Vettél egy eros lámpát.");
				}
				case 18:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_PIPA ])
						return SCM(playerid, COL_LRED, "Már van nálad pipa.");
					
					PlayerInfo[playerid][pBoltCucc][ BL_PIPA ] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy pipát!");
				}
				case 19:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_BONG ])
						return SCM(playerid, COL_LRED, "Már van nálad bong.");
					
					PlayerInfo[playerid][pBoltCucc][ BL_BONG ] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy bongot!");
				}
				case 20:
				{
					GiveWeapon(playerid, 5, 1, false, true);
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy baseballütõt!");
				}
			}
			
			//Pénz levétel, nehogy visszatérj elõtte..
			//nem fogok visszatérni, k
			GiveMoney(playerid,-TargyLista[listitem][1][0]);
			CegPenz(BIZ_247, TargyLista[listitem][1][0]);
			return true;
		}
		case DIALOG_BOLT_BP:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Köszönjük, hogy minket választott! Viszlát késõbb!");
				
			if(PlayerInfo[playerid][pBszPenz] < TargyLista[listitem][1][0])
				return SCM(playerid, COL_LRED, "Nincs elegendõ pénz a kártyádon, hogy ezt megvehesd!");
			
			switch(listitem)
			{
				case 0:
				{
					if(PlayerInfo[playerid][pGPSV])
						return SCM(playerid, COL_LRED, "Neked már van GPS-ed!");
					
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy GPS-t!");
					PlayerInfo[playerid][pGPSV] = 1;
				}
				case 1:
				{
					if(PlayerInfo[playerid][ptelefonszam] > 0)
						return SCM(playerid, COL_LRED, "Már van telefonod!");
						
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy Telefont!");
					
					new telefonszamod = UjTelefonSzam();
					PlayerInfo[playerid][ptelefonszam] = telefonszamod;
					SFM(playerid, COL_MKEK, "Új telefonszámod: %d", telefonszamod);
					nformat(queaary, 256, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET ptelefonszam = '%d' WHERE Id = '%d'", telefonszamod, PlayerInfo[playerid][pID]);
					//mysql_function_query(sql_ID, queaary, false, "", "");
					mysql_tquery(sql_ID, queaary, "", "");
				}
				case 2:
				{
					if((PlayerInfo[playerid][pKotszer] + 4) >P_MAX_KOTSZER)
						return SCM(playerid, COL_LRED, "Nem fér el nálad több kötszer!");
					
					PlayerInfo[playerid][pKotszer] += 4;
					SCM(playerid, COL_MKEK, "Sikeresen vettél 4db Kötszert!");
				}
				case 3:
				{
					if(PlayerInfo[playerid][pSzendvics] > 4)
						return SCM(playerid, COL_LRED, "Maximum 5 szendvics lehet nálad!");
					
					SCM(playerid, COL_VZOLD, "Sikeresen vettél 1db Szendvicset!");
					PlayerInfo[playerid][pSzendvics]++;
				}
				case 4:
				{
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy 15$ értékû feltöltõkártyát!");
					PlayerInfo[playerid][pTelefonPenz] += 15;
				}
				case 5:
				{
					if(PlayerInfo[playerid][pTelefonKonyv])
						return SCM(playerid, COL_LRED, "Már vettél egy Telefonkönyvet!");
					
					PlayerInfo[playerid][pTelefonKonyv] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy Telefonkönyvet!");
				}
				case 6:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_MP3 ])
						return SCM(playerid, COL_LRED, "Neked már van MP4 lejátszód!");
					
					PlayerInfo[playerid][pBoltCucc][ BL_MP3 ] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy MP3 lejátszót! (( /mp3 ))");
				}
				case 7:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_VONTATO ])
						return SCM(playerid, COL_LRED, "Neked már van vontatóköteled!");
					
					PlayerInfo[playerid][pBoltCucc][ BL_VONTATO ] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy vontatókötelet! (( /vontat ))");
				}
				case 8:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_PAPIR ])
						return SCM(playerid, COL_LRED, "Már van nálad cigipapír!");
					
					PlayerInfo[playerid][pBoltCucc][ BL_PAPIR ] = 10;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy cigipapírt!");
				}
				case 9:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_CIGI ])
						return SCM(playerid, COL_LRED, "Már van nálad egy doboz cigi!");
					
					PlayerInfo[playerid][pBoltCucc][ BL_CIGI ] = 19;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy doboz cigit!");
				}
				case 10:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_GYUJTO ])
						return SCM(playerid, COL_LRED, "Már van nálad öngyújtó!");
					
					PlayerInfo[playerid][pBoltCucc][ BL_GYUJTO ] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy öngyújtót!");
				}
				case 11:
				{
					if(PlayerInfo[playerid][pCsipogo] == 1)
						return SCM(playerid, COL_LRED, "Már van nálad csipogó!");
					
					PlayerInfo[playerid][pCsipogo] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy csipogót!");
				}
				case 12:
				{
					if(PlayerInfo[playerid][pKanna] == 1)
						return SCM(playerid, COL_LRED, "Már van nálad Benzines Kanna!");
					
					PlayerInfo[playerid][pKanna] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy Benzines Kannát!");
				}
				case 13:
				{
					GiveWeapon(playerid, 41, 1000);
					SCM(playerid,COL_MKEK,"Vettél egy csomag Festék szórót!");
				}
				case 14:
				{
					if(PlayerInfo[playerid][pHifi] > 0)
						return SCM(playerid,COL_LRED,"Már van egy Hifi torony nállad!");
						
					PlayerInfo[playerid][pHifi] = 1;
					SCM(playerid,COL_MKEK,"Vettél egy Hifi tornyot!");
				}
				case 15:
				{
					PlayerInfo[playerid][pLampa] += 2;
					SCM(playerid,COL_MKEK,"Vettél egy gyenge lámpát.");
				}
				case 16:
				{
					PlayerInfo[playerid][pLampa] += 3;
					SCM(playerid,COL_MKEK,"Vettél egy közepes lámpát.");
				}
				case 17:
				{
					PlayerInfo[playerid][pLampa] += 5;
					SCM(playerid,COL_MKEK,"Vettél egy erõs lámpát.");
				}
				case 18:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_PIPA ])
						return SCM(playerid, COL_LRED, "Már van nálad pipa.");
					
					PlayerInfo[playerid][pBoltCucc][ BL_PIPA ] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy pipát!");
				}
				case 19:
				{
					if(PlayerInfo[playerid][pBoltCucc][ BL_BONG ])
						return SCM(playerid, COL_LRED, "Már van nálad bong.");
					
					PlayerInfo[playerid][pBoltCucc][ BL_BONG ] = 1;
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy bongot!");
				}
				case 20:
				{
					GiveWeapon(playerid, 5, 1, false, true);
					SCM(playerid, COL_MKEK, "Sikeresen vettél egy baseballütõt!");
				}
			}
			
			//Pénz levétel, nehogy visszatérj elõtte..
			//nem fogok visszatérni, k
			PlayerInfo[playerid][pBszPenz] -= TargyLista[listitem][1][0];
			CegPenz(BIZ_247, TargyLista[listitem][1][0]);
			return true;
		}
		case DIALOG_FEGYVERKESZITES:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Várunk késõbb vissza!");
			
			if(PlayerInfo[playerid][pFegyverSkill] < Fegyverek[listitem][fSkill])
				return SCM(playerid, COL_LRED, "Nincs elegendõ tapasztalatod e fegyver készítéséhez!");
			
			if(PlayerInfo[playerid][pMaterial] < Fegyverek[listitem][fMati])
				return SCM(playerid, COL_LRED, "Nincs elegendõ alapanyagod az elkészítéséhez!");
			
			SCM(playerid, COL_MKEK, "Elkezdted a fegyver készítését!");
			
			ClearAnimations(playerid, 1);
			
			LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
			LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
			LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
			
			SetTimerEx("Timer", (((listitem + 1) * 2) * 1000), false, "iiii", playerid, T_FKESZITES, NINCS, listitem);
			PlayerInfo[playerid][pFoglalt] = true;
			
			return true;
		}
		case DIALOG_DROGMAG:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Köszönjöük a vásárlást! Viszlát késõbb!");
			
			//Marihuana\nKokain\nHeroin
			switch(listitem)
			{
				case 0: PlayerInfo[playerid][pDrogMit][1] = 1; //Marihuana
				case 1: PlayerInfo[playerid][pDrogMit][1] = 2; //Kokain
				case 2: PlayerInfo[playerid][pDrogMit][1] = 3; //Heroin
			}
			
			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Hagytam San Fierro-i kikötõben 5db magot, vedd fel, és ha majd kész lettél hívj fel!");
			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Na, csõ csõ");

			SCM(playerid, COL_MKEK, "A telefont lerakták!");
			PlayerInfo[playerid][ptelefonal] = false;
			PlayerInfo[playerid][ptelefonaloid] = 0;
			
			PlayerInfo[playerid][pCP] = CP_DROG;
			SetPlayerCheckpoint(playerid, -1688.3713, 12.9246, 3.5547, 5.0);
			return true;
		}
		#if ACCOUNT_KEZELES == 1
		case DIALOG_LOGIN_USER_INPUT:
		{
			if(!response)
				return SelectTextDraw(playerid, 0xF7C25EAA);
			
			if((3 > strlen(inputtext)) || (24 < strlen(inputtext))) //mennyi legyen a minimum? max?
				return ShowPlayerDialog(playerid, DIALOG_LOGIN_USER_INPUT, DIALOG_STYLE_INPUT, #COL_FEHER"Felhasználónév", #COL_FEHER"Hiba! A felhasználónév minimum 4, és maximum 24 karakterbõl állhat!\nKérlek írd be a lentebbi mezõbe a(z) UserCP felhasználóneved!", "Mehet", "Mégse");
			
			if(injectCheck(inputtext))
			    return ShowPlayerDialog(playerid, DIALOG_LOGIN_USER_INPUT, DIALOG_STYLE_INPUT, #COL_FEHER"Felhasználónév", #COL_FEHER"Hiba! Hibás karakter(ek) a felhasználónévben!\nKérlek írd be a lentebbi mezõbe a(z) UserCP felhasználóneved!", "Mehet", "Mégse");
			    
			format(UserControl[playerid][uUserName], 24, inputtext);
			PlayerTextDrawSetString(playerid, LoginDraw[playerid][3], inputtext);
			
			SelectTextDraw(playerid, 0xF7C25EAA);
			return true;
		}
		case DIALOG_LOGIN_PW_INPUT:
		{
			if(!response)
				return SelectTextDraw(playerid, 0xF7C25EAA);
			
			//SendFormatMessage(playerid, -1, "PW(1): %s", inputtext);
			IllegalCharacter(inputtext);
			//SendFormatMessage(playerid, -1, "PW(2): %s", inputtext);
			
			if(4 > strlen(inputtext) || 24 < strlen(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_LOGIN_PW_INPUT, DIALOG_STYLE_PASSWORD, #COL_FEHER"Jelszó", #COL_FEHER"Hiba! A jelszó minimum 4, és maximum 24 karakterbõl állhat!\nKérlek írd be a lentebbi mezõbe a(z) UserCP felhasználóneved!", "Mehet", "Mégse");
			
			if(injectCheck(inputtext))
			    return ShowPlayerDialog(playerid, DIALOG_LOGIN_USER_INPUT, DIALOG_STYLE_INPUT, #COL_FEHER"Felhasználónév", #COL_FEHER"Hiba! Hibás karakter(ek) a jelszóban!\nKérlek írd be a lentebbi mezõbe a(z) UserCP felhasználóneved!", "Mehet", "Mégse");
			    
			format(UserControl[playerid][uPassword], 64, inputtext);
			
			new i = -1, jelszo[64];
			for(;++i < strlen(inputtext);)
				strins(jelszo, "-", strlen(jelszo));
			
			PlayerTextDrawSetString(playerid, LoginDraw[playerid][5], jelszo);
			SelectTextDraw(playerid, 0xF7C25EAA);
			return true;
		}
		#endif
		case DIALOG_HAZ_SZEF_FEGY:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
				
			if(PlayerInfo[playerid][pDuty][0] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND)
				return SCM(playerid, COL_LRED, "Cicaborsó, nem ezért kapsz fegyvert szolgálatban :D");
			
			new fegyv[1024], form[64], i = -1; //Név [lõszer]
		
			switch(listitem)
			{
				case 0 .. 14:
				{
					if(PlayerInfo[playerid][pFegyver] && !HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem])
					{
						HazInfo[PlayerInfo[playerid][phaz]][hFegyver][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] = PlayerInfo[playerid][pFegyver];
						HazInfo[PlayerInfo[playerid][phaz]][hTolteny][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] += PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]];
						
						SFM(playerid, COL_MKEK, "Beraktál egy "#COL_MKEK"%s"#COL_FEHER" tipusú fegyvert "#COL_MKEK"%ddb"#COL_FEHER" lõszerrel!", aWeaponNames[PlayerInfo[playerid][pFegyver]], PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);
						
						nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Fegyver: [%d]%s - Töltény: %ddb", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], PlayerInfo[playerid][pFegyver], aWeaponNames[PlayerInfo[playerid][pFegyver]], PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);
						Log(FILE_HAZSZEF, cstr);
						
						PlayerInfo[playerid][pFegyverek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = 0;
						PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = 0;
						PlayerInfo[playerid][pFegyver] = 0;
						ResetPlayerWeapons(playerid);
						//return true;
					}
					else if(HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem])
					{
						if(PlayerInfo[playerid][pFegyver])
							if(SameWeaponSlot(PlayerInfo[playerid][pFegyver], HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem]))
								return SCM(playerid, COL_LRED, "Már van ilyen típusú fegyvered!");
						
						PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
						GiveWeapon(playerid, HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem], HazInfo[PlayerInfo[playerid][phaz]][hTolteny][listitem]);
						SFM(playerid, COL_MKEK, "Kivettél egy "#COL_MKEK"%s"#COL_FEHER" típusú fegyvert "#COL_MKEK"%ddb"#COL_FEHER" lõszerrel!", aWeaponNames[HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem]], HazInfo[PlayerInfo[playerid][phaz]][hTolteny][listitem]);
						
						new cstr[256];
						format(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Fegyver: [%d]%s - Töltény: %ddb", playerid, JatekosNev(playerid, false, true), 
						PlayerInfo[playerid][phaz], 
						HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem], 
						aWeaponNames[HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem]], 
						HazInfo[PlayerInfo[playerid][phaz]][hTolteny][listitem]);
						
						Log(FILE_HAZSZEF, cstr);
						
						HazInfo[PlayerInfo[playerid][phaz]][hFegyver][listitem] = 0;
						HazInfo[PlayerInfo[playerid][phaz]][hTolteny][listitem] = 0;
						return true;
					} else {
						SCM(playerid, COL_LRED, "Ezen a sloton nincsen fegyver!");
						SCM(playerid, COL_MKEK, "Ha beszeretnél tenni fegyvert, akkor vedd elõ!");
					}
				}
			}
			
			new meddig = 5;
			
			if(PlayerInfo[playerid][pPremiumIdo] > gettime())
				if(PremiumCsomag(PlayerInfo[playerid][pPremiumCsomag]) != NINCS)
					meddig += TamogatasInfo[PremiumCsomag(PlayerInfo[playerid][pPremiumCsomag])][2];
			
			for(;++i < meddig;)
			{
				if(HazInfo[PlayerInfo[playerid][phaz]][hFegyver][i])
					format(form, 64, #COL_VZOLD"%s[%d] %s [%d]\n", ((i > 4) ? ("[PP] ") : ("")), i, aWeaponNames[HazInfo[PlayerInfo[playerid][phaz]][hFegyver][i]], HazInfo[PlayerInfo[playerid][phaz]][hTolteny][i]);
				else
					format(form, 64, #COL_VKEK"%s[%d] Üres\n", ((i > 4) ? ("[PP] ") : ("")), i);
					
				strins(fegyv, form, strlen(fegyv));
			}
			
			ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_FEGY, DIALOG_STYLE_LIST, #COL_NARANCS"Válassz "#COL_SZURKE"fegyvert!", fegyv, "Mehet", "Mégse");
			return true;
		}
		case DIALOG_HAZ_SZEF:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				//"Pénz:", FormatNumber(HazInfo[haz][hazSzef][0], 0, '.'), "Kokain:", HazInfo[haz][hazSzef][1], "Heroin:", HazInfo[haz][hazSzef][2], "Marihuana:", HazInfo[haz][hazSzef][3], "Material:", HazInfo[haz][hazSzef][4]);
				case 0: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ, DIALOG_STYLE_LIST, #COL_NARANCS"Pénz "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO, DIALOG_STYLE_LIST, #COL_NARANCS"Kokain "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 2: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO, DIALOG_STYLE_LIST, #COL_NARANCS"Heroin "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 3: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI, DIALOG_STYLE_LIST, #COL_NARANCS"Marihuana "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 4: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI, DIALOG_STYLE_LIST, #COL_NARANCS"Material "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 5:
				{
					new fegyv[1024], form[64], i = -1;
					
					new meddig = 5;
			
					if(PlayerInfo[playerid][pPremiumIdo] > gettime())
						if(PremiumCsomag(PlayerInfo[playerid][pPremiumCsomag]) != NINCS)
							meddig += TamogatasInfo[PremiumCsomag(PlayerInfo[playerid][pPremiumCsomag])][2];
					
					for(;++i < meddig;)
					{
						if(HazInfo[PlayerInfo[playerid][phaz]][hFegyver][i])
							format(form, 64, #COL_VZOLD"%s[%d] %s [%d]\n", ((i > 4) ? ("[PP] ") : ("")), i, aWeaponNames[HazInfo[PlayerInfo[playerid][phaz]][hFegyver][i]], HazInfo[PlayerInfo[playerid][phaz]][hTolteny][i]);
						else
							format(form, 64, #COL_VKEK"%s[%d] Üres\n", ((i > 4) ? ("[PP] ") : ("")), i);
							
						strins(fegyv, form, strlen(fegyv));
					}
					
					ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_FEGY, DIALOG_STYLE_LIST, #COL_NARANCS"Válassz "#COL_SZURKE"fegyvert!", fegyv, "Mehet", "Mégse");
					return true;
				}
				case 6:
				{
					new haz = PlayerInfo[playerid][phaz];
					nformat(k, 256, #COL_FEHER"Széf tartalma: \n\n%10s"#COL_VKEK"\t%s$\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d", \
					"Pénz:", FormatNumber(HazInfo[haz][hazSzef][0], 0, '.'), "Kokain:", HazInfo[haz][hazSzef][1], "Heroin:", HazInfo[haz][hazSzef][2], "Marihuana:", HazInfo[haz][hazSzef][3], "Material:", HazInfo[haz][hazSzef][4]);
					
					ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI, DIALOG_STYLE_MSGBOX, #COL_NARANCS"Statisztika", k, "Mehet", "Mégse");
				}
			}
			
			return true;
		}
		case DIALOG_HAZ_SZEF_PENZ:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			}
			
			return true;
		}
		case DIALOG_HAZ_SZEF_PENZ_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			if(PenzEgyenleg(playerid) < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi pénz!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0] += strval(inputtext);
			GiveMoney(playerid,-strval(inputtext));
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%s$"#COL_FEHER"-ot a széfbe! Mostani házszéf egyenleg: "#COL_MKEK"%s$", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0], 0, '.'));
			
			nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Pénz: %s$ - Széfben: %s$", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_PENZ_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			if(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi pénz!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0] -= strval(inputtext);
			GiveMoney(playerid,strval(inputtext));
			SFM(playerid, COL_VZOLD, "Kitettél "#COL_MKEK"%s$"#COL_FEHER"-ot a széfbõl! Mostani házszéf egyenleg: "#COL_MKEK"%s$", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0], 0, '.'));
			
			nformat(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Pénz: %s$ - Széfben: %s$", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][0], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_KOKO:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			}
			return true;
		}
		case DIALOG_HAZ_SZEF_KOKO_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			if(PlayerInfo[playerid][pKokain] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi kokain!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1] += strval(inputtext);
			PlayerInfo[playerid][pKokain] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sg"#COL_FEHER" kokaint a széfbe! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1], 0, '.'));
			
			nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Kokain: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_KOKO_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			if(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi kokain!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1] -= strval(inputtext);
			PlayerInfo[playerid][pKokain] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kitettél "#COL_MKEK"%sg"#COL_FEHER" kokaint a széfbõl! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1], 0, '.'));
			
			nformat(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Kokain: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][1], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_HERO:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			}
			return true;
		}
		case DIALOG_HAZ_SZEF_HERO_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			if(PlayerInfo[playerid][pHeroin] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi heroin!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2] += strval(inputtext);
			PlayerInfo[playerid][pHeroin] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sg"#COL_FEHER" heroint a széfbe! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2], 0, '.'));
			
			nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Heroin: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_HERO_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			if(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi heroin!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2] -= strval(inputtext);
			PlayerInfo[playerid][pHeroin] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%sg"#COL_FEHER" heroint a széfbõl! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2], 0, '.'));
			
			nformat(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Heroin: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][2], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_MARI:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			}
			return true;
		}
		case DIALOG_HAZ_SZEF_MARI_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			if(PlayerInfo[playerid][pMarihuana] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi marihuana!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3] += strval(inputtext);
			PlayerInfo[playerid][pMarihuana] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sg"#COL_FEHER" marihuanat a széfbe! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3], 0, '.'));
			
			nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Marihuana: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_MARI_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			if(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi marihuana!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3] -= strval(inputtext);
			PlayerInfo[playerid][pMarihuana] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%sg"#COL_FEHER" marihuanat a széfbõl! Mostani házszéf mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3], 0, '.'));
			
			nformat(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Marihuana: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][3], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_MATI:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			}
			return true;
		}
		case DIALOG_HAZ_SZEF_MATI_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			if(PlayerInfo[playerid][pMaterial] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi material!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4] += strval(inputtext);
			PlayerInfo[playerid][pMaterial] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sdb"#COL_FEHER" materialt a széfbe! Mostani házszéf mennyiség: "#COL_MKEK"%sdb", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4], 0, '.'));
			
			nformat(cstr, 256, "[Be]: [%d]%s | Ház: %d | Material: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_HAZ_SZEF_MATI_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			if(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi material!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4] -= strval(inputtext);
			PlayerInfo[playerid][pMaterial] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%sdb"#COL_FEHER" materialt a széfbõl! Mostani házszéf mennyiség: "#COL_MKEK"%sdb", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4], 0, '.'));
			
			nformat(cstr, 256, "[Ki]: [%d]%s | Ház: %d | Material: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][phaz], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(HazInfo[PlayerInfo[playerid][phaz]][hazSzef][4], 0, '.'));
			Log(FILE_HAZSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_FEGYVEREK:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
				
			if(PlayerInfo[playerid][pDuty][0] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND)
				return SCM(playerid, COL_LRED, "Cicaborsó, nem ezért kapsz fegyvert szolgálatban :D");
			
			new fegyv[1024], form[64], i = -1; //Név [lõszer]
		
			switch(listitem)
			{
				case 0..9:
				{
					if(PlayerInfo[playerid][pFegyver] && !FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem])
					{
						FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] = PlayerInfo[playerid][pFegyver];
						FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] = PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]];
						
						SFM(playerid, COL_VZOLD, "Beraktál egy "#COL_MKEK"%s"#COL_FEHER" tipusú fegyvert "#COL_MKEK"%ddb"#COL_FEHER" lõszerrel!", aWeaponNames[PlayerInfo[playerid][pFegyver]], PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);
						
						nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | Fegyver: [%d]%s - Töltény: %ddb", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], PlayerInfo[playerid][pFegyver], aWeaponNames[PlayerInfo[playerid][pFegyver]], PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);
						Log(FILE_FSZEF, cstr);
						
						PlayerInfo[playerid][pFegyverek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = 0;
						PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]] = 0;
						PlayerInfo[playerid][pFegyver] = 0;
						ResetPlayerWeapons(playerid);
						goto haribo;
						//return true;
					}
					
					else if(FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem])
					{
						if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
							return SCM(playerid, COL_LRED, "Nincs elegendõ rangod a páncélszekrénybõl való kivételhez!");
					
						if(PlayerInfo[playerid][pFegyver])
							if(SameWeaponSlot(PlayerInfo[playerid][pFegyver], FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]))
								return SCM(playerid, COL_LRED, "Már van ilyen típusú fegyvered!");
						
						PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
						GiveWeapon(playerid, FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem], FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]);
						SFM(playerid, COL_MKEK, "Kivettél egy "#COL_MKEK"%s"#COL_FEHER" típusú fegyvert "#COL_MKEK"%ddb"#COL_FEHER" lõszerrel!", aWeaponNames[FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]], FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]);
						
						new cstr[256];
						format(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Fegyver: [%d]%s - Töltény: %ddb", playerid, JatekosNev(playerid, false, true),
						PlayerInfo[playerid][pFrakcio], 
						FInfo[PlayerInfo[playerid][pFrakcio]][fNev], 
						FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem], 
						aWeaponNames[FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]], 
						FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem]);
						
						Log(FILE_FSZEF, cstr);
						
						FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] = 0;
						FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][(PlayerInfo[playerid][pSzefFegyver] * 10) + listitem] = 0;
						FkUpdate(PlayerInfo[playerid][pFrakcio], fuFegyverek);
						return true;
					} else {
						SCM(playerid, COL_LRED, "Ezen a sloton nincsen fegyver!");
						SCM(playerid, COL_MKEK, "Ha beszeretnél tenni fegyvert, akkor vedd elõ!");
						goto haribo;
					}
				}
				case 10:
				{
					if(PlayerInfo[playerid][pSzefFegyver] < 4)
						PlayerInfo[playerid][pSzefFegyver]++;
					else
						PlayerInfo[playerid][pSzefFegyver]--;
				}
				case 11:
					PlayerInfo[playerid][pSzefFegyver]--;
			}
			haribo:
			i = ((PlayerInfo[playerid][pSzefFegyver] * 10) - 1);
					
			for(;++i < ((PlayerInfo[playerid][pSzefFegyver] * 10) + 10);)
			{
				if(FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][i])
					format(form, 64, #COL_VZOLD"[%d] %s [%d]\n", i, aWeaponNames[FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][i]], FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][i]);
				else
					format(form, 64, #COL_VKEK"[%d] Üres\n", i);
					
				strins(fegyv, form, strlen(fegyv));
			}
			if(PlayerInfo[playerid][pSzefFegyver] != 4)
				strins(fegyv, "Tovább\n", strlen(fegyv));
			if(PlayerInfo[playerid][pSzefFegyver] > 0)
				strins(fegyv, "Vissza", strlen(fegyv));
			
			new cim[64];
			format(cim, 64, #COL_NARANCS"Válassz "#COL_SZURKE"fegyvert! "#COL_FEHER"(%d/5)", (PlayerInfo[playerid][pSzefFegyver] + 1));
			
			ShowPlayerDialog(playerid, DIALOG_FRAKCIO_FEGYVEREK, DIALOG_STYLE_LIST, cim, fegyv, "Mehet", "Mégse");
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuFegyverek);
			return true;
		}
		case DIALOG_FRAKCIO_SZEFMN: // széf minrang
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > 10)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_SZEFMN, DIALOG_STYLE_INPUT, "Széf minimum rang", ""#COL_PIROS"Hibás rang (Minimum 0 maximum 10 lehet)!\n"#COL_FEHER"Kérlek add meg, hogy a frakció tagjaid\nhanyas rangtól vehessenek ki a széfbõl tartalmat.", "Mentés", "Mégse");
			
			nformat(str, 128, ""#COL_FEHER"Széf minimum rang váltása sikeres!\nRégi: "#COL_MKEK"%d"#COL_FEHER" -> Új: "#COL_MKEK"%d", FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang], strval(inputtext));
			Info_Dialog(playerid, ""#COL_FEHER"Széf minimum rang", str);
			FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] = strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuSzefRang);
			return true;
		}
		case DIALOG_FRAKCIO_SZEF:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				//"Pénz\nKokain\nHeroin\nMarihuana\nMaterial\nStatisztika\nMinimum rang\nFrakció Kezelés"
				case 0: return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ, DIALOG_STYLE_LIST, #COL_NARANCS"Pénz "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 1: return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO, DIALOG_STYLE_LIST, #COL_NARANCS"Kokain "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 2: return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO, DIALOG_STYLE_LIST, #COL_NARANCS"Heroin "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 3: return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI, DIALOG_STYLE_LIST, #COL_NARANCS"Marihuana "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 4: return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI, DIALOG_STYLE_LIST, #COL_NARANCS"Material "#COL_SZURKE"kezelés", "Berakás\nKivétel", "Mehet", "Mégse");
				case 5:
				{
					new z = PlayerInfo[playerid][pFrakcio];
					nformat(k, 256, #COL_FEHER"Frakció széf tartalma: \n\n%10s"#COL_VKEK"\t%s$\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d\n"#COL_FEHER"%10s"#COL_VKEK"\t%d", \
					"Pénz:", FormatNumber(FInfo[z][fPenz], 0, '.'), "Kokain:", FInfo[z][fKokain], "Heroin:", FInfo[z][fHeroin], "Marihuana:", FInfo[z][fMarihuana], "Material:", FInfo[z][fMaterial]);
					ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI, DIALOG_STYLE_MSGBOX, #COL_NARANCS"Statisztika", k, "Mehet", "Mégse");
				}
				case 6:
				{
					if(PlayerInfo[playerid][prang] < 10)
						return SCM(playerid, COL_LRED, "Ehhez a funkcióhoz minimum 10-es rang (Leader) szükséges!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_SZEFMN, DIALOG_STYLE_INPUT, "Széf minimum rang", "Kérlek add meg, hogy a frakció tagjaid\nhanyas rangtól vehessenek ki a széfbõl tartalmat.", "Mentés", "Mégse");
				}
				case 7:
				{
					new i = -1, num = 0, form[32], frakciok[512];
			
					for(;++i < MAX_FRAKCIO;)
					{
						if(FInfo[i][fVan])
						{
							format(form, sizeof(form), "%s\n", FInfo[i][fNev]);
							strins(frakciok, form, strlen(frakciok));
							num++;
						}
					}
					
					if(!num)
						return SCM(playerid, COL_MKEK, "Nincs frakció létrehozva!");
					
					ShowPlayerDialog(playerid, DIALOG_FRAKCIO_VALASZTAS, DIALOG_STYLE_LIST, #COL_NARANCS"Frakció "#COL_SZURKE"kezelés", frakciok, "Mehet", "Mégse");
					return true;
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_VALASZTAS:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			PlayerInfo[playerid][pFrakcioKezeles] = listitem;
			ShowPlayerDialog(playerid, DIALOG_FRAKCIO_SZEF_SZERK, DIALOG_STYLE_LIST, #COL_NARANCS"Széf "#COL_SZURKE"kezelés", "Lerak\nTörlés\nÁthelyezés\nTeleportálás", "Mehet", "Mégse");
			return true;
		}
		case DIALOG_FRAKCIO_SZEF_SZERK:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			new fid = FrakcioID(PlayerInfo[playerid][pFrakcioKezeles]);
			//"Lerak\nTörlés\nÁthelyezés"
			switch(listitem)
			{
				case 0:
				{
					if(FInfo[fid][fObjectID])
						return SCM(playerid, COL_LRED, "Egy széf már le van rakva!");
					
					new Float:ppos[3];
					GetPlayerPos(playerid, PosExt(ppos));
					
					FInfo[fid][fSzefPos][0] = ppos[0];
					FInfo[fid][fSzefPos][1] = ppos[1];
					FInfo[fid][fSzefPos][2] = ppos[2];
					FInfo[fid][fVW] = GetPlayerVirtualWorld(playerid);
					FInfo[fid][fInterior] = GetPlayerInterior(playerid);
					FInfo[fid][fObjectID] = CreateDynamicObject(2332, FInfo[fid][fSzefPos][0], FInfo[fid][fSzefPos][1], FInfo[fid][fSzefPos][2]-0.6, 0.0, 0.0, 0.0, FInfo[fid][fVW], FInfo[fid][fInterior]);
					FInfo[fid][fSzefObject] = true;
					FkUpdate(fid, fuSzefObject);
					Streamer_Update(playerid);
					
					EditDynamicObject(playerid, FInfo[fid][fObjectID]);
					return true;
				}
				case 1:
				{
					if(!FInfo[fid][fObjectID])
						return SCM(playerid, COL_LRED, "Nincs lerakva széf!");
					
					FInfo[fid][fSzefPos][0] = 0.0;
					FInfo[fid][fSzefPos][1] = 0.0;
					FInfo[fid][fSzefPos][2] = 0.0;
					FInfo[fid][fSzefPosR][0] = 0.0;
					FInfo[fid][fSzefPosR][1] = 0.0;
					FInfo[fid][fSzefPosR][2] = 0.0;
					FInfo[fid][fVW] = 0;
					FInfo[fid][fInterior] = 0;
					FInfo[fid][fSzefObject] = false;
					FkUpdate(PlayerInfo[playerid][pFrakcio], fuSzefObject);
					
					DestroyDynamicObject(FInfo[fid][fObjectID]);
					FInfo[fid][fObjectID] = 0;
					SCM(playerid, COL_MKEK, "Széf és tartalma sikeresen törölve!");
					return true;
				}
				case 2:
				{
					if(!FInfo[fid][fObjectID])
						return SCM(playerid, COL_LRED, "Nincs lerakva széf!");
					
					/*new Float:ppos[3];
					GetPlayerPos(playerid, PosExt(ppos));
					SetDynamicObjectPos(FInfo[fid][fObjectID], PosExt(ppos));
					
					EditDynamicObject(playerid, FInfo[fid][fObjectID]);
					*/
					
					//----
					DestroyDynamicObject(FInfo[fid][fObjectID]);
					new Float:ppos[3];
					GetPlayerPos(playerid, PosExt(ppos));
					
					FInfo[fid][fSzefPos][0] = ppos[0];
					FInfo[fid][fSzefPos][1] = (ppos[1] + 1.5);
					FInfo[fid][fSzefPos][2] = ppos[2];
					FInfo[fid][fVW] = GetPlayerVirtualWorld(playerid);
					FInfo[fid][fInterior] = GetPlayerInterior(playerid);
					FInfo[fid][fObjectID] = CreateDynamicObject(2332, FInfo[fid][fSzefPos][0], FInfo[fid][fSzefPos][1], FInfo[fid][fSzefPos][2]-0.6, 0.0, 0.0, 0.0, FInfo[fid][fVW], FInfo[fid][fInterior]);
					FkUpdate(fid, fuSzefObject);
					Streamer_Update(playerid);
					
					EditDynamicObject(playerid, FInfo[fid][fObjectID]);
					return true;
				}
				case 3:
				{
					if(!FInfo[fid][fObjectID])
						return SCM(playerid, COL_LRED, "Nincs lerakva széf!");
					
					SetPos(playerid, FInfo[fid][fSzefPos][0], (FInfo[fid][fSzefPos][1] + 1), FInfo[fid][fSzefPos][2]);
					SetVirtualWorld(playerid, FInfo[fid][fVW]);
					SetInterior(playerid, FInfo[fid][fInterior]);
					SFM(playerid, COL_VZOLD, "Sikeresen oda teleportáltál a(z) "#COL_MKEK"%s"#COL_FEHER" frakció széféhez!", FInfo[fid][fNev]);
					return true;
				}
			}
			
			return true;
		}
		case DIALOG_FRAKCIO_PENZ:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1:
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
						SCM(playerid, COL_LRED, "Nincs elegendõ rangod a széfbõl való kivételhez!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_PENZ_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			if(PenzEgyenleg(playerid) < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi pénz!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] += strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuPenz);
			GiveMoney(playerid, -strval(inputtext));
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%s$"#COL_FEHER"-ot a széfbe! Mostani frakció egyenleg: "#COL_MKEK"%s$", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz], 0, '.'));
			
			nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | Pénz: %s$ - Széfben: %s$", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz], 0, '.'));
			Log(FILE_FSZEF, cstr);
			
			return true;
		}
		case DIALOG_FRAKCIO_PENZ_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_PENZ_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Pénz "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi pénz!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] -= strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuPenz);
			GiveMoney(playerid, strval(inputtext));
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s$"#COL_FEHER"-ot a széfbõl! Mostani frakció egyenleg: "#COL_MKEK"%s$", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz], 0, '.'));
			
			nformat(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Pénz: %s$ - Széfben: %s$", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_KOKO:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1:
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
						SCM(playerid, COL_LRED, "Nincs elegendõ rangod a széfbõl való kivételhez!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_KOKO_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			if(PlayerInfo[playerid][pKokain] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi kokain!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			FInfo[PlayerInfo[playerid][pFrakcio]][fKokain] += strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuKokain);
			PlayerInfo[playerid][pKokain] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sg"#COL_FEHER" kokaint a széfbe! Mostani frakció mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fKokain], 0, '.'));
			
			nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | Kokain: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fKokain], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_KOKO_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			if(FInfo[PlayerInfo[playerid][pFrakcio]][fKokain] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi kokain!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			if((PlayerInfo[playerid][pKokain] + strval(inputtext)) > P_MAX_KOKAIN)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_KOKO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Kokain "#COL_SZURKE"kivétel", #COL_NARANCS"Ennyi nem fér el nálad!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			FInfo[PlayerInfo[playerid][pFrakcio]][fKokain] -= strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuKokain);
			PlayerInfo[playerid][pKokain] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%sg"#COL_FEHER" kokaint a széfbõl! Mostani frakció mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fKokain], 0, '.'));
			
			nformat(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Kokain: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fKokain], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_HERO:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1:
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
						SCM(playerid, COL_LRED, "Nincs elegendõ rangod a széfbõl való kivételhez!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_HERO_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			if(PlayerInfo[playerid][pHeroin] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad ennyi heroin!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin] += strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuHeroin);
			PlayerInfo[playerid][pHeroin] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sg"#COL_FEHER" heroint a széfbe! Mostani frakció mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin], 0, '.'));
			
			nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | Heroin: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_HERO_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			if(FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi heroin!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				
			if((PlayerInfo[playerid][pHeroin] + strval(inputtext)) > P_MAX_HEROIN)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_HERO_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Heroin "#COL_SZURKE"kivétel", #COL_NARANCS"Ennyi nem fér el nálad!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin] -= strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuHeroin);
			PlayerInfo[playerid][pHeroin] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%sg"#COL_FEHER" heroint a széfbõl! Mostani frakció mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin], 0, '.'));
			
			nformat(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Heroin: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fHeroin], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_MARI:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1:
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
						SCM(playerid, COL_LRED, "Nincs elegendõ rangod a széfbõl való kivételhez!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_MARI_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			if(PlayerInfo[playerid][pMarihuana] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad marihuana!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana] += strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuMarihuana);
			PlayerInfo[playerid][pMarihuana] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sg"#COL_FEHER" marihuanat a széfbe! Mostani frakció mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana], 0, '.'));
			
			nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | Marihuana: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_MARI_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			if(FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi marihuana!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				
			if((PlayerInfo[playerid][pMarihuana] + strval(inputtext)) > P_MAX_MARIHUANA)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MARI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Marihuana "#COL_SZURKE"kivétel", #COL_NARANCS"Ennyi nem fér el nálad!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana] -= strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuMarihuana);
			PlayerInfo[playerid][pMarihuana] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kitettél "#COL_MKEK"%sg"#COL_FEHER" marihuanat a széfbõl! Mostani frakció mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana], 0, '.'));
			
			nformat(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Marihuana: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fMarihuana], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_MATI:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			switch(listitem)
			{
				case 0:	return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
				case 1:
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefRang] > PlayerInfo[playerid][prang])
						SCM(playerid, COL_LRED, "Nincs elegendõ rangod a széfbõl való kivételhez!");
					else
						ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				}
			}
			return true;
		}
		case DIALOG_FRAKCIO_MATI_B:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			if(PlayerInfo[playerid][pMaterial] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_B, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"berakás", #COL_NARANCS"Nincs nálad !\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél berakni:\n\n", "Mehet", "Mégse");
			
			FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial] += strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuMaterial);
			PlayerInfo[playerid][pMaterial] -= strval(inputtext);
			SFM(playerid, COL_VZOLD, "Betettél "#COL_MKEK"%sdb"#COL_FEHER" materialt a széfbe! Mostani frakció mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial], 0, '.'));
			
			nformat(cstr, 256, "[Be]: [%d]%s | Frakció: [%d]%s | Meterial: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
		case DIALOG_FRAKCIO_MATI_K:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(strval(inputtext) < 1 || strval(inputtext) > MAX_ERTEK)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_NARANCS"Érvényetelen összeg!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			if(FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial] < strval(inputtext))
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_NARANCS"Nincs a széfben ennyi material!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
				
			if((PlayerInfo[playerid][pMaterial] + strval(inputtext)) > P_MAX_MATERIAL)
				return ShowPlayerDialog(playerid, DIALOG_FRAKCIO_MATI_K, DIALOG_STYLE_INPUT, #COL_NARANCS"Material "#COL_SZURKE"kivétel", #COL_NARANCS"Ennyi nem fér el nálad!\n"#COL_FEHER"Írd a lentebbi mezõbe, mennyit szeretnél kivenni:\n\n", "Mehet", "Mégse");
			
			FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial] -= strval(inputtext);
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuMaterial);
			PlayerInfo[playerid][pMaterial] += strval(inputtext);
			SFM(playerid, COL_VZOLD, "Kitettél "#COL_MKEK"%sg"#COL_FEHER" materialt a széfbõl! Mostani frakció mennyiség: "#COL_MKEK"%sg", FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial], 0, '.'));
			
			nformat(cstr, 256, "[Ki]: [%d]%s | Frakció: [%d]%s | Meterial: %sg - Széfben: %sg", playerid, JatekosNev(playerid, false, true), PlayerInfo[playerid][pFrakcio], FInfo[PlayerInfo[playerid][pFrakcio]][fNev], FormatNumber(strval(inputtext), 0, '.'), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fMaterial], 0, '.'));
			Log(FILE_FSZEF, cstr);
			return true;
		}
	    case DIALOG_LOGIN:
	    {
	        if(!response)
				Kick(playerid);
			
			if(strlen(inputtext) < 6 || strlen(inputtext) > 24)
			{
				if(PlayerInfo[playerid][probalkozasok] == MAX_PROBALKOZASOK) {
					Kapcsolodasok(playerid, 3, "Hibás jelszó!");
					Kick(playerid);
				}
					
				PlayerInfo[playerid][probalkozasok]++;
				format(uzenet, sizeof(uzenet), #COL_NARANCS"Hibás jelszó!\n"#COL_FEHER"Hátralévõ próbálkozások száma: %d/%d\nKérlek írd be a lentebbi mezõbe a jelszót!", PlayerInfo[playerid][probalkozasok], MAX_PROBALKOZASOK);
				ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Bejelentkezés", uzenet, "Belépés", "Mégse");
				SCM(playerid, COL_LRED, "Érvénytelen jelszó!");
				return true;
			}
			
			nformat(queryc, 256, "SELECT * FROM `"#MYSQL_JATEKOS_TABLA"` WHERE nev = '%s' AND jelszo = '%s'", JatekosNev(playerid), MD5_Hash(inputtext));
			//mysql_function_query(sql_ID, queryc, true, "AdatBetoltes", "i", playerid);
			mysql_tquery(sql_ID, queryc, "AdatBetoltes", "i", playerid);
			return true;
	    }
	    case DIALOG_REGISTER:
	    {
	        if(!response)
				return Kick(playerid);
				
	        nformat(qry, 1024, "INSERT INTO `"#MYSQL_JATEKOS_TABLA"`(nev, jelszo, penz, halal, admin, bank, bankszamla, bankszamlapin, posx, posy, posz, angle) VALUES('%s', '%s', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0')", JatekosNev(playerid), MD5_Hash(inputtext));
			//mysql_function_query(sql_ID, qry, false, "", "");
			mysql_tquery(sql_ID, qry, "", "");
			
	        SCM(playerid, COL_MKEK, "Kérlek add meg a nemed!");
			ShowPlayerDialog(playerid, DIALOG_NEM, DIALOG_STYLE_LIST, "Nem", "Férfi\nNõ", "Mehet", "Mégse");
	        return true;
	    }
		case DIALOG_NEM:
		{
			if(!response)
				return Kick(playerid);
				
			nformat(quey, 256, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pnem = '%d' WHERE nev = '%s'", listitem + 1, JatekosNev(playerid));
			//mysql_function_query(sql_ID, quey, false, "", "");
			mysql_tquery(sql_ID, quey, "", "");
			
			SFM(playerid, COL_MKEK, "Szóval "#COL_MKEK"%s"#COL_FEHER" vagy!", NemVizsgalat(listitem + 1));
			SCM(playerid, COL_MKEK, "Kérlek add meg az életkorod!");
			
			ShowPlayerDialog(playerid, DIALOG_ELETKOR, DIALOG_STYLE_INPUT, "Életkor", "Kérlek írd a lentebbi mezõbe az életkorod! (18 - 80)", "Mehet", "Mégse");
			return true;
		}
		case DIALOG_ELETKOR:
		{
			if(!response)
				return Kick(playerid);
			
			if(18 > strval(inputtext) || strval(inputtext) > 80)
				return ShowPlayerDialog(playerid, DIALOG_ELETKOR, DIALOG_STYLE_INPUT, "Életkor", "Hibás életkort adtál meg (18 - 80)! Próbáld újra!", "Mehet", "Mégse");
			
			SFM(playerid, COL_MKEK, "Szóval "#COL_MKEK"%d"#COL_FEHER" éves vagy!", strval(inputtext));
			SCM(playerid, COL_MKEK, "Kérlek add meg a származásod!");
			nformat(qary, 256, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET peletkor = '%d' WHERE nev = '%s'", strval(inputtext), JatekosNev(playerid));
			//mysql_function_query(sql_ID, qary, false, "", "");
			mysql_tquery(sql_ID, qary, "", "");
			ShowPlayerDialog(playerid, DIALOG_SZARMAZAS, DIALOG_STYLE_LIST, "Származás", "USA\nEurópa\nÁzsia", "Mehet", "Mégse");
			return true;
		}
		case DIALOG_SZARMAZAS:
		{
			if(!response)
				return Kick(playerid);
			PlayerInfo[playerid][pszarmazas] = listitem + 1;
			
			SFM(playerid, COL_MKEK, "Szóval "#COL_MKEK"%s"#COL_FEHER" származású vagy!", Szarmazas(listitem + 1));
			SCM(playerid, COL_MKEK, "Sikeresen regisztráltál!");
			SCM(playerid, COL_MKEK, "Kérlek jelentkezz be!");
			
			nformat(queryr, 256, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pszarmazas = '%d' WHERE nev = '%s'", listitem + 1, JatekosNev(playerid));
			//mysql_function_query(sql_ID, queryr, false, "", "");
			mysql_tquery(sql_ID, queryr, "", "");
			ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, "Bejelentkezés", #COL_FEHER"Ez a név már regisztrálva van!\n\nKérlek írd be a lentebbi mezõbe a jelszót!", "Belépés", "Mégse");
			return true;
		}
	    case DIALOG_TELEPORTOK:
	    {
	        if(!response) return false;
	        new teleportciklus = -1, tid = 0;
			for(;++teleportciklus < MAX_TELEPORT;)
			{
			    if(TPInfo[teleportciklus][tphasznalva] && TPInfo[teleportciklus][listid] == listitem)
			    {
			        tid = teleportciklus;
			        break;
			    }
			}
			
			if(!strlen(TPInfo[tid][tpnev]))
				return SCM(playerid, COL_LRED, "Hiba történt a teleport betöltése során!");
			
			if(IsPlayerInAnyVehicle(playerid))
			{
			    new vehicleid = GetPlayerVehicleID(playerid);

			    SetVehiclePos(vehicleid, TPInfo[tid][tposx], TPInfo[tid][tposy], TPInfo[tid][tposz]);
			    SetVehicleZAngle(vehicleid, TPInfo[tid][tangle]);
				
				LinkVehicleToInterior(vehicleid, TPInfo[tid][tinterior]);
				SetVehicleVirtualWorld(vehicleid, TPInfo[tid][tvw]);
				
				SetVirtualWorld(playerid, TPInfo[tid][tvw]);
				SetInterior(playerid, TPInfo[tid][tinterior]);
			    return true;
				
			} else {
			    SetPos(playerid, TPInfo[tid][tposx], TPInfo[tid][tposy], TPInfo[tid][tposz], TPInfo[tid][tangle]);
				SetVirtualWorld(playerid, TPInfo[tid][tvw]);
				SetInterior(playerid, TPInfo[tid][tinterior]);
			}
			SFM(playerid, COL_MKEK, "Sikeresen elteleportáltál ide: "#COL_MKEK"%s", TPInfo[tid][tpnev]);
	        return true;
	    }
	    case DIALOG_GPSEK:
	    {
			if(!response) return false;
	        new GPSCiklus = -1, tid = 0;
			for(;++GPSCiklus < MAXGPS;)
			{
			    if(GPSInfo[GPSCiklus][gHasznalva] && GPSInfo[GPSCiklus][listid] == listitem)
			    {
			        tid = GPSCiklus;
			        break;
			    }
			}
			if(!strlen(GPSInfo[tid][gnev]))
			{
				SendClientMessage(playerid, 0xff6347AA, "Hiba történt a GPS betöltése során!");
				return 1;
			}
			SetPlayerCheckpoint(playerid, GPSInfo[tid][gposx], GPSInfo[tid][gposy], GPSInfo[tid][gposz], 3.0);
			SendFormatMessage(playerid, 0x1d92ffAA, "Sikeresen elindult a tervezés ide: "#COL_MKEK"%s", GPSInfo[tid][gnev]);
	        return true;
		}
		case DIALOG_BENZINKUTAK:
		{
			if(!response) return false;
	        new benzinkutciklus = 0, visszateres = 0;
				
			for(;++benzinkutciklus < MAX_BENZINKUT;)
			{
			    if(BenzinkutInfo[benzinkutciklus][blistitem] == listitem)
			    {
			        visszateres = benzinkutciklus;
			        break;
			    }
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    new vehicleid = GetPlayerVehicleID(playerid);
			    SetVehiclePos(vehicleid, BenzinkutInfo[visszateres][bposx], BenzinkutInfo[visszateres][bposy], BenzinkutInfo[visszateres][bposz]);
			} else
				SetPlayerPos(playerid, BenzinkutInfo[visszateres][bposx], BenzinkutInfo[visszateres][bposy] + 1.0, BenzinkutInfo[visszateres][bposz]);
			SFM(playerid, COL_MKEK, "Sikeresen elteleportáltál ide: "#COL_MKEK"%s", BenzinkutInfo[visszateres][bnev]);
	        return true;
		}
		case DIALOG_ELADAS:
		{
			if(!response)
			{
				Cselekves(playerid, "elutasította az adásvételi szerzõdést");
				PlayerInfo[playerid][peladojarmu] = 0;
				PlayerInfo[playerid][peladokitol] = NINCS;
				PlayerInfo[playerid][pMegerosites] = NINCS;
				return false;
			}
			
			if(PenzEgyenleg(playerid) >= vInfo[PlayerInfo[playerid][peladojarmu]][vAr])
			{
				new db = Adat_Num( playerid, ADAT_JARMU ), vid = PlayerInfo[playerid][peladojarmu];
				if(!db || ((db + 1) <= MAX_HAZ_JARMU && PlayerInfo[playerid][pPremiumPont] >= PremiumPontKell[ADAT_JARMU - 1][1]))
				{
					if(db != 0)
					{
						if(PlayerInfo[playerid][pMegerosites] != playerid)
						{
							PlayerInfo[playerid][pMegerosites] = playerid;
							nformat(str, 128, ""#COL_FEHER"Biztos, hogy "#COL_MKEK"%d."#COL_FEHER" jármûre szeretnéd költeni a Prémium Pontod?\nHa igen kattints az igen gombra!", (db + 1));
							ShowPlayerDialog(playerid, DIALOG_ELADAS, DIALOG_STYLE_MSGBOX, "Adásvételi szerzõdés", str, "Igen", "Mégse");
							return true;
						}
						
						PlayerInfo[playerid][pMegerosites] = NINCS;
						PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_JARMU - 1][1];
						nformat(str, 128, "[Jármû]: %s | %s - %d[%d] | %s$ | Maradék PP: %d", JatekosNev(playerid), VehicleNames[ vInfo[vid][vModel] - 400 ], vInfo[vid][vID], vid, FormatNumber(vInfo[vid][vAr], 0, ','), PlayerInfo[playerid][pPremiumPont]);
						Log(FILE_PREMIUM, str);
					}
					
					new msgbox[256];
					format(vInfo[PlayerInfo[playerid][peladojarmu]][vTulaj], MAX_PLAYER_NAME, JatekosNev(playerid));
					GiveMoney(playerid, -vInfo[PlayerInfo[playerid][peladojarmu]][vAr]);
					GiveMoney(PlayerInfo[playerid][peladokitol], vInfo[PlayerInfo[playerid][peladojarmu]][vAr]);
					
					format(vInfo[PlayerInfo[playerid][peladojarmu]][vTulaj], MAX_PLAYER_NAME, JatekosNev(playerid));
					vInfo[PlayerInfo[playerid][peladojarmu]][vTulajID] = PlayerInfo[playerid][pID];
					Adat_Update( playerid, ADAT_JARMU );
					
					vUpdate(PlayerInfo[playerid][peladojarmu], vuTulaj);
					doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET Tulaj = '%s', TulajID = '%d'  WHERE ID = '%d'", JatekosNev(playerid, false, true),PlayerInfo[playerid][pID], PlayerInfo[playerid][peladojarmu]);
					
					Cselekves(playerid, "aláírta az adásvételi szerzõdést");
					SendFormatMessage(PlayerInfo[playerid][peladokitol], COLOR_WHITE, "Sikeresen eladtad a(z) "#COL_VKEK"%s "#COL_FEHER"típusú jármûved "#COL_VKEK"%s "#COL_FEHER"$-ért %s-nak/nek!", VehicleNames[GetVehicleModel(vInfo[PlayerInfo[playerid][peladojarmu]][vID])-400], FormatNumber(vInfo[PlayerInfo[playerid][peladojarmu]][vAr], 0, '.'), JatekosNev(playerid));
					
					format(msgbox, sizeof(msgbox), "Sikeresen megvetted %s jármûvét.\nTípus: %s Rendszám: %d\nHasználd egészséggel!", JatekosNev(PlayerInfo[playerid][peladokitol]), VehicleNames[GetVehicleModel(vInfo[PlayerInfo[playerid][peladojarmu]][vID])-400], PlayerInfo[playerid][peladojarmu]);
					ShowPlayerDialog(playerid, DIALOG_ELADAS2, DIALOG_STYLE_MSGBOX, "Sikeres vásárlás", msgbox, "OK", "");
					PlayerInfo[playerid][peladojarmu] = 0;
					PlayerInfo[playerid][peladokitol] = NINCS;
				}
			} else
				SCM(playerid, COL_LRED, "Nincs ennyi pénzed!");
				
			return true;
		}
		case DIALOG_KAPU_STATISZTIKA:
		{
		    if(!response)
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			switch(listitem)
			{
			    case 0:
			    {
			        KapuID[playerid] = UjKapuID();
			        Kapu[KapuID[playerid]][kVan] = true;
			        Kapu[KapuID[playerid]][kSzerkeszt] = true;
			        ShowPlayerDialog(playerid, DIALOG_KAPU_NEV, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", "Kérlek add meg az alábbi mezõbe\na kapu nevét!", "Mehet!", "Mégse!");
			        return true;
			    }
			    case 1:
			    {
					new kapuidje = GetClosestKapu(playerid);
					if(GetDistanceToKapu(playerid, kapuidje) < 15.0)
					{
					    KapuID[playerid] = kapuidje;
					    ShowPlayerDialog(playerid, DIALOG_KAPU_SZERKESZTES, DIALOG_STYLE_LIST, #COL_FEHER"Kapu "#COL_VKEK"szerkesztés", "Kapu pozíciójának modosítása\nKapu nevének módosítása\nKapu sebességének módosítása\nKapu jelszavának módosítása\nKapu frakciójának módosítása\nKapu nyitási távolságának modosítása\nKapu debugolása\nKapu végleges törlése", "Mehet!", "Mégse!");
					    return true;
					}
					return SCM(playerid, COL_LRED, "Nincs a közeledben kapu! Legalább 15 koordinátára kell, hogy legyen!");
			    }
			    case 2:
				{
				    new id = GetClosestKapu(playerid);
					if(GetDistanceToKapu(playerid, id) < 15.0)
					{
					    new info[512], hpw[64];
					    new Float:tav = Kapu[id][kTav], Float:seb = Kapu[id][kSpeed], md = Kapu[id][kModel], bool:mg = Kapu[id][kMozgo];

			  			format(info, sizeof(info), ""#COL_FEHER"Kapu ID: "#COL_VKEK"%d"#COL_FEHER"\nKapu Model ID: "#COL_VKEK"%d \n"#COL_FEHER"Kapu neve:"#COL_VKEK" %s \n", id, md, Kapu[id][kNev]);
			  			format(info, sizeof(info), "%s"#COL_FEHER"Nyitási távolság:"#COL_VKEK" %.1fm "#COL_FEHER"\nNyitási sebesség:"#COL_VKEK" %.1f \n",info, tav, seb);
			  			format(info, sizeof(info), "%s"#COL_FEHER"Rotációs nyitás aktív: "#COL_VKEK"%s \n",info, (mg == true ? ("Nem") : ("Igen")));

			  			if(Kapu[id][kHasznalo][0] == 0)
							format(hpw,sizeof(hpw), ""#COL_FEHER"Kapu nyitási jelszava: "#COL_VKEK"%d", Kapu[id][kKod]);
			  			else
						{
			  			   	new i = -1, num = GetHasznaloNum(id);
							for(;++i < MAX_KAPU_HASZNALO;)
							{
							    if(Kapu[id][kHasznalo][i] > 0)
							    {
									format(hpw, sizeof(hpw), "%s%d%s", hpw, Kapu[id][kHasznalo][i], (num > i + 1 ? (",") : ("")));
							    }
							}
							format(hpw,sizeof(hpw), ""#COL_FEHER"Kaput használó frakció(k): "#COL_VKEK"%s",hpw);
			  			}
			  			format(info, sizeof(info), "%s%s",info, hpw);
			  			format(info, sizeof(info), "%s\n"#COL_FEHER"Szerkesztés alatt: "#COL_VKEK"%s",info, (Kapu[id][kSzerkeszt] == true ? ("Igen") : ("Nem")));
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, #COL_FEHER"Kapu"COL_VKEK" részletes információi:", info, "Rendben", "");
						return true;
					}
					return SCM(playerid, COL_LRED, "Nincs a közeledben kapu! Legalább 15 koordinátára kell, hogy legyen!");
				}
			}
			return true;
		}
		case DIALOG_KAPU_NEV:
		{
		    if(!response)
		    {
		        Kapu[KapuID[playerid]][kVan] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				Kapu[KapuID[playerid]][kSzerkeszt] = false;
				KapuID[playerid] = NINCS;
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
		    }

		    if(strlen(inputtext) < 1 || strlen(inputtext) > 32)
		        return ShowPlayerDialog(playerid, DIALOG_KAPU_NEV, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", "Kérlek add meg az alábbi mezõbe\na kapu nevét!", "Mehet!", "Mégse!");

			format(Kapu[KapuID[playerid]][kNev], 32, inputtext);
		    ShowPlayerDialog(playerid, DIALOG_KAPU_MODEL, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"model", "Kérlek add meg az alábbi mezõbe\na kapu model ID-jét!\nPl: 980, 1495, 18755, 14856, 973, 8378", "Mehet!", "Mégse!");
		    return true;
		}
		case DIALOG_KAPU_NEV_SZERKESZTES:
		{
		    if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			new formatocska[256];
			format(formatocska, 256, "Kérlek add meg az alábbi mezõbe\na kapu nevét! Jelenlegi: %s", Kapu[KapuID[playerid]][kNev]);

		    if(strlen(inputtext) < 5 || strlen(inputtext) > 32)
		        return ShowPlayerDialog(playerid, DIALOG_KAPU_NEV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", formatocska, "Mehet!", "Mégse!");

			format(Kapu[KapuID[playerid]][kNev], 32, inputtext);
			nformat(querycske, 128, "UPDATE `"#MYSQL_KAPU_TABLA"` SET Nev = '%s' WHERE ID = '%d'", Kapu[KapuID[playerid]][kNev], KapuID[playerid]);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");
			SFM(playerid, COL_MKEK, "A kapu neve a következõ lett: "#COL_MKEK"%s!", Kapu[KapuID[playerid]][kNev]);
		    return true;
		}
		case DIALOG_KAPU_SZERKESZTES:
		{
		    if(!response) {
		        Kapu[KapuID[playerid]][kSzerkeszt] = false;
		        SzerkesztesAllas[playerid] = 0;
				KapuID[playerid] = NINCS;
				SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
				return true;
			}

		    switch(listitem)
		    {
		        case 0:
				{
				    if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

				    ShowPlayerDialog(playerid, DIALOG_KAPU_POZICIO, DIALOG_STYLE_LIST, #COL_FEHER"Kapu "#COL_VKEK"mozgatása", "Zárt pozició\nNyitott pozició", "Mehet!", "Mégse!");
		            return true;
		        }
		        case 1:
		        {
		            if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

	                new formatocska[256];
					format(formatocska, 256, "Kérlek add meg az alábbi mezõbe\na kapu nevét! Jelenlegi: %s", Kapu[KapuID[playerid]][kNev]);

					ShowPlayerDialog(playerid, DIALOG_KAPU_NEV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"név", formatocska, "Mehet!", "Mégse!");
		            return true;
		        }
		        case 2:
		        {
		            if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

					Kapu[KapuID[playerid]][kSzerkeszt] = true;
	                ShowPlayerDialog(playerid, DIALOG_KAPU_SEBESSEG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"sebesség állítás", "Írd a lentebbi mezõbe a kapu gyorsaságát! (min 1, max 15)\n"#COL_NARANCS"Ha az érték 0 a kapu rotációs nyitást fog végezni!", "Mehet!", "Mégse!");
		            return true;
		        }
		        case 3:
		        {
		            if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

	                ShowPlayerDialog(playerid, DIALOG_KAPU_KOD_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");
	                return true;
		        }
		        case 4:
		        {
		            if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

		            ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO_SZERK, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
		            return true;
		        }
		        case 5:
		        {
		            if(Kapu[KapuID[playerid]][kSzerkeszt])
				        return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

					ShowPlayerDialog(playerid, DIALOG_KAPU_TAV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi mezõbe, hogy \nmilyen messzirõl használhassák a kaput! (min 1, max 15)", "Mehet!", "Mégse!");
		            return true;
		        }
		        case 6:
		        {
		            Kapu[KapuID[playerid]][kSzerkeszt] = false;
		            SCM(playerid, COL_MKEK, "A közeledben lévõ kapu szerkesztési folyamata alap helyzetbe állítva!");
		            return true;
		        }
		        case 7:
		        {
					if(Kapu[KapuID[playerid]][kSzerkeszt])
						return SCM(playerid, COL_LRED, "Ezt a kaput jelenleg már szerkesztik!");

		            nformat(querycske, 128, "DELETE FROM `"#MYSQL_KAPU_TABLA"` WHERE ID = '%d'", KapuID[playerid]);
					//mysql_function_query(sql_ID, querycske, false, "", "");
					mysql_tquery(sql_ID, querycske, "", "");
		            
		            AdminUzenet(COLOR_LIGHTRED,1, "%s törölt egy kaput! Obj: %d | Folyamat: DKSZ | SQLID: %d", JatekosNev(playerid),Kapu[KapuID[playerid]][kModel], KapuID[playerid]);

		            Kapu[KapuID[playerid]][kVan] = false;
		            Kapu[KapuID[playerid]][kSzerkeszt] = false;
					Kapu[KapuID[playerid]][kModel] = 0;
					Kapu[KapuID[playerid]][kTav] = 0.0;
					Kapu[KapuID[playerid]][kSpeed] = 0.0;
					Kapu[KapuID[playerid]][kPos][0] = 0.0;
					Kapu[KapuID[playerid]][kPos][1] = 0.0;
					Kapu[KapuID[playerid]][kPos][2] = 0.0;
					Kapu[KapuID[playerid]][kNPos][0] = 0.0;
					Kapu[KapuID[playerid]][kNPos][1] = 0.0;
					Kapu[KapuID[playerid]][kNPos][2] = 0.0;
					Kapu[KapuID[playerid]][kNRPos][0] = 0.0;
					Kapu[KapuID[playerid]][kNRPos][1] = 0.0;
					Kapu[KapuID[playerid]][kNRPos][2] = 0.0;
					Kapu[KapuID[playerid]][kZPos][0] = 0.0;
					Kapu[KapuID[playerid]][kZPos][1] = 0.0;
					Kapu[KapuID[playerid]][kZPos][2] = 0.0;
					Kapu[KapuID[playerid]][kZRPos][0] = 0.0;
					Kapu[KapuID[playerid]][kZRPos][1] = 0.0;
					Kapu[KapuID[playerid]][kZRPos][2] = 0.0;
					Kapu[KapuID[playerid]][kMozgo] = false;
					Kapu[KapuID[playerid]][kNyit] = false;
					Kapu[KapuID[playerid]][kVW] = NINCS;
					Kapu[KapuID[playerid]][kKod] = -1;
					DestroyDynamicObject(Kapu[KapuID[playerid]][kOID]);

					SzerkesztesAllas[playerid] = 0;
					KapuID[playerid] = NINCS;

		            SCM(playerid, COL_MKEK, "Közeledben lévõ kapu sikeresen törölve!");
		            return true;
		        }
		    }
		    return true;
		}
		case DIALOG_KAPU_TAV_SZERKESZTES:
		{
		    if(!response)
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			if((strval(inputtext) < 1 || strval(inputtext) > 15) || !IsNumeric(inputtext))
			    return ShowPlayerDialog(playerid, DIALOG_KAPU_TAV_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi mezõbe, hogy milyen messzirõl használhassák a kaput! (min 1, max 15)", "Mehet!", "Mégse!");

			Kapu[KapuID[playerid]][kTav] = float(strval(inputtext));
			Kapu[KapuID[playerid]][kSzerkeszt] = false;
			SFM(playerid, COL_MKEK, "[Info]: Kapu távolsága átírva erre: "#COL_MKEK"%d", strval(inputtext));
			nformat(querycske, 128, "UPDATE `"#MYSQL_KAPU_TABLA"` SET Tav = '%f' WHERE ID = '%d'", Kapu[KapuID[playerid]][kTav], KapuID[playerid]);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");
			KapuID[playerid] = NINCS;
			return true;
		}
		case DIALOG_KAPU_SEBESSEG:
		{
		    if(!response)
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			if((strval(inputtext) < 0 || strval(inputtext) > 15) || !IsNumeric(inputtext))
			    return ShowPlayerDialog(playerid, DIALOG_KAPU_SEBESSEG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"sebesség állítás", "Írd a lentebbi mezõbe a kapu gyorsaságát! (min 1, max 15)\n"#COL_NARANCS"Ha az érték 0 a kapu rotációs nyitást fog végezni!", "Mehet!", "Mégse!");

			if(float(strval(inputtext)) == 0.0) {
			    Kapu[KapuID[playerid]][kMozgo] = false;
			    Kapu[KapuID[playerid]][kSpeed] = 0.0;
			    SCM(playerid, COL_MKEK, "Kapu sebessége 0-ra állítva, rotációs nyitása bekapcsolva!");
			} else {
				Kapu[KapuID[playerid]][kMozgo] = true;
				Kapu[KapuID[playerid]][kSpeed] = float(strval(inputtext));
				SFM(playerid, COL_MKEK, "Kapu sebessége átírva erre: "#COL_MKEK"%d", strval(inputtext));
			}

			Kapu[KapuID[playerid]][kSzerkeszt] = false;
			nformat(querycske, 128, "UPDATE `"#MYSQL_KAPU_TABLA"` SET Speed = '%f' WHERE ID = '%d'", Kapu[KapuID[playerid]][kSpeed], KapuID[playerid]);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");
			KapuID[playerid] = NINCS;
			return true;
		}
		case DIALOG_KAPU_KOD_SZERKESZTES:
		{
		    if(!response)
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			if((strlen(inputtext) < 3 || strlen(inputtext) > 6) || !IsNumeric(inputtext))
			    return ShowPlayerDialog(playerid, DIALOG_KAPU_KOD_SZERKESZTES, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");

			Kapu[KapuID[playerid]][kKod] = strval(inputtext);

			SFM(playerid, COL_MKEK, "A kapu jelszava a következõ lett: "#COL_MKEK"%d", strval(inputtext));

			new i = -1;
			for(;++i < MAX_KAPU_HASZNALO;)
				Kapu[KapuID[playerid]][kHasznalo][i] = 0;
				
			return true;
		}
		case DIALOG_KAPU_FRAKCIO_SZERK:
		{
		    if(!response)
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

			new valamicske = NumCharacter(inputtext, ','), formatsscanf[16];

			if((valamicske + 1 < 0) || (valamicske + 1 > MAX_KAPU_HASZNALO))
			    return ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO_SZERK, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");

			format(formatsscanf, sizeof(formatsscanf), "p<,>a<i>[%d]", valamicske + 1);
			sscanf(inputtext, formatsscanf, Kapu[KapuID[playerid]][kHasznalo]);
			new i = -1;
			for(;++i < MAX_KAPU_HASZNALO;)
			{
			    if(Kapu[KapuID[playerid]][kHasznalo][i] > MAX_FRAKCIO)
			    {
			        SFM(playerid, COL_MKEK, "A frakció száma minimum 1 és maximum %d lehet!", MAX_FRAKCIO);
			        ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO_SZERK, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
			        break;
			    }
			}

			Kapu[KapuID[playerid]][kSzerkeszt] = false;

			if(Kapu[KapuID[playerid]][kKod] != -1)
			    Kapu[KapuID[playerid]][kKod] = -1;

			nformat(querycske, 128, "UPDATE `"#MYSQL_KAPU_TABLA"` SET Hasznalo = '%s', Kod = '-1' WHERE ID = '%d'", inputtext, KapuID[playerid]);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");
			KapuID[playerid] = -1;
			SFM(playerid, COL_MKEK, "A kaput a következõ szervezetek használhatják: %s", inputtext);
			return true;
		}
		case DIALOG_KAPU_POZICIO:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");

		    switch(listitem)
		    {
		        case 0:
		        {
					SzerkesztesAllas[playerid] = 3;
					Kapu[KapuID[playerid]][kSzerkeszt] = true;
		            SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2]);
		            SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2]);
		            EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
		            return true;
		        }
		        case 1:
		        {
					SzerkesztesAllas[playerid] = 4;
					Kapu[KapuID[playerid]][kSzerkeszt] = true;
		            SetDynamicObjectPos(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kNPos][0], Kapu[KapuID[playerid]][kNPos][1], Kapu[KapuID[playerid]][kNPos][2]);
		            SetDynamicObjectRot(Kapu[KapuID[playerid]][kOID], Kapu[KapuID[playerid]][kNRPos][0], Kapu[KapuID[playerid]][kNRPos][1], Kapu[KapuID[playerid]][kNRPos][2]);
		            EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
		            return true;
		        }
		    }
			return true;
		}
		case DIALOG_KAPU_MODEL:
		{
		    if(!response)
		    {
		        Kapu[KapuID[playerid]][kVan] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				Kapu[KapuID[playerid]][kSzerkeszt] = false;
				KapuID[playerid] = NINCS;
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
			}

			if(!IsNumeric(inputtext))
			{
			    SCM(playerid, COL_LRED, "A Model ID csak szám lehet! Pl: 980, 1495, 18755, 14856, 973, 8378");
			    ShowPlayerDialog(playerid, DIALOG_KAPU_MODEL, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"model", "Kérlek add meg az alábbi mezõbe\na kapu Model ID-jét!\nPl: 980, 1495, 18755, 14856, 973, 8378", "Mehet!", "Mégse!");
			    return true;
			}

			Kapu[KapuID[playerid]][kModel] = strval(inputtext);
			ShowPlayerDialog(playerid, DIALOG_KAPU_TAVOLSAG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi\na kapu nyitási távolságát!", "Mehet!", "Mégse!");
			
			return true;
		}
		case DIALOG_KAPU_TAVOLSAG:
		{
		    if(!response)
		    {
		        Kapu[KapuID[playerid]][kVan] = false;
		        Kapu[KapuID[playerid]][kSzerkeszt] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				KapuID[playerid] = -1;
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
			}

			if(!IsNumeric(inputtext) || (strval(inputtext) < 0 || strval(inputtext) > 15))
			{
			    SCM(playerid, COL_LRED, "A távolságnak számban megadott értéknek kell lennie! (1-15 koordináta)");
			    ShowPlayerDialog(playerid, DIALOG_KAPU_TAVOLSAG, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"távolság", "Kérlek add meg az alábbi\na kapu nyitási távolságát!", "Mehet!", "Mégse!");
			    return true;
			}

			Kapu[KapuID[playerid]][kTav] = float(strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_KAPU_VALASZTAS, DIALOG_STYLE_LIST, #COL_FEHER"Kapu "#COL_VKEK"titkosítás", "Frakció megadása\nKód megadása", "Mehet!", "Mégse!");
			
			return true;
		}
		case DIALOG_KAPU_VALASZTAS:
		{
		    if(!response)
		    {
		        Kapu[KapuID[playerid]][kVan] = false;
		        Kapu[KapuID[playerid]][kSzerkeszt] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				KapuID[playerid] = -1;
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
			}
			switch(listitem)
			{
			    case 0:
			    {
			        return ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
			    }
			    case 1:
			    {
					return ShowPlayerDialog(playerid, DIALOG_KAPU_KOD, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");
			    }
			}
			
			return true;
		}
		case DIALOG_KAPU_KOD:
		{
		    if(!response)
		    {
				Kapu[KapuID[playerid]][kVan] = false;
				Kapu[KapuID[playerid]][kSzerkeszt] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				KapuID[playerid] = -1;
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
			}

			if((strlen(inputtext) < 3 || strlen(inputtext) > 6) || !IsNumeric(inputtext))
			    return ShowPlayerDialog(playerid, DIALOG_KAPU_KOD, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"kód", "Kérlek add meg az alábbi mezõbe a kapu titkos jelszavát!\n"#COL_NARANCS"FIGYELEM! A kód minimum 3 és maximum 6 számjegy között állhat!", "Mehet!", "Mégse!");

			Kapu[KapuID[playerid]][kKod] = strval(inputtext);

			new Float:playerposok[3];
			GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);

			Kapu[KapuID[playerid]][kZPos][0] = playerposok[0] + 1.0;
			Kapu[KapuID[playerid]][kZPos][1] = playerposok[1] + 1.0;
			Kapu[KapuID[playerid]][kZPos][2] = playerposok[2] + 1.0;
			Kapu[KapuID[playerid]][kVW] = GetPlayerVirtualWorld(playerid);
			Kapu[KapuID[playerid]][kSpeed] = 3.0;

			Kapu[KapuID[playerid]][kOID] = CreateDynamicObject(Kapu[KapuID[playerid]][kModel], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2], GetPlayerVirtualWorld(playerid));
			Streamer_Update(playerid);
			SzerkesztesAllas[playerid] = 1;
			EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
			SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
			SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");
			SendClientMessage(playerid, COLOR_NAR,    "Elõször a kapu zárt, majd nyitott állapotát kell elmentened!");
			return true;
		}
		case DIALOG_KAPU_FRAKCIO:
		{
		    if(!response)
		    {
				Kapu[KapuID[playerid]][kVan] = false;
				Kapu[KapuID[playerid]][kSzerkeszt] = false;
				Kapu[KapuID[playerid]][kTav] = 0.0;
				Kapu[KapuID[playerid]][kModel] = 0;
				KapuID[playerid] = -1;
		        return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületrõl!");
			}

			new valamicske = NumCharacter(inputtext, ','), formatsscanf[16];
			if((valamicske + 1 < 0) || (valamicske + 1 > MAX_KAPU_HASZNALO))
			{
			    MEGISCSAKVISSZAJOVUNKIDEHALLODE:
			    ShowPlayerDialog(playerid, DIALOG_KAPU_FRAKCIO, DIALOG_STYLE_INPUT, #COL_FEHER"Kapu "#COL_VKEK"elérhetõség", "Kérlek add meg az alábbi mezõbe, hogy kik használhassák a kaput!\nHa több frakciót akarsz megadni, akkor válaszd el vesszõvel!\n[Frakciók]: 1..22 PL: 1,2,3,4,5 "#COL_NARANCS"FIGYELEM! Szóköz nem szerepelhet!", "Mehet!", "Mégse!");
			    return true;
			}

			format(formatsscanf, sizeof(formatsscanf), "p<,>a<i>[%d]", valamicske + 1);
			sscanf(inputtext, formatsscanf, Kapu[KapuID[playerid]][kHasznalo]);
			new i = -1;
			for(;++i < MAX_KAPU_HASZNALO;)
			{
			    if(Kapu[KapuID[playerid]][kHasznalo][i] > MAX_FRAKCIO)
			    {
			        SFM(playerid, COL_LRED, "A frakció száma minimum 1 és maximum %d lehet!", MAX_FRAKCIO);
			        goto MEGISCSAKVISSZAJOVUNKIDEHALLODE;
			        break;
			    }
			}

			new Float:playerposok[3];
			GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);

			Kapu[KapuID[playerid]][kZPos][0] = playerposok[0] + 1.0;
			Kapu[KapuID[playerid]][kZPos][1] = playerposok[1] + 1.0;
			Kapu[KapuID[playerid]][kZPos][2] = playerposok[2] + 1.0;
			Kapu[KapuID[playerid]][kVW] = GetPlayerVirtualWorld(playerid);
			Kapu[KapuID[playerid]][kSpeed] = 3.0;
			Kapu[KapuID[playerid]][kKod] = -1;

			Kapu[KapuID[playerid]][kOID] = CreateDynamicObject(Kapu[KapuID[playerid]][kModel], Kapu[KapuID[playerid]][kZPos][0], Kapu[KapuID[playerid]][kZPos][1], Kapu[KapuID[playerid]][kZPos][2], Kapu[KapuID[playerid]][kZRPos][0], Kapu[KapuID[playerid]][kZRPos][1], Kapu[KapuID[playerid]][kZRPos][2], GetPlayerVirtualWorld(playerid));
			Streamer_Update(playerid);
			SzerkesztesAllas[playerid] = 1;
			EditDynamicObject(playerid, Kapu[KapuID[playerid]][kOID]);
			SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
			SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");
			SendClientMessage(playerid, COLOR_NAR,    "Elõször a kapu zárt, majd nyitott állapotát kell elmentened!");
			return true;
		}
		case DIALOG_BUTOR_TORLES:
		{
			if(!response)
			{
				PlayerInfo[playerid][pSzButor] = NINCS;
				return SCM(playerid, COL_MKEK, "Bútor törlése visszavonva!");
			}

			new butorszam = PlayerInfo[playerid][pSzButor];

			new querycske[1024];
			format(querycske, sizeof(querycske), "DELETE FROM `butorok` WHERE id = '%d'", butorszam);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");

			ButorInfo[butorszam][butorPosX] = 0.0;
			ButorInfo[butorszam][butorPosY] = 0.0;
			ButorInfo[butorszam][butorPosZ] = 0.0;
			ButorInfo[butorszam][butorPosRX] = 0.0;
			ButorInfo[butorszam][butorPosRY] = 0.0;
			ButorInfo[butorszam][butorPosRZ] = 0.0;
			ButorInfo[butorszam][butorModel] = 0;
			ButorInfo[butorszam][butorVW] = 0;
			ButorInfo[butorszam][butorInterior] = 0;
			ButorInfo[butorszam][butorHasznalva] = false;
			ButorInfo[butorszam][butorMegveve] = false;
			DestroyDynamicObject(ButorInfo[butorszam][butorObject]);
			ButorInfo[butorszam][butorTipus] = NINCS;
			ButorInfo[butorszam][butorListitem] = NINCS;

			SCM(playerid, COL_MKEK, "Bútor sikeresen törölve!");
			return true;
		}
		case DIALOG_BUTOR_MEGVETEL:
		{
			new penz;
			if(!response)
			{
				NULLAZAS:
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosX] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosY] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosZ] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRX] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRY] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRZ] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorVW] = 0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorInterior] = 0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorHasznalva] = false;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorTipus] = NINCS;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem] = NINCS;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorModel] = 0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRX] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRY] = 0.0;
				ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRZ] = 0.0;
				DestroyDynamicObject(ButorInfo[PlayerInfo[playerid][pSzButor]][butorObject]);
				PlayerInfo[playerid][pSzButor] = NINCS;
				return SCM(playerid, COL_MKEK, "Bútor visszavonva!");
			}
			switch(ButorInfo[PlayerInfo[playerid][pSzButor]][butorTipus])
			{
				case 1:
					penz = Butor_Asztal[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 2:
					penz = Butor_Ulogarnitura[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 3:
					penz = Butor_Kepek[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 4:
					penz = Butor_Lampak[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 5:
					penz = Butor_TV[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 6:
					penz = Butor_DVDHiFi[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 7:
					penz = Butor_Hangfal[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 8:
					penz = Butor_Szekreny[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 9:
					penz = Butor_Fotel[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 10:
					penz = Butor_Konyhabutor[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 11:
					penz = Butor_Huto[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 12:
					penz = Butor_Szamitogep[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 13:
					penz = Butor_Ajto[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 14:
					penz = Butor_Mosogep[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 15:
					penz = Butor_Nyomtato[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 16:
					penz = Butor_Agy[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 17:
					penz = Butor_WC[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 18:
					penz = Butor_Zuhanyzo[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 19:
					penz = Butor_Mosdo[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 20:
					penz = Butor_Szonyeg[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 21:
					penz = Butor_Szek[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 22:
					penz = Butor_Iroasztal[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 23:
					penz = Butor_Fal[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
				case 24:
					penz = Butor_Szef[ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]][butorAR];
			}
			if(PlayerInfo[playerid][pBszPenz] < penz)
			{
				SCM(playerid, COL_LRED, "Sajnos nincs elegendõ fedezet a bankszámládon, hogy ezt megvehesd!");
				goto NULLAZAS;
			}

			new querycske[1024];
			format(querycske, sizeof(querycske), "INSERT INTO `butorok` VALUES (");
			format(querycske, sizeof(querycske), "%s'%d', ", querycske, PlayerInfo[playerid][pSzButor]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosX]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosY]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosZ]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRX]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRY]);
			format(querycske, sizeof(querycske), "%s'%.2f', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorPosRZ]);
			format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorModel]);
			format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorVW]);
			format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorInterior]);
			format(querycske, sizeof(querycske), "%s'%d', ", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorTipus]);
			format(querycske, sizeof(querycske), "%s'%d')", querycske, ButorInfo[PlayerInfo[playerid][pSzButor]][butorListitem]);
			//mysql_function_query(sql_ID, querycske, false, "", "");
			mysql_tquery(sql_ID, querycske, "", "");
			
			ButorInfo[PlayerInfo[playerid][pSzButor]][butorMegveve] = true;
			PlayerInfo[playerid][pBszPenz] -= penz;

			SFM(playerid, COL_MKEK, "Sikeresen megvetted a berendezési tárgyat "#COL_MKEK"%s$"#COL_FEHER"-ért!", FormatNumber( penz, 0, ',' ));
			PlayerInfo[playerid][pSzButor] = NINCS;
			return true;
		}
		case DIALOG_SZABAD_BUTOROK_LISTA:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");

			new butorszam = ButorSzam(playerid);

			if(butorszam >= listitem + 1)
			{
				new butorindex = GetXButor(playerid, listitem + 1);
				PlayerInfo[playerid][pSzButor] = butorindex;
				ShowPlayerDialog(playerid, DIALOG_BUTOR_SZERKESZTES, DIALOG_STYLE_LIST, #COL_FEHER"Bútor "#COL_VKEK"szerkesztés", "Bútor mozgatása\nBútor törlése", "Mehet!", "Mégse!");
			} else
				ShowPlayerDialog(playerid, DIALOG_BUTOR_KATEGORIA, DIALOG_STYLE_LIST, #COL_FEHER"Válassz "#COL_VKEK"kategóriát!", "Asztal\nÜlõgarnitúra\nFestmények, képek\nLámpák\nTV-k\nDVD-k, HiFi-k\nHangfal\nSzekrény\nFotel\nKonyhabútor\nHûtõ\nSzámítógép\nAjtó\nMosógép\nNyomtató\nÁgy\nWC\nZuhanyzó\nMosdó\nSzõnyeg\nSzék\nÍróasztal\nFal\nSzéf", "Mehet!", "Mégse!");
			return true;
		}
		case DIALOG_BUTOR:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");
				
			new butorszam = ButorSzam(playerid);
			new butorok[2048];
			
			switch(listitem)
			{
				case 0:
				{
					if(HazInfo[GetPlayerVirtualWorld(playerid)][butorsz] == butorszam)
						return SCM(playerid, COL_LRED, "[Hiba]: A bútorok száma elérte a limitet!");
						
					ShowPlayerDialog(playerid, DIALOG_BUTOR_KATEGORIA, DIALOG_STYLE_LIST, #COL_FEHER"Válassz "#COL_VKEK"kategóriát!", "Asztal\nÜlõgarnitúra\nFestmények, képek\nLámpák\nTV-k\nDVD-k, HiFi-k\nHangfal\nSzekrény\nFotel\nKonyhabútor\nHûtõ\nSzámítógép\nAjtó\nMosógép\nNyomtató\nÁgy\nWC\nZuhanyzó\nMosdó\nSzõnyeg\nSzék\nÍróasztal\nFal\nSzéf", "Mehet!", "Mégse!");
					return true;
				}
				case 1:
				{
					SCM(playerid, COL_MKEK, "Kattints egy tetszõleges bútorra és válassz a lehetõségek közül, vagy kilépéshez használd az ESC gombot!");
					SelectObject(playerid);
					return true;
				}
				case 2:
				{
					new i = NINCS, butorfo[128], sorozat = 0,
					Float:tavolsag,hazszam = HazabanVan(playerid);
					for(;++i < MAXBUTORSZAM;)
					{
						if(ButorInfo[i][butorVW] == hazszam && ButorInfo[i][butorHasznalva])
						{
							new butornev[48];
							switch(ButorInfo[i][butorTipus])
							{
								case 1:
									format(butornev, sizeof(butornev), Butor_Asztal[ButorInfo[i][butorListitem]][butorNEV]);
								case 2:
									format(butornev, sizeof(butornev), Butor_Ulogarnitura[ButorInfo[i][butorListitem]][butorNEV]);
								case 3:
									format(butornev, sizeof(butornev), Butor_Kepek[ButorInfo[i][butorListitem]][butorNEV]);
								case 4:
									format(butornev, sizeof(butornev), Butor_Lampak[ButorInfo[i][butorListitem]][butorNEV]);
								case 5:
									format(butornev, sizeof(butornev), Butor_TV[ButorInfo[i][butorListitem]][butorNEV]);
								case 6:
									format(butornev, sizeof(butornev), Butor_DVDHiFi[ButorInfo[i][butorListitem]][butorNEV]);
								case 7:
									format(butornev, sizeof(butornev), Butor_Hangfal[ButorInfo[i][butorListitem]][butorNEV]);
								case 8:
									format(butornev, sizeof(butornev), Butor_Szekreny[ButorInfo[i][butorListitem]][butorNEV]);
								case 9:
									format(butornev, sizeof(butornev), Butor_Fotel[ButorInfo[i][butorListitem]][butorNEV]);
								case 10:
									format(butornev, sizeof(butornev), Butor_Konyhabutor[ButorInfo[i][butorListitem]][butorNEV]);
								case 11:
									format(butornev, sizeof(butornev), Butor_Huto[ButorInfo[i][butorListitem]][butorNEV]);
								case 12:
									format(butornev, sizeof(butornev), Butor_Szamitogep[ButorInfo[i][butorListitem]][butorNEV]);
								case 13:
									format(butornev, sizeof(butornev), Butor_Ajto[ButorInfo[i][butorListitem]][butorNEV]);
								case 14:
									format(butornev, sizeof(butornev), Butor_Mosogep[ButorInfo[i][butorListitem]][butorNEV]);
								case 15:
									format(butornev, sizeof(butornev), Butor_Nyomtato[ButorInfo[i][butorListitem]][butorNEV]);
								case 16:
									format(butornev, sizeof(butornev), Butor_Agy[ButorInfo[i][butorListitem]][butorNEV]);
								case 17:
									format(butornev, sizeof(butornev), Butor_WC[ButorInfo[i][butorListitem]][butorNEV]);
								case 18:
									format(butornev, sizeof(butornev), Butor_Zuhanyzo[ButorInfo[i][butorListitem]][butorNEV]);
								case 19:
									format(butornev, sizeof(butornev), Butor_Mosdo[ButorInfo[i][butorListitem]][butorNEV]);
								case 20:
									format(butornev, sizeof(butornev), Butor_Szonyeg[ButorInfo[i][butorListitem]][butorNEV]);
								case 21:
									format(butornev, sizeof(butornev), Butor_Szek[ButorInfo[i][butorListitem]][butorNEV]);
								case 22:
									format(butornev, sizeof(butornev), Butor_Iroasztal[ButorInfo[i][butorListitem]][butorNEV]);
								case 23:
									format(butornev, sizeof(butornev), Butor_Fal[ButorInfo[i][butorListitem]][butorNEV]);
								case 24:
									format(butornev, sizeof(butornev), Butor_Szef[ButorInfo[i][butorListitem]][butorNEV]);
							}
							tavolsag = GetPlayerDistanceFromPoint(playerid, ButorInfo[i][butorPosX], ButorInfo[i][butorPosY], ButorInfo[i][butorPosZ]);
							butorfo[0] = EOS;
							format(butorfo, sizeof(butorfo), #COL_FEHER"Slot %d: "#COL_VPIROS"%s "#COL_FEHER"("#COL_VKEK"%.1fm"#COL_FEHER")\n", sorozat + 1, butornev, tavolsag);
							strins(butorok, butorfo, strlen(butorok));
							sorozat++;
						}
					}
					i = NINCS;
					for(;++i < HazInfo[GetPlayerVirtualWorld(playerid)][butorsz] - sorozat;)
					{
						new butornev[48];
						butorfo[0] = EOS;
						format(butorfo, sizeof(butorfo), #COL_FEHER"Slot %d: "#COL_VZOLD"Szabad\n", i + sorozat + 1, butornev, tavolsag);
						strins(butorok, butorfo, strlen(butorok));
					}
					ShowPlayerDialog(playerid, DIALOG_SZABAD_BUTOROK_LISTA, DIALOG_STYLE_LIST, #COL_FEHER"Bútor "#COL_VKEK"lista", butorok, "Rendben!", "Mégse!");
					return true;
				}
				case 3:
				{
					if(PlayerInfo[playerid][phaz] == NINCS)
						return SCM(playerid, COL_LRED, "Nem vagy házban!");
					
					new i = -1, butorfo[128];
					for(;++i < HazInfo[PlayerInfo[playerid][phaz]][butorsz];)
					{
						butorfo[0] = EOS;
						format(butorfo, sizeof(butorfo), #COL_FEHER"Slot %d: %s%s", i + 1, (butorszam > i ? (#COL_VPIROS"Foglalt") : (#COL_VZOLD"Szabad")), (i % 2 ? ("\n") : ("\t\t\t")));
						strins(butorok, butorfo, strlen(butorok));
					}
					ShowPlayerDialog(playerid, DIALOG_SZABAD_BUTOROK, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"statisztika", butorok, "Értettem", "");
					return true;
				}
				case 4:
				{
					if(HazInfo[HazabanVan(playerid)][butorsz] == 50)
						return SCM(playerid, COL_LRED, "[Hiba]: Már kibõvítetted a slotokat!");
					
					nformat(form, 256, #COL_FEHER"Biztos, hogy prémium slotot akarsz vásárolni?\n\n"#COL_VKEK"Bõvítés ára: "#COL_FEHER"%d Prémium Pont\n"#COL_VKEK"Bútor slotok száma a bõvítés után: "#COL_FEHER"50", PremiumPontKell[ADAT_BUTOR - 1][1]);
					ShowPlayerDialog(playerid, DIALOG_BUTOR_PREMIUM, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"prémium slot vásárlás", form, "Mehet!", "Mégse!");
					return true;
				}
			}
			
			return true;
		}
		case DIALOG_BUTOR_PREMIUM:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Rendben, majd késõbb!");
			
			new hazszam = HazabanVan(playerid);
			if(PlayerInfo[playerid][pPremiumPont] >= PremiumPontKell[ADAT_BUTOR - 1][1])//kivéve ideiglenesen
			{
				PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_BUTOR - 1][1];
				HazInfo[hazszam][butorsz] = 50;
				SFM(playerid, COL_MKEK, "Sikeresen kibõvítetted a bútorok számát "#COL_MKEK"50"#COL_FEHER"-re! Ára: "#COL_MKEK"%d"#COL_FEHER" Prémium Pont", PremiumPontKell[ADAT_BUTOR - 1][1]);
			} else return SFM(playerid, COL_LRED, "Sajnálom, de neked nincs elég prémium pontod! "#COL_MKEK"%d"#COL_FEHER" Prémium Pont szükséges!", PremiumPontKell[ADAT_BUTOR - 1][1]);
			
			return true;
		}
		case DIALOG_BUTOR_VETEL:
		{
			if(!response)
				return ShowPlayerDialog(playerid, DIALOG_BUTOR_KATEGORIA, DIALOG_STYLE_LIST, #COL_FEHER"Válassz "#COL_VKEK"kategóriát!", "Asztal\nÜlõgarnitúra\nFestmények, képek\nLámpák\nTV-k\nDVD-k, HiFi-k\nHangfal\nSzekrény\nFotel\nKonyhabútor\nHûtõ\nSzámítógép\nAjtó\nMosógép\nNyomtató\nÁgy\nWC\nZuhanyzó\nMosdó\nSzõnyeg\nSzék\nÍróasztal\nFal", "Mehet!", "Mégse!");

			new Float:playerposok[4],szabadbutor = SzabadButorID();
			GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);

			switch(PlayerInfo[playerid][pButorKategoria])
			{
				case 1:
					ButorInfo[szabadbutor][butorModel] = Butor_Asztal[listitem][butorID];
				case 2:
					ButorInfo[szabadbutor][butorModel] = Butor_Ulogarnitura[listitem][butorID];
				case 3:
					ButorInfo[szabadbutor][butorModel] = Butor_Kepek[listitem][butorID];
				case 4:
					ButorInfo[szabadbutor][butorModel] = Butor_Lampak[listitem][butorID];
				case 5:
					ButorInfo[szabadbutor][butorModel] = Butor_TV[listitem][butorID];
				case 6:
					ButorInfo[szabadbutor][butorModel] = Butor_DVDHiFi[listitem][butorID];
				case 7:
					ButorInfo[szabadbutor][butorModel] = Butor_Hangfal[listitem][butorID];
				case 8:
					ButorInfo[szabadbutor][butorModel] = Butor_Szekreny[listitem][butorID];
				case 9:
					ButorInfo[szabadbutor][butorModel] = Butor_Fotel[listitem][butorID];
				case 10:
					ButorInfo[szabadbutor][butorModel] = Butor_Konyhabutor[listitem][butorID];
				case 11:
					ButorInfo[szabadbutor][butorModel] = Butor_Huto[listitem][butorID];
				case 12:
					ButorInfo[szabadbutor][butorModel] = Butor_Szamitogep[listitem][butorID];
				case 13:
					ButorInfo[szabadbutor][butorModel] = Butor_Ajto[listitem][butorID];
				case 14:
					ButorInfo[szabadbutor][butorModel] = Butor_Mosogep[listitem][butorID];
				case 15:
					ButorInfo[szabadbutor][butorModel] = Butor_Nyomtato[listitem][butorID];
				case 16:
					ButorInfo[szabadbutor][butorModel] = Butor_Agy[listitem][butorID];
				case 17:
					ButorInfo[szabadbutor][butorModel] = Butor_WC[listitem][butorID];
				case 18:
					ButorInfo[szabadbutor][butorModel] = Butor_Zuhanyzo[listitem][butorID];
				case 19:
					ButorInfo[szabadbutor][butorModel] = Butor_Mosdo[listitem][butorID];
				case 20:
					ButorInfo[szabadbutor][butorModel] = Butor_Szonyeg[listitem][butorID];
				case 21:
					ButorInfo[szabadbutor][butorModel] = Butor_Szek[listitem][butorID];
				case 22:
					ButorInfo[szabadbutor][butorModel] = Butor_Iroasztal[listitem][butorID];
				case 23:
					ButorInfo[szabadbutor][butorModel] = Butor_Fal[listitem][butorID];
				case 24:
					ButorInfo[szabadbutor][butorModel] = Butor_Szef[listitem][butorID];
			}

			ButorInfo[szabadbutor][butorPosX] = playerposok[0];
			ButorInfo[szabadbutor][butorPosY] = playerposok[1];
			ButorInfo[szabadbutor][butorPosZ] = playerposok[2];
			ButorInfo[szabadbutor][butorPosRX] = 0.0;
			ButorInfo[szabadbutor][butorPosRY] = 0.0;
			ButorInfo[szabadbutor][butorPosRZ] = 0.0;
			ButorInfo[szabadbutor][butorVW] = GetPlayerVirtualWorld(playerid);
			ButorInfo[szabadbutor][butorInterior] = GetPlayerInterior(playerid);
			ButorInfo[szabadbutor][butorHasznalva] = true;
			ButorInfo[szabadbutor][butorTipus] = PlayerInfo[playerid][pButorKategoria];
			ButorInfo[szabadbutor][butorListitem] = listitem;

			ButorInfo[szabadbutor][butorObject] = CreateDynamicObject(ButorInfo[szabadbutor][butorModel], playerposok[0] + 1.0, playerposok[1] + 2.0, playerposok[2], 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));

			Streamer_Update(playerid);
			PlayerInfo[playerid][pSzButor] = szabadbutor;
			SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
			SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");

			EditDynamicObject(playerid, ButorInfo[szabadbutor][butorObject]);
			PlayerInfo[playerid][pButorKategoria] = 0;
			
			return true;
		}
		case DIALOG_BUTOR_SZERKESZTES:
		{
			if(!response)
				return SCM(playerid, COL_LRED, "További szép napot!");

			switch(listitem)
			{
				case 0:
				{
					SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
					SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");
				
					EditDynamicObject(playerid, ButorInfo[PlayerInfo[playerid][pSzButor]][butorObject]);
					PlayerInfo[playerid][pSzButor] = NINCS;
				}
				case 1:
				{
					new formatalunk[512],nev[48],kategoria[32],butorszam = PlayerInfo[playerid][pSzButor];
					switch(ButorInfo[butorszam][butorTipus])
					{
						case 1:
						{
							kategoria = "Asztal";
							format(nev, sizeof(nev), Butor_Asztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 2:
						{
							kategoria = "Ülõgarnitúra";
							format(nev, sizeof(nev), Butor_Ulogarnitura[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 3:
						{
							kategoria = "Festmények, képek";
							format(nev, sizeof(nev), Butor_Kepek[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 4:
						{
							kategoria = "Lámpák";
							format(nev, sizeof(nev), Butor_Lampak[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 5:
						{
							kategoria = "TV-k";
							format(nev, sizeof(nev), Butor_TV[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 6:
						{
							kategoria = "DVD-k, HiFi-k";
							format(nev, sizeof(nev), Butor_DVDHiFi[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 7:
						{
							kategoria = "Hangfal";
							format(nev, sizeof(nev), Butor_Hangfal[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 8:
						{
							kategoria = "Szekrény";
							format(nev, sizeof(nev), Butor_Szekreny[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 9:
						{
							kategoria = "Fotel";
							format(nev, sizeof(nev), Butor_Fotel[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 10:
						{
							kategoria = "Konyhabútor";
							format(nev, sizeof(nev), Butor_Konyhabutor[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 11:
						{
							kategoria = "Hûtõ";
							format(nev, sizeof(nev), Butor_Huto[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 12:
						{
							kategoria = "Számítógép";
							format(nev, sizeof(nev), Butor_Szamitogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 13:
						{
							kategoria = "Ajtó";
							format(nev, sizeof(nev), Butor_Ajto[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 14:
						{
							kategoria = "Mosógép";
							format(nev, sizeof(nev), Butor_Mosogep[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 15:
						{
							kategoria = "Nyomtató";
							format(nev, sizeof(nev), Butor_Nyomtato[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 16:
						{
							kategoria = "Ágy";
							format(nev, sizeof(nev), Butor_Agy[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 17:
						{
							kategoria = "WC";
							format(nev, sizeof(nev), Butor_WC[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 18:
						{
							kategoria = "Zuhanyzó";
							format(nev, sizeof(nev), Butor_Zuhanyzo[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 19:
						{
							kategoria = "Mosdó";
							format(nev, sizeof(nev), Butor_Mosdo[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 20:
						{
							kategoria = "Szõnyeg";
							format(nev, sizeof(nev), Butor_Szonyeg[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 21:
						{
							kategoria = "Szék";
							format(nev, sizeof(nev), Butor_Szek[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 22:
						{
							kategoria = "Íróasztal";
							format(nev, sizeof(nev), Butor_Iroasztal[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 23:
						{
							kategoria = "Fal";
							format(nev, sizeof(nev), Butor_Fal[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
						case 24:
						{
							kategoria = "Széf";
							format(nev, sizeof(nev), Butor_Szef[ButorInfo[butorszam][butorListitem]][butorNEV]);
						}
					}

					format(formatalunk, sizeof(formatalunk), #COL_FEHER"Biztos, hogy törölni akarod a következõ bútort?\n\n\n"#COL_VKEK"Bútor kategóriája: "#COL_FEHER"%s\n"#COL_VKEK"Bútor neve: "#COL_FEHER"%s", kategoria, nev);
					ShowPlayerDialog(playerid, DIALOG_BUTOR_TORLES, DIALOG_STYLE_MSGBOX, #COL_FEHER"Bútor "#COL_VKEK"törlése", formatalunk, "Biztos!", "Mégse!");
				}
			}
			return true;
		}
		case DIALOG_BUTOR_KATEGORIA:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");
				
			if(ButorSzam(playerid) == HazInfo[GetPlayerVirtualWorld(playerid)][butorsz])
				return SCM(playerid, COL_LRED, "Sajnos te már nem vehetsz több berendezési tárgyat!");

			new butorstr[3000],i = NINCS;
			new butorformat[128], butorformat2[32];

			switch(listitem)
			{
				case 0:
				{
					PlayerInfo[playerid][pButorKategoria] = 1;

					for(;++i != sizeof(Butor_Asztal);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Asztal[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Asztal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Asztal[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Asztal[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Asztal", butorstr, "Mehet!", "Vissza!");
					return true;
				}
				case 1:
				{
					PlayerInfo[playerid][pButorKategoria] = 2;

					for(;++i != sizeof(Butor_Ulogarnitura);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Ulogarnitura[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Ulogarnitura[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Ulogarnitura[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Ulogarnitura[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Ülõgarnitúra", butorstr, "Mehet!", "Vissza!");
				}
				case 2:
				{
					PlayerInfo[playerid][pButorKategoria] = 3;

					for(;++i != sizeof(Butor_Kepek);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Kepek[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Kepek[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Kepek[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Kepek[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Festmények, képek", butorstr, "Mehet!", "Vissza!");
				}
				case 3:
				{
					PlayerInfo[playerid][pButorKategoria] = 4;

					for(;++i != sizeof(Butor_Lampak);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Lampak[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Lampak[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Lampak[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Lampak[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Lámpák", butorstr, "Mehet!", "Vissza!");
				}
				case 4:
				{
					PlayerInfo[playerid][pButorKategoria] = 5;

					for(;++i != sizeof(Butor_TV);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_TV[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_TV[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_TV[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_TV[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"TV-k", butorstr, "Mehet!", "Vissza!");
				}
				case 5:
				{
					PlayerInfo[playerid][pButorKategoria] = 6;

					for(;++i != sizeof(Butor_DVDHiFi);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_DVDHiFi[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_DVDHiFi[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_DVDHiFi[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_DVDHiFi[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"DVD-k, HiFi-k", butorstr, "Mehet!", "Vissza!");
				}
				case 6:
				{
					PlayerInfo[playerid][pButorKategoria] = 7;

					for(;++i != sizeof(Butor_Hangfal);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Hangfal[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Hangfal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Hangfal[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Hangfal[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Hangfal", butorstr, "Mehet!", "Vissza!");
					return true;
				}
				case 7:
				{
					PlayerInfo[playerid][pButorKategoria] = 8;

					for(;++i != sizeof(Butor_Szekreny);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szekreny[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Szekreny[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szekreny[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Szekreny[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Szekrény", butorstr, "Mehet!", "Vissza!");
				}
				case 8:
				{
					PlayerInfo[playerid][pButorKategoria] = 9;

					for(;++i != sizeof(Butor_Fotel);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Fotel[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Fotel[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Fotel[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Fotel[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Fotel", butorstr, "Mehet!", "Vissza!");
				}
				case 9:
				{
					PlayerInfo[playerid][pButorKategoria] = 10;

					for(;++i != sizeof(Butor_Konyhabutor);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Konyhabutor[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Konyhabutor[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Konyhabutor[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Konyhabutor[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Konyhabútor", butorstr, "Mehet!", "Vissza!");
				}
				case 10:
				{
					PlayerInfo[playerid][pButorKategoria] = 11;

					for(;++i != sizeof(Butor_Huto);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Huto[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Huto[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Huto[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Huto[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Hûtõ", butorstr, "Mehet!", "Vissza!");
				}
				case 11:
				{
					PlayerInfo[playerid][pButorKategoria] = 12;

					for(;++i != sizeof(Butor_Szamitogep);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szamitogep[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Szamitogep[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szamitogep[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Szamitogep[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Számítógép", butorstr, "Mehet!", "Vissza!");
				}
				case 12:
				{
					PlayerInfo[playerid][pButorKategoria] = 13;

					for(;++i != sizeof(Butor_Ajto);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Ajto[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Ajto[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Ajto[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Ajto[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Ajtó", butorstr, "Mehet!", "Vissza!");
					return true;
				}
				case 13:
				{
					PlayerInfo[playerid][pButorKategoria] = 14;

					for(;++i != sizeof(Butor_Mosogep);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Mosogep[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Mosogep[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Mosogep[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Mosogep[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Mosógép", butorstr, "Mehet!", "Vissza!");
				}
				case 14:
				{
					PlayerInfo[playerid][pButorKategoria] = 15;

					for(;++i != sizeof(Butor_Nyomtato);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Nyomtato[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Nyomtato[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Nyomtato[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Nyomtato[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Nyomtató", butorstr, "Mehet!", "Vissza!");
				}
				case 15:
				{
					PlayerInfo[playerid][pButorKategoria] = 16;

					for(;++i != sizeof(Butor_Agy);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Agy[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Agy[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Agy[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Agy[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Ágy", butorstr, "Mehet!", "Vissza!");
				}
				case 16:
				{
					PlayerInfo[playerid][pButorKategoria] = 17;

					for(;++i != sizeof(Butor_WC);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_WC[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_WC[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_WC[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_WC[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"WC", butorstr, "Mehet!", "Vissza!");
				}
				case 17:
				{
					PlayerInfo[playerid][pButorKategoria] = 18;

					for(;++i != sizeof(Butor_Zuhanyzo);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Zuhanyzo[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Zuhanyzo[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Zuhanyzo[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Zuhanyzo[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Zuhanyzó", butorstr, "Mehet!", "Vissza!");
				}
				case 18:
				{
					PlayerInfo[playerid][pButorKategoria] = 19;

					for(;++i != sizeof(Butor_Mosdo);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Mosdo[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Mosdo[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Mosdo[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Mosdo[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Mosdó", butorstr, "Mehet!", "Vissza!");
					return true;
				}
				case 19:
				{
					PlayerInfo[playerid][pButorKategoria] = 20;

					for(;++i != sizeof(Butor_Szonyeg);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szonyeg[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Szonyeg[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szonyeg[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Szonyeg[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Szõnyeg", butorstr, "Mehet!", "Vissza!");
				}
				case 20:
				{
					PlayerInfo[playerid][pButorKategoria] = 21;

					for(;++i != sizeof(Butor_Szek);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szek[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Szek[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szek[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Szek[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Szék", butorstr, "Mehet!", "Vissza!");
				}
				case 21:
				{
					PlayerInfo[playerid][pButorKategoria] = 22;

					for(;++i != sizeof(Butor_Iroasztal);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Iroasztal[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Iroasztal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Iroasztal[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Iroasztal[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 2), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Íróasztal", butorstr, "Mehet!", "Vissza!");
				}
				case 22:
				{
					PlayerInfo[playerid][pButorKategoria] = 23;

					for(;++i != sizeof(Butor_Fal);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Fal[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Fal[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Fal[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Fal[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 1), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Fal", butorstr, "Mehet!", "Vissza!");
				}
				case 23:
				{
					PlayerInfo[playerid][pButorKategoria] = 24;

					for(;++i != sizeof(Butor_Szef);)
					{
						format(butorformat, sizeof(butorformat), #COL_FEHER"[ID: %d] %s%s", Butor_Szef[i][butorID], (PlayerInfo[playerid][pBszPenz] < Butor_Szef[i][butorAR] ? (#COL_VPIROS) : (#COL_VZOLD)), Butor_Szef[i][butorNEV]);
						format(butorformat2, sizeof(butorformat2), "[%s$]\n", FormatNumber(Butor_Szef[i][butorAR], 0, ','));
						strins(butorstr, Tab(butorformat, butorformat2, 1), strlen(butorstr));
					}
					ShowPlayerDialog(playerid, DIALOG_BUTOR_VETEL, DIALOG_STYLE_LIST, #COL_FEHER"Kategória: "#COL_VKEK"Széf", butorstr, "Mehet!", "Vissza!");
				}
			}
			
			return true;
		}
		case DIALOG_ADMIN:
		{
			if(!PlayerInfo[playerid][pDefensed][1]) //jelszó ellenörzés
			{
				if(strcmp(PlayerInfo[playerid][pDefense], MD5_Hash(inputtext)) || !response || !strlen(inputtext))
				{
					PlayerInfo[playerid][pDefensed][0]++;
					if(PlayerInfo[playerid][pDefensed][0] > 2 && PlayerInfo[playerid][pDefensed][0] < 4)
					{
						AdminUzenet(COLOR_GREEN, 1, "%s IP címre tiltva! Oka: Többszöri hibás Admin jelszó megadás", JatekosNev(playerid));
						nformat(str, 64, "Hibás Adminjelszó (%s)", JatekosNev(playerid));
						ServerBan(playerid, 0, str, NINCS, true, true, false);
					}
					ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_PIROS"Hibás jelszó!\n"#COL_FEHER"Kérlek add meg az Admin jelszavad!", "Belépés", "Mégse");
				} 
				else
				{
					SCM(playerid, COL_MKEK, "Sikeres azonosítás! Kellemes idõtöltést kívánok.");
					AdminUzenet(0x6d8207AA,1,"Admin %s sikeresen bejelentkezett!",JatekosNev(playerid));
				}
					
			} else if(PlayerInfo[playerid][pDefensed][1] == 1) { //jelszó megadás
			
				if(strlen(inputtext) < 4 || !response)
					ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_FEHER"Kérlek add meg leendõ Admin jelszavad!\n"#COL_PIROS"Ne felejtsd el, mert minden belépésnél szükséged lesz rá!", "Mentés", "Mégse");
				else
				{
					format(PlayerInfo[playerid][pDefense], 64, "%s", MD5_Hash(inputtext));
					SFM(playerid, COL_MKEK, "Admin jelszavad ( "#COL_PIROS"%s"#COL_FEHER" ) rögzítve! Ne felejtsd el, mert minden belépésnél szükséged lesz rá!", inputtext);
				}
				
			} else if(PlayerInfo[playerid][pDefensed][1] >= 3) { //jelszó váltás
				
				if(!response)
					return SCM(playerid, COL_MKEK, "Kiléptél az Admin jelszó váltó panelbõl!");
				if((strcmp(PlayerInfo[playerid][pDefense], MD5_Hash(inputtext)) || strlen(inputtext) < 4) && PlayerInfo[playerid][pDefensed][1] == 3)
					return ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_PIROS"Hibás jelszó, kérlek próbáld újra!"#COL_FEHER"\nAdd meg jelenlegi jelszavad\naz Adminjelszó váltásához!", "Rendben", "Mégse");
				else
				{
					if(PlayerInfo[playerid][pDefensed][1] != 4)
					{
						PlayerInfo[playerid][pDefensed][1] = 4;
						ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_FEHER"Kérlek add meg a leendõ jelszavad!", "Mentés", "Mégse");
						return true;
					}
					format(PlayerInfo[playerid][pDefense], 64, "%s", MD5_Hash(inputtext));
					SFM(playerid, COL_MKEK, "Admin jelszavad ( "#COL_PIROS"%s"#COL_FEHER" ) megváltoztatva! Ne felejtsd el, mert minden belépésnél szükséged lesz rá!", inputtext);
				}
			}
			return true;
		}
		case DIALOG_MUNKA:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");
			
			new melyik = NINCS;
		
			if(IsPlayerInRangeOfPoint(playerid, 5.0, 889.750, -0.752, 988.210))
				melyik = 1; //városháza
			else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2474.286, -2119.997, 14.756))
				melyik = 0; //gyár
			
			/*
			//Munka define - Név, Szükséges tehetség pont - Legális? (1 = igen | 0 = nem)
			new Munkak[ MAX_MUNKA ][4][20] = 
			{
				{MUNKA_KAMION, 			"Kamionos", 	100, 		1},
				{MUNKA_FAVAGO, 			"Favágó", 		50, 		1},
				{MUNKA_KUKA, 			"Kukás", 		0, 			1},
				{MUNKA_UTTISZTITO, 		"Úttisztító", 	0, 			1},
				{MUNKA_FEGYVER,			"Fegyvermester",0,			0},
				{MUNKA_FARMER,			"Farmer",		30,			1}
			};*/
			
			new i = NINCS, id, num = 0;
			for(;++i < sizeof(Munkak);)
			{
				if(Munkak[i][3][0] == melyik)
				{
					if(num == listitem)
					{
						id = i;
						break;
					}
					
					num++;
				}
			}
			
			//if(Munkak[ id ][2][0] > PlayerInfo[playerid][pExp][1])
			if((!melyik && (Munkak[ id ][2][0] > PlayerInfo[playerid][pExp][3])) || (melyik && (Munkak[ id ][2][0] > PlayerInfo[playerid][pExp][1])))
				return SCM(playerid, COL_LRED, "Sajnálom, de ehhez a munkához még nincs elég tapasztalatod. Kérlek válassz másikat!");
			
			/*if(Munkak[ id ][0][0] == MUNKA_FEGYVER && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_MAFFIA)
				return SCM(playerid, COL_LRED, "Ezt a munkát csak Maffia tagjai vehetik fel!");
			
			if(Munkak[ id ][0][0] == MUNKA_DROG && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_BANDA)
				return SCM(playerid, COL_LRED, "Ezt a munkát csak Banda tagjai vehetik fel!");*/
			
			if((PlayerInfo[playerid][pMunka1] && PlayerInfo[playerid][pMunka1] == Munkak[ id ][0][0]) || (PlayerInfo[playerid][pMunka2] && PlayerInfo[playerid][pMunka2] == Munkak[ id ][0][0]))
				return SCM(playerid, COL_LRED, "Már van ilyen munkád!");
			
			if(PlayerInfo[playerid][pMunka1])
				PlayerInfo[playerid][pMunka2] = Munkak[ id ][0][0];
			else
				PlayerInfo[playerid][pMunka1] = Munkak[ id ][0][0];
			
			nformat(str, 128, ""#COL_VZOLD"\nGratulálok, sikeresen elvállalatad a(z)\n"#COL_MKEK"%s"#COL_VZOLD" munkát!", Munkak[ id ][1]);
			Info_Dialog(playerid, ""#COL_FEHER"Munkavállalás", str);
			//PlayerInfo[playerid][pD_MunkaValt][0] = 0;
			//PlayerInfo[playerid][pD_MunkaValt][1] = 0;
			return true;
		}
		case DIALOG_KATONA_ENGEDELY:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			SFM(playerid, COL_VZOLD, "%s a "#COL_MKEK"%st"#COL_FEHER" a tagok számára!", (Katona_Engedelyek[listitem][1][0] == 0 ? ("Engedélyezted") : ("Tiltottad")), Katona_Engedelyek[listitem][0]);
			Katona_Engedelyek[listitem][1][0] = (Katona_Engedelyek[listitem][1][0] == 0 ? 1 : 0);
			return true;
		}
		case DIALOG_KATONA_FELVESZ:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(!Katona_Engedelyek[listitem][1][0])
				return SFM(playerid, COL_LRED, "A %s jelenleg nincs engedélyezve, így nem veheted fel!", Katona_Engedelyek[listitem][0]);
			
		//	if(Katona_Engedelyek[listitem][2][0] > PlayerInfo[playerid][prang])
		//		return SFM(playerid, COL_LRED, "Ehhez a felszereléshez minimum %d rangra van szükséged!", Katona_Engedelyek[listitem][2][0]);
			DeleteWeapon(playerid);
			SetPlayerColor(playerid, 0x8d8dffAA & 0xFFFFFF00);
			switch(listitem)
			{
				case 0://Deputy Sheriff Generalist felszerelés
				{
					GiveWeapon(playerid, 3, 1, false, true);//rendbot
					GiveWeapon(playerid, 41, 500, false, true);//spray
				}
				case 1://Deputy Sheriff felszerelés
				{
					GiveWeapon(playerid, 24, 90, false, true);//deagle
					GiveWeapon(playerid, 3, 1, false, true);//rendbot
					GiveWeapon(playerid, 41, 500, false, true);//spray
				}
				case 2://Detective Bureau felszerelés
				{
					GiveWeapon(playerid, 24, 90, false, true);//deagle
				}
				case 3://SASD Emergency felszerelés 
				{
					GiveWeapon(playerid, 29, 120, false, true);//MP5
					GiveWeapon(playerid, 24, 90, false, true);//rendbot
					GiveWeapon(playerid, 3, 1, false, true);//rendbot
					GiveWeapon(playerid, 41, 500, false, true);//spray
				}
				case 4://Tactical Response Unit felszerelés
				{
					GiveWeapon(playerid, 3, 1, false, true);//Bot
					GiveWeapon(playerid, 31, 330, false, true);//M4
					GiveWeapon(playerid, 17, 20, false, true);//Teargas
					GiveWeapon(playerid, 24, 90, false, true);//deagle
				}
				case 5://Tactical Response Sniper Unit felszerelés 
				{
					GiveWeapon(playerid, 24, 90, false, true);//deagle
					GiveWeapon(playerid, 34, 90, false, true);//sniper
				}
			}
			PlayerInfo[playerid][pDuty][1] = (gettime() + (3 * 60));
			nformat(str, 128, "<< Figyelem! %s felvette a %st! >>", JatekosNev(playerid), Katona_Engedelyek[listitem][0]);
			FrakcioUzenet(COLOR_YELLOW, FRAKCIO_KATONA, str, 9);
			SFM(playerid, COL_VZOLD, "Felvetted a "#COL_MKEK"%st"#COL_FEHER"!", Katona_Engedelyek[listitem][0]);
			SetArmour(playerid, MAX_ARMOUR);
			SetHealth(playerid, MAX_HP);
			
			return true;
		}
		case DIALOG_FBI_ENGEDELY:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			SFM(playerid, COL_VZOLD, "%s a "#COL_MKEK"%st"#COL_FEHER" a tagok számára!", (FBI_Engedely[listitem][1][0] == 0 ? ("Engedélyezted") : ("Tiltottad")), FBI_Engedely[listitem][0]);
			FBI_Engedely[listitem][1][0] = (FBI_Engedely[listitem][1][0] == 0 ? 1 : 0);
			return true;
		}
		case DIALOG_FBI_FELVESZ:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			if(!FBI_Engedely[listitem][1][0])
				return SFM(playerid, COL_LRED, "A %s jelenleg nincs engedélyezve, így nem veheted fel!", FBI_Engedely[listitem][0]);
			
			switch(listitem)
			{
				case 0:
				{
					GiveWeapon(playerid, 24, 50, false, true);
					GiveWeapon(playerid, 43, 1, false, true);
					GiveWeapon(playerid, 41, 500, false, true);
				}
				case 1:
				{
					GiveWeapon(playerid, 24, 50, false, true);
					GiveWeapon(playerid, 43, 1, false, true);
					GiveWeapon(playerid, 41, 500, false, true);
					GiveWeapon(playerid, 29, 130, false, true);
				}
				case 2:
				{
					GiveWeapon(playerid, 24, 50, false, true);
					GiveWeapon(playerid, 43, 1, false, true);
					GiveWeapon(playerid, 41, 500, false, true);
					GiveWeapon(playerid, 31, 130, false, true);
				}
				case 3:
				{
					GiveWeapon(playerid, 24, 50, false, true);
					GiveWeapon(playerid, 34, 30, false, true);
				}
			}
			
			SetSkin(playerid, FBI_Engedely[listitem][3][0], false);
			nformat(str, 128, "<< Figyelem! %s felvette a %st! >>", JatekosNev(playerid), FBI_Engedely[listitem][0]);
			FrakcioUzenet(COLOR_YELLOW, FRAKCIO_KATONA, str, 9);
			SFM(playerid, COL_VZOLD, "Felvetted a "#COL_MKEK"%st"#COL_FEHER"!", FBI_Engedely[listitem][0]);
			SetArmour(playerid, MAX_ARMOUR);
			SetHealth(playerid, MAX_HP);
			
			return true;
		}
		case DIALOG_HOTDOG_MENU:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");
			
			if(Etel_Menu[listitem][1][0] > PenzEgyenleg(playerid))
				return SCM(playerid, COL_LRED, "Sajnos ezt nem tudod kifizetni!");
				
			GiveMoney(playerid,-Etel_Menu[listitem][1][0]);
			CegPenz(BIZ_HOTDOG, Etel_Menu[listitem][1][0]);
			SFM(playerid, COL_VZOLD, "Vettél egy "#COL_MKEK"%s"#COL_FEHER"-t "#COL_MKEK"%d"#COL_FEHER"$-ért!", Etel_Menu[listitem][0], Etel_Menu[listitem][1][0]);
			nformat(str, 128, "vett egy %s-t a HotDog standnál..", Etel_Menu[listitem][0]);
			Cselekves(playerid, str);
			
			if(Etel_Menu[listitem][2][0] == NINCS && Etel_Menu[listitem][3][0] == NINCS && Etel_Menu[listitem][4][0] == NINCS)
				PlayerInfo[playerid][pBoltCucc][ BL_SZIVOSZAL ] += 1;
			if(Etel_Menu[listitem][2][0] == NINCS && Etel_Menu[listitem][3][0] == NINCS && !Etel_Menu[listitem][4][0])
				PlayerInfo[playerid][pBoltCucc][ BL_KANAL ] += 1;
			else
			{
				SetHealth(playerid, (PlayerInfo[playerid][pElet] + Etel_Menu[listitem][2][0]));
				Szukseglet(playerid, Etel_Menu[listitem][3][0], Etel_Menu[listitem][4][0]);
			}
			return true;
		}
		case DIALOG_RENDSZAM:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "Kiléptél a kezelõfelületbõl!");
			
			new vid = PlayerInfo[playerid][pProcess][2], jatekos = PlayerInfo[playerid][pProcess][1];
			if(strlen(inputtext) > 32 || strlen(inputtext) < 4 || Karakter_Ellenorzes(inputtext))
			{
				nformat(form, 256, ""#COL_PIROS"Helytelen szöveg! Minimum 4 és maximum 32 karakter lehet!"#COL_FEHER"\nAktuális rendszám: "#COL_MKEK"%d[%d]"#COL_FEHER"\nTulajdonos: "#COL_MKEK"%s", vInfo[vid][vID], vid, vInfo[vid][vTulaj]);
				ShowPlayerDialog(playerid, DIALOG_RENDSZAM, DIALOG_STYLE_INPUT, "Rendszámváltás", form , "Rendben", "Mégse");
				return true;
			}
			
			if(!IsPlayerConnected(jatekos) || vInfo[vid][vTulajID] != PlayerInfo[jatekos][pID])
			{
				SCM(playerid, COL_LRED, "Egy hiba történt! A másik fél nincs fent a szerveren!");
				PlayerInfo[playerid][pProcess][0] = 0;
				PlayerInfo[playerid][pProcess][1] = NINCS;
				PlayerInfo[playerid][pProcess][2] = 0;
				return true;
			}
			
			nformat(str, 256, ""#COL_FEHER"Felajánlás átadva!\nTulajdonos: "#COL_MKEK"%s"#COL_FEHER"\nJármûID: "#COL_MKEK"%d[%d]"#COL_FEHER"\nÚj rendszám: "#COL_MKEK"%s", vInfo[vid][vTulaj], vInfo[vid][vID], vid, inputtext);
			Info_Dialog(playerid, "Rendszámváltás", str);
			
			format(vInfo[vid][vRendszam], 32, "%s", inputtext);
			PlayerInfo[jatekos][pProcess][0] = PR_RENDSZAM;
			PlayerInfo[jatekos][pProcess][1] = playerid;
			PlayerInfo[jatekos][pProcess][2] = vid;
			
			format(str, sizeof(str), ""#COL_MKEK"%s"#COL_FEHER" szerelõ felajánlotta, hogy egyedi\nrendszámot készít számodra!\nJármûID: "#COL_MKEK"%d[%d]"#COL_FEHER"\nÁra: "#COL_MKEK"%d"#COL_FEHER" Prémium Pont\nÚj rendszám: "#COL_MKEK"%s", JatekosNev(playerid, true), vInfo[vid][vID], vid, PremiumPontKell[ADAT_RENDSZAM - 1][1], inputtext);
			ShowPlayerDialog(jatekos, DIALOG_RENDSZAM_ELFOGAD, DIALOG_STYLE_MSGBOX, "Rendszámváltás", str, "Elfogad", "Elutasít");
			return true;
		}
		case DIALOG_RENDSZAM_ELFOGAD:
		{
			new jatekos = PlayerInfo[playerid][pProcess][1], vid = PlayerInfo[ PlayerInfo[playerid][pProcess][1] ][pProcess][2];
			if(!response)
			{
				SCM(playerid, COL_LRED, "Elutasítottad a rendszámváltást!");
				SFM(jatekos, COL_LRED, "%s elutasította a rendszámváltást!", JatekosNev(playerid, true));
				vInfo[vid][vRendszam][0] = EOS;
				goto rdr_nullazas;
			}
			
			new Float:pos[3], Float:angle;
			GetVehiclePos(vInfo[vid][vID], PosExt(pos));
			GetVehicleZAngle(vInfo[vid][vID], angle);
			
			JarmuRendszam(vid);
			SetVehicleToRespawn(vInfo[vid][vID]);
			
			SetVehiclePos(vInfo[vid][vID], PosExt(pos));
			SetVehicleZAngle(vInfo[vid][vID], angle);
			
			PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_RENDSZAM - 1][1];
			SFM(playerid, COL_VZOLD, "Jármûved rendszáma sikeresen átírva! Új rendszámod: "#COL_MKEK"%s", vInfo[vid][vRendszam]);
			
			//new penz = floatround(strlen(vInfo[vid][vRendszam]) * PremiumPontKell[ADAT_RENDSZAM - 1][1]);
			SFM(jatekos, COL_VZOLD, "Jármû rendszáma sikeresen lecserélve! Új rendszám: "#COL_MKEK"%s", vInfo[vid][vRendszam]);
			//SFM(jatekos, COL_MKEK, "A szerelés díja "#COL_MKEK"%s$"#COL_FEHER" hozzáadva a fizetésedhez!", FormatNumber(penz, 0, ','));
			//PlayerInfo[jatekos][pFizetes] += penz;
			
			rdr_nullazas:
			//Szerelõ adatai
			PlayerInfo[ jatekos ][pProcess][0] = 0;
			PlayerInfo[ jatekos ][pProcess][1] = NINCS;
			PlayerInfo[ jatekos ][pProcess][2] = 0;
			
			PlayerInfo[playerid][pProcess][0] = 0;
			PlayerInfo[playerid][pProcess][1] = NINCS;
			PlayerInfo[playerid][pProcess][2] = 0;
			
			vUpdate(vid, vuRendszam);
		}
		//Neon System by Martin
		case DIALOG_NEON:
		{
			new Neonok[7][32] =
			{
				{#COL_FEHER"Neon leszerelése"},
				{#COL_PIROS"Piros"},
				{#COL_MKEK"Kék"},
				{#COL_VZOLD"Zöld"},
				{#COL_CITROM"Sárga"},
				{#COL_ROZSA"Rózsaszín"},
				{#COL_FEHER"Fehér"}
			};
			
			switch(PlayerInfo[playerid][pProcess][3])
			{
				case 1:
				{
					switch( listitem )
					{
						case 0:
						{
							if(!vInfo[PlayerInfo[playerid][pProcess][2]][vNeon][0])
								return Info_Dialog(playerid, "Tuning ~ Neon", "Ebben a jármûben nincs Neon!\nÍgy nem mit szererelni!");
							new str[512], jatekos = PlayerInfo[playerid][pProcess][1];
							
							PlayerInfo[jatekos][pProcess][3] = 4;
							format(str, sizeof(str), ""#COL_FEHER"Szerelõ "#COL_MKEK"%s"#COL_FEHER" felajánlotta, hogy leszereli a\n"#COL_MKEK"%s"#COL_FEHER" típusú jármûvedrõl a Neont.\nBiztos le szeretnéd szereltetni?",
							JatekosNev(playerid, true), VehicleNames[ vInfo[PlayerInfo[playerid][pProcess][2]][vModel] - 400 ]);
							
							ShowPlayerDialog(jatekos, DIALOG_NEON, DIALOG_STYLE_MSGBOX, "Tuning ~ Neon", str, "Igen", "Nem");
							return true;
						}
						case 1 .. 6: 
						{
							new jatekos = PlayerInfo[playerid][pProcess][1];
							
							PlayerInfo[jatekos][pProcess][0] = PR_NEON;
							PlayerInfo[jatekos][pProcess][1] = playerid;
							PlayerInfo[jatekos][pProcess][2] = PlayerInfo[playerid][pProcess][2];
							PlayerInfo[jatekos][pProcess][3] = 2;
							PlayerInfo[jatekos][pProcess][4] = listitem;
							
							new str[512];
							
							format(str, sizeof(str), ""#COL_FEHER"Szerelõ "#COL_MKEK"%s"#COL_FEHER" felajánlotta, hogy beszerel a\n"#COL_MKEK"%s"#COL_FEHER" típusú jármûvedbe egy %s"#COL_FEHER" színû Neon-t.\nValóban szeretnéd ezt a fejlesztést?",
							JatekosNev(playerid, true), VehicleNames[ vInfo[PlayerInfo[playerid][pProcess][2]][vModel] - 400 ], Neonok[listitem]);
							
							ShowPlayerDialog(jatekos, DIALOG_NEON, DIALOG_STYLE_MSGBOX, "Tuning ~ Neon", str, "Igen", "Nem");
							
							format(str, sizeof(str), ""#COL_FEHER"Felajánlottad neki: "#COL_MKEK"%s"#COL_FEHER", hogy felszerelsz egy %s\n"#COL_FEHER"színû Neont a "#COL_MKEK"%s"#COL_FEHER" típusú jármûjére!",
							JatekosNev(jatekos, true), Neonok[listitem], VehicleNames[ vInfo[ PlayerInfo[playerid][pProcess][2] ][vModel] - 400 ]);
							
							Info_Dialog(playerid, "Tuning ~ Neon", str);
							return true;
						}
					}
					
					return true;
				}
				case 2:
				{
					if(!response)
					{
						neon_nullazas:
						new jatekos = PlayerInfo[playerid][pProcess][1];
						
						for(new i = NINCS; ++i < 5;)
						{
							PlayerInfo[playerid][pProcess][i] = 0;
							PlayerInfo[jatekos][pProcess][i] = 0;
						}
						
						nformat(str, 128, ""#COL_MKEK"%s"#COL_FEHER" úgy döntött mégsem tart igény a Neonra\nezért a mûvelet félbeszakadt!", JatekosNev(playerid, true));
						Info_Dialog(jatekos, "Tuning ~ Neon visszamondás", str);
						Info_Dialog(playerid, "Tuning ~ Neon visszamondás", "Neon fejlesztés visszavonva!");
						return true;
					}
					
					
					PlayerInfo[playerid][pProcess][3] = 3;//Mivel fizet
					ShowPlayerDialog(playerid, DIALOG_NEON, DIALOG_STYLE_LIST, "Tuning ~ Fizetési lehetõségek", "50000$\n2 000 Prémium pont", "Választ", "Mégsem");
					return true;
				}
				case 3:
				{
					if(!response)
						goto neon_nullazas;
						
					if(listitem == 0)
					{
						if(PlayerInfo[playerid][pBszPenz] < AR_NEON)
						{
							nformat(str, 128, ""#COL_FEHER"Nincs elegendõ pénzed ahhoz, hogy ezt kifizesd!\nA Neon ára %s$!", FormatNumber(AR_NEON, 0, ','));
							Info_Dialog(playerid, "Tuning ~ Neon", str);
							return true;
						}
						
						PlayerInfo[playerid][pBszPenz] -= AR_NEON;
						
						new str[256];
						format(str, 256, ""#COL_FEHER"Felszereltél egy %s"#COL_FEHER" színû Neont "#COL_MKEK"%s"#COL_FEHER" jármûvére!\nTípus: "#COL_MKEK"%s"#COL_FEHER"\nÁra: "#COL_MKEK"%s"#COL_FEHER"$ volt.",
						Neonok[listitem], JatekosNev(playerid, true), VehicleNames[ vInfo[ PlayerInfo[playerid][pProcess][2] ][vModel] - 400 ], FormatNumber(AR_NEON, 0, ','));
						
						Info_Dialog(PlayerInfo[playerid][pProcess][1], "Tuning ~ Neon", str);
					}
					else if(listitem == 1)
					{
						if(PlayerInfo[playerid][pPremiumPont] < PremiumPontKell[ADAT_NEON - 1][1])
						{
							nformat(str, 128, ""#COL_FEHER"Nincs elegendõ Prémium pontod ahhoz, hogy ezt megvehesd!\nA Neon ára %s Prémium pont!", FormatNumber(PremiumPontKell[ADAT_NEON - 1][1], 0, ','));
							Info_Dialog(playerid, "Tuning ~ Neon", str);
							return true;
						}
						
						new str[256];
						format(str, 256, ""#COL_FEHER"Felszereltél egy %s"#COL_FEHER" színû Neont "#COL_MKEK"%s"#COL_FEHER" jármûvére!\nTípus: "#COL_MKEK"%s"#COL_FEHER"\nÁra: "#COL_MKEK"%s"#COL_FEHER" Prémium pont volt.",
						Neonok[PlayerInfo[playerid][pProcess][4]], JatekosNev(playerid, true), VehicleNames[ vInfo[ PlayerInfo[playerid][pProcess][2] ][vModel] - 400 ], FormatNumber(PremiumPontKell[ADAT_NEON - 1][1], 0, ','));
						
						Info_Dialog(PlayerInfo[playerid][pProcess][1], "Tuning ~ Neon", str);
						
						PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_NEON - 1][1];
					}
					
					vInfo[ PlayerInfo[playerid][pProcess][2] ][vNeon][0] = PlayerInfo[playerid][pProcess][4];
					vUpdate(PlayerInfo[playerid][pProcess][2], vuNeon);
					
					FInfo[ FRAKCIO_SZERELO ][fPenz] += 20000;
					FkUpdate(FRAKCIO_SZERELO, fuPenz);
					
					SetVehicleNeon(PlayerInfo[playerid][pProcess][2], PlayerInfo[playerid][pProcess][4]);
					
					Streamer_Update(playerid);
					Streamer_Update(PlayerInfo[playerid][pProcess][1]);
					return true;
				}
				case 4:
				{
					new jatekos = PlayerInfo[playerid][pProcess][1];
					
					nformat(str, 128, "Leszerelted "#COL_MKEK"%s"#COL_FEHER" jármûjérõl a Neont", JatekosNev(playerid, true));
					Info_Dialog(jatekos, "Tuning ~ Neon visszamondás", str);
					Info_Dialog(playerid, "Tuning ~ Neon visszamondás", ""#COL_FEHER"Neon leszerelve!");
					
					vInfo[ PlayerInfo[playerid][pProcess][2] ][vNeon][0] = 0;
					vUpdate(PlayerInfo[playerid][pProcess][2], vuNeon);
					SetVehicleNeon(PlayerInfo[playerid][pProcess][2], 0);
					
					Streamer_Update(playerid);
					Streamer_Update(PlayerInfo[playerid][pProcess][1]);
					
					for(new i = NINCS; ++i < 5;)
					{
						PlayerInfo[playerid][pProcess][i] = 0;
						PlayerInfo[jatekos][pProcess][i] = 0;
					}
					
					return true;
				}
			}
		}
		case DIALOG_FEGYVERBOLT:
		{
			if(!response)
				return SCM(playerid, COL_MKEK, "További szép napot!");
				
			if(!PlayerInfo[playerid][pEngedely][4])
				return SCM(playerid, COL_LRED, "Neked nincs fegyverengedélyed! Keresd fel a rendõrséget!");
			
			if(PlayerInfo[playerid][ppenz] < Fegyver_Lista[listitem][3][0])
				return SCM(playerid, COL_LRED, "Nincs elegendõ készpénzed ahhoz, hogy ezt megvehesd!");
			
			if(PlayerInfo[playerid][pFegyver])
				return SCM(playerid, COL_LRED, "Van a kezedben fegyver, elõször rakd el!");
			
			if(Fegyver_Lista[listitem][1][0] > 0 && SameWeaponSlot(PlayerInfo[playerid][pFegyverek][aWeaponSlotok[ Fegyver_Lista[listitem][1][0] ]], Fegyver_Lista[listitem][1][0]) && PlayerInfo[playerid][pMegerosites] != playerid)
			{
				SCM(playerid, COL_LRED, "Ezen a sloton már van fegyvered! Biztos, hogy felül akarod írni? Ha igen válaszd ki megint az adott fegyvert!");
				PlayerInfo[playerid][pMegerosites] = playerid;
				return true;
			}
			
			if(Fegyver_Lista[listitem][1][0] == -2 && (PlayerInfo[playerid][pBoltCucc][ BL_C4 ] + 1) > 2)
				return SCM(playerid, COL_LRED, "Egyszerre maximum 2 Composition 4 fér el nálad!");
				
			if(Fegyver_Lista[listitem][1][0] == NINCS && PlayerInfo[playerid][pPancel] > 70.0)
				return SCM(playerid, COL_LRED, "Jelenleg is van rajtad egy alig használt páncél!");
			
			GiveMoney(playerid,-Fegyver_Lista[listitem][3][0]);
			CegPenz(BIZ_FEGYVER, (Fegyver_Lista[listitem][3][0]/2));
			PlayerInfo[playerid][pMegerosites] = NINCS;
			
			if(Fegyver_Lista[listitem][1][0] == NINCS) SetArmour(playerid, Fegyver_Lista[listitem][2][0]);
			else if(Fegyver_Lista[listitem][1][0] == -2) PlayerInfo[playerid][pBoltCucc][ BL_C4 ] += Fegyver_Lista[listitem][2][0];
			else GiveWeapon(playerid, Fegyver_Lista[listitem][1][0], Fegyver_Lista[listitem][2][0], false, false);
			
			if(Fegyver_Lista[listitem][1][0] != NINCS)
			{
				SFM(playerid, COL_VZOLD, "Sikeresen megvetted a következõ fegyvert: "#COL_MKEK"%s", Fegyver_Lista[listitem][0]);
				SFM(playerid, COL_VZOLD, "Ára: "#COL_MKEK"%s"#COL_FEHER"$. Töltényszám: "#COL_MKEK"%d"#COL_FEHER"db", FormatNumber(Fegyver_Lista[listitem][3][0], 0, ','), Fegyver_Lista[listitem][2][0]);
			
			} else {
			
				SFM(playerid, COL_VZOLD, "Sikeresen vettél egy Golyóálló mellényt "#COL_MKEK"%s"#COL_FEHER"$-ért!", FormatNumber(Fegyver_Lista[listitem][3][0], 0, ','));
			}
		}
	}
    return false;
}

/*--------------------------------- [ OnDialogResponse vége! ] ---------------------------------------*/

stock Szukseglet(playerid, Float:eh = 0.0, Float:szuk = 0.0)
{
	if(eh != 0.0)
	{
	
		PlayerInfo[playerid][pEhseg] += eh;
		
		if(PlayerInfo[playerid][pEhseg] < 0.0) PlayerInfo[playerid][pEhseg] = 0.0;
		else if(PlayerInfo[playerid][pEhseg] > 100.0) PlayerInfo[playerid][pEhseg] = 100.0;
		
		SetPlayerProgressBarValue(playerid, EhsegBar[playerid], PlayerInfo[playerid][pEhseg]);
		UpdatePlayerProgressBar(playerid, EhsegBar[playerid]);
		
		//if(PlayerInfo[playerid][pKellTD][0])	
		//HideProgressBarForPlayer(playerid, EhsegBar[playerid]);
	}
	
	if(szuk != 0.0)
	{
		PlayerInfo[playerid][pVizelet] += szuk;
		
		if(PlayerInfo[playerid][pVizelet] < 0.0) PlayerInfo[playerid][pVizelet] = 0.0;
		else if(PlayerInfo[playerid][pVizelet] > 100.0) PlayerInfo[playerid][pVizelet] = 100.0;
		
		SetPlayerProgressBarValue(playerid, VizeletBar[playerid], PlayerInfo[playerid][pVizelet]);
		UpdatePlayerProgressBar(playerid, VizeletBar[playerid]);
		
		//if(PlayerInfo[playerid][pKellTD][0])
		//HideProgressBarForPlayer(playerid, VizeletBar[playerid]);
	}
}

stock JatekosIDSzamlaszam(szamlaszam) //visszatér a játékos IDjével
{
	new visszateres = -1;
	foreach(Player, playerid)
	{
		if(Belepve(playerid) && (PlayerInfo[playerid][pBsz] == szamlaszam))
		{
			visszateres = playerid;
			break;
		}
	}
	return visszateres;
}

stock AjtoZar(playerid, carid, bool:kinyit=false)
{
	if(!kinyit)
	{
		vInfo[carid][vZarva] = true;
		GameTextForPlayer(playerid, "~w~Jármû ~r~bezárva", 5000, 5);
		Cselekves(playerid, "bezárta a jármû ajtaját", 1);
	} else {
		vInfo[carid][vZarva] = false;
		GameTextForPlayer(playerid, "~w~Jármû ~g~kinyitva", 5000, 5);
		Cselekves(playerid, "kinyitotta a jármû ajtaját", 1);
	}
	
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			if(!kinyit)
				SetVehicleParamsForPlayer(vInfo[carid][vID], i, 0, 1);
			else
				SetVehicleParamsForPlayer(vInfo[carid][vID], i, 0, 0);
		}
	}
	return true;
}

stock IsHelyesNev(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        new player[24], alahuzasok = 0;
        GetPlayerName(playerid,player,24);

		new cenzura[3][10] = { "buzi", "kocsog", "hulye" };

		for(new x = 0; x < sizeof(cenzura); x++)
		{
			if(strfind(player, cenzura[x], false) != -1)
				return false;
		}

        for(new n = 0; n < strlen(player); n++)
        {
        	if(player[n] == ']' || player[n] == '[' || player[n] == '_' && n == 0 || player[n] == '_' && n == (strlen(player) - 1))
				return false;
        	if(player[n] == '_')
			{
				if(player[n-1] == '_' || player[n+1] == '_')
					return false;
				else
					alahuzasok++;
			}
        }
        if(alahuzasok < 1 || alahuzasok > 2)
            return false;
    }
    return true;
}

stock NagyKezdobetusNev(playerid)
{
	if(!IsPlayerConnected(playerid)) 
		return false;

	new nev32[MAX_PLAYER_NAME];
	nev32 = JatekosNev(playerid);

	for(new n = 0; n < strlen(nev32); n++)
	{
		if(n == 0 && nev32[n] == chrtolower(nev32[n]))
			return false;
		if(nev32[n] == '_' && n > 0 && nev32[n+1] == chrtolower(nev32[n+1]))
			return false;
		//if(n > 0 && nev[n] != '_' && nev[n-1] != '_' && nev[n] != chrtolower(nev[n])) // Hogy a többi betü kisbetü-e
		//	return 0;
	}

	return true;
}

stock ProxDetector(Float:radi, playerid, string[], col1, col2, col3, col4, col5, bool:ret = false)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:x, Float:y, Float:z;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		foreach(Player, i)
		{
			if(Belepve(i))
			{
				if(ret && i == playerid) continue;
				if(!PlayerInfo[i][pmindenthall])
				{
				    new VW = GetPlayerVirtualWorld(playerid);
				    new VW2 = GetPlayerVirtualWorld(i);
					GetPlayerPos(i, x, y, z);
					tempposx = (oldposx -x);
					tempposy = (oldposy -y);
					tempposz = (oldposz -z);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col1, string);
						}
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col2, string);
						}
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col3, string);
						}
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col4, string);
						}
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col5, string);
						}
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}
	return true;
}

stock ProxDetectorOOC(Float:radi, playerid, string[], col1, col2, col3, col4, col5, bool:ret = false)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:x, Float:y, Float:z;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		foreach(Player, i)
		{
			if(Belepve(i))
			{
				if(ret && i == playerid) continue;
				if(PlayerInfo[i][pTog][2]) continue;
				
				if(!PlayerInfo[i][pmindenthall])
				{
				    new VW = GetPlayerVirtualWorld(playerid);
				    new VW2 = GetPlayerVirtualWorld(i);
					GetPlayerPos(i, x, y, z);
					tempposx = (oldposx -x);
					tempposy = (oldposy -y);
					tempposz = (oldposz -z);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col1, string);
						}
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col2, string);
						}
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col3, string);
						}
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col4, string);
						}
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						if(VW == VW2)
						{
							SendClientMessage(i, col5, string);
						}
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}
	return true;
}

stock ProxDetectorEx(Float:radi, Float:oldposx, Float:oldposy, Float:oldposz, string[], col1, col2, col3, col4, col5, bool:ret = false)
{
	new Float:x, Float:y, Float:z;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	//radi = 2.0; //Trigger Radius
	foreach(Player, i)
	{
		if(Belepve(i))
		{
			if(ret) continue;
			if(!PlayerInfo[i][pmindenthall])
			{
			    new VW2 = GetPlayerVirtualWorld(i);
				new VW = VW2;   //egyszerûbb így megírni
				GetPlayerPos(i, x, y, z);
				tempposx = (oldposx -x);
				tempposy = (oldposy -y);
				tempposz = (oldposz -z);
				if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				{
					if(VW == VW2)
					{
						SendClientMessage(i, col1, string);
					}
				}
				else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				{
					if(VW == VW2)
					{
						SendClientMessage(i, col2, string);
					}
				}
				else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
					if(VW == VW2)
					{
						SendClientMessage(i, col3, string);
					}
				}
				else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
					if(VW == VW2)
					{
						SendClientMessage(i, col4, string);
					}
				}
				else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
					if(VW == VW2)
					{
						SendClientMessage(i, col5, string);
					}
				}
			}
			else
			{
				SendClientMessage(i, col1, string);
			}
		}
	}
	return true;
}

stock IsAHajo(vmodel)
{
	//new model = GetVehicleModel(carid);
	new hajok[10] = {430, 446, 452, 453, 454, 472, 473, 484, 493, 595};
	for(new u = 0; u < sizeof(hajok); u++)
	{
		if(hajok[u] == vmodel)
			return true;
	}
	return false;
}

stock IsARepulo(vmodel)
{
	//new model = GetVehicleModel(carid);
	new repcsik[20] = {417,425,447,460,469,476,487,488,497,511,512,513,519,520,548,553,563,577,592,593};
	for(new u = 0; u < sizeof(repcsik); u++)
	{
		if(repcsik[u] == vmodel)
			return true;
	}
	return false;
}

stock bool:IsAMotor(vmodel)
{
	new motorok[11] = {448, 462, 581, 522, 461, 521, 523, 463, 586, 468, 471},
		i = -1;
	
	for(;++i < sizeof(motorok);)
	{
		if(motorok[i] == vmodel)
		{
			return true;
		}
	}
	
	return false;
}

stock IsABicikli(vmodel)
{
	new biciklik[3] = {481, 509, 510};
	for(new u = 0; u < sizeof(biciklik); u++)
	{
		if(biciklik[u] == vmodel)
			return true;
	}
	return false;
}

stock IsAKocsi(vmodel)
{
	if(!IsABicikli(vmodel) && !IsAMotor(vmodel) && !IsARepulo(vmodel) && !IsAHajo(vmodel))
		return true;
	
	return false;
}

public OnPlayerText(playerid, text[])
{
	if(egyezik(text,"!bulletflood"))
	{
		SCM(playerid,COL_LRED,"Ha csak letesztelted akkor rá basztál mert ezért nincs UB! Szia ;) Üdv. Hiroshi");
		ServerBan(playerid,0,"[AC] Bullet Flood", NINCS, true, true, true);
		return 0;
	}
	if(!Belepve(playerid))
	{
		SCM(playerid, COL_MKEK, "Kérlek elõször jelentkezz be, vagy regisztrálj a "#COL_MKEK"http://seerpg.eu"#COL_FEHER" oldalon!");
		SelectTextDraw(playerid, 0xF7C25EAA);
		return false;
	}
	
	if(PlayerInfo[playerid][pSzunetel])
		CallLocalFunction("OnPlayerPause", "dd", playerid, 0);
	
	/*if(Bortonben(playerid) == 3) // csak aj-ben, pd-n stb ne xd
	{
		new bool:ok = false, ido;
		if(!strcmp(PlayerInfo[playerid][pAJ_RandStr], text, false) && strlen(text) > 8)
		{
			ok = true;
			ido = Rand(2, 15);
			if((PlayerInfo[playerid][pJailIdo] - ido) > 0) {
				PlayerInfo[playerid][pJailIdo] -= ido;
			} else
				Borton(playerid, 0);
		}
		PlayerInfo[playerid][pAJ_Randtime] = gettime();
		format(PlayerInfo[playerid][pAJ_RandStr], RANDOM_STRING_AJ, "%s", RandomString(RANDOM_STRING_AJ));
		
		if(ok) {
			SFM(playerid, COL_MKEK, "Reakció teszt "#COL_GREEN"sikeres,"#COL_FEHER" AdminJail idõd csökkentve "#COL_MKEK"%d"#COL_FEHER" másodperccel!", ido);
			SFM(playerid, COL_MKEK, "Kérlek most írd be a következõ karaktereket: "#COL_MKEK"%s", PlayerInfo[playerid][pAJ_RandStr]);
		} else {
			SFM(playerid, COL_MKEK, "Reakció teszt "#COL_LRED"sikertelen!"#COL_FEHER" Kérlek próbálkozz újra a következõ karakterekkel: "#COL_MKEK"%s", PlayerInfo[playerid][pAJ_RandStr]);
		}
		
		return false;
	}*/
	
	new str[256];
	if(!OOC_Ellenorzes(playerid, "Text", text))
		return false;
		
	new shid = PlayerInfo[playerid][pSegelyhivas];
	if(shid == 1)
	{
		format(PlayerInfo[playerid][pSegelyhivasOk], 128, "%s", text);
		PlayerInfo[playerid][pSegelyhivas] = 2;
		SendClientMessage(playerid, COLOR_YELLOW, "Rendben van. Megmondaná röviden mi történt ?");
		return false;
	}
	if(shid == 2)
	{
		format(PlayerInfo[playerid][pSegelyhivasInfo], 128, "%s", text);
		new zona[MAX_PLAYER_NAME];
		GetPlayer2DZone(playerid, zona, MAX_ZONE_NAME);
		new bejelento[128];
		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			format(bejelento, sizeof(bejelento), "Bejelentõ: MASZK_ID%d", PlayerInfo[playerid][pMaszkID]);
		}
		else
		{
			format(bejelento, sizeof(bejelento), "Bejelentõ: %s", JatekosNev(playerid, true));
		}
		foreach(Player, id)
		{
			if(PlayerInfo[id][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[id][pFrakcio] == FRAKCIO_LSMD || PlayerInfo[id][pFrakcio] == FRAKCIO_LSFD || PlayerInfo[id][pFrakcio] == FRAKCIO_KATONA)
			{
				SendClientMessage(id, 0x00e1ffAA, "____|  911 Minden egységnek  |____");
				new string1[128], string2[128], string3[128], string4[128];
				format(string1, sizeof(string1), "%s | Telefonszám: %d", bejelento, PlayerInfo[playerid][ptelefonszam]);
				format(string2, sizeof(string2), "Helyszin: %s", zona);
				format(string3, sizeof(string3), "Szükséges egységek: %s", PlayerInfo[playerid][pSegelyhivasOk]);
				format(string4, sizeof(string4), "Információ: %s", PlayerInfo[playerid][pSegelyhivasInfo]);
				SendClientMessage(id, 0x00e1ffAA, string1);
				SendClientMessage(id, 0x00e1ffAA, string2);
				SendClientMessage(id, 0x00e1ffAA, string3);
				SendClientMessage(id, 0x00e1ffAA, string4);
			}
		}
		PlayerInfo[playerid][pSegelyhivas] = 0;
		return false;
	}
	
	if(Beirhatjahogyigen[playerid] > 0)
	{
		if(egyezik(text,"igen"))
		{
		    new string[1024];
			if(PlayerInfo[playerid][pnem] == 1 && PlayerInfo[Hazassag[playerid]][pnem] == 2)
			{
				format(string, sizeof(string), "Pap: %s es %s házastársaknak nyilványítalak titeket...Férj & Feleség, megcsókolhatod.", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Pap: %s es %s házastársaknak nyilványítalak titeket...Férj & Feleség, megcsókolhatod.", JatekosNev(Hazassag[playerid]), JatekosNev(playerid));
				SendClientMessage(Hazassag[playerid], COLOR_WHITE, string);
				foreach(Player,i)
				{
					SendFormatMessage(i,COLOR_WHITE,"Házasság: Van egy új Házas Párunk, %s & %s összeházasodott", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				}
			}
			else if(PlayerInfo[playerid][pnem] == 1 && PlayerInfo[Hazassag[playerid]][pnem] == 1)
			{
				format(string, sizeof(string), "Pap: %s es %s meleg társaknak nyilványítalak titeket...Férj & Férj, megcsókolhatod.", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Pap: %s es %s meleg társaknak nyilványítalak titeket...Férj & Férj, megcsókolhatod.", JatekosNev(Hazassag[playerid]), JatekosNev(playerid));
				SendClientMessage(Hazassag[playerid], COLOR_WHITE, string);
				foreach(Player,i)
				{
					SendFormatMessage(i,COLOR_WHITE,"Házasság: Van egy új meleg Párunk, %s & %s összeházasodott.", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				}
			}
			else if(PlayerInfo[playerid][pnem] == 2 && PlayerInfo[Hazassag[playerid]][pnem] == 2)
			{
				format(string, sizeof(string), "Pap: %s es %s meleg társaknak nyilványítalak titeket...Feleség & Feleség, megcsókolhatod.", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				SendClientMessage(playerid, COLOR_WHITE, string);
				format(string, sizeof(string), "Pap: %s es %s meleg társaknak nyilványítalak titeket...Feleség & Feleség, megcsókolhatod.", JatekosNev(Hazassag[playerid]), JatekosNev(playerid));
				SendClientMessage(Hazassag[playerid], COLOR_WHITE, string);
				foreach(Player,i)
				{
					SendFormatMessage(i,COLOR_WHITE,"Házasság: Van egy új meleg Párunk, %s & %s összeházasodott.", JatekosNev(playerid), JatekosNev(Hazassag[playerid]));
				}
			}
			strmid(PlayerInfo[playerid][pHazasodvaVele],JatekosNev(Hazassag[playerid]),0,strlen(JatekosNev(Hazassag[playerid])),32);
			strmid(PlayerInfo[Hazassag[playerid]][pHazasodvaVele],JatekosNev(playerid),0,strlen(JatekosNev(playerid)),32);
			Hazassag[Hazassag[playerid]] = -1;
			Hazassag[playerid] = -1;
			Beirhatjahogyigen[playerid] = 0;
			return true;
		}
		if(egyezik(text,"nem"))
		{
			SCM(playerid,COL_LRED,"Elutasítottad a felkérést");
			SCM(Hazassag[playerid],COL_LRED,"Elutasította a felkérést!");
			Hazassag[Hazassag[playerid]] = -1;
			Hazassag[playerid] = -1;
			Beirhatjahogyigen[playerid] = 0;
			return true;
		}
		if(!egyezik(text,"igen") && !egyezik(text,"nem"))
		{
			SCM(playerid,COL_LRED,"IGEN VAGY NEM!");
			return 0;
		}
	}
	
	if(PlayerInfo[playerid][ptelefonal] && PlayerInfo[ playerid ][pTelefonVonalban])
	{
		if(PlayerInfo[playerid][ptelefonaloid] == DROG_TELEFONSZAM)
		{
			new Elfogad[5][32] = {"drog","drogmag","cucc","mag","ültetvény"};
			new Melyik[] = { 1, 2, 1, 2, 2 };
			
			new i = -1, talalt = -1;
			
			for(;++i < sizeof(Elfogad);)
			{
				//printf("Melyik: %s", Elfogad[i]);
				if(strfind(text, Elfogad[i], true) != -1)
					talalt = i;
			}
			
			//printf("Talált: %d", talalt);
			
			if(talalt == -1)
			{
				SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Nem értettem kristálytisztán, mi is kell akkor neked?");
				return false;
			}
			
			format(str, sizeof(str), "[Telefon] Valaki mondja: %s", text);
			ProxDetector(15.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			
			SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Milyen fajta cucc kellene?!");
			
			if(Melyik[talalt] == 1)
			{
				//COL_LRED
				format(str, sizeof(str), "%sMarihuana [%dg]\n%sKokain [%dg]\n%sHeroin [%dg]", (ServerInfo[0][sDrog][0] > 0 ? (COL_MKEK) : (COL_LRED)), ServerInfo[0][sDrog][0], (ServerInfo[0][sDrog][0] > 0 ? (COL_MKEK) : (COL_LRED)), ServerInfo[0][sDrog][1], (ServerInfo[0][sDrog][2] > 0 ? (COL_MKEK) : (COL_LRED)), ServerInfo[0][sDrog][2]);
				ShowPlayerDialog(playerid, DIALOG_DROG, DIALOG_STYLE_LIST, "Drog vétele", str, "Rendel", "Mégse");
			}
			else
				ShowPlayerDialog(playerid, DIALOG_DROGMAG, DIALOG_STYLE_LIST, "Mag rendelése", "Marihuana\nKokain\nHeroin", "Rendel", "Mégse");
			
			return false;
		}
		
		//PlayerInfo[playerid][pTelefonPenz]
		if(PlayerInfo[playerid][ptelefonaloid] >= 0 && PlayerInfo[ PlayerInfo[playerid][ptelefonaloid] ][ptelefonal] && PlayerInfo[playerid][pTelefonVonalban])
		{
			/*new penz = 3;
			
			if( PlayerInfo[playerid][pHivo] )
			{
				if(PlayerInfo[playerid][pTelefonPenz] < penz)
				{
					PlayerInfo[playerid][pTelefonPenz] = 0;
					cmd_hangup(playerid, "");
					return false;
				} else {
					PlayerInfo[playerid][pTelefonPenz] -= penz;
				}
			}*/
			//(PlayerInfo[playerid][pMaszkVisel] ? ("Valaki") : JatekosNev(playerid, true))
			if(PlayerInfo[playerid][pAlnevbe] == false)
			{
				format(str, sizeof(str), "[Telefon] %s mondja: %s", JatekosNev(playerid, true), text);
			}
			else
			{
				format(str, sizeof(str), "[Telefon] %s mondja: %s", PlayerInfo[playerid][pAlnev], text);
			}
			SendClientMessage(PlayerInfo[playerid][ptelefonaloid], COLOR_FADE1, str);
			
			SendFormatMessage(playerid, COLOR_FADE1, "[Telefon] Te mondod: %s", text);
			
			format(str, sizeof(str), "[Telefon] Valaki mondja: %s", text);
			ProxDetector(15.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5, true);
			return false;
			
		} else {
		
			SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs a vonal túlsó felén senki! (/h(angup))");
			return false;
		}
	}
	
	if(!PlayerInfo[playerid][pTimerFut] && !PlayerInfo[playerid][pFoglalt] && !PlayerInfo[playerid][pAduty] && !PlayerInfo[playerid][pMeghalt] && !PlayerInfo[playerid][pTog][9])
	{		
		if(GetPlayerState(playerid) == 1 && PlayerInfo[playerid][pTog][4] && GetPlayerAnimationIndex(playerid) != 1159 && GetPlayerAnimationIndex(playerid) != 1274 && PlayerInfo[playerid][pUsingLoopingAnim] == 0)//ha a beszéd animálás engedélyezett
		{
	        new time = strlen(text)*150;
			ApplyAnimation(playerid, "PED", "IDLE_CHAT", 3, 0, 0, 0, 0, time,1);
		}
	}

	if(!PlayerInfo[playerid][pAduty] && !PlayerInfo[playerid][pTog][9])
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
			new vid = JarmuID( GetPlayerVehicleID(playerid), playerid );
			
			if(IsAKocsi(vInfo[vid][vModel]) && !vInfo[vid][vAblakLetekerve])
			{
				if(!PlayerInfo[playerid][pMaszkVisel]) 
				{
					if(PlayerInfo[playerid][pAlnevbe] == false)
					{
						format(uzenet, sizeof(uzenet), "[Jármûben] %s mondja: %s", JatekosNev(playerid, true), text);
					}
					else
					{
						format(uzenet, sizeof(uzenet), "[Jármûben] %s mondja: %s", PlayerInfo[playerid][pAlnev], text);
					}
				}
				else
				{
					new maszkid[24];
					format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
					format(uzenet, sizeof(uzenet), "[Jármûben] %s mondja: %s", maszkid, text);
				}
				
				nformat(logstr, 256, "[Jármûben][%d]%s - %s", playerid, JatekosNev(playerid, false, true), text);
				Log(FILE_CHAT, logstr);
				
				format(uzenet,sizeof(uzenet),"%s",str_replace(":D","*nevet*",uzenet));
				format(uzenet,sizeof(uzenet),"%s",str_replace("xD","*nevet*",uzenet));
				format(uzenet,sizeof(uzenet),"%s",str_replace(":)","*mosolyog*",uzenet));
				format(uzenet,sizeof(uzenet),"%s",str_replace(":(","*szomorú*",uzenet));
				format(uzenet,sizeof(uzenet),"%s",str_replace(":P","*nyelvet ölt*",uzenet));
				format(uzenet,sizeof(uzenet),"%s",str_replace(";)","*kacsint*",uzenet));
				format(uzenet,sizeof(uzenet),"%s",str_replace(":@","*ideges*",uzenet));
				format(uzenet,sizeof(uzenet),"%s",str_replace(":O","*csodálkozik*",uzenet));
				format(uzenet,sizeof(uzenet),"%s",str_replace(":S","*rosszul van*",uzenet));
				format(uzenet,sizeof(uzenet),"%s",str_replace(":$","*elpirul*",uzenet));
				new kicsinalja[128];
				if(PlayerInfo[playerid][pMaszkVisel] == true)
				{
					format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
				}
				if(PlayerInfo[playerid][pAlnevbe] == true)
				{
					format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
				}
				if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
				{
					format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
				}
				if(strlen(uzenet) < 75)
				{
					foreach(Player, pid)
					{
						if(IsPlayerInVehicle(pid, GetPlayerVehicleID(playerid)))
						{
							SendClientMessage(pid, COLOR_FADE1, uzenet);
						}
					}
				}
				if(strlen(uzenet) > 74)
				{
				    new stringje[256];
					new nagystring[75];
					strmid(nagystring, uzenet, 75, strlen(uzenet));
					strdel(uzenet, 75, strlen(uzenet));
					foreach(Player, pid)
					{
						if(IsPlayerInVehicle(pid, GetPlayerVehicleID(playerid)))
						{
							format(stringje, sizeof(stringje), "%s...", uzenet);
							SendClientMessage(pid, COLOR_FADE1, stringje);
							format(stringje, sizeof(stringje), "...%s", stringje);
							SendClientMessage(pid, COLOR_FADE1, stringje);
						}
					}
				}
				
				return false;
				
			} else {
			
				if(!PlayerInfo[playerid][pMaszkVisel]) 
				{
					if(PlayerInfo[playerid][pAlnevbe] == false)
					{
						format(uzenet, sizeof(uzenet), "%s mondja: %s", JatekosNev(playerid, true), text);
					}
					else
					{
						format(uzenet, sizeof(uzenet), "%s mondja: %s", PlayerInfo[playerid][pAlnev], text);
					}
				}
				else
				{
					new maszkid[24];
					format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
					format(uzenet, sizeof(uzenet), "%s mondja: %s", maszkid, text);
				}
			}
		} else {
		
			if(!PlayerInfo[playerid][pMaszkVisel])
			{
					if(PlayerInfo[playerid][pAlnevbe] == false)
					{
						if(strlen(PlayerInfo[playerid][pAccent]) == 0)
							format(uzenet, sizeof(uzenet), "%s mondja: %s", JatekosNev(playerid, true), text);
						else
							format(uzenet, sizeof(uzenet), "%s [%s] mondja: %s", JatekosNev(playerid, true),PlayerInfo[playerid][pAccent], text);
					}
					else
					{
						if(strlen(PlayerInfo[playerid][pAccent]) == 0)
							format(uzenet, sizeof(uzenet), "%s mondja: %s", PlayerInfo[playerid][pAlnev], text);
						else
							format(uzenet, sizeof(uzenet), "%s [%s] mondja: %s", PlayerInfo[playerid][pAlnev],PlayerInfo[playerid][pAccent], text);
					}
			}
			else
			{
				new maszkid[24];
				format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
				format(uzenet, sizeof(uzenet), "%s [%s] mondja: %s", maszkid, PlayerInfo[playerid][pAccent], text);
			}
		}
		
		nformat(logstr, 128, "[%d]%s - %s", playerid, JatekosNev(playerid, false, true), text);
		Log(FILE_CHAT, logstr);
		format(uzenet,sizeof(uzenet),"%s",str_replace(":D","*nevet*",uzenet));
		format(uzenet,sizeof(uzenet),"%s",str_replace("xD","*nevet*",uzenet));
		format(uzenet,sizeof(uzenet),"%s",str_replace(":)","*mosolyog*",uzenet));
		format(uzenet,sizeof(uzenet),"%s",str_replace(":(","*szomorú*",uzenet));
		format(uzenet,sizeof(uzenet),"%s",str_replace(":P","*nyelvet ölt*",uzenet));
		format(uzenet,sizeof(uzenet),"%s",str_replace(";)","*kacsint*",uzenet));
		format(uzenet,sizeof(uzenet),"%s",str_replace(":@","*ideges*",uzenet));
		format(uzenet,sizeof(uzenet),"%s",str_replace(":O","*csodálkozik*",uzenet));
		format(uzenet,sizeof(uzenet),"%s",str_replace(":S","*rosszul van*",uzenet));
		format(uzenet,sizeof(uzenet),"%s",str_replace(":$","*elpirul*",uzenet));
		new kicsinalja[128];
		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
		}
		if(PlayerInfo[playerid][pAlnevbe] == true)
		{
			format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
		}
		if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
		{
			format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
		}
		new stringje[256];
		if(strlen(uzenet) < 75)
		{
			format(stringje, sizeof(stringje), "%s", uzenet);
			ProxDetector(15.0, playerid, stringje, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		if(strlen(uzenet) > 74)
		{
			new nagystring[75];
			strmid(nagystring, uzenet, 75, strlen(uzenet));
			strdel(uzenet, 75, strlen(uzenet));
			format(stringje, sizeof(stringje), "%s...", uzenet);
			ProxDetector(15.0, playerid, stringje, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			format(stringje, sizeof(stringje), "...%s (( %s ))", nagystring, kicsinalja);
			ProxDetector(15.0, playerid, stringje, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		
	} else {
	
		format(uzenet, sizeof(uzenet), "%s mondja OOC: (( %s ))", JatekosNev(playerid, true), text);
		nformat(logstr, 128, "[OOC][%d]%s - %s", playerid, JatekosNev(playerid, false, true), text);
		Log(FILE_CHAT, logstr);
		
		if(PlayerInfo[playerid][pAduty])
			ProxDetector(15.0, playerid, uzenet, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED, COLOR_RED);
		else if(PlayerInfo[playerid][pASduty])
			ProxDetector(15.0, playerid, uzenet, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
		else
			ProxDetector(15.0, playerid, uzenet, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	//SetPlayerChatBubble(playerid, text, COLOR_WHITE, 5, 5000);
	
	return 0;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(!Belepve(playerid))
		return false;
		
	return true;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!Belepve(playerid))
		return false;
	
	if(PlayerInfo[playerid][pSzunetel])
		CallLocalFunction("OnPlayerPause", "dd", playerid, 0);

	new str[256];
	if(!success)
	{
		format(str, sizeof(str), "[%d]%s - %s", playerid, JatekosNev(playerid), cmdtext);
		Log(FILE_PARANCS_SIKERTELEN, str);
		return SCM(playerid, COL_MKEK, "Nincs ilyen parancs!");
	}
	
	format(str, sizeof(str), "[%d]%s - %s", playerid, JatekosNev(playerid), cmdtext);
	Log(FILE_PARANCS, str);
	return true;
}

//========================================[ SQL Mentések ] ============================

funkcio AdatMentes( idx )
{
	if(PlayerInfo[idx][pbelepve])
	{
		new Float:pPos[4], int, vw, query[3072], str[128];//Jelenleg átlag 1301 karakter a string... ne legyen sok mentés..
		
		if(PlayerInfo[idx][pPaintBall][0] != 0)
		{
			vw = CegInfo[ BIZ_PB ][cVw][0];
			int = CegInfo[ BIZ_PB ][cInt][0];
			
			pPos[0] = CegInfo[ BIZ_PB ][cPosBe][0];
			pPos[1] = CegInfo[ BIZ_PB ][cPosBe][1];
			pPos[2] = CegInfo[ BIZ_PB ][cPosBe][2];
			pPos[3] = CegInfo[ BIZ_PB ][cPosBe][3];
			
		} else {
		
			GetPlayerPos(idx, pPos[0], pPos[1], pPos[2]);
			GetPlayerFacingAngle(idx, pPos[3]);
			
			vw = GetPlayerVirtualWorld(idx);
			int = GetPlayerInterior(idx);
		}
		
		format(query, sizeof(query), "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET ");
		//MySQLUpdateSTR(query, "pAlnev", PlayerInfo[idx][pAlnev]);
		//MySQLUpdateINT(query, "pOnline", online);
		MySQLUpdateINT(query, "pUtoljara", gettime());
		MySQLUpdateINT(query, "penz", PlayerInfo[idx][ppenz]);
		MySQLUpdateINT(query, "skin", PlayerInfo[idx][pskin]);
		MySQLUpdateINT(query, "szint", PlayerInfo[idx][pjatekosszint]);
		MySQLUpdateINT(query, "interior", int);
		MySQLUpdateINT(query, "vw", vw);
		MySQLUpdateINT(query, "jail", PlayerInfo[idx][pjail]);
		MySQLUpdateINT(query, "pJailIdo", PlayerInfo[idx][pJailIdo]);
		MySQLUpdateINT(query, "halal", PlayerInfo[idx][phalal]);
		MySQLUpdateINT(query, "admin", PlayerInfo[idx][padmin]);
		MySQLUpdateINT(query, "pAS", PlayerInfo[idx][pAS]);
		MySQLUpdateSTR(query, "pDefense", PlayerInfo[idx][pDefense]);
		MySQLUpdateINT(query, "bankszamla", PlayerInfo[idx][pBsz]);
		MySQLUpdateINT(query, "bankszamlaegyenleg", PlayerInfo[idx][pBszPenz]);
		MySQLUpdateINT(query, "bankszamlapin", PlayerInfo[idx][pBszPin]);
		MySQLUpdateFLOAT(query, "posx", pPos[0]);
		MySQLUpdateFLOAT(query, "posy", pPos[1]);
		MySQLUpdateFLOAT(query, "posz", pPos[2]);
		MySQLUpdateFLOAT(query, "angle", pPos[3]);
		MySQLUpdateFLOAT(query, "pPancel", PlayerInfo[idx][pPancel]);
		MySQLUpdateINT(query, "pHitman", PlayerInfo[idx][pHitman]);
		MySQLUpdateSTR(query, "pHitmanNev", PlayerInfo[idx][pHitmanNev]);
		MySQLUpdateINT(query, "regisztracio", PlayerInfo[idx][pregisztracio]);
		
		MySQLUpdateINT(query, "pfrakcio", PlayerInfo[idx][pFrakcio]);
		MySQLUpdateINT(query, "prang", PlayerInfo[idx][prang]);
		
		MySQLUpdateINT(query, "pszintlepesperc", PlayerInfo[idx][pszintlepesperc]);
		MySQLUpdateINT(query, "pszintlepesora", PlayerInfo[idx][pszintlepesora]);
		MySQLUpdateINT(query, "pszintlepeshez", PlayerInfo[idx][pszintlepeskell]);
		MySQLUpdateINT(query, "ptelefonszam", PlayerInfo[idx][ptelefonszam]);
		//ptelefonszam
		//pjatszottperc
		//pjatszottora
		//pszintlepeshez
		MySQLUpdateINT(query, "pnem", PlayerInfo[idx][pnem]);
		MySQLUpdateINT(query, "peletkor", PlayerInfo[idx][peletkor]);
		MySQLUpdateINT(query, "pszarmazas", PlayerInfo[idx][pszarmazas]);
		//paktivalva
		MySQLUpdateINT(query, "phaz", PlayerInfo[idx][phaz]);
		MySQLUpdateSTR(query, "pFegyverek", GetUserWeapons(idx));
		MySQLUpdateSTR(query, "pToltenyek", GetUserWeaponsAmmo(idx));
		
		format(str, sizeof(str), "%d|%s|%s|%s", Korozes[idx][krSzint], Korozes[idx][krNev], Korozes[idx][krKiadta], Korozes[idx][krOka]);
		MySQLUpdateSTR(query, "pKorozes", str);
		MySQLUpdateINT(query, "pPremiumPont", PlayerInfo[idx][pPremiumPont]);
		MySQLUpdateINT(query, "pVas", PlayerInfo[idx][pVas]);
		MySQLUpdateINT(query, "pMaterial", PlayerInfo[idx][pMaterial]);
		MySQLUpdateINT(query, "pHeroin", PlayerInfo[idx][pHeroin]);
		MySQLUpdateINT(query, "pKokain", PlayerInfo[idx][pKokain]);
		MySQLUpdateINT(query, "pMarihuana", PlayerInfo[idx][pMarihuana]);
		MySQLUpdateINT(query, "pFegyverSkill", PlayerInfo[idx][pFegyverSkill]);
		MySQLUpdateINT(query, "pFizetesIdo", PlayerInfo[idx][pFizetesIdo]);
		MySQLUpdateINT(query, "pFizetes", PlayerInfo[idx][pFizetes]);
		MySQLUpdateINT(query, "pJatszottOra", PlayerInfo[idx][pJatszottOra]);
		MySQLUpdateINT(query, "pGPS", PlayerInfo[idx][pGPSV]);
		MySQLUpdateINT(query, "pKotszer", PlayerInfo[idx][pKotszer]);
		MySQLUpdateINT(query, "pTelefonPenz", PlayerInfo[idx][pTelefonPenz]);
		MySQLUpdateINT(query, "pMunka1", PlayerInfo[idx][pMunka1]);
		MySQLUpdateINT(query, "pMunka2", PlayerInfo[idx][pMunka2]);
		MySQLUpdateINT(query, "pTelefonKonyv", PlayerInfo[idx][pTelefonKonyv]);
		MySQLUpdateINT(query, "pExpLegal", PlayerInfo[idx][pExp][1]);
		MySQLUpdateINT(query, "pExpIllegal", PlayerInfo[idx][pExp][3]);
		MySQLUpdateINT(query, "pDutySkin", PlayerInfo[idx][pDutySkin]);
		MySQLUpdateSTR(query, "pEngedely", EngedelyStr(idx));//autó, motor, kamion stb
		MySQLUpdateINT(query, "pHatizsak", PlayerInfo[idx][pHatizsak]);
		MySQLUpdateINT(query, "pSzendvics", PlayerInfo[idx][pSzendvics]);
		MySQLUpdateINT(query, "pMaszk", PlayerInfo[idx][pMaszk]);
		
		MySQLUpdateINT(query,"pLeader", PlayerInfo[idx][pLeader]);
		MySQLUpdateINT(query,"pSWAT", PlayerInfo[idx][pSWAT]);
		MySQLUpdateINT(query,"pSWATRang", PlayerInfo[idx][pSWATRang]);
		MySQLUpdateSTR(query,"pAdminAlnev", PlayerInfo[idx][pAdminAlnev]);
		MySQLUpdateINT(query, "pJarmuKolcson", PlayerInfo[idx][pJarmuKolcson]);
		MySQLUpdateINT(query, "pBox", PlayerInfo[idx][pBox]);
		MySQLUpdateINT(query, "pElbow", PlayerInfo[idx][pElbow]);
		MySQLUpdateINT(query, "pKungfu", PlayerInfo[idx][pKungfu]);
		MySQLUpdateINT(query, "pKneehead", PlayerInfo[idx][pKneehead]);
		MySQLUpdateINT(query, "pGrabkick", PlayerInfo[idx][pGrabkick]);
		
		MySQLUpdateINT(query,"pSM",PlayerInfo[idx][pSM]);
		MySQLUpdateINT(query,"pSMrang",PlayerInfo[idx][pSMrang]);
		MySQLUpdateINT(query,"pCsipogo",PlayerInfo[idx][pCsipogo]);
		MySQLUpdateINT(query,"pKanna",PlayerInfo[idx][pKanna]);
		MySQLUpdateINT(query,"pKannaBenzin",PlayerInfo[idx][pKannaBenzin]);
		
		MySQLUpdateINT(query,"pSKV",PlayerInfo[idx][pSKV]);
		MySQLUpdateINT(query,"pSKVrang",PlayerInfo[idx][pSKVrang]);
		
		format(str, sizeof(str), "%s|%s", PlayerInfo[idx][pJailAdta], PlayerInfo[idx][pJailOk]);
		MySQLUpdateSTR(query, "BortonInfo", str);
		MySQLUpdateSTR(query, "pBoltCucc", GetPlayerBoltCucc( idx ));
		MySQLUpdateINT(query, "pSzemelyi", PlayerInfo[idx][pSzemelyi]);
		MySQLUpdateINT(query, "pValaszok", PlayerInfo[idx][pValaszok]);
		
		format(str, sizeof(str), "%d,%d,%d", PosExt(PlayerInfo[idx][pDrogAnyag]));
		MySQLUpdateSTR(query, "pDrogAnyag", str);
		
		format(str,sizeof(str),"%d",DivatInfo[SLOT_SAPKA][idx][dVan]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SAPKA][idx][dPosX],DivatInfo[SLOT_SAPKA][idx][dPosY],DivatInfo[SLOT_SAPKA][idx][dPosZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SAPKA][idx][dRotX],DivatInfo[SLOT_SAPKA][idx][dRotY],DivatInfo[SLOT_SAPKA][idx][dRotZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SAPKA][idx][dScaleX],DivatInfo[SLOT_SAPKA][idx][dScaleY],DivatInfo[SLOT_SAPKA][idx][dScaleZ]);
		format(str,sizeof(str),"%s,%d",str,DivatInfo[SLOT_SAPKA][idx][dmodelid]);
		MySQLUpdateSTR(query,"Divat_Sapka",str);

		format(str,sizeof(str),"%d",DivatInfo[SLOT_SZEMUVEG][idx][dVan]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SZEMUVEG][idx][dPosX],DivatInfo[SLOT_SZEMUVEG][idx][dPosY],DivatInfo[SLOT_SZEMUVEG][idx][dPosZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SZEMUVEG][idx][dRotX],DivatInfo[SLOT_SZEMUVEG][idx][dRotY],DivatInfo[SLOT_SZEMUVEG][idx][dRotZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_SZEMUVEG][idx][dScaleX],DivatInfo[SLOT_SZEMUVEG][idx][dScaleY],DivatInfo[SLOT_SZEMUVEG][idx][dScaleZ]);
		format(str,sizeof(str),"%s,%d",str,DivatInfo[SLOT_SZEMUVEG][idx][dmodelid]);
		MySQLUpdateSTR(query,"Divat_Szemuveg",str);

		format(str,sizeof(str),"%d",DivatInfo[SLOT_KARORA][idx][dVan]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_KARORA][idx][dPosX],DivatInfo[SLOT_KARORA][idx][dPosY],DivatInfo[SLOT_KARORA][idx][dPosZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_KARORA][idx][dRotX],DivatInfo[SLOT_KARORA][idx][dRotY],DivatInfo[SLOT_KARORA][idx][dRotZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_KARORA][idx][dScaleX],DivatInfo[SLOT_KARORA][idx][dScaleY],DivatInfo[SLOT_KARORA][idx][dScaleZ]);
		format(str,sizeof(str),"%s,%d",str,DivatInfo[SLOT_KARORA][idx][dmodelid]);
		MySQLUpdateSTR(query,"Divat_Karora",str);

		format(str,sizeof(str),"%d",DivatInfo[SLOT_MASZK][idx][dVan]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_MASZK][idx][dPosX],DivatInfo[SLOT_MASZK][idx][dPosY],DivatInfo[SLOT_MASZK][idx][dPosZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_MASZK][idx][dRotX],DivatInfo[SLOT_MASZK][idx][dRotY],DivatInfo[SLOT_MASZK][idx][dRotZ]);
		format(str,sizeof(str),"%s,%.3f,%.3f,%.3f",str,DivatInfo[SLOT_MASZK][idx][dScaleX],DivatInfo[SLOT_MASZK][idx][dScaleY],DivatInfo[SLOT_MASZK][idx][dScaleZ]);
		format(str,sizeof(str),"%s,%d",str,DivatInfo[SLOT_MASZK][idx][dmodelid]);
		MySQLUpdateSTR(query,"Divat_Maszk",str);
		
		MySQLUpdateSTR(query,"pHazasodvaVele",PlayerInfo[idx][pHazasodvaVele]);
		
		format(str,sizeof(str),"%d,%d,%d,%d,%d,%d,%d,%d,%d",PlayerInfo[idx][pFegyvertVasarolt][0],PlayerInfo[idx][pFegyvertVasarolt][1],PlayerInfo[idx][pFegyvertVasarolt][2],PlayerInfo[idx][pFegyvertVasarolt][3],PlayerInfo[idx][pFegyvertVasarolt][4],PlayerInfo[idx][pFegyvertVasarolt][5],PlayerInfo[idx][pFegyvertVasarolt][6],PlayerInfo[idx][pFegyvertVasarolt][7],PlayerInfo[idx][pFegyvertVasarolt][8]);
		MySQLUpdateSTR(query,"pFegyvertVasarolt",str);
		
		format(str,sizeof(str),"%d,%d,%d,%d,%d,%d,%d,%d,%d",PlayerInfo[idx][pNPCSzobaAll][0],PlayerInfo[idx][pNPCSzobaAll][1],PlayerInfo[idx][pNPCSzobaAll][2],PlayerInfo[idx][pNPCSzobaAll][3],PlayerInfo[idx][pNPCSzobaAll][4],PlayerInfo[idx][pNPCSzobaAll][5],PlayerInfo[idx][pNPCSzobaAll][6],PlayerInfo[idx][pNPCSzobaAll][7],PlayerInfo[idx][pNPCSzobaAll][8]);
		MySQLUpdateSTR(query,"pNPCSzobaAll",str);


		format(str,sizeof(str),"%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d",PlayerInfo[idx][pTog][0],PlayerInfo[idx][pTog][1],PlayerInfo[idx][pTog][2],PlayerInfo[idx][pTog][3],PlayerInfo[idx][pTog][4],PlayerInfo[idx][pTog][5],PlayerInfo[idx][pTog][6],PlayerInfo[idx][pTog][7],PlayerInfo[idx][pTog][8],PlayerInfo[idx][pTog][9],PlayerInfo[idx][pTog][10],PlayerInfo[idx][pTog][11],PlayerInfo[idx][pTog][12],PlayerInfo[idx][pTog][13],PlayerInfo[idx][pTog][14]);
		MySQLUpdateSTR(query,"pTog",str);
		
		
		MySQLUpdateINT(query,"pKereskedo",PlayerInfo[idx][pKereskedo]);
		MySQLUpdateINT(query,"pHifi",PlayerInfo[idx][pHifi]);
		MySQLUpdateINT(query,"pLampa",PlayerInfo[idx][pLampa]);
		MySQLUpdateINT(query,"pHal",PlayerInfo[idx][pHal]);
		MySQLUpdateINT(query,"pClub",PlayerInfo[idx][pClub]);
		MySQLUpdateINT(query,"pFrakcioTiltas",PlayerInfo[idx][pFrakcioTiltas]);
		MySQLUpdateINT(query,"pReportTiltas",PlayerInfo[idx][pReportTiltas]);
		MySQLUpdateINT(query,"pFegyverTiltas",PlayerInfo[idx][pFegyverTiltas]);
		MySQLUpdateINT(query,"pAutoTiltas",PlayerInfo[idx][pAutoTiltas]);
		MySQLUpdateINT(query,"pASTiltas",PlayerInfo[idx][pASTiltas]);

		MySQLUpdateINT(query,"pLottounix",PlayerInfo[idx][pLottounix]);
		MySQLUpdateINT(query,"pLakcimkartya",PlayerInfo[idx][pLakcimkartya]);

		MySQLFinalUpdate(query, "id", PlayerInfo[idx][pID]);
		//printf("MySQL String: %d karakter", strlen(query));
	}
	
	return true;
}

stock TeruletMentesID( u )
{
	new tquery[1024], tadatok[64];
	if(tInfo[u][tVan])
	{
		format(tquery, sizeof(tquery), "UPDATE `"#MYSQL_TERULET_TABLA"` SET ");
		format(tadatok, 32, "%f,%f", tInfo[u][tMinPos][0], tInfo[u][tMinPos][1]);
		MySQLUpdateSTR(tquery, "MinPos", tadatok);
		format(tadatok, 32, "%f,%f", tInfo[u][tMaxPos][0], tInfo[u][tMaxPos][1]);
		MySQLUpdateSTR(tquery, "MaxPos", tadatok);
		MySQLUpdateINT(tquery, "Frakcio", tInfo[u][tFrakcio]);
		format(tadatok, 64, "%d,%d,%d,%d,%d", tInfo[u][tHaszon][0], tInfo[u][tHaszon][1], tInfo[u][tHaszon][2], tInfo[u][tHaszon][3], tInfo[u][tHaszon][4]);
		MySQLUpdateSTR(tquery, "Haszon", tadatok);
		MySQLUpdateINT(tquery, "HaszonIdo", tInfo[u][tHaszonIdo]);
		MySQLUpdateINT(tquery, "VarakozasIdo", tInfo[u][tVarakozasIdo]);
		MySQLFinalUpdate(tquery, "ID", u);
	}
	return true;
}

funkcio TeruletMentes()
{
	new u = -1, tquery[1024], tadatok[64];
	for(;++u < MAX_TERULET;)
	{
		if(tInfo[u][tVan])
		{
			format(tquery, sizeof(tquery), "UPDATE `"#MYSQL_TERULET_TABLA"` SET ");
			format(tadatok, 32, "%f,%f", tInfo[u][tMinPos][0], tInfo[u][tMinPos][1]);
	        MySQLUpdateSTR(tquery, "MinPos", tadatok);
			format(tadatok, 32, "%f,%f", tInfo[u][tMaxPos][0], tInfo[u][tMaxPos][1]);
	        MySQLUpdateSTR(tquery, "MaxPos", tadatok);
	        MySQLUpdateINT(tquery, "Frakcio", tInfo[u][tFrakcio]);
			format(tadatok, 64, "%d,%d,%d,%d,%d", tInfo[u][tHaszon][0], tInfo[u][tHaszon][1], tInfo[u][tHaszon][2], tInfo[u][tHaszon][3], tInfo[u][tHaszon][4]);
	        MySQLUpdateSTR(tquery, "Haszon", tadatok);
	        MySQLUpdateINT(tquery, "HaszonIdo", tInfo[u][tHaszonIdo]);
	        MySQLUpdateINT(tquery, "VarakozasIdo", tInfo[u][tVarakozasIdo]);
	        MySQLFinalUpdate(tquery, "ID", u);
		}
	}
	return true;
}

funkcio AutomataMentes()
{
	new DB:db = db_open(LSQL_ADATBAZIS);
	new objectid = 0, query[1024];
	for(;++objectid < MAX_AUTOMATA;)
	{
		if(AutomataInfo[objectid][auhasznalva])
		{
			format(query, sizeof(query), "UPDATE `"#LSQL_AUTOMATA_TABLA"` SET ");
			format(query, sizeof(query), "%s autipus = '%d',", query, AutomataInfo[objectid][autipus]);
			format(query, sizeof(query), "%s aupenz = '%d',", query, AutomataInfo[objectid][aupenz]);
			/*format(query, sizeof(query), "%s auposx = '%f',", query, AutomataInfo[objectid][aupos][0]);
			format(query, sizeof(query), "%s auposy = '%f',", query, AutomataInfo[objectid][aupos][1]);
			format(query, sizeof(query), "%s auposz = '%f',", query, AutomataInfo[objectid][aupos][2]);
			format(query, sizeof(query), "%s aurotx = '%f',", query, AutomataInfo[objectid][aupos][3]);
			format(query, sizeof(query), "%s auroty = '%f',", query, AutomataInfo[objectid][aupos][4]);
			format(query, sizeof(query), "%s aurotz = '%f'", query, AutomataInfo[objectid][aupos][5]);
			format(query, sizeof(query), "%s vw = '%d'", query, AutomataInfo[objectid][auVW]);
			format(query, sizeof(query), "%s int = '%d'", query, AutomataInfo[objectid][auInt]);*/
			format(query, sizeof(query), "%s WHERE id = '%d'", query, objectid);
			//mysql_function_query(sql_ID, query, false, "", "");
			//mysql_tquery(sql_ID, query, "", "");
			
			db_free_result(db_query(db, query));
		}
	}
	db_close(db);
	return true;
}

funkcio JarmuMentes()
{
	new Float:vhealth,
	vPanels2, vDoors2, vLights2, vTires2, query[1024], idx, fegyver[64], i = NINCS;

	foreach(Jarmuvek, id)
	{
		idx = JarmuID(id, INVALID_PLAYER_ID);
	    if(idx && vInfo[idx][vHasznalva] && vInfo[idx][vInsert])
	    {
			GetVehicleHealth(vInfo[idx][vID], vhealth);
			GetVehicleDamageStatus(vInfo[idx][vID], vPanels2, vDoors2, vLights2, vTires2);
			
	        format(query, sizeof(query), "UPDATE `"#MYSQL_JARMU_TABLA"` SET ");
			if(vUpdates[idx][vuTulaj])
			{
				MySQLUpdateSTR(query, "Tulaj", vInfo[idx][vTulaj]);
				MySQLUpdateINT(query, "TulajID", vInfo[idx][vTulajID]);
				vUpdates[idx][vuTulaj] = false;
			}
			
			if(vUpdates[idx][vuAr]) MySQLUpdateINT(query, "Ar", vInfo[idx][vAr]); vUpdates[idx][vuAr] = false;
			if(vUpdates[idx][vuModel]) MySQLUpdateINT(query, "Model", vInfo[idx][vModel]); vUpdates[idx][vuModel] = false;
			if(vUpdates[idx][vuMunka]) MySQLUpdateINT(query, "Munka", vInfo[idx][vMunka]); vUpdates[idx][vuMunka] = false;
			if(vUpdates[idx][vuSzin])
			{
				MySQLUpdateINT(query, "Szin1", vInfo[idx][vSzin1]);
				MySQLUpdateINT(query, "Szin2", vInfo[idx][vSzin2]);
				vUpdates[idx][vuSzin] = false;
			}
			if(vUpdates[idx][vuPos])
			{
				MySQLUpdateFLOAT(query, "VPosx", vInfo[idx][vPosx]);
				MySQLUpdateFLOAT(query, "VPosy", vInfo[idx][vPosy]);
				MySQLUpdateFLOAT(query, "VPosz", vInfo[idx][vPosz]);
				MySQLUpdateFLOAT(query, "VAngle", vInfo[idx][vAngle]);
				vUpdates[idx][vuPos] = false;
			}
			if(vUpdates[idx][vuElet]) MySQLUpdateFLOAT(query, "VElet", vhealth); vUpdates[idx][vuElet] = false;
	        if(vUpdates[idx][vuHiba]) MySQLUpdateINT(query, "VHiba", vInfo[idx][vHiba]); vUpdates[idx][vuHiba] = false;
	        if(vUpdates[idx][vuZarva]) MySQLUpdateINT(query, "VZarva", vInfo[idx][vZarva]); vUpdates[idx][vuZarva] = false;
			if(vUpdates[idx][vuRang]) MySQLUpdateINT(query, "VRang", vInfo[idx][vRang]); vUpdates[idx][vuRang] = false;
			
			MySQLUpdateFLOAT(query, "VKilometer", vInfo[idx][vKilometer]);
			MySQLUpdateFLOAT(query, "VUzemanyag", vInfo[idx][vUzemanyag]);
			if(vInfo[idx][vMunka] < MAX_FRAKCIO || vInfo[idx][vTulajID] != NINCS)
			{
				MySQLUpdateINT(query, "VPanels", vPanels2);
				MySQLUpdateINT(query, "VDoors", vDoors2);
				MySQLUpdateINT(query, "VLights", vLights2);
				MySQLUpdateINT(query, "VTires", vTires2);
			}
			
			//Jármûben lévõ tárgyak
			if(vUpdates[idx][vuVas]) MySQLUpdateINT(query, "vVas", vInfo[idx][vVas]); vUpdates[idx][vuVas] = false;
			if(vUpdates[idx][vuMaterial]) MySQLUpdateINT(query, "vMaterial", vInfo[idx][vMaterial]); vUpdates[idx][vuMaterial] = false;
			if(vUpdates[idx][vuHeroin]) MySQLUpdateINT(query, "vHeroin", vInfo[idx][vHeroin]); vUpdates[idx][vuHeroin] = false;
			if(vUpdates[idx][vuKokain]) MySQLUpdateINT(query, "vKokain", vInfo[idx][vKokain]); vUpdates[idx][vuKokain] = false;
			if(vUpdates[idx][vuMarihuana]) MySQLUpdateINT(query, "vMarihuana", vInfo[idx][vMarihuana]); vUpdates[idx][vuMarihuana] = false;
			
			if(vUpdates[idx][vuFegyver])
			{
				//Fegyver mentés
				fegyver[0] = EOS, i = NINCS;
				for(;++i < 5;)
				{
					if(vInfo[idx][vFegyver][i] > 47) { vInfo[idx][vFegyver][i] = 0; vInfo[idx][vTolteny][i] = 0; }
					format(fegyver, 64, "%s%d,", fegyver, vInfo[idx][vFegyver][i]);
				}
				
				fegyver[strlen(fegyver) - 1] = '\0';
				MySQLUpdateSTR(query, "vFegyver", fegyver);
				
				//Töltény mentés
				fegyver[0] = EOS, i = NINCS;
				for(;++i < 5;)
					format(fegyver, 64, "%s%d,", fegyver, vInfo[idx][vTolteny][i]);
				
				fegyver[strlen(fegyver) - 1] = '\0';
				MySQLUpdateSTR(query, "vTolteny", fegyver);
				vUpdates[idx][vuFegyver] = false;
			}
			
			MySQLUpdateINT(query, "vLastActive", vInfo[idx][vTLastActive]);
			if(vUpdates[idx][vuRendszam]) MySQLUpdateSTR(query, "vRendszam", vInfo[idx][vRendszam]); vUpdates[idx][vuRendszam] = false;
			if(vUpdates[idx][vuNeon]) MySQLUpdateINT(query, "vNeon", vInfo[idx][vNeon][0]); vUpdates[idx][vuNeon] = false;
			if(vUpdates[idx][vuMod])
			{
				MySQLUpdateINT(query, "vMod0", vInfo[idx][vMod][0]);
				MySQLUpdateINT(query, "vMod1", vInfo[idx][vMod][1]);
				MySQLUpdateINT(query, "vMod2", vInfo[idx][vMod][2]);
				MySQLUpdateINT(query, "vMod3", vInfo[idx][vMod][3]);
				MySQLUpdateINT(query, "vMod4", vInfo[idx][vMod][4]);
				MySQLUpdateINT(query, "vMod5", vInfo[idx][vMod][5]);
				MySQLUpdateINT(query, "vMod6", vInfo[idx][vMod][6]);
				MySQLUpdateINT(query, "vMod7", vInfo[idx][vMod][7]);
				MySQLUpdateINT(query, "vMod8", vInfo[idx][vMod][8]);
				MySQLUpdateINT(query, "vMod9", vInfo[idx][vMod][9]);
				MySQLUpdateINT(query, "vMod10", vInfo[idx][vMod][10]);
				MySQLUpdateINT(query, "vMod11", vInfo[idx][vMod][11]);
				MySQLUpdateINT(query, "vMod12", vInfo[idx][vMod][12]);
				vUpdates[idx][vuMod] = false;
			}
			if(vUpdates[idx][vuHidraulika]) MySQLUpdateINT(query, "vHidraulika", vInfo[idx][vHidraulika]); vUpdates[idx][vuHidraulika] = false;
			if(vUpdates[idx][vuMatrica]) MySQLUpdateINT(query, "vMatrica", vInfo[idx][vMatrica]); vUpdates[idx][vuMatrica] = false;
	        MySQLFinalUpdate(query, "ID", idx);
		}
	}
	return true;
}

funkcio FrakcioMentes()
{
	new fk, query[2048], pos[256];
	for(;++fk < MAX_FRAKCIO;)
	{
	    if(FInfo[fk][fVan])
	    {
			/*f = -1;
			for(;++f < 50;)
			{
				if((FInfo[fk][fFegyverek][f] && (FInfo[fk][fToltenyek][f] < 1)) || (!FInfo[fk][fFegyverek][f] && (FInfo[fk][fToltenyek][f] > 0)))
				{
					FInfo[fk][fFegyverek][f] = 0;
					FInfo[fk][fToltenyek][f] = 0;
				}
			}*/
			
			format(query, 2048, "UPDATE `"#MYSQL_FRAKCIO_TABLA"` SET ");
			if(FUpdates[fk][fuNev]) MySQLUpdateSTR(query, "FNev", FInfo[fk][fNev]); FUpdates[fk][fuNev] = false;
			if(FUpdates[fk][fuRang1]) MySQLUpdateSTR(query, "Rang1", FInfo[fk][fRang1]); FUpdates[fk][fuRang1] = false;
			if(FUpdates[fk][fuRang2]) MySQLUpdateSTR(query, "Rang2", FInfo[fk][fRang2]); FUpdates[fk][fuRang2] = false;
			if(FUpdates[fk][fuRang3]) MySQLUpdateSTR(query, "Rang3", FInfo[fk][fRang3]); FUpdates[fk][fuRang3] = false;
			if(FUpdates[fk][fuRang4]) MySQLUpdateSTR(query, "Rang4", FInfo[fk][fRang4]); FUpdates[fk][fuRang4] = false;
			if(FUpdates[fk][fuRang5]) MySQLUpdateSTR(query, "Rang5", FInfo[fk][fRang5]); FUpdates[fk][fuRang5] = false;
			if(FUpdates[fk][fuRang6]) MySQLUpdateSTR(query, "Rang6", FInfo[fk][fRang6]); FUpdates[fk][fuRang6] = false;
			if(FUpdates[fk][fuRang7]) MySQLUpdateSTR(query, "Rang7", FInfo[fk][fRang7]); FUpdates[fk][fuRang7] = false;
			if(FUpdates[fk][fuRang8]) MySQLUpdateSTR(query, "Rang8", FInfo[fk][fRang8]); FUpdates[fk][fuRang8] = false;
			if(FUpdates[fk][fuRang9]) MySQLUpdateSTR(query, "Rang9", FInfo[fk][fRang9]); FUpdates[fk][fuRang9] = false;
			if(FUpdates[fk][fuRang10]) MySQLUpdateSTR(query, "Rang10", FInfo[fk][fRang10]); FUpdates[fk][fuRang10] = false;
			if(FUpdates[fk][fuRang11]) MySQLUpdateSTR(query, "Rang11", FInfo[fk][fRang11]); FUpdates[fk][fuRang11] = false;
			if(FUpdates[fk][fuRang12]) MySQLUpdateSTR(query, "Rang12", FInfo[fk][fRang12]); FUpdates[fk][fuRang12] = false;
			if(FUpdates[fk][fuRang13]) MySQLUpdateSTR(query, "Rang13", FInfo[fk][fRang13]); FUpdates[fk][fuRang13] = false;
			if(FUpdates[fk][fuRang14]) MySQLUpdateSTR(query, "Rang14", FInfo[fk][fRang14]); FUpdates[fk][fuRang14] = false;
			if(FUpdates[fk][fuRang15]) MySQLUpdateSTR(query, "Rang15", FInfo[fk][fRang15]); FUpdates[fk][fuRang15] = false;
			if(FUpdates[fk][fuRang16]) MySQLUpdateSTR(query, "Rang16", FInfo[fk][fRang16]); FUpdates[fk][fuRang16] = false;
			if(FUpdates[fk][fuLegalis]) MySQLUpdateINT(query, "Legalis", FInfo[fk][fLegalis]); FUpdates[fk][fuLegalis] = false;
			
			if(FUpdates[fk][fuSzefObject])
			{
				MySQLUpdateINT(query, "SzefObject", FInfo[fk][fSzefObject]);
				
				format(pos, 256, "%f,%f,%f", PosExt(FInfo[fk][fSzefPos]));
				MySQLUpdateSTR(query, "SzefPos", pos);
				
				format(pos, 256, "%f,%f,%f", PosExt(FInfo[fk][fSzefPosR]));
				MySQLUpdateSTR(query, "SzefPosR", pos);
				
				MySQLUpdateINT(query, "VW", FInfo[fk][fVW]);
				MySQLUpdateINT(query, "Interior", FInfo[fk][fInterior]);
				FUpdates[fk][fuSzefObject] = false;
			}
			
			if(FUpdates[fk][fuSzefRang]) MySQLUpdateINT(query, "SzefRang", FInfo[fk][fSzefRang]); FUpdates[fk][fuSzefRang] = false;
			if(FUpdates[fk][fuPenz]) MySQLUpdateINT(query, "Penz", FInfo[fk][fPenz]); FUpdates[fk][fuPenz] = false;
			if(FUpdates[fk][fuMaterial]) MySQLUpdateINT(query, "Material", FInfo[fk][fMaterial]); FUpdates[fk][fuMaterial] = false;
			if(FUpdates[fk][fuHeroin]) MySQLUpdateINT(query, "Heroin", FInfo[fk][fHeroin]); FUpdates[fk][fuHeroin] = false;
			if(FUpdates[fk][fuKokain]) MySQLUpdateINT(query, "Kokain", FInfo[fk][fKokain]); FUpdates[fk][fuKokain] = false;
			if(FUpdates[fk][fuMarihuana]) MySQLUpdateINT(query, "Marihuana", FInfo[fk][fMarihuana]); FUpdates[fk][fuMarihuana] = false;
			
			if(FUpdates[fk][fuFegyverek])
			{
				MySQLUpdateSTR(query, "Fegyverek", GetFractionWeapons(fk));
				MySQLUpdateSTR(query, "Toltenyek", GetFractionAmmos(fk));
				FUpdates[fk][fuFegyverek] = false;
			}
			
			if(FUpdates[fk][fuFizetes]) MySQLUpdateSTR(query, "Fizetesek", GetFractionPay(fk)); FUpdates[fk][fuFizetes] = false;
			//if(FUpdates[fk][fuLimit])
			MySQLUpdateINT(query, "fLimit", FInfo[fk][fLimit]); //FUpdates[fk][fuLimit] = false;
			
			MySQLFinalUpdate(query, "ID", fk);
		}
	}
	return true;
}

funkcio BenzinkutMentes()
{
	new benzinkutid = 0, query[1024],tquery[128];
	for(;++benzinkutid < MAX_BENZINKUT;)
	{
		if(BenzinkutInfo[benzinkutid][bhasznalva])
		{
			format(tquery, sizeof(tquery), "UPDATE `"#MYSQL_BENZINKUTAK_TABLA"` SET ");
			format(query, sizeof(query), "%s bposx = '%f',", query, BenzinkutInfo[benzinkutid][bposx]);
			format(query, sizeof(query), "%s bposy = '%f',", query, BenzinkutInfo[benzinkutid][bposy]);
			format(query, sizeof(query), "%s bposz = '%f',", query, BenzinkutInfo[benzinkutid][bposz]);
			format(query, sizeof(query), "%s bbenzinar = '2$',", query, BenzinkutInfo[benzinkutid][bbenzinar]);
			format(query, sizeof(query), "%s bdieselar = '2$',", query, BenzinkutInfo[benzinkutid][bdieselar]);
			format(query, sizeof(query), "%s bbenzinmennyiseg = '%f',", query, BenzinkutInfo[benzinkutid][bbenzinmennyiseg]);
			format(query, sizeof(query), "%s bdieselmennyiseg = '%f',", query, BenzinkutInfo[benzinkutid][bdieselmennyiseg]);
			format(query, sizeof(query), "%s bradius = '%f'", query, BenzinkutInfo[benzinkutid][bradius]);
			format(query, sizeof(query), "%s WHERE id = '%d'", query, benzinkutid);
		}
	}
	return true;
}

funkcio HazMentes()
{	
	new hdb = -1, query[2048], drog[512], mellek = -1;

	for(;++hdb < MAX_HOUSE;)
	{
	    if(HazInfo[hdb][hasznalatban])
	    {
			format(query, sizeof(query), "UPDATE `"#MYSQL_HAZ_TABLA"` SET ");
			MySQLUpdateSTR(query, "tulaj", HazInfo[hdb][tulaj]);
			MySQLUpdateINT(query, "TulajID", HazInfo[hdb][hTulajID]);
			/*MySQLUpdateFLOAT(query, "poziciox", HazInfo[hdb][posx]);
			MySQLUpdateFLOAT(query, "pozicioy", HazInfo[hdb][posy]);
			MySQLUpdateFLOAT(query, "pozicioz", HazInfo[hdb][posz]);
			MySQLUpdateINT(query, "interior", HazInfo[hdb][inter]);
			MySQLUpdateINT(query, "ar", HazInfo[hdb][hazar]);*/
			MySQLUpdateINT(query, "butorok", HazInfo[hdb][butorsz]);
			
			MySQLUpdateINT(query, "hGarazs", HazInfo[hdb][hGarazs]);
			
			drog[0] = '\0';
			
			for(;++mellek < 5;)
				format(drog, sizeof(drog), "%s%d,", drog, HazInfo[hdb][hazSzef][mellek]);
			
			drog[strlen(drog) - 1] = '\0';
			MySQLUpdateSTR(query, "hazSzef", drog);
			
			mellek = -1, drog[0] = '\0';
			for(;++mellek < 50;)
				format(drog, sizeof(drog), "%s%d,", drog, HazInfo[hdb][hDrogMi][mellek]);
			
			drog[strlen(drog) - 1] = '\0';
			MySQLUpdateSTR(query, "drogMi", drog);
			
			mellek = -1, drog[0] = '\0';
			for(;++mellek < 50;)
				format(drog, sizeof(drog), "%s%d,", drog, HazInfo[hdb][hDrogAllapot][mellek]);
			
			drog[strlen(drog) - 1] = '\0';
			MySQLUpdateSTR(query, "drogAll", drog);
			MySQLUpdateINT(query, "hZarva", (HazInfo[hdb][hZarva] ? 1 : 0));
			
			mellek = -1, drog[0] = '\0';
			for(;++mellek < 15;)
				format(drog, sizeof(drog), "%s%d,", drog, HazInfo[hdb][hFegyver][mellek]);
			
			drog[strlen(drog) - 1] = '\0';
			MySQLUpdateSTR(query, "hFegyver", drog);
				
			mellek = -1, drog[0] = '\0';
			for(;++mellek < 15;)
				format(drog, sizeof(drog), "%s%d,", drog, HazInfo[hdb][hTolteny][mellek]);
			
			drog[strlen(drog) - 1] = '\0';
			MySQLUpdateSTR(query, "hTolteny", drog);
			
	        MySQLFinalUpdate(query, "id", hdb);
			
			mellek = -1;
		}
	}
	return true;
}

//========================================[ SQL Mentések Vége ] ============================

stock JarmuSzinezes(modelid)
{
	switch(modelid)
	{
	    case 416, 438, 437, 523, 427, 490, 528, 407, 544, 596, 598, 597, 599, 432, 601, 420: return false;
	}
	return true;
}

stock TiltottJarmu(modelid)
{
	switch(modelid)
	{
		case 441, 464, 465, 501, 564, 594: return false;
	}
	return true;
}

stock JarmuSpawn(azon, modelid, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:angle, color1, color2)
{
	if(!ServerInfo[0][sBetoltve] || modelid == 449 || modelid == 537 || modelid == 538 || modelid == 569 || modelid == 570 || modelid == 590)
		vInfo[azon][vID] = AddStaticVehicleEx(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 0);
	else
		vInfo[azon][vID] = CreateVehicle(modelid, spawn_x, spawn_y, spawn_z, angle, color1, color2, 0);

	Iter_Add(Jarmuvek, vInfo[azon][vID]);
	vInfoID[vInfo[azon][vID]] = azon;

	JarmuRendszam(azon);
	TuningBetolt(azon);
	return vInfo[azon][vID];
}

stock JarmuNullazas(vid)
{
	vInfo[vid][vTulaj] = EOS;
	vInfo[vid][vTulajID] = NINCS;
	vInfo[vid][vAr] = 0;
	vInfo[vid][vModel] = 0;
	vInfo[vid][vMunka] = 0;
	vInfo[vid][vSzin1] = 0;
	vInfo[vid][vSzin2] = 0;
	vInfo[vid][vPosx] = 0.0;
	vInfo[vid][vPosy] = 0.0;
	vInfo[vid][vPosz] = 0.0;
	vInfo[vid][vAngle] = 0.0;
	vInfo[vid][vHasznalva] = false;
	vInfo[vid][vMotorelinditva] = false;
	vInfo[vid][vBerelt] = false;
	vInfo[vid][vElet] = 1000.0;
	vInfo[vid][vHiba] = 0;
	vInfo[vid][vZarva] = false;
	vInfo[vid][vRang] = 0;
	vInfo[vid][vRadio] = 0;
	vInfo[vid][vKilometer] = 0;
	vInfo[vid][vUzemanyag] = 0;
	vInfo[vid][vPanels] = 0;
	vInfo[vid][vDoors] = 0;
	vInfo[vid][vLights] = 0;
	vInfo[vid][vTires] = 0;
	vInfo[vid][vVas] = 0;
	vInfo[vid][vMaterial] = 0;
	vInfo[vid][vHeroin] = 0;
	vInfo[vid][vKokain] = 0;
	vInfo[vid][vMarihuana] = 0;
	vInfo[vid][vHulla] = 0;
	vInfo[vid][vAblakLetekerve] = false;
	
	if(IsValidDynamicObject(vInfo[vid][vKObject]))
		DestroyDynamicObject(vInfo[vid][vKObject]);
	
	if(IsValidDynamic3DTextLabel(vInfo[vid][vOktato]))
		DestroyDynamic3DTextLabel(vInfo[vid][vOktato]);
		
	if(IsValidDynamicObject(vInfo[vid][BalIndex1])) DestroyDynamicObject(vInfo[vid][BalIndex1]);
	if(IsValidDynamicObject(vInfo[vid][BalIndex2])) DestroyDynamicObject(vInfo[vid][BalIndex2]);
	if(IsValidDynamicObject(vInfo[vid][BalTrailer1])) DestroyDynamicObject(vInfo[vid][BalTrailer1]);
	if(IsValidDynamicObject(vInfo[vid][BalTrailer2])) DestroyDynamicObject(vInfo[vid][BalTrailer2]);
	
	vInfo[vid][BalIndex1] = INVALID_OBJECT_ID;
	vInfo[vid][BalIndex2] = INVALID_OBJECT_ID;
	vInfo[vid][BalTrailer1] = INVALID_OBJECT_ID;
	vInfo[vid][BalTrailer2] = INVALID_OBJECT_ID;
	vInfo[vid][BalIndex] = INVALID_OBJECT_ID;	
				
	if(IsValidDynamicObject(vInfo[vid][JobbIndex1])) DestroyDynamicObject(vInfo[vid][JobbIndex1]);
	if(IsValidDynamicObject(vInfo[vid][JobbIndex2])) DestroyDynamicObject(vInfo[vid][JobbIndex2]);
	if(IsValidDynamicObject(vInfo[vid][JobbTrailer1])) DestroyDynamicObject(vInfo[vid][JobbTrailer1]);
	if(IsValidDynamicObject(vInfo[vid][JobbTrailer2])) DestroyDynamicObject(vInfo[vid][JobbTrailer2]);
	
	vInfo[vid][JobbIndex1] = INVALID_OBJECT_ID;
	vInfo[vid][JobbIndex2] = INVALID_OBJECT_ID;
	vInfo[vid][JobbTrailer1] = INVALID_OBJECT_ID;
	vInfo[vid][JobbTrailer2] = INVALID_OBJECT_ID;
	vInfo[vid][JobbIndex] = INVALID_OBJECT_ID;
	
	if(IsValidDynamicObject( vInfo[vid][vNeon][1] ))
		DestroyDynamicObject( vInfo[vid][vNeon][1] );
		
	if(IsValidDynamicObject( vInfo[vid][vNeon][2] ))
		DestroyDynamicObject( vInfo[vid][vNeon][2] );
		
	vInfo[vid][vNeon][1] = INVALID_OBJECT_ID;
	vInfo[vid][vNeon][2] = INVALID_OBJECT_ID;
	vInfo[vid][vNeon][4] = false;
		
	return true;
}

stock UjJarmu(modelid, tipusa, ara, Float:spawn_x, Float:spawn_y, Float:spawn_z, Float:angle2, color1, color2, bool:insert)
{
	new vdb = UjKocsiID();
	if(vdb > 0)
	{
		format(vInfo[vdb][vTulaj], MAX_PLAYER_NAME, "Nincs_Tulaj");
		vInfo[vdb][vTulajID] = NINCS;
		vInfo[vdb][vAr] = ara;
		vInfo[vdb][vModel] = modelid;
		vInfo[vdb][vMunka] = tipusa;
		vInfo[vdb][vSzin1] = color1;
		vInfo[vdb][vSzin2] = color2;
		vInfo[vdb][vPosx] = spawn_x;
		vInfo[vdb][vPosy] = spawn_y;
		vInfo[vdb][vPosz] = spawn_z;
		vInfo[vdb][vAngle] = angle2;
		vInfo[vdb][vHasznalva] = true;
		vInfo[vdb][vElet] = 1000.0;
		vInfo[vdb][vHiba] = 0;
		vInfo[vdb][vZarva] = false;
		vInfo[vdb][vRang] = 0;
		vInfo[vdb][vKilometer] = 0;
		vInfo[vdb][vUzemanyag] = MAX_Benzin[modelid - 400];
		vInfo[vdb][vPanels] = 0;
		vInfo[vdb][vDoors] = 0;
		vInfo[vdb][vLights] = 0;
		vInfo[vdb][vTires] = 0;
		vInfo[vdb][vHidraulika] = 0;
		vInfo[vdb][vMatrica] = 0;
		for(new i=0;i<14;i++)
		{
			vInfo[vdb][vMod][i] = 0;
		}
		vInfo[vdb][vInsert] = insert;
		
		JarmuSpawn(vdb, modelid, spawn_x, spawn_y, spawn_z, angle2, color1, color2);

		if(insert)
		{
			nformat(qurery, 1024, "INSERT INTO `"#MYSQL_JARMU_TABLA"` \
			(ID, Tulaj, TulajID, Ar, Model, Munka, Szin1, Szin2, VPosx, VPosy, VPosz, VAngle, VUzemanyag) \
			VALUES('%d', 'Nincs_Tulaj', '-1', '%d', '%d', '%d', '%d', '%d', '%f', '%f', '%f', '%f', '%f')", \
			vdb, ara, modelid, tipusa, color1, color2, spawn_x, spawn_y, spawn_z, angle2, MAX_Benzin[modelid-400]);
			
			mysql_tquery(sql_ID, qurery, "", "");
		}
		return true;
	}
	return true;
}

stock TrailerAttached(trailer)
{
	new csatolva = NINCS;
	foreach(Jarmuvek, id)
	{
		if(!IsVehicleConnected(id) || id == trailer) continue;
		if(GetVehicleTrailer(id) == trailer)
		{
			csatolva = id;
			break;
		}
	}
	
	return csatolva;
}

stock Float:vPosDifference(id)
{
	new Float:diff, Float:pos[3];
	GetVehiclePos(vInfo[id][vID], PosExt(pos));
	diff = GetDistance(PosExt(pos), vInfo[id][vPosx], vInfo[id][vPosy], vInfo[id][vPosz]);
	return diff;
}

stock JarmuRespawn(javitas)
{
	foreach(Jarmuvek, id)
	{
		new vid = JarmuID(id, INVALID_PLAYER_ID), Float:HP, time = gettime(), bool:repair;
		if(vid)
		{
			if(vInfo[vid][vMunka] > MAX_FRAKCIO || javitas == 1) repair = true;//munka és bérelhetõ kocsik javulnak
			else repair = false;
			
			if(vInfo[vid][vLastActive] < (time - 600) && vPosDifference(vid) > 2)//10perc
			{
				if(VanUtas(id)) continue;
				if(TrailerAttached(id) != NINCS) continue;
				if(!repair)
				{
					GetVehicleHealth(vInfo[vid][vID], HP);
					if(HP < 350) HP = 350.0;

					GetVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
				}
				
				SetVehicleToRespawn(vInfo[vid][vID]);
				if(!repair)
				{
					SetVehicleHealth(vInfo[vid][vID], HP);
					vInfo[vid][vElet] = HP;
					vehicleh[vInfo[vid][vID]] = HP;
					UpdateVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
				}
				else if(repair)
				{
					SetVehicleHealth(vInfo[vid][vID], 1000.0);
					vInfo[vid][vElet] = 1000.0;
					vehicleh[vInfo[vid][vID]] = 1000.0;
				}
			}
		}
	}
	return true;
}

stock JarmuJavitas( id, bool:panelek = true, Float:elet = 1000.0)
{
	sid = JarmuID( id, INVALID_PLAYER_ID );
	if(sid)
	{
		if(panelek)
		{
			vInfo[vdb][vPanels] = 0;
			vInfo[vdb][vDoors] = 0;
			vInfo[vdb][vLights] = 0;
			vInfo[vdb][vTires] = 0;
		}
		vInfo[ sid ][vElet] = elet;
	}
	
	SetVehicleHealth(id, elet);
	if(panelek) RepairVehicle(id);
	return true;
}

stock UjTelefonSzam()
{
	new telefonszam = 2742 + random(8999);
	
	/*ciklus:
	nformat(queery, 256, "SELECT id FROM `"#MYSQL_JATEKOS_TABLA"` WHERE ptelefon = '%d'", telefonszam);
	mysql_function_query(sql_ID, queery, false, "", "");
	//mysql_store_result();
	
	if(mysql_num_rows())
	{
		telefonszam = 2742 + random(8999);
		goto ciklus;
	} else
		goto vege;
	vege:*/
	return telefonszam;
}

stock UjPinkod()
{
	new pinkod = 1000 + random(8999);
	
	/*ciklus:
	if(mysql_num_rows())
	{
		pinkod = 1000 + random(8999);
		goto ciklus;
	} else
		goto vege;
	vege:*/
	return pinkod;
}

stock UjSzamlaszam()
{
	new szamlszam = 100000 + random(899999);
	return szamlszam;
}

stock file_content( hol[], mit[] ) //Lehetõleg ezt használd, fölösleges külön file kezelõ - Martin
{
	new ertek[256];
	if(fexist(hol))
	{
		new File:fajl = fopen(hol, io_read), sor[256];
		while(fread(fajl, sor))
		{
			new keres = strfind(sor, "=", true);
			if(strcmp(sor, mit, true, keres) == 0)
			{
				strmid(ertek, sor, (keres + 1), strlen(sor));
				fclose(fajl);
				return ertek;
			}
		}
	}
	
	return ertek;
}

stock RandomHirdetes()
{
	/*new id;
	if(id != NINCS)
		return true;*/
	
	#define RANDOM_HIR "hirdetes.cfg"
	new Sorok[20][256], db;
	if(fexist(RANDOM_HIR))
	{
		new File:fajl = fopen(RANDOM_HIR, io_read), sor[256];
		while(fread(fajl, sor))
		{
			strmid(Sorok[ db ], sor, 0, strlen(sor));
			db++;
			/*new keres = strfind(sor, "=", true);
			if(strcmp(sor, "hir", true, keres) == 0)
			{
				strmid(Sorok[ db ], sor, (keres + 1), strlen(sor));
				db++;
			}*/
		}
		
		fclose(fajl);
	}
	
	if(db)
	{
		new bool:van, szam;
		do
		{
			van = false, szam = random( 20 );
			if(strlen( Sorok[ szam ] ) < 1)
				van = true;
		
		}while(van);
		
		SendFormatMessageToAll(COLOR_SZURKE, "Tipp:"#COL_MKEK" %s", Sorok[ szam ]);
	}
	return true;
}

stock JarmuID(vehicleid, playerid, bool:ciklus = false)
{
	if(vehicleid > MAX_VEHICLES || vehicleid < 0)
	{
		printf("Car Attack: %d | playerid: %d", vehicleid, playerid);
		/*if(playerid != INVALID_PLAYER_ID && IsPlayerConnected(playerid))
		{
			nformat(string, 128, "[AntiCheat]: [%d]%s - Cheat: (lehetséges) Car Attack - ID: %d CMD: %s", playerid, JatekosNev(playerid), vehicleid, cmd (Admin(playerid, FOADMIN_SZINT) ? ("NoBan") : ("AutoBan")));
			AdminUzenetEx(COLOR_WHITE, 1001, string);
			Log(FILE_CHEAT, string);
			
			if(!Admin(playerid, FOADMIN_SZINT))
				ServerBan(playerid, 0, "[AC] Car Attack", NINCS, (!Belepve(playerid) ? true : false), true, true);
		}*/
		return 0;
	}
	
	new visszateres = vInfoID[vehicleid];
	if(ciklus)
	{
		visszateres = 0;
		foreach(Jarmuvek, i)
		{
			if(vInfo[i][vHasznalva])
			{
				if(vInfo[i][vID] == vehicleid)
				{
					visszateres = i;
					break;
				}
			}
		}
	}
	return visszateres;
}

stock ObjectID(objectid)
{
	new i = 0, visszateres = 0;
		
	for(;++i < MAX_AUTOMATA;)
	{
		if(AutomataInfo[i][auhasznalva])
		{
			if(AutomataInfo[i][auobject] == objectid)
			{
				visszateres = i;
				break;
			}
		}
	}
	return visszateres;
}

stock BenzinkutnalVan(playerid, Float:rangeje = 15.0)
{
	new i = 0, visszateres = 0;
		
	for(;++i < MAX_BENZINKUT;)
	{
		if(BenzinkutInfo[i][bhasznalva])
		{
			if(IsPlayerInRangeOfPoint(playerid, rangeje, BenzinkutInfo[i][bposx], BenzinkutInfo[i][bposy], BenzinkutInfo[i][bposz]))
			{
				visszateres = i;
				break;
			}
		}
	}
	return visszateres;
}

stock BenzinkutLetezik(const benzinkutneve[])
{
	new b = 0;
	
	for(;++b < MAX_BENZINKUT;)
	{
		if(BenzinkutInfo[b][bhasznalva])
		{
			if(!strcmp(BenzinkutInfo[b][bnev], benzinkutneve, true))
			{
				return b;
			}
		}
	}
	return false;
}

stock UjBenzinkutID()
{
	new i = 0, idje = 0;
	    
	for(;++i < MAX_BENZINKUT;)
	{
	    if(!BenzinkutInfo[i][bhasznalva])
	    {
	        idje = i;
			break;
		}
	}
	return idje;
}

stock IsWhiteList(playerid)
{
	if(IsScripter(playerid)) 
		return true;
	
	new i = -1;
	for(;++i < sizeof(aWhiteList);)
	{
		if(!strcmp(JatekosNev(playerid, false, true), aWhiteList[i]))
			return true;
	}
	return false;
}

stock IsScripter(playerid, bool:ex = false)
{
	for(new i; i < sizeof(Scripter); i++)
	{
		if(!strcmp(PlayerInfo[playerid][pNev], Scripter[i][0]) && (PlayerInfo[playerid][pID] == Scripter[i][1][0]))
		{
			if(ex) return i;
			else return true;
		}
	}
	
	if(ex) return NINCS;
	else return false;
}

stock UjKocsiID()
{
	new i = 0, idje = 0;
	for(;++i < MAX_VEHICLES;)
	{
	    if(!vInfo[i][vHasznalva])
	    {
	        idje = i;
			break;
		}
	}
	return idje;
}

stock UjTeleportID()
{
	new i = 0, tid = 0;
	    
	for(;++i < MAX_TELEPORT;)
	{
	    if(!TPInfo[i][tphasznalva])
	    {
	        tid = i;
	        break;
	    }
	}
	return tid;
}

stock UjAjtoID()
{
	new i = 0, visszateres = 0;

	for(;++i < MAX_AJTO;)
	{
	    if(!AjtoInfo[i][ahasznalva])
	    {
	        visszateres = i;
	        break;
	    }
	}
	return visszateres;
}

stock UjAutomataID()
{
	new i = 0, visszateres = 0;

	for(;++i < MAX_AUTOMATA;)
	{
	    if(!AutomataInfo[i][auhasznalva])
	    {
	        visszateres = i;
	        break;
	    }
	}
	return visszateres;
}

stock KozeliObject( playerid, tipus = NINCS, Float:tav = 3.0)
{
	new k = NINCS, id = NINCS;
	new int = GetPlayerInterior(playerid), vw = GetPlayerVirtualWorld(playerid);
	
	for(;++k < MAX_AUTOMATA;)
	{
		if(AutomataInfo[k][auhasznalva] && (tipus == NINCS || AutomataInfo[k][autipus] == tipus))
		{
			if(AutomataInfo[k][auVW] != vw || AutomataInfo[k][auInt] != int)
				continue;
			
			if(IsPlayerInRangeOfPoint(playerid, tav, PosExt(AutomataInfo[k][aupos])))
			{
				id = k;
				break;
			}
		}
	}
	
	return id;
}

stock AjtoKereses(const ajtonakaneve[])
{
	new i = NINCS;

	for(;++i < MAX_AJTO;)
	{
	    if((strlen(AjtoInfo[i][anev]) > 0) && !strcmp(AjtoInfo[i][anev], ajtonakaneve, true))
	    {
	        return i;
	    }
	}
	return NINCS;
}

stock AjtoTeleport(playerid, tipus, aid, bool:gotoigen = false)
{
	//0 kintrõl be
	//1 bentrõl ki
	new Float:ajtoposok[4], ajinterior, ajvw;
	if(PlayerInfo[playerid][pobjectbetoltes] && !PlayerInfo[playerid][pbemehet])
		return SCM(playerid, COL_LRED, "Már egy teleport folyamatban van!");
	
	ajtoposok[0] = tipus ? AjtoInfo[aid][abepos][0] : AjtoInfo[aid][akipos][0];
	ajtoposok[1] = tipus ? AjtoInfo[aid][abepos][1] : AjtoInfo[aid][akipos][1];
	ajtoposok[2] = tipus ? AjtoInfo[aid][abepos][2] : AjtoInfo[aid][akipos][2];
	ajtoposok[3] = tipus ? AjtoInfo[aid][abepos][3] : AjtoInfo[aid][akipos][3];
	ajinterior = tipus ? AjtoInfo[aid][abeinterior] : AjtoInfo[aid][akiinterior];
	ajvw = tipus ? AjtoInfo[aid][abevw] : AjtoInfo[aid][akivw];

	SetTimerEx("JatekosTeleportalhat", (AjtoInfo[aid][afreeze] != 0 ? (AjtoInfo[aid][afreeze] + 4000) : 4000), false, "db", playerid, true);
	
	if((ajtoposok[0] == 0.0) && (ajtoposok[1] == 0.0) && (ajtoposok[2] == 0.0))
		return SCM(playerid, COL_LRED, "Ennek az ajtónak nincs kijárata! Kérlek értesítsd az Adminokat!");
		
	if(IsPlayerInAnyVehicle(playerid))
	{
		SetVehiclePos(GetPlayerVehicleID(playerid), ajtoposok[0], ajtoposok[1], ajtoposok[2]);
		SetVehicleZAngle(GetPlayerVehicleID(playerid), ajtoposok[3]);
		
	} else
		SetPos(playerid, ajtoposok[0], ajtoposok[1], ajtoposok[2], ajtoposok[3]);
	
	SetInterior(playerid, ajinterior);
	SetVirtualWorld(playerid, ajvw);
	PlayerInfo[playerid][pbemehet] = false;
	
	if(AjtoInfo[aid][ajarmu])
	{
		DestroyDynamicPickup(tipus ? AjtoInfo[aid][abepickupk] : AjtoInfo[aid][akipickupk]);
		AjtoInfo[aid][tipus ? abepickupk : akipickupk] = CreateDynamicPickup(1007, 14, tipus ? AjtoInfo[aid][abepos][0] : AjtoInfo[aid][akipos][0], tipus ? AjtoInfo[aid][abepos][1] : AjtoInfo[aid][akipos][1], tipus ? AjtoInfo[aid][abepos][2] : AjtoInfo[aid][akipos][2], 0);
	}
	if(AjtoInfo[aid][afreeze] && !gotoigen)
	{
		PlayerInfo[playerid][pobjectbetoltes] = true;
		TogglePlayerControllable(playerid, 0);
		GameTextForPlayer(playerid, "~r~Objectek ~y~betöltése", 2000, 3);
		SetTimerEx("Kifagyaszt", AjtoInfo[aid][afreeze], false, "d", playerid);
	}
	return true;
}

stock AdminRang(playerid)
{
	new rang[24], sc = IsScripter(playerid, true);
	
	if(sc != NINCS && Scripter[ sc ][2][0] && PlayerInfo[playerid][padmin] == 5555) rang = "Scripter";
	else if(sc != NINCS && !Scripter[ sc ][2][0] && PlayerInfo[playerid][padmin]) rang = "ScripterSegéd";
	else if(1 <= PlayerInfo[playerid][padmin] <= 5) rang = "Admin";
	else if(PlayerInfo[playerid][padmin] == FSEGED_SZINT) rang = "FõAdminSegéd";
	else if(PlayerInfo[playerid][padmin] == FOADMIN_SZINT) rang = "FõAdmin";
	else if(PlayerInfo[playerid][padmin] == SZUPER_SZINT) rang = "SuperAdmin";
	else if(PlayerInfo[playerid][padmin] == AC_SZINT) rang = "AdminController";
	else if(PlayerInfo[playerid][padmin] == FEJLESZTO_SZINT) rang = "Fejlesztõ";
	else if(PlayerInfo[playerid][padmin] == TULAJ_SZINT) rang = "Tulajdonos";
	else if(PlayerInfo[playerid][padmin] == FOSCRIPTER_SZINT) rang = "FõScripter";
	else if(PlayerInfo[playerid][padmin] == RENDSZG_SZINT) rang = "sysAdmin";
	else if(IsAS(playerid)) rang = "Adminsegéd";
	return rang;
}

stock JatekosNev(playerid, bool:normal = false, bool:real = false)
{
	new nev[256];
	
	if(PlayerInfo[playerid][pAlnevbe] == false)
	{
		if(real || !Belepve(playerid)) GetPlayerName(playerid, nev, sizeof(nev));
		else format(nev, sizeof(nev), "%s", PlayerInfo[playerid][pNev]);
	}
	else
	{
		format(nev,sizeof(nev),"%s",PlayerInfo[playerid][pAlnev]);
	}
	if(normal)
	{
		new i = -1;
		for(;++i < strlen(nev);)
		{
			if(nev[i] == '_')               
				nev[i] = ' ';
		}
	}
	return nev;
}

stock IsAS( pid )
{
	if(PlayerInfo[ pid ][pAS] > gettime() || PlayerInfo[ pid ][pAS] == NINCS && PlayerInfo[pid][pASTiltas] == 0)
		return true;
	
	return false;
}

stock Admin(playerid, szint)
{
	if(!Belepve(playerid))
		return false;
	
	new sc = IsScripter( playerid, true );
	if(PlayerInfo[playerid][padmin] >= szint || (sc != NINCS && Scripter[ sc ][2][0]))
	    return true;
	else
		return false;
}

stock FrakcioJarmu(playerid, vehicleid)
{
	if((PlayerInfo[playerid][pFrakcio] > 0) && \
	(vInfo[vehicleid][vMunka] == PlayerInfo[playerid][pFrakcio]) && \
 	(vInfo[vehicleid][vRang] <= PlayerInfo[playerid][prang]))
		return true;
	return false;
}

stock IsVehicleConnected(vehicleid)
{
	new Float:x1,Float:y1,Float:z1;
	GetVehiclePos(vehicleid,x1,y1,z1);
	if(x1==0.0 && y1==0.0 && z1==0.0)
	{
		return false;
	}
	return true;
}

stock Float:GetDistanceToHulla(playerid, hulla)
{
	if(IsPlayerConnected(playerid) && HullaInfo[hulla][Hvan])
	{
		return GetDistanceToPointEx(playerid, HullaInfo[hulla][Hpos][0], HullaInfo[hulla][Hpos][1], HullaInfo[hulla][Hpos][2]);
	}
	return INF_FLOAT;
}

stock GetClosestHulla(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new kozelihulla=NINCS;
		new Float:closestdist = 9999.0, Float:dist;
		for(new hulla=0; hulla< sizeof(HullaInfo); hulla++)
		{
			dist = GetDistanceToHulla(playerid, hulla);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelihulla = hulla;
			}
		}
		return kozelihulla;
	}
	return NINCS;
}

stock Float:GetDistanceToAutomata(playerid, automataid)
{
	if(IsPlayerConnected(playerid) && AutomataInfo[automataid][auhasznalva] && !AutomataInfo[automataid][auszerkeszti])
	{
		return GetDistanceToPointEx(playerid, AutomataInfo[automataid][aupos][0], AutomataInfo[automataid][aupos][1], AutomataInfo[automataid][aupos][2]);
	}
	return INF_FLOAT;
}

stock Float:GetDistanceToBenzinkut(playerid, benzinkutid)
{
	if(IsPlayerConnected(playerid) && BenzinkutInfo[benzinkutid][bhasznalva])
	{
		return GetDistanceToPointEx(playerid, BenzinkutInfo[benzinkutid][bposx], BenzinkutInfo[benzinkutid][bposy], BenzinkutInfo[benzinkutid][bposz]);
	}
	return INF_FLOAT;
}

stock GetClosestBenzinkut(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new kozelibenzinkut = NINCS;
		new Float:closestdist = 9999.0, Float:dist;
		new benzinkutak = 0;
		for(;++benzinkutak < MAX_BENZINKUT;)
		{
			if(BenzinkutInfo[benzinkutak][bhasznalva])
			{
				dist = GetDistanceToBenzinkut(playerid, benzinkutak);
				if(dist < closestdist)
				{
					closestdist = dist;
					kozelibenzinkut = benzinkutak;
				}
			}
		}
		return kozelibenzinkut;
	}
	return NINCS;
}

stock GetXYZInFrontOfPlayer(playerid, &Float:x, &Float:y, &Float:z, Float:dis)
{
	new Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid,a);
	GetXYInFrontOfPoint(x, y, a, dis);
}

stock GetXYInFrontOfPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x += (distance * floatsin(-angle, degrees));
	y += (distance * floatcos(-angle, degrees));
}

stock SetJarmu(kocsi, edit, ertek)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, objective);
	switch(edit)
	{
		case KOCSI_MOTOR: SetVehicleParamsEx(kocsi, ertek, lights, alarm, doors, bonnet, boot, objective);
		case KOCSI_LAMPA: SetVehicleParamsEx(kocsi, engine, ertek, alarm, doors, bonnet, boot, objective);
		case KOCSI_RIASZTO: SetVehicleParamsEx(kocsi, engine, lights, ertek, doors, bonnet, boot, objective);
		case KOCSI_AJTO: SetVehicleParamsEx(kocsi, engine, lights, alarm, ertek, bonnet, boot, objective);
		case KOCSI_MOTORHAZTETO: SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, ertek, boot, objective);
		case KOCSI_CSOMAGTARTO: SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, ertek, objective);
		case KOCSI_OBJECTIVE: SetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, ertek);
	}
}
stock GetJarmu(kocsi, edit)
{
	new engine, lights, alarm, doors, bonnet, boot, objective;
	GetVehicleParamsEx(kocsi, engine, lights, alarm, doors, bonnet, boot, objective);
	switch(edit)
	{
		case KOCSI_MOTOR: return engine;
		case KOCSI_LAMPA: return lights;
		case KOCSI_RIASZTO: return alarm;
		case KOCSI_AJTO: return doors;
		case KOCSI_MOTORHAZTETO: return bonnet;
		case KOCSI_CSOMAGTARTO: return boot;
	}
	return true;
}

stock KozeliAjto(playerid)
{
    new Float:playerpos[3],
		Float:legkozelebb = 1000.0,
		Float:tav,
		ajto = 0,
		i = 0;
	
	GetPlayerPos(playerid, playerpos[0], playerpos[1], playerpos[2]);
	for(;++i < MAX_AJTO;)
	{
		if(AjtoInfo[i][ahasznalva])
		{
			tav = GetDistance(playerpos[0], playerpos[1], playerpos[2], AjtoInfo[i][abepos][0], AjtoInfo[i][abepos][1], AjtoInfo[i][abepos][2]);
			if(tav < legkozelebb)
			{
				legkozelebb = tav;
				ajto = i;
			}
		}
	}
    return ajto;
}

stock GetClosestVehicle(playerid, bool:benneulcheck = true)
{
	new kocsi = NINCS, kocsibaul;
	if(IsPlayerInAnyVehicle(playerid)) kocsibaul = GetPlayerVehicleID(playerid);
	if(benneulcheck && kocsibaul > 0) kocsi = kocsibaul;

	if(kocsi != NINCS)
		return kocsi;

	if(IsPlayerConnected(playerid))
	{
		new closestvehicle = 1;
		new Float:closestdist = 9999.0, Float:dist;
		foreach(Jarmuvek, vid)
		{
			if(vid == kocsibaul) continue;
			dist = GetDistanceToVehicle(playerid,vid);
			if(dist < closestdist)
			{
				closestdist = dist;
				closestvehicle = vid;
			}
		}
		return closestvehicle;
	}
	return NINCS;
}

stock NincsBenne_Radio( model )
{
	new Ebben_Nincs_Radio[] =
	{
		417,425,430,432,446,447,448,452,453,
		454,461,642,463,468,469,471,472,473,
		481,484,487,488,493,497,509,510,521,
		522,523,539,548,563,568,571,581,586,
		595
	};
	
	new i = NINCS;
	for(;++i < sizeof(Ebben_Nincs_Radio);)
		if(model == Ebben_Nincs_Radio[i])
			return true;
	
	return false;
}

stock Cselekves(playerid, cselekves[], valaki = 0, bool:OOC = false)
{
	new string[128];
	if(PlayerInfo[playerid][pAlnevbe] == false)
	{
		if(valaki == 1)
			format(string, sizeof(string), "* Valaki %s", cselekves);
		else if(valaki == 0)
		{
			new maszkid[24];
			format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
			format(string, sizeof(string), "* %s %s", (PlayerInfo[playerid][pMaszkVisel] ? maszkid : JatekosNev(playerid, true)), cselekves);
		}
		else if(valaki == 2 || valaki == NINCS)
			format(string, sizeof(string), "* %s", cselekves);
		else if(OOC)
			format(string, sizeof(string), "(( %s ))", string);
	}
	else
	{
		format(string,sizeof(string),"* %s %s",PlayerInfo[playerid][pAlnev],cselekves);
		if(OOC)
			format(string, sizeof(string), "(( %s ))", string);
	}

	ProxDetector(15.0, playerid, string, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);

	return true;
}

funkcio AdatMentesMindenkinek()
{
	AdatMentesSzerver( false );
	return true;
}

funkcio AdatMentesSzerver( bool:idpd )
{
    ServerInfo[0][sUpdater]++;
    printf("=============== [ Automatikus mentés! (%dx) ] ===============", ServerInfo[0][sUpdater]);
	
	foreach(Player, pid)
	{
		if(Belepve(pid) && !IsPlayerNPC(pid))
			AdatMentes(pid);
	}
	print("Szerver: Játékosok adatai automatikusan mentve!");
	
	JarmuMentes();
	print("Szerver: Jármûvek adatai automatikusan mentve!");
	
	FrakcioMentes();
	print("Szerver: Frakciók adatai automatikusan mentve!");
	
	AutomataMentes();
	print("Szerver: Automaták adatai automatikusan mentve!");
	
	TeruletMentes();
	print("Szerver: Területek adatai automatikusan mentve!");
	
	CegMuvelet(2);
	print("Szerver: Cegek adatai automatikusan mentve!");
	
	BenzinkutMentes();
	print("Szerver: Benzinkutak adatai automatikusan mentve!");
	
	HazMentes();
	print("Szerver: Házak adatai automatikusan mentve!");
	
	if(idpd) {
		AdminUzenet(COLOR_GREEN, 1, "Szerver adatai sikeresen elmentve! (Updater: %d)", ServerInfo[0][sUpdater]);
		return true;
	}
	
	//Ban törlés, ha már nincs beállítva cron a szerveren
	doQuery("DELETE FROM `"#MYSQL_BAN_TABLA"` WHERE UIdo!='0' AND UIdo<='%d'", gettime());
	//AdatFrissites_Frakcio( NINCS, NINCS );
	return true;
}

/*funkcio AdatFrissites_Frakcio( fk, process ) // befejezni
{
	if(fk != NINCS)
	{
		FkInfo[ fk ][fTagok] = num;
		
	}
	if(process == 1)
	{
		new i;
		for(;i < MAX_FRAKCIO;)
		{
			if(!FkInfo[i][fVan]) continue;
			nformat(sql, 128, "SELECT pfrakcio FROM `"#MYSQL_JATEKOSOK_TABLA"` WHERE pfrakcio = '%d'", i);
			mysql_tquery(sql_ID, sql, "AdatFrissites_Frakcio", "i", i, 1);
		}
	}
	return true;
}*/

funkcio TeleBetoltese()
{
	print("Szerver: Teleportok betöltése!");
	
	new nums, fields, tid = 0;
	cache_get_data(nums, fields);

	if(nums)
	{
		new i = 0;
		for(;++i < nums;)
		{
			mysql_get_int(i, "id", tid);
			mysql_get_float(i, "tposx", TPInfo[tid][tposx]);
			mysql_get_float(i, "tposy", TPInfo[tid][tposy]);
			mysql_get_float(i, "tposz", TPInfo[tid][tposz]);
			mysql_get_float(i, "tangle", TPInfo[tid][tangle]);
			mysql_get_string(i, "tpnev", TPInfo[tid][tpnev]);
			mysql_get_int(i, "tinterior", TPInfo[tid][tinterior]);
			mysql_get_int(i, "tvw", TPInfo[tid][tvw]);
			TPInfo[tid][tphasznalva] = true;
		}
	}
	printf("Szerver: %d teleport sikeresen betöltve!", nums);
	return true;
}

stock GetMoveDirectionFromKeys(ud, lr)
{
	new direction = 0;

    if(lr < 0)
	{
		if(ud < 0) 		direction = MOVE_FORWARD_LEFT; 	// Up & Left key pressed
		else if(ud > 0) direction = MOVE_BACK_LEFT; 	// Back & Left key pressed
		else            direction = MOVE_LEFT;          // Left key pressed
	}
	else if(lr > 0) 	// Right pressed
	{
		if(ud < 0)      direction = MOVE_FORWARD_RIGHT;  // Up & Right key pressed
		else if(ud > 0) direction = MOVE_BACK_RIGHT;     // Back & Right key pressed
		else			direction = MOVE_RIGHT;          // Right key pressed
	}
	else if(ud < 0) 	direction = MOVE_FORWARD; 	// Up key pressed
	else if(ud > 0) 	direction = MOVE_BACK;		// Down key pressed

	return direction;
}

stock MoveCamera(playerid)
{
	new Float:FV[3], Float:CP[3];
	GetPlayerCameraPos(playerid, CP[0], CP[1], CP[2]);
    GetPlayerCameraFrontVector(playerid, FV[0], FV[1], FV[2]);
	if(noclipdata[playerid][accelmul] <= 1) noclipdata[playerid][accelmul] += ACCEL_RATE;
	new Float:speed = MOVE_SPEED * noclipdata[playerid][accelmul];
	new Float:X, Float:Y, Float:Z;
	GetNextCameraPosition(noclipdata[playerid][mode], CP, FV, X, Y, Z);
	MovePlayerObject(playerid, noclipdata[playerid][flyobject], X, Y, Z, speed);
	noclipdata[playerid][lastmove] = GetTickCount();
	return 1;
}

stock GetNextCameraPosition(move_mode, Float:CP[3], Float:FV[3], &Float:X, &Float:Y, &Float:Z)
{
    #define OFFSET_X (FV[0]*6000.0)
	#define OFFSET_Y (FV[1]*6000.0)
	#define OFFSET_Z (FV[2]*6000.0)
	switch(move_mode)
	{
		case MOVE_FORWARD:
		{
			X = CP[0]+OFFSET_X;
			Y = CP[1]+OFFSET_Y;
			Z = CP[2]+OFFSET_Z;
		}
		case MOVE_BACK:
		{
			X = CP[0]-OFFSET_X;
			Y = CP[1]-OFFSET_Y;
			Z = CP[2]-OFFSET_Z;
		}
		case MOVE_LEFT:
		{
			X = CP[0]-OFFSET_Y;
			Y = CP[1]+OFFSET_X;
			Z = CP[2];
		}
		case MOVE_RIGHT:
		{
			X = CP[0]+OFFSET_Y;
			Y = CP[1]-OFFSET_X;
			Z = CP[2];
		}
		case MOVE_BACK_LEFT:
		{
			X = CP[0]+(-OFFSET_X - OFFSET_Y);
 			Y = CP[1]+(-OFFSET_Y + OFFSET_X);
		 	Z = CP[2]-OFFSET_Z;
		}
		case MOVE_BACK_RIGHT:
		{
			X = CP[0]+(-OFFSET_X + OFFSET_Y);
 			Y = CP[1]+(-OFFSET_Y - OFFSET_X);
		 	Z = CP[2]-OFFSET_Z;
		}
		case MOVE_FORWARD_LEFT:
		{
			X = CP[0]+(OFFSET_X  - OFFSET_Y);
			Y = CP[1]+(OFFSET_Y  + OFFSET_X);
			Z = CP[2]+OFFSET_Z;
		}
		case MOVE_FORWARD_RIGHT:
		{
			X = CP[0]+(OFFSET_X  + OFFSET_Y);
			Y = CP[1]+(OFFSET_Y  - OFFSET_X);
			Z = CP[2]+OFFSET_Z;
		}
	}
}

stock CancelFlyMode(playerid)
{
	DeletePVar(playerid, "FlyMode");
	CancelEdit(playerid);
	TogglePlayerSpectating(playerid, false);

	DestroyPlayerObject(playerid, noclipdata[playerid][flyobject]);
	noclipdata[playerid][cameramode] = CAMERA_MODE_NONE;
	
	if(PlayerInfo[playerid][pinterior] != 0 || PlayerInfo[playerid][pvirtualworld] != 0)
		Freeze(playerid, 3000);
	else
		Freeze(playerid, 1000);
	
	SetPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz], PlayerInfo[playerid][pangle], false);
	SetPlayerInterior(playerid, PlayerInfo[playerid][pinterior]);
	SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pvirtualworld]);
	return true;
}

stock FlyMode(playerid)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	noclipdata[playerid][flyobject] = CreatePlayerObject(playerid, 19300, X, Y, Z, 0.0, 0.0, 0.0);
	TogglePlayerSpectating(playerid, true);
	AttachCameraToPlayerObject(playerid, noclipdata[playerid][flyobject]);
	SetPVarInt(playerid, "FlyMode", 1);
	noclipdata[playerid][cameramode] = CAMERA_MODE_FLY;
	return true;
}

stock JarmuRendszam(id)
{
	new string[32];
	if(strlen(vInfo[id][vRendszam]) < 4 || strfind(vInfo[id][vRendszam], "null", true) != NINCS) format(string, sizeof(string), ""COL_SZURKE"See-"COL_VKEK"%d", vInfo[id][vID]);
	else format(string, sizeof(string), "%s", vInfo[id][vRendszam]);
	SetVehicleNumberPlate(vInfo[id][vID], string);
}

stock ApplyPlayerAnimation(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
    //LoopingAnim(playerid, animlib, "null", fDelta, loop, lockx, locky, freeze, time, forcesync); // Pre-load animation library
	LoopingAnim(playerid, animlib, "null", 0.0, 0, 0, 0, 0, 0);
    return LoopingAnim(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
}

stock JarmuKulcs( playerid, vid )
{
	if(!vInfo[vid][vInsert])
		return true;
	if(IsJob(playerid, vInfo[vid][vMunka]) && vInfo[vid][vMunka] != 0)
		return true;
 	else if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
		return true;
	else if(PlayerInfo[playerid][pBereltJarmu] != 0 && PlayerInfo[playerid][pBereltJarmu] == vid)
		return true;
	else if(FrakcioJarmu(playerid, vid))
		return true;
	else if(PlayerInfo[playerid][pJarmuKolcson] == vInfo[vid][vID])
		return true;
    else if(SKVkocsi(vid) && PlayerInfo[playerid][pSKV])
	    return true;
	else if(vInfo[vid][vMunka] == 103 && PlayerInfo[playerid][pKereskedo])
	    return true;
	else if(vInfo[vid][vMunka] == 101)
	{
		if(PlayerInfo[playerid][pVizsga][1] == VIZSGA_KOCSI && (vInfo[vid][vModel] == 560 || vInfo[vid][vModel] == 405))//sultan, sentinel
			return true;
		if(PlayerInfo[playerid][pVizsga][1] == VIZSGA_MOTOR && (vInfo[vid][vModel] == 522))//nrg-500, 
			return true;
		if(PlayerInfo[playerid][pVizsga][1] == VIZSGA_KAMION && (vInfo[vid][vModel] == 403 || vInfo[vid][vModel] == 515))//linerunner, roadtrain 
			return true;
	}
	return false;
}

stock JarmuTulaj( vid )
{
	new stulaj[64];
	if(vInfo[vid][vTulajID] != NINCS)
		format(stulaj, sizeof(stulaj), "[%d]%s", vInfo[vid][vTulajID], vInfo[vid][vTulaj]);
	else if(vInfo[vid][vMunka] > 0 && vInfo[vid][vMunka] < MAX_FRAKCIO)//frakciós jármûvek
	{
		if(FInfo[ vInfo[vid][vMunka] ][fVan])
			format(stulaj, sizeof(stulaj), "Frakció - [%d]%s", vInfo[vid][vMunka], FInfo[ vInfo[vid][vMunka] ][fNev]);
		else
			format(stulaj, sizeof(stulaj), "Frakció - [%d]Nincs", vInfo[vid][vMunka]);
	}
	else if(vInfo[vid][vMunka] == 100)
		format(stulaj, sizeof(stulaj), "Autóbérlõ");
	else if(vInfo[vid][vMunka] == 101)
		format(stulaj, sizeof(stulaj), "Oktatási központ");
	else if(vInfo[vid][vMunka] == 102)
	    format(stulaj, sizeof stulaj, "Los Santos Taxi");
	else if(vInfo[vid][vMunka] == 103)
	    format(stulaj,sizeof stulaj, "Használtkereskedés");
	else if(!vInfo[vid][vMunka])
		format(stulaj, sizeof(stulaj), "Nincs (Eladó)");
	else if(vInfo[vid][vMunka])
		format(stulaj, sizeof(stulaj), "Munka - ID: %d", vInfo[vid][vMunka]);
		
	return stulaj;
}

stock PMunka(pid, munka)
{
	new str[64] = "Nincs";
	if(munka == 1 && PlayerInfo[pid][pMunka1] != 0)
		format(str, sizeof(str), "%s", Munkak[ PlayerInfo[pid][pMunka1] - 20 ][1]);
	else if(munka == 2 && PlayerInfo[pid][pMunka2] != 0)
		format(str, sizeof(str), "%s", Munkak[ PlayerInfo[pid][pMunka2] - 20 ][1]);
		
	return str;
}

stock PJarmu(pid, idx)
{
	new str[64], id = PlayerInfo[pid][pJarmuKulcs][idx];
	if(id != NINCS && vInfo[id][vHasznalva])
		format(str, sizeof(str), "%s(%d)", VehicleNames[vInfo[id][vModel] - 400], vInfo[id][vID]);
	else
		format(str, sizeof(str), "Nincs");
		
	return str;
}

stock PHaz(pid, idx)
{
	new str[64];
	if(PlayerInfo[pid][pHazKulcs][idx] != NINCS)
	{
		new id = PlayerInfo[pid][pHazKulcs][idx];
		format(str, sizeof(str), ""#COL_MKEK"%d"#COL_FEHER"",id);
	} else
		format(str, sizeof(str), ""#COL_MKEK"Nincs"#COL_FEHER"");
		
	return str;
}

stock PFrakcio( id )
{
	new str[32] = "Nincs";
	if(PlayerInfo[id][pFrakcio])
		format(str, sizeof(str), FInfo[PlayerInfo[id][pFrakcio]][fNev]);
		
	return str;
}

stock ToStr(ext, bool:formata = false, val = ',')
{
	new str[32];
	if(ext)
	{
		if(formata) 
			format(str, sizeof(str), "%s", FormatNumber(ext, 0, val)); 
		else 
			format(str, sizeof(str), "%d", ext);
	}
	else
		format(str, sizeof(str), "Nincs");
	return str;
}

stock ShowZseb(playerid, kinek)
{
	//PlayerInfo[playerid][pDrogAnyag][0]
	SendFormatMessage(playerid, COLOR_WHITE, "Kokain: %d/%dg | Heroin: %d/%dg | Marihuana: %d/%dg", PlayerInfo[kinek][pKokain], P_MAX_KOKAIN, PlayerInfo[kinek][pHeroin], P_MAX_HEROIN, PlayerInfo[kinek][pMarihuana], P_MAX_MARIHUANA);
	SendFormatMessage(playerid, COLOR_WHITE, "Material: %d/%ddb | Vas: %d/%dkg | Kötszer: %d/%ddb", PlayerInfo[kinek][pMaterial], P_MAX_MATERIAL, PlayerInfo[kinek][pVas], P_MAX_VAS, PlayerInfo[kinek][pKotszer], P_MAX_KOTSZER);
	SendFormatMessage(playerid, COLOR_WHITE, "Szendvics: %ddb/5db | Készpénz: %s$", PlayerInfo[kinek][pSzendvics], FormatNumber(PlayerInfo[kinek][ppenz], 0, ','));
	SendFormatMessage(playerid, COLOR_WHITE, "Mariuhána-mag: %dg | Kokain alap: %dg | Heroin alap: %dg", PosExt(PlayerInfo[kinek][pDrogAnyag]));
   
	new i = -1, num = 0, fegyverek[128] = "Fegyverek:";
	for(;++i < 13;)
	{
		if(PlayerInfo[kinek][pFegyverek][i] && PlayerInfo[kinek][pToltenyek][i])
		{
			format(fegyverek, sizeof(fegyverek), "%s [ID:%d]%s(%d),", fegyverek, PlayerInfo[kinek][pFegyverek][i], aWeaponNames[PlayerInfo[kinek][pFegyverek][i]], PlayerInfo[kinek][pToltenyek][i]);
			num++;
		}
	}
	
	if(!num) format(fegyverek, sizeof(fegyverek), "%s Nincs", fegyverek);
	else fegyverek[strlen(fegyverek) - 1] = '\0';

	SendClientMessage(playerid, COLOR_WHITE, fegyverek);
	return true;
}

stock ShowSkill(playerid, kinek)
{
	new str[256];
	format(str, sizeof(str), "Legális munka tapasztalat: "#COL_MKEK"%d"#COL_FEHER" | Illegális munka tapasztalat: "#COL_MKEK"%d", PlayerInfo[kinek][pExp][1], PlayerInfo[kinek][pExp][2]);
	SendClientMessage(playerid, COLOR_WHITE, str);
	
	format(str, sizeof(str), "Fegyver tapasztalat: "#COL_MKEK"%d", PlayerInfo[kinek][pFegyverSkill]);
	SendClientMessage(playerid, COLOR_WHITE, str);
	return true;
}

stock ShowStats(playerid, kinek, bool:dbug = false)
{
	if(IsPlayerConnected(kinek) || Belepve(kinek))
	{
		//#define cl1 "{1E90FF}" // COL_MKEK {1E90FF}
		//#define cl2 "{757167}" // COL_SZURKE
		#define cl1 COL_MKEK
		#define cl2 COL_FEHER
		new str[256];
		
		new hazastars[32];
		if(egyezik(PlayerInfo[kinek][pHazasodvaVele],"Senki"))
		{
			hazastars = "Nincs férjed/feleséged";
		}
		else
		{
			strmid(hazastars,PlayerInfo[kinek][pHazasodvaVele],0,strlen(PlayerInfo[kinek][pHazasodvaVele]),32);
		}
		
		/* === Adatok kiíratása === */
		
		format(str, sizeof(str), "Név: "#cl1"%s"#cl2" | Nem: "#cl1"%s"#cl2" | Telefonszám: "#cl1"%s"#cl2" |  Házastárs: "#cl1"%s", \
		JatekosNev(kinek),NemVizsgalat(PlayerInfo[kinek][pnem]), ToStr(PlayerInfo[kinek][ptelefonszam], true, '-'),hazastars);
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str, sizeof(str), "Bankszámlaszám: "#cl1"%s"#cl2" | Pin: "#cl1"%s"#cl2" | Egyenleg: "#cl1"%s$", \
		ToStr(PlayerInfo[kinek][pBsz]), ToStr(PlayerInfo[kinek][pBszPin]), FormatNumber(PlayerInfo[kinek][pBszPenz], 0, ','));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str,sizeof str, "Szint: "#cl1"%d"#cl2" | Még "#cl1"%d"#cl2" óra | Következõ Fizetés:"#cl1" %d"#cl2" perc" , \
		PlayerInfo[kinek][pjatekosszint], (PlayerInfo[kinek][pszintlepeskell] - PlayerInfo[kinek][pszintlepesora]),PlayerInfo[kinek][pFizetesIdo]);
		SendClientMessage(playerid,COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str, sizeof(str), "Szervezet: "#cl1"%s"#cl2" | Rang: "#cl1"%d"#cl2" | Származás: "#cl1"%s"#cl2" | Életkor: "#cl1"%d", \
		PFrakcio(kinek), PlayerInfo[kinek][prang], Szarmazas( PlayerInfo[kinek][pszarmazas] ), PlayerInfo[kinek][peletkor]);
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str, sizeof(str), "Egyéni munka ID-k: "#cl1"%d"#cl2" / "#cl1"%d"#cl2" | Fizetés: "#cl1"%s$", PlayerInfo[kinek][pMunka1], PlayerInfo[kinek][pMunka2], FormatNumber(PlayerInfo[kinek][pFizetes], 0, ','));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));

		format(str, sizeof(str), "Rang: "#cl1"%s"#cl2" [%d] | Házak: %s / %s / %s", Rangok(PlayerInfo[kinek][prang], PlayerInfo[kinek][pFrakcio]), PlayerInfo[kinek][prang], PHaz(kinek, 0), PHaz(kinek, 1), PHaz(kinek, 2));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str, sizeof(str), "Saját jármûvek: "#COL_MKEK"%s / %s / %s", PJarmu(kinek, 0), PJarmu(kinek, 1), PJarmu(kinek, 2));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str, sizeof(str), "Prémium csomag: "#COL_MKEK"%s"#COL_FEHER" | Prémium pont: "#COL_MKEK"%s"#COL_FEHER" | Prémium ido: "#COL_MKEK"%s", ToStr(PlayerInfo[kinek][pPremiumCsomag]), ToStr(PlayerInfo[kinek][pPremiumPont], true), UnixToTime( PlayerInfo[kinek][pPremiumIdo] ));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
	}
	return true;
}

stock ShowPDAStats(playerid, kinek, bool:dbug = false)
{
    if(IsPlayerConnected(kinek) || Belepve(kinek))
	{
		//#define cl1 "{1E90FF}" // COL_MKEK {1E90FF}
		//#define cl2 "{757167}" // COL_SZURKE
		#define cl1 COL_MKEK
		#define cl2 COL_FEHER
		new str[256];
		
		/* === Adatok kiíratása === */
		
		format(str, sizeof(str), "Név: "#cl1"%s"#cl2" | Nem: "#cl1"%s"#cl2" | Telefonszám: "#cl1"%s", \
		JatekosNev(kinek),NemVizsgalat(PlayerInfo[kinek][pnem]), ToStr(PlayerInfo[kinek][ptelefonszam], true, '-'));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str, sizeof(str), "Bankszámlaszám: "#cl1"%s"#cl2" | Egyenleg: "#cl1"%s$"#cl2"", \
		ToStr(PlayerInfo[kinek][pBsz]), FormatNumber(PlayerInfo[kinek][pBszPenz], 0, ','));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str, sizeof(str), "Származás: "#cl1"%s"#cl2" | Életkor: "#cl1"%d", \
		Szarmazas( PlayerInfo[kinek][pszarmazas] ), PlayerInfo[kinek][peletkor]);
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str, sizeof(str), "Egyéni munkák: "#cl1"%s"#cl2" / "#cl1"%s"#cl2" | Fizetés: "#cl1"%s$", PMunka(kinek, 1), PMunka(kinek, 2), FormatNumber(PlayerInfo[kinek][pFizetes], 0, ','));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str, sizeof(str), "Házak: %s / %s / %s", PHaz(kinek, 0), PHaz(kinek, 1), PHaz(kinek, 2));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
		
		format(str, sizeof(str), "Saját jármûvek: "#COL_MKEK"%s / %s / %s", PJarmu(kinek, 0), PJarmu(kinek, 1), PJarmu(kinek, 2));
		SendClientMessage(playerid, COLOR_WHITE, str);
		if(dbug) SendFormatMessage(playerid, -1, "Hossza: %d", strlen(str));
	}
	return true;
}

funkcio VizsgalasVege(playerid, hullaid)
{
	if(50 <= HullaInfo[hullaid][Hallapot] <= 100)
	{
		SendFormatMessage(playerid, COLOR_WHITE, "Hulla életkora: %d és %d közötti", PlayerInfo[HullaInfo[hullaid][Hkieid]][peletkor] - 2, PlayerInfo[HullaInfo[hullaid][Hkieid]][peletkor] + 2);
		SendFormatMessage(playerid, COLOR_WHITE, "Hulla neme: %s", NemVizsgalat(PlayerInfo[HullaInfo[hullaid][Hkieid]][pnem]));
		SendFormatMessage(playerid, COLOR_WHITE, "Hulla származása: %s", Szarmazas(PlayerInfo[HullaInfo[hullaid][Hkieid]][pszarmazas]));
		SendFormatMessage(playerid, COLOR_WHITE, "Hulla gyilkosa: %s", HullaInfo[hullaid][Hmegolte]);
	}
	if(HullaInfo[hullaid][Hallapot] < 50)
	{
		new randomszam = random(10);
		switch(randomszam)
		{
			case 4:
			{
				SendFormatMessage(playerid, COLOR_WHITE, "Hulla életkora: %d és %d közötti", PlayerInfo[HullaInfo[hullaid][Hkieid]][peletkor] - 2, PlayerInfo[HullaInfo[hullaid][Hkieid]][peletkor] + 2);
				SendFormatMessage(playerid, COLOR_WHITE, "Hulla neme: %s", NemVizsgalat(PlayerInfo[HullaInfo[hullaid][Hkieid]][pnem]));
				SendFormatMessage(playerid, COLOR_WHITE, "Hulla származása: %s", Szarmazas(PlayerInfo[HullaInfo[hullaid][Hkieid]][pszarmazas]));
				SendFormatMessage(playerid, COLOR_WHITE, "Hulla gyilkosa: %s", HullaInfo[hullaid][Hmegolte]);
			}
			default:
				SendClientMessage(playerid, COLOR_WHITE, "Nem tudtad megállapítani a hulla adatait, mert túl sérült.");
		}
	}
	PlayerInfo[playerid][pVizsgal] = false;
	ClearAnimations(playerid);
	return true;
}

stock Rangok( Rang, Frakcio )
{
	new vsz[20];
	if(FInfo[Frakcio][fVan])
	{
		switch( Rang )
		{
			case 1: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang1]);
			case 2: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang2]);
			case 3: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang3]);
			case 4: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang4]);
			case 5: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang5]);
			case 6: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang6]);
			case 7: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang7]);
			case 8: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang8]);
			case 9: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang9]);
			case 10: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang10]);
			case 11: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang11]);
			case 12: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang12]);
			case 13: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang13]);
			case 14: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang14]);
			case 15: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang15]);
			case 16: format(vsz, sizeof(vsz), "%s", FInfo[Frakcio][fRang16]);
			default: format(vsz, sizeof(vsz), "Nincs");
		}
	} else
		format(vsz, sizeof(vsz), "Nincs");
		
	return vsz;
}

stock SWATRangok( Rang )
{
	new svsz[30];
	switch( Rang )
	{
		case 1: format(svsz, sizeof(svsz), "Private I" );
		case 2: format(svsz, sizeof(svsz), "Private II" );
		case 3: format(svsz, sizeof(svsz), "Private First Class");
		case 4: format(svsz, sizeof(svsz), "Specialist" );
		case 5: format(svsz, sizeof(svsz), "Corporal" );
		case 6: format(svsz, sizeof(svsz), "Sergeant" );
		case 7: format(svsz, sizeof(svsz), "Staff Sergeant" );
		case 8: format(svsz, sizeof(svsz), "Sergeant First Class" );
		case 9: format(svsz, sizeof(svsz), "Master Sergeant" );
		case 10: format(svsz, sizeof(svsz), "First Sergeant" );
		case 11: format(svsz, sizeof(svsz), "Sergeant Major" );
		case 12: format(svsz, sizeof(svsz), "Command Sergeant Major" );
		default: format(svsz, sizeof(svsz), "Nincs");
	}
	return svsz;
}

stock KereskedoRangok(rang)
{
	new rn[30];
	switch(rang)
	{
	    case 1: format(rn,32,"Próbaidõs");
	    case 2: format(rn,32,"Autókereskedõ");
	    case 3: format(rn,32,"Tulajdonos");
	    default: format(rn,32,"---");
	}
	return rn;
}

stock SKVrangok(rang)
{
	new rn[32];
	switch(rang)
	{
	    case 1: format(rn,32,"Próbaidõs");
	    case 2: format(rn,32,"Taxisofõr");
	    case 3: format(rn,32,"Buszsofõr");
	    case 4: format(rn,32,"Mozdonyvezetõ");
	    case 5: format(rn,32,"Cégvezetõ");
	    case 6: format(rn,32,"Tulajdonos");
	    default: format(rn,32,"---");
	}
	return rn;
}

stock FrakcioTeruletek(frakcioid)
{
	if(!FInfo[frakcioid][fVan])
	    return 0;
	new x = -1, teruletek;
	
	for(;++x < MAX_TERULET;)
	{
	    if(tInfo[x][tVan] && (tInfo[x][tFrakcio] == frakcioid))
	        teruletek++;
	}

	return teruletek;
}

stock BortonNev( id, bool:td = false)
{
	new str[16];
	switch( id )
	{
		case 1: format(str, sizeof(str), "%s", (td ? ("Kórházban") : ("Kórház")));
		case 2: format(str, sizeof(str), "%s", (td ? ("Börtönben") : ("Börtön")));
		case 3: format(str, sizeof(str), "%s", (td ? ("AJ-ben") : ("AdminJail")));
		case 4: format(str, sizeof(str), "%s", (td ? ("Katonaság Börtön") : ("Katonaság Börtön")));
		case 5: format(str, sizeof(str), "%s", (td ? ("FBI Börtön") : ("FBI Börtön")));
		default: format(str, sizeof(str), "%s", (td ? ("Sehol") : ("Nincs")));
	}
	return str;
}


stock BortonID(borton[])
{
	if(!strcmp(borton, "Kórház", true) || !strcmp(borton, "Korhaz", true))
		return 1;
	else if(!strcmp(borton, "PD", true))
		return 2;
	else if(!strcmp(borton, "Admin", true))
		return 3;
	else if(!strcmp(borton, "Katonaság", true))
		return 4;
	else if(!strcmp(borton, "FBI", true))
		return 5;
	else if(!strcmp(borton, "null", true))
		return 0;
	
	return NINCS;
}

stock BortonInfo(playerid, adta[], oka[])
{
	//IllegalCharacter(oka);
	format(PlayerInfo[playerid][pJailAdta], MAX_PLAYER_NAME, "%s", adta);
	format(PlayerInfo[playerid][pJailOk], MAX_PLAYER_NAME, "%s", oka);
	return true;
}

stock Borton(playerid, jail)
{
	DeleteWeapon(playerid);
	PlayerInfo[playerid][phaz] = NINCS;
	switch(jail)
	{
		case 0: //Szabad
		{
			if(PlayerInfo[playerid][pjail] == 1) { //Kórház
				SetPos(playerid, 1473.779, -1723.145, 13.546, 269.769, true);
				SCM(playerid, COL_MKEK, "Felépültél ezért kiengedtek a kórházból, sajnálatos módon néhány dologra nem tudsz visszamelékezni!");
			}
			else if(PlayerInfo[playerid][pjail] == 2) { //Pd
				SetPos(playerid, 290.6906,1409.2700,10.2425,91.004, true);
				SCM(playerid, COL_MKEK, "A büntetésed letöltötted, ismét szabad vagy. Légy tisztes állampolgár!");
				if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] ))
				{
					DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
					PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
				}
			}
			else if(PlayerInfo[playerid][pjail] == 3) { //AdminJail
				SetPos(playerid, 1473.779, -1723.145, 13.546, 0.236, true); //LS hegy Városháza
				SCM(playerid, COL_MKEK, "A büntetésed letöltötted, ismét szabad vagy! Legközelebb, tartsd be a szabályokat!");
			}
			else if(PlayerInfo[playerid][pjail] == 4) { //SASD
				SetPos(playerid, 290.6906,1409.2700,10.2425,0, true);
				SCM(playerid, COL_MKEK, "A büntetésed letöltötted, ismét szabad vagy. Légy tisztes állampolgár!");
				if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] ))
				{
					DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
					PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
				}
			}	
			else if(PlayerInfo[playerid][pjail] == 5) { //FBI
				SetPos(playerid, 290.6906,1409.2700,10.2425,0, true);
				SCM(playerid, COL_MKEK, "A büntetésed letöltötted, ismét szabad vagy. Légy tisztes állampolgár!");
				if(IsValidDynamic3DTextLabel( PlayerInfo[playerid][pRabText] ))
				{
					DestroyDynamic3DTextLabel(PlayerInfo[playerid][pRabText]);
					PlayerInfo[playerid][pRabText] = INVALID_3D_TEXT_ID;
				}
			}
			else { // ha nincs bezárva de egy barom Admin bezárná nullára xd
				SetPos(playerid, 1473.779, -1723.145, 13.546, 0.236, true);
			}
			
			SetVirtualWorld(playerid, 0);
			SetInterior(playerid, 0);
			PlayerInfo[playerid][pjail] = 0;
			PlayerInfo[playerid][pJailIdo] = 0;
			return true;
		}
		case 1: //Kórház
		{
			SetHealth(playerid, MAX_HP);
			SetArmour(playerid, 0.0);
			SetInterior(playerid, 5);
			SetVirtualWorld(playerid, 1000);
			Freeze(playerid, 8000);
			SetPos(playerid, 142.840, -265.251, 877.747, 247.104, true);
			return true;
		}
		case 2: //PD
		{
			SetVirtualWorld(playerid,0);
			SetHealth(playerid, MAX_HP);
			return true;
		}
		case 3: //Admin
		{
			SetVirtualWorld(playerid,8888);
			SetInterior(playerid, 3);
			Freeze(playerid, 2000);
			SetPos(playerid, 972.831, 2.768, 1001.148, .update = true);
			
			if(PlayerInfo[playerid][pFegyver])
			{
				new wep;
				GetPlayerWeaponData(playerid, aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ], wep, PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);
				PlayerInfo[playerid][pFegyver] = 0;
				ResetPlayerWeapons(playerid);
				SetPlayerAttachedWeapon(playerid);
			}
			
			return true;
		}
		case 4: //SASD
		{
			SetHealth(playerid, MAX_HP);
			return true;
		}
		case 5: //FBI
		{
			SetHealth(playerid, MAX_HP);
			return true;
		}
		case 100: // szökési kisérlet check
		{
			//wat?
		}
	}
	return true;
}

stock TeruletHaszon( bool:debugging = false )
{
	new t = NINCS, str[256];
	for(;++t < MAX_TERULET;)
	{
		if(!tInfo[t][tVan]) continue;
		if(OnlineTagok( tInfo[t][tFrakcio] ) >= 5 || debugging)
		{
			tInfo[t][tHaszonIdo] += 300;
			if(tInfo[t][tHaszonIdo] >= TERULET_HASZON_IDO)
			{
				if(debugging)
					AdminUzenet(COLOR_LIGHTRED, 5555, "[DEBUG]: Terület haszon - Frakció: [%d]%s", tInfo[t][tFrakcio], FInfo[tInfo[t][tFrakcio]][fNev]);
				
				str[0] = '\0';
				tInfo[t][tHaszonIdo] = 0;
				
				if(tInfo[t][tHaszon][0] > 1 && tInfo[t][tHaszon][0] < 600000)
				{
					FInfo[ tInfo[t][tFrakcio] ][fPenz] += tInfo[t][tHaszon][0];
					format(str, sizeof(str), "%sPénz: %s$, ", str, FormatNumber(tInfo[t][tHaszon][0], 0, ','));
				}
				if(tInfo[t][tHaszon][1] > 1 && tInfo[t][tHaszon][1] < 600000)
				{
					FInfo[ tInfo[t][tFrakcio] ][fKokain] += tInfo[t][tHaszon][1];
					format(str, sizeof(str), "%sKokain: %sg, ", str, FormatNumber(tInfo[t][tHaszon][1], 0, ','));
				}
				if(tInfo[t][tHaszon][2] > 1 && tInfo[t][tHaszon][2] < 600000)
				{
					FInfo[ tInfo[t][tFrakcio] ][fHeroin] += tInfo[t][tHaszon][2];
					format(str, sizeof(str), "%sHeroin: %sg, ", str, FormatNumber(tInfo[t][tHaszon][2], 0, ','));
				}
				if(tInfo[t][tHaszon][3] > 1 && tInfo[t][tHaszon][3] < 600000)
				{
					FInfo[ tInfo[t][tFrakcio] ][fMarihuana] += tInfo[t][tHaszon][3];
					format(str, sizeof(str), "%sMarihuana: %sg, ", str, FormatNumber(tInfo[t][tHaszon][3], 0, ','));
				}
				if(tInfo[t][tHaszon][4] > 1 && tInfo[t][tHaszon][4] < 600000)
				{
					FInfo[ tInfo[t][tFrakcio] ][fMaterial] += tInfo[t][tHaszon][4];
					format(str, sizeof(str), "%sMaterial: %sdb, ", str, FormatNumber(tInfo[t][tHaszon][4], 0, ','));
				}
				
				if(strlen(str)) str[ strlen(str) - 2 ] = '\0';
				format(str, sizeof(str), "Terület ("#COL_MKEK"%s"#COL_YELL") haszon: %s", tInfo[t][tNev], (strlen(str) ? str : ("Nincs beállított haszon!")));
				FrakcioUzenet(COLOR_YELLOW, tInfo[t][tFrakcio], str);
				FkUpdate(tInfo[t][tFrakcio], fuPenz, fuKokain, fuHeroin, fuMarihuana, fuMaterial);
			}
		}
	}
	return true;
}

stock TeruletArenaID(playerid)
{
    new x = -1, terulet = NINCS;
	for(;++x < MAX_TERULET;)
	{
		if(tInfo[x][tVan] && IsPlayerInDynamicArea(playerid, tInfo[x][tArea]))
		{
			terulet = x;
			break;
		}
	}
	return terulet;
}

stock FrakcioTagok(frakcioid)
{
	if(!FInfo[frakcioid][fVan])
	    return 0;

	new mennyiseg = 0;
	foreach(Player, playerid)
	{
	    if(IsPlayerConnected(playerid) && (PlayerInfo[playerid][pFrakcio] == frakcioid))
		mennyiseg++;
	}
	return mennyiseg;
}

//Race System by Martin
funkcio preProcessing( playerid, process, extra, estr[], estr2[] )
{
	switch( process )
	{
		case 1://betöltés
		{
			new nums, fields, i = NINCS, slot = extra;
			cache_get_data(nums, fields);

			if(nums)
			{
				mysql_get_string(0, "Nev", Race[slot][rNev]);
				mysql_get_string(0, "Indito", Race[slot][rIndito]);
				
				new str[16], pos[40], db;
				
				for(;++i < MAX_RACE_CP;)
				{
					Race[slot][rPosx][i] = 0.0;
					Race[slot][rPosy][i] = 0.0;
					Race[slot][rPosz][i] = 0.0;
				
					mysql_get_string(0, (format(str, sizeof(str), "CP%d", (i + 1)), str), pos);
					sscanf(pos, "p<,>fff", Race[slot][rPosx][i], Race[slot][rPosy][i], Race[slot][rPosz][i]);
					
					if(Race[slot][rPosx][i] != 0.0 && strlen(pos))
						db++;
				}
				
				Race[slot][rSzorzo] = 0;
				Race[slot][rNyeremeny] = 0;
				Race[slot][rBentvan] = 0;
				Race[slot][rIdoHatra] = 0;
				Race[slot][rNevezes] = 0;
				Race[slot][rIdo] = 0;
				Race[slot][rCPdb] = db;
				Race[slot][rCelPos][0] = Race[slot][rPosx][db - 1];
				Race[slot][rCelPos][1] = Race[slot][rPosy][db - 1];
				Race[slot][rCelPos][2] = Race[slot][rPosz][db - 1];
				Race[slot][rVan] = true;
				Race[slot][rStatusz] = 0;
				
				SFM(playerid, COL_VZOLD, "Sikeresen betöltötted a(z) "#COL_MKEK"%s"#COL_FEHER" nevû versenyt a(z) "#COL_MKEK"%d."#COL_FEHER" slotra! CP: %d/%d", Race[slot][rNev], slot, db, MAX_RACE_CP);
				printf("Szerver: Verseny - %s sikeresen betoltve a(z) %d slotra", Race[slot][rNev], slot);
				
			} else
				SCM(playerid, COL_LRED, "Nincs ilyen nevû verseny az adatbázisban!");
		}
		case 2://létrehozás
		{
			new nums, fields;
			cache_get_data(nums, fields);

			if(nums)
			{
				new data[3][64];
				mysql_get_string(0, "Nev", data[0]);
				mysql_get_string(0, "Indito", data[1]);
				mysql_get_string(0, "Keszito", data[2]);
				
				SCM(playerid, COL_LRED, "Már létezik ilyen indítókóddal rendelkezõ pálya. Kérlek válassz másikat!");
				SFM(playerid, COL_LRED, "Név: "#COL_MKEK"%s"#COL_FEHER" | Indítókód: "#COL_MKEK"%s"#COL_FEHER" | Készítõ: "#COL_MKEK"%s", data[0], data[1], data[2]);
			
			} else {
			
				PlayerRace[playerid][rEpites][0] = extra;//melyik id-n
				PlayerRace[playerid][rEpites][1] = 0;//melyik cp
				
				new i = NINCS;
				for(;++i < MAX_RACE_CP;)
				{
					Race[extra][rPosx][i] = 0.0;
					Race[extra][rPosy][i] = 0.0;
					Race[extra][rPosz][i] = 0.0;
				}

				Race[extra][rCelPos] = Float:{0.0, 0.0, 0.0};
				Race[extra][rStatusz] = RACE_EPIT;
				Race[extra][rVan] = true;
				format(Race[extra][rNev], 32, "%s", estr);
				format(Race[extra][rIndito], 32, "%s", estr2);
				
				SFM(playerid, COL_VZOLD, "Elkezdted építeni a(z) "#COL_MKEK"%s"#COL_FEHER" pályát! CP mentéshez írd be: /verseny CP", estr);
			}
		}
	}
	
	return true;
}

stock TimeFormat(ido, bool:sort = false)
{
	new string[128];
	if(ido < 60) format(string, sizeof(string), "%d mp", ido);
	else if(ido >= 60 && ido < 3600)
	{
		if(ido % 60 == 0) format(string, sizeof(string), "%d perc", (ido / 60));
		else
		{
			if(!sort) format(string, sizeof(string), "%d perc és %d mp", floatround((ido / 60), floatround_floor), (ido % 60));
			else format(string, sizeof(string), "%dp %dmp", floatround((ido / 60), floatround_floor), (ido % 60));
		}
	}
	else if(ido >= 3600)
	{
		if(ido % 3600 == 0) format(string, sizeof(string), "%d óra", (ido / 3600));
		else
		{
			if(!sort) format(string, sizeof(string), "%d óra és %d perc", floatround((ido / 3600), floatround_floor), floatround((ido % 3600) / 60));
			else format(string, sizeof(string), "%dó %dp", floatround((ido / 3600), floatround_floor), floatround((ido % 3600) / 60));
		}
	}

	return string;
}

stock SetRaceCP(playerid)
{
	new 
		id = PlayerRace[playerid][rVersenyen],
		cp = PlayerRace[playerid][rVersenyCP];
		
	if(cp == RACE_START_CP)
	{
		if(Race[id][rCPdb] > 0)
			SetPlayerRaceCheckpoint(playerid, 0, Race[id][rPosx][0], Race[id][rPosy][0], Race[id][rPosz][0], Race[id][rPosx][1], Race[id][rPosy][1], Race[id][rPosz][1], 20.0);
		else
			SetPlayerRaceCheckpoint(playerid, 0, Race[id][rPosx][0], Race[id][rPosy][0], Race[id][rPosz][0], PosExt(Race[id][rCelPos]), 20.0);
	}
	else if(cp == RACE_CEL_CP)
		SetPlayerRaceCheckpoint(playerid, 1, PosExt(Race[id][rCelPos]), 0.0, 0.0, 0.0, 20.0);
	else
	{
		if((cp + 1) >= Race[id][rCPdb])
			SetPlayerRaceCheckpoint(playerid, 0, Race[id][rPosx][cp], Race[id][rPosy][cp], Race[id][rPosz][cp], PosExt(Race[id][rCelPos]), 20.0);
		else
			SetPlayerRaceCheckpoint(playerid, 0, Race[id][rPosx][cp], Race[id][rPosy][cp], Race[id][rPosz][cp], Race[id][rPosx][cp + 1], Race[id][rPosy][cp + 1], Race[id][rPosz][cp + 1], 20.0);
	}

	return true;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
	//SFM(playerid, COL_MKEK, "[DEBUG]: VersenyID: %d | CP-ID: %d", PlayerRace[playerid][rVersenyen], PlayerRace[playerid][rVersenyCP]);
    new 
		id = PlayerRace[playerid][rVersenyen],
		cp = PlayerRace[playerid][rVersenyCP],
		stat = Race[id][rStatusz];
		
	if(!id || stat != RACE_MEGY)
		return true;
	
	PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
	if(cp != RACE_CEL_CP)
	{
		if(cp == RACE_START_CP)
		{
			if(Race[id][rCPdb] > 1) PlayerRace[playerid][rVersenyCP] = 1;
			else PlayerRace[playerid][rVersenyCP] = RACE_CEL_CP;
			
		} else {
		
			if((cp + 1) == Race[id][rCPdb]) PlayerRace[playerid][rVersenyCP] = RACE_CEL_CP;
			else PlayerRace[playerid][rVersenyCP]++;
		}
		
		SetRaceCP(playerid);
	}
	else if(cp == RACE_CEL_CP)//itt
	{
		Race[id][rBentvan]++;
		new 
			hely = Race[id][rBentvan],
			Szorzok[5] = {35, 30, 25, 20, 15};
		
		if(hely <= 5)
		{
			new penz = floatround(float(Race[id][rNyeremeny]) * float(Szorzok[hely - 1]) * 0.01);
		
			nformat(str, 128, "[%d.] "#COL_MKEK"%s"#COL_FEHER" %s alatt teljesítette a(z) "#COL_MKEK"%s"#COL_FEHER"-t!", hely, JatekosNev(playerid), TimeFormat(PlayerRace[playerid][rPIdo]), Race[id][rNev]);
			SendClientMessageToAll(COLOR_WHITE, str);
			format(str, 128, "Nyereménye: "#COL_MKEK"%s"#COL_FEHER"$", FormatNumber(penz, 0, ','));
			SendClientMessageToAll(COLOR_WHITE, str);
			
			PlayerInfo[playerid][pBszPenz] += penz;
			SFM(playerid, COL_VZOLD, "Sikeresen teljesítetted a(z) "#COL_MKEK"%s"#COL_FEHER" versenyt! Nyereményed "#COL_MKEK"%s"#COL_FEHER"$, helyezés - "#COL_MKEK"%d.", Race[id][rNev], FormatNumber(penz, 0, ','), hely);
		
		} else
			SFM(playerid, COL_VZOLD, "Teljesítetted a(z) "#COL_MKEK"%s"#COL_FEHER" versenyt! Helyezés - "#COL_MKEK"%d.", Race[id][rNev], hely);
		
		/*----------- Verseny vége ------------*/
		new db;
		foreach(Player, x)
		{
			if(x == playerid) continue;
			if(PlayerRace[x][rVersenyen] == id) db++;
			if(PlayerRace[x][rVersenyen] == PlayerRace[playerid][rVersenyen])
			{
				SetPlayerMarkerForPlayer(x, playerid, COLOR_INVISIBLE);
				SetPlayerMarkerForPlayer(playerid, x, COLOR_INVISIBLE);
			}
		}
		
		DisablePlayerRaceCheckpoint(playerid);
		PlayerRace[playerid][rVersenyen] = 0;
		
		if(!db)
			Race[id][rStatusz] = RACE_VEGE;
	}
    return true;
}

stock NemMozoghat(playerid)
{
	if(PlayerInfo[playerid][pMeghalt])
		return true;
		
	if(PlayerInfo[playerid][pBilincselve])
		return true;
		
	if(IsPlayerInAnyVehicle(playerid))
		return true;
		
	return false;
}

funkcio JointTimer( playerid, process, param[] )
{
	if(!Belepve(playerid))
		return true;
	
	switch( process )
	{
		case 1:
		{
			if(!strcmp( param, "bong" ) )
				Cselekves(playerid, "eloveszi a bongját.");
			else if(!strcmp( param, "pipa" ) )
				Cselekves( playerid, "eloveszi a pipáját.");
			else
				Cselekves( playerid, "eloveszi a cigipapírt.");
		}
		case 2:
		{
			if(!strcmp( param, "bong" ) )
				Cselekves(playerid, "megtölti a bongot vízzel.");
			else if(!strcmp( param, "pipa" ) )
				Cselekves( playerid, "beletömi a mariskát a pipába.");
			else
			{
				PlayerInfo[playerid][pBoltCucc][ BL_PAPIR ]--;
				Cselekves(playerid, "letépett egy cigipapírt.");
			}
		}
		case 3:
		{
			if(!strcmp( param, "bong" ) )
				Cselekves(playerid, "beleszórja a mariskát a bongba.");
			else if(!strcmp( param, "pipa" ) )
				Cselekves( playerid, "beleszór még egy kis füvet.");
			else
			{
				PlayerInfo[playerid][pBoltCucc][ BL_CIGI ]--;
				Cselekves(playerid, "szétmorzsolt egy cigit és betekerte.");
			}
		}
		case 4:
		{
			if(!strcmp( param, "bong" ) )
				Cselekves(playerid, "meggyújtja a bongot.");
			else if(!strcmp( param, "pipa" ) )
				Cselekves( playerid, "ránéz a pipára.");
			else
			{
				PlayerInfo[playerid][pMarihuana]--;
				Cselekves(playerid, "meggyújtott egy cigit.");
			}
		}
		case 5, 6:
		{
			if(PlayerInfo[playerid][pJoint][2] > gettime())
				return SCM(playerid, COL_LRED, "Túl gyorsan szívsz.");
			
			if(process == 5)
			{
				PlayerInfo[playerid][pJoint][0] = 15;
				PlayerInfo[playerid][pJoint][1] = false;
			
			} else if(PlayerInfo[playerid][pJoint][0] > 0)
			{
				PlayerInfo[playerid][pJoint][0]--;
				if(!PlayerInfo[playerid][pJoint][0])
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					SCM(playerid, COL_MKEK, "Sikeresen elfogyasztottad a cigit.");
				} else if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY)
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
				
				return false;
			}
			
			Szukseglet(playerid, 5.0);
			SetArmour(playerid, (PlayerInfo[playerid][pPancel] + 2.0));
			
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
			LoopingAnim(playerid, "GANGS", "drnkbr_prtl_F", 4.0, 0, 1, 1, 1, -1);
			
		//	SetPlayerDrunkLevel(playerid, ((!(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 300));
			SetPlayerWeather(playerid, 177);
			SetTimerEx("Eltuntetes", 15000, false, "d", playerid);
			PlayerInfo[playerid][pJoint][2] = (gettime() + 4);
			Cselekves(playerid, "szívott egy slukkot.");
			
			if(ServerInfo[0][sRL_Time][0] > 19 || ServerInfo[0][sRL_Time][0] < 8)
				return true;
			
			return true;
		}
	}
	
	if(process < 5)
		SetTimerEx("JointTimer", 5000, false, "dd", playerid, (process + 1));
	
	return true;
}

funkcio KokainTimer( playerid, process )
{
	if(!Belepve(playerid))
		return true;
	
	switch( process )
	{
		case 1: Cselekves(playerid, "kiszor egy kis port..");
		case 2:
		{
			PlayerInfo[playerid][pBoltCucc][ BL_SZIVOSZAL ]--;
			Cselekves(playerid, "ketté vág egy szívószálat..");
		}
		case 3:
		{
			Cselekves(playerid, "felszívott egy csíkot..");
			
			PlayerInfo[playerid][pDrogMuvelet][0] = 2;//Kokain
			PlayerInfo[playerid][pDrogMuvelet][1] = false;//mûvelet
			PlayerInfo[playerid][pDrogMuvelet][2]++;//hányszor
			
			if(PlayerInfo[playerid][pDrogMuvelet][2] >= 3)//túladagolás
			{
				if((PlayerInfo[playerid][pElet] - 20.0) > 0.0)
				SetHealth(playerid, (PlayerInfo[playerid][pElet] - 20.0));
				SCM(playerid, COL_LRED, "Rosszúl érzed magad, szerintem túladagoltad a szert...");
				return true;
			}
			
			Szukseglet(playerid, -5.0);
			SetHealth(playerid, (PlayerInfo[playerid][pElet] + 15.0));
			
			LoopingAnim(playerid, "GANGS", "drnkbr_prtl_F", 4.0, 0, 1, 1, 1, -1);
			SetPlayerWeather(playerid, 178);
			//SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 300));
			
			PlayerInfo[playerid][pDrogMuvelet][3] = (gettime() + (60 * 2));//meddig hat
			SetTimerEx("Eltuntetes", 15000, false, "d", playerid);
			
			if(ServerInfo[0][sRL_Time][0] > 19 || ServerInfo[0][sRL_Time][0] < 8)
				return true;
			
			return true;
		}
	}
	
	if(process < 3)
		SetTimerEx("KokainTimer", 5000, false, "dd", playerid, (process + 1));
	
	return true;
}
funkcio Eltuntetes(playerid)
{
	if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
	SetPlayerWeather(playerid, ServerInfo[0][sIdojaras]);
	return 1;
}
funkcio HeroinTimer( playerid, process )
{
	if(!Belepve(playerid))
		return true;
	
	switch( process )
	{
		case 1: Cselekves(playerid, "kiszor egy kis port egy kanálra..");
		case 2:
		{
			PlayerInfo[playerid][pBoltCucc][ BL_KANAL ]--;
			Cselekves(playerid, "meggyújta az öngyújtót és melegíteni kezdi a kanalat");
		}
		case 3:
		{
			Cselekves(playerid, "megpöcökteti a tût és beszúrja...");
			PlayerInfo[playerid][pBoltCucc][ BL_TU ]--;
			PlayerInfo[playerid][pDrogMuvelet][0] = 3;//Heroin
			PlayerInfo[playerid][pDrogMuvelet][1] = false;//mûvelet
			PlayerInfo[playerid][pDrogMuvelet][2]++;//hányszor
			
			if(PlayerInfo[playerid][pDrogMuvelet][2] >= 3)//túladagolás
			{
				if((PlayerInfo[playerid][pElet] - 20.0) > 0.0)
				SetHealth(playerid, (PlayerInfo[playerid][pElet] - 20.0));
				SCM(playerid, COL_LRED, "Rosszúl érzed magad, szerintem túladagoltad a szert...");
				return true;
			}
			
			Szukseglet(playerid, -5.0);
			SetHealth(playerid, (PlayerInfo[playerid][pElet] + 15.0));
			
			LoopingAnim(playerid, "GANGS", "drnkbr_prtl_F", 4.0, 0, 1, 1, 1, -1);
			SetPlayerDrunkLevel(playerid, ((!GetPlayerDrunkLevel(playerid) ? 5000 : GetPlayerDrunkLevel(playerid)) + 300));
			SetPlayerWeather(playerid, 190);
			SetTimerEx("Eltuntetes", 15000, false, "d", playerid);
			
			PlayerInfo[playerid][pDrogMuvelet][3] = (gettime() + (60 * 2));//meddig hat
			
			if(ServerInfo[0][sRL_Time][0] > 19 || ServerInfo[0][sRL_Time][0] < 8)
				return true;
			
			return true;
		}
	}
	
	if(process < 3)
		SetTimerEx("HeroinTimer", 5000, false, "dd", playerid, (process + 1));
	
	return true;
}

stock VersenyStatusz( id )
{
	new str[16];
	switch( Race[id][rStatusz] )
	{
		case RACE_VEGE:
			str = "Vége";
		case RACE_INDUL:
			str = "Indítás alatt";
		case RACE_MEGY:
			str = "Aktív";
		case RACE_EPIT:
			str = "Építés alatt";
		case 0:
			str = "Betöltve";
		default:
			str = "N/A";
	}
	
	return str;
}

stock FrakcioTipus( ertek )
{
	new str[32];
	switch( ertek )
	{
		case 1: str = "Legális";
		case 2: str = "Maffia";
		case 3: str = "Banda";
		case 4: str = "Rendvédelem";
		default: str = "N/A";
	}
	
	return str;
}

stock CegTulaj( id, bool:extra = false )
{
	new str[32];
	if(CegInfo[ id ][cTulajID] != NINCS)
	{
		if(!extra) format(str, sizeof(str), "%s", CegInfo[ id ][cTulaj]);
		else format(str, sizeof(str), "[%d]%s", CegInfo[ id ][cTulajID], CegInfo[ id ][cTulaj]);
	}
	else if(CegInfo[ id ][cFTulaj])
	{
		if(!extra) format(str, sizeof(str), "%s", FInfo[ CegInfo[ id ][cFTulaj] ][fNev]);
		format(str, sizeof(str), "[%d]%s", CegInfo[ id ][cFTulaj], FInfo[ CegInfo[ id ][cFTulaj] ][fNev]);
	}
	else
		format(str, sizeof(str), "Nincs(Eladó)");
	return str;
}

//Bõvíteni
stock CegTipus( id )
{
	new str[32];
	switch( CegInfo[ id ][cTipus] )
	{
		case 0: str = "N/A";
	}
	return str;
}

stock KozeliCeg( playerid, Float:tav = 3.0 )
{
	new i = NINCS, id = NINCS;
	for(;++i < MAX_CEG;)
	{
		if(CegInfo[i][cVan])
		{
			if(CegInfo[i][cPosBe][0] == 0.0 || !IsPlayerInRangeOfPoint(playerid, tav, PosExt( CegInfo[i][cPosBe] )))
				continue;
			
			id = i;
			break;
		}
	}
	
	return id;
}

stock CegPenz( id, ertek, afa = 27 )
{
	if(id >= 0 && id < MAX_CEG && CegInfo[ id ][cVan])
	{
		new tax = floatround((ertek * afa) / 100);
		
		FInfo[ FRAKCIO_KORMANY ][fPenz] += tax;
		FkUpdate(FRAKCIO_KORMANY, fuPenz);
		
		CegInfo[ id ][cKassza] += floatround(ertek - tax);
	}
	return true;
}

stock Felrobbant( playerid )
{
	if(!Belepve(playerid) || playerid == INVALID_PLAYER_ID)
		return false;
		
	new Float:pos[3];
	
	GetPlayerPos(playerid, PosExt(pos));
	CreateExplosion(PosExt(pos), 12, 8.0);
	SetHealth(playerid, 0.0);
	return true;
}

stock HitmanRang( id )
{
	new str[64];
	switch( PlayerInfo[id][pHitman] )
	{
		case -1: str = "Tag";
		case -2: str = "Director";
		default:
		{
			if(PlayerInfo[id][pHitman] > gettime())
				format(str, sizeof(str), "%s", UnixToTime( PlayerInfo[id][pHitman] ));
			else
				str = "Nincs";
		}
	}
	
	return str;
}
funkcio Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
	new Float:fDist[3];
	GetPlayerPos(playerid, fDist[0], fDist[1], fDist[2]);
	
	if( GetPlayerState( playerid ) == PLAYER_STATE_SPECTATING || GetPlayerState( targetid ) == PLAYER_STATE_SPECTATING )
	    return 20000.0;
	else
		return GetPlayerDistanceFromPoint(targetid, fDist[0], fDist[1], fDist[2]);
}

stock KerValtozokNullazasa()
{
	k_ar = 0;
	k_veh = INVALID_VEHICLE_ID;
	//k_elado = INVALID_PLAYER_ID;
	k_kereskedo = INVALID_PLAYER_ID;
	k_uzleteles = 0;
	return true;
}
stock NincsJarmu(playerid)
{
	return SCM(playerid,COL_LRED,"Nincs ilyen jármû.");
}


stock NincsJatekos(playerid)
{
	return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
}
//################################################## stockok, funkcio-k vége! ####################################################
//################################################## Játékos Parancsok! ####################################################

CMD:gcam(playerid,params[])
{
	if(PlayerInfo[playerid][pLeader] == 0 && (PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD) && !IsScripter(playerid))
		SCM(playerid,COL_MKEK,"Sajnos nem használhatod ezt a parancsot!!!");
	else 
		ShowPlayerDialog(playerid,DIALOG_MAIN,DIALOG_STYLE_LIST,"{00A5FF}Camera System {FFFFFF}- {FFDC00}Menü","{37FF00}Új Radar\n\nLegközelebbi radar\nLegközelebbi radar figyelése\n{FF1400}Legközelebbi radar törlése\n{FF1400}Minden radar törlése\n{FF1400}Kilépés","OK","");
	
	return 1;
}

CMD:streaminfo(playerid,params[])
{
	SFM(playerid,COL_MKEK,"A SAMP kliensednek jelenleg be van töltve (streamelve) %d játékos, és %d jármû.",PlayerInfo[playerid][pStreameltplayer],PlayerInfo[playerid][pStreameltvehicle]);
	SFM(playerid,COL_MKEK,"Te jelenleg %d játékosnak vagy bestreamelve.",PlayerInfo[playerid][pMasoknakstreamelt]);
	return 1;
}
/*CMD:hazadom(playerid,params[])
{
	SendClientMessage(playerid, -1, "-------------------");
	SFM(playerid, COL_MKEK, "Adó: %d", HazAdoResz(playerid));
	return true;
}*/
CMD:lakcimkartya(playerid,params[])
{
	new param[32];
	if(sscanf(params,"s[32]{}",param)) return SCM(playerid,COL_MKEK,"Használat: /lakcímkártya [Vesz/Felmutat]");
	else if(!strcmp(param,"vesz",true))
	{
	    if(PlayerInfo[playerid][pLakcimkartya] == 1) return SCM(playerid,COL_LRED,"Neked már van!");
	    if(!NincsHaza(playerid)) return SCM(playerid,COL_LRED,"Neked nincs bejelentett lakcímed.");
	    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 889.750, -0.752, 988.210)) return SCM(playerid,COL_LRED,"A Városházán tudsz venni lakcímkártyát.");
	    if(PlayerInfo[playerid][ppenz] < 10) return SCM(playerid,COL_LRED,"10$-ba kerül, nincs ennyi pénzed.");
		PlayerInfo[playerid][ppenz] -= 10;
		Cselekves(playerid,"igényelt egy lakcímkártyát.");
		PlayerInfo[playerid][pLakcimkartya] = 1;
		SCM(playerid,COL_MKEK,"Megkaptad a lakcímkártyát!");
	}
	else if(!strcmp(param,"felmutat",true))
	{
	    if(PlayerInfo[playerid][pLakcimkartya] == 0) return SCM(playerid,COL_LRED,"Nincs lakcímkártyád!");
		new pid;
		if(sscanf(params,"{s[32]}u",pid)) return SCM(playerid,COL_MKEK,"Használat: /lakcímkártya felmutat [Játékos/ID]");
		else if(pid == INVALID_PLAYER_ID) return NincsJatekos(playerid);
		new Float:ppos[3];
	    new Float:pos[3];
	    GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
	    GetPlayerPos(pid,ppos[0],ppos[1],ppos[2]);
	    if(GetDistanceBetweenPoints(pos[0],pos[1],pos[2],ppos[0],ppos[1],ppos[2]) > 5.00) return SCM(playerid,COL_LRED,"Ez a játékos nincs a közeledben.");
	    nformat(dtext,512,""#COL_MKEK"Név: {FFFFFF}%s\n"#COL_MKEK"Bejelentett lakcím:{FFFFFF} San Andreas, See u. %d",JatekosNev(playerid),PlayerInfo[playerid][pHazKulcs][0]);
	    ShowPlayerDialog(pid,DIALOG_LAKCIMKARTYA,DIALOG_STYLE_MSGBOX,"Lakcímkártya",dtext,"Rendben","");
	}
	return 1;
}

CMD:forgalmi(playerid,params[])
{
	new pid;
	new vid;
	new vvid;
	if(sscanf(params,"ud",pid,vid)) return SCM(playerid,COL_MKEK,"Használat: /forgalmi [Játékos/ID] [jármûID]");
	else if(pid == INVALID_PLAYER_ID) return NincsJatekos(playerid);
	else if(vid == INVALID_VEHICLE_ID) return NincsJarmu(playerid);
	else {
	    vvid = vInfoID[vid];
		if(vInfo[vvid][vTulajID] != PlayerInfo[playerid][pID]) return SCM(playerid,COL_LRED,"Ez nem a te jármûved.");
		else {
		    new Float:ppos[3];
		    new Float:pos[3];
		    GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
		    GetPlayerPos(pid,ppos[0],ppos[1],ppos[2]);
		    if(GetDistanceBetweenPoints(pos[0],pos[1],pos[2],ppos[0],ppos[1],ppos[2]) > 5.00) return SCM(playerid,COL_LRED,"Ez a játékos nincs a közeledben.");
			nformat(dtext,1024,""#COL_MKEK"jármû típusa: {FFFFFF}%s\n"#COL_MKEK"jármû rendszáma: {FFFFFF}SEE-%d\n"#COL_MKEK"jármû tulajdonosa: {FFFFFF}%s",VehicleNames[vInfo[vvid][vModel] - 400],vid,JatekosNev(playerid));
			ShowPlayerDialog(pid,DIALOG_FORGALMI,DIALOG_STYLE_MSGBOX,"Forgalmi Engedély",dtext,"Rendben","");
			Cselekves(playerid,"felmutatta a forgalmiját valakinek.");
		}
	}
	return 1;
}

CMD:lotto(playerid,params[])
{
    new i = NINCS, bool:van;
	for(;++i < sizeof(Boltok);)
		if(IsPlayerInRangeOfPoint(playerid, 5.0, Boltok[i][boltX], Boltok[i][boltY], Boltok[i][boltZ]))
			van = true;

	if(!van) return SCM(playerid,COL_LRED,"Nem vagy boltban!");

	new szam;
	if(sscanf(params,"d",szam)) return SCM(playerid,COL_MKEK,"Használat: /lottó [Lottószám(1-99)]");
	else if(szam < 1 || szam > 99) return SCM(playerid,COL_LRED,"1-99!");
	else if(PlayerInfo[playerid][ppenz] < 10) return SCM(playerid,COL_LRED,"10$ az ára, nálad nincs ennyi!");
	#if !defined HAZI_SZERVER
	else if(PlayerInfo[playerid][pLottounix] > gettime()) return SCM(playerid,COL_LRED,"Még nem vehetsz lottót!");
	#endif
	else {
	    new rand = random(99);
	    new nyeremeny = Rand(100000,150000);
		PlayerInfo[playerid][pLottounix] = gettime() + 259200;
		PlayerInfo[playerid][ppenz] -= 10;
		SFM(playerid,COL_MKEK,"A kihúzott szám: %d",rand);
		if(rand == szam)
		{
			SFM(playerid,COL_VZOLD,"Gratulálunk, ön megnyerte a fonyereményt, ami %d$! Az összeget átutaltuk a bankszámlájára!",nyeremeny);
			SendFormatMessageToAll(COLOR_BLUE,"Lottó:{FFFFFF}%s megnyerte a lottót! Nyereménye "#COL_MKEK"%d${FFFFFF}!",JatekosNev(playerid),nyeremeny);
			PlayerInfo[playerid][pBszPenz] += nyeremeny;
	 	}
	 	else return SCM(playerid,COL_LRED,"Sajnáljuk, ön most nem nyert! ((Legközelebb 3 nap múlva próbálkozhatsz!))");
	}
	return 1;
}
CMD:dj(playerid,params[])
{
    if(NemMozoghat(playerid))
        return SCM(playerid, COL_LRED, NEM_MOZOGAT);
        
    return LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
}

CMD:maszkid(playerid,params[])
{
	if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /maszkid [Játékos vagy Maszk ID]");
	
	new bool:talalt;
	if(IsNumeric(params))
	{
		foreach(Player, i)
		{
			if(!PlayerInfo[i][pMaszkID]) continue;
			if(Belepve(i) && !IsPlayerNPC(i) && PlayerInfo[i][pMaszkID] == strval(params))
			{
				SFM(playerid, COL_MKEK, "Név: %s | MaszkID: %d", JatekosNev(i), PlayerInfo[i][pMaszkID]);
				talalt = true;
				break;
			}
		}
	}
	
	if(!talalt)
	{
		new jatekos;
		sscanf(params, "u", jatekos);
		
		if(IsPlayerConnected(jatekos) && jatekos != INVALID_PLAYER_ID && !IsPlayerNPC(jatekos))
		{
			SFM(playerid, COL_MKEK, "Név: %s | MaszkID: %d", JatekosNev(jatekos), PlayerInfo[jatekos][pMaszkID]);
			talalt = true;
		}
	}
	
	if(!talalt)
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	return true;
}

CMD:w(playerid,params[])
{
	new jatekos, szoveg[128];
	if(sscanf(params, "us[128]", jatekos, szoveg))
		return SCM(playerid, COL_MKEK, "Használat: /w(hisper) [játékos] [Üzenet]");
	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen Játékos!");
	if(jatekos == playerid)
		return SCM(playerid, COL_LRED, "Skizofrén vagy? :D Magaddal ne beszélgess...");
	if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
	if(PlayerInfo[playerid][pAlnevbe] == false)
	{
		new maszkid[24];
		format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
		format(uzenet, sizeof(uzenet), "* %s súgja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), szoveg);
	}
	else
	{
		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			new maszkid[24];
			format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
			format(uzenet, sizeof(uzenet), "* %s súgja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), szoveg);
		}
		else
		{
			format(uzenet, sizeof(uzenet), "* %s súgja: %s", PlayerInfo[playerid][pAlnev], szoveg);
		}
	}
	SendClientMessage(jatekos, 0xffff00AA, uzenet);
	ProxDetector(15.0, playerid, "Valakik összesúgtak...", COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return true;
}

CMD:nullaz(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"/nullaz [Ház/Jármû/Fegyverek[ÕSSZES]] [ID]");
		return 1;
	}
	new mi[32],id;
	sscanf(params,"sD(-1){}",mi,id);
	if(egyezik(mi,"Fegyverek"))
	{
		if(!IsScripter(playerid)) return SCM(playerid,COL_LRED,"Ezt a parancsot sokkal magasabb rangon tudod csak használni!");
		SendFormatMessageToAll(COLOR_LIGHTRED,"[Felhívás] %s törölte az ÖSSZES fegyvert a szerverrõl!",JatekosNev(playerid));
		foreach(Player,i)
		{
			PlayerInfo[i][pFegyver] = 0;
			ResetPlayerWeapons(i);
			new fegyver = 0;
			for(;++fegyver < 13;)
			{
				PlayerInfo[i][pFegyverek][fegyver] = 0;
				PlayerInfo[i][pToltenyek][fegyver] = 0;
			}
			SetPlayerAttachedWeapon(i, true);
		}
		doQuery("UPDATE `jatekosok` SET `pFegyverek`='0,0,0,0,0,0,0,0,0,0,0,0,%d'",0); //ez így egyszerûbb
		doQuery("UPDATE `jatekosok` SET `pToltenyek`='0,0,0,0,0,0,0,0,0,0,0,0,%d'",0); //ez így egyszerûbb
		for(new cid=0;cid<MAX_VEHICLES;cid++)
		{
			if(vInfo[cid][vHasznalva] == true)
			{
				for(new fegyver = 0;fegyver<5;fegyver++)
				{
					vInfo[cid][vFegyver][fegyver] = 0;
					vInfo[cid][vTolteny][fegyver] = 0;
					vUpdate(cid, vuFegyver);
				}
			}
		}
		for(new i=0;i<MAX_HOUSE;i++)
		{
			if(HazInfo[i][hasznalatban] == true)
			{
				for(new c=0;c<15;c++)
				{
					HazInfo[i][hFegyver][c] = 0;
					HazInfo[i][hTolteny][c] = 0;
				}
			}
		}
		for(new i=0;i<MAX_FRAKCIO;i++)
		{
			for(new c=0;c<50;c++)
			{
				FInfo[i][fFegyverek][c] = 0;
				FInfo[i][fToltenyek][c] = 0;
				FkUpdate(i, fuFegyverek);
			}
		}
		for(new i=0;i<MAX_DROP;i++)
		{
			if(dInfo[i][dTipus] == ELDOB_FEGYVER && dInfo[i][dHasznalva] == true)
			{
				dInfo[i][dTipus] 		= 	0;
				dInfo[i][dFegyver] 	= 	0;
				dInfo[i][dErtek] 		= 	0;
				dInfo[i][dPos][0] 	= 	0.0;
				dInfo[i][dPos][1] 	= 	0.0;
				dInfo[i][dPos][2] 	= 	0.0;
				dInfo[i][dInt] 		= 	0;
				dInfo[i][dVirtual] 	= 	0;
				DestroyDynamicObject(dInfo[i][dObject]);
				DestroyDynamic3DTextLabel(dInfo[i][dText]);
				dInfo[i][dHasznalva]	= 	false;
				doQuery("DELETE FROM `"#MYSQL_CUCCOK_TABLA"` WHERE TorlesiAzonosito = '%d'", dInfo[i][dTorlesiAzonosito]);
				dInfo[i][dTorlesiAzonosito] = 0;
			}
		}
		SCM(playerid,COL_LRED,"Kész!");
		AdatMentesSzerver( true );
		return 1;
	}
	if(egyezik(mi,"Ház"))
	{
		if(id == -1)
		{
			SCM(playerid,COL_LRED,"Ház ID?");
			return 1;
		}
		if(HazInfo[id][hasznalatban] == false) return SCM(playerid,COL_LRED,"Nincs ilyen ház!");
		for(new i=0;i<15;i++)
		{
			HazInfo[id][hFegyver][i] = 0;
			HazInfo[id][hTolteny][i] = 0;
		}
		HazMentes();
		SFM(playerid,COL_LRED,"A %d számú házat nulláztad!",id);
		AdminUzenet(COLOR_LIGHTRED,1,"%s nullázta a %d számú ház fegyvereit",JatekosNev(playerid),id);
		return 1;
	}
	if(egyezik(mi,"Jármû"))
	{
		if(id == -1)
		{
			SCM(playerid,COL_LRED,"Ház ID?");
			return 1;
		}
		if(vInfo[id][vHasznalva] == false) return SCM(playerid,COL_LRED,"Nincs ilyen kocsi!");
		for(new i=0;i<5;i++)
		{
			vInfo[id][vFegyver][i] = 0;
			vInfo[id][vTolteny][i] = 0;
		}
		vUpdate(id, vuFegyver);
		SFM(playerid,COL_LRED,"A %d számú jármûvet!",id);
		AdminUzenet(COLOR_LIGHTRED,1,"%s nullázta a %d számú jármû fegyvereit",JatekosNev(playerid),id);
		JarmuMentes();
		return 1;
	}
	return 1;
}

CMD:tiltasaim(playerid,params[])
{
	new alma = 0;
	if(PlayerInfo[playerid][pASTiltas] > 0)
	{
		SFM(playerid,COL_LRED,"A te adminsegéd tiltásod %d percig érvényes még.",PlayerInfo[playerid][pASTiltas]/60);
		alma++;
	}	
	if(PlayerInfo[playerid][pFrakcioTiltas] > 0)
	{
		SFM(playerid,COL_LRED,"A te frakció csatlakozási tiltásod %d percig érvényes még.",PlayerInfo[playerid][pFrakcioTiltas]/60);
		alma++;
	}
	if(PlayerInfo[playerid][pReportTiltas] > 0)
	{
		SFM(playerid,COL_LRED,"A te report tiltásod %d percig érvényes még.",PlayerInfo[playerid][pReportTiltas]/60);
		alma++;
	}	
	if(PlayerInfo[playerid][pAutoTiltas] > 0)
	{
		SFM(playerid,COL_LRED,"A te jármû vezetési tiltásod %d percig érvényes még.",PlayerInfo[playerid][pAutoTiltas]/60);
		alma++;
	}	
	if(PlayerInfo[playerid][pFegyverTiltas] > 0)
	{
		SFM(playerid,COL_LRED,"A te fegyverhasználati tiltásod %d percig érvényes még.",PlayerInfo[playerid][pFegyverTiltas]/60);
		alma++;
	}
	if(alma == 0)
	{
		return SCM(playerid,COL_VZOLD,"Nem tiltottak el adminsegédtõl / fegyverektõl / autóktól /frakcióktól.");
	}
	return 1;
}
CMD:tilt(playerid,params[])
{
	if(!Admin(playerid,FSEGED_SZINT)) return 1;
	if(isnull(params))
	{
		SCM(playerid, COL_MKEK,"/tilt [JátékosID] [Óra] [Frakció / AS / Fegyver / Autó / Report] - LEVENNI CSAK HA TE ADTAD!");
		return 1;
	}
	new id,ora,funkcio[32];
	sscanf(params,"U(-1){}D(-1){}s[32]",id,ora,funkcio);
	if(id == -1) return SCM(playerid,COL_LRED,"ID?");
	if(IsPlayerNPC(id) || !Belepve(id) || id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	if(ora == -1) return SCM(playerid,COL_LRED,"Idõ?");
	if(egyezik(funkcio,"Frakció"))
	{
		if(ora == 0)
		{
			SFM(playerid,COL_LRED,"Levetted a frackiótiltást róla: %s",JatekosNev(id));
			SCM(id,COL_LRED,"Levették a frakciótiltást rólad, ismét csatlakozhatsz frakcióba! Csak okosan.");
			PlayerInfo[id][pFrakcioTiltas] = 0;
			return 1;
		}
		else
		{
			SFM(playerid,COL_LRED,"Frakciótiltás hozzáadva: %s | Idõ: %d óra.",JatekosNev(id),ora);
			SFM(id,COL_LRED,"Eltiltottak a frakcióba lépéstõl %d órára. Információ: /tiltasaim",ora);
			PlayerInfo[id][pFrakcioTiltas] = (ora*60*60);
		}
		return 1;
	}
	if(egyezik(funkcio,"Report"))
	{
		if(ora == 0)
		{
			SFM(playerid,COL_LRED,"Levetted a reporttiltást róla: %s",JatekosNev(id));
			SCM(id,COL_LRED,"Levették a reporttiltást rólad, ismét írhatsz reportot! Csak okosan.");
			PlayerInfo[id][pReportTiltas] = 0;
			return 1;
		}
		else
		{
			SFM(playerid,COL_LRED,"Reporttiltás hozzáadva: %s | Idõ: %d óra.",JatekosNev(id),ora);
			SFM(id,COL_LRED,"Eltiltottak a report írástól %d órára. Információ: /tiltasaim",ora);
			PlayerInfo[id][pReportTiltas] = (ora*60*60);
		}
		return 1;
	}
	if(egyezik(funkcio,"Fegyver"))
	{
		if(ora == 0)
		{
			SFM(playerid,COL_LRED,"Levetted a fegyvertiltást róla: %s",JatekosNev(id));
			SCM(id,COL_LRED,"Levették a fegyvertiltást rólad, ismét használhatsz fegyvert! Csak okosan.");
			PlayerInfo[id][pFegyverTiltas] = 0;
			return 1;
		}
		else
		{
			SFM(playerid,COL_LRED,"Fegyvertiltás hozzáadva: %s | Idõ: %d óra.",JatekosNev(id),ora);
			SFM(id,COL_LRED,"Eltiltottak a fegyverhasználattól %d órára. Információ: /tiltasaim",ora);
			PlayerInfo[id][pFegyverTiltas] = (ora*60*60);
			return 1;
		}
	}
	if(egyezik(funkcio,"Autó"))
	{
		if(ora == 0)
		{
			SFM(playerid,COL_LRED,"Levetted a kocsitiltást róla: %s",JatekosNev(id));
			SCM(id,COL_LRED,"Levették az autótiltást rólad, ismét vezethetsz kocsikat! Csak okosan.");
			PlayerInfo[id][pAutoTiltas] = 0;
			return 1;
		}
		else
		{
			SFM(playerid,COL_LRED,"Autótiltás hozzáadva: %s | Idõ: %d óra.",JatekosNev(id),ora);
			SFM(id,COL_LRED,"Eltiltottak az autóhasználattól %d órára. Információ: /tiltasaim",ora);
			PlayerInfo[id][pAutoTiltas] = (ora*60*60);
			return 1;
		}
	}
	if(egyezik(funkcio,"AS"))
	{
		if(ora == 0)
		{
			SFM(playerid,COL_LRED,"Levetted az adminsegéd tiltást róla: %s",JatekosNev(id));
			SCM(id,COL_LRED,"Levették az adminsegéd tiltást rólad, ismét dolgozhatsz! Csak okosan.");
			PlayerInfo[id][pASTiltas] = 0;
			return 1;
		}
		else
		{
			SFM(playerid,COL_LRED,"Adminsegéd tiltás hozzáadva: %s | Idõ: %d óra.",JatekosNev(id),ora);
			SFM(id,COL_LRED,"Eltiltottak az adminsegédtõl %d órára. Információ: /tiltasaim",ora);
			PlayerInfo[id][pASTiltas] = (ora*60*60);
			return 1;
		}
	}
	return 1;
}
CMD:club(playerid,params[])
{
	if(!IsScripter(playerid)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/club [ID]");
		return 1;
	}
	new i;
	sscanf(params,"u",i);
	if(i == INVALID_PLAYER_ID || IsPlayerNPC(i) || !Belepve(i)) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	if(PlayerInfo[i][pClub] == 1)
	{
		PlayerInfo[i][pClub] = 0;
		SFM(playerid,COL_LRED,"Kirúgtad a clubosok közül, már nem tudja használni a parancsot. Név: %s",JatekosNev(i));
		SCM(i,COL_LRED,"Egy Scripter / Tulajdonos kirúgott a Don't Stop - The Club alfrakcióból.");
		return 1;
	}
	if(PlayerInfo[i][pClub] == 0)
	{
		PlayerInfo[i][pClub] = 1;
		SCM(i,COL_MKEK,"Felvettek a Don't Stop - The Club csapatába!");
		SFM(playerid,COL_MKEK,"Sikeresen felvetted a Don't Stop - The Club-ba %s -t!",JatekosNev(playerid));
	}
	return 1;
}
CMD:clubzene(playerid,params[])
{
	if(PlayerInfo[playerid][pClub] == 0) return 1;
	if(!IsPlayerInRangeOfPoint(playerid,3,1171.6571,-1662.3842,22.2744))
	{
		SetPlayerCheckpoint(playerid,1171.6571,-1662.3842,22.2744,5);
		SCM(playerid,COL_LRED,"Nem vagy a DJ pult mögött!");
		return 1;
	}
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/clubzene [Stop / Start]");
		return 1;
	}
	new mi[32],url[256];
	sscanf(params,"s[32]s[256]",mi,url);
	if(egyezik(mi,"Start"))
	{
		if(isnull(url))
		{
			SCM(playerid,COL_LRED,"URL?");
			return 1;
		}
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid,X,Y,Z);
		foreach(Player,i)
		{
			if(IsPlayerInRangeOfPoint(i,65,X,Y,Z))
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i,url,X,Y,Z,65.0,1);
				strmid(SweetRadio,url,0,strlen(url),256);
				strmid(HifiZene[i],url,0,strlen(url),256);
			}
		}
		return 1;
	}
	if(egyezik(mi,"Stop"))
	{
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid,X,Y,Z);
		foreach(Player,i)
		{
			if(IsPlayerInRangeOfPoint(i,65,X,Y,Z))
			{
				StopAudioStreamForPlayer(i);
				strmid(SweetRadio,"-",0,strlen("-"),256);
				strmid(HifiZene[i],"-",0,strlen("-"),256);
			}
		}
	    return 1;
	}
	return 1;
}


CMD:drink(playerid,params[])
{
	if(isnull(params))
	{
		if(GetPlayerDrunkLevel(playerid) > 10000) 
		{
			SCM(playerid,COL_LRED,"Haver, a következõ korty már detox lesz. Ésszel öreg!");
			return 1;
		}
		new d=-1;
		for(new i=0;i<MAXDRINK;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid,5,DrinkInfo[i][dX],DrinkInfo[i][dY],DrinkInfo[i][dZ]) && DrinkInfo[i][dVan] == 1)
			{
				d = i;
				break;
			}
		}
		if(d == -1)
		{
			return SCM(playerid,COL_LRED,"Nem vagy bárban!");
		}
		new dstr[1024], tmp[128], b = NINCS;
		for(;++b < sizeof(ItalLista);)
		{
			format(tmp, sizeof(tmp), "\n%s\t[%s$]", ItalLista[b][0], FormatNumber(ItalLista[b][1][0], 0, ','));
			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid,DIALOG_ITALOK,DIALOG_STYLE_LIST,"Italok",dstr,"Vesz","Mégse");
		return 1;
	}
	new mit[32];
	sscanf(params,"s[32]",mit);
	if(egyezik(mit,"lerak"))
	{
		if(Admin(playerid,AC_SZINT))
		{
			new Float:X,Float:Y,Float:Z;
			GetPlayerPos(playerid,X,Y,Z);
			new d = -1;
			for(new i=0;i<MAXDRINK;i++)
			{
				if(DrinkInfo[i][dVan] == 0)
				{
					d = i;
					break;
				}
			}
			if(d == -1)
			{
				SCM(playerid,COL_LRED,"Hibakód 0002");
				return 1;
			}
			DrinkInfo[d][dVan] = 1;
			DrinkInfo[d][dX] = X;
			DrinkInfo[d][dY] = Y;
			DrinkInfo[d][dZ] = Z;
			DrinkInfo[d][dText] = CreateDynamic3DTextLabel("(( /drink ))", COLOR_MKEK, DrinkInfo[d][dX], DrinkInfo[d][dY], DrinkInfo[d][dZ], 20.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 0);
			doQuery("INSERT INTO `"#MYSQL_DRINK_TABLE"`(X, Y, Z) VALUES('%f', '%f', '%f')", X,Y,Z);
			return 1;
		}
	}
	return 1;
}

CMD:szonda(playerid,params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");
		
	new jatekos = KozelbenValaki(playerid, 2.0);
	
	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
		return SCM(playerid, COL_LRED, "A közeledben nincs senki!");
		
	Szondaz[jatekos] = playerid;
	Szondaz[playerid] = jatekos;
	new kicsinalja[128];
	
	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
	}
	SFM(jatekos,COL_MKEK,"%s meg szeretne szondázni ((/elfogad szondázás)).",kicsinalja);
	SCM(playerid,COL_MKEK,"Szondázás kérelem elküldve várj amíg elfogadja!");
	return true;
}
CMD:horgaszat(playerid,params[])
{
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"/horgászat [Kezd / Lead]");
		return 1;
	}
	new mi[32];
	sscanf(params,"s[32]",mi);
	if(egyezik(mi,"Kezd"))
	{
		if(!IsPlayerInRangeOfPoint(playerid,15,381.8778,-2074.4036,7.8359) && !IsPlayerInRangeOfPoint(playerid,15,386.8599,-2084.4265,7.8359))
		{
			new random1 = Rand(1,2);
			switch(random1)
			{
				case 1:
				{
					SetPlayerCheckpoint(playerid,381.8778,-2074.4036,7.8359,15);
				}
				case 2:
				{
					SetPlayerCheckpoint(playerid,386.8599,-2084.4265,7.8359,15);
				}
			}
			SCM(playerid,COL_LRED,"Nem vagy jó helyen!");
			return 1;
		}
		if(PlayerInfo[playerid][pHal] >= 1000) return SCM(playerid, COL_LRED,"Túl sok hal van már nállad!");
		if(Fishing[playerid] == 0)
		{
			new ido = Rand(10000,30000);
			TogglePlayerControllable(playerid, 0);
			ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
			HorgaszasAnim(playerid);
			HorgaszasAnim(playerid);
			HorgaszasAnim(playerid);
			Fishing[playerid] = 1;
			GameTextForPlayer(playerid,"~n~~n~~n~~n~~n~~n~~n~~n~~w~Bedobtad a Botot, várj a~g~kapásra...", 10000, 3);
			SetTimerEx("MOST",ido,0,"d",playerid);
		}
		else
		{
			SCM(playerid,COL_LRED,"Már horgászol!!");
			return 1;
		}
		return 1;
	}
	if(egyezik(mi,"Lead"))
	{
		if(!IsPlayerInRangeOfPoint(playerid,5,2474.0359,-2708.9050,3.0000))
		{
			SetPlayerCheckpoint(playerid,2474.0359,-2708.9050,3.0000,15);
			SCM(playerid,COL_LRED,"Nem vagy jó helyen!");
			return 1;
		}
		if(PlayerInfo[playerid][pHal] < 1000) return SCM(playerid,COL_LRED,"Nincs elég hal nállad! [1.000Kg Minimum!]");
		new osszeg = Rand(150,500);
		SFM(playerid,COL_MKEK,"Rendben %d $ kapsz a halakért!",osszeg);
		PlayerInfo[playerid][pHal] -= 1000;
		GiveMoney(playerid,osszeg);
		return 1;
	}
	return 1;
}
CMD:hifi(playerid,params[])
{
	if(PlayerInfo[playerid][pjail] != 0) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"/hifi [Lerak / Felvesz / CD / Rádió / Kikapcsol]");
		return 1;
	}
	new mit[64],cd[64];
	sscanf(params,"s[64]s[64]",mit,cd);
	if(egyezik(mit,"Lerak"))
	{
		if(PlayerInfo[playerid][pHifi] < 1) return SCM(playerid,COL_LRED,"Nincs Hifid!");
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid,X,Y,Z);
		HifiObjectLerakas[playerid] = CreateDynamicObject(2226,X,Y,Z,0,0,0);
		PlayerInfo[playerid][pHifi]--;
		EditDynamicObject(playerid,HifiObjectLerakas[playerid]);
		SCM(playerid,COL_LRED,"Helyezd el a Hifit! De ésszel hogy hová rakod!!!");
		return 1;
	}
	if(egyezik(mit,"CD"))
	{
		if(isnull(cd))
		{
			SCM(playerid, COL_LRED, "Használat: /hifi CD [ URL (.mp3, .pls, .ogg végzõdéssel) / Stop ] | Zene indítása és leállítása");
			return 1;
		}
		new h = -1;
		for(new i=1;i<MAXHIFI;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 6,HifiInfo[i][hX],HifiInfo[i][hY],HifiInfo[i][hZ]))
			{
				h = i;
				break;
			}
		}
		if(h == -1)
		{
			SCM(playerid,COL_LRED,"Nem vagy hifi mellett!");
			return 1;
		}
		if(!egyezik(cd,"Stop"))
		{
			foreach(Player,x)
			{
				if(IsPlayerInRangeOfPoint(x, 6.0, HifiInfo[h][hX],HifiInfo[h][hY],HifiInfo[h][hZ]))
				{
					StopAudioStreamForPlayer(x);
					PlayAudioStreamForPlayer(x, cd,HifiInfo[h][hX],HifiInfo[h][hY],HifiInfo[h][hZ],20.0,1);
					strmid(HifiZene[x],cd,0,strlen(cd),256);
					strmid(HifiInfo[h][hURL],cd,0,strlen(cd),256);
				}
			}
			Cselekves(playerid,"berakott egy CD-t a hifibe.");
		}
		else
		{
			foreach(Player,x)
			{
				if(IsPlayerInRangeOfPoint(x, 6.0, HifiInfo[h][hX],HifiInfo[h][hY],HifiInfo[h][hZ]))
				{
					StopAudioStreamForPlayer(x);
					strmid(HifiZene[x],"-",0,strlen("-"),256);
				}
			}
			Cselekves(playerid,"kikapcsolta a zenét.");
		}
		return 1;
	}
	if(egyezik(mit,"Kikapcsol"))
	{
		new h = -1;
		for(new i=1;i<MAXHIFI;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 6,HifiInfo[i][hX],HifiInfo[i][hY],HifiInfo[i][hZ]))
			{
				h = i;
				break;
			}
		}
		if(h == -1)
		{
			SCM(playerid,COL_LRED,"Nem vagy hifi mellett!");
			return 1;
		}
		foreach(Player,x)
		{
			if(IsPlayerInRangeOfPoint(x, 6.0, HifiInfo[h][hX],HifiInfo[h][hY],HifiInfo[h][hZ]))
			{
				StopAudioStreamForPlayer(x);
				strmid(HifiZene[x],"-",0,strlen("-"),256);
				strmid(HifiInfo[h][hURL],"-",0,strlen("-"),256);
			}
		}
		return 1;
	}
	if(egyezik(mit,"Rádió"))
	{
		new h = -1;
		for(new i=1;i<MAXHIFI;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 6,HifiInfo[i][hX],HifiInfo[i][hY],HifiInfo[i][hZ]))
			{
				h = i;
				break;
			}
		}
		if(h == -1)
		{
			SCM(playerid,COL_LRED,"Nem vagy hifi mellett!");
			return 1;
		}
		new dstr[1024], tmp[128], i = NINCS;
		format(dstr, sizeof(dstr), #COL_VZOLD"Rádió kikapcsolása");
		for(;++i < sizeof(RadioLista);)
		{
			if(i % 2 == 1) format(tmp, sizeof(tmp), "\n"#COL_MKEK"%s", RadioLista[i][1]);
			else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s", RadioLista[i][1]);
			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid, DIALOG_RADIO_VHifi, DIALOG_STYLE_LIST, "MP3 - Rádió lista", dstr, "Hallgat", "Mégse");
		
		return 1;
	}
	if(egyezik(mit,"Felvesz"))
	{
		new h = -1;
		for(new i=1;i<MAXHIFI;i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 6,HifiInfo[i][hX],HifiInfo[i][hY],HifiInfo[i][hZ]))
			{
				h = i;
				break;
			}
		}
		if(h == -1)
		{
			SCM(playerid,COL_LRED,"Nem vagy hifi mellett!");
			return 1;
		}
		foreach(Player,x)
		{
			if(IsPlayerInRangeOfPoint(x, 6.0, HifiInfo[h][hX],HifiInfo[h][hY],HifiInfo[h][hZ]))
			{
				StopAudioStreamForPlayer(x);
				strmid(HifiZene[x],"-",0,strlen("-"),256);
			}
		}
		HifiInfo[h][hVan] = 0;
		HifiInfo[h][hX] = 0;
		HifiInfo[h][hY] = 0;
		HifiInfo[h][hZ] = -50;
		DestroyDynamicObject(HifiInfo[h][hObject]);
		doQuery("DELETE FROM `"#MYSQL_HIFI_TABLE"` WHERE ID='%d'",HifiInfo[h][hID]);
		SCM(playerid,COL_LRED,"Felvetted a hifit a földrõl.");
		PlayerInfo[playerid][pHifi]++;
		return 1;
	}
	return 1;
}

CMD:legtobbfirka(playerid,params[])
{
	if(FInfo[PlayerInfo[playerid][pFrakcio]][fLegalis] != FK_LEGAL && FInfo[PlayerInfo[playerid][pFrakcio]][fLegalis] != FK_REND)
	{
		new ID = LegtobbTag(0);
		new Frakcio = GetFrakcioByTag(ID);
		new Tagszam = LegtobbTag(1);
		if(Tagszam != NINCS)
		{
			SFM(playerid,COL_MKEK,"Bandák: Los Santos legnépszerûbb bandája jelenleg: %s | %d firkájuk van!",FInfo[Frakcio][fNev],Tagszam);
		}
		return 1;
	}
	return 1;
}

CMD:lemos(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD)
	{
		SCM(playerid,COL_LRED,"Nem vagy Rendõr!");
		return 1;
	}
	new tag;
	new mehet = 0;
	for(new i=0;i<MAX_TAG;i++)
	{
		if(IsPlayerInRangeOfPoint(playerid,5,TagInfo[i][tPoz][0],TagInfo[i][tPoz][1],TagInfo[i][tPoz][2]) && TagInfo[i][tVan] == 1)
		{
			mehet = 1;
			tag = i;
			break;
		}
	}
	new ellenseg;
	foreach(Player, p)
	{
		if(PlayerInfo[p][pFrakcio] == TagInfo[tag][tTulaj])
		{
			ellenseg++;
		}
	}
	if(mehet == 0 || TagInfo[tag][tFestveVan] == 0) return SCM(playerid,COL_LRED,"Nem vagy firka közelében!");
	if(ellenseg < 2) return SCM(playerid,COL_LRED, "Minimum 2 online tag kell az adott bandából a lemosáshoz.");
	SetTimerEx("Firkalemos",15000,false,"dd",playerid,tag);
	Cselekves(playerid,"elkezdett lemosni egy falfirkát",0);
	SCM(playerid,COL_LRED,"Elkezdted lemosni a falfirkát");
	ApplyAnimation(playerid, "SPRAYCAN","spraycan_full",4.0,1,0,0,1,0);
	return 1;
}

CMD:graffiti(playerid,params[])
{
	if(!IsScripter(playerid)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED, "Lerak - Leraksz vele egy graffiti helyet.");
		SCM(playerid,COL_LRED, "DEBUG - Debugolja a graffitit, ha nem engedné ráfújni.");
		SCM(playerid,COL_LRED, "Töröl - Törlid vele ID alapján a graffitit.");
		SCM(playerid,COL_LRED, "Lista - Kilistázza a graffitiket.");
		return 1;
	}
	new mi[32],id;
	sscanf(params,"s[32]D(-1){}",mi,id);
	if(egyezik(mi, "DEBUG"))
	{
		new tag,Float:tavolsag;
		tag = GetClosestTAG(playerid);
		tavolsag = GetDistanceToTAG(playerid,tag);
		if(tavolsag < 5)
		{
			Tag_Lathato(tag,false);
			TagInfo[tag][tFestveVan] = 1;
			TagInfo[tag][tTulaj] = 4;
			TagInfo[tag][tGraffitiObject] = 18659;
			Tag_Lathato(tag,true);
			TagInfo[tag][tKesz] = TAG_FELFESTESIDO;
			TagUpdateAll(tag);
			SCM(playerid,COL_LRED, "Át írva!");
			return 1;
		}
		else
		{
			SCM(playerid,COL_LRED,"Nincs a közeledben graffiti.");

		}
		return 1;
	}
	if(egyezik(mi,"Lista"))
	{
	    for(new i=0;i<MAX_TAG;i++)
	    {
	        if(TagInfo[i][tVan] == 1)
	        {
	            SFM(playerid,COL_MKEK,"ID: %d | Tulajdonos Frakció ID: %d",TagInfo[i][tID],TagInfo[i][tTulaj]);
	        }
		}
		new tag,Float:tavolsag;
		tag = GetClosestTAG(playerid);
		if(tag != -1)
		{
			tavolsag = GetDistanceToTAG(playerid,tag);
			if(tavolsag < 5)
			{
			    SFM(playerid,COL_MKEK,"Legközelebbi graffiti ID-je: %d",TagInfo[tag][tID]);
			}
			else
			{
			    SCM(playerid,COL_LRED,"Nincs a közeledben Graffiti!");
			}
		}
	    return 1;
	}
	if(egyezik(mi,"Töröl"))
	{
		if(id == -1)
		{
			SCM(playerid,COL_LRED,"IDje?");
			return 1;
		}
		if(TagInfo[id][tVan] == 0) return SCM(playerid,COL_LRED,"Nincs ilyen Graffiti!");
		TagInfo[id][tPoz][0] = 0;
		TagInfo[id][tPoz][1] = 0;
		TagInfo[id][tPoz][2] = -50;
		TagInfo[id][tRot][0] = 0;
		TagInfo[id][tRot][1] = 0;
		TagInfo[id][tRot][2] = 0;
		TagInfo[id][tGraffitiObject] = 0;
		TagInfo[id][tTulaj] = 0;
		TagInfo[id][tVan] = 0;
		if(IsValidDynamicObject(TagInfo[id][tObject]))
		{
			DestroyDynamicObject(TagInfo[id][tObject]);
		}
		DestroyDynamic3DTextLabel(TagInfo[id][tText]);
		SFM(playerid,COL_LRED,"Törölve a %d számú Graffiti!",id);
		doQuery("DELETE FROM `"#MYSQL_SPRAY_TABLA"` WHERE ID = '%d'", id);
		SFM(playerid,COL_LRED,"%d",id);
		return 1;
	}
	if(egyezik(mi, "Lerak"))
	{
		new Float:X,Float:Y,Float:Z,Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		GraffitiObjectLerakas[playerid] = CreateDynamicObject(18659, X,Y,Z, 0.00, 0.00, 0.00);
		EditDynamicObject(playerid, GraffitiObjectLerakas[playerid]);
		return 1;
	}
	return 1;
}


CMD:vasazas(playerid,params[])
{
	if(FInfo[PlayerInfo[playerid][pFrakcio]][fLegalis] == FK_LEGAL || FInfo[PlayerInfo[playerid][pFrakcio]][fLegalis] == FK_REND)
	{
		SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
		return 1;
	}
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"Használata: /vasazas [fel/le/felrak/levesz/lead]");
		return 1;
	}
	new mit[32];
	sscanf(params,"s[32]",mit);
	if(egyezik(mit, "lead"))
	{
		if(VasNala[playerid] == 1) return SCM(playerid,COL_MKEK, "Van nálad vas, rakd le ember!");
		new kocsiidx = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, kocsiidx) < 5)
		{
			if(GetVehicleModel(kocsiidx) == 478)
			{
				if(IsPlayerInRangeOfPoint(playerid,5.0,2128.1072,-1986.2361,13.6039))
				{
					if(KocsinDarab[kocsiidx] == 0) return SCM(playerid,COL_LRED,"Nincs a kocsin semmi!");
					LomisTorol(kocsiidx);
					new lomimunkaa = (KocsinDarab[kocsiidx]*2);
					new ertek = Rand(1,5);
					ertek += KocsinDarab[kocsiidx];
					new szam = Rand(KocsinDarab[kocsiidx],50);
					GiveMoney(playerid,szam);
					PlayerInfo[playerid][pVas] += ertek;
					SendFormatMessage(playerid, COLOR_GREEN,"Leadtad a méhbe a vasat. Bezúzásra került. %d Kg vasat szereztél belõle és %d $!",lomimunkaa,szam);
					KocsinDarab[kocsiidx] = 0;
				}
				else
				{
					SetPlayerCheckpoint(playerid,2128.1072,-1986.2361,13.6039,5.0);
					SCM(playerid,COL_MKEK, "Nem vagy a vastelepen.");
				}
			}
			else
			{
				SCM(playerid,COL_MKEK, "Ez nem lomis Kocsi!");
			}
		}
		else
		{
			SCM(playerid,COL_MKEK, "Nincs melleted a lomis kocsi!");
		}
	}
	if(egyezik(mit, "fel"))
	{
		if(VasNala[playerid] == 1)
			return SCM(playerid,COL_MKEK, "Már van nálad vas!");

		for(new i = 0; i < MAX_VAS; i++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 4.0,Vas[i][Vasx], Vas[i][Vasy], Vas[i][Vasz]) && Vas[i][vasVan] == 1)
			{
				VasNala[playerid] = 1;
				if(Vas[i][vasModelID] == 1208)//Mosógép
				{
					VasPlayerID[playerid] = 1208;
					SetPlayerAttachedObject(playerid,SLOT_SISAK,1208,6,0.29,0.14,-0.30,0.0,0.0,-222.0,0.94,0.89,0.76);
				}
				else if(Vas[i][vasModelID] == 1738)//Radiátor
				{
					VasPlayerID[playerid] = 1738;
					SetPlayerAttachedObject(playerid,SLOT_SISAK,1738,6,0.05,0.22,-0.05,1.0,0.0,0.0,0.88,1.00,0.70);
				}
				else if(Vas[i][vasModelID] == 1790)//Rádió
				{
					VasPlayerID[playerid] = 1790;
					SetPlayerAttachedObject(playerid,SLOT_SISAK,1790,6,-0.05,0.28,0.14,241.0,401.0,100.0,0.94,0.88,1.33);
				}
				else if(Vas[i][vasModelID] == 1791)//TV
				{
					VasPlayerID[playerid] = 1791;
					SetPlayerAttachedObject(playerid,SLOT_SISAK,1791,6,0.24,0.18,-0.28,-130.0,-110.0,-324.0,0.67,0.67,1.00);
				}
				else if(Vas[i][vasModelID] == 2597)//NAGY TV <<< kiszedve
				{
					VasPlayerID[playerid] = 2597;
					SetPlayerAttachedObject(playerid,SLOT_SISAK,2597,6,0.00,0.00,-0.30,-25.0,-3.0,-26.0,1.00,1.00,1.00);
				}
				VasTorol(Vas[i][vasVasID]);
				ApplyAnimation(playerid,"BOX","bxhipwlk",1300,1,1,1,1,5000);
				ApplyAnimation(playerid,"BOX","bxhipwlk",1300,1,1,1,1,5000);
				ApplyAnimation(playerid,"BOX","bxhipwlk",1300,1,1,1,1,5000);
				SCM(playerid,COL_MKEK, "Felvetted az ócskavasat! Gyûjtögess tovább!");
			}
		}
	}
	if(egyezik(mit, "le"))
	{
		if(VasNala[playerid] == 0)
			return SCM(playerid,COL_MKEK, "Nincs nálad ócskavas! Mit akarsz lerakni?");
		LerakVas(playerid);
		SCM(playerid,COL_MKEK, "Leraktad az ócskavasad a földre!");
		return 1;
	}
	else if(egyezik(mit, "felrak"))
	{
		if(VasNala[playerid] == 0)
			return SCM(playerid,COL_MKEK, "Nincs nálad ócskavas! Mit akarsz felrakni?");
		new kocsiidx = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, kocsiidx) < 3.8)
		{
			if(GetVehicleModel(kocsiidx) == 478)
			{
				if(VasPlayerID[playerid] == 1738)//Radiátor  2
				{
					if(Radiator[kocsiidx] < 2)
					{
						KocsinDarab[kocsiidx] ++;
						TorlesPlayerObject(playerid);
						if(Radiator[kocsiidx] == 1)
						{
							KoicsraObject[1][kocsiidx] = CreateDynamicObject(1738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[1][kocsiidx], kocsiidx, -0.514999, -1.884998, 0.424999, 14.070000, -270.043914, -90.047828);//Radiátor  2
						}
						if(Radiator[kocsiidx] == 0)
						{
							KoicsraObject[0][kocsiidx] = CreateDynamicObject(1738, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[0][kocsiidx], kocsiidx, -0.844999, -1.884998, 0.419999, 14.070000, -270.043914, -90.047828);//Radiátor  1
						}
						KocsinObject[kocsiidx] ++;
						Radiator[kocsiidx] ++;
						return 1;
					}
					else
					{
						SCM(playerid,COL_MKEK, "Maximum 2 darab radiátor fér fel.");
						return 1;
					}
				}
				if(VasPlayerID[playerid] == 1208)
				{
					if(Mosogep[kocsiidx] < 2)
					{
						KocsinDarab[kocsiidx] ++;
						TorlesPlayerObject(playerid);
						if(Mosogep[kocsiidx] == 0)
						{
							KoicsraObject[3][kocsiidx] = CreateDynamicObject(1208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[3][kocsiidx], kocsiidx, -0.069999, -2.215003, -0.049999, 0.000000, 0.000000, -89.944450);//Mosógép 1
						}
						if(Mosogep[kocsiidx] == 1)
						{
							KoicsraObject[2][kocsiidx] = CreateDynamicObject(1208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[2][kocsiidx], kocsiidx, 0.569999, -2.255004, -0.044999, 0.000000, 0.000000, 0.000000);//mosógép 1
						}
						KocsinObject1[kocsiidx] ++;
						Mosogep[kocsiidx] ++;
						return 1;
					}
					else
					{
						SCM(playerid,COL_MKEK, "Maximum 2 darab mosógép fér fel.");
						return 1;
					}
				}
				if(VasPlayerID[playerid] == 1790)//Videó 3
				{
					if(Video[kocsiidx] < 3)
					{
						KocsinDarab[kocsiidx] ++;
						TorlesPlayerObject(playerid);
						if(Video[kocsiidx] == 2)
						{
							KoicsraObject[6][kocsiidx] = CreateDynamicObject(1790, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[6][kocsiidx], kocsiidx, -0.674999, -0.684999, 0.285, 0.000000, 0.000000, 0.000000);//video 3
						}
						if(Video[kocsiidx] == 1)
						{
							KoicsraObject[5][kocsiidx] = CreateDynamicObject(1790, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[5][kocsiidx], kocsiidx, -0.674999, -0.684999, 0.15, 0.000000, 0.000000, 0.000000);//Videó 2
						}
						if(Video[kocsiidx] == 0)
						{
							KoicsraObject[4][kocsiidx] = CreateDynamicObject(1790, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[4][kocsiidx], kocsiidx, -0.674999, -0.684999, 0.015000, 0.000000, 0.000000, 0.000000);
						}
						KocsinObject2[kocsiidx] ++;
						Video[kocsiidx] ++;
						return 1;
					}
					else
					{
						SCM(playerid,COL_MKEK, "Maximum 3 darab videó fér fel.");
						return 1;
					}
				}

				if(VasPlayerID[playerid] == 1791)
				{
					if(Tv[kocsiidx] < 2)
					{
						KocsinDarab[kocsiidx] ++;
						TorlesPlayerObject(playerid);
						if(Tv[kocsiidx] == 1)
						{
							KoicsraObject[8][kocsiidx] = CreateDynamicObject(1791, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[8][kocsiidx], kocsiidx, -0.564999, -1.084999, -0.090000, 0.000000, 0.000000, 86.027976); //O,M:: 1791 | tv2
						}
						if(Tv[kocsiidx] == 0)
						{
							KoicsraObject[9][kocsiidx] = CreateDynamicObject(1791, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[9][kocsiidx], kocsiidx, -1.009999, -1.084999, -0.085000, 0.000000, 0.000000, 90.047966);
						}
						KocsinObject3[kocsiidx] ++;
						Tv[kocsiidx] ++;
						return 1;
					} 
					else 
					{
						SCM(playerid,COL_MKEK, "Maximum 2 darab kis TV fér fel.");
						return 1;
					}
				}

				if(VasPlayerID[playerid] == 2597)// Álvány 3
				{
					if(Alvany[kocsiidx] < 3)
					{
						KocsinDarab[kocsiidx] ++;
						TorlesPlayerObject(playerid);
						if(Alvany[kocsiidx] == 2)
						{
							KoicsraObject[12][kocsiidx] = CreateDynamicObject(2597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[12][kocsiidx], kocsiidx, 0.339999, -1.704998, 0.160000, -2.009998, -11.055000, 19.094997); //O,M:: 2597 Álvány 3
						}
						if(Alvany[kocsiidx] == 1)
						{
							KoicsraObject[11][kocsiidx] = CreateDynamicObject(2597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[11][kocsiidx], kocsiidx, 0.264999, -1.319998, 0.160000, -2.009998, -11.055000, 19.094997); //O,M:: 2597 | Vasalvany_2()()
						}
						if(Alvany[kocsiidx] == 0)
						{
							KoicsraObject[10][kocsiidx] = CreateDynamicObject(2597, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
							AttachDynamicObjectToVehicle(KoicsraObject[10][kocsiidx], kocsiidx, -0.039999, -1.554998, 0.160000, -2.009998, -11.055000, 19.094997); //O,M:: 2597 | Vasalvany_1()()
						}
						KocsinObject4[kocsiidx] ++;
						Alvany[kocsiidx] ++;
						return 1;
					}
					else 
					{
						SCM(playerid,COL_MKEK, "Maximum 3 darab álvány fér fel.");
						return 1;
					}
				}
			}
			else 
			{
				SCM(playerid,COL_MKEK, "Ez, nem lomtalanítós kocsi.");
			}
		}
		else
		{
			SCM(playerid,COL_MKEK, "Túl messze van a lomis kocsi.");
		}
	}
	return 1;
}


CMD:cctv(playerid,params[])
{
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/cctv [Be/Ki]");
		if(Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Létrehoz + név || ÓVATOSAN!!");
			SCM(playerid,COL_LRED,"Flymodeban használd, ne baszd el!");
			return 1;
		}
		return 1;
	}
	new mi[32],Nev[32];
	sscanf(params,"s[32]s[32]",mi,Nev);
	if(egyezik(mi,"Létrehoz"))
	{
		if(!Admin(playerid,FOADMIN_SZINT)) return 1;
		new Float:X,Float:Y,Float:Z,Float:A,Interior,VW;
		if(isnull(Nev))
		{
			SCM(playerid,COL_MKEK,"Neve?");
			return 1;
		}
		GetPlayerPos(playerid,X,Y,Z);
		GetPlayerFacingAngle(playerid,A);
		Interior = GetPlayerInterior(playerid);
		VW = GetPlayerVirtualWorld(playerid);
		AddCCTV(Nev,X,Y,Z,A,Interior,VW);
		SFM(playerid,COL_MKEK,"Hozzá adtad a %s nevû kamera pontot a Rendõrség CCTV listájához",Nev);
		doQuery("INSERT INTO `"#MYSQL_KAMERA_TABLA"` (Nev, X, Y, Z, A, Interior, VW, Lerako) VALUES ('%s', '%f','%f','%f','%f','%d','%d','%s')",Nev,X,Y,Z,A,Interior,VW,JatekosNev(playerid));
		return 1;
	}
	if(egyezik(mi,"be"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		{
			SCM(playerid,COL_LRED,"Nem vagy Rendõr!");
			return 1;
		}
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 240.3513,81.1932,1005.0391))
		{
			SCM(playerid,COL_LRED,"A rendõrség kameraszobájában kell lenned.");
			SetPlayerCheckpoint(playerid,240.3513,81.1932,1005.0391,5.0);
			return 1;
		}
		if(TotalCCTVS == 0) return SCM(playerid,COL_LRED,"Nincs létrehozva kamerapozíció.");
		new uzenets[512];
		for(new i=0;i<TotalCCTVS;i++)
		{
			if(i == 0)
			{
				format(uzenets,512,"%s",CameraName[i]);
			}
			else
			{
				format(uzenets,512,"%s\n%s",uzenets,CameraName[i]);
			}
		}
		ShowPlayerDialog(playerid,DIALOG_CAMERA,DIALOG_STYLE_LIST,"Camerák",uzenets,"OK","Mégse");
		return 1;
	}
	if(egyezik(mi,"ki"))
	{
		if(CurrentCCTV[playerid] > -1)
		{
			SetPos(playerid, 240.3513,81.1932,1005.0391);
			SetPlayerInterior(playerid,6);
			UnFreeze(playerid);
			SetCameraBehindPlayer(playerid);
			TogglePlayerControllable(playerid, 1);
			KillTimer(KeyTimer[playerid]);
			SetCameraBehindPlayer(playerid);
			CurrentCCTV[playerid] = -1;

			SCM(playerid,COL_MKEK,"CCTV Kamera Kikapcsolva!");
			return 1;
		}
		else
		{
			SCM(playerid,COL_LRED,"Nem is nézel kamerát...");
		}
	}
	return 1;
}

CMD:garazs(playerid,params[])
{
	new eparam[144];
	if(sscanf(params,"s[144]{}",eparam))
	{
		SCM(playerid,COL_MKEK,"Használat: /garázs [Bevisz/Kihoz]");
	}
	else if(!strcmp(eparam,"bevisz",true))
	{
		new haz = KozeliHazEx(playerid);
		new vid = GetPlayerVehicleID(playerid);
		if(haz == -1) return SCM(playerid,COL_LRED,"Nincs garázs a közeledben!");
		else if(PlayerInfo[playerid][pHazKulcs] == 0) return SCM(playerid,COL_LRED,"Ez a garázs nem a tied!");
		else if(HazInfo[haz][hGarazs] == 0) return SCM(playerid,COL_LRED,"A házadnak nincs garázsa!");
		else if(!IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COL_LRED,"Nem ülsz jármûben!");
		else {
			new veh = JarmuID(vid,playerid);
			if(vInfo[veh][vTulajID] != PlayerInfo[playerid][pID]) return SCM(playerid,COL_LRED,"Ez nem a saját jármûved!");
			else {
				SetVehicleToRespawn(vid);
				SetVehicleVirtualWorld(vid,vid);
				vInfo[veh][vGarazsban] = 1;
				vUpdate(veh, vuGarazsban);
				SCM(playerid,COL_MKEK,"A jármûved bekerült a garázsba.");
			}
		}
	}
	else if(!strcmp(eparam,"kihoz",true))
	{
		new vid;
		new haz = KozeliHazEx(playerid);
		if(sscanf(params,"{s[144]}d",vid)) return SCM(playerid,COL_MKEK,"Használat: /garázs kihoz [JármûID]");
		else if(haz == -1) return SCM(playerid,COL_LRED,"Nincs garázs a közeledben!");
		else if(PlayerInfo[playerid][pHazKulcs] == 0) return SCM(playerid,COL_LRED,"Ez a garázs nem a tied!");
		else if(HazInfo[haz][hGarazs] == 0) return SCM(playerid,COL_LRED,"A házadnak nincs garázsa!");
		else if(vid == INVALID_VEHICLE_ID) return SCM(playerid,COL_LRED,"Nincs ilyen jármû!");
		else {
			new veh = JarmuID(vid,playerid);
			if(vInfo[veh][vTulajID] != PlayerInfo[playerid][pID]) return SCM(playerid,COL_LRED,"Ez nem a saját jármûved!");
			else if(vInfo[veh][vGarazsban] == 0) return SCM(playerid,COL_LRED,"Ez a jármû nincs garázsban!");
			else {
				SetVehicleToRespawn(vid);
				SetVehicleVirtualWorld(vid, 0);
				vInfo[veh][vGarazsban] = 0;
				vUpdate(veh, vuGarazsban);
				SCM(playerid, COL_MKEK, "Kihoztad a jármûvet a garázsból, a parkolási helyére került.");
			}
		}
	}
	return 1;
}

/*
CMD:sban(playerid,params[]) //Kiszedve, mert nem csak azt bannolja akit kéne.
{
	if(!Admin(playerid,5)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"Egyenlõre ne használd!");
		//SCM(playerid,COL_MKEK,"Használat: /sban [JátékosNév/ID] [Oka]");
		return 1;
	}
	new ki,ok[32];
	sscanf(params,"us[32]",ki,ok);
	if(ki == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	if(IsPlayerNPC(ki)) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	if(IsScripter(ki)) //NEM BANNOLSZ SCRIPTER MERT NEIN !!!!
	{
		SFM(ki,COL_LRED,"[SBAN]: %s megpróbált lebannolni!!!",JatekosNev(playerid));
		SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
		return 1;
	}
	new gpcID[200];
	gpci(ki,gpcID,sizeof(gpcID));
	new year, month, day;
	getdate(year, month, day);
	doQuery("INSERT INTO `"#MYSQL_SERIAL_BAN"` (Cim, Bannolta, Oka, MIkor) VALUES ('%s', '%s','%s','%d/%02d/%02d')",gpcID, JatekosNev(playerid),ok,year, month, day);
	AdminUzenet(COLOR_LIGHTRED,1,"%s kibannolta %s -t Serialra. OK: %s",JatekosNev(playerid),JatekosNev(ki),ok);
   	new uzen[256];
	format(uzen, 256, "Oka: %s\nBanolt: %s\nIdõpont: %d/%d/%d", ok, JatekosNev(playerid), year, month, day);
	ShowPlayerDialog(ki, DIALOG_INFO, DIALOG_STYLE_MSGBOX, #COL_PIROS"Figyelem! "#COL_FEHER"Ki lettél tiltva!", uzen, "OK", "");
	Kick(ki);
}*/

CMD:alruha(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_FBI && PlayerInfo[playerid][prang] >= 2)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1460.7856,-1764.6144,3285.2859))
		{
			if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
			{
				PlayerInfo[playerid][pCP] = CP_GPS;
				SetPlayerCheckpoint(playerid, 1460.7856,-1764.6144,3285.2859, 5.0);
			}
			SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
			return true;
		}	
		new skinek[1024];
		for(new i=0;i<299;i++)
		{
			if(i == 127) continue;
			skinek[i] = i;
		}
		ShowModelSelectionMenuEx(playerid, skinek, sizeof( skinek ), "Válassz egy ruhát", FBI_SKIN_VALASZTAS, .dialogBGcolor = 512819010, .previewBGcolor = 80);
	}
	return 1;
}

CMD:undercover(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA && PlayerInfo[playerid][prang] >= 2)
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 628.9559,-551.8656,-22.4561))
		{
			if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
			{
				PlayerInfo[playerid][pCP] = CP_GPS;
				SetPlayerCheckpoint(playerid, 628.9559,-551.8656,-22.4561, 5.0);
			}
			SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
			return true;
		}
		new skinek[1024];
		for(new i=0;i<299;i++)
		{
			if(i == 127) continue;
			skinek[i] = i;
		}
		ShowModelSelectionMenuEx(playerid, skinek, sizeof( skinek ), "Válassz egy ruhát", FBI_SKIN_VALASZTAS, .dialogBGcolor = 512819010, .previewBGcolor = 80);
	}
	return 1;
}

CMD:alnev(playerid,params[])
{
	if((PlayerInfo[playerid][pFrakcio] == FRAKCIO_FBI && PlayerInfo[playerid][prang] >= 2) || Admin(playerid,FOADMIN_SZINT))
	{
		if(PlayerInfo[playerid][pAlnevbe] == true)
		{
			PlayerInfo[playerid][pAlnevbe] = false;
			SCM(playerid,COL_MKEK,"A neved újra a régi!");
			SetPlayerName(playerid,PlayerInfo[playerid][pNev]);
			return 1;
		}
		if(isnull(params))
		{
			SCM(playerid,COL_LRED,"/alnev [Nev]");
			return 1;
		}
		new nev[32];
		sscanf(params,"s[32]",nev);
		if(strlen(nev) > 32) return SCM(playerid,COL_LRED,"Maximum 32 karakter!");
		PlayerInfo[playerid][pAlnevbe] = true;
		strmid(PlayerInfo[playerid][pAlnev],nev,0,strlen(nev),32);
		SFM(playerid,COL_MKEK,"Az új álneved : %s",nev);		
		SetPlayerName(playerid,PlayerInfo[playerid][pAlnev]);
	}
	return true;
}

CMD:setsign(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA || PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSPD || IsScripter(playerid))
	{
		if(PlayerInfo[playerid][prang] < 2)
			return SCM(playerid, COL_LRED, "Minimum rang 2");
		if(isnull(params))
		{
			SCM(playerid,COL_LRED,"HASZNÁLAT: /setsign [név]");
			return 1;
		}
		if(!IsPlayerInAnyVehicle(playerid))
			return 1;
		new kocsi = GetPlayerVehicleID(playerid);
		if ((GetVehicleModel(kocsi) == 596) || (GetVehicleModel(kocsi) == 597) || (GetVehicleModel(kocsi) == 598))
		{
			if(IsValidDynamic3DTextLabel(sign[kocsi]))
			{
				DestroyDynamic3DTextLabel(sign[kocsi]);
			}
			sign[kocsi] = CreateDynamic3DTextLabel( params, -1, -0.599999,-3.099999,-0.100000, 50.0, _, kocsi );
		}
	}
	return 1;
}

CMD:setsignoff(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA || PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSPD || IsScripter(playerid))
	{
		if(PlayerInfo[playerid][prang] < 2)
			return SCM(playerid, COL_LRED, "Minimum rang 2");
		if(!IsPlayerInAnyVehicle(playerid))
			return false;
		new kocsi = GetPlayerVehicleID(playerid);
		if ((GetVehicleModel(kocsi) == 596) || (GetVehicleModel(kocsi) == 597) || (GetVehicleModel(kocsi) == 598))
		{
			DestroyDynamic3DTextLabel( sign[kocsi] );
		}
	}
	return 1;
}

CMD:harcstilus(playerid,params[])
{
	if(sscanf(params,"s[32]{}",params)) return SCM(playerid,COL_MKEK,"Használat: /harcstílus [ tanul / vált ]");
	else if(!strcmp(params,"tanul",true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 757.5772,5.6495,1000.7015))
			return SCM(playerid, COL_LRED, "Nem vagy az edzõterembe!");

		if( PlayerInfo[playerid][pHarcstilusTanul] )
		    return SCM(playerid, COL_LRED, "Már tanulsz egy stílust.");

		ShowPlayerDialog(playerid, DIALOG_HTANUL, 2, "Harcstílusok", "Box\nGrabkick\nElbow\nKungfu\nKneehead", "Tanul", "Mégse"); 
	}
	else if(!strcmp(params,"vált",true) || !strcmp(params,"valt",true))
	{
		ShowPlayerDialog(playerid, DIALOG_HVALT, 2, "Harcstílusok", "Box\nGrabkick\nElbow\nKungfu\nKneehead\nNormál", "Vált", "Mégse"); 
	}
	return true;
}

CMD:shotgun(playerid,params[])
{
	new kocsi = GetClosestVehicle(playerid);
	if(GetDistanceToVehicle(playerid, kocsi) < 3)
	{
		if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA || PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSPD)
		{
			if(vInfo[kocsi][vMunka] == FRAKCIO_KATONA || vInfo[kocsi][vMunka] == FRAKCIO_LSPD)
			{
				if(Elso[playerid] == 0)
				{
					Elso[playerid] = 1;
					GiveWeapon(playerid, 25, 50, false, true);
					Cselekves(playerid,"kivett a járõrkocsiból egy Remington 870 Shotgunt");
					return 1;
				}
				if(Elso[playerid] == 1)
				{
					new fegyver = PlayerInfo[playerid][pToltenyek][3];
					if(GetPlayerWeapon(playerid) != 25 && fegyver != 0) return SCM(playerid,COL_LRED,"Nem a Shotgun van a kezedben!");
					ResetPlayerWeapons(playerid);
					PlayerInfo[playerid][pToltenyek][3] = 0;
					PlayerInfo[playerid][pFegyverek][3] = 0;
					RemovePlayerAttachedObject(playerid, SLOT_FEGYVER2);
					Elso[playerid] = 0;
					Cselekves(playerid,"berakott a járõrkocsiba egy Remington 870 Shotgunt");
				}
			}
			else
			{
				SCM(playerid,COL_LRED,"Nincs melleted olyan kocsi!");
			}
		}
		else
		{
			SCM(playerid,COL_LRED,"Nem vagy abban a Frakcióban!");
		}
	}
	else
	{
		SCM(playerid,COL_LRED,"Nincs kocsi a környékeden");
	}
	return 1;
}

CMD:oltozo(playerid,params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 5, 1276.2474,-32.5700,1492.9459) || IsPlayerInRangeOfPoint(playerid, 5.0, 255.3863,77.1573,1003.6406) || IsPlayerInRangeOfPoint(playerid, 5.0, 1862.3383,-1721.9015,1206.1860) || IsPlayerInRangeOfPoint(playerid, 5.0, 197.1813,168.3225,1003.0234))
	{
		if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA || PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSPD)
		{
			ShowPlayerDialog(playerid,DIALOG_OLTOZO,DIALOG_STYLE_LIST,"Ruhák","Security Guard\nOfficer Frank Tenpenny\nOfficer Eddie Pulaski\nOfficer Jimmy Hernandez\nLos Santos Police Officer\nSan Fierro Police Officer\nLas Venturas Police Officer\nCounty Sheriff\nLSPD Motorbike Cop\nS.W.A.T Special Forces [TRU]\nDesert Sheriff","Kiválaszt","Mégse");
		}
	}
	return 1;
}

CMD:kocka(playerid,params[])
{
	new rand = random(6);
	switch(rand)
	{
	    case 0: Cselekves(playerid,"egyest dobott a kockával.");
	    case 1: Cselekves(playerid,"kettest dobott a kockával.");
	    case 2: Cselekves(playerid,"hármast dobott a kockával.");
	    case 3: Cselekves(playerid,"négyest dobott a kockával.");
	    case 4: Cselekves(playerid,"ötöst dobott a kockával.");
	    case 5: Cselekves(playerid,"hatost dobott a kockával.");
	}
	return 1;
}
CMD:erme(playerid,params[])
{
	if(PlayerInfo[playerid][ppenz] == 0) return SCM(playerid,COL_LRED,"Nincs nálad pénz!");
	else {
	    new rand = random(2);
	    switch(rand)
	    {
	        case 1: Cselekves(playerid,"feldobott egy érmét, és írás lett!");
	        default: Cselekves(playerid,"feldobott egy érmét, és fej lett!");
	    }
	}
	return 1;
}
CMD:kereskedok(playerid,params[])
{
    SendClientMessage(playerid, 0xffc400AA, "========== [ Használtkereskedés Tagok ] ==========");
	foreach(Player, p)
	{
		if(Belepve(p) && PlayerInfo[p][pKereskedo] >= 1 )
		{
			SendFormatMessage(playerid, 0xffc400AA, "Név: "#COL_MKEK"%s{ffea00} | Rang: [%d]"#COL_MKEK"%s{ffea00}%s", JatekosNev(p), PlayerInfo[p][pKereskedo], KereskedoRangok(PlayerInfo[p][pKereskedo]), (PlayerInfo[p][pSzunetel] ? (" | AFK") : ("")));
		}
	}
	return 1;
}
CMD:k(playerid,params[])
{
	if(PlayerInfo[playerid][pKereskedo] >= 1)
	{
		new param[32];
		if(sscanf(params,"s[32]{}",param)) return SCM(playerid,COL_MKEK,"Használat: /k(ereskedõ) [ Vesz / Elad / Park / Felvesz / Kirúg / R / RB / Lista / Tagok / Rang]");
		else if(!strcmp(param,"vesz",true))
		{/*
		    new id;
		    new veh;
		    new ar;
		    if(sscanf(params,"{s[32]}udd",id,veh,ar)) return SCM(playerid,COL_MKEK,"Használat: /k vesz [Játékos/ID] [JármûID] [Ár]");
		    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
		    else if(!PlayerToPlayer(playerid,id,3)) return SCM(playerid,COL_LRED,"A játékos mellett kell állnod!");
		    else if(vInfo[veh][vTulajID] != PlayerInfo[playerid][pID]) return SCM(playerid,COL_LRED,"Ez a jármû nem az övé.");
		    else {
                format(vInfo[vid][vTulaj], MAX_PLAYER_NAME, "Használtkereskedés");
				vInfo[vid][vMunka] = 103;
				vInfo[vid][vTulajID] = NINCS;
				vUpdate(vid, vuTulaj, vuMunka);
				SFM(id,COL_MKEK,"Kereskedõ %s megvette a %d ID-jû jármûvedet.",JatekosNev(playerid),veh);
				SFM(playerid,COL_MKEK,"Megvetted %s %d ID-jû jármûvet a kereskedésnek.",JatekosNev(id),veh);
		    }
		*/
		    if(k_uzleteles == 1) return SCM(playerid,COL_LRED,"Most éppen valaki más üzletel jármûvel.");
			ShowPlayerDialog(playerid,DIALOG_KERESKEDES_VESZ,DIALOG_STYLE_INPUT,"Kereskedés - Vétel","Írd be a játékost, a jármû ID-t és az árat vesszõvel elválasztva!\nPl: Razo_M,644,85000","Mehet","Mégse");
		}
		else if(!strcmp(param,"park",true))
		{
			new car = NINCS;
			car = GetClosestVehicle(playerid);

			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
				
				    if(vInfo[vid][vMunka] != 103) return SCM(playerid,COL_LRED,"Ezt nem parkolhatod le.");
					new Float:vinfo[5];
					GetVehicleHealth(car, vinfo[0]);
					GetVehiclePos(car, vinfo[1], vinfo[2], vinfo[3]);
					GetVehicleZAngle(car, vinfo[4]);
					vInfo[vid][vElet] = vinfo[0];
					vInfo[vid][vPosx] = vinfo[1];
					vInfo[vid][vPosy] = vinfo[2];
					vInfo[vid][vPosz] = vinfo[3];
					vInfo[vid][vAngle] = vinfo[4];
					vUpdate(vid, vuPos);
					vInfo[vid][vMotorelinditva] = false;
					PlayerInfo[playerid][pmotortinditja] = false;
					GetVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
					DestroyVehicle(vInfo[vid][vID]);
					JarmuSpawn(vid, vInfo[vid][vModel], vInfo[vid][vPosx], vInfo[vid][vPosy], vInfo[vid][vPosz], vInfo[vid][vAngle], vInfo[vid][vSzin1], vInfo[vid][vSzin2]);
					SetVehicleHealth(vInfo[vid][vID], vinfo[0]);
					UpdateVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
					SCM(playerid, COL_MKEK, "Sikeresen leparkoltad a jármûvet!");
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			return true;
		}
		else if(!strcmp(param,"lista",true))
		{
		    foreach(Jarmuvek, veh)
		    {
		        if(vInfo[veh][vMunka] == 103)
		        {
					SFM(playerid,COL_VZOLD,"%s [ID:%d]",VehicleNames[vInfo[veh][vModel] - 400],veh);
		        }
		    }
		}
		else if(!strcmp(param,"tagok",true))
		{
	        SendClientMessage(playerid, 0xffc400AA, "========== [ Használtkereskedés Tagok ] ==========");
			foreach(Player, p)
			{
				if(Belepve(p) && PlayerInfo[p][pKereskedo] >= 1 )
				{
					SendFormatMessage(playerid, 0xffc400AA, "Név: "#COL_MKEK"%s{ffea00} | Rang: [%d]"#COL_MKEK"%s{ffea00}%s", JatekosNev(p), PlayerInfo[p][pKereskedo], KereskedoRangok(PlayerInfo[p][pKereskedo]), (PlayerInfo[p][pSzunetel] ? (" | AFK") : ("")));
				}
			}
		}
		else if(!strcmp(param,"r",true) || !strcmp(param,"rádió",true) || !strcmp(param,"radio",true))
		{
		    new msg[144];
		    if(sscanf(params,"{s[32]}s[144]",msg)) return SCM(playerid,COL_MKEK,"Használat: /k r [Üzenet]");
		    else {
		        foreach(Player, id)
				{
				    if(PlayerInfo[id][pKereskedo] >= 1)
				    {
				        SendFormatMessage(id,0x3ea800AA,"** %s %s mondja: %s",KereskedoRangok(PlayerInfo[playerid][pKereskedo]),JatekosNev(playerid),msg);
				    }
				}
		    }
		}
		else if(!strcmp(param,"rb",true) || !strcmp(param,"oocrádió",true) || !strcmp(param,"oocradio",true))
		{
		    new msg[144];
		    if(sscanf(params,"{s[32]}s[144]",msg)) return SCM(playerid,COL_MKEK,"Használat: /k r [Üzenet]");
		    else {
		        foreach(Player, id)
				{
				    if(PlayerInfo[id][pKereskedo] >= 1)
				    {
				        SendFormatMessage(id,0x3ea800AA,"** (( %s %s mondja OOC: %s ))",KereskedoRangok(PlayerInfo[playerid][pKereskedo]),JatekosNev(playerid),msg);
				    }
				}
		    }
		}
		else if(!strcmp(param,"felvesz",true))
		{
		    if(PlayerInfo[playerid][pKereskedo] == 3)
		    {
			    new id;
			    if(sscanf(params,"{s[32]}u",id)) return SCM(playerid,COL_MKEK,"Használat: /k felvesz [Játékos/ID]");
			    else if(id == INVALID_PLAYER_ID) return NincsJatekos(playerid);
				else {
				    PlayerInfo[id][pKereskedo] = 1;
				    SFM(id,COL_VZOLD,"%s felvett téged a Használtkereskedéshez!",JatekosNev(playerid));
				    SFM(playerid,COL_VZOLD,"Felvetted %s-t kereskedõnek.",JatekosNev(id));
				}
			}
			else return SCM(playerid,COL_MKEK,"Nem vagy leader!");
		}
		else if(!strcmp(param,"kirúg",true) || !strcmp(param,"kirug",true))
		{
		    if(PlayerInfo[playerid][pKereskedo] == 3)
		    {
			    new id;
			    if(sscanf(params,"{s[32]}u",id)) return SCM(playerid,COL_MKEK,"Használat: /k kirúg [Játékos/ID]");
			    else if(id == INVALID_PLAYER_ID) return NincsJatekos(playerid);
				else {
				    PlayerInfo[id][pKereskedo] = 0;
				    SFM(id,COL_VZOLD,"%s kirúgott a kereskedõktõl!",JatekosNev(playerid));
				    SFM(playerid,COL_VZOLD,"Kirúgtad %s-t a kereskedõktõl.",JatekosNev(id));
				}
			}
			else return SCM(playerid,COL_MKEK,"Nem vagy leader!");
		}
		else if(!strcmp(param,"rang",true))
		{
		    if(PlayerInfo[playerid][pKereskedo] == 3)
		    {
			    new id;
			    new rang;
			    if(sscanf(params,"{s[32]}ud",id,rang)) return SCM(playerid,COL_MKEK,"Használat: /k rang [Játékos/ID] [Rang]");
			    else if(id == INVALID_PLAYER_ID) return NincsJatekos(playerid);
			    else if(rang < 1 || rang > 3) return SCM(playerid,COL_LRED,"Hibás rang! (1-3)");
			    else {
			        PlayerInfo[id][pKereskedo] = rang;
			        SFM(id,COL_VZOLD,"%s új autókereskedõi rangot adott: %s[%d]",JatekosNev(playerid),KereskedoRangok(rang),rang);
			        SFM(playerid,COL_MKEK,"Új rangot adtál neki: %s. Rang: %s[%d]",JatekosNev(id),KereskedoRangok(rang),rang);
			    }
			}
			else return SCM(playerid,COL_MKEK,"Nem vagy leader!");
		}
		else if(!strcmp(param,"elad",true))
		{
            if(k_uzleteles == 1) return SCM(playerid,COL_LRED,"Most éppen valaki más üzletel jármûvel.");
			ShowPlayerDialog(playerid,DIALOG_KERESKEDES_ELAD,DIALOG_STYLE_INPUT,"Kereskedés - Eladás","Írd be a játékost, a jármû ID-t és az árat vesszõvel elválasztva!\nPl: Razo_M,644,85000","Mehet","Mégse");
		}
	}
	else return SCM(playerid,COL_LRED,"Nem vagy kereskedõ!");
	return 1;
}

CMD:hazassag(playerid,params[])
{
	if(IsPlayerInRangeOfPoint(playerid, 2, -1988.698, 1117.767, 54.472))
	{
		if(isnull(params))
		{
			SCM(playerid,COL_MKEK,"/házasság [JátékosNeve/ID]");
			return 1;
		}
		new kivel;
		sscanf(params,"u",kivel);
		if(IsPlayerNPC(kivel)) return 1;
		if(INVALID_PLAYER_ID == kivel) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
		if(playerid == kivel) return SCM(playerid,COL_LRED,"Te kis huncut!");
		if(GetPlayerDistanceFromPlayer(playerid,kivel) > 1) return SCM(playerid,COL_LRED, "Nincs a közeledben a játékos!");
		if(egyezik("Senki",PlayerInfo[playerid][pHazasodvaVele])) return SCM(playerid,COL_LRED,"Már van (férjed/feleséged)");
		Hazassag[playerid] = kivel;
		Hazassag[kivel] = playerid;
		SFM(playerid,COL_MKEK,"Felajánlottad %s (nak/nek) hogy elvedd (férjül/feleségül)",JatekosNev(kivel));
		SFM(kivel,COL_MKEK,"Felajánlotta %s hogy elvesz (férjül/feleségel)",JatekosNev(playerid));
	}
	else
	{
		SCM(playerid,COL_LRED,"Nem vagy jó helyen!");
		SetPlayerCheckpoint(playerid,-1988.698, 1117.767, 54.472,5);
	}
	return true;
}
CMD:cuccreset(playerid,params[])
{
	if(!Admin(playerid, 1)) return 1;
	if(isnull(params)) return SCM(playerid,COL_LRED, "/cuccreset [Játékos Neve / ID] [sapka / szemüveg / óra / Maszk]");
	new ki,mit[32];
	sscanf(params,"us[32]",ki,mit);
	if(ki == INVALID_PLAYER_ID) return SCM(playerid,COL_MKEK, "Nincs ilyen játékos!");

	if(egyezik(mit,"sapka"))
	{
		DivatInfo[SLOT_SAPKA][ki][dVan] = 0;
		DivatInfo[SLOT_SAPKA][ki][dPosX] = 0;
		DivatInfo[SLOT_SAPKA][ki][dPosY] = 0;
		DivatInfo[SLOT_SAPKA][ki][dPosZ] = 0;
		DivatInfo[SLOT_SAPKA][ki][dRotX] = 0;
		DivatInfo[SLOT_SAPKA][ki][dRotY] = 0;
		DivatInfo[SLOT_SAPKA][ki][dRotZ] = 0;
		DivatInfo[SLOT_SAPKA][ki][dScaleX] = 0;
		DivatInfo[SLOT_SAPKA][ki][dScaleY] = 0;
		DivatInfo[SLOT_SAPKA][ki][dScaleZ] = 0;
		DivatInfo[SLOT_SAPKA][ki][dmodelid] = 0;
		RemovePlayerAttachedObject(ki,SLOT_SAPKA);
		SCM(playerid, COL_LRED,"Kesz!");
		return 1;
	}

	if(egyezik(mit,"szemüveg"))
	{
		DivatInfo[SLOT_SZEMUVEG][ki][dVan] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dPosX] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dPosY] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dPosZ] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dRotX] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dRotY] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dRotZ] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dScaleX] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dScaleY] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dScaleZ] = 0;
		DivatInfo[SLOT_SZEMUVEG][ki][dmodelid] = 0;
		RemovePlayerAttachedObject(ki,SLOT_SZEMUVEG);
		SCM(playerid,COL_LRED, "Kesz!");
		return 1;
	}
	if(egyezik(mit,"óra"))
	{
		DivatInfo[SLOT_KARORA][ki][dVan] = 0;
		DivatInfo[SLOT_KARORA][ki][dPosX] = 0;
		DivatInfo[SLOT_KARORA][ki][dPosY] = 0;
		DivatInfo[SLOT_KARORA][ki][dPosZ] = 0;
		DivatInfo[SLOT_KARORA][ki][dRotX] = 0;
		DivatInfo[SLOT_KARORA][ki][dRotY] = 0;
		DivatInfo[SLOT_KARORA][ki][dRotZ] = 0;
		DivatInfo[SLOT_KARORA][ki][dScaleX] = 0;
		DivatInfo[SLOT_KARORA][ki][dScaleY] = 0;
		DivatInfo[SLOT_KARORA][ki][dScaleZ] = 0;
		DivatInfo[SLOT_KARORA][ki][dmodelid] = 0;
		RemovePlayerAttachedObject(ki,SLOT_KARORA);
		SCM(playerid,COL_LRED, "Kesz!");
	}
	if(egyezik(mit,"Maszk"))
	{
		DivatInfo[SLOT_MASZK][ki][dVan] = 0;
		DivatInfo[SLOT_MASZK][ki][dPosX] = 0;
		DivatInfo[SLOT_MASZK][ki][dPosY] = 0;
		DivatInfo[SLOT_MASZK][ki][dPosZ] = 0;
		DivatInfo[SLOT_MASZK][ki][dRotX] = 0;
		DivatInfo[SLOT_MASZK][ki][dRotY] = 0;
		DivatInfo[SLOT_MASZK][ki][dRotZ] = 0;
		DivatInfo[SLOT_MASZK][ki][dScaleX] = 0;
		DivatInfo[SLOT_MASZK][ki][dScaleY] = 0;
		DivatInfo[SLOT_MASZK][ki][dScaleZ] = 0;
		DivatInfo[SLOT_MASZK][ki][dmodelid] = 0;
		RemovePlayerAttachedObject(ki,SLOT_MASZK);
		SCM(playerid,COL_LRED, "Kesz!");
	}
	return 1;
}
CMD:cuccaim(playerid,params[])
{
	ShowPlayerDialog(playerid, DIALOG_DIVATBOLT_EDIT, DIALOG_STYLE_LIST, "Cuccaid", "Sapka/Kalap\nSzemüveg\nKaróra\nMaszk", "Módosítás", "Mégse");
	return 1;
}

CMD:areport(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT)) return SCM(playerid,COL_LRED,NEM_HASZNALHATO);
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"Használat: /areport Belép [ChannelID / All / Off]");
		SCM(playerid,COL_MKEK,"Használat: /areport Tagok [ChannelID]");
 		if(Admin(playerid, FOADMIN_SZINT))
 		{
	 		SCM(playerid,COL_MKEK,"Használat: /areport Set [playerid] [ChannelID / All / Off ]");
 		}
		return 1;
	}
	
	new mit[32], param[2][50];
	
	sscanf(params,"s[32]s[50]S[50](fasz)",mit,param[0],param[1]);
    new ch = strval(param[0]);

	if((!strcmp(mit,"belép") || !strcmp(mit,"belep")) && !strcmp(param[1],"fasz"))
	{
	    if( IsNumeric(param[0]) && strval(param[0]) > 0 && strval(param[0]) < 4 )    //egy csenelbe megy be
	    {
			PlayerInfo[playerid][pReport][1] = ch;
			SFM(playerid,COL_MKEK,"Sikeresen csatlakoztál a %d csatornához!",ch);
			AdminUzenet(COLOR_LIGHTRED,1,"%s átlépett a %d channelre",JatekosNev(playerid),ch);
	    }
	    else if( !strcmp(param[0], "all" ) )
	    {
		    if((PlayerInfo[playerid][pallreport] = true - PlayerInfo[playerid][pallreport]))
	        {
	 	       	AdminUzenet(COLOR_LIGHTRED,1,"%s már az összes channelt látja.",JatekosNev(playerid));
				SCM(playerid, COL_MKEK, "Mostantól látod az összes report channelt!");
			}
			else
		    {
			    AdminUzenet(COLOR_LIGHTRED,1,"%s már nem látja az összes channelt.",JatekosNev(playerid));
				SFM(playerid, COL_MKEK, "Mostantól csak a saját report channeled látod! (CH:%d)",PlayerInfo[playerid][pReport][1]);
			}
	    }
	    else if( !strcmp(param[0], "off" ) )
	    {
	        PlayerInfo[playerid][pallreport] = false;
	        PlayerInfo[playerid][pReport][1] = NINCS;
		    AdminUzenet(COLOR_LIGHTRED,1,"%s lecsatlakozott a report channelekrõl.",JatekosNev(playerid));
			SCM(playerid, COL_MKEK, "Mostantól nem látod a report channeleket.");
	    }
	    else
	    {
	        cmd_areport(playerid, "");  //mutassa meg neki az infókat
	    }
	    return true;
	}
	else if(!strcmp(mit,"tagok") && IsNumeric(param[0]) && strval(param[0]) > 0 && strval(param[0]) < 4 && !strcmp(param[1],"fasz") )
	{
		SFM(playerid,COL_MKEK,"%d channelen lévõ adminok:",ch);
		foreach(Player,i)
		{
			if(PlayerInfo[i][pReport][1] == ch)
			{
				SFM(playerid,COL_MKEK,"Admin: %s | Admin Szint: %d | Válasz: %d",JatekosNev(i, true), PlayerInfo[i][padmin], PlayerInfo[i][pValaszok]);
			}
		}
		return true;
	}
	else if( !strcmp(mit,"set") && (strcmp(param[1],"fasz") != 0) )
	{
	    if( IsNumeric(param[1]) && strval(param[1]) > 0 && strval(param[1]) < 3 )
	    {
	        new player = strval(param[0]);
	        if( !IsPlayerConnected(player) )
	            return SCM(playerid, COL_MKEK, "A játékos ezzel az ID-vel nincs felcsatlakozva.");

		    if( IsNumeric(param[1]) && strval(param[1]) > 0 && strval(param[1]) < 4 )    //egy csenelbe megy be
		    {
		        ch = strval(param[1]);
				PlayerInfo[player][pReport][1] = ch;
				
				SFM(playerid,COL_MKEK,"Sikeresen átcsatlakoztattad %s-t a %d csatornához!", JatekosNev(player), ch);
				SFM(player,COL_MKEK,"Átcsatlakoztattak a %d csatornához!", ch);
				AdminUzenet(COLOR_LIGHTRED,1,"%s átcsatlakoztatta %s-t a %d channelre", JatekosNev(playerid), JatekosNev(player),ch);
		    }
		    else if( !strcmp(param[0], "all" ))
		    {
			    if((PlayerInfo[player][pallreport] = true - PlayerInfo[player][pallreport]))
		        {
		 	       	AdminUzenet(COLOR_LIGHTRED,1,"%s megmutatta %s-nek az összes csatornát.", JatekosNev(playerid), JatekosNev(player) );
					SFM(playerid,COL_MKEK,"Sikeresen átcsatlakoztattad %s-t az összes csatornába!", JatekosNev(player));
					SCM(player,COL_MKEK,"Átcsatlakoztattak az összes csatornába.");
				}
				else
			    {
		 	       	AdminUzenet(COLOR_LIGHTRED,1,"%s kiléptette %s-t az összes csatornából.", JatekosNev(playerid), JatekosNev(player) );
					SFM(playerid,COL_MKEK,"Sikeresen kiléptetted %s-t az összes csatornáól!", JatekosNev(player));
					SCM(player,COL_MKEK,"Kiléptettek az összes csatornából.");
				}
		    }
		    else if( !strcmp(param[0], "off" ) )
		    {
		        PlayerInfo[player][pallreport] = false;
		        PlayerInfo[player][pReport][1] = NINCS;
			    AdminUzenet(COLOR_LIGHTRED,1,"%s kikapcsolta %s report channeljeit.",JatekosNev(playerid), JatekosNev(player));
				SCM(player, COL_MKEK, "Lekapcsoltak a report channelekrõl.");
				SFM(playerid, COL_MKEK, "Lekapcsoltad %s-t a report channelekrõl.", JatekosNev(player));
		    }
		    else
		    {
		        cmd_areport(playerid, "");  //mutassa meg neki az infókat
		    }
		    return true;
	    }
	    else
	    {
	        cmd_areport(playerid,"");   //helpet mutassunk neki
	    }
	}
	return true;
}
CMD:noname(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT)) return SCM(playerid,COL_LRED,NEM_HASZNALHATO);
	if(PlayerInfo[playerid][pNoname] == 1)
	{
		PlayerInfo[playerid][pNoname] = 0;
		SCM(playerid,COL_MKEK,"Mostmár látják a nevedet");
		foreach(Player, x)
		{
			ShowPlayerNameTagForPlayer(x, playerid, 1);
		}	
		return 1;
	}
	else
	{
		PlayerInfo[playerid][pNoname] = 1;
		SCM(playerid,COL_MKEK,"Név mutatás kikapcsolva!");
		foreach(Player, x)
		{
			ShowPlayerNameTagForPlayer(x, playerid, 0);
		}	
	}
	return true;
}

CMD:fenykard(playerid,params[])
{
	if(!Admin(playerid, SZUPER_SZINT)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"/fenykard [kitol/behuz]");
		return 1;
	}
	new mi[32];
	sscanf(params,"s[32]",mi);
	if(egyezik(mi,"kitol"))
	{
		SetPlayerAttachedObject(playerid, 2, 18648, 6, 0.056999, -0.194000, 0.924000, 103.199966, 0.800001, 0);
		SCM(playerid, COL_MKEK,"Bekapcsóltad a Jedi kardod.");
		return true;
	}
	if(egyezik(mi,"behuz"))
	{
		RemovePlayerAttachedObject(playerid, 2);
		SCM(playerid, COL_MKEK,"Kikapcsóltad a Jedi kardod.");		
	}
	return true;
}

CMD:kezetfog(playerid,params[])
{
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"Használat: /kezetfog [Típus] [Játékos Neve / ID]");
		return 1;
	}
	new t,p;
	sscanf(params,"du",t,p);
	if(t < 1 || t > 3)
	{
		SCM(playerid,COL_LRED,"1-3 között!!");
		return 1;
	}
	if(p == INVALID_PLAYER_ID)
	{
		SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
		return 1;
	}
	if(GetPlayerDistanceFromPlayer(playerid,p) > 1) return SCM(playerid,COL_LRED, "Nincs a közeledben a játékos!");
	Kezetfogna[playerid] = p;
	Kezetfogna[p] = playerid;
	KezetfognaStilus[playerid] = t;
	KezetfognaStilus[p] = t;
	new kicsinalja[128];
	new kicsinalja1[128];
	
	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
	}
	
	if(PlayerInfo[p][pMaszkVisel] == true)
	{
		format(kicsinalja1, sizeof(kicsinalja1), "Maszk_ID%d", PlayerInfo[p][pMaszkID]);
	}
	if(PlayerInfo[p][pAlnevbe] == true)
	{
		format(kicsinalja1, sizeof(kicsinalja1), "%s", PlayerInfo[p][pAlnev]);
	}
	if(PlayerInfo[p][pAlnevbe] == false && PlayerInfo[p][pMaszkVisel] == false)
	{
		format(kicsinalja1, sizeof(kicsinalja1), "%s", JatekosNev(p));
	}
	SendFormatMessage(p, COLOR_LIGHTBLUE, "* %s kezet fogna veled. /elfogad kézfogás", kicsinalja);
	SendFormatMessage(playerid, COLOR_LIGHTBLUE, "* %s kezet fognál vele", kicsinalja1);
	return 1;
}
CMD:taxi(playerid,params[])
{
	TaxiHivas(playerid);
	return 1;
}

CMD:gpscsin(playerid,params[])
{
	if(!Admin(playerid, 5))
		return SCM(playerid, COL_LRED, "Nem használhatod ezt a parancsot!");

	new gpsnev[32];
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/gpscsin [GPS Pozíció neve]");
		return 1;
	}
	sscanf(params,"s[32]",gpsnev);
	new
		t = -1,
		gpsid = UjGPSID();

	for(;++t < MAXGPS;)
	{
		if(GPSInfo[t][gHasznalva])
		{
			if(egyezik(gpsnev, GPSInfo[t][gnev]))
			{
				return SCM(playerid, COL_LRED, "Már van ilyen név!");
			}
		}
	}

	if(gpsid > 0)
	{
		new Float:X,Float:Y,Float:Z;
		GetPlayerPos(playerid, X,Y,Z);
		
		GPSInfo[gpsid][gposx] = X;
		GPSInfo[gpsid][gposy] = Y;
		GPSInfo[gpsid][gposz] = Z;
		GPSInfo[gpsid][gHasznalva] = true;
		strmid(GPSInfo[gpsid][gnev], gpsnev,0,strlen(gpsnev),32);
		doQuery("INSERT INTO `"#MYSQL_GPS_TABLA"` (id, posx, posy, posz, gnev) VALUES ('%d', '%f', '%f', '%f','%s')",gpsid, X, Y, Z,gpsnev);
		AdminUzenet(COLOR_LIGHTRED,1, "%s hozzáadott egy új GPS-t a listához, Neve: %s", JatekosNev(playerid), GPSInfo[gpsid][gnev]);
		SendClientMessage(playerid, COLOR_GREEN, "GPS sikeresen létrehozva!");
		return true;
	}
	else
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Elértük a GPS limitet!");
}
CMD:gpstorol(playerid,params[])
{
	if(!Admin(playerid, 5))
		return SendClientMessage(playerid, COLOR_WHITE, "Nem használhatod ezt a parancsot");
		
	new t = NINCS;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/gpstorol [IDje / Neve]");
		return 1;
	}
	if(IsNumeric(params)) t = strval(params);
	else t = GPSNameToID(params);
	
	if(t == NINCS || !GPSInfo[t][gHasznalva])
		return SendClientMessage(playerid,COLOR_LIGHTRED,"Hiba történt! Nincs ilyen GPS Bejegyzés létrehozva!");

	GPSInfo[t][gposx] = 0.0;
	GPSInfo[t][gposy] = 0.0;
	GPSInfo[t][gposz] = 0.0;
	
	doQuery("DELETE FROM `"#MYSQL_GPS_TABLA"` WHERE gnev = '%s'",GPSInfo[t][gnev]);
	
	AdminUzenet(COLOR_LIGHTRED, 1, "%s törölt egy GPS bejegyzést a listából! Neve: %s", JatekosNev(playerid), GPSInfo[t][gnev]);
	SendClientMessage(playerid,COLOR_GREEN,"GPS bejegyzés sikeresen törölve!");
	GPSInfo[t][gnev] = EOS;
	GPSInfo[t][gHasznalva] = false;
	return true;
}

CMD:csipogo(playerid,params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_MAFFIA) return SCM(playerid,COL_LRED,"Ezt a parancsot csak maffia használhatja!");
	if(PlayerInfo[playerid][pCsipogo] == 0) return SCM(playerid,COL_LRED,"Nincs csipogód!");
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
	Cselekves(playerid, "megnyomta a csipogót.",1);
	CsipogoIdo[playerid] = 240;
	foreach(Player,x)
	{
		if(PlayerInfo[x][pFrakcio] == PlayerInfo[playerid][pFrakcio])
		{
			SetPlayerMarkerForPlayer(x, playerid, COLOR_ORANGE);
			SendFormatMessage(x, COLOR_LIGHTRED, "RIADÓ!! %s megnyomta a veszcsipogót!! Siessetek a segítségére!", JatekosNev(playerid));
		}
	}
	
	return true;
}

CMD:rabok(playerid,params[])
{
	new szam = 0;
	if(PlayerInfo[playerid][pFrakcio] == 1 || PlayerInfo[playerid][pFrakcio] == 6 || PlayerInfo[playerid][pFrakcio] == 15)
	{
		foreach(Player,i)
		{
			if(PlayerInfo[i][pjail] == 2)
			{
				SFM(playerid,COL_LRED,"Ki: %s | Miért: %s | Mennyi Idõ Múlva Szabadul: %d másodperc",JatekosNev(i),PlayerInfo[i][pJailOk],PlayerInfo[i][pJailIdo]);
			}
			szam++;
		}
		if(szam == 0)
		{
			SCM(playerid,COL_LRED,"Sajnos senki nincs a börtönben!");
		}
	}
	return true;
}

CMD:agl(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT)) return SCM(playerid,COL_LRED,NEM_HASZNALHATO);
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/agl [kinek] [Kresz / Autó / Fegyver / Motor / Kamion]");
		return 1;
	}
	new kinek,mit[32];
	sscanf(params,"us[32]",kinek,mit);
	if(kinek == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	if(IsPlayerNPC(kinek)) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	if(egyezik(mit,"Kresz"))
	{
		PlayerInfo[kinek][pEngedely][0] = VizsgaLista[0][4][0];
		SCM(kinek,COL_MKEK,"Kaptál egy Kresz Vizsgát!");
		SFM(playerid,COL_MKEK,"Adtál egy Kresz vizsgát neki: %s",JatekosNev(kinek));
		return true;
	}
	if(egyezik(mit,"Autó"))
	{
		PlayerInfo[kinek][pEngedely][1] = VizsgaLista[1][4][0];
		SCM(kinek,COL_MKEK,"Kaptál egy Autó Jogosítványt!");
		SFM(playerid,COL_MKEK,"Adtál egy Autó Jogosítványt neki: %s",JatekosNev(kinek));
		return true;
	}
	if(egyezik(mit,"Fegyver"))
	{
		PlayerInfo[kinek][pEngedely][4] = VizsgaLista[4][4][0];
		SCM(kinek,COL_MKEK,"Kaptál egy Fegyver Engedélyt!");
		SFM(playerid,COL_MKEK,"Adtál egy Fegyver Engedélyt neki: %s",JatekosNev(kinek));
		return true;
	}
	if(egyezik(mit,"Motor"))
	{
		PlayerInfo[kinek][pEngedely][2] = VizsgaLista[2][4][0];
		SCM(kinek,COL_MKEK,"Kaptál egy Motor Jogosítványt!");
		SFM(playerid,COL_MKEK,"Adtál egy Motor Jogosítványt neki: %s",JatekosNev(kinek));
		return true;
	}
	if(egyezik(mit,"Kamion"))
	{
		PlayerInfo[kinek][pEngedely][3] = VizsgaLista[3][4][0];
		SCM(kinek,COL_MKEK,"Kaptál egy Kamion Jogosítványt!");
		SFM(playerid,COL_MKEK,"Adtál egy Kamion Jogosítványt neki: %s",JatekosNev(kinek));
	}
	return true;
}

CMD:hp(playerid,params[])
{
	new Float:Elet;
	GetPlayerHealth(playerid,Elet);
	new Float:Armor;
	GetPlayerArmour(playerid,Armor);
	SFM(playerid,COL_MKEK,"Jelenleg: %.0f HP-d van",Elet);
	SFM(playerid,COL_MKEK,"Jelenleg: %.0f Armorod van!",Armor);
	return true;
}

CMD:szerelok(playerid,params[])
{
	new szam = 0,TelefonSzama[64];
	SCM(playerid,COL_MKEK,"Jelenleg online szerelõk:");
	foreach(Player,i)
	{
		if(PlayerInfo[i][pFrakcio] == FRAKCIO_SZERELO)
		{
			if(PlayerInfo[i][ptelefonszam] == 0)
			{
				format(TelefonSzama,64,"Nincs Telefonja!",0);
			}
			else
			{
				format(TelefonSzama,64,"%d",PlayerInfo[i][ptelefonszam]);
			}
			SFM(playerid,COL_MKEK,"Név: %s || TelefonSzám : %s",JatekosNev(i),TelefonSzama);
			szam++;
		}
	}
	if(szam == 0)
	{
	    SCM(playerid,COL_LRED,"Nincs online szerelõ.");
	}
	return true;
}

CMD:zero(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT))
	{
		SCM(playerid,COL_LRED,NEM_HASZNALHATO);
    	return true;
	}
	if(TilosOlni == 0)
	{
		TilosOlni = 1;
		foreach(Player,i)
		{
			PlayerTextDrawShow(i,Zero[playerid]);
			SCM(i,COL_MKEK, "============[ Zero Tolerancia ]============");
			SCM(i,COL_LRED, "* Zero tolerancia bekapcsolva!");
			SCM(i,COL_LRED, "* Amíg ez érvényben van, tilos ölni, aki megszegi automata 2 óra jail!");
		}
		AdminUzenet(COLOR_LIGHTRED, 1, "%s bekapcsolta a Zeró Toleranciát", JatekosNev(playerid));
	}
	else
	{
		TilosOlni = 0;
		foreach(Player,i)
		{
			PlayerTextDrawHide(i,Zero[playerid]);
			SCM(i,COL_MKEK, "============[ Zero Tolerancia ]============");
			SCM(i,COL_LRED, "* Zero tolerancia kikapcsolva!");
		}
		AdminUzenet(COLOR_LIGHTRED, 1, "%s kikapcsolta a Zeró Toleranciát", JatekosNev(playerid));
	}
	return true;
}

CMD:munkak(playerid,params[])
{
    SCM(playerid,COL_MKEK,"20: Kamionos");
	SCM(playerid,COL_MKEK,"21: Favágó");
	SCM(playerid,COL_MKEK,"22: Kukás");
	SCM(playerid,COL_MKEK,"23: Úttisztító");
	SCM(playerid,COL_MKEK,"24: Fegyvermester");
	SCM(playerid,COL_MKEK,"25: Farmer");
	SCM(playerid,COL_MKEK,"26: Drog díler");
	SCM(playerid,COL_MKEK,"27: Hacker");
	return 1;
}

CMD:carjacked(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
	
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"PED","CAR_jackedLHS",4.0,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"PED","CAR_jackedRHS",4.0,0,1,1,1,0);
		default: SCM(playerid, COL_MKEK, "Használat: /carjacked [1/2]");
	}
	return true;
}

CMD:handsup(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
	
	return LoopingAnim(playerid, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0);
}

CMD:wank(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
	
	return LoopingAnim(playerid, "PAULNMAC","wank_loop", 4.0, 0, 0, 0, 0, 0);
}
	
CMD:cellin(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
}
	
CMD:cellout(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
	
	return SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
}
	
CMD:drunk(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
}
	
CMD:fekves(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
	
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /fekvés [1/2/3]");
	}
	return true;
}

CMD:guggol(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"CAMERA","camstnd_to_camcrch",4.1,0,1,1,1,1);
}
	
CMD:ideges(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"CASINO","cards_in",4.1,0,1,1,1,1);
}

CMD:tanc(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"DANCING","dnce_M_d",4.1,0,1,1,1,1);
}
	
CMD:laza(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.1,0,1,1,1,1);
}
	
CMD:gyasz(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.1,0,1,1,1,1);
}
	
CMD:sir(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.1,0,1,1,1,1);
}
	
CMD:kiss(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
	
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid, "KISSING","Grlfrd_Kiss_02",4.0,0,0,0,0,0);
		case 2: LoopingAnim(playerid,"KISSING","Grlfrd_Kiss_03",4.1,0,1,1,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /kiss [1/2]");
	}
	return true;
}

CMD:gurul(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll",4.1,0,1,1,1,1);
}
	
CMD:mivan(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"RIOT","RIOT_ANGRY",4.1,0,1,1,1,1);
}

CMD:johettek(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"SWAT","swt_lkt",4.1,0,1,1,1,1);
}
	
CMD:allj(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"SWAT","swt_sty",4.1,0,1,1,1,1);
}
	
CMD:falhoz(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"SWAT","swt_wllpk_R_back",4.1,0,1,1,1,1);
}

CMD:sleep(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"CRACK","CRCKIDLE2",4.0,1,0,0,0,-1);
		case 2: LoopingAnim(playerid,"CRACK","CRCKIDLE3",4.0,1,0,0,0,-1);
		case 3: LoopingAnim(playerid,"CRACK","CRCKIDLE1",4.0,1,0,0,0,-1);
		default: SCM(playerid, COL_MKEK, "Használat: /sleep [1/2/3]");
	}
	return true;
}

CMD:ground(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"WUZI","WUZI_GRND_CHK",4.0,0,1,0,0,-1);
}
	
CMD:getup(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"PED", "GETUP_FRONT",4.0,0,1,0,0,-1);
}
	
CMD:holding(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"MISC", "BMX_IDLELOOP_02",4.0,0,1,0,1,-1);
}
	
CMD:gyere(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"RYDER", "RYD_BECKON_01",4.0,0,1,0,0,-1);
}
	
CMD:kezenallas(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"DAM_JUMP", "DAM_Dive_Loop",4.0,0,1,0,1,-1);
}
	
CMD:calltaxi(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"PED", "IDLE_taxi",4.0,0,0,0,0,-1);
}
	
CMD:bomb(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0); // Place Bomb
}
	
CMD:getarrested(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"ped", "ARRESTgun", 4.0, 0, 1, 1, 1, -1); // Gun Arrest
}

CMD:laugh(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0); // Laugh
}
	
CMD:lookout(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0); // Rob Lookout
}
	
CMD:robman(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0); // Rob
}
	
CMD:crossarms(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1); // Arms crossed
}
	
CMD:lay(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0); // Lay down
		case 2: LoopingAnim(playerid,"SUNBATHE","Lay_Bac_in",3.0,0,1,1,1,0);
		default: SCM(playerid, COL_MKEK, "Használat: /lay [1/2]");
	}
	return true;
}
	
CMD:hide(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0); // Taking Cover
}
	
CMD:vomit(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0); // Vomit BAH!
}
	
CMD:eszik(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0); // Eat Burger
}
	
CMD:wave(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0); // Wave
}
	
CMD:slapass(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0); // Ass Slapping
}
	
CMD:deal(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0); // Deal Drugs
}
	
CMD:crack(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0); // Dieing of Crack
}
	
CMD:smoke(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0); // férfi
		case 2: LoopingAnim(playerid,"SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0); // nõ
		case 3: LoopingAnim(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 0, 0, 0); // standing-fucked
		case 4: LoopingAnim(playerid,"SMOKING","M_smk_out", 4.0, 1, 0, 0, 0, 0); // standing
		default: SCM(playerid, COL_MKEK, "Használat: /smoke [1/2/3/4]");
	}
	return true;
}

CMD:gro(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0); // Sit
}
	
CMD:chat(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
}
	
CMD:fucku(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"PED","fucku",4.0,0,0,0,0,0);
}
	
CMD:taichi(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,0,0,0,0);
}
	
CMD:chairsit(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
	
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"1-2");
		return 1;
	}
	new id;
	sscanf(params,"d",id);
	if(id != 1 && id != 2)
	{
		SCM(playerid,COL_LRED,"1-2");
		return 1;
	}
	if(id == 1)
	{
		LoopingAnim(playerid,"PED","SEAT_down",4.1,0,1,1,1,0);
		return 1;
	}
	if(id == 2)
	{
		LoopingAnim(playerid,"PED","SEAT_down",4.1,0,1,1,1,1,1);
		return 1;
	}
	return 1;
}
	
CMD:fall(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
}
	
CMD:fallback(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0);
}
	
CMD:injured(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 0, 0, 0);
}
	
CMD:sup(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: OnePlayAnim(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
		default: SCM(playerid, COL_MKEK, "Használat: /sup [1/2/3]");
	}
	return true;
}

CMD:rap(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,0,0,0,0);
		case 2: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,0,0,0,0);
		case 3: LoopingAnim(playerid,"GANGS","prtial_gngtlkD",4.0,1,0,0,0,0);
		case 4: LoopingAnim(playerid,"GANGS","prtial_gngtlkH",4.0,1,0,0,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /rap [1/2/3/4]");
	}
	return true;
}
/*
CMD:gang(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: OnePlayAnim(playerid,"GHANDS","gsing1LH",4.0,0,0,0,0,0);
    	case 2: OnePlayAnim(playerid,"GHANDS","gsing2",4.0,0,0,0,0,0);
    	case 3: OnePlayAnim(playerid,"GHANDS","gsing2LH",4.0,0,0,0,0,0);
    	case 4: OnePlayAnim(playerid,"GHANDS","gsing4",4.0,0,0,0,0,0);
    	case 5: OnePlayAnim(playerid,"GHANDS","gsing5",4.0,0,0,0,0,0);
    	case 6: OnePlayAnim(playerid,"GHANDS","gsing5LH",4.0,0,0,0,0,0);
		default: SCM(playerid, COL_MKEK, "Használat: /gang [1/2/3/4/5/6]");
	}
	return true;
}
*/
CMD:gang(playerid, params[])
{
        if(NemMozoghat(playerid))
                return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

        switch( strval(params) )
        {
                case 1: OnePlayAnim(playerid,"GHANDS","gsign1LH",4.0,0,0,0,0,0);
        case 2: OnePlayAnim(playerid,"GHANDS","gsign2",4.0,0,0,0,0,0);
        case 3: OnePlayAnim(playerid,"GHANDS","gsign2LH",4.0,0,0,0,0,0);
        case 4: OnePlayAnim(playerid,"GHANDS","gsign4",4.0,0,0,0,0,0);
        case 5: OnePlayAnim(playerid,"GHANDS","gsign5",4.0,0,0,0,0,0);
        case 6: OnePlayAnim(playerid,"GHANDS","gsign5LH",4.0,0,0,0,0,0);
                default: SCM(playerid, COL_MKEK, "Használat: /gang [1/2/3/4/5/6]");
        }
        return true;
}

CMD:gwalk(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);

	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /gwalk [1/2]");
	}
	return true;
}

CMD:push(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"GANGS","shake_cara",4.0,0,0,0,0,0);
}
	
CMD:akick(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"POLICE","Door_Kick",4.0,0,0,0,0,0);
}
	
CMD:lowbodypush(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"GANGS","shake_carSH",4.0,0,0,0,0,0);
}
	
CMD:spray(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
}
	
CMD:headbutt(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"WAYFARER","WF_Fwd",4.0,0,0,0,0,0);
}
	
CMD:medic(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
}
	
CMD:koface(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,0);
}
	
CMD:kostomach(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"PED","KO_shot_stom",4.0,0,1,1,1,0);
}
	
CMD:lifejump(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,0);
}
	
CMD:leftslap(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
}
	
CMD:rollfall(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,0);
}
	
CMD:carlock(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"PED","CAR_doorlocked_LHS",4.0,0,0,0,0,0);
}
	
CMD:carjack(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: OnePlayAnim(playerid,"PED","CAR_pulloutL_LHS",4.0,0,0,0,0,0);
		case 2: OnePlayAnim(playerid,"PED","CAR_pulloutL_RHS",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"PED","CAR_pullout_LHS",4.0,0,0,0,0,0);
		case 4: OnePlayAnim(playerid,"PED","CAR_pullout_RHS",4.0,0,0,0,0,0);
		default: SCM(playerid, COL_MKEK, "Használat: /carjack [1/2/3/4]");
	}
	return true;
}

CMD:hoodfrisked(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0);
}
	
CMD:lightcig(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"SMOKING","M_smk_in",3.0,0,0,0,0,0);
}
	
CMD:tapcig(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"SMOKING","M_smk_tap",3.0,0,0,0,0,0);
}
	
CMD:bat(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"BASEBALL","Bat_IDLE",4.0,1,1,1,1,0);
}
	
CMD:chant(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,0);
}
	
CMD:finger(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"RIOT","RIOT_FUKU",2.0,0,0,0,0,0);
}
	
CMD:shouting(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,0,0,0,0);
}
	
CMD:cop(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
}
	
CMD:elbow(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0);
}
	
CMD:kneekick(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"FIGHT_D","FightD_2",4.0,0,1,1,0,0);
}
	
CMD:fstance(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"FIGHT_D","FightD_IDLE",4.0,1,1,1,1,0);
}
	
CMD:gpunch(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"FIGHT_B","FightB_G",4.0,0,0,0,0,0);
}
	
CMD:airkick(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0);
}
	
CMD:gkick(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0);
}
	
CMD:lowthrow(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
}
	
CMD:highthrow(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return OnePlayAnim(playerid,"GRENADE","WEAPON_throw",4.0,0,0,0,0,0);
}
	
CMD:dealstance(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	return LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.0,1,0,0,0,0);
}
	
CMD:knife(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.0,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"KNIFE","KILL_Knife_Ped_Die",4.0,0,1,1,1,0);
		case 3: OnePlayAnim(playerid,"KNIFE","KILL_Knife_Player",4.0,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"KNIFE","KILL_Partial",4.0,0,1,1,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /knife [1/2/3/4]");
	}
	return true;
}

CMD:basket(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.0,1,0,0,0,0);
		case 2: OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0);
		case 3: OnePlayAnim(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0);
		case 4: LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.0,1,0,0,0,0);
		case 6: LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.0,1,0,0,0,0);
		default: SCM(playerid, COL_MKEK, "Használat: /basket [1/2/3/4/5/6]");
	}
	return true;
}

CMD:aim(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"PED","gang_gunstand",4.0,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","Driveby_L",4.0,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","Driveby_R",4.0,0,1,1,1,1);
		default: SCM(playerid, COL_MKEK, "Használat: /aim [1/2/3]");
	}
	return true;
}

CMD:lean(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"GANGS","leanIDLE",4.0,0,1,1,1,0);
		case 2: LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,0,1,1,1,0);
		default: SCM(playerid, COL_MKEK, "Használat: /lean [1/2]");
	}
	return true;
}

CMD:strip(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: LoopingAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
		case 2: LoopingAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
		case 3: LoopingAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
		case 4:	LoopingAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
		case 5:	LoopingAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
		case 6:	LoopingAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
		case 7:	LoopingAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
		default: SCM(playerid, COL_MKEK, "Használat: /strip [1/2/3/4/5/6/7]");
	}
	return true;
}

CMD:dance(playerid, params[])
{
	if(NemMozoghat(playerid))
		return SCM(playerid, COL_LRED, NEM_MOZOGHAT);
		
	switch( strval(params) )
	{
		case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
		case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
		case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
		case 4:	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
		default: SCM(playerid, COL_MKEK, "Használat: /dance [1/2/3/4]");
	}
	return true;
}

/*---------------- Animok vége --------------*/
CMD:korbevezetes(playerid,params[])
{
	if(PlayerInfo[playerid][pjatekosszint] > 5)return SCM(playerid,COL_LRED,"5-ös szint felett nem kérhetsz körbevezetést, ha mégis ezt szeretnéd, keress fel egy AS-t/S&M tagot!");

	SCM(playerid,COL_MKEK,"Körbevezetést kértél.");
	foreach(Player, p)
	{
	    if(IsAS(p) || PlayerInfo[p][pSM] == 1 || Admin(p,1) || IsScripter(playerid))
	    {
	        SendFormatMessage(p,COLOR_RED,"[%d]%s körbevezetést kért, foglalkozzatok vele!",playerid,JatekosNev(playerid));
	    }
	}
	return 1;
}
CMD:smr(playerid,params[])
{
	if(PlayerInfo[playerid][pSM] == 1)
	{
	    if(isnull(params)) return SCM(playerid,COL_MKEK,"Használat: /smr [Szöveg]");
    	else {
    	    new str[256];
	        switch(PlayerInfo[playerid][pSMrang])
	        {
	            case 1: {
	                format(str,sizeof str,"(( S&M Tag %s: %s ))",JatekosNev(playerid),params);
	                foreach(Player,i)
	                {
						if(PlayerInfo[i][pSM] == 1)
						{
						    SendClientMessage(i,0xd99b0bAA,str);
						}
	                }
	            }
	            case 2: {
	                format(str,sizeof str,"(( S&M Elit %s: %s ))",JatekosNev(playerid),params);
	                foreach(Player,i)
	                {
						if(PlayerInfo[i][pSM] == 1)
						{
						    SendClientMessage(i,0xd99b0bAA,str);
						}
	                }
	            }
	            case 3: {
	                format(str,sizeof str,"(( S&M Vezeto %s: %s ))",JatekosNev(playerid),params);
	                foreach(Player,i)
	                {
						if(PlayerInfo[i][pSM] == 1)
						{
						    SendClientMessage(i,0xd99b0bAA,str);
						}
	                }
	            }
	            case 4: {
	                format(str,sizeof str,"(( S&M Alapító %s: %s ))",JatekosNev(playerid),params);
	                foreach(Player,i)
	                {
						if(PlayerInfo[i][pSM] == 1)
						{
						    SendClientMessage(i,0xd99b0bAA,str);
						}
	                }
	            }
	        }
	    }
	}
	else return SCM(playerid,COL_MKEK,"Csak S&M-nek!");
	return 1;
}


CMD:sm(playerid,params[])
{
	if(PlayerInfo[playerid][pSMrang] >= 3 || IsScripter(playerid))
	{
   		new param[32];
	    new id;
	//	new str[256];
	    if(sscanf(params,"s[32]u",param,id)) return SCM(playerid,COL_MKEK,"Használat: /sm [Felvesz/Kirúg] [Játékos/ID]");
	    else if(!strcmp(param,"felvesz",true))
	    {
	        PlayerInfo[id][pSM] = 1;
	        PlayerInfo[id][pSMrang] = 1;
	        SFM(id,COL_MKEK,"%s felvett téged az S&M-be!",JatekosNev(playerid));
	       // SCM(id,COL_MKEK,str);
	        SFM(playerid,COL_MKEK,"Felvetted %s-t az S&M-be.",JatekosNev(id));
	        //SCM(playerid,COL_MKEK,str);
	    }
        else if(!strcmp(param,"kirúg",true))
	    {
	        PlayerInfo[id][pSM] = 0;
	        PlayerInfo[id][pSMrang] = 0;
	        SFM(id,COL_MKEK,"%s kirúgott az S&M-bõl!",JatekosNev(playerid));
	       // SCM(id,COL_MKEK,str);
	        SFM(playerid,COL_MKEK,"Kirúgtad %s-t az S&M-bõl.",JatekosNev(id));
	     //   SCM(playerid,COL_MKEK,str);
	    }
	}
	else return SCM(playerid,COL_MKEK,"Csak S&M Vezetõnek!");
	return 1;
}

CMD:smrang(playerid,params[])
{
    if(PlayerInfo[playerid][pSMrang] >= 3 || IsScripter(playerid))
	{
	    new id;
	    new rang;
	    if(sscanf(params,"ui",id,rang)) return SCM(playerid,COL_MKEK,"Használat: /smrang [Játékos/ID] [Rang]");
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_MKEK,"Nincs ilyen játékos.");
	    else if(rang > 4) return SCM(playerid,COL_MKEK,"Hibás rang!");
	    else if(PlayerInfo[id][pSM] == 0) return SCM(playerid,COL_MKEK,"Õ nem tagja az S&Mnek");
	    else
	    {
	        PlayerInfo[id][pSMrang] = rang;
	//		new str[256];
			SFM(playerid,COL_MKEK,"S&M: %s új rangot adott: %d",JatekosNev(playerid),rang);
		//	SCM(id,COL_MKEK,str);
			SFM(playerid,COL_MKEK,"S&M: Új rangot adtál neki: %s (%d)",JatekosNev(id),rang);
//			SCM(playerid,COL_MKEK,str);
	    }
	}
	else return SCM(playerid,COL_MKEK,"Csak S&M Vezetõnek!");
	return 1;
}

CMD:szg(playerid,params[])
{
	new szam;
	if(sscanf(params,"i",szam)) return SCM(playerid,COL_MKEK,"Használat: /szg [Dollár/Forint érték]");
	else {
		new dollar;
		new forint;
		forint = szam * 235;
		dollar = szam / 235;
		//new str[144];
		SFM(playerid,COL_MKEK,"%d dollár = %.0d forint",szam,forint);
		//SCM(playerid,COL_MKEK,str);
		SFM(playerid,COL_MKEK,"%d forint = %.0d dollár",szam,dollar);
//		SCM(playerid,COL_MKEK,str);
	}
	return 1;
}

CMD:number(playerid, params[])
{
	if(!PlayerInfo[playerid][pTelefonKonyv])
		return SCM(playerid, COL_LRED, "Nincs telefonkönyved!");
		
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /number [Játékos vagy Telefonszám]");
	
	new bool:talalt;
	if(IsNumeric(params))
	{
		foreach(Player, i)
		{
			if(!PlayerInfo[i][ptelefonszam]) continue;
			if(Belepve(i) && !IsPlayerNPC(i) && PlayerInfo[i][ptelefonszam] == strval(params))
			{
				SFM(playerid, COL_MKEK, "Név: %s | Telefonszám: %d", JatekosNev(i), PlayerInfo[i][ptelefonszam]);
				talalt = true;
				break;
			}
		}
	}
	
	if(!talalt)
	{
		new jatekos;
		sscanf(params, "u", jatekos);
		
		if(IsPlayerConnected(jatekos) && jatekos != INVALID_PLAYER_ID && !IsPlayerNPC(jatekos))
		{
			SFM(playerid, COL_MKEK, "Név: %s | Telefonszám: %d", JatekosNev(jatekos), PlayerInfo[jatekos][ptelefonszam]);
			talalt = true;
		}
	}
	
	if(!talalt)
		return SCM(playerid, COL_LRED, "Nincs ilyen találat a telefonkönyvben!");
	
	return true;
}

CMD:sms(playerid, params[])
{
	if(Bortonben(playerid))
		return SCM(playerid, COL_LRED, "Jelenleg nem használhatod!");
	
	new szam, str[128];
	if(sscanf(params, "ds[128]", szam, str))
		return SCM(playerid, COL_MKEK, "Használat: /sms [Telefonszám] [Üzenet]");
		
	if(!OOC_Ellenorzes(playerid, "/sms", str))
		return true;
	
	if(!PlayerInfo[playerid][ptelefonszam])
		return SCM(playerid, COL_LRED, "Nincs telefonod!");
		
	if(PlayerInfo[playerid][pTog][5])
		return SCM(playerid, COL_LRED, "A te telefonod ki van kapcsolva!");
		
	
	if(PlayerInfo[playerid][pTelefonPenz] < 3)
		return SCM(playerid, COL_LRED, "Az SMS ára 3$, neked nincs ennyi a telefonodon!");
	
	new jatekos = NINCS;
	foreach(Player, i)
	{
		if(Belepve(i) && PlayerInfo[i][ptelefonszam] == szam && szam != 0 && !PlayerInfo[i][pTog][5])
		{
			jatekos = i;
			break;
		}
	}
	
	if(jatekos == NINCS)
		return SCM(playerid, COL_LRED, "Nincs ilyen telefonszám, vagy jelenleg hálózaton kívül van!");
		
	PlayerInfo[playerid][pTelefonPenz] -= 3;
	SendFormatMessage(jatekos, COLOR_YELLOW, "SMS - %s: %s", ToStr(PlayerInfo[playerid][ptelefonszam], true, '-'), str);
	SendFormatMessage(playerid, COLOR_YELLOW, "SMS Elküldve - %s: %s", ToStr(szam, true, '-'), str);
	SendFormatMessage(playerid, COLOR_YELLOW, "SMS ára: 3$ - Fennmaradó telefon egyenleg: %s$", FormatNumber(PlayerInfo[playerid][pTelefonPenz], 0, ','));
	
	return true;
}

CMD:ad(playerid, params[])
{
    if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1129.018, -1488.965, 22.769) && !Admin(playerid, AC_SZINT))//Ha ott van ahol lenni kell (Hirdetõ biznisz helye)
	{
		PlayerInfo[playerid][pCP] = CP_GPS;
		SetPlayerCheckpoint(playerid, 1129.018, -1488.965, 22.769, 5.0);
		SCM(playerid, COL_LRED, "Itt nem tudsz hirdetést adni, menj a térképen megjelölt ponthoz!");
		return true;
	}
	if(PlayerInfo[playerid][ptelefonszam] < 1)
		return SCM(playerid, COL_LRED, "Neked még nincs telefonod!");
		
	if(PlayerInfo[playerid][pjatekosszint] < 3)
		return SCM(playerid, COL_LRED, "Hirdetéshez legalább hármas szinttel kell rendelkezned!");
		
	if(Bortonben(playerid) > 0)
		return SCM(playerid, COL_LRED, "Börtönben nem adhatsz fel hírdetést!");
		
	new result[128],
		hirdetes[85];
	
	if(sscanf(params, "s[128]", hirdetes))
		return SCM(playerid, COL_MKEK, "Használat: /ad [ Hírdetés szövege]");

	if(strlen(hirdetes) < 10 || strlen(hirdetes) > 85)
		return SFM(playerid, COL_LRED, "Minimum 10 és maximum 85 karakter lehet! Jelenleg %d karakter hosszúságú.", strlen(hirdetes));

	if(!OOC_Ellenorzes(playerid, "/ad", hirdetes))
		return true;

	if(ServerInfo[0][sHirdetes] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Jelenleg van feladva hírdetés! Próbáld meg kicsit késõbb!");

 	if(strfind(hirdetes, "drog", true) != NINCS || strfind(hirdetes, "heroin", true) != NINCS || strfind(hirdetes, "mati", true) != NINCS || strfind(hirdetes, "bankrob", true) != NINCS)
		return SCM(playerid, COL_LRED, "Nincs illegális hirdetés! Üzletelj az utcán, vagy használj kódneveket!");
		
	if(strfind(hirdetes, "felmosó", true) != NINCS || strfind(hirdetes, "airsoft", true) != NINCS || strfind(hirdetes, "porcukor", true) != NINCS)
		return SCM(playerid, COL_LRED, "A valóságban sem jönnének rá, hogy mit is hirdetsz valójában.. Ne hirdess ilyet!");

	new osszeg = CegInfo[ BIZ_HIR ][cBelepo];
	if(PlayerInfo[playerid][pBszPenz] < osszeg)
		return SFM(playerid, COL_LRED, "* A hirdetés "#COL_MKEK"%s"#COL_FEHER"$-ba kerül! Neked nincs ennyi a bankszámládon!", FormatNumber( osszeg, 0, ',' ));

	new timek[3];
	gettime(timek[0], timek[1], timek[2]);
	PlayerInfo[playerid][pBszPenz] -= osszeg;
	CegPenz(BIZ_HIR, osszeg);
	format(result, sizeof(result), "Hirdetés: %s | Hirdetõ: %s | Tel: %d [%d:%d]",  hirdetes, JatekosNev(playerid), PlayerInfo[playerid][ptelefonszam], timek[0], timek[1]);
	foreach(Player,i)
	{
		if(!PlayerInfo[i][pTog][11] == true)
		{
			SendClientMessage(i,0x1be035AA, result);
		}
	}
	format(result, sizeof(result), "~r~A hirdetés ára %d$~n~~w~%d karakterbõl állt", osszeg, strlen(hirdetes));
	GameTextForPlayer(playerid, result, 5000, 5);

	SetTimerEx("GTimer", 60000, false, "ii", GT_HIRDETES, NINCS);
	ServerInfo[0][sHirdetes] = true;
	
	return true;
}

CMD:vesz(playerid, params[])
{
	new i = NINCS, bool:van;
	
	for(;++i < sizeof(Boltok);)
		if(IsPlayerInRangeOfPoint(playerid, 3.0, Boltok[i][boltX], Boltok[i][boltY], Boltok[i][boltZ]))
			van = true;
			
	if(sscanf(params,"s[32]{}",params)) return SCM(playerid,COL_MKEK,"Használat: /vesz [ kp / bp ]");
	if(!strcmp(params, "kp", true) || !strcmp(params, "készpénz", true))
	{
		if(van)
		{
			new dstr[1024], tmp[128], b = NINCS;
			for(;++b < sizeof(TargyLista);)
			{
				format(tmp, sizeof(tmp), "\n%s\t[%s$]", TargyLista[b][0], FormatNumber(TargyLista[b][1][0], 0, ','));
				strcat(dstr, tmp, sizeof(dstr));
			}
			
			ShowPlayerDialog(playerid, DIALOG_BOLT, DIALOG_STYLE_LIST, "24/7 Kínálat", dstr, "Megvesz", "Mégse");
			return true;
		}
		
		i = NINCS;
		for(;++i < sizeof(RuhaBoltok);)
			if(IsPlayerInRangeOfPoint(playerid, 3.0, RuhaBoltok[i][boltX], RuhaBoltok[i][boltY], RuhaBoltok[i][boltZ]))
				van = true;
		
		if(van)
		{
			ShowPlayerDialog(playerid, DIALOG_RUHABOLT, DIALOG_STYLE_LIST, "Ruhabolt", "Ruhák\nHátizsák\nMunkaruha\nDivatBolt", "Rendben", "Mégse");
			return true;
		}
	}
	else if(!strcmp(params, "bp", true) || !strcmp(params, "bankpénz", true))
	{
		if(van)
		{
			new dstr[1024], tmp[128], b = NINCS;
			for(;++b < sizeof(TargyLista);)
			{
				format(tmp, sizeof(tmp), "\n%s\t[%s$]", TargyLista[b][0], FormatNumber(TargyLista[b][1][0], 0, ','));
				strcat(dstr, tmp, sizeof(dstr));
			}
			
			ShowPlayerDialog(playerid, DIALOG_BOLT_BP, DIALOG_STYLE_LIST, "24/7 Kínálat", dstr, "Megvesz", "Mégse");
			return true;
		}
		
		i = NINCS;
		for(;++i < sizeof(RuhaBoltok);)
			if(IsPlayerInRangeOfPoint(playerid, 3.0, RuhaBoltok[i][boltX], RuhaBoltok[i][boltY], RuhaBoltok[i][boltZ]))
				van = true;
		
		if(van)
		{
			ShowPlayerDialog(playerid, DIALOG_RUHABOLT_BP, DIALOG_STYLE_LIST, "Ruhabolt", "Ruhák\nHátizsák\nMunkaruha\nDivatBolt", "Rendben", "Mégse");
			return true;
		}
	}
	return true;
}

/*CMD:lista(playerid, params[])
{
	new fk = PlayerInfo[playerid][pFrakcio], jatekos, str[128], szam, param[24];
	if(fk != FRAKCIO_LSPD && fk != FRAKCIO_LSMD && fk != FRAKCIO_LSFD && fk != FRAKCIO_FBI && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "A te szervezeted nem vezet listát!");
	if(sscanf(params, "s[24]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /lista [ Megnéz / Fogad / Töröl / Mutat(Marker törlése) ]");
		
	if(!strcmp(param, "mutat"))
	{
		if(PlayerInfo[playerid][pKiertMegy] == NINCS)
			return SCM(playerid, COL_LRED, "Nincs jel a térképen!");
		
		foreach(Player, p)
		{
			if(PlayerInfo[playerid][pKiertMegy] == p)
				SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
		}
		
		SetPlayerMarkerForPlayer(playerid, PlayerInfo[playerid][pKiertMegy], COLOR_INVISIBLE);
		PlayerInfo[playerid][pKiertMegy] = NINCS;
		return true;
	}
	else if(!strcmp(param, "megnéz") || !strcmp(param, "megnez"))
	{
		SendClientMessage(playerid, COLOR_WHITE, "======================== [ "#COL_MKEK"Lista"#COL_FEHER" ] ========================");
		foreach(Player, i)
		{
			if(!Belepve(i)) continue;
			if(fk == FRAKCIO_LSMD && PlayerInfo[i][pSegelyhivas] == 102)
				SendFormatMessage(playerid, COLOR_WHITE, "Hívó: "#COL_MKEK"%s"#COL_FEHER" | Oka: "#COL_MKEK"%s", JatekosNev(i, true), PlayerInfo[i][pSegelyhivasOk]), szam++;
			else if(fk == FRAKCIO_LSFD && PlayerInfo[i][pSegelyhivas] == 103)
				SendFormatMessage(playerid, COLOR_WHITE, "Hívó: "#COL_MKEK"%s"#COL_FEHER" | Oka: "#COL_MKEK"%s", JatekosNev(i, true), PlayerInfo[i][pSegelyhivasOk]), szam++;
			else if(fk == FRAKCIO_LSPD && PlayerInfo[i][pSegelyhivas] == 104)
			{
				SendFormatMessage(playerid, COLOR_WHITE, "Bejelentõ: "#COL_MKEK"%s"#COL_FEHER" | Bejelentett személy: "#COL_MKEK"%s", JatekosNev(i, true), PlayerInfo[i][pSegelyhivasOt]);
				SendFormatMessage(playerid, COLOR_WHITE, "Információ: "#COL_MKEK"%s", PlayerInfo[i][pSegelyhivasOk]);
				szam++;
			}
		}
		
		if(!szam)
			SCM(playerid, COL_LRED, "Jelenleg üres a lista.");
	}
	else if(!strcmp(param, "fogad"))
	{
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /lista fogad [Játékos] | Játékos hívásának fogadása");
			
		if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			
		if(!PlayerInfo[jatekos][pSegelyhivas])
			return SCM(playerid, COL_LRED, "Ez a játékos nem szerepel a listán!");
			
		if((fk == FRAKCIO_LSMD && PlayerInfo[jatekos][pSegelyhivas] != 102) && (fk == FRAKCIO_LSMD && PlayerInfo[jatekos][pSegelyhivas] != 103) && (fk == FRAKCIO_LSMD && PlayerInfo[jatekos][pSegelyhivas] != 104))
			return SCM(playerid, COL_LRED, "Ez a hívás nem hozzátok futott be!");
			
		if(fk != FRAKCIO_LSPD)
		{
			format(str, sizeof(str), "** %s "#COL_VKEK"%s"#COL_FEHER" fogadta "#COL_VKEK"%s"#COL_FEHER" hívását!", (fk == FRAKCIO_LSMD ? ("Mentõs") : ("Tûzoltó")), JatekosNev(playerid, true), JatekosNev(jatekos, true));
			SendClientMessageToAll(COLOR_WHITE, str);
			SCM(jatekos, COL_MKEK, "Úton a segítség! Tarts ki!");
		} else {
			format(str, sizeof(str), "** %s "#COL_VKEK"%s"#COL_FEHER" foglalkozik "#COL_VKEK"%s"#COL_FEHER" bejelentésével!", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), JatekosNev(jatekos, true));
			SendClientMessageToAll(COLOR_WHITE, str);
			SCM(jatekos, COL_MKEK, "A rendõrség foglalkozik a bejelentéseddel!");
		}
		
		PlayerInfo[jatekos][pSegelyhivas] = 0;
		PlayerInfo[playerid][pKiertMegy] = jatekos;
		SetPlayerMarkerForPlayer(playerid, jatekos, COLOR_ORANGE);
		new Float:x,Float:y,Float:z;
		GetPlayerPos(jatekos,x,y,z);
		SetPlayerCheckpoint(playerid,x,y,z,5);
		return true;
	}
	if(!strcmp(param, "töröl") || !strcmp(param, "torol"))
	{
		new ok[64];
		if(sscanf(params, "{s[24]}us[64]", jatekos, ok))
			return SCM(playerid, COL_MKEK, "Használat: /lista töröl [Játékos] [Oka] | Játékos hívásának törlése");
			
		if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			
		if(!PlayerInfo[jatekos][pSegelyhivas])
			return SCM(playerid, COL_LRED, "Ez a játékos nem szerepel a listán!");
			
		if((fk == FRAKCIO_LSMD && PlayerInfo[jatekos][pSegelyhivas] != 102) || (fk == FRAKCIO_LSMD && PlayerInfo[jatekos][pSegelyhivas] != 103) || (fk == FRAKCIO_LSMD && PlayerInfo[jatekos][pSegelyhivas] != 104))
			return SCM(playerid, COL_LRED, "Ez a hívás nem hozzátok futott be!");
			
		if(fk != FRAKCIO_LSPD)
		{
			format(str, sizeof(str), "** %s "#COL_VKEK"%s"#COL_FEHER" törölte "#COL_VKEK"%s"#COL_FEHER" hívását! Oka: %s", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), JatekosNev(jatekos, true), ok);
			SendClientMessageToAll(COLOR_WHITE, str);
			SFM(jatekos, COL_MKEK, "A hívásod törölték! Oka: %s", ok);
		} else {
			format(str, sizeof(str), "** %s "#COL_VKEK"%s"#COL_FEHER" foglalkozik "#COL_VKEK"%s"#COL_FEHER" bejelentésével!", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), JatekosNev(jatekos, true), ok);
			FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, str);
			SCM(jatekos, COL_MKEK, "A rendõrség foglalkozik a bejelentéseddel!");
		}
		PlayerInfo[jatekos][pSegelyhivas] = 0;
		return true;
	}
	
	return true;
}*/

CMD:jelent(playerid, params[])
{
	new bid, oka[64];
	if(sscanf(params, "us[64]", bid, oka))
		return SCM(playerid, COL_MKEK, "Használat: /jelent [JátékosNeve/ID] [Oka]");
		
	if(isnull(oka))
		return SCM(playerid, COL_LRED, "Az oka legalább 2 betû kell, hogy legyen!");
		
	new jatekos = NINCS;
	foreach(Player, i)
	{
		if(!Belepve(i)) continue;
		if(egyezik(JatekosNev(i), JatekosNev(bid)))
		{
			jatekos = i;
			break;
		}
	}
	
	if(jatekos == NINCS || jatekos == playerid)
		return SCM(playerid, COL_LRED, "Nincs ilyen azonosítójú játékos!");
	
	if(PlayerInfo[playerid][pFigyelmeztetes] > 1)
		return SCM(playerid, COL_LRED, "Már értesítetted az Adminokat kétszer, nem kell floodolni! Használd a /report-ot!");
	
	PlayerInfo[playerid][pFigyelmeztetes]++;
	/*if(Iter_Count(Adminok) > 0)
	{*/
	AdminUzenet(COLOR_ROZSA, 1001, "[Bejelentés]: [%d]%s -> [%d]%s | Oka: %s", playerid, JatekosNev(playerid), jatekos, JatekosNev(jatekos), oka);
	SCM(playerid, COL_LRED, "Bejelentésed elküldve az Adminok részére!");
		
	/*} else SCM(playerid, COL_LRED, "Jelenleg nincs Online Admin, de logoltuk a bejelentésed egy esetleges PK esetére!");*/
	
	if(PlayerInfo[playerid][pFigyelmeztetes] == 1) //elég csak egyszer jelentenie
	{
		nformat(str, 128, "[%d]%s -> Bid: %d - [uID: %d][%d]%s - Oka: %s", playerid, JatekosNev(playerid), bid, PlayerInfo[jatekos][pID], jatekos, JatekosNev(jatekos), oka);
		Log(FILE_BID, str);
	}
	
	return true;
}

CMD:idk(playerid, params[])
{
	#pragma unused params
	/* /nevek miatt kiszedve
	if(PlayerInfo[playerid][pPaintBall][0] || GetPlayerVirtualWorld(playerid) == WAR_VW)
		return SCM(playerid, COL_LRED, "Paintballban, Warban nem használható!");
	
	if((PlayerInfo[playerid][pBejelento] = true - PlayerInfo[playerid][pBejelento]))
	{
		FeliratMutat( playerid, true );
		if(!Admin(playerid, 1)) SCM(playerid, COL_MKEK, "Feliratok "#COL_MKEK"30"#COL_FEHER" másodpercre bekapcsolva! Bejelentéshez használd a "#COL_MKEK"/jelent"#COL_FEHER" parancsot!");
		else SCM(playerid, COL_MKEK, "Feliratok bekapcsolva!");
			
		PlayerInfo[playerid][pFeliratIdo] = (Admin(playerid, 1) ? NINCS : 30);
		
	} else {
	
		SCM(playerid, COL_MKEK, "Feliratok kikapcsolva!");
		FeliratMutat( playerid, false );
	
	}
	
	Streamer_Update(playerid);
	*/
	SCM(playerid, COL_LRED, "Használd a /jelent [JátékosNév/ID] parancsot!");
	return true;
}

CMD:nevek(playerid, params[])
{
	#pragma unused params
	
	if(PlayerInfo[playerid][pNevek]) {
		SCM(playerid, COL_MKEK, "Nevek kikapcsolva!");
		MutatNevek(playerid, false);
		PlayerInfo[playerid][pNevek] = false;
	} else {
		SCM(playerid, COL_MKEK, "Nevek bekapcsolva!");
		MutatNevek(playerid, true);
		PlayerInfo[playerid][pNevek] = true;
	}
	
	return true;
}

// Matteo új parancsok
CMD:szerel(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_SZERELO && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
	new param[24];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /szerel [ Jármû / Számla / Rendszám / Neon ]");
	
	sscanf(params, "s[24]{}", param);	
	if(!strcmp(param, "szamla", true) || !strcmp(param, "számla", true))
	{
		new jatekos, penz;
		if(sscanf(params, "{s[24]}ud", jatekos, penz))
			return SCM(playerid, COL_MKEK, "Használat: /szerel szamla [Játékos] [Összeg]");
		
		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(playerid == jatekos)
			return SCM(playerid, COL_LRED, "Jaj te kis huncut, ne számlázz magadnak :3");
		
		if(penz < 200 || penz > 10000)
			return SCM(playerid, COL_LRED, "A számla összege minimum 200$ és maximum 10 000$ lehet!");
			
		if(PlayerInfo[jatekos][pBszPenz] < penz)
			return SCM(playerid, COL_LRED, "Ennek a személynek nincs elég pénze a bankszámláján a csekk kifizetéséhez!");
			
		SFM(playerid, COL_MKEK, "Átadtad a számlát "#COL_MKEK"%s"#COL_FEHER"-t "#COL_MKEK"%s"#COL_FEHER"$-ra (Várj míg elfogadja)", JatekosNev(jatekos, true), FormatNumber(penz, 0, ','));
		SFM(jatekos, COL_MKEK, "%s átnyújtott neked egy számlát amely "#COL_MKEK"%s"#COL_FEHER"$-ba kerül!", JatekosNev(playerid, true), FormatNumber(penz, 0, ','));
		SCM(jatekos, COL_MKEK, "Amennyiben ki szeretnéd fizetni írd be "#COL_MKEK"/elfogad számla!");
		Cselekves(playerid, "átnyújtott egy számlát valakinek..", 1);
		PlayerInfo[jatekos][pBirsag][0] = playerid;
		PlayerInfo[jatekos][pBirsag][1] = penz;
		PlayerInfo[jatekos][pBirsag][2] = 1;
		
		return true;
	}
	else if(!strcmp(param, "jármû", true) || !strcmp(param, "jarmu", true))
	{
		new osszeg, kocsi = GetClosestVehicle(playerid, false), vid = JarmuID(kocsi, playerid);
		new KiszallasOsszeg = 0;
		
		if(vInfo[vid][vModel] == 525)	//Ha nem ott vette ki ahol szerelni fog akkor itt frissít poz-t
			GetVehiclePos(kocsi,PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]);
		if(vInfo[vid][vModel] == 525 && PozTowtrack[playerid][0] != 1 && !IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))
		{
			Cselekves(playerid, "Levette az alkatrészeket a Towtruck-ról", 0);
			SCM(playerid, COL_MKEK, "Egy autot meg tudsz szerelni, bárhol a Towtruck közelében.");
			GetVehiclePos(kocsi,PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]);
			PozTowtrack[playerid][0] = 1; //Alkatrészeket ad..
			return true;
		}
		if(
		!IsPlayerInRangeOfPoint(playerid, 20, 24.157, -227.480, 2.347) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 23.315, -243.501, 2.557) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 22.361, -257.448, 2.616) &&
		!IsPlayerInRangeOfPoint(playerid, 20, 32.551, -331.342, 4.328) &&
		PozTowtrack[playerid][0] != 1 && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nem vagy szerelõ telepen, vagy vegyél le szerszámot és alkatrészt egy Towtruck-ról.");
		if(PozTowtrack[playerid][0] == 1)
			if(!IsPlayerInRangeOfPoint(playerid, 10, PozTowtrack[playerid][1],PozTowtrack[playerid][2],PozTowtrack[playerid][3]))
				return SCM(playerid, COL_LRED, "Túl messze vagy a Towtruck-tól!");
		if(IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
			return SCM(playerid, COL_LRED, "Kocsi mellett kell állnod");
		if(GetDistanceToCar(playerid,kocsi) > 4.0) 
			return SCM(playerid,COL_LRED,"Nincs a közeledben jármû!");
		if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
			return SCM(playerid, COL_LRED, "Járó motornál szerelnél? Nem vagy te szívsebész!!!");
		//Veh fajta ellenõrzés
		if(IsAKocsi(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_KOCSI;
		else if(IsABicikli(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_BICIKLI;
		else if(IsAMotor(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_MOTOR;
		else if(IsARepulo(vInfo[vid][vModel]))
			osszeg = SZERELES_OSSZEG_REPULO;
		else
			osszeg = SZERELES_OSSZEG_KOCSI;
		//Ha saját kocsi akkor fele a szerelési díj
		if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
			osszeg = (osszeg / 2);
		//Ha van szerszámos láda és nincs a telepen akkor távolság ellenõrzés a teleptõl és a kiszállás kiszámolása
		if(PozTowtrack[playerid][0] == 1 && !IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))
		{
			new Float:KiszallasiTavolsag = GetPlayerDistanceFromPoint(playerid, 1385.696, -1896.973, 13.494);
			KiszallasOsszeg = (floatround(KiszallasiTavolsag)/10);
		}
		//Player Bsz egyenleg ellenõrzés
		if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] < -50000)
			if(KiszallasOsszeg < 1)
				return SFM(playerid, COL_LRED, "Nincs elegendõ pénzed a széfben(%d-$ + kiszállási díj: %d-$), hogy megjavítsd a kocsit.", osszeg, KiszallasOsszeg);
			else
				return SFM(playerid, COL_LRED, "Nincs elegendõ pénzed a széfben (%d-$), hogy megjavítsd a kocsit.", osszeg);
		PozTowtrack[playerid][0] = 0;	//Elveszi az alkatrészeket
		TogglePlayerControllable(playerid,false);
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
		SetTimerEx("Kocsijavit",20000,0,"ddddd",playerid,kocsi,vid,osszeg,KiszallasOsszeg);
	}
	else if(!strcmp(param, "rendszám", true) || !strcmp(param, "rendszam", true)) //Ne nagyon variáld - Martin
	{
		if(!IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))
			return SCM(playerid, COL_LRED, "Nem vagy a szerelõ bázison!");
		
		new car = GetClosestVehicle(playerid, false);
		if(car == NINCS || GetDistanceToVehicle(playerid, car) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
		
		new jatekos = GetClosestPlayer(playerid), vid = JarmuID(car, playerid);
		if((jatekos == NINCS) || (vInfo[vid][vTulajID] != PlayerInfo[jatekos][pID]))
			return SCM(playerid, COL_LRED, "A jármû tulaja nincs a közeledben!");
			
		if(PlayerInfo[jatekos][pPremiumPont] < PremiumPontKell[ADAT_RENDSZAM - 1][1])
			return SCM(playerid, COL_LRED, "Ennek a játékosnak nincs elegendõ Prémium Pontja, hogy egyedi rendszámot csinálhass neki!");
		
		PlayerInfo[playerid][pProcess][0] = PR_RENDSZAM;
		PlayerInfo[playerid][pProcess][1] = jatekos;
		PlayerInfo[playerid][pProcess][2] = vid;
		
		nformat(form, 256, ""#COL_FEHER"Kérlek add meg a jármû leendõ rendszámát!\nAktuális rendszám: "#COL_MKEK"%d[%d]"#COL_FEHER"\nTulajdonos: "#COL_MKEK"%s", car, vid, vInfo[vid][vTulaj]);
		ShowPlayerDialog(playerid, DIALOG_RENDSZAM, DIALOG_STYLE_INPUT, "Rendszámváltás", form , "Rendben", "Mégse");
	}
	else if(!strcmp(param, "neon", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 20, 72.333, -335.683, 1.706) && !IsScripter(playerid))
		{
			SCM(playerid, COL_LRED, "Nem vagy a szerelõ bázison!");
			SetPlayerCheckpoint(playerid,72.333, -335.683, 1.706,5);
			return 1;
		}
		new car = GetClosestVehicle(playerid, false);
		if(car == NINCS || GetDistanceToVehicle(playerid, car) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
		
		new jatekos = GetClosestPlayer(playerid), vid = JarmuID(car, playerid);
		if(GetPlayerDistanceFromPlayer(playerid,jatekos) > 5)
        {
            SendClientMessage(playerid, COLOR_GREY, " Õ nincs a közeledben!");
            return 1;
        }
		
		switch(vInfo[vid][vModel])
		{
			case 445,602,429,496,504,401,518,402,541,527,415,542,589,507,562,585,419,526,466,492,474,494,502,503,411,546,559,551,516,467,603,426,436,547,405,580,560,550,506,549,451,558,540,491,477,529:
			{
				PlayerInfo[playerid][pProcess][0] = PR_NEON;
				PlayerInfo[playerid][pProcess][1] = jatekos;
				PlayerInfo[playerid][pProcess][2] = vid;
				PlayerInfo[playerid][pProcess][3] = 1;
			
				new str[256];
				format(str, sizeof(str), ""#COL_FEHER"Neon leszerelése\n"#COL_PIROS"[1.] Piros\n"#COL_MKEK"[2.] Kék\n"#COL_VZOLD"[3.] Zöld\n"#COL_CITROM"[4.] Sárga\n"#COL_ROZSA"[5.] Rózsaszín\n"#COL_FEHER"[6.] Fehér");
				ShowPlayerDialog(playerid, DIALOG_NEON ,DIALOG_STYLE_LIST, "Neon mûveletek", str, "Mehet", "Mégse"); 
				return true;
			}
			
			default:
				return SCM(playerid, COL_LRED, "Erre a jármû nem rakhatsz Neont!");
		}
	}
	return true;
}

CMD:munka(playerid, params[])
{
	if(isnull(params))
	{
		SCM(playerid, COL_MKEK, "Használat: /munka [ Felvesz / Felmond / Kezd ]");
		return true;
	}
	new param[24], melyik = NINCS, munka;
	sscanf(params, "s[24]D(-1){}", param, melyik);
	
	if(!strcmp(param, "felvesz"))
	{
		new id = NINCS;
		
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 889.750, -0.752, 988.210))
			id = 1; //városháza
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2474.286, -2119.997, 14.756))
			id = 0; //gyár
		
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Jelenleg nem vagy egyik munkafelvevõ helyen se! (( /gps városháza / gyár ))");
		
		if(PlayerInfo[playerid][pMunka1] && PlayerInfo[playerid][pMunka2])
			return SCM(playerid, COL_LRED, "Nem tudsz több munkát elvállalni, kérlek mond fel az egyiket!");
		
		/*else if(!PlayerInfo[playerid][pMunka1])
			PlayerInfo[playerid][pD_MunkaValt][0] = 1;
		else if(PlayerInfo[playerid][pMunka1] && !PlayerInfo[playerid][pMunka2] && !PlayerInfo[playerid][pFrakcio])//ha frakciós max 1munkája lehet
			PlayerInfo[playerid][pD_MunkaValt][0] = 2;
			
		PlayerInfo[playerid][pD_MunkaValt][1] = id;//illegál vagy legál meló*/
		
		SCM(playerid, COL_MKEK, "Jelmagyarázat: "#COL_VZOLD"Zöld"#COL_FEHER" - Van hozzá elegendõ tapasztalatod");
		SCM(playerid, COL_MKEK, "Jelmagyarázat: "#COL_LRED"Piros"#COL_FEHER" - Nincs hozzá elegendõ tapasztalatod");
		
		////Munka define - Név, Szükséges tehetség pont - Legális? (1 = igen | 0 = nem)
		new lista[512], i = NINCS;
		for(;++i < sizeof(Munkak);)
		{
			if(Munkak[i][3][0] == id)
			{
				if(Munkak[i][2][0] <= PlayerInfo[playerid][pExp][1])
					format(lista, sizeof(lista), "%s"#COL_VZOLD"%s [%d/%d]\n", lista, Munkak[i][1], (!id ? PlayerInfo[playerid][pExp][3] : PlayerInfo[playerid][pExp][1]), Munkak[i][2]);//fel tud venni, van elég tapasztalata
				else
					format(lista, sizeof(lista), "%s"#COL_LRED"%s [%d/%d]\n", lista, Munkak[i][1], (!id ? PlayerInfo[playerid][pExp][3] : PlayerInfo[playerid][pExp][1]), Munkak[i][2]);//nem tudja felvenni
			}
		}

		ShowPlayerDialog(playerid, DIALOG_MUNKA, DIALOG_STYLE_LIST, ""#COL_FEHER"Munkavállalás", lista, "Elvállal", "Mégse");
	}
	else if(!strcmp(param, "felmond"))
	{
		new id = NINCS;
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 889.750, -0.752, 988.210)) id = 1; //városháza
		else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2474.286, -2119.997, 14.756)) id = 0; //gyár
		
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Jelenleg nem vagy egyik munkafelvevõ helyen se! (( /gps városháza / gyár ))");
			
		if(!PlayerInfo[playerid][pMunka1] && !PlayerInfo[playerid][pMunka2])
			return SCM(playerid, COL_LRED, "Neked még nincs munkád!");
		if(PlayerInfo[playerid][pMunka1] && !PlayerInfo[playerid][pMunka2]) {
		
			munka = PlayerInfo[playerid][pMunka1];
			PlayerInfo[playerid][pMunka1] = 0;
			
		} else {
		
			if(melyik != 1 && melyik != 2)
				return SCM(playerid, COL_MKEK, "Használat: /munka felmond [1/2] | Válaszd ki melyik munkádat szeretnéd felmondani!");
				
			if(melyik == 1)
			{
				munka = PlayerInfo[playerid][pMunka1];
				PlayerInfo[playerid][pMunka1] = 0;
			} else {
				munka = PlayerInfo[playerid][pMunka2];
				PlayerInfo[playerid][pMunka2] = 0;
			}
		}
		
		nformat(str, 128, "\n"#COL_VZOLD"Sikeresen felmondtad a(z)\n"#COL_MKEK"%s"#COL_VZOLD" munkádat!", Munkak[ munka - 20 ][1]);
		Info_Dialog(playerid, ""#COL_FEHER"Felmondás", str);
	}
	else if(!strcmp(param, "kezd"))
	{
		if(gettime() < PlayerInfo[playerid][pMunkaFlood])
			return SCM(playerid, COL_LRED, "Ne floodold!");
			
		if(PlayerInfo[playerid][pFizetes] > 10000)
		{
		    return SCM(playerid,COL_LRED,"Most nem dolgozhatsz!");
		}
		
		if(!PlayerInfo[playerid][pMunka1] && !PlayerInfo[playerid][pMunka2])
			return SCM(playerid, COL_LRED, "Neked még nincs munkád! Kérlek keresd fel a Munkaügyi Központot!");
		if(PlayerInfo[playerid][pMunka1] && !PlayerInfo[playerid][pMunka2])
			munka = PlayerInfo[playerid][pMunka1];
		else
		{
			if(melyik != 1 && melyik != 2)
				return SCM(playerid, COL_MKEK, "Használat: /munka kezd [1/2] | Válaszd ki melyik munkádat szeretnéd elkezdeni!");
			
			if(melyik == 1)
				munka = PlayerInfo[playerid][pMunka1];
			else
				munka = PlayerInfo[playerid][pMunka2];
		}
		
		switch( munka )
		{
			case MUNKA_UTTISZTITO:
			{
				if(!IsPlayerInAnyVehicle(playerid))
					return SCM(playerid, COL_LRED, "Nem vagy jármûben!");
				
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 574)
					return SCM(playerid, COL_LRED, "Úttisztító jármûben kell ülnöd!");
				
				new rand = random(sizeof(TisztitoUtak));
				
				PlayerInfo[playerid][pCP] = CP_UTTISZTITO;
				MunkaCP[playerid][0] = TisztitoUtak[rand][0];
				MunkaCP[playerid][1] = TisztitoUtak[rand][1];
				MunkaCP[playerid][2] = TisztitoUtak[rand][2];
				PlayerInfo[playerid][pTavolsag] = GetPlayerDistanceFromPoint(playerid, PosExt(TisztitoUtak[rand]));
				while(PlayerInfo[playerid][pTavolsag] < 3.0)
					PlayerInfo[playerid][pTavolsag] = GetPlayerDistanceFromPoint(playerid, PosExt(TisztitoUtak[random(sizeof(TisztitoUtak))]));
				
				SetPlayerCheckpoint(playerid, PosExt(TisztitoUtak[rand]), 5.0);
			}
			case MUNKA_KUKA:
			{
				if(!IsPlayerInAnyVehicle(playerid))
					return SCM(playerid, COL_LRED, "Nem vagy jármûben!");
				
				if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 408)
					return SCM(playerid, COL_LRED, "Kukás jármûben kell ülnöd!");
				
				new rand = random(sizeof(KukaPos)),
					Float:cpx = KukaPos[rand][0],
					Float:cpy = KukaPos[rand][1],
					Float:cpz = KukaPos[rand][2],
					Float:cpa = KukaPos[rand][3];
				
				PlayerInfo[playerid][pCP] = CP_KUKA;
				PlayerInfo[playerid][pKukaIndex] = rand;

				
				GetInFrontOfXY(cpx, cpy, cpz, cpa, 4.0, true);
				SetPlayerCheckpoint(playerid, cpx, cpy, cpz, 5.0);
			}
			case MUNKA_KAMION:
			{
				/*
					piros - 2934
					sárga - 2935
					kék - 2932
				*/
				
				if(!IsPlayerInAnyTruck(playerid))
					return SCM(playerid, COL_LRED, "Kamionban kell ülnöd!");

				if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)) && (GetVehicleModel(GetPlayerVehicleID(playerid)) != 578))
					return SCM(playerid, COL_LRED, "Nincs felcsatolva a pótkocsi!");

				new start, cel;
				GenerateTruckRoad(start, cel);
				PlayerInfo[playerid][pKamions] = start;
				PlayerInfo[playerid][pKamionc] = cel;

				PlayerInfo[playerid][pCP] = CP_KAMION_KEZD;
				SetPlayerCheckpoint(playerid, PosExt(KamionUtak[start]), 5.0);
				MunkaCP[playerid][0] = KamionUtak[start][0];
				MunkaCP[playerid][1] = KamionUtak[start][1];
				MunkaCP[playerid][2] = KamionUtak[start][2];
				SCM(playerid, COL_MKEK, "Menj a kijelölt területre az áru felpakolásához!");
				Streamer_Update(playerid);
			}
			case MUNKA_FARMER:
			{
				if(!IsPlayerInAnyVehicle(playerid))
					return SCM(playerid, COL_LRED, "Nem vagy jármûben!");
					
				if((GetVehicleModel(GetPlayerVehicleID(playerid)) != 532) && (GetVehicleModel(GetPlayerVehicleID(playerid)) != 531))
					return SCM(playerid, COL_LRED, "Traktorba, illetve Combine-ba kell ülnöd!");
				
				if(GetVehicleTrailer(GetPlayerVehicleID(playerid)))
				{
					if(GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid))) == 610)
					{
						return DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					}
				}
				
				new kocsi = GetClosestVehicle(playerid, false);
				new Float:tavolsag = GetDistanceToCar(playerid, kocsi);
				
				if(tavolsag <= 5.0)
				{
					if((GetVehicleModel(GetPlayerVehicleID(playerid)) == 531) || (GetVehicleModel(kocsi) == 610))
					{
						return AttachTrailerToVehicle(kocsi, GetPlayerVehicleID(playerid));
					}
				} else
					return SCM(playerid, COL_LRED, "Nincs a közeledben pótkocsi!");
			}
			case MUNKA_FAVAGO:
			{
				if(!IsPlayerInRangeOfPoint(playerid, 10.0, 1547.141, 13.851, 24.140))
				{
					SCM(playerid, COL_LRED, "Nem vagy a fafarmon! GPS-en megjelölve.");
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, 1547.141, 13.851, 24.140, 5.0);
					return true;
				}
				
				GiveWeapon(playerid, 9, 1);
				SCM(playerid, COL_VKEK, "** Felvetted a felszerelésed!");
			}
			default: SCM(playerid, COL_MKEK, "Ezt a munkát nem kell elindítani!");
		}
		PlayerInfo[playerid][pMunkaFlood] = (gettime() + 30);
	}
	return true;
}

CMD:butor(playerid, params[])
{
	new butorszam = ButorSzam(playerid);
	if(butorszam == -2)
		return SCM(playerid, COL_LRED, "Neked még nincs saját házad, mielõtt használnád vegyél egyet!");
	if(butorszam == NINCS)
		return SCM(playerid, COL_LRED, "Csak a saját házadban használhatod!");

	ShowPlayerDialog(playerid, DIALOG_BUTOR, DIALOG_STYLE_LIST, #COL_FEHER"Bútor", "Bútor vétel\nBútor szerkesztés\nBútor lista\nStatisztika\nPrémium slotok vásárlása [1600pp]", "Mehet!", "Kilépés!");
	return true;
}

CMD:maszk(playerid, params[])
{
	if(!PlayerInfo[playerid][pMaszk])
		return SCM(playerid, COL_LRED, "Neked még nincs maszkod, ha szeretnél egyet vegyél az egyik ruhaboltban!");
	
	LoopingAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
	if(PlayerInfo[playerid][pMaszkVisel])
	{
		SCM(playerid, COL_MKEK, "Levetted a maszkot!");
		RemovePlayerAttachedObject(playerid, SLOT_MASZK);
		PlayerInfo[playerid][pMaszkVisel] = false;
		PlayerInfo[playerid][pNoname] = 0;
		foreach(Player, x)
		{
			ShowPlayerNameTagForPlayer(x, playerid, 1);
		}
		
	}
	else 
	{
	
		SCM(playerid, COL_VZOLD, "Felvetted a maszkot!");
		new index = SLOT_MASZK;
		new maszk = 100001+random(900000);
		PlayerInfo[playerid][pMaszkID] = maszk;
		SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], 2, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
		PlayerInfo[playerid][pMaszkVisel] = true;
		PlayerInfo[playerid][pNoname] = 1;
		foreach(Player, x)
		{
			if(!Admin(x,1))
			{
				ShowPlayerNameTagForPlayer(x, playerid, 0);
			}
		}
	}
	
	return true;
}

CMD:zar(playerid, params[])
{
    new k = NINCS, bool:van;
	for(;++k < MAX_KAPU;)
	{
		if(IsPlayerInRangeOfPoint(playerid, Kapu[k][kTav], PosExt(Kapu[k][kZPos])) || IsPlayerInRangeOfPoint(playerid, Kapu[k][kTav], PosExt(Kapu[k][kNPos])))
		{
			if(Kapu[k][kMozgo])
				MoveDynamicObject(Kapu[k][kOID], PosExt(Kapu[k][kZPos]), Kapu[k][kSpeed]);
			else
			{
				SetDynamicObjectPos(Kapu[k][kOID], PosExt(Kapu[k][kZPos]));
				SetDynamicObjectRot(Kapu[k][kOID], PosExt(Kapu[k][kZRPos]));
			}
			van = true;
			//break;
		}
	}
	
	if(!van) SCM(playerid, COL_LRED, "Nincs a közeledben kapu!");
	return true;
}

CMD:nyit(playerid, params[])
{
	new k = NINCS, bool:van;
	for(;++k < MAX_KAPU;)
	{
		//if(IsPlayerInRangeOfPoint(playerid, Kapu[k][kTav], PosExt(Kapu[k][kZPos])))
		if(IsPlayerInRangeOfPoint(playerid, Kapu[k][kTav], PosExt(Kapu[k][kZPos]))/* || IsPlayerInRangeOfPoint(playerid, Kapu[k][kTav], PosExt(Kapu[k][kNPos]))*/)
		{
			if(PlayerInfo[playerid][padmin] > 0 || KapuEngedely(playerid, k))
			{
			    if(Kapu[k][kKod] != NINCS)
			    {
			        Szamok[playerid][0] = EOS;
			        for(new i = 0; i < 2; i++)
						PlayerTextDrawShow(playerid, Kellek[playerid][i]);
					for(new i = 0; i < 10; i++)
						PlayerTextDrawShow(playerid, Gombok[playerid][i]);
					for(new i = 0; i < 2; i++)
						PlayerTextDrawShow(playerid, Jelzes[playerid][i]);

					PlayerTextDrawShow(playerid, KapuNev[playerid]);
					SelectTextDraw(playerid, 0xF7C25EAA);

			        if(Admin(playerid, 1))
						SFM(playerid, COL_MKEK, "A kapu jelszava a következõ: "#COL_MKEK"%d", Kapu[k][kKod]);
						
			        PlayerTextDrawSetString(playerid, KapuNev[playerid], Kapu[k][kNev]);
                    PlayerInfo[playerid][pValtozott] = false;
					PlayerInfo[playerid][pMelyikKapu] = k;
			        return true;
				}
				if(Kapu[k][kMozgo])
					MoveDynamicObject(Kapu[k][kOID], PosExt(Kapu[k][kNPos]), Kapu[k][kSpeed]);
				else
				{
					SetDynamicObjectPos(Kapu[k][kOID], PosExt(Kapu[k][kNPos]) );
					SetDynamicObjectRot(Kapu[k][kOID], PosExt(Kapu[k][kNRPos]) );
				}
			}
			else
				SCM(playerid, COL_LRED, "Ezt a kaput nem nyithatod ki!");
				
			van = true;
			//break;
        }
	}
	if(!van) SCM(playerid, COL_LRED, "Nincs a közeledben kapu!");
	return true;
}

CMD:oocki(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(ServerInfo[0][sOOC])
		ServerInfo[0][sOOC] = false;
	else
		ServerInfo[0][sOOC] = true;
	
	SFM(playerid, COL_LRED, "Globális OOC chat %s", (ServerInfo[0][sOOC] ? ("bekapcsolva") : ("kikapcsolva")));
	return true;
}

CMD:ooc(playerid, params[])// help-ben mint /o
{
	if(!ServerInfo[0][sOOC])
		return SCM(playerid, COL_LRED, "A Globális OOC Chat jelenleg nincs bekapcsolva!");
	
	if(PlayerInfo[playerid][pnemitva])
		return SCM(playerid, COL_LRED, "Nem beszélhetsz, mikor némítva vagy!");
		
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: (/o)oc [OOC Chat] | Az egész szerver látja, normálisan viselkedj benne!");
		
	if(!OOC_Ellenorzes(playerid, "/o", params))
		return true;

	nformat(str, 128, "(( %s: %s ))", JatekosNev(playerid, true), params);
	foreach(Player, p)
	{
		if(PlayerInfo[p][pTog][2]) continue;
		SendClientMessage(p, COLOR_LIGHTBLUE, str);
	}
	
	return true;
}

CMD:kaja(playerid, params[])
{
	if(PlayerInfo[playerid][pSzendvics] < 1)
		return SCM(playerid, COL_LRED, "Nincs szendvicsed, vegyél egy boltban!");

	new Float:elet = PlayerInfo[playerid][pElet];
	//GetPlayerHealth(playerid, elet);
	
	if(elet == 150.0)
		return SCM(playerid, COL_LRED, "Nem vagy éhes!");

	ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
	//SetHealth(playerid, MAXHP);
	if((elet + 20.0) > 150.0)
		SetHealth(playerid, 150.0);
	else
		SetHealth(playerid, elet + 20.0);
	
	Szukseglet(playerid, -20.0, 25.0);
	PlayerInfo[playerid][pSzendvics]--;
	SCM(playerid, COL_VZOLD, "Megettél egy szendvicset!");
	Cselekves(playerid, "elõvett egy szendvicset és megette.", 0);
	return true;
}

CMD:try(playerid, params[])
{
	if(ServerInfo[0][sCsend] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");
		
	if(PlayerInfo[playerid][pTryTime] > gettime())
		return SFM(playerid, COL_LRED, "Leghamarabb "#COL_MKEK"%s"#COL_FEHER" múlva írhatsz megpróbált!", UnixToTime( PlayerInfo[playerid][pTryTime] ));

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /megpróbál [Akció]");
		
	if(strlen(params) < 5)
		return SCM(playerid, COL_LRED, "Az akciónak legalább 5 karakterbõl kell állnia!");
		
	if(!OOC_Ellenorzes(playerid, "/megpróbál", params))
		return true;
		
	PlayerInfo[playerid][pTryTime] = (gettime() + (60 * 5));
	new str[128];
	switch(random(2))
	{
		case 0:
		{
			format(str, sizeof(str), "** %s megpróbál %s, de sajnos nem sikerül neki", JatekosNev(playerid), params);
			ProxDetector(30.0, playerid, str, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
		}
		case 1:
		{
			format(str, sizeof(str), "** %s megpróbál %s és sikerül neki", JatekosNev(playerid), params);
			ProxDetector(30.0, playerid, str, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
		}
	}
	return true;
}

CMD:walk(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /walk [0 - 13]");
	
	new mennyi = strval(params);
	if(mennyi > 13 || mennyi < 0)
		return SCM(playerid, COL_LRED, "Hiba! A sétálás típusnak "#COL_MKEK"0 "#COL_FEHER"és "#COL_MKEK"13 "#COL_FEHER"között kell lennie!");

	SetPlayerWalkingStyle(playerid, mennyi);
	SFM(playerid, COL_VZOLD, "Sétálási stílusod: %d", mennyi);
	return true;
}

CMD:megprobalja(playerid, params[])
{
	if(ServerInfo[0][sCsend] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");
		
	if(PlayerInfo[playerid][pTryTime] > gettime())
		return SFM(playerid, COL_LRED, "Leghamarabb "#COL_MKEK"%s"#COL_FEHER" múlva írhatsz megpróbált!", UnixToTime( PlayerInfo[playerid][pTryTime] ));

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /megprobálja [Akció]");
		
	if(strlen(params) < 5)
		return SCM(playerid, COL_LRED, "Az akciónak legalább 5 karakterbõl kell állnia!");
		
	if(!OOC_Ellenorzes(playerid, "/megpróbálja", params))
		return true;
		
	PlayerInfo[playerid][pTryTime] = (gettime() + (60 * 5));
	new str[128];
	switch(random(2))
	{
		case 0:
		{
			format(str, sizeof(str), "** %s megpróbálja %s, de sajnos nem sikerül neki", JatekosNev(playerid), params);
			ProxDetector(30.0, playerid, str, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
		}
		case 1:
		{
			format(str, sizeof(str), "** %s megpróbálja %s és sikerül neki", JatekosNev(playerid), params);
			ProxDetector(30.0, playerid, str, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
		}
	}
	return true;
}

CMD:b(playerid, params[])//help-ben
{
	new szoveg[128];
	new stringje[256];
	if(ServerInfo[0][sCsend] && PlayerInfo[playerid][padmin] == 0)
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(sscanf(params, "s[128]", szoveg))
	    return SCM(playerid, COL_MKEK, "Használat: /b [OOC beszéd] | Karakteren kívüli beszéd");
		
	if(!OOC_Ellenorzes(playerid, "/b", szoveg))
		return true;

	if(PlayerInfo[playerid][pTog][2])
	    return SCM( playerid, COL_MKEK, "Letiltottad az OOC chatet, ezért nem tudsz írni.");
		
	new kicsinalja[128];
	
	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
	}

	if(strlen(szoveg) < 75)
	{
		format(stringje, sizeof(stringje), "%s mondja: OOC: (( %s ))", kicsinalja, szoveg);
		ProxDetectorOOC(15.0, playerid, stringje, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	if(strlen(szoveg) > 74)
	{
		new nagystring[75];
		strmid(nagystring, szoveg, 75, strlen(szoveg));
		strdel(szoveg, 75, strlen(szoveg));
		format(stringje, sizeof(stringje), "%s mondja OOC: (( %s ...", kicsinalja, szoveg);
		ProxDetectorOOC(15.0, playerid, stringje, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		format(stringje, sizeof(stringje), "...%s ))", nagystring);
		ProxDetectorOOC(15.0, playerid, stringje, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	}
	return true;
}

CMD:ds(playerid, params[])
{
	new houseid = KozeliHaz(playerid);
	new nearbydoor[2] = {-1, -1};   //0: ajtó, amihez közel van; 1: beordibál(0), kiordibál(1)

	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "Használat: /ds [házba kiáltás szövege]");

	if(ServerInfo[0][sCsend] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	for(new i = 0; i < MAX_AJTO; i++)
	{
	    if(IsPlayerInRangeOfPoint( playerid, 5.0, AjtoInfo[i][abepos][0], AjtoInfo[i][abepos][1], AjtoInfo[i][abepos][2] ))
	    {
	        nearbydoor[0] = i;
	        nearbydoor[1] = 0;
	        break;
	    }
	    if(IsPlayerInRangeOfPoint( playerid, 5.0, AjtoInfo[i][akipos][0], AjtoInfo[i][akipos][1], AjtoInfo[i][akipos][2] ))
	    {
	        nearbydoor[0] = i;
	        nearbydoor[1] = 1;
	        break;
	    }
	}


	new str[128];
	if(PlayerInfo[playerid][pAlnevbe] == false)
	{
		new maszkid[24];
		format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
		format(str, 128, "%s ordítja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
	}
	else
	{
		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			new maszkid[24];
			format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
			format(str, 128, "%s ordítja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
		}
		else
		{
			format(str, 128, "%s ordítja: %s", PlayerInfo[playerid][pAlnev], params);
		}
	}

	if(houseid != NINCS)
	{
		if(PlayerInfo[playerid][phaz] == NINCS)
		{
			new interior2 = HazInfo[houseid][inter];
			ProxDetectorEx(30.0, BelsoInterior[interior2][belsox], BelsoInterior[interior2][belsoy], BelsoInterior[interior2][belsoz], str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		} else {
			ProxDetectorEx(30.0, HazInfo[houseid][posx], HazInfo[houseid][posy], HazInfo[houseid][posz], str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
		}
		SendClientMessage( playerid, -1, str );
		return 1;
	} else if( nearbydoor[1] == 1 )
	{
	    ProxDetectorEx(30.0, AjtoInfo[nearbydoor[0]][abepos][0], AjtoInfo[nearbydoor[0]][abepos][1], AjtoInfo[nearbydoor[0]][abepos][2], str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	    SendClientMessage( playerid, -1, str );
	    return 1;
	} else if( nearbydoor[1] == 0 )
	{
	    ProxDetectorEx(30.0, AjtoInfo[nearbydoor[0]][akipos][0], AjtoInfo[nearbydoor[0]][akipos][1], AjtoInfo[nearbydoor[0]][akipos][2], str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	    SendClientMessage( playerid, -1, str );
	    return 1;
	} else {
        return SCM(playerid, COL_LRED, "Nem vagy ajtó vagy ház közelében.");
	}
}

CMD:s(playerid, params[])// help-ben
{
	if(ServerInfo[0][sCsend] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "Használat: /s [Kiáltás szövege]");
		
	if(!OOC_Ellenorzes(playerid, "/s", params))
		return true;
	
	new str[128];
	if(PlayerInfo[playerid][pAlnevbe] == false)
	{
		new maszkid[24];
		format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
		format(str, 128, "%s ordítja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
	}
	else
	{
		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			new maszkid[24];
			format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
			format(str, 128, "%s ordítja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
		}
		else
		{
			format(str, 128, "%s ordítja: %s", PlayerInfo[playerid][pAlnev], params);
		}
	}
	ProxDetector(30.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return true;
}

CMD:c(playerid, params[])// help-ben
{
	if(ServerInfo[0][sCsend] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "Használat: /c [Suttogás szövege]");
		
	if(!OOC_Ellenorzes(playerid, "/c", params))
		return true;

	new str[128];
	if(PlayerInfo[playerid][pAlnevbe] == false)
	{
		new maszkid[24];
		format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
		format(str, 128, "%s suttogja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
	}
	else
	{
		if(PlayerInfo[playerid][pMaszkVisel] == true)
		{
			new maszkid[24];
			format(maszkid, sizeof(maszkid), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
			format(str, 128, "%s suttogja: %s", (PlayerInfo[playerid][pMaszkVisel] ? (maszkid) : JatekosNev(playerid, true)), params);
		}
		else
		{
			format(str, 128, "%s suttogja: %s", PlayerInfo[playerid][pAlnev], params);
		}
	}
	ProxDetector(3.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return true;
}
CMD:accent(playerid, params[])
{
	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "Használat: /accent [akcentus]");
	if(strlen(params) > 10)
		return SCM(playerid, COL_MKEK, "Maximum 10 karakter lehet.");
	format(PlayerInfo[playerid][pAccent], MAX_PLAYER_NAME, "%s acc.", params);
	SFM(playerid, COL_MKEK, "Akkcentusod átállítottad erre: "#COL_MKEK"%s", PlayerInfo[playerid][pAccent]);
	return true;
}
CMD:l(playerid, params[])// help-ben - kivéve
{
	if(playerid != NINCS)
		return SCM(playerid, COL_LRED, "Kivéve - Használj maszkot! Ruhaboltban kapható.");
	
	if(ServerInfo[0][sCsend] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "Használat: /l [Ismeretlen beszéd]");
		
	if(!OOC_Ellenorzes(playerid, "/l", params))
		return true;

	nformat(str, 128, "Valaki mondja: %s", params);
	ProxDetector(15.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
	return true;
}

CMD:d(playerid, params[])
{
	if(PlayerInfo[playerid][pMeghalt])
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");
	
	new fk = PlayerInfo[playerid][pFrakcio];
	if(fk != FRAKCIO_LSMD && fk != FRAKCIO_LSPD && fk != FRAKCIO_KATONA && fk != FRAKCIO_KORMANY && fk != FRAKCIO_LSFD && fk != FRAKCIO_FBI)
	    return SCM(playerid, COL_LRED, "Nem vagy egyik rendvédelmi vagy közigazgatási szerv tagja sem!");

	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /d [Sürgõsségi rádió] | Csak akkor használd ha tényleg szükség van rá!");
	if(!OOC_Ellenorzes(playerid, "/d", params))
		return true;
		
	if(fk == FRAKCIO_LSFD)
		format(prox, sizeof(prox),"** Tûzoltó %s %s: %s vége ", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);
	else if(fk == FRAKCIO_KORMANY && PlayerInfo[playerid][prang] > 4)
		format(prox, sizeof(prox),"** %s %s: %s vége ", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);
	else
		format(prox, sizeof(prox),"** %s %s %s: %s vége ", FInfo[PlayerInfo[playerid][pFrakcio]][fNev], Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);
		
    foreach(Player, p)
    {
		fk = PlayerInfo[p][pFrakcio];
        if(Belepve(p) && !PlayerInfo[p][pTog][0] && (fk == FRAKCIO_LSMD || fk == FRAKCIO_LSPD || fk == FRAKCIO_FBI || fk == FRAKCIO_KORMANY || fk == FRAKCIO_LSFD || fk == FRAKCIO_KATONA))
			SendClientMessage(p, COLOR_ALLDEPT, prox);
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}

CMD:r(playerid, params[])
{
	if(!PlayerInfo[playerid][pFrakcio])
	    return SCM(playerid, COL_LRED, "Nem vagy egy szervezet tagja sem!");
	if(PlayerInfo[playerid][pMeghalt])
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");
		
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_MAFFIA || FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_BANDA)
	{
		SCM(playerid,COL_LRED,"Használd a telefonodat. Egy banda / maffia nem rádiózik!");
		return true;
	}
	
	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /r [IC Rádió]");
	if(!OOC_Ellenorzes(playerid, "/r", params))
		return true;
		
	format(prox, sizeof(prox),"** %s %s: %s vége ", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);
    
	foreach(Player, p)
    {
        if(Belepve(p) && !PlayerInfo[p][pTog][0] && (PlayerInfo[p][pFrakcio] == PlayerInfo[playerid][pFrakcio]))
        {
			SendClientMessage(p, COLOR_RADIO, prox);
		}
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}

CMD:kr(playerid, params[])
{
	if(!IsPlayerInAnyTruck(playerid))
	    return SCM(playerid, COL_LRED, "Nem ülsz kamionban!");

	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /kr [IC Kamion Rádió]");
	if(!OOC_Ellenorzes(playerid, "/kr", params))
		return true;
		
	format(prox, sizeof(prox),"** Kamionsofõr %s: %s vége ", JatekosNev(playerid, true), params);
    
	foreach(Player, p)
    {
        if(Belepve(p) && !PlayerInfo[p][pTog][0] && IsPlayerInAnyTruck(p))
			SendClientMessage(p, COLOR_RADIO, prox);
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}

CMD:rb(playerid, params[])
{
	if(!PlayerInfo[playerid][pFrakcio])
	    return SCM(playerid, COL_LRED, "Nem vagy egy szervezet tagja sem!");
	if(PlayerInfo[playerid][pMeghalt])
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");
	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /rb [OOC Rádió]");
	if(!OOC_Ellenorzes(playerid, "/rb", params))
		return true;

	format(prox, sizeof(prox), "** %s %s OOC: (( %s )) **", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);
    foreach(Player, p)
    {
        if(Belepve(p) && !PlayerInfo[p][pTog][0] && (PlayerInfo[p][pFrakcio] == PlayerInfo[playerid][pFrakcio]))
        {
			SendClientMessage(p, COLOR_RADIO, prox);
		}
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja OOC: (( %s ))", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}

CMD:call(playerid, params[])
{
	if(Bortonben(playerid))
		return SCM(playerid, COL_LRED, "Jelenleg nem használhatod!");
	
	if(PlayerInfo[playerid][ptelefonszam] < 1)
		return SCM(playerid, COL_LRED, "Neked még nincs telefonod!");
	
	new telefonszam;
	if(sscanf(params, "d", telefonszam))
		return SCM(playerid, COL_MKEK, "Használat: /call [telefonszám] | Segélyhívás: 911");
		
	if(PlayerInfo[playerid][pTelefonPenz] < 5 && telefonszam != 911)
		return SCM(playerid, COL_LRED, "Nincs a kártyádon pénz!");
	
	//PlayerInfo[playerid][pTelefonVonalban] = false;
	if(telefonszam == PlayerInfo[playerid][ptelefonszam])
		return SCM(playerid, COL_LRED, "Magadat nem hívhatod fel!");
		
	if(PlayerInfo[playerid][ptelefonal])
		return SCM(playerid, COL_LRED, "Már hívásban vagy!");
		
	if(PlayerInfo[playerid][pTog][5])
		return SCM(playerid, COL_LRED, "A telefonod ki van kapcsolva!");
	
	if(PlayerInfo[playerid][pFrakcio])
	{
		if(telefonszam == DROG_TELEFONSZAM && IsJob(playerid, MUNKA_DROG))
		{
			new randomo = random(sizeof(RandomDrogSz));
			new vanneki = false, i = -1;
			
			for(;++i < 3;)
				if(ServerInfo[0][sDrog][i] > 0)
					vanneki += ServerInfo[0][sDrog][i];
			
			new str[148];
			
			format(str, sizeof(str), "[Telefon] Valaki mondja: %s", RandomDrogSz[randomo]);
			SendClientMessage(playerid, COLOR_FADE1, str);
			
			ProxDetector(15.0, playerid, "[Telefon] Valaki mondja: Kellene egy kis cucc testvér.", COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			
			switch(vanneki)
			{
				case 6500 .. 7500:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Kurva sok cuccom van még, mi kell? (( Drog, drogmag ))");
				case 5500 .. 6499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Nagyon sok cuccom van még, mi kell? (( Drog, drogmag ))");
				case 4500 .. 5499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Sok cuccom van még, mi kell? (( Drog, drogmag ))");
				case 3500 .. 4499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Még sok cuccom van, mi kell? (( Drog, drogmag ))");
				case 2500 .. 3499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Fogyóban van a cucc, de van még, mi kell? (( Drog, drogmag ))");
				case 1500 .. 2499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Még van pár kiló tartalékban, mi kell? (( Drog, drogmag ))");
				case 500 .. 1499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Még idõben hívtál, van pár cuccom még, mi kell? (( Drog, drogmag ))");
				case 1 .. 499:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Nagyon fogyóban vagyok haver, de, mi kell? (( Drog, drogmag ))");
				case 0:
					SendClientMessage(playerid, COLOR_FADE1, "[Telefon] Valaki mondja: Sajnos kifogytam a cuccokból, csak magom maradt. (( drogmag ))");
			}
			
			PlayerInfo[playerid][ptelefonaloid] = DROG_TELEFONSZAM;
			PlayerInfo[playerid][ptelefonal] = true;
			return true;
			//ProxDetector(20.0, playerid, str, COLOR_FADE1, COLOR_FADE2, COLOR_FADE3, COLOR_FADE4, COLOR_FADE5);
			
		}
	}
	
	if(telefonszam == 911)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Itt a 911. Milyen egységekre van szüksége ? (( Rendõrség/Mentõk ))");
		PlayerInfo[playerid][pSegelyhivas] = 1;
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		return true;
	}
	
	new jatekosid;
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			if(PlayerInfo[i][ptelefonszam] == telefonszam)
			{
				jatekosid = i;
				if(!PlayerInfo[jatekosid][ptelefonal] && !PlayerInfo[jatekosid][pTog][5])
				{
					PlayerInfo[jatekosid][ptelefonaloid] = playerid;
					PlayerInfo[playerid][ptelefonaloid] = jatekosid;
					PlayerInfo[jatekosid][ptelefonal] = true;
					PlayerInfo[playerid][ptelefonal] = true;
					PlayerInfo[playerid][pTelefonVonalban] = false;
					PlayerInfo[jatekosid][pTelefonVonalban] = false;
					PlayerInfo[playerid][pHivo] = true;
					format(uzenet, sizeof(uzenet), "Csörög a telefonod! Hívó: "#COL_VKEK"%s "#COL_FEHER"(/pickup)", JatekosNev(playerid, true));
					SendClientMessage(jatekosid, COLOR_WHITE, uzenet);
					Cselekves(playerid, "elõveszi a telefonját", 1);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
					return true;
				} else
					return SCM(playerid, COL_LRED, "A vonal foglalt! Próbáld késõbb!");
			}
		}
	}
	
	SCM(playerid, COL_LRED, "Nincs ilyen telefonszám.");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	return true;
}

CMD:pickup(playerid, params[])
{
	if(PlayerInfo[playerid][ptelefonszam] < 1)
		return SCM(playerid, COL_LRED, "Nincs még telefonod!");
	if(PlayerInfo[playerid][ptelefonaloid] == -1)
		return SCM(playerid, COL_LRED, "Jelenleg nem hív senki!");
		
	PlayerInfo[playerid][ptelefonal] = true;
	PlayerInfo[ PlayerInfo[playerid][ptelefonaloid] ][pTelefonVonalban] = true;
	PlayerInfo[playerid][pTelefonVonalban] = true;
	SCM(PlayerInfo[playerid][ptelefonaloid], COL_MKEK, "Felvették a telefont!");
	SCM(playerid, COL_MKEK, "Felvetted a telefont!");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	return true;
}

CMD:hangup(playerid, params[])
{
	if(PlayerInfo[playerid][ptelefonszam] < 1)
		return SCM(playerid, COL_LRED, "Nincs még telefonod!");
		
	PlayerInfo[playerid][pSegelyhivas] = 0;
	if(PlayerInfo[playerid][ptelefonaloid] == -1)
		return SCM(playerid, COL_LRED, "Jelenleg nem hív senki!");
		
	if(PlayerInfo[playerid][ptelefonal])
		SCM(PlayerInfo[playerid][ptelefonaloid], COL_MKEK, "A telefont lerakták!");
	else
		SCM(PlayerInfo[playerid][ptelefonaloid], COL_LRED, "A telefon foglalt!");
	
	PlayerInfo[ playerid ][pTelefonVonalban] = false;
	PlayerInfo[playerid][pHivo] = false;
	PlayerInfo[ PlayerInfo[playerid][ptelefonaloid] ][pHivo] = false;
	PlayerInfo[ PlayerInfo[playerid][ptelefonaloid] ][pTelefonVonalban] = false;
	PlayerInfo[PlayerInfo[playerid][ptelefonaloid]][ptelefonal] = false;
	PlayerInfo[PlayerInfo[playerid][ptelefonaloid]][ptelefonaloid] = -1;
	PlayerInfo[playerid][ptelefonaloid] = -1;
	PlayerInfo[playerid][ptelefonal] = false;
	SCM(playerid, COL_MKEK, "Leraktad a telefont!");
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	return true;
}

CMD:eject(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Nem vagy jármûben!");
	
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SCM(playerid, COL_LRED, "Csak vezetõként dobhatsz ki utast a jármûbõl!");
	
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /eject [JátékosID / JátékosNév]");
	
	if(!IsPlayerConnected(jatekos) || jatekos == INVALID_PLAYER_ID || jatekos == playerid)
		return SCM(playerid, COL_LRED, "Ez a játékos nincs fent!");
	
	if(!IsPlayerInVehicle(jatekos, GetPlayerVehicleID(playerid)))
		return SCM(playerid, COL_LRED, "Ez a játékos nincs a jármûvedben!");

	new str[128];
	switch(random(2))
	{
		case 0:
		{
			//Josh Solman megpróbálta kilökni a kocsiból [akit ki akart lökni] -t és sikerült neki.
			format(str, sizeof(str), "** %s megpróbálta kilökni a jármûbõl %s-t és sikerült neki!", JatekosNev(playerid), JatekosNev(jatekos));
			ProxDetector(30.0, playerid, str, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
			SFM(playerid, COL_VZOLD, "Sikeresen kiraktad "#COL_MKEK"%s"#COL_FEHER"-t!", JatekosNev(jatekos));
			SCM(jatekos, COL_LRED, "A sofõr kidobott a jármûbõl!");
			RemovePlayerFromVehicle(jatekos);
			return true;
		}
		case 1:
		{
			format(str, sizeof(str), "** %s megpróbálta kilökni a jármûbõl %s-t és nem sikerült neki!", JatekosNev(playerid), JatekosNev(jatekos));
			ProxDetector(30.0, playerid, str, COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED,COLOR_RED);
			return true;
		}
	}
	
	return true;
}
CMD:me(playerid, params[])// help-ben
{
	new szoveg[128];
	new stringje[256];
	if(ServerInfo[0][sCsend] && PlayerInfo[playerid][padmin] == 0)
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(sscanf(params, "s[128]", szoveg))
	    return SCM(playerid, COL_MKEK, "Használat: /me [cselekvés]");
	if(!OOC_Ellenorzes(playerid, "/me", szoveg))
		return true;
	new kicsinalja[128];
	
	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
	}

	if(strlen(szoveg) < 75)
	{
		format(stringje, sizeof(stringje), "* %s %s", kicsinalja, szoveg);
		ProxDetector(15.0, playerid, stringje, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	if(strlen(szoveg) > 74)
	{
		new nagystring[75];
		strmid(nagystring, szoveg, 75, strlen(szoveg));
		strdel(szoveg, 75, strlen(szoveg));
		format(stringje, sizeof(stringje), "* %s %s...", kicsinalja, szoveg);
		ProxDetector(15.0, playerid, stringje, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		format(stringje, sizeof(stringje), "* ...%s (( %s ))", nagystring, kicsinalja);
		ProxDetector(15.0, playerid, stringje, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return 1;
}

CMD:ame(playerid, params[])// help-ben
{
	new szoveg[128], szoveg2[128], kicsinalja[128];
	if(ServerInfo[0][sCsend] && PlayerInfo[playerid][padmin] == 0)
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");
	if(sscanf(params, "s[128]", szoveg))
	    return SCM(playerid, COL_MKEK, "Használat: /ame [cselekvés]");
	if(!OOC_Ellenorzes(playerid, "/ame", szoveg))
		return true;
	format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid, true));
	format(szoveg2, sizeof(szoveg2), "%s %s",kicsinalja, szoveg);
	format(szoveg, sizeof(szoveg), "%s", szoveg);
	ProxDetector(15.0, playerid, szoveg2, 0x6600ffAA,0x6600ffAA,0x6600ffAA,0x6600ffAA,0x6600ffAA);
	SetPlayerChatBubble(playerid, szoveg, 0x6600ffAA, 30.0, 1000*15);
	return 1;
}


CMD:do(playerid, params[])// help-ben
{
	new szoveg[128];
	new stringje[256];
	if(ServerInfo[0][sCsend] && PlayerInfo[playerid][padmin] == 0)
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(sscanf(params, "s[128]", szoveg))
	    return SCM(playerid, COL_MKEK, "Használat: /do [Történés]");
	if(!OOC_Ellenorzes(playerid, "/do", szoveg))
		return true;
	new kicsinalja[128];
	
	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid, true));
	}

	if(strlen(szoveg) < 75)
	{
		format(stringje, sizeof(stringje), "** %s  (( %s ))", szoveg, kicsinalja);
		ProxDetector(15.0, playerid, stringje, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE);
	}
	if(strlen(szoveg) > 74)
	{
		new nagystring[75];
		strmid(nagystring, szoveg, 75, strlen(szoveg));
		strdel(szoveg, 75, strlen(szoveg));
		format(stringje, sizeof(stringje), "** %s ...", szoveg);
		ProxDetector(15.0, playerid, stringje, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE);
		format(stringje, sizeof(stringje), "** ...%s (( %s ))", nagystring, kicsinalja);
		ProxDetector(15.0, playerid, stringje, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE, COLOR_ORANGE);
	}
	return 1;
}

CMD:va(playerid, params[])// help-ben
{
	//if(playerid != NINCS)
		//return SCM(playerid, COL_LRED, "Kivéve - Használj maszkot! Ruhaboltban kapható.");

	new szoveg[128];

	if(ServerInfo[0][sCsend] && PlayerInfo[playerid][padmin] == 0)
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");

	if(sscanf(params, "s[128]", szoveg))
	    return SCM(playerid, COL_MKEK, "Használat: /va [cselekvés]");
	if(!OOC_Ellenorzes(playerid, "/va", szoveg))
		return true;

	format(uzenet, sizeof(uzenet), "* Valaki %s", szoveg);
	ProxDetector(15.0, playerid, uzenet, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE, COLOR_PURPLE);
	return 1;
}
CMD:kanna(playerid,params[])
{
	if(isnull(params))
	{
		SCM(playerid,COL_MKEK,"/kanna [Állapot / Enged / Feltölt ]");
		return 1;
	}
	new mit[64];
	new mennyit;
	sscanf(params,"s[64]d",mit,mennyit);
	if(egyezik(mit,"Állapot"))
	{
		SFM(playerid,COL_MKEK,"A Kannádba %d L benzin van!",PlayerInfo[playerid][pKannaBenzin]);
		return 1;
	}
	if(egyezik(mit,"Feltölt"))
	{
		new benzinkutid = BenzinkutnalVan(playerid);
		if(benzinkutid > 0)
		{
			if(mennyit < 0 || mennyit > 30)
			{
				SCM(playerid,COL_LRED,"0-30 L között!");
				return true;
			}
			if(PlayerInfo[playerid][pKannaBenzin]+mennyit > 30)
			{
				SFM(playerid,COL_LRED,"Ennyi nem fér bele! Még %d L fér bele!",30-PlayerInfo[playerid][pKannaBenzin]);
				return 1;
			}
			if(PlayerInfo[playerid][ppenz] < mennyit*2)
			{
				SCM(playerid,COL_LRED,"Nincs ennyi pénzed!");
				return 1;
			}
			PlayerInfo[playerid][pKannaBenzin] += mennyit;
			SFM(playerid,COL_MKEK,"Sikeresen vettél %d L benzint!",mennyit);
			GiveMoney(playerid,-(mennyit*2));
			return true;
		}
		else
		{
			SCM(playerid,COL_LRED,"Nem vagy Benzinkútnál!");
		}
		return true;
	}
	if(egyezik(mit,"Enged"))
	{
		if(mennyit == 0)
		{
			SCM(playerid,COL_LRED,"Hány litert?");
			return 1;
		}
		if(mennyit > PlayerInfo[playerid][pKannaBenzin])
		{
			SCM(playerid,COL_LRED,"Nincs ennyi benzined!");
			return 1;
		}
		new kocsi = GetClosestVehicle(playerid);
		new Float:tavolsag = GetDistanceToCar(playerid, kocsi);

		if(tavolsag <= 5.0)
		{
			new vehicleidje = JarmuID(kocsi, playerid);
			
			if(IsPlayerInVehicle(playerid, kocsi))
				return SCM(playerid, COL_LRED, "Letörne a lábad, ha kiszállnál?");
			if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
				return SCM(playerid, COL_LRED, "Járó motornál tankolnál? Ökröt akarsz sütni?");
				
			if(MAX_Benzin[ vInfo[ vehicleidje ][vModel] - 400 ] < vInfo[vehicleidje][vUzemanyag]+mennyit || mennyit < 0)
				return SCM(playerid, COL_LRED, "Ebbe a jármûbe nem fér ennyi üzemanyag!");

			vInfo[vehicleidje][vUzemanyag] += float(mennyit);
			PlayerInfo[playerid][pKannaBenzin] -= mennyit;
			SFM(playerid,COL_LRED,"Beletankoltál a kocsidba %d Liter Benzint! Maradt: %d L",mennyit,PlayerInfo[playerid][pKannaBenzin]);
		}
		else
		{
			SCM(playerid,COL_LRED,"Nincs jármû a közeledben!");
		}
	}
	return true;
}
CMD:tankol(playerid, params[])
{
	new
		parameterek[32],
		benzinkutid = BenzinkutnalVan(playerid);

	if(sscanf(params, "s[32]{}", parameterek))
	{
		SCM(playerid, COL_MKEK, "Használat: /tankol [paraméterek]");
		SCM(playerid, COL_MKEK, "Paraméterek: jármû, árak");
		return true;
	}

	if(benzinkutid > 0)
	{
		if(!strcmp(parameterek, "árak") || !strcmp(parameterek, "arak"))
		{
			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
			SendClientMessage(playerid, COLOR_WHITE, "Jelenlegi üzemanyag árak:");
			SendClientMessage(playerid, COLOR_WHITE, "Diesel jelenlegi ára: 2$");
			SendClientMessage(playerid, COLOR_WHITE, "Benzin jelenlegi ára: 2$");
			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
			return true;
		} 
		else if(!strcmp(parameterek, "jármû") || !strcmp(parameterek, "jarmu"))
		{
			new kocsi = GetClosestVehicle(playerid);
			new Float:tavolsag = GetDistanceToCar(playerid, kocsi);

			if(tavolsag <= 5.0)
			{
				new vehicleidje = JarmuID(kocsi, playerid);
				
				if(IsPlayerInVehicle(playerid, kocsi))
					return SCM(playerid, COL_LRED, "Letörne a lábad, ha kiszállnál?");
				if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
					return SCM(playerid, COL_LRED, "Járó motornál tankolnál? Ökröt akarsz sütni?");
					
				new benzin, mennyit = floatround(MAX_Benzin[vInfo[vehicleidje][vModel] - 400] - vInfo[vehicleidje][vUzemanyag]);
				if(sscanf(params, "{s[32]}d", benzin))
					return SFM(playerid, COL_MKEK, "Használat: /tankol jármû [Üzemanyag] | Még ennyit tankolhatsz bele: "#COL_MKEK"%d", mennyit);
				
				if(benzin < 5 || benzin > mennyit)
					return SFM(playerid, COL_LRED, "A tankolható mennyiség "#COL_MKEK"0 "#COL_FEHER"és "#COL_MKEK"%d "#COL_FEHER" liter között kell lennie!", mennyit);
				
				new uar = (2 * floatround(benzin));
				if(PenzEgyenleg(playerid) < uar)
					return SFM(playerid, COL_LRED, "Hiba: Az üzemanyag "#COL_MKEK"%s$ba "#COL_FEHER"kerül!", FormatNumber(uar, 0, ','));
					
				vInfo[vehicleidje][vUzemanyag] += float(benzin);
				SFM(playerid, COL_MKEK, "Sikeresen megtankoltad a jármûvet "#COL_MKEK"%dl "#COL_FEHER"üzemanyaggal! Összeg: "#COL_MKEK"%s$", benzin, FormatNumber(uar, 0, ','));
				Cselekves(playerid, "Megtankolta a jármûvét", 1);
				GiveMoney(playerid,-uar);
				return true;
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû, amibe tankolhatnál!");
		}
	} else
		return SCM(playerid, COL_LRED, "Nem vagy egy benzinkútnál sem!");
	return true;
}

CMD:szamla(playerid, params[])
{
	new parameterek[10];

	if(sscanf(params, "s[10]{}", parameterek))
		return SCM(playerid, COL_MKEK, "Használat: /számla [ Nyit / Utal / Befizet / Kifizet / Info ]");
		
	new bool:talalt, k = NINCS, bool:automata = false;
	new Float:SzamlaPos[][3] = 
	{
		{2307.646, -10.134, 22.819}
	};
	
	for(;++k < sizeof(SzamlaPos);)
		if(IsPlayerInRangeOfPoint(playerid, 3.0, PosExt(SzamlaPos[k])))
			talalt = true;
	
	k = 0;
	for(;++k < MAX_AUTOMATA;)
		if(AutomataInfo[k][auhasznalva] && AutomataInfo[k][autipus] == 1)
			if(IsPlayerInRangeOfPoint(playerid, 3.0, PosExt(AutomataInfo[k][aupos])))
				automata = true, talalt = true;
	
	if(!talalt)
	{
		PlayerInfo[playerid][pCP] = CP_GPS;
		SetPlayerCheckpoint(playerid, PosExt(SzamlaPos[0]), 5.0);
		SCM(playerid, COL_LRED, "Nem vagy bankfiókban vagy ATMnél! (Pozíció térképen jelölve!)");
		return true;
	}
	
	if(!strcmp(parameterek, "nyit"))
	{
		if(automata)
			return SCM(playerid, COL_LRED, "Automatánál nem nyithatsz bankszámlát!");
		
		if(!PlayerInfo[playerid][pBsz])
		{
			if(PenzEgyenleg(playerid) < 50)
				return SCM(playerid, COL_LRED, "Számlanyitáshoz minimum "#COL_VKEK"50"#COL_FEHER"$ szükségeltetik!");

			new szamlaszam = UjSzamlaszam(), pinkod = UjPinkod();

			PlayerInfo[playerid][pBsz] = szamlaszam;
			PlayerInfo[playerid][pBszPenz] += 25;
			PlayerInfo[playerid][pBszPin] = pinkod;
			GiveMoney(playerid, -50);
			SendFormatMessage(playerid, COLOR_WHITE, "Gratulálunk! Sikeresen nyitottál egy új bankszámlá! Számlaszámod: "#COL_VKEK"%d", FormatNumber(szamlaszam, 0, '-'));
			SendFormatMessage(playerid, COLOR_WHITE, "Kezdõ egyenleged: "#COL_VKEK"25$"#COL_FEHER" | BankkártyaPIN: "#COL_VKEK"%d", pinkod);

		} else
			return SCM(playerid, COL_LRED, "Neked már van bankszámlád, nem nyithatsz másikat!");
	}
	else if(!strcmp(parameterek, "töröl") || !strcmp(parameterek, "torol"))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return true;
			
		SCM(playerid, COL_VZOLD, "Bankszámla és tartalma törölve!");
		PlayerInfo[playerid][pBsz] = 0;
		PlayerInfo[playerid][pBszPenz] = 0;
		PlayerInfo[playerid][pBszPin] = 0;
	}
	else if(!strcmp(parameterek, "utal"))
	{
		if(automata)
			return SCM(playerid, COL_LRED, "Automatánál nem utalhatsz!");
		
		new szamlaszam, osszeg;

		if(sscanf(params, "{s[10]}dd", szamlaszam, osszeg))
			return SCM(playerid, COL_MKEK, "Használat: /számla utal [számlaszám] [összeg]");
			
		new jatekosid = JatekosIDSzamlaszam(szamlaszam);
		if(jatekosid != NINCS)
		{
			if(osszeg < 50 || osszeg > MAX_ERTEK)
				return SCM(playerid, COL_LRED, "Az utalható minimum összeg "#COL_VKEK"50"#COL_FEHER"$!");

			if(PlayerInfo[playerid][pBszPenz] >= floatround(osszeg + (osszeg * KEZELESI_KOLTSEG)))
			{
				SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen átutaltál "#COL_VKEK"%s"#COL_FEHER" összeget "#COL_VKEK"%s"#COL_FEHER" számlájára!", FormatNumber(floatround(osszeg), 0, '.'), JatekosNev(jatekosid, true));
				SendFormatMessage(playerid, COLOR_WHITE, "Regi egyenleg: "#COL_VKEK"%s"#COL_FEHER"$", FormatNumber(floatround(PlayerInfo[playerid][pBszPenz]), 0, '.'));
				SendFormatMessage(playerid, COLOR_WHITE, "Új egyenleg: "#COL_VKEK"%s"#COL_FEHER"$ | Kezelési költség: "#COL_VKEK"%s"#COL_FEHER"$ (%d%)", FormatNumber(floatround(PlayerInfo[playerid][pBszPenz] - (osszeg + (osszeg * KEZELESI_KOLTSEG))), 0, '.'), FormatNumber(floatround(osszeg * KEZELESI_KOLTSEG), 0, '.'), (100 * KEZELESI_KOLTSEG));

				SendFormatMessage(jatekosid, COLOR_WHITE, #COL_VKEK"%s"#COL_FEHER" átutalt a számládra "#COL_VKEK"%s"#COL_FEHER"$-ot!", JatekosNev(playerid, true), FormatNumber(floatround(osszeg), 0, '.'));
				SendFormatMessage(jatekosid, COLOR_WHITE, "Regi egyenleg: "#COL_VKEK"%s"#COL_FEHER"$", FormatNumber(floatround(PlayerInfo[jatekosid][pBszPenz]), 0, '.'));
				SendFormatMessage(jatekosid, COLOR_WHITE, "Új egyenleg: "#COL_VKEK"%s"#COL_FEHER"$", FormatNumber(floatround(PlayerInfo[jatekosid][pBszPenz] + osszeg), 0, '.'));

				PlayerInfo[jatekosid][pBszPenz] += floatround(osszeg);
				PlayerInfo[playerid][pBszPenz] -= floatround(osszeg + (osszeg * KEZELESI_KOLTSEG));
				return true;
			} else {
				SFM(playerid, COL_LRED, "Nincs elegendõ pénz a tranzakció végrehajtásához! Szükséges: "#COL_VKEK"%s"#COL_FEHER"$", FormatNumber(osszeg + floatround(osszeg * KEZELESI_KOLTSEG), 0, '.'));
				return true;
			}
		} else
			return SCM(playerid, COL_LRED, "Nincs ilyen számlaszám, kérlek ellenõrizd az adatokat!");
	}
	else if(!strcmp(parameterek, "befizet"))
	{
		if(automata)
			return SCM(playerid, COL_LRED, "Automatánál nem rakhatsz be pénzt!");
			
		if(PlayerInfo[playerid][pBsz] > 0)
		{
			new osszeg;
			if(sscanf(params, "{s[10]}d", osszeg))
				return SCM(playerid, COL_MKEK, "Használat: /számla befizet [összeg]");

			if(osszeg < 50 || osszeg > MAX_ERTEK)
				return SCM(playerid, COL_LRED, "A minimum befizethetõ összeg "#COL_VKEK"50"#COL_FEHER"$!");
			if(PenzEgyenleg(playerid) < osszeg)
				return SCM(playerid, COL_LRED, "Nincs nálad ennyi készpénz!");

			SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen befizettél "#COL_VKEK"%s"#COL_FEHER"$ összeget!", FormatNumber(osszeg, 0, '.'));
			SendFormatMessage(playerid, COLOR_WHITE, "Régi egyenleged: "#COL_VKEK"%s"#COL_FEHER"$", FormatNumber(PlayerInfo[playerid][pBszPenz], 0, '.'));
			SendFormatMessage(playerid, COLOR_WHITE, "Új egyenleged: "#COL_VKEK"%s"#COL_FEHER"$", FormatNumber(PlayerInfo[playerid][pBszPenz] + osszeg, 0, '.'));
			PlayerInfo[playerid][pBszPenz] += osszeg;
			GiveMoney(playerid,-osszeg);
			return true;
		} else
			return SCM(playerid, COL_LRED, "Jelenleg nincs bankszámlád! Amennyiben nyitni szeretnél, menj el egy bankba, és használd a "#COL_VKEK"/számla nyit"#COL_FEHER" parancsot!");
	}
	else if(!strcmp(parameterek, "kifizet"))
	{
		if(PlayerInfo[playerid][pBsz] > 0)
		{
			new osszeg;

			if(sscanf(params, "{s[10]}d", osszeg))
				return SCM(playerid, COL_MKEK, "Használat: /számla kifizet [összeg]");

			if(osszeg < 50 || osszeg > MAX_ERTEK)
				return SCM(playerid, COL_LRED, "A kifizethetõ összeg minimum "#COL_VKEK"50"#COL_FEHER"$!");

			if(PlayerInfo[playerid][pBszPenz] < floatround(osszeg + (osszeg * KEZELESI_KOLTSEG)))
			{
				SCM(playerid, COL_LRED, "Nincs a bankszámládon ennyi készpénz!");
				SFM(playerid, COL_LRED, "Maximálisan kivehetõ összeg: "#COL_VKEK"%s"#COL_FEHER"$", FormatNumber(floatround(PlayerInfo[playerid][pBszPenz] - (PlayerInfo[playerid][pBszPenz] * KEZELESI_KOLTSEG)), 0, '.'));
				return true;
			}

			SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen kivettél "#COL_VKEK"%s"#COL_FEHER"$ összeget!", FormatNumber(osszeg, 0, '.'));
			SendFormatMessage(playerid, COLOR_WHITE, "Régi egyenleged: "#COL_VKEK"%s"#COL_FEHER"$", FormatNumber(PlayerInfo[playerid][pBszPenz], 0, '.'));
			SendFormatMessage(playerid, COLOR_WHITE, "Új egyenleged: "#COL_VKEK"%s"#COL_FEHER"$ | Kezelési költség: "#COL_VKEK"%s"#COL_FEHER"$ (%d%)", FormatNumber(floatround(PlayerInfo[playerid][pBszPenz] - (osszeg + (osszeg *KEZELESI_KOLTSEG))), 0, '.'), FormatNumber(floatround(osszeg * KEZELESI_KOLTSEG), 0, '.'), (100 * KEZELESI_KOLTSEG));
			//SendFormatMessage(playerid, COLOR_WHITE, "Kezelési költség: "#COL_VKEK"%s"#COL_FEHER"$ ("#KEZELESI_KOLTSEG"%)", FormatNumber(floatround(osszeg * KEZELESI_KOLTSEG), 0, '.'));
			PlayerInfo[playerid][pBszPenz] -= floatround(osszeg + (osszeg * KEZELESI_KOLTSEG));
			GiveMoney(playerid,osszeg);
			return true;
		} else
			return SendClientMessage(playerid, COLOR_WHITE, "Jelenleg nincs bankszámlád! Amennyiben nyitni szeretnél, menj el egy bankba, és használd a "#COL_VKEK"/számla nyit"#COL_FEHER" parancsot!");
	}
	else if(!strcmp(parameterek, "info"))
	{
		if(PlayerInfo[playerid][pBsz] > 0)
		{
			SendFormatMessage(playerid, COLOR_WHITE, "Bankszámlaszám: "#COL_VKEK"%s", FormatNumber(PlayerInfo[playerid][pBsz], 0, '-'));
			SendFormatMessage(playerid, COLOR_WHITE, "Bankszámla egyenleg: "#COL_VKEK"%s"#COL_FEHER"$", FormatNumber(PlayerInfo[playerid][pBszPenz], 0, '.'));
			SendFormatMessage(playerid, COLOR_WHITE, "BankkártyaPIN: "#COL_VKEK"%d", PlayerInfo[playerid][pBszPin]);
			return true;
		} else
			return SendClientMessage(playerid, COLOR_WHITE, "Jelenleg nincs bankszámlád! Amennyiben nyitni szeretnél, menj el egy bankfiókba, és használd a "#COL_VKEK"/számla nyit"#COL_FEHER" parancsot!");
	}
	return true;
}

CMD:kulcs(playerid, params[])
{
	new param[24];
	if(sscanf(params, "s[24]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /kulcs [ Jármû ]");
	
	if(!strcmp(param, "jármû", true) || !strcmp(param, "jarmu", true))
	{
		new kulcs, jatekos;
		if(sscanf(params, "{s[24]}ud", jatekos, kulcs))
			return SCM(playerid, COL_MKEK, "Használat: /kulcs jármû [Játékos] [Rendszám] | Stats-ban található rendszám");
			
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos) || playerid == jatekos)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			
		if(playerid == jatekos)
			return SCM(playerid, COL_LRED, "Cicaborsó, hány személyiséged van, hogy kölcsön adod magadnak? :D");
			
		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 3)
			return SCM(playerid, COL_LRED, "A játékos nincs a közeledben!");
		
		kulcs = JarmuID(kulcs, playerid);
		new i = NINCS, bool:van = false;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[playerid][pJarmuKulcs][i] != NINCS && PlayerInfo[playerid][pJarmuKulcs][i] == kulcs)
			{
				SFM(playerid, COL_MKEK, "Átadtad a %d számú jármûved kulcsát neki: "#COL_MKEK"%s"#COL_FEHER" | Rendszám: "#COL_MKEK"LS - %d[%d]", (i + 1), JatekosNev(jatekos), vInfo[kulcs][vID], kulcs);
				SFM(jatekos, COL_MKEK, "%s átadta neked a "#COL_MKEK"LS - %d[%d]"#COL_FEHER" rendszámú jármûve kulcsait.", JatekosNev(playerid), vInfo[kulcs][vID], kulcs);
				Cselekves(playerid, "átadta valakinek a jármûve kulcsait..", 1);
				PlayerInfo[jatekos][pJarmuKolcson] = kulcs;
				van = true;
				break;
			}
		}
		
		if(!van)
			return SCM(playerid, COL_LRED, "Nincs ilyen rendszámú jármûved!");
	}
	return true;
}

CMD:motor(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Csak jármûben használhatod!");

	if(GetPlayerVehicleSeat(playerid))
		return SCM(playerid, COL_LRED, "Csak sofõrként tudod használni!");
	
	new
		kocsi = GetPlayerVehicleID(playerid),
		jarmuidje = JarmuID(kocsi, playerid);
		
	if(IsABicikli(vInfo[jarmuidje][vModel]))
		return SCM(playerid, COL_LRED, "Ez egy bicikli :D Nincs benne motor!");
		
	if(!vInfo[jarmuidje][vUzemanyag])
		return SCM(playerid, COL_LRED, "A jármûbõl kifogyott az üzemanyag!");
		
	if(PlayerInfo[playerid][pAutoTiltas] > 0)
	{
		SFM(playerid,COL_LRED,"Nem használhatsz jármûvet még %d percig",PlayerInfo[playerid][pAutoTiltas]/60);
		return 1;
	}
		
	if(PlayerInfo[playerid][pmotortinditja])
		return SCM(playerid, COL_LRED, "A jármû jelenleg is indítás alatt áll!");
		
	if(GetJarmu(kocsi, KOCSI_MOTOR) == 1)
	{
		SetJarmu(kocsi, KOCSI_MOTOR, 0);
		SendClientMessage(playerid, COLOR_LIGHTRED, "A jármû leállítva!");
		/*Cselekves(playerid, "leállította a jármûvét", 1);*/
		vInfo[jarmuidje][vMotorelinditva] = false;
		
	} else {
	
		if(JarmuKulcs(playerid, jarmuidje))
		{
			new kocsiserules, ido, Float:kocsielet;
			GetVehicleHealth(kocsi, kocsielet);
			if((100 - (((kocsielet - 350) / 650)) * 100) > 100)
				return SCM(playerid, COL_LRED, "A jármû állapota nem teszi lehetõvé a motor indítását!");
				
			kocsiserules = 1000 - floatround(kocsielet);
			ido = 1000 + (kocsiserules * 5);
			SendClientMessage(playerid, COLOR_GREEN, "Jármû indítás...");
			SetTimerEx("JarmuInditas", ido, false, "dd", playerid, kocsi);
			PlayerInfo[playerid][pmotortinditja] = true;
		}
		else
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Ehhez a jármûhöz nincs kulcsod!");
	}
	return true;
}

/*CMD:hulla(playerid, params[])
{
	new fparams[24];
	if(sscanf(params, "s[24]{}", fparams))
	{
		if(Admin(playerid, 1)) SCM(playerid, COL_MKEK, "Használat: /hulla [ Megvizsgál / Bepakol / Motoz / Lead / Elvesz / Töröl ]");
		else SCM(playerid, COL_MKEK, "Használat: /hulla [ Megvizsgál / Bepakol / Motoz / Lead / Elvesz ]");
		return true;
	}
		
	if(!strcmp(fparams, "megvizsgál") || !strcmp(fparams, "megvizsgal"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSMD)
			return SCM(playerid, COL_LRED, "Te nem vagy a mentõszolgálat vagy a rendõrség tagja!");
			
		if(PlayerInfo[playerid][pVizsgal])
			return SCM(playerid, COL_LRED, "Egy vizsgálás már folyamatban van!");
			
		if(IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COL_LRED, "Jármûbõl nem tudod megvizsgálni a hullát!");
			
		new hulla = GetClosestHulla(playerid);
		if(GetDistanceToHulla(playerid, hulla) < 5.0)
		{
			if(HullaInfo[hulla][Hvw] != GetPlayerVirtualWorld(playerid))
				return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");
				
			ApplyPlayerAnimation(playerid, "BOMBER","BOM_Plant_Loop", 4.0, 1, 0, 0, 0, 0, 1);
			ApplyPlayerAnimation(playerid, "BOMBER","BOM_Plant_Loop", 4.0, 1, 0, 0, 0, 0, 1);
			SetTimerEx("VizsgalasVege", 15000, false, "dd", playerid, hulla);
			SCM(playerid, COL_MKEK, "Elkezdtél nyomokat keresni a hullán, amibõl rájöhetsz ki is valójában!");
			PlayerInfo[playerid][pVizsgal] = true;
			Cselekves(playerid, "elkezdte megvizsgálni a hullát", 1, false);
			return true;
			
		} else
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");
	}
	else if(!strcmp(fparams, "töröl") || !strcmp(fparams, "torol"))
	{
		if(!Admin(playerid, 1))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
		new hulla = GetClosestHulla(playerid);

		if(GetDistanceToHulla(playerid, hulla) < 5.0)
		{
			HullaTorol(hulla);
			SCM(playerid, COL_VZOLD, "Sikeresen törölted a közeledben lévõ hullát!");
			return true;
			
		} else
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");
	}
	else if(!strcmp(fparams, "bepakol"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSMD)
			return SCM(playerid, COL_LRED, "Te nem vagy a mentõszolgálat vagy a rendõrség tagja!");
			
		new hulla = GetClosestHulla(playerid);
		if(GetDistanceToHulla(playerid, hulla) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");
			
		new kocsi = GetClosestVehicle(playerid);
		if(HullaInfo[hulla][Hvw] != GetPlayerVirtualWorld(playerid))
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");
	
		if(GetDistanceToVehicle(playerid, kocsi) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
		
		new vid = JarmuID(kocsi, playerid);
			
		if((vInfo[vid][vModel] != 442) && (vInfo[vid][vModel] != 416))
			return SCM(playerid, COL_LRED, "Ebbe a jármûbe nem tudod bepakolni!");
			
		if(vInfo[vid][vHulla] >= 2)
			return SCM(playerid, COL_LRED, "A jármûbe nem fér több hulla, elõtte add le a meglévõket!");
			
		vInfo[vid][vHulla]++;
		HullaTorol(hulla);
		SFM(playerid, COL_LRED, "Bepakoltál egy hullát a jármûbe. Jelenleg "#COL_MKEK"%d"#COL_FEHER" van benne.", vInfo[vid][vHulla]);
	}
	else if(!strcmp(fparams, "motoz"))
	{
		new hulla = GetClosestHulla(playerid);
		if(IsPlayerInAnyVehicle(playerid)) 
			return SCM(playerid, COL_LRED, "Jármûbõl akarod átnézni a hullát?");
			
		if(HullaInfo[hulla][Hvw] != GetPlayerVirtualWorld(playerid))
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");
				
		if(GetDistanceToHulla(playerid, hulla) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben hulla!");
			
		SendClientMessage(playerid, COLOR_ORANGE, "======= [ Holttestnél lévõ értékek ] =======");
		SendFormatMessage(playerid, COLOR_WHITE, "Heroin: "#COL_MKEK"%d"#COL_FEHER"g | Kokain: "#COL_MKEK"%d"#COL_FEHER"g | Material: "#COL_MKEK"%d"#COL_FEHER"db",HullaInfo[hulla][HHeroin], HullaInfo[hulla][HKokain], HullaInfo[hulla][HMati]);
		SendFormatMessage(playerid, COLOR_WHITE, "Marihuana: "#COL_MKEK"%d"#COL_FEHER"g | Pénz: "#COL_MKEK"%s"#COL_FEHER"$",HullaInfo[hulla][HMariska], FormatNumber( HullaInfo[hulla][HPenz], 0, ',' ));
		SendClientMessage(playerid, COLOR_YELLOW, "(( Ha elszeretnéd venni az értéktárgyakat, használd a /hulla elvesz parancsot! ))");
		Cselekves(playerid, "átkutatott egy holttestet", 1, false);
	}
	else if(!strcmp(fparams, "lead"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSMD)
			return SCM(playerid, COL_LRED, "Te nem vagy a mentõszolgálat tagja!");
		
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1177.910, -1308.433, 13.560))//LS kórház 
		{
			if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
			{
				PlayerInfo[playerid][pCP] = CP_GPS;
				SetPlayerCheckpoint(playerid, 1177.910, -1308.433, 13.560, 5.0);
			}
			SCM(playerid, COL_LRED, "Nem vagy a Los Santos-i Kórháznál! (GPS-en jelölve)");
			return true;
		}
		
		new kocsi = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, kocsi) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			
		new vid = JarmuID(kocsi, playerid);
		if((vInfo[vid][vModel] != 442) && (vInfo[vid][vModel] != 416))
			return SCM(playerid, COL_LRED, "Ebbe a jármûbe nem tudod bepakolni!");
		
		if(!vInfo[vid][vHulla])
			return SCM(playerid, COL_LRED, "A jármûben nincs leadható hulla!");
			
		new penz = (vInfo[vid][vHulla] * 6890);
		SFM(playerid, COL_VZOLD, "Sikeresen leadtál "#COL_MKEK"%d"#COL_FEHER" holttestet ezért "#COL_MKEK"%s"#COL_FEHER"$ jóváírásra került a bankszámládon!", vInfo[vid][vHulla], FormatNumber(penz, 0, ','));
		PlayerInfo[playerid][pBszPenz] += penz;
		vInfo[vid][vHulla] = 0;
	}
	else if(!strcmp(fparams, "elvesz") || !strcmp(fparams, "kirabol"))
	{
		new param[24];
		if(sscanf(params, "{s[24]}s[24]", param))
			return SCM(playerid, COL_MKEK, "Használat: /hulla elvesz [ Material / Heroin / Marihuana / Kokain / Pénz ]");
			
		if(IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COL_LRED, "Jármûbõl nem használható!");
			
		new hulla = GetClosestHulla(playerid);
		
		if(HullaInfo[hulla][Hvw] != GetPlayerVirtualWorld(playerid) || GetDistanceToHulla(playerid, hulla) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben holttest!");
			
		if(!strcmp(param, "material") || !strcmp(param, "materiál"))
		{
			new mats = PlayerInfo[playerid][pMaterial] + HullaInfo[hulla][HMati];
			if(mats > P_MAX_MATERIAL)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi!");
			
			if(!HullaInfo[hulla][HMati])
				return SCM(playerid, COL_LRED, "Nincs nála materiál!");

			PlayerInfo[playerid][pMaterial] += HullaInfo[hulla][HMati];
			HullaInfo[hulla][HMati] = 0;
			Cselekves(playerid,  "elvett némi materialt a közelben lévõ holttesttõl", 0);
			return true;
		}
		else if(!strcmp(param, "heroin"))
		{
			new heroin = PlayerInfo[playerid][pHeroin] + HullaInfo[hulla][HHeroin];
			if(heroin > P_MAX_HEROIN)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi!");
				
			if(!HullaInfo[hulla][HHeroin])
				return SCM(playerid, COL_LRED, "Nincs nála heroin!");

			PlayerInfo[playerid][pHeroin] += HullaInfo[hulla][HHeroin];
			HullaInfo[hulla][HHeroin] = 0;
			Cselekves(playerid,  "elvett némi heroint a közelben lévõ holttesttõl", 0);
			return true;
		}
		else if(!strcmp(param, "marihuana") || !strcmp(param, "marihuána"))
		{
			new mariska = PlayerInfo[playerid][pMarihuana] + HullaInfo[hulla][HMariska];
			if(mariska > P_MAX_MARIHUANA)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi!");
				
			if(!HullaInfo[hulla][HMariska])
				return SCM(playerid, COL_LRED, "Nincs nála marihuana!");

			PlayerInfo[playerid][pMarihuana] += HullaInfo[hulla][HMariska];
			HullaInfo[hulla][HMariska] = 0;
			Cselekves(playerid,  "elvett némi marihuanát a közelben lévõ holttesttõl", 0);
			return true;
		}
		else if(!strcmp(param, "kokain"))
		{
			new kokain = PlayerInfo[playerid][pKokain] + HullaInfo[hulla][HKokain];
			if(kokain > P_MAX_KOKAIN)
				return SCM(playerid, COL_LRED, "Nem fér el nálad ennyi!.");
			
			if(!HullaInfo[hulla][HKokain])
				return SCM(playerid, COL_LRED, "Nincs nála kokain!");

			PlayerInfo[playerid][pKokain] += HullaInfo[hulla][HKokain];
			HullaInfo[hulla][HKokain] = 0;
			Cselekves(playerid,  "elvett némi kokaint a közelben lévõ holttesttõl", 0);
			return true;
		}
		else if(!strcmp(param, "pénz") || !strcmp(param, "penz"))
		{
			if(!HullaInfo[hulla][HPenz])
				return SCM(playerid, COL_LRED, "Nincs nála pénz!");
				
			PlayerInfo[playerid][ppenz] += HullaInfo[hulla][HPenz];
			HullaInfo[hulla][HPenz] = 0;
			Cselekves(playerid,  "elvett némi pénzt a közelben lévõ holttesttõl", 0);
			return true;
		}
	}
	return true;
}
*/
CMD:eldob(playerid, params[])
{
	if(PlayerInfo[playerid][pjail] != 0) return 1;
	if(isnull(params))
	{
		go_help:
		SCM(playerid, COL_MKEK, "Használat: /eldob [ "#COL_MKEK"Tárgyak"#COL_FEHER" ]");
		SCM(playerid, COL_MKEK, "[Tárgyak]: Fegyver, Materiál, Marihuána Kokain, Heroin, Készpénz");
		SCM(playerid, COL_MKEK, "[Tárgyak]: Telefon, GPS, Táska, Maszk");
		return true;
	}
	if(Bortonben(playerid) > 0)
		return SCM(playerid, COL_LRED, "Börtönben nem használhatod!");
	
	new param[24], db = 0;
	sscanf(params, "s[24]D(0){}", param, db);
	
	if(!strcmp(params, "fegyver", true, 7))
	{
		new loszer;
		if(sscanf(params, "{s[7]}d", loszer))
			return SCM(playerid, COL_MKEK, "Használat: /eldob fegyver [lõszer = 0(összes)]");
		
		if(!PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Nincs a kezedben fegyver!");
			
		if(PlayerInfo[playerid][pDuty][0] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND)
			return SCM(playerid, COL_LRED, "Cicaborsó, nem ezért kapsz fegyvert szolgálatban :D");
			
		if(loszer > 9000 || loszer < 0)
			return SCM(playerid, COL_LRED, "Egyszerre maximum 9000 és minimum 0 értéket dobhatsz el!");
		
		if(loszer < 0 || loszer > GetPlayerAmmo(playerid))
			return SFM(playerid, COL_MKEK, "A lõszer mennyiség "#COL_FEHER"0 és "#COL_MKEK"%d "#COL_FEHER"között kell lennie!", GetPlayerAmmo(playerid));

		/*
		new wep;
		GetPlayerWeaponData(playerid, aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ], wep, PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);

		if( loszer == 0 )
		{
			PlayerInfo[playerid][pFegyverek][ aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ] ] = 0;
			PlayerInfo[playerid][pToltenyek][ aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ] ] = 0;
			PlayerInfo[playerid][pFegyver] = 0;
			ResetPlayerWeapons(playerid);
		} else {
			PlayerInfo[playerid][pToltenyek][ aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ] ] -= loszer;
		}
		
		*/
		
		TargyEldob(playerid, ELDOB_FEGYVER, loszer);
		return true;
	}
	else if(!strcmp(param, "material", true) || !strcmp(param, "materiál", true) || !strcmp(param, "mati", true))
	{
		if(!db)
			return SCM(playerid, COL_MKEK, "Használat: /eldob materiál [Mennyit]");
		
		if(PlayerInfo[playerid][pMaterial] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi materiál!");
			
		if(db > 15000000 || db < 5)
			return SCM(playerid, COL_LRED, "Egyszerre maximum 15 000 000 és minimum 5 értéket dobhatsz el!");
		
		TargyEldob(playerid, ELDOB_MATERIAL, (db > P_MAX_MATERIAL ? P_MAX_MATERIAL : db));
		return true;
	}
	else if(!strcmp(param, "heroin", true))
	{
		if(!db)
			return SCM(playerid, COL_MKEK, "Használat: /eldob heroin [Mennyit]");
		
		if(PlayerInfo[playerid][pHeroin] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi heroin!");
			
		if(db > 15000000 || db < 5)
			return SCM(playerid, COL_LRED, "Egyszerre maximum 15 000 000 és minimum 5 értéket dobhatsz el!");
		
		TargyEldob(playerid, ELDOB_HEROIN, (db > P_MAX_HEROIN ? P_MAX_HEROIN : db));
		return true;
	}
	else if(!strcmp(param, "kokain", true))
	{
		if(!db)
			return SCM(playerid, COL_MKEK, "Használat: /eldob kokain [Mennyit]");
		
		if(PlayerInfo[playerid][pKokain] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi kokain!");
			
		if(db > 15000000 || db < 5)
			return SCM(playerid, COL_LRED, "Egyszerre maximum 15 000 000 és minimum 5 értéket dobhatsz el!");
		
		TargyEldob(playerid, ELDOB_KOKAIN, (db > P_MAX_KOKAIN ? P_MAX_KOKAIN : db));
		return true;
	}
	else if(!strcmp(param, "marihuana", true) || !strcmp(param, "marihuána", true) || !strcmp(param, "mariska", true))
	{
		if(!db)
			return SCM(playerid, COL_MKEK, "Használat: /eldob marihuána [Mennyit]");
		
		if(PlayerInfo[playerid][pMarihuana] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi marihuána!");
			
		if(db > 15000000 || db < 5)
			return SCM(playerid, COL_LRED, "Egyszerre maximum 15 000 000 és minimum 5 értéket dobhatsz el!");
		
		TargyEldob(playerid, ELDOB_MARI, (db > P_MAX_MARIHUANA ? P_MAX_MARIHUANA : db));
		return true;
	}
	else if(!strcmp(param, "készpénz", true) || !strcmp(param, "keszpenz", true))
	{
		if(!db)
			return SCM(playerid, COL_MKEK, "Használat: /eldob készpénz [Mennyit]");
		
		if(PlayerInfo[playerid][ppenz] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi készpénz!");
			
		if(db > 60000 || db < 5)
			return SCM(playerid, COL_LRED, "Egyszerre maximum 60000$ és minimum 5$ értéket dobhatsz el!");
		
		TargyEldob(playerid, ELDOB_PENZ, db);
		return true;
	}
	else if(!strcmp(param, "telefon", true) || !strcmp(param, "mobil", true))
	{
		//if(!PlayerInfo[playerid][ptelefonszam])
		if(PlayerInfo[playerid][ptelefonszam]<1)
			return SCM(playerid, COL_LRED, "Neked nincs is telefonod!");
		
		SCM(playerid, COL_VZOLD, "Eldobtad a telefonod!");
		Cselekves(playerid, "eldobta a telefonját", 1);
		PlayerInfo[playerid][ptelefonszam] = 0;
		return true;
	}
	else if(!strcmp(param, "maszk", true))
	{
		if(!PlayerInfo[playerid][pMaszk])
			return SCM(playerid, COL_LRED, "Neked nincs maszkod!");
		
		RemovePlayerAttachedObject(playerid, SLOT_MASZK);
		SCM(playerid, COL_VZOLD, "Eldobtad a maszkod!");
		Cselekves(playerid, "eldobta a maszkját", 1);
		PlayerInfo[playerid][pMaszk] = 0;
		return true;
	}
	else if(!strcmp(param, "táska", true) || !strcmp(param, "taska", true))
	{
		if(PlayerInfo[playerid][pHatizsak] == 0)
			return SCM(playerid, COL_LRED, "Neked nincs táskád!");
	
		if(PlayerInfo[playerid][pMegerosites] != playerid)
		{
			PlayerInfo[playerid][pMegerosites] = playerid;
			SCM(playerid, COL_LRED, "Biztos, hogy el szeretnéd dobni a táskád? ((Jelenleg törlõdik)) Ha igen, írd be mégegyszer!");
			return true;
		}
		
		PlayerInfo[playerid][pMegerosites] = NINCS;
		
		SCM(playerid, COL_VZOLD, "Eldobtad a táskád!");
		Cselekves(playerid, "eldobta a táskáját", 1);
		
		PlayerInfo[playerid][pHatizsak] = 0;
		RemovePlayerAttachedObject(playerid, SLOT_HATIZSAK);
		PlayerInfo[playerid][pBMennyi] = 0;
		return true;
	}
	else if(!strcmp(param, "gps", true))
	{
		if(!PlayerInfo[playerid][pGPSV])
			return SCM(playerid, COL_LRED, "Neked nincs is GPS lokátorod!");
		
		SCM(playerid, COL_VZOLD, "Eldobtad a GPS lokátorod!");
		Cselekves(playerid, "eldobta a GPS lokátorát", 1);
		PlayerInfo[playerid][pGPSV] = 0;
		return true;
		
	} else {
		
		params[0] = EOS;
		param[0] = EOS;
		goto go_help;
	}
	return true;
}

CMD:felvesz(playerid, params[])
{
	#pragma unused params
	new did = GetNearestObject(playerid);
	if(did == NINCS)
		return SCM(playerid, COL_LRED, "Nincs a közeledben felvehetõ tárgy!");
	
	TargyFelvesz(playerid, did, dInfo[did][dTipus]);
	return true;
}

CMD:fegyver(playerid, params[])
{
	if(Bortonben(playerid) > 0 && !Admin(playerid, FOADMIN_SZINT))
		return SCM(playerid, COL_LRED, "Börtönben nem használhatod!");
		
	if(PlayerInfo[playerid][pjatekosszint] < 3 && !PlayerInfo[playerid][pPaintBall][0])
		return SCM(playerid, COL_LRED, "Fegyverhasználat csak 3 szinttõl érhetõ el(Kivétel PaintBallban)!");
		
	new param[32], param2[32];
	if(sscanf(params, "s[32]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /f(egyver) [ Elõvesz(E) / Elrak(K) / Újratölt(R) ]");
		
	if(egyezik(param, "elrak") || egyezik(param, "k"))
	{
		if(!PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Nincs a kezedben fegyver!");

		/*Cselekves(playerid, "elrakta a fegyverét", 1);*/
		SCM(playerid, COL_MKEK, "Elraktad a fegyvered!");
		
		new wep;
		GetPlayerWeaponData(playerid, aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ], wep, PlayerInfo[playerid][pToltenyek][aWeaponSlotok[PlayerInfo[playerid][pFegyver]]]);
		
		PlayerInfo[playerid][pFegyver] = 0;
		
		ResetPlayerWeapons(playerid);
		SetPlayerAttachedWeapon(playerid);
		
		return true;
	}
	else if(egyezik(param, "elõvesz") || egyezik(param, "elovesz") || egyezik(param, "e"))
	{
		if(sscanf(params, "{s[32]}s[32]", param2))
			return SCM(playerid, COL_MKEK, "Használat: /F(egyver) Elõvesz [Fegyver Név / Fegyver ID]");
		
		if(PlayerInfo[playerid][pMeghalt] || PlayerInfo[playerid][pBilincselve])
			return SCM(playerid, COL_LRED, "Jelenleg nem vehetsz elõ fegyvert!");

		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			return SCM(playerid, COL_LRED, "Vezetõként nem vehetsz elõ fegyvert!");
			
		if(PlayerInfo[playerid][pFegyverTiltas] > 0)
		{
			SFM(playerid,COL_LRED,"Még %d percig nem vehetsz elõ fegyver",PlayerInfo[playerid][pFegyverTiltas]/60);
			return 1;
		}

		if(PlayerInfo[playerid][pFegyver])
		{
			SCM(playerid, COL_LRED, "Már van a kezedben fegyver!");
			return true;
		}
		
		new slot, id, fegyo, ammo;
		if(IsNumeric(param2))
		{
			id = strval(param2);
			
			if(id < 1 || id >= sizeof(aWeaponNames))
				return SCM(playerid, COL_LRED, "Nincs ilyen fegyver!");
		} else {
			id = GetGunID(param2);
			
			if(id == 0)
				return SCM(playerid, COL_LRED, "Nincs ilyen fegyver!");
		}
		
		slot = GetGunSlot(id);
		fegyo = PlayerInfo[playerid][pFegyverek][slot];
		ammo = PlayerInfo[playerid][pToltenyek][slot];

		if(fegyo != id || ammo == 0)
			return SCM(playerid, COL_LRED, "Nincs ilyen fegyvered!");

		if(IsPlayerInAnyVehicle(playerid) && (id == 22 || id == 23 || id == 24))
			return SCM(playerid, COL_LRED, "Ezt nem veheted elõ jármûben!");
		
		if(id == PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Ezt a fegyvert már elõvetted!");
		
		SCM(playerid, COL_VZOLD, "Elõvettél egy fegyvert!");
		/*Cselekves(playerid, "elõvett egy fegyvert", 1);*/
		
		PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
		GivePlayerWeapon(playerid, fegyo, ammo);
		PlayerInfo[playerid][pFegyver] = fegyo;
		SetPlayerAttachedWeapon(playerid);
		
		if(id >= 24 && id <= 34)
			LoopingAnim(playerid, "UZI", "UZI_reload", 4.0, 0, 0, 0, 0, 0);
	}
	else if(egyezik(param, "újratölt") || egyezik(param, "újra") || egyezik(param, "r"))
	{
		if(!PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Nincs a kezedben fegyver!");
			
		if(PlayerInfo[playerid][pMeghalt] || PlayerInfo[playerid][pBilincselve])
			return SCM(playerid, COL_LRED, "Jelenleg nem töltheted újra a fegyvert!");
		
		new wep, ammo;
		
		GetPlayerWeaponData(playerid, aWeaponSlotok[PlayerInfo[playerid][pFegyver]], wep, ammo);
		if(ammo < 1)
			return SCM(playerid, COL_LRED, "Nincs elég lõszer!");

		/*Cselekves(playerid, "újratöltötte a fegyverét", 1);*/
		SCM(playerid, COL_MKEK, "Fegyver újratöltve!");
		
		PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
		GiveWeapon(playerid, PlayerInfo[playerid][pFegyver], 0, true);
		
		if(24 <= PlayerInfo[playerid][pFegyver] <= 34)
			LoopingAnim(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0);
		return true;
	}
	return true;
}

CMD:duty(playerid, params[])
{
	#pragma unused params
	if(!PlayerInfo[playerid][pFrakcio])
		return SCM(playerid, COL_LRED, "Nem vagy egyik szervezet tagja sem!");
	
	new skin = PlayerInfo[playerid][pskin];
	if(!PlayerInfo[playerid][pDuty][0])
	{
		if(PlayerInfo[playerid][pDuty][1] > gettime())
			return SFM(playerid, COL_LRED, "Nemrégiben léptél szolgálatba! Még várnod kell "#COL_MKEK"%d"#COL_FEHER" percet!", ((PlayerInfo[playerid][pDuty][1] - gettime()) / 60));
		if(!PlayerInfo[playerid][pDutySkin])//Ha nincs admin álltal beállított duty skine
		{
			new i = NINCS;
			for(;++i < sizeof(FrakcioSkinek);)
				if(FrakcioSkinek[i][0] == PlayerInfo[playerid][pFrakcio])
					skin = FrakcioSkinek[i][ PlayerInfo[playerid][prang] ];
		} else
			skin = PlayerInfo[playerid][pDutySkin];
	}
	
	switch( PlayerInfo[playerid][pFrakcio] )
	{
		case FRAKCIO_LSPD: //rendõrség
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1276.2474,-32.5700,1492.9459) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1862.3383,-1721.9015,1206.1860) && !IsPlayerInRangeOfPoint(playerid, 5.0, 197.1813,168.3225,1003.0234))//LSPD bázis duty hely
			{
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}
		
			if(!PlayerInfo[playerid][pDuty][0])
			{
				PlayerInfo[playerid][pDuty][0] = true;
				SetArmour(playerid, MAX_ARMOUR);
				SCM(playerid, COL_LRED, "Ne felejsd el a felszerelésed felvenni! (( /felszereles ))");
				SetPlayerColor(playerid, 0x8d8dffAA & 0xFFFFFF00);
				new sr[128];
				format(sr, sizeof(sr), "HQ: %s szolgálatba lépett.", JatekosNev(playerid, true));
				FrakcioUzenet(COLOR_RADIO, PlayerInfo[playerid][pFrakcio], sr);
				foreach(Player,p)
				{
					SetPlayerMarkerForPlayer(p, playerid, 00);
				}
			}
			else 
			{
			
				PlayerInfo[playerid][pDuty][0] = false;
				SetArmour(playerid, 0.0);
				DeleteWeapon(playerid);
				//SetPlayerColor(playerid,COLOR_INVISIBLE);
			}
		}
		case FRAKCIO_SZERELO: //Szerelõk
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 105.762, -339.735, 1.793))
			{
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}
			if(SzereloDuty[playerid] == false)
			{
				SzereloDuty[playerid] = true;
				SCM(playerid,COL_MKEK,"Át öltöztél!");
				SetPlayerSkin(playerid,50);
				SetPlayerColor(playerid, 0x14cf27AA & 0xFFFFFF00);
				/*foreach(Player,p)
				{
					SetPlayerMarkerForPlayer(p, playerid, 00);
				}*/
				return true;
			}
			if(SzereloDuty[playerid] == true)
			{
				SzereloDuty[playerid] = false;
				SCM(playerid,COL_MKEK,"Vissza öltöztél!");
				SetPlayerSkin(playerid,PlayerInfo[playerid][pskin]);
				//SetPlayerColor(playerid,COLOR_INVISIBLE);
				return 1;
			}
		}
		case FRAKCIO_KATONA: //special
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 240.593, 1853.968, 8.757))//LSFD bázis duty hely
			{
				if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
				{
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, 240.593, 1853.968, 8.757, 5.0);
				}
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}
			
			SCM(playerid, COL_MKEK, "Special Force felszerelések: /special");
		}
		case FRAKCIO_LSFD: //tûzoltóság
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1335.769, -1527.377, 13.546))//LSFD bázis duty hely
			{
				if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
				{
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, 1335.769, -1527.377, 13.546, 5.0);
				}
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}
		
			if(!PlayerInfo[playerid][pDuty][0])
			{
				PlayerInfo[playerid][pDuty][0] = true;
				SetArmour(playerid, MAX_ARMOUR);
				GiveWeapon(playerid, 42, 10000, false, true);//porral oltó
				GiveWeapon(playerid, 6, 1, false, true);//ásó
				
			} else {
				
				PlayerInfo[playerid][pDuty][0] = false;
				DeleteWeapon(playerid);
				SetArmour(playerid, 0.0);
			}
		}
		case FRAKCIO_LSMD: //mentõsök
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1083.446, -1333.996, 13.670) && !IsPlayerInRangeOfPoint(playerid, 5.0, 1104.553, -1345.744, 20.181))//LSMD bázis duty hely
			{
				if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
				{
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, 1083.446, -1333.996, 13.670, 5.0);
				}
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}
		
			if(!PlayerInfo[playerid][pDuty][0])
			{
				PlayerInfo[playerid][pDuty][0] = true;
				GiveWeapon(playerid, 41, 3000, false, true);//spray
				PlayerInfo[playerid][pKotszer] = P_MAX_KOTSZER;
				SetPlayerColor(playerid, 0xd93f3fAA & 0xFFFFFF00);
				/*foreach(Player,p)
				{
					SetPlayerMarkerForPlayer(playerid, p, 00);
				}*/
			} else {
				
				PlayerInfo[playerid][pDuty][0] = false;
				DeleteWeapon(playerid);
				//SetPlayerColor(playerid, COLOR_INVISIBLE);
			}
		}
		case FRAKCIO_KORMANY: //kormány
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 897.731, 38.162, 988.213))//önkori inti
			{
				if(PlayerInfo[playerid][pvirtualworld] == 1003)
				{
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, 897.731, 38.162, 988.213, 5.0);
				}
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}
		
			if(!PlayerInfo[playerid][pDuty][0])
			{
				PlayerInfo[playerid][pDuty][0] = true;
				
				if(PlayerInfo[playerid][prang] == 1)
				{
					SetArmour(playerid, MAX_ARMOUR);
					GiveWeapon(playerid, 24, 50, false, true);//deagle
				}
				if(PlayerInfo[playerid][prang] == 3)
				{
					SetArmour(playerid, MAX_ARMOUR);
					GiveWeapon(playerid, 24, 80, false, true);//deagle
					GiveWeapon(playerid, 29, 150, false, true);//mp5
				}
				if(PlayerInfo[playerid][prang] == 4)
				{
					SetArmour(playerid, MAX_ARMOUR);
					GiveWeapon(playerid, 3, 1, false, true);//rendbot
					GiveWeapon(playerid, 24, 80, false, true);//deagle
				}
				
			} else {
				
				PlayerInfo[playerid][pDuty][0] = false;
				DeleteWeapon(playerid);
			}
		}
		case FRAKCIO_FBI: //ATF - NAV
		{
			if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1113.253, -1778.667, 13.793))//kinti duty
			{
				if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
				{
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, 1113.253, -1778.667, 13.793, 5.0);
				}
				SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
				return true;
			}
		
			if(!PlayerInfo[playerid][pDuty][0])
			{
				PlayerInfo[playerid][pDuty][0] = true;
				SetArmour(playerid, MAX_ARMOUR);
			
				//GiveWeapon(playerid, fegyver, loszer, bool:ujratolt = false, bool:set = false)
				/*---- ATF fegyver beállítás ----*/
				GiveWeapon(playerid, 3, 1, false, true);//rendbot
				GiveWeapon(playerid, 41, 3000, false, true);//spray
				if(PlayerInfo[playerid][prang] == 1)
				{
					GiveWeapon(playerid, 22, 80, false, true);//9mm
				}
				if(PlayerInfo[playerid][prang] >= 2)
				{
					GiveWeapon(playerid, 24, 80, false, true);//deagle
				}
				if(PlayerInfo[playerid][prang] >= 4)
				{
					GiveWeapon(playerid, 29, 250, false, true);//MP5
				}
				if(PlayerInfo[playerid][prang] >= 7)
				{
					GiveWeapon(playerid, 31, 100, false, true);//M4
				}
				
			} else {
			
				PlayerInfo[playerid][pDuty][0] = false;
				SetArmour(playerid, 0.0);
				DeleteWeapon(playerid);
			}
		}
		default:
			return SCM(playerid, COL_LRED, "Neked nem kell szolgálatba lépned!");
	}
	
	//Utcai, szolgálati skin állítás
	SetHealth(playerid, MAX_HP);
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		SetSkin(playerid, skin, false);
	
	if(PlayerInfo[playerid][pDuty][0])
	{
		SCM(playerid, COL_VZOLD, "Szolgálatba léptél!");
		PlayerInfo[playerid][pDuty][1] = (gettime() + (3 * 60));
		
	} else {
		
		SCM(playerid, COL_VZOLD, "Kiléptél a szolgálatból!");
		DeleteWeapon(playerid);
	}
	return true;
}

CMD:utzar(playerid, params[])
{
	#pragma unused params
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");
	
	if(Utzarak[playerid][uVan])
		return SCM(playerid, COL_LRED, "Már raktál le útzárat!");
	
	new Float:pPosok[4];	
	GetPlayerPos(playerid, PosExt(pPosok));
	GetXYInFrontOfPlayer(playerid, pPosok[0], pPosok[1], 2.0);
	GetPlayerFacingAngle(playerid, pPosok[3]);

	new felirat[64];
	format(felirat, 64, "[Útzár - Szögesdrót]\n%s", JatekosNev(playerid));
	Utzarak[playerid][uText] = CreateDynamic3DTextLabel(felirat, COLOR_LIGHTBLUE, PosExt(pPosok)+0.5, 50.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, NINCS, NINCS, NINCS, 50.0);
	
	pPosok[2] -= 0.85;
	if(pPosok[3] >= 270.0) pPosok[3] -= 90.0;
	else pPosok[3] += 90.0;

	new Float:dis1 = floatsin(-pPosok[3], degrees), Float:dis2 = floatcos(-pPosok[3], degrees);

	Utzarak[playerid][uVan] = true;
	//Utzarak[playerid][uTipus] = UTZAR_KICSI;
	Utzarak[playerid][uHely][0] = pPosok[0];
	Utzarak[playerid][uHely][1] = pPosok[1];
	Utzarak[playerid][uHely][2] = pPosok[2];
	Utzarak[playerid][uHely][3] = pPosok[3];
			
	Utzarak[playerid][uObject] = CreateDynamicObject(2899, PosExt(pPosok), 0.0, 0.0, pPosok[3]);
	Utzarak[playerid][uPickup][0] = CreateDynamicPickup(1007, 14, pPosok[0]+(1.5*dis1), pPosok[1]+(1.5*dis2), pPosok[2], 0);
	Utzarak[playerid][uPickup][1] = CreateDynamicPickup(1007, 14, pPosok[0]-(1.5*dis1), pPosok[1]-(1.5*dis2), pPosok[2], 0);
			
	Streamer_Update(playerid);
	
	SetTimerEx("Timer", 30000, false, "iiii", playerid, T_UTZAR, NINCS, NINCS);
	
	SCM(playerid, COL_MKEK, "Útzár sikeresen lerakva!");
	Cselekves(playerid, "lerakott egy szögesdrótot");
			
	UnFreeze(playerid);
	ClearAnimations(playerid);
			
	return 1;
}

CMD:hack(playerid, params[])
{
	if(!IsJob(playerid, MUNKA_HACK))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /hack [ Lézer / Hátsóajtó ]");
	
	if(!strcmp(params, "Lézer", true) || !strcmp(params, "Lezer", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 1.5, 2319.5166,-6.9896,22.8317))
			return SCM(playerid, COL_LRED, "Nem vagy a kezelõfelületnél!");
		new i = -1;
		for(;++i < 5;)
			PlayerTextDrawShow(playerid, SzamJegy[playerid][i]);
		
		i = -1;
		for(;++i < 3;)
			PlayerTextDrawShow(playerid, Hatter[playerid][i]);
		
		i = -1;
		for(;++i < 5;)
			PlayerTextDrawShow(playerid, Elerte[playerid][i]);
		
		TogglePlayerControllable(playerid, false);
		LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
		PlayerInfo[playerid][pBHackTimer] = SetTimerEx("Timer", 2000, true, "iiii", playerid, T_HACKPANEL, NINCS, NINCS);
		return true;
	}
	else if(!strcmp(params, "hatsoajto", true) || !strcmp(params, "hátsóajtó", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 1.5, 2319.5166,-6.9896,22.8317))
			return SCM(playerid, COL_LRED, "Nem vagy a kezelõfelületnél!");
		
		if(BankInfo[bBankSZLezerK] == true)
		{
			ShowPlayerDialog(playerid, DIALOG_BANKROBP1, DIALOG_STYLE_INPUT, "Bankrablás: Másodlagos Ajtó Kiiktatás", "Írd a lentebbi mezõbe a bankártól kapott kódot:", "Mehet", "Mégse");
		}
		else
		{
			SCM(playerid,COL_LRED,"Még nem nyithatod ki!");
		}
		return true;
	}
	return true;
}

CMD:zsak(playerid, params[])
{
	//CreateObject(18659, 2466.36499, -2066.45044, 15.10067,   0.00000, 0.00000, 90.00000);

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /zsák [ Megpakol / Kipakol / Stop]");
	
	
	if(!strcmp(params, "Stop", true))
	{
		if(PlayerInfo[playerid][pPenzTimer])
		{
			TogglePlayerControllable(playerid, true);
			SCM(playerid, COL_MKEK, "Befejezted a pénz pakolását!");
			
			KillTimer(PlayerInfo[playerid][pPenzTimer]);
			PlayerInfo[playerid][pPenzTimer] = 0;
			SetPlayerAttachedObject(playerid, SLOT_HATIZSAK, 371, 1, 0.0, -0.19600, 0.0, 0.0, 90.0, 0.0);
			DestroyDynamicObject(PlayerInfo[playerid][pHatizsakO]);
			PlayerInfo[playerid][pHatizsakO] = -1;
			
			return true;
		}
	}
	if(!strcmp(params, "kipakol", true))
	{
		if(!PlayerInfo[playerid][pBMennyi])
			return SCM(playerid, COL_MKEK, "A zsák már üres!");
		
		if(!PlayerInfo[playerid][pFrakcio])
			return SCM(playerid, COL_LRED, "Nem vagy frakcióban!");
		
		new bool:van;
		if(PlayerInfo[playerid][phaz] != NINCS)
		{
			new hazszef = HazSzef(playerid);
			if(hazszef > NINCS)
			{
				van = true;
			}
		}
		
		if((!PlayerInfo[playerid][pFrakcio] || (!IsPlayerInRangeOfPoint(playerid, 2.0, PosExt(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefPos])) && FInfo[PlayerInfo[playerid][pFrakcio]][fSzefObject]) || !FInfo[PlayerInfo[playerid][pFrakcio]][fSzefObject]) && !van)
			return SCM(playerid, COL_MKEK, "Nem vagy a frakció, vagy házszéfed közelében!");
		
		if(van) HazInfo[ PlayerInfo[playerid][phaz] ][hazSzef][0] += PlayerInfo[playerid][pBMennyi];
		else
		{
			FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] += PlayerInfo[playerid][pBMennyi];
			FkUpdate(PlayerInfo[playerid][pFrakcio], fuPenz);
		}
		
		SFM(playerid, COL_VZOLD, "Bepakoltál a széfbe "#COL_MKEK"%s"#COL_FEHER"$-ot!", FormatNumber(PlayerInfo[playerid][pBMennyi], 0, ','));
		PlayerInfo[playerid][pBMennyi] = 0;
		return true;
	}
	else if(!strcmp(params, "megpakol", true))
	{
		if(PlayerInfo[playerid][pHatizsak] == 0)
			return SCM(playerid, COL_LRED, "Nincs hátizsákod!");
			
		if(PlayerInfo[playerid][pBMennyi] > 1000)
			return SCM(playerid, COL_LRED, "Már tele van!");
		
		if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2325.4519,-6.5052,22.8317))
			return SCM(playerid, COL_LRED, "Itt nem tudsz pénz pakolni!");
		
		RemovePlayerAttachedObject(playerid, SLOT_HATIZSAK);
		TogglePlayerControllable(playerid, false);
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop", 4.0, 1, 0, 0, 1, 0);

		new Float:hopos[4];
		
		GetPlayerPos(playerid, PosExt(hopos));
		GetPlayerFacingAngle(playerid, hopos[3]);
		
		GetXYInFrontOfPoint(hopos[0], hopos[1], hopos[3], 0.8);
		PlayerInfo[playerid][pHatizsakO] = CreateDynamicObject(371, PosExt(hopos) - 0.9, 0.0, 0.0, hopos[3] + 180.0);
		Streamer_Update(playerid);
		SCM(playerid, COL_MKEK, "Elkezdted a pénz pakolást!");
		PenztRabol[playerid] = 1;
		return true;
	}
	
	return true;
}

CMD:keszit(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /készít [ Drog/Mati/Fegyver ]");
	
	if(!strcmp(params, "drog", true))
	{
		if(!IsJob(playerid, MUNKA_DROG))
			return SCM(playerid, COL_LRED, "Te nem vagy fegyvermester!");
		
		if(PlayerInfo[playerid][pFoglalt])
			return SCM(playerid, COL_LRED, "Jelenleg el vagy foglalva!");
		
		new Float:ra[][3] =
		{
			{2517.3887, -2018.6632, 820.8762},
			{2514.6597, -2018.7422, 820.8762},
			{2511.7322, -2018.8101, 820.8762},
			{2510.4680, -2019.2963, 820.8762},
			{2510.4551, -2021.9458, 820.8762}
		};
		
		new i = -1, ret = -1;
		for(;++i < sizeof(ra);)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, PosExt(ra[i])))
			{
				ret = i;
				break;
			}
		}
		
		if(ret == -1)
			return SCM(playerid, COL_LRED, "Nem vagy a drog készítõ helyen!");
		
		if((ret != -1) && (GetPlayerInterior(playerid) != 3) && (GetPlayerVirtualWorld(playerid) != 1001))
			return SCM(playerid, COL_LRED, "Nem vagy a drog készítõ helyen!");
		
		new form[256];
		
		format(form, sizeof(form), "Marihuana [%dg]\nKokain [%dg]\nHeroin [%dg]", PlayerInfo[playerid][pDrogAnyag][0], PlayerInfo[playerid][pDrogAnyag][1], PlayerInfo[playerid][pDrogAnyag][2]);
		ShowPlayerDialog(playerid, DIALOG_DROGKESZIT, DIALOG_STYLE_LIST, "Drog készítés", form, "Mehet", "Mégse");
		return true;
	}
	if(!strcmp(params, "mati") || !strcmp(params, "material"))
	{
		if(!IsScripter(playerid)) return SCM(playerid,COL_LRED,"Kivéve!");
		if(!IsJob(playerid, MUNKA_FEGYVER))
			return SCM(playerid, COL_LRED, "Te nem vagy fegyvermester!");
			
		if(PlayerInfo[playerid][pFoglalt])
			return SCM(playerid, COL_LRED, "Jelenleg el vagy foglalva!");
			
		if(!IsPlayerInRangeOfPoint(playerid, 3.0, 2474.7732, -2121.0085, 14.7563))
			return SCM(playerid, COL_LRED, "Nem vagy a kijelölt helyen!");
		
		if(PlayerInfo[playerid][pVas] < 1)
			return SCM(playerid, COL_LRED, "Nincsen feldolgozható vasad!");
		
		new i = -1, ido = 0;
		
		for(;++i < PlayerInfo[playerid][pVas];)
			ido += random(6) + 10;
		
		ClearAnimations(playerid, 1);
		LoopingAnim(playerid, "SCRATCHING", "scmid_l", 4.0, 1, 0, 0, 1, 0);
		
		PlayerInfo[playerid][pFoglalt] = true;
		
		SFM(playerid, COL_MKEK, "Elkezdted a material gyártását! Idõ: kb "#COL_MKEK"%d"#COL_FEHER" másodperc", ido);
		SetTimerEx("Timer", (ido * 1000), false, "iiii", playerid, T_MATIKESZITES, NINCS, PlayerInfo[playerid][pVas]);
	}
	else if(!strcmp(params, "fegyver"))
	{
		if(!IsScripter(playerid))
		{
			SCM(playerid,COL_LRED,"OOC Információ: A Parancs egy jó ideig kivéve a fegyver rendszer miatt! Olvass utána hogy mit kell csinálni hogy fegyvert szerezzhess!!");
			return 1;
		}
		if(!IsJob(playerid, MUNKA_FEGYVER))
			return SCM(playerid, COL_LRED, "Te nem vagy fegyvermester!");
		
		/*if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_MAFFIA)
			return SCM(playerid, COL_LRED, "Csak illegális frakció használhatja!");*/
		
		if(PlayerInfo[playerid][pFoglalt])
			return SCM(playerid, COL_LRED, "Jelenleg el vagy foglalva!");
	
		new i = -1, form[70], nagystring[2048];
		new k = -1, bool:talalt = false;
		
		new Float:MatiFegyverPos[][3] =
		{
			{2564.2129, -2017.6954, 820.8762},
			{2567.9890, -2017.6578, 820.8762},
			{2569.5110, -2019.3535, 820.8762},
			{2569.5625, -2028.8842, 820.8762},
			{2565.0657, -2029.0552, 820.8762}
		};
		
		for(;++k < sizeof(MatiFegyverPos);)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, PosExt(MatiFegyverPos[k])))
				talalt = true;
		}
		
		if(!talalt)
			return SCM(playerid, COL_LRED, "Nem vagy a fegyverkészítõ asztalnál!");
		
		new szin[8 + 1];
		
		for(;++i < sizeof(Fegyverek);)
		{
			//50										150
			if((PlayerInfo[playerid][pFegyverSkill] - Fegyverek[i][fSkill]) >= 50)
				szin = COL_SZURKE;
			else if((PlayerInfo[playerid][pFegyverSkill] >= Fegyverek[i][fSkill]) && ((Fegyverek[i][fSkill] - PlayerInfo[playerid][pFegyverSkill]) <= 49))
				szin = COL_MKEK;
			else if(PlayerInfo[playerid][pFegyverSkill] <= Fegyverek[i][fSkill])
				szin = COL_LRED;
			//COL_SZURKE
			format(form, sizeof(form), "%s%s [%d] | Skill: %d\n", szin, Fegyverek[i][fNev], Fegyverek[i][fMati], Fegyverek[i][fSkill]);
			strins(nagystring, form, strlen(nagystring));
		}
		
		strdel(nagystring, strlen(nagystring) - 2, strlen(nagystring));
		ShowPlayerDialog(playerid, DIALOG_FEGYVERKESZITES, DIALOG_STYLE_LIST, "Fegyver Készítés", nagystring, "Készítés", "Mégse");
	}
	return true;
}

CMD:vas(playerid, params[])
{
	#pragma unused params
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Ezt a parancsot jármûben nem használhatod!");
	if(PlayerInfo[playerid][pFoglalt])
		return SCM(playerid, COL_LRED, "Jelenleg elvagy foglalva!");
	
	if(PlayerInfo[playerid][pVas] >= P_MAX_VAS)
		return SFM(playerid, COL_LRED, "Már gyûjtöttél %dkg vasat!", PlayerInfo[playerid][pVas]);
	
	new Float:RandomCP[][3] = {
		{2590.2905, -1998.4435, 3.8594}, // mati1
		{2585.5579, -1995.1437, 3.8594}, // mati2
		{2580.3745, -1991.3811, 3.8594}, // mati3
		{2576.0833, -1988.3070, 3.8594}, // mati4
		{2571.5779, -1985.3274, 3.8594}, // mati5
		{2583.4058, -1970.7137, 3.8594}, // mati6
		{2604.7412, -1955.9238, 3.8594}, // mati7
		{2603.9919, -1968.3732, 3.8594}, // mati8
		{2586.4185, -1974.0426, 3.8594}, // mati9
		{2609.8213, -2047.1803, 5.3703} // mati10
	};
	
	new rand = random(sizeof(RandomCP));
	//PlayerInfo[playerid][pVasCP] = CreateDynamicCP(RandomCP[rand][0], RandomCP[rand][1], RandomCP[rand][2], 2.0, -1, -1, playerid, 30000.0);
	//PlayerInfo[playerid][pVasCP] = CreateCP(playerid, CP_VAS, RandomCP[rand][0], RandomCP[rand][1], RandomCP[rand][2], 2.0);
	//Streamer_Update(playerid);
	PlayerInfo[playerid][pCP] = CP_VAS;
	SetPlayerCheckpoint(playerid, RandomCP[rand][0], RandomCP[rand][1], RandomCP[rand][2], 2.0);
	CPbe[playerid][0] = RandomCP[rand][0];
	CPbe[playerid][1] = RandomCP[rand][1];
	CPbe[playerid][2] = RandomCP[rand][2];
	
	SCM(playerid, COL_MKEK, "Menj a checkpointba!");
	return true;
}

CMD:keres(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /keres [ Tû ]");
	
	if(!strcmp(params, "tû", true) || !strcmp(params, "tu", true))
	{
		if(PlayerInfo[playerid][pTimerFut])
			return SCM(playerid, COL_LRED, "Türelem, ne siess ennyire..");
		
		if(KozeliObject( playerid, 3 ) == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben Kuka!");
		
		PlayerInfo[playerid][pTimerFut] = true;
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,0);
		Cselekves(playerid, "elkezdett turkálni az egyik kukában..");
		SetTimerEx("Timer", 10000, false, "dddd", playerid, T_TUKERES, NINCS, NINCS);
		return true;
	}
	
	return true;
}

CMD:heroin(playerid, params[])
{
	if(PlayerInfo[playerid][pDrogMuvelet][1])
		return SCM(playerid, COL_LRED, "Ne siess haver...");
	
	if(!PlayerInfo[playerid][pBoltCucc][ BL_TU ])
		return SCM(playerid, COL_LRED, "Nincs nálad tû, keress egyet a kórház kukáiban...");
		
	if(!PlayerInfo[playerid][pBoltCucc][ BL_GYUJTO ])
		return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");
		
	if(!PlayerInfo[playerid][pBoltCucc][ BL_KANAL ])
		return SCM(playerid, COL_LRED, "Nincs nálad kanál, vegyél egyet a közeli HotDog standnál.");
		
	if(!PlayerInfo[playerid][pHeroin])
		return SCM(playerid, COL_LRED, "Nincs nálad egy gramm kokain se..");
	
	SCM(playerid, COL_VZOLD, "Elõvettél egy kis heroint...");
	
	PlayerInfo[playerid][pDrogMuvelet][1] = true;
	SetTimerEx("HeroinTimer", 5000, false, "ii", playerid, 1);
	return true;
}

CMD:kokain(playerid, params[])
{
	if(PlayerInfo[playerid][pDrogMuvelet][1])
		return SCM(playerid, COL_LRED, "Ne siess haver...");
	
	if(!PlayerInfo[playerid][pBoltCucc][ BL_SZIVOSZAL ])
		return SCM(playerid, COL_LRED, "Nincs nálad szívószál, vegyél egyet a közeli HotDog standnál.");
	
	if(!PlayerInfo[playerid][pSzemelyi])
		return SCM(playerid, COL_LRED, "Nincs nálad személyi, amirõl fel tudnád szívni a csíkokat..");
		
	if(!PlayerInfo[playerid][pKokain])
		return SCM(playerid, COL_LRED, "Nincs nálad egy gramm kokain se..");
	
	SCM(playerid, COL_VZOLD, "Elõvettél egy kis kokaint...");
	
	PlayerInfo[playerid][pDrogMuvelet][1] = true;
	SetTimerEx("KokainTimer", 5000, false, "ii", playerid, 1);
	return true;
}

CMD:megkot(playerid, params[])
{	
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /megköt [ Játékos ]");
		
	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
		return SCM(playerid, COL_LRED, "Egy jármû vezetõ ülésén kell ülnöd!");
		
	if(!IsPlayerInVehicle(jatekos, GetPlayerVehicleID(playerid)))
		return SCM(playerid, COL_LRED, "Ez a játékos nem ül a jármûvedben!");
		
	if(PlayerInfo[jatekos][pBilincselve])
		return SCM(playerid, COL_LRED, "Ezen a játékosok bilincs van!");

	new veh, model;
	veh = GetPlayerVehicleID(playerid);
	model = GetVehicleModel(veh);
	if(model == 420 || model == 438)
	    return SCM(playerid,COL_LRED,"Taxisként biztos nem!");
	
	if(!PlayerInfo[jatekos][pMegkotve])
	{
		Freeze(jatekos, 0);
		PlayerInfo[jatekos][pMegkotve] = true;
		Cselekves(playerid, "megkötözött valakit..");
		GameTextForPlayer(jatekos, "~r~Megkötöztek!", 2500, 3);
		
	} else {
	
		Freeze(jatekos, NINCS);
		PlayerInfo[jatekos][pMegkotve] = false;
		Cselekves(playerid, "kikötözött valakit..");
		GameTextForPlayer(jatekos, "~r~Kikötöztek!", 2500, 3);
	}

	return true;
}

CMD:cigi(playerid, params[])
{
	//elqrtam a parancsot, így egyszerûbb volt - krisk
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /cigi [ Szív / Papír / Pipa / Bong ]");
		
	if(!strcmp(params, "szív") || !strcmp(params, "sziv"))
	{
		if(!PlayerInfo[playerid][pBoltCucc][ BL_CIGI ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigi, vegyél egyet az egyik boltban.");
		
		if(!PlayerInfo[playerid][pBoltCucc][ BL_GYUJTO ])
			return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");
		
		PlayerInfo[playerid][pBoltCucc][ BL_CIGI ] --;
		Cselekves(playerid, "meggyújtott egy cigit");
	} else if(!strcmp(params, "papír") || !strcmp(params, "papir"))
	{
		if(!PlayerInfo[playerid][pBoltCucc][ BL_PAPIR ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigipapír, vegyél egyet az egyik boltban.");
		
		if(!PlayerInfo[playerid][pBoltCucc][ BL_CIGI ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigi, vegyél egyet az egyik boltban.");
		
		if(!PlayerInfo[playerid][pBoltCucc][ BL_GYUJTO ])
			return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");
		
		PlayerInfo[playerid][pBoltCucc][ BL_PAPIR ] --;
		PlayerInfo[playerid][pBoltCucc][ BL_CIGI ] --;
		
		Cselekves( playerid, "elovesz egy cigipapírt, beletekeri a dohányt, majd meggyújtja.");
	} else if(!strcmp(params, "pipa"))
	{
		if(!PlayerInfo[playerid][pBoltCucc][ BL_PIPA ])
			return SCM(playerid, COL_LRED, "Nincs nálad pipa, vegyél egyet az egyik boltban.");
		
		if(!PlayerInfo[playerid][pBoltCucc][ BL_CIGI ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigi, vegyél egyet az egyik boltban.");
		
		if(!PlayerInfo[playerid][pBoltCucc][ BL_GYUJTO ])
			return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");
		
		PlayerInfo[playerid][pBoltCucc][ BL_CIGI ] --;
		Cselekves(playerid, "eloveszi a pipáját, teletömi dohánnyal, majd meggyújtja.");
	} else if(!strcmp(params, "bong"))
	{
		if(!PlayerInfo[playerid][pBoltCucc][ BL_BONG ])
			return SCM(playerid, COL_LRED, "Nincs nálad bong, vegyél egyet az egyik boltban.");
		
		if(!PlayerInfo[playerid][pBoltCucc][ BL_CIGI ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigi, vegyél egyet az egyik boltban.");
		
		if(!PlayerInfo[playerid][pBoltCucc][ BL_GYUJTO ])
			return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");
		
		PlayerInfo[playerid][pBoltCucc][ BL_CIGI ] --;
		Cselekves(playerid, "eloveszi a bongot, belerakja a dohányt, majd meggyújtja.");
	} else {
		return 1;
	}
	
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	LoopingAnim(playerid, "GANGS", "drnkbr_prtl_F", 4.0, 0, 1, 1, 1, -1);
	return true;
}

CMD:joint(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /joint [ Szív / Pipa / Bong ]");

	if(PlayerInfo[playerid][pJoint][1])
		return SCM(playerid, COL_LRED, "Ne siess haver...");

	if(PlayerInfo[playerid][pJoint][0])
		return SCM(playerid, COL_LRED, "Haver te nagyon be vagy kenve, most is van a kezedben egy cigi :D");
		
	if(!strcmp(params, "szív") || !strcmp(params, "sziv"))
	{	
		if(!PlayerInfo[playerid][pBoltCucc][ BL_PAPIR ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigipapír, vegyél egyet az egyik boltban.");
		
		if(!PlayerInfo[playerid][pBoltCucc][ BL_CIGI ])
			return SCM(playerid, COL_LRED, "Nincs nálad cigi, vegyél egyet az egyik boltban.");
		
		if(!PlayerInfo[playerid][pBoltCucc][ BL_GYUJTO ])
			return SCM(playerid, COL_LRED, "Nincs nálad öngyújtó, vegyél egyet az egyik boltban.");
			
		if(!PlayerInfo[playerid][pMarihuana])
			return SCM(playerid, COL_LRED, "Nincs nálad egy gramm marihuána se.");
			
	} else if(!strcmp(params, "pipa"))
	{
		if(!PlayerInfo[playerid][pBoltCucc][ BL_PIPA ])
			return SCM(playerid, COL_LRED, "Nincs nálad pipa, vegyél egyet az egyik boltban.");
		
		if(!PlayerInfo[playerid][pMarihuana])
			return SCM(playerid, COL_LRED, "Nincs nálad egy gramm marihuána se.");
		
	} else if(!strcmp(params, "bong"))
	{
		if(!PlayerInfo[playerid][pBoltCucc][ BL_BONG ])
			return SCM(playerid, COL_LRED, "Nincs nálad bong, vegyél egyet az egyik boltban.");
		
		if(!PlayerInfo[playerid][pMarihuana])
			return SCM(playerid, COL_LRED, "Nincs nálad egy gramm marihuána se.");
		
	} else { return 1; }
	
	
	PlayerInfo[playerid][pJoint][1] = true;
	SetTimerEx("JointTimer", 5000, false, "iis", playerid, 1, params );
	return true;
}

CMD:drog(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /drog [ Fogyaszt / Készít / Arat ]");
	
	new param[24];
	sscanf(params, "s[24]{}", param);
	if(!strcmp(param, "készít") || !strcmp(param, "keszit"))
	{
		if(!IsJob(playerid, MUNKA_DROG))
			return SCM(playerid, COL_LRED, "Te nem vagy drogdíler!");
		
		new num = HazUltetvenySzam( PlayerInfo[playerid][phaz] );
		switch( PlayerInfo[playerid][pPremiumCsomag] )
		{
			case 0, 400, 800:
			{
				if((num + 1) > 15)
				{
					drog_nincstobb:
					
					new str[512];
					format(str, sizeof(str), ""#COL_FEHER"Kedves "#COL_MKEK"%s!"#COL_FEHER"\nSajnos elérted a maximálisan ültethetõ cserjék számát!\n", JatekosNev(playerid, true));
					format(str, sizeof(str), "%sAmennyiben többet szeretnél ültetni kérlek támogasd\na szervert.\n", str);
					format(str, sizeof(str), "%sTovábbi cserjék ültetéséhez {FFD700}Arany"#COL_FEHER" vagy {00FFFF}Gyémánt"#COL_FEHER"\ntámogatói státusz szükséges. ", str);
					format(str, sizeof(str), "%sEzt a funkciót a\n{FFA500}UserCP => Támogatás"#COL_FEHER" menüpontja alatt találod.", str);
					Info_Dialog(playerid, "Ez egy Prémium Slot!", str);
					return true;
				}
			}
			case 1600:
			{
				if((num + 1) > 25)
				{
					if(PlayerInfo[playerid][pPremiumIdo] < gettime())
						goto drog_nincstobb;
					
					new str[512];
					format(str, sizeof(str), ""#COL_FEHER"Kedves "#COL_MKEK"%s!"#COL_FEHER"\nSajnos elérted a maximálisan ültethetõ cserjék számát!\n", JatekosNev(playerid, true));
					format(str, sizeof(str), "%sAmennyiben többet szeretnél ültetni kérlek támogasd\na szervert.\n", str);
					format(str, sizeof(str), "%sTovábbi cserjék ültetéséhez {00FFFF}Gyémánt"#COL_FEHER"\ntámogatói státusz szükséges. ", str);
					format(str, sizeof(str), "%sEzt a funkciót a\n{FFA500}UserCP => Támogatás"#COL_FEHER" menüpontja alatt találod.", str);
					Info_Dialog(playerid, "Ez egy Prémium Slot!", str);
					return true;
				}
			}
		}
		
		new ret = NearestPlant(playerid);
		if(ret == -1)
			return SCM(playerid, COL_LRED, "Nem vagy ültetvény közelében!");
			
		if(HazInfo[ PlayerInfo[playerid][phaz] ][hTulajID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COL_LRED, "Csak a saját házadban ültethetsz!");
		
		if(HazInfo[ PlayerInfo[playerid][phaz] ][hDrogMi][ret] > 0)
			return SCM(playerid, COL_LRED, "Ide már ültettél!");
		
		ShowPlayerDialog(playerid, DIALOG_DROGULT, DIALOG_STYLE_LIST, "Válassz, milyen drogot szeretnél készíteni.", "Marihuana\nKokain\nHeroin", "Mehet", "Mégse");
		
		//SFM(playerid, COL_MKEK, "Ennél vagy: %d", ret);
		return true;
	}
	else if(!strcmp(param, "arat"))
	{
		if(PlayerInfo[playerid][phaz] == -1)
			return SCM(playerid, COL_MKEK, "Nem tartózkodsz házban!");
		
		if(!IsJob(playerid, MUNKA_DROG))
			return SCM(playerid, COL_LRED, "Te nem vagy Drog díler!");
		
		new ret = NearestPlant(playerid);
		
		if(ret == -1)
			return SCM(playerid, COL_LRED, "Nem vagy palánta közelében!");
			
		if(HazInfo[ PlayerInfo[playerid][phaz] ][hTulajID] != PlayerInfo[playerid][pID])
			return SCM(playerid, COL_LRED, "Csak a saját házadban arathatsz!");
		
		if(HazInfo[PlayerInfo[playerid][phaz]][hDrogAllapot][ret] < 100)
			return SCM(playerid, COL_LRED, "Ez a palánta, még nem nõtt ki teljesen!");
		
		//Marihuana [%dg]\n%sKokain [%dg]\n%sHeroin [%dg]
		PlayerInfo[playerid][pDrogAnyag][ (HazInfo[ PlayerInfo[playerid][phaz] ][hDrogMi][ret] - 1) ] += HazInfo[ PlayerInfo[playerid][phaz] ][hDrogMennyi][ret];
		UpdateDynamic3DTextLabelText(HazInfo[PlayerInfo[playerid][phaz]][hDrogHely][ret], 0xFFFFFFFF, "[Drog hely]\nSzabad");
		
		SFM(playerid, COL_MKEK, "Sikeresen leszedtél "#COL_MKEK"%dg"#COL_FEHER" alapanyagot!", HazInfo[PlayerInfo[playerid][phaz]][hDrogMennyi][ret]);
		
		HazInfo[PlayerInfo[playerid][phaz]][hDrogAllapot][ret] = 0;
		HazInfo[PlayerInfo[playerid][phaz]][hDrogMennyi][ret] = 0;
		HazInfo[PlayerInfo[playerid][phaz]][hDrogMi][ret] = 0;
		return true;
	}
	else if(!strcmp(param, "fogyaszt", true))
	{
		SCM(playerid, COL_MKEK, ""#COL_MKEK"Marihuána:"#COL_FEHER" /joint | "#COL_MKEK"Heroin:"#COL_FEHER" /heroin | "#COL_MKEK"Kokain:"#COL_FEHER" /kokain");
	}
	return true;
}

CMD:gyogyszer(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSMD)
		return SCM(playerid, COL_LRED, "Te nem vagy mentõs!");
		
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /gyógyszer [Játékos] | Játékos meggyógyítása");
		
	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
	if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 3)
		return SCM(playerid, COL_LRED, "A játékos nincs a közeledben!");
		
	if(PlayerInfo[jatekos][pElet] > 100)
		return SCM(playerid, COL_LRED, "Ez a játékos nem szorul ellátásra!");
		
	if(PlayerInfo[jatekos][ppenz] < 8)
		return SCM(playerid, COL_LRED, "A játékosnak nincs elég készpénze a gyógyszerre!");
	
	SFM(playerid, COL_MKEK, "Meggyógyítottad "#COL_MKEK"%s-t", JatekosNev(jatekos, true));
	SFM(jatekos, COL_MKEK, ""#COL_MKEK"%s"#COL_FEHER" meggyógyított téged 8$-ért!", JatekosNev(playerid, true));
	
	GiveMoney(jatekos,-8);
	GiveMoney(playerid,4);
	FInfo[ FRAKCIO_LSMD ][fPenz] += 4;
	SetHealth(jatekos, MAX_HP);
	return true;
}

CMD:gov(playerid, params[])
{
	new id = PlayerInfo[playerid][pFrakcio];
	if(id != FRAKCIO_LSMD && id != FRAKCIO_LSPD && id != FRAKCIO_KORMANY && id != FRAKCIO_LSFD && id != FRAKCIO_KATONA && id != FRAKCIO_FBI && id != FRAKCIO_SZERELO)
		return SCM(playerid, COL_LRED, "A te szervezeted nem jogosult bejelentésre!");
		
	if(PlayerInfo[playerid][prang] < 6)
		return SFM(playerid, COL_LRED, "Minimum ["#COL_MKEK"6"#COL_FEHER"]"#COL_MKEK"%s"#COL_FEHER" rang szükséges a bejelentés használatához!", Rangok(6, PlayerInfo[playerid][pFrakcio]));
		
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /gov [Bejelentés szövege] | Nem hírdetésre van");
		
	if(strlen(params) < 20)
		return SCM(playerid, COL_LRED, "A bejelentés szövegének legalább 20 karakter hosszúnak kell lennie!");
		
	if(!OOC_Ellenorzes(playerid, "/gov", params))
		return true;
		
	new str[128];
	format(str, sizeof(str), "================== [ "#COL_VKEK"%s felhívása"#COL_FEHER" ] ==================", FInfo[PlayerInfo[playerid][pFrakcio]][fNev]);
	SendClientMessageToAll(COLOR_YELLOW2, str);
	format(str, sizeof(str), "%s %s: %s", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), params);
	SendClientMessageToAll(COLOR_YELLOW2, str);
	return true;
}

CMD:atad(playerid, params[])
{
	if(PlayerInfo[playerid][pMeghalt])
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudodsz átadni semmit!");
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /átad [ Pénz / Material / Heroin / Kokain / Marihuana / Vas / Kötszer / Fegyver / Mag ]");
		
	new param[24], jatekos = NINCS, ertek = NINCS;
	sscanf(params, "s[24]U(-1)D(-1)", param, jatekos, ertek);
	if(ertek > MAX_ERTEK)
		return true;
		
	if(!strcmp(param, "penz", false) || !strcmp(param, "pénz", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad pénz [Játékos] [Mennyit]");
			
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
			
		if(PlayerInfo[playerid][ppenz] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi pénz!");
		
		if(PlayerInfo[playerid][pjatekosszint] < 3)
		{
			return SCM(playerid,COL_LRED,"Minimum 3 as Szint!");
		}
		
		if(ertek > 4500 || ertek < 1)
			return SCM(playerid, COL_LRED, "Egyszerre maximum 4500$ készpénzt adhatsz át!");
			
		GiveMoney(jatekos,ertek);
		GiveMoney(playerid,-ertek);
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"$ készpénzt!", JatekosNev(playerid, true), FormatNumber(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"$ készpénzt!", JatekosNev(jatekos, true), FormatNumber(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi készpénzt..");
	}
	else if(!strcmp(param, "fegyver", false))
	{
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS || ertek == -1)
			return SCM(playerid, COL_MKEK, "Használat: /átad fegyver [Játékos] [Lõszer szám (0 = összes)]");
		
		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
			
		if(!PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Nincs a kezedben fegyver amit átadhatnál!");
			
		if(PlayerInfo[jatekos][pFegyver])
			return SCM(playerid, COL_LRED, "Van a kezében fegyver, így nem tudja átvenni!");
			
		if(PlayerInfo[jatekos][pjatekosszint] < 3)
			return SCM(playerid, COL_LRED, "Fegyverhasználat csak 3 szinttõl érhetõ el ezért nem adhatsz neki át fegyvert!");
			
		if(PlayerInfo[playerid][pDuty][0] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND)
			return SCM(playerid, COL_LRED, "Cicaborsó, nem ezért kapsz fegyvert szolgálatban :D");
		
		new slot = GetGunSlot( PlayerInfo[playerid][pFegyver] );
		new fegyo = PlayerInfo[playerid][pFegyverek][slot];
		new ammo;
		
		if(ertek && (ertek > PlayerInfo[playerid][pToltenyek][slot]))
			return SFM(playerid, COL_LRED, "A töltény mennyiség "#COL_MKEK"1 "#COL_FEHER"és "#COL_MKEK"%d "#COL_FEHER"között lehet! | 0 = Összes átadása", PlayerInfo[playerid][pToltenyek][slot]);
		
		if(!ertek)
			ammo = PlayerInfo[playerid][pToltenyek][slot];
		else
			ammo = ertek;
		
		PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);		
		PlayerInfo[playerid][pToltenyek][slot] -= ammo;
		if(PlayerInfo[playerid][pToltenyek][slot] == 0)
		{
			PlayerInfo[playerid][pFegyverek][slot] = 0;
		}
		
		SetPlayerAttachedWeapon(playerid);

		ResetPlayerWeapons(playerid);
		
		GiveWeapon(jatekos, fegyo, ammo);
		SetPlayerAttachedWeapon(jatekos);
		SFM(jatekos, COL_MKEK, "%s átadott neked egy "#COL_VKEK"%s"#COL_FEHER" fegyvert %d lõszerrel!", JatekosNev(playerid, true), aWeaponNames[fegyo], ammo);
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER" fegyvert %d lõszerrel", JatekosNev(jatekos, true), aWeaponNames[fegyo], ammo);
		Cselekves(playerid, "átadott valakinek némi fegyvert");
	}
	else if(!strcmp(param, "vas", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad vas [Játékos] [Mennyit]");
			
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
			
		if(PlayerInfo[playerid][pVas] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi vas!");
			
		if((PlayerInfo[jatekos][pVas] + ertek) > P_MAX_VAS)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_VAS"kg vas fér el nála!");
			
		PlayerInfo[playerid][pVas] -= ertek;
		PlayerInfo[jatekos][pVas] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"kg vasat!", JatekosNev(playerid, true), FormatNumber(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"kg vasat!", JatekosNev(jatekos, true), FormatNumber(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi vasat");
	}
	else if(!strcmp(param, "kötszer", false) || !strcmp(param, "kotszer", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad kötszer [Játékos] [Mennyit]");
			
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
			
		if(PlayerInfo[playerid][pKotszer] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi kötszer!");
			
		if((PlayerInfo[jatekos][pKotszer] + ertek) > P_MAX_KOTSZER)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_KOTSZER"kg vas fér el nála!");
			
		PlayerInfo[playerid][pKotszer] -= ertek;
		PlayerInfo[jatekos][pKotszer] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"kg kötszert!", JatekosNev(playerid, true), FormatNumber(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"kg kötszert!", JatekosNev(jatekos, true), FormatNumber(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi kötszert");
	}
	else if(!strcmp(param, "mati", false) || !strcmp(param, "material", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad material [Játékos] [Mennyit]");
			
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
			
		if(PlayerInfo[playerid][pMaterial] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi Material!");
			
		if((PlayerInfo[jatekos][pMaterial] + ertek) > P_MAX_MATERIAL)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_MATERIAL"kg vas fér el nála!");
			
		PlayerInfo[playerid][pMaterial] -= ertek;
		PlayerInfo[jatekos][pMaterial] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"db Materialt!", JatekosNev(playerid, true), FormatNumber(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"db Materialt!", JatekosNev(jatekos, true), FormatNumber(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi materialt");
	}
	else if(!strcmp(param, "heroin", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad heroin [Játékos] [Mennyit]");
			
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
			
		if(PlayerInfo[playerid][pHeroin] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi heroin!");
			
		if((PlayerInfo[jatekos][pHeroin] + ertek) > P_MAX_HEROIN)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_HEROIN"kg vas fér el nála!");
			
		PlayerInfo[playerid][pHeroin] -= ertek;
		PlayerInfo[jatekos][pHeroin] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"g Heroint!", JatekosNev(playerid, true), FormatNumber(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"g Heroint!", JatekosNev(jatekos, true), FormatNumber(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi heroint");
	}
	else if(!strcmp(param, "kokain", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad kokain [Játékos] [Mennyit]");
			
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
			
		if(PlayerInfo[playerid][pKokain] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi heroin!");
			
		if((PlayerInfo[jatekos][pKokain] + ertek) > P_MAX_KOKAIN)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_KOKAIN"kg vas fér el nála!");
			
		PlayerInfo[playerid][pKokain] -= ertek;
		PlayerInfo[jatekos][pKokain] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"g Kokaint!", JatekosNev(playerid, true), FormatNumber(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"g Kokaint!", JatekosNev(jatekos, true), FormatNumber(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi kokaint");
	}
	else if(!strcmp(param, "marihuana", false) || !strcmp(param, "mariska", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad marihuana [Játékos] [Mennyit]");
			
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
			
		if(PlayerInfo[playerid][pMarihuana] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi marihuána!");
			
		if((PlayerInfo[jatekos][pKokain] + ertek) > P_MAX_MARIHUANA)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_MARIHUANA"kg vas fér el nála!");
			
		PlayerInfo[playerid][pMarihuana] -= ertek;
		PlayerInfo[jatekos][pMarihuana] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"g Marihuánát!", JatekosNev(playerid, true), FormatNumber(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"g Marihuánát!", JatekosNev(jatekos, true), FormatNumber(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi marihuánát");
	}
	else if(!strcmp(param, "mag", false))
	{
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /átad mag [Játékos] [Mennyit]");

		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");

		if(PlayerInfo[jatekos][pDrogAnyag][0] < ertek)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi mag!");

		PlayerInfo[playerid][pDrogAnyag][0] -= ertek;
		PlayerInfo[jatekos][pDrogAnyag][0] += ertek;
		SFM(jatekos, COL_MKEK, "%s átadott neked "#COL_VKEK"%s"#COL_FEHER"db magot!", JatekosNev(playerid, true), FormatNumber(ertek, 0, ','));
		SFM(playerid, COL_MKEK, "Átadtál neki: %s "#COL_VKEK"%s"#COL_FEHER"db magot!", JatekosNev(jatekos, true), FormatNumber(ertek, 0, ','));
		Cselekves(playerid, "átadott valakinek némi marihuánát");
	}
	else
		SCM(playerid, COL_MKEK, "Használat: /átad [ Pénz / Material / Heroin / Kokain / Marihuana / Vas / Kötszer / Fegyver / Mag ]");
	return true;
}


CMD:negy(playerid, params[])
{
	new szam;
	if( sscanf( params, "i", szam ) ) return SCM( playerid, COL_MKEK, "Használat: /negy [szám]");

	if( szam % 4 == 0 )
	    return SCM( playerid, COL_MKEK, "A szám osztható NÉGY-gyel.");
	else
	    return SCM( playerid, COL_MKEK, "A szám NEM osztható NÉGY-gyel.");
}
//Következõnél megöllek csak szólok, By Hiroshi
/*CMD:nyomorek(playerid, params[])
{
	if( !strcmp(JatekosNev(playerid, true, true), "Daniel_Risk") )
	{
	    return SCM( playerid, COL_LRED, "Gratulálok! Bevallottad magadról, hogy egy világi nyomorék vagy.");
	} else {
	    return SCM( playerid, COL_LRED, "Ezt a parancsot csak krook használhatja, mert õ egy igazi világi nyomorék.");
	}
}*/

CMD:elvesz(playerid, params[])
{
	new param[24];
	if(PlayerInfo[playerid][pMeghalt])
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudodsz elvenni semmit!");
	new jatekos = GetClosestPlayer(playerid);
	if(!PlayerToPlayer(playerid,jatekos,5))
	{
 		return SCM(playerid,COL_LRED,"Nincs senki a közeledben!");
	}
	
	if(!PlayerInfo[jatekos][pMeghalt] && !PlayerInfo[jatekos][pBilincselve] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Ezt a játékost nem tudod kirabolni!");
		
	if(sscanf(params, "s[24]", param))
	{
		SCM(playerid, COL_MKEK, "Használat: /elvesz [ Pénz / Fegyver / Material / Heroin / Kokain / Marihuana / Mag ]");
		if( FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND )
			SCM(playerid, COL_MKEK, "Használat: /elvesz [ KRESZ / Autójogsi / Motorjogsi / Kamionjogsi / Fegyverengedély ]");
		return 1;
	}
	if(!strcmp(param, "penz", true) || !strcmp(param, "pénz", true))
	{
		if(!PlayerInfo[jatekos][ppenz])
			return SCM(playerid, COL_LRED, "Ennél a játékosnál nincs készpénz!");
		
		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"$ készpénzt!", FormatNumber(PlayerInfo[jatekos][ppenz], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"$ készpénzt! ", FormatNumber(PlayerInfo[jatekos][ppenz], 0, ','));
		
		
		GiveMoney(playerid,PlayerInfo[jatekos][ppenz]);
		SetMoney(jatekos,0);
		Cselekves(playerid, "elvett valakitõl némi készpénzt..");
	}
	else if(!strcmp(param, "fegyver", true))
	{
		if(PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Elõször rakd el a fegyvered!");

		if(PlayerInfo[jatekos][pFegyver])
			cmd_fegyver(jatekos, "elrak");
		
		new fegyver = NINCS, bool:van;
		for(;++fegyver < 13;)
		{
			if(PlayerInfo[ jatekos ][pFegyverek][ fegyver ] && PlayerInfo[ jatekos ][pToltenyek][ fegyver ] && !SameWeaponSlot( PlayerInfo[playerid][pFegyverek][ fegyver ], PlayerInfo[jatekos][pFegyverek][ fegyver ] ))
			{
				van = true;
				PlayerInfo[playerid][pFegyverek][ fegyver ] = PlayerInfo[jatekos][pFegyverek][ fegyver ];
				PlayerInfo[playerid][pToltenyek][ fegyver ] += PlayerInfo[jatekos][pToltenyek][ fegyver ];
				
				PlayerInfo[jatekos][pFegyverek][ fegyver ] = 0;
				PlayerInfo[jatekos][pToltenyek][ fegyver ] = 0;
				
				ResetPlayerWeapons(jatekos);
			}
		}
		
		if(!van)
			return SCM(playerid, COL_LRED, "Ennél a játékosnál nincs egy fegyver se vagy nálad már van hasonló típusú fegyver!");
		
		SetPlayerAttachedWeapon(jatekos);
		SetPlayerAttachedWeapon(playerid);
		SCM(jatekos, COL_MKEK, "Valaki elvette tõled az összes fegyvered!");
		SCM(playerid, COL_MKEK, "Elvetted tõle az összes fegyverét!");
		Cselekves(playerid, "elvette valakitõl az összes fegyverét..");
	}
	else if(!strcmp(param, "mati", true) || !strcmp(param, "material", true))
	{
		if(!PlayerInfo[jatekos][pMaterial])
			return SCM(playerid, COL_LRED, "Nincs nála material!");
			
		if((PlayerInfo[playerid][pMaterial] + PlayerInfo[jatekos][pMaterial]) > P_MAX_MATERIAL)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_MATERIAL"db material fér el nálad!");
		
		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"db materialt!", FormatNumber(PlayerInfo[jatekos][pMaterial], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"db materialt! ", FormatNumber(PlayerInfo[jatekos][pMaterial], 0, ','));
		
		PlayerInfo[playerid][pMaterial] += PlayerInfo[jatekos][pMaterial];
		PlayerInfo[jatekos][pMaterial] = 0;
		
		Cselekves(playerid, "elvett valakitõl némi materialt..");
	}
	else if(!strcmp(param, "heroin", true))
	{
		if(!PlayerInfo[jatekos][pHeroin])
			return SCM(playerid, COL_LRED, "Nincs nála heroin!");
			
		if((PlayerInfo[playerid][pHeroin] + PlayerInfo[jatekos][pHeroin]) > P_MAX_HEROIN)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_HEROIN"g heroin fér el nálad!");
		
		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"g heroint!", FormatNumber(PlayerInfo[jatekos][pHeroin], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"g heroint! ", FormatNumber(PlayerInfo[jatekos][pHeroin], 0, ','));
		
		PlayerInfo[playerid][pHeroin] += PlayerInfo[jatekos][pHeroin];
		PlayerInfo[jatekos][pHeroin] = 0;
		
		Cselekves(playerid, "elvett valakitõl némi heroint..");
	}
	else if(!strcmp(param, "kokain", true))
	{
		if(!PlayerInfo[jatekos][pKokain])
			return SCM(playerid, COL_LRED, "Nincs nála kokain!");
			
		if((PlayerInfo[playerid][pKokain] + PlayerInfo[jatekos][pKokain]) > P_MAX_KOKAIN)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_KOKAIN"g kokain fér el nálad!");
		
		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"g kokaint!", FormatNumber(PlayerInfo[jatekos][pKokain], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"g kokaint! ", FormatNumber(PlayerInfo[jatekos][pKokain], 0, ','));
		
		PlayerInfo[playerid][pKokain] += PlayerInfo[jatekos][pKokain];
		PlayerInfo[jatekos][pKokain] = 0;
		
		Cselekves(playerid, "elvett valakitõl némi kokaint..");
	}
	else if(!strcmp(param, "marihuana", true) || !strcmp(param, "mariska", true))
	{
		if(!PlayerInfo[jatekos][pMarihuana])
			return SCM(playerid, COL_LRED, "Nincs nála marihuana!");
			
		if((PlayerInfo[playerid][pMarihuana] + PlayerInfo[jatekos][pMarihuana]) > P_MAX_MARIHUANA)
			return SCM(playerid, COL_LRED, "Maximum "#P_MAX_MARIHUANA"g marihuana fér el nálad!");
		
		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"g marihuanat!", FormatNumber(PlayerInfo[jatekos][pMarihuana], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"g marihuanat! ", FormatNumber(PlayerInfo[jatekos][pMarihuana], 0, ','));
		
		PlayerInfo[playerid][pMarihuana] += PlayerInfo[jatekos][pMarihuana];
		PlayerInfo[jatekos][pMarihuana] = 0;
		
		Cselekves(playerid, "elvett valakitõl némi marihuanat..");
	}
	else if(!strcmp(param, "mag", true))
	{
		if(!PlayerInfo[jatekos][pDrogAnyag][0])
			return SCM(playerid, COL_LRED, "Nincs nála marihuana!");

		SFM(jatekos, COL_MKEK, "Valaki elvett tõled "#COL_MKEK"%s"#COL_FEHER"db magot!", FormatNumber(PlayerInfo[jatekos][pMarihuana], 0, ','));
		SFM(playerid, COL_MKEK, "Elvettél tõle "#COL_MKEK"%s"#COL_FEHER"db magot! ", FormatNumber(PlayerInfo[jatekos][pMarihuana], 0, ','));

		PlayerInfo[playerid][pDrogAnyag][0] += PlayerInfo[jatekos][pDrogAnyag][0];
		PlayerInfo[jatekos][pDrogAnyag][0] = 0;

		Cselekves(playerid, "elvett valakitõl némi magot.");
	}
	else if(!strcmp(param, "KRESZ", true))
	{
   		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		    return SCM( playerid, COL_LRED, "Nem vagy a rendvédelem tagja.");
		    
	    if(!PlayerInfo[jatekos][pEngedely][0])
	        return SCM( playerid, COL_LRED, "Nincs KRESZ-vizsgája.");

		PlayerInfo[jatekos][pEngedely][0] = 0;

		SCM(jatekos, COL_MKEK, "Valaki érvénytelenítette a KRESZ-vizsgádat.");
        SCM(playerid, COL_MKEK, "Elvetted a KRESZ-vizsgáját.");
	}
	else if(!strcmp(param, "autójogsi") || !strcmp(param, "autojogsi"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		    return SCM( playerid, COL_LRED, "Nem vagy a rendvédelem tagja.");

	    if(!PlayerInfo[jatekos][pEngedely][1])
	        return SCM( playerid, COL_LRED, "Nincs jogosítványa.");

		PlayerInfo[jatekos][pEngedely][1] = 0;

		SCM(jatekos, COL_MKEK, "Valaki elvette az autójogosidat.");
        SCM(playerid, COL_MKEK, "Elvetted az autójogsiját.");
	}
	else if(!strcmp(param, "motorjogsi"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		    return SCM( playerid, COL_LRED, "Nem vagy a rendvédelem tagja.");

	    if(!PlayerInfo[jatekos][pEngedely][2])
	        return SCM( playerid, COL_LRED, "Nincs jogosítványa.");

		PlayerInfo[jatekos][pEngedely][2] = 0;

		SCM(jatekos, COL_MKEK, "Valaki elvette a motorjogsidat.");
        SCM(playerid, COL_MKEK, "Elvetted az autójogsiját.");
	}
	else if(!strcmp(param, "kamionjogsi"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		    return SCM( playerid, COL_LRED, "Nem vagy a rendvédelem tagja.");

	    if(!PlayerInfo[jatekos][pEngedely][3])
	        return SCM( playerid, COL_LRED, "Nincs jogosítványa.");

		PlayerInfo[jatekos][pEngedely][3] = 0;

		SCM(jatekos, COL_MKEK, "Valaki elvette a kamionjogsidat.");
        SCM(playerid, COL_MKEK, "Elvetted a kamionjogsidat.");
	}
	else if(!strcmp(param, "fegyverengedély") || !strcmp(param, "fegyverengedely"))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		    return SCM( playerid, COL_LRED, "Nem vagy a rendvédelem tagja.");

	    if(!PlayerInfo[jatekos][pEngedely][4])
	        return SCM( playerid, COL_LRED, "Nincs fegyverengedélye.");

		PlayerInfo[jatekos][pEngedely][4] = 0;

		SCM(jatekos, COL_MKEK, "Valaki elvette a fegyverengedélyed.");
        SCM(playerid, COL_MKEK, "Elvetted a fegyverengedélyét.");
	}
	else
	{
		SCM(playerid, COL_MKEK, "Használat: /elvesz [ Pénz / Fegyver / Material / Heroin / Kokain / Marihuana / Mag ]");
		if( FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND )
			SCM(playerid, COL_MKEK, "Használat: /elvesz [ KRESZ / Autójogsi / Motorjogsi / Kamionjogsi / Fegyverengedély ]");
		return 1;
	}
	return true;
}

CMD:kiszed(playerid, params[])
{
	new jatekos = KozelbenValaki(playerid, 2.5);
	
	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS || !IsPlayerInAnyVehicle(jatekos) || jatekos == 0)
		return SCM(playerid, COL_LRED, "A közeledben nincs senki akit kirángathatnál!");

	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben vagy, mégis, hogy akarod kirángatni?");
	
	new vid = JarmuID( GetClosestVehicle(jatekos), jatekos );
	if(vInfo[vid][vZarva])
		return SCM(playerid, COL_LRED, "Ez a jármû be van zárva, így nem tudod kirángatni!");

	new Float:pos[3];
	GetPlayerPos(playerid, PosExt(pos));
	SetPos(jatekos, pos[0]+ 0.5, pos[1] + 0.5, pos[2], .update = true);

	if(GetPlayerState(jatekos) == PLAYER_STATE_DRIVER)
		Freeze(jatekos, NINCS);

	Cselekves(playerid, "kirángatott valakit a jármûböl");
	return true;
}

CMD:segit(playerid, params[])
{
	if(PlayerInfo[playerid][pTimerFut])
		return SCM(playerid, COL_MKEK, "Várj míg ellátod a sebet!");
	if(PlayerInfo[playerid][pKotszer] < 1)
		return SCM(playerid, COL_LRED, "Nincs elég kötszered, hogy felgyógyítsd!");

	new jatekos = GetClosestPlayer(playerid);
	if(!PlayerToPlayer(playerid,jatekos,5))
	{
 		return SCM(playerid,COL_LRED,"Nincs senki a közeledben!");
	}

		/*if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSMD)
		{
			new db, szdb;
			foreach(Player, i)
			{
				if(PlayerInfo[i][pFrakcio] == FRAKCIO_LSMD && PlayerInfo[i][pDuty][0])
					szdb++;
				if(PlayerInfo[i][pFrakcio] == FRAKCIO_LSMD)
					db++;
			}
		
			if(db > 3 || szdb > 1)
				return SCM(playerid, COL_LRED, "Jelenleg van elég elérhetõ mentõs! Hívd a 112-es telefonszámot!");
		}*/
		
	if(!PlayerInfo[jatekos][pMeghalt])
			return SCM(playerid, COL_LRED, "Ez a játékos nem szorul ellátásra!");
		
	Freeze(playerid, 10000);
	Freeze(jatekos, 10000);
	PlayerInfo[playerid][pTimerFut] = true;
	PlayerInfo[jatekos][pTimerFut] = true;
		
	SetTimerEx("Timer", 10000, false, "dddd", jatekos, T_SEGIT, playerid, NINCS);
	LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0, 1, 0, 0, 1, 0, 1);
	LoopingAnim(jatekos, "WUZI", "CS_Dead_Guy", 4.0, 1, 0, 0, 1, 0, 1);
	//return true;
	if(!strcmp(params, "magam"))
	{
		if(PlayerInfo[playerid][pMeghalt])
			return SCM(playerid, COL_LRED, "Lõtt seb ellátásához nincs elegendõ képzettséged!");
		if(PlayerInfo[playerid][pKotszer] < 2)
			return SCM(playerid, COL_LRED, "Nincs elég kötszered, hogy felgyógyítsd magad!");
				
		new db, szdb;
		foreach(Player, i)
		{
			if(PlayerInfo[i][pFrakcio] == FRAKCIO_LSMD && PlayerInfo[i][pDuty][0])
				szdb++;
			if(PlayerInfo[i][pFrakcio] == FRAKCIO_LSMD)
				db++;
		}
		
		if(db > 3 || szdb > 1 && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSMD)//ha mentõs csak eltudja 
			return SCM(playerid, COL_LRED, "Jelenleg van elég elérhetõ mentõs! Hívd a 112-es telefonszámot!");
				
		Freeze(playerid, 0);
		PlayerInfo[playerid][pTimerFut] = true;
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0, 1 ,0, 0, 1, 0, 1);
		SetTimerEx("Timer", 60000, false, "dddd", playerid, T_MSEGIT, NINCS, NINCS);
		Cselekves(playerid, "ellátja a sérüléseit..");
		return true;
	}
	return true;
}

CMD:motoz(playerid, params[])
{
	#pragma unused params
	if(PlayerInfo[playerid][pMeghalt])
		return SCM(playerid, COL_LRED, "Animban nem tudsz megmotozni senkit se!");
		
	new jatekos = KozelbenValaki(playerid, 2.0);
	
	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
		return SCM(playerid, COL_LRED, "A közeledben nincs senki!");
		
	Megmotozna[jatekos] = playerid;
	Megmotozna[playerid] = jatekos;
	new kicsinalja[128];
	
	if(PlayerInfo[playerid][pMaszkVisel] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "Maszk_ID%d", PlayerInfo[playerid][pMaszkID]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == true)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", PlayerInfo[playerid][pAlnev]);
	}
	if(PlayerInfo[playerid][pAlnevbe] == false && PlayerInfo[playerid][pMaszkVisel] == false)
	{
		format(kicsinalja, sizeof(kicsinalja), "%s", JatekosNev(playerid));
	}
	SFM(jatekos,COL_MKEK,"Megmotozna %s || /elfogad motozás",kicsinalja);
	SCM(playerid,COL_MKEK,"Motozás kérelem elküldve várj amíg elfogadja!");
	return true;
}

CMD:roadblock(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSFD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Te nem vagy se tuzoltó, se rendor!");
	new rb;
	if(sscanf(params, "u", rb))
		return SendClientMessage(playerid, 0x00ffffAA, "Használat: /roadblock [ Útzár ID ]");
	if(rb == 1)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(1459,plocx,plocy,plocz,ploca);
		SendClientMessage(playerid, 0xffff00AA, "Leraktál egy kicsi útzárat!");
	}
	else if(rb == 2)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(978,plocx,plocy,plocz,ploca);
		SendClientMessage(playerid, 0xffff00AA, "Leraktál egy közepes útzárat!");
	}
	else if(rb == 3)
	{
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		GetPlayerFacingAngle(playerid,ploca);
		CreateRoadblock(981,plocx,plocy,plocz,ploca);
		SendClientMessage(playerid, 0xffff00AA, "Leraktál egy nagy útzárat!");
	}
	else {	SendClientMessage(playerid, 0x00ffffAA, "1 - Kicsi útzár | 2 - Közepes útzár | 3 - Nagy útzár");	}
	return true;
}

CMD:removerb(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSFD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Te nem vagy se tuzoltó, se rendor!");
	DeleteClosestRoadblock(playerid);
	return true;
}

CMD:removeallrb(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSFD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Te nem vagy se tuzoltó, se rendor!");
	DeleteAllRoadblocks(playerid);
	foreach(Player, id)
	{
		if(PlayerInfo[id][pFrakcio] == FRAKCIO_LSPD || PlayerInfo[id][pFrakcio] == FRAKCIO_LSMD || PlayerInfo[id][pFrakcio] == FRAKCIO_LSFD || PlayerInfo[id][pFrakcio] == FRAKCIO_KATONA)
		{
			new string1[128];
			format(string1, sizeof(string1), "(( %s törölte az össze útzárat! ))", JatekosNev(playerid, true));
			SendClientMessage(id, 0xff6347AA, string1);
		}
	}
	return true;
}

CMD:boja(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSFD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Te nem vagy se tûzoltó, se rendõr!");
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /bója [ Lerak / Felvesz ]");	
		
	if(!strcmp(params, "lerak"))
	{
		new id = NINCS, Float:pos[4], i = NINCS;
		for(;++i < MAX_BOJA;)
		{
			if(Bojak[playerid][i][boposx] == 0.0)
			{
				id = i;
				break;
			}
		}

		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nem tudsz több bóját lerakni!");

		GetPlayerPos(playerid, PosExt(pos));
		GetPlayerFacingAngle(playerid, pos[3]);

		pos[2] -= 0.6;

		Bojak[playerid][id][boObj] = CreateDynamicObject(1238, PosExt(pos), 0.0, 0.0, 0.0);
		Bojak[playerid][id][boposx] = pos[0];
		Bojak[playerid][id][boposy] = pos[1];
		Bojak[playerid][id][boposz] = pos[2];
		
		//SCM(playerid, COL_MKEK, "Sikeresen leraktál egy bóját!");
		Cselekves(playerid, "lehelyezett egy bóját");

		Streamer_Update(playerid);
	}
	else if(!strcmp(params, "felvesz"))
	{
		new Float:pos[4], id = NINCS, i = NINCS;
		GetPlayerPos( playerid, PosExt( pos ) );

		for(;++i < MAX_BOJA;)
		{
			if(Bojak[playerid][i][boposx] == 0.0) continue;
			if(GetDistance( Bojak[playerid][i][boposx], Bojak[playerid][i][boposy], Bojak[playerid][i][boposz], PosExt( pos ) ) < 5.0)
			{
				id = i;
				break;
			}
		}

		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben felvehetõ bója!");

		DestroyDynamicObject( Bojak[playerid][id][boObj] );
		Bojak[playerid][id][boposx] = 0.0;
		Bojak[playerid][id][boposy] = 0.0;
		Bojak[playerid][id][boposz] = 0.0;
		Bojak[playerid][id][boObj] = INVALID_OBJECT_ID;
		
		//SCM(playerid, COL_MKEK, "Sikeresen felvettél egy bóját!");
		Cselekves(playerid, "felvett egy bóját a földrõl");
	}
	return true;
}

/*CMD:tazer(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Nem vagy rendõr!");
	
	if((GetTickCount() - PlayerInfo[playerid][pSokkolt]) < 15000)
	{
		SFM(playerid, COL_LRED, "Várnod kell még %d másodpercet.", ((GetTickCount() - PlayerInfo[playerid][pSokkolt]) / 1000));
		return true;
	}
	
	if(IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Jármûben nem használhatod!");
		
	if((PlayerInfo[playerid][pFegyver] != 24) && (PlayerInfo[playerid][pFegyver] != 23))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ezzel a fegyverrel nem tudsz sokkolni!");
	
	new gyanusitott = (isnull(params) ? GetClosestPlayer(playerid) : strval(params));
	
	if(gyanusitott == playerid)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Magadat nem sokkolhatod!");
	
	if(!IsPlayerConnected(gyanusitott))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Ilyen játékos nincs a szerveren!");
		
	if(PlayerInfo[gyanusitott][pBilincselve])
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Játékos már bilincsben van!");
	
	if(GetPlayerDistanceFromPlayer(playerid, gyanusitott) > 5)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "A közeledben nincs senki!");
	
	if(IsPlayerInAnyVehicle(gyanusitott))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Célszemély autóban van, szedd ki elõször !");
	
	SendClientMessage(gyanusitott, COLOR_LIGHTBLUE, "* Lesokkolt egy rendõr, és 60 másodpercig megbénultál.");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Lesokkoltad 60 másodpercre.");
	
	Cselekves(playerid, "lõ a sokkolóval, és lesokkolja a célszemélyt.", 0);
	GameTextForPlayer(gyanusitott, "~r~Sokkoltak", 2500, 3);
	Bilincs(gyanusitott, 1);
	LoopingAnim(gyanusitott, "CRACK", "crckdeth2", 4.1, 0, 1, 1, 1, 0);
	
	if(PlayerInfo[gyanusitott][pFegyver])
		PlayerInfo[gyanusitott][pFegyver] = 0;
	
	SetPlayerArmedWeapon(gyanusitott, 0);
	PlayerInfo[playerid][pSokkolt] = GetTickCount();
	return true;
}*/

CMD:hir(playerid, params[])//ah-ban
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_RIPORTER)
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(PlayerInfo[playerid][pTog][8])
		return SCM(playerid, COL_LRED, "Elõször kapcsold be riportokat, hogy lásd! (( /tog riporter ))");
	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Nem vagy riporter jármûben!");
	
	new id = JarmuID(GetPlayerVehicleID(playerid), playerid);
	if((vInfo[id][vModel] != 488 && vInfo[id][vModel] != 582) || vInfo[id][vMunka] != FRAKCIO_RIPORTER)
		return SCM(playerid, COL_LRED, "Nem vagy riporter jármûben!");
	
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /hír [Üzenet] | Hírek bemondása");
	if(!OOC_Ellenorzes(playerid, "/hír", params))
		return true;
		
	foreach(Player, i)
		if(IsPlayerConnected(i) && !PlayerInfo[i][pTog][8])
			SendFormatMessage(i, COLOR_ORANGE, "** Riporter %s: %s", JatekosNev(playerid, true), params);
	
	return true;
}
CMD:zene(playerid, params[])//ah-ban
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_RIPORTER && !Admin(playerid, FSEGED_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(PlayerInfo[playerid][pTog][8])
		return SCM(playerid, COL_LRED, "Elõször kapcsold be riportokat, hogy lásd! (( /tog riporter ))");
	
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /zene [ URL (.mp3, .pls, .ogg végzõdéssel) / Stop ] | Zene indítása és leállítása");
	
	if(!IsPlayerInAnyVehicle(playerid) && strcmp(params, "stop", true) != 0 && !Admin(playerid, FSEGED_SZINT))
		return SCM(playerid, COL_LRED, "Nem vagy riporter jármûben!");
	
	new id = JarmuID(GetPlayerVehicleID(playerid), playerid);
	if(strcmp(params, "stop", true) != 0 && !Admin(playerid, FSEGED_SZINT) && ((vInfo[id][vModel] != 488 && vInfo[id][vModel] != 582) || vInfo[id][vMunka] != FRAKCIO_RIPORTER))
		return SCM(playerid, COL_LRED, "Nem vagy riporter jármûben!");
		
	if(!strcmp(params, "stop", true))
	{
		foreach(Player, i)
		{
			if(!Belepve(i)) continue;
			if(IsPlayerConnected(i) && !PlayerInfo[i][pTog][8] && !PlayerInfo[i][pMP3_Megy] && !PlayerInfo[i][pJarmuZene])
				StopAudioStreamForPlayer(i);
		}
		
		ServerInfo[0][sZene][0] = EOS;
		return true;
	}
	
	if(!OOC_Ellenorzes(playerid, "/zene", params))
		return true;
	
	//if(strfind(params, ".mp3", true) == NINCS && strfind(params, ".pls", true) == NINCS && strfind(params, ".ogg", true) == NINCS)
		//return SCM(playerid, COL_LRED, "Hibás formátum! Csak .mp3, .pls, .ogg játszható le!");
	
	foreach(Player, i)
	{
		if(!Belepve(i)) continue;
		if(IsPlayerConnected(i) && !PlayerInfo[i][pTog][8] && !PlayerInfo[i][pMP3_Megy] && !PlayerInfo[i][pJarmuZene])
		{
			StopAudioStreamForPlayer(i);
			PlayAudioStreamForPlayer(i, params);
		}
	}
			
	format(ServerInfo[0][sZene], 128, "%s", params);
	return true;
}

CMD:live(playerid, params[])//ah-ban
{
	if(PlayerInfo[playerid][pFrakcio] != -1)
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	/*if(PlayerInfo[playerid][pTog][8])
		return SCM(playerid, COL_LRED, "Elõször kapcsold be riportokat, hogy lásd! (( /tog riporter ))");
	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Nem vagy riporter jármûben!");
	
	new id = JarmuID(GetPlayerVehicleID(playerid), playerid);
	if((vInfo[id][vModel] != 488 && vInfo[id][vModel] != 582) || vInfo[id][vMunka] != FRAKCIO_RIPORTER)
		return SCM(playerid, COL_LRED, "Nem vagy riporter jármûben!");
	
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /live [Játékos] | Itt tudod behívni, kúrni az adott élõ közvetítésbõl");
	*/
	return true;
}

CMD:buntetesem(playerid, params[])
{
	#pragma unused params
	if(!Bortonben(playerid))
		return SCM(playerid, COL_MKEK, "Te jelenleg nem vagy büntetésben!");
	
	SendClientMessage(playerid, COLOR_WHITE, "============ [ "#COL_MKEK"Büntetésem"#COL_FEHER" ] ============");
	SendFormatMessage(playerid, COLOR_WHITE, "Jelenleg "#COL_MKEK"%s"#COL_FEHER" vagy", BortonNev( Bortonben(playerid), true));
	SendFormatMessage(playerid, COLOR_WHITE, "Oka: "#COL_MKEK"%s", PlayerInfo[playerid][pJailOk]);
	SendFormatMessage(playerid, COLOR_WHITE, "Adta: "#COL_MKEK"%s", PlayerInfo[playerid][pJailAdta]);
	SendFormatMessage(playerid, COLOR_WHITE, "Idõ: még "#COL_MKEK"%s", TimeFormat(PlayerInfo[playerid][pJailIdo]));
	return true;
}

CMD:korozes(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Nem vagy a rendvédelem tagja!");
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /körözés [ Kiad / Töröl / Lista ]");
		
	new jatekos, oka[64], param[24];
	sscanf(params, "s[24]{}", param);
	
	if(!strcmp(param, "kiad"))
	{
		if(sscanf(params, "{s[24]}us[64]", jatekos, oka))
			return SCM(playerid, COL_MKEK, "Használat: /körözés kiad [Játékos] [Hivatali Indok]");
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		if(!OOC_Ellenorzes(playerid, "/körözés", oka))
			return true;
		if(Karakter_Ellenorzes(oka))
			return SCM(playerid, COL_LRED, "Az indok nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");
		if(strlen(oka) > 63)
			return SCM(playerid, COL_LRED, "Az indok maximum 63 karakter lehet!");
		
		SCM(playerid, COL_LRED, "Országos körözés kiadva! (( Körözési lista: /körözés lista ))");
		Korozes_Kiad(jatekos, playerid, oka, 1);
	}
	else if(!strcmp(param, "töröl") || !strcmp(param, "torol"))
	{
		if(sscanf(params, "{s[24]}us[64]", jatekos, oka))
			return SCM(playerid, COL_MKEK, "Használat: /körözés töröl [Játékos] [Oka]");
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		if(!OOC_Ellenorzes(playerid, "/körözés", oka))
			return true;
		if(Karakter_Ellenorzes(oka))
			return SCM(playerid, COL_LRED, "Az indok nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");
		if(strlen(oka) > 63)
			return SCM(playerid, COL_LRED, "Az indok maximum 63 karakter lehet!");
		if(!Korozes[jatekos][krSzint])
			return SCM(playerid, COL_LRED, "Ezen a játékoson nincs körözés!");
		
		SCM(playerid, COL_LRED, "Országos körözés törölve! (( Körözési lista: /körözés lista ))");
		Korozes_Torol(jatekos, playerid, oka);
	}
	else if(!strcmp(param, "lista"))
	{
		new db;
		SendClientMessage(playerid, COLOR_WHITE, "================ [ "#COL_MKEK"Körözött személyek"#COL_FEHER" ] ================");
		foreach(Player, i)
		{
			if(Belepve(i) && Korozes[i][krSzint])
			{
				db++;
				SendFormatMessage(playerid, COLOR_WHITE, "Körözött személy: "#COL_MKEK"%s"#COL_FEHER" | Kiadta: "#COL_MKEK"%s", Korozes[i][krNev], Korozes[i][krKiadta]);
				SendFormatMessage(playerid, COLOR_WHITE, "Körözés oka: "#COL_MKEK"%s", Korozes[i][krOka]);
			}
		}
		if(!db)
			SCM(playerid, COL_LRED, "Jelenleg nincsenek körözött személyek!");
	}
	return true;
}

CMD:mp3(playerid, params[])
{
	#pragma unused params
	if(!PlayerInfo[playerid][pBoltCucc][ BL_MP3 ])
		return SCM(playerid, COL_LRED, "Neked még nincs MP3 lejátszód! Ha szeretnél egyet, vegyél a boltban.");
		
	new dstr[1024], tmp[128], i = NINCS;
	format(dstr, sizeof(dstr), #COL_VZOLD"Rádió kikapcsolása");
	for(;++i < sizeof(RadioLista);)
	{
		if(i % 2 == 1) format(tmp, sizeof(tmp), "\n"#COL_MKEK"%s", RadioLista[i][1]);
		else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s", RadioLista[i][1]);
		strcat(dstr, tmp, sizeof(dstr));
	}
	ShowPlayerDialog(playerid, DIALOG_RADIO, DIALOG_STYLE_LIST, "MP3 - Rádió lista", dstr, "Hallgat", "Mégse");
	
	return true;
}

CMD:sk(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /(s)ebesség(k)orlát [(50 - 130)km/h | 0 = Kikapcsolás]");
	
	if(!PlayerInfo[playerid][pJarmuben])
		return SCM(playerid, COL_LRED, "Csak jármûben használható!");
		
	if(IsABicikli( vInfo[ PlayerInfo[playerid][pJarmuben] ][vModel] ))
		return SCM(playerid, COL_LRED, "A bicikli sebességét nem módosíthatod!");
		
	new ertek = strval(params);
	if(ertek > 130 || (ertek < 50 && ertek != 0))
		return SCM(playerid, COL_LRED, "Hibás érték! Minimum 50Km/h maximum 130Kh/h | 0 = kikapcsol");
		
	PlayerInfo[playerid][pSK] = ertek;
	SFM(playerid, COL_VZOLD, "** Sebességkorlát beállítva %dKm/h-ra!", ertek);
	return true;
}

//stRval(kin_yal_lak, cdm_united);
CMD:vontat(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Nem ülsz jármûben!");
	if(GetPlayerVehicleSeat(playerid))
		return SCM(playerid, COL_LRED, "Vezetõnek kell lenned, hogy vontathass!");
		
	new id = NINCS, sid;
	
	if(!isnull(params) && IsNumeric(params))
		id = strval(params);
	
	new bool:ok, i = NINCS;
	if(vInfo[ PlayerInfo[playerid][pJarmuben] ][vModel] != 525)//ha nem vontatós kocsi
	{
		if(!PlayerInfo[playerid][pBoltCucc][ BL_VONTATO ])
			return SCM(playerid, COL_LRED, "Neked nincs vontatóköteled! Vegyél egyet valamelyik boltban.");
	
		for(;++i < sizeof(NemVontatoJarmu);) {
			if(NemVontatoJarmu[i] == vInfo[ PlayerInfo[playerid][pJarmuben] ][vModel]) {
				ok = true;
				break;
			}
		}
	
		if(ok)
			return SCM(playerid, COL_LRED, "Ezzel a jármûvel nem vontathatsz!");
	}
	
	if(id == NINCS)
	{
		id = GetClosestVehicle(playerid, false);
		SCM(playerid, COL_MKEK, "Használat: /vontat vagy /vontat [JármûID] | Alap esetben a legközelebbi jármûvet vontatja!");
	}
	if(!IsVehicleConnected(id) && (id > MAX_VEHICLES || id < 0) || GetDistanceToVehicle(playerid, id) > 10)
		return SCM(playerid, COL_LRED, "Nincs ilyen jármû a közeledben!");
	
	sid = vInfo[ PlayerInfo[playerid][pJarmuben] ][vID];
		
	new model = GetVehicleModel(id);
	i = NINCS, ok = false;
	for(;++i < sizeof(NemVontathatoJarmu);) {
		if(NemVontathatoJarmu[i] == model) {
			ok = true;
			break;
		}
	}
	
	if(ok)
		return SCM(playerid, COL_LRED, "Ezt a jármûvet nem vontathatod!");

	if(!GetVehicleTrailer(sid)) AttachTrailerToVehicle(id, sid);
	else DetachTrailerFromVehicle(sid);
	
	SetVehicleVirtualWorld(id, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(id, GetPlayerInterior(playerid));
	SFM(playerid, COL_VZOLD, "Elkezdted vontatni a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûvet!", id, JarmuID(id, playerid));
	return true;
}

CMD:lenyomoz(playerid, params[])
{
	if(!Admin(playerid, 3) && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(!Admin(playerid, 3) && !IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Rendõr jármûben kell ülnöd!");
	
	new vm = vInfo[ JarmuID( GetPlayerVehicleID(playerid), playerid ) ][vMunka];
	if(!Admin(playerid, 3) && vm != FRAKCIO_LSPD && vm != FRAKCIO_KATONA && vm != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Rendõr jármûben kell ülnöd!");
		
	new param[24];
	if(sscanf(params, "s[24]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /lenyomoz [ Játékos / Jármû / Befejez ]");
		
	if(PlayerInfo[playerid][pLenyomoz] > gettime())
		return SFM(playerid, COL_LRED, "Következõ lenyomozásig még várnod kell "#COL_MKEK"%d"#COL_FEHER" másodpercet!", (PlayerInfo[playerid][pLenyomoz] - gettime()));
		
	if(!strcmp(param, "játékos", true) || !strcmp(param, "jatekos", true))
	{
		new jatekos;
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /lenyomoz játékos [Játékos Név/ID]");
		
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos) || !Belepve(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][ptelefonszam] == 0 || PlayerInfo[jatekos][pTog][5])
		{
			if(Admin(playerid, 1))
				SCM(playerid, COL_LRED, "Jelenleg nincs, vagy ki van kapcsolva a telefonja, de mivel Admin vagy így látod a pozícióját!");
			else
			{
				GameTextForPlayer(playerid, "~b~Lenyomozás sikertelen...", 2500, 3);
				SCM(playerid, COL_LRED, "Célszemély bemérése sikertelen, legközelebb 20 másodperc múlva próbálkozhatsz.");
				PlayerInfo[playerid][pLenyomoz] = (gettime() + 20);
				return true;
			}
		}
		
		GameTextForPlayer(playerid, "~b~Lenyomozás folyamatban...", 2500, 3);
		SCM(playerid, COL_VZOLD, "Célszemély pillanatnyi koordinátái betáplálva a GPS-be!");
		new Float:pos[3];
		GetPlayerPos(jatekos, PosExt(pos));
		SetPlayerCheckpoint(playerid, PosExt(pos), 5.0);
		PlayerInfo[playerid][pCP] = CP_LENYOMOZ;
	}
	else if(!strcmp(param, "jármû", true) || !strcmp(param, "jarmu", true))
	{
	/*
		new car;
		if(sscanf(params, "{s[24]}d", car))
			return SCM(playerid, COL_MKEK, "Használat: /lenyomoz jármû [Rendszám]");
		
		if(!car || car > MAX_VEHICLES || !IsVehicleConnected(car))
			return SCM(playerid, COL_LRED, "Nincs ilyen jármû!");
		
		GameTextForPlayer(playerid, "~b~Lenyomozás folyamatban...", 2500, 3);
		SCM(playerid, COL_VZOLD, "Jármû pillanatnyi koordinátái betáplálva a GPS-be!");
		new Float:pos[3];
		GetVehiclePos(car, PosExt(pos));
		SetPlayerCheckpoint(playerid, PosExt(pos), 5.0);
		PlayerInfo[playerid][pCP] = CP_LENYOMOZ;
	*/
	    SCM( playerid, COL_LRED, "A jármû lenyomozás funkciója ki lett véve a v2.2 update-el. Sry :'(.");
	}
	else if(!strcmp(param, "befejez", true))
	{
		if(PlayerInfo[playerid][pCP] != CP_LENYOMOZ)
			return SCM(playerid, COL_LRED, "Jelenleg nincs megjelölt cél a GPS-en!");
			
		DisablePlayerCheckpoint(playerid);
		PlayerInfo[playerid][pCP] = 0;
		SCM(playerid, COL_VZOLD, "GPS jelölés kikapcsolva!");
	}
	
	return true;
}

CMD:ticket(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	new jatekos, penz;
	if(sscanf(params, "ud", jatekos, penz))
		return SCM(playerid, COL_MKEK, "Használat: /ticket [Játékos] [Összeg] | Helyszíni bírság kiszabása");
	
	if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
	
	if(playerid == jatekos)
		return SCM(playerid, COL_LRED, "Jaj te kis huncut, ne büntesd magad :3");
	
	if(penz < 50 || penz > 1000)
		return SCM(playerid, COL_LRED, "A bírság összege minimum 50$ és maximum 1000$ lehet!");
		
	if(PlayerInfo[jatekos][ppenz] < penz)
		return SCM(playerid, COL_LRED, "Ennek a személynek nincs elég készpénze a bírság kifizetéséhez!");
		
	SFM(playerid, COL_MKEK, "Megbírságoltad "#COL_MKEK"%s"#COL_FEHER"-t "#COL_MKEK"%s"#COL_FEHER"$-ra (Várj míg elfogadja)", JatekosNev(jatekos, true), FormatNumber(penz, 0, ','));
	SFM(jatekos, COL_MKEK, "%s átnyújtott neked egy helyszíni bírságot amely "#COL_MKEK"%s"#COL_FEHER"$-ba kerül!", JatekosNev(playerid, true), FormatNumber(penz, 0, ','));
	SCM(jatekos, COL_MKEK, "Amennyiben ki szeretnéd fizetni írd be "#COL_MKEK"/elfogad bírság!");
	Cselekves(playerid, "átnyújtott egy bírságot valakinek..", 1);
	PlayerInfo[jatekos][pBirsag][0] = playerid;
	PlayerInfo[jatekos][pBirsag][1] = penz;
	PlayerInfo[jatekos][pBirsag][2] = 2;
	return true;
}

CMD:elutasit(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /elutasít [ Csere ]");
	
	return true;
}

CMD:elfogad(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /elfogad [ Bírság / Számla / Csere / Házasság / Kézfogás / Motozás]");

	if(!strcmp(params, "szondázás", true) || !strcmp(params, "szondazas", true))
	{
		if(Szondaz[playerid] == -1) return SCM(playerid,COL_LRED,"Senki sem szondázna meg!");
		if(GetPlayerDrunkLevel(playerid) == 0) 
		{
			SendClientMessage(Szondaz[playerid], COLOR_WHITE, "DIAGNÓZIS: Az illetõ {ff0000}nem{ffffff} fogyasztott alkoholt.");
			return true;
		}
		else
		{
			new text[64];
			format(text, sizeof(text), "DIAGNÓZIS: Az illetõ véralkohol szintje {ff0000}magas{ffffff}.");
			SendClientMessage(Szondaz[playerid], COLOR_WHITE, text);
		}
		Szondaz[Szondaz[playerid]] = NINCS;
		Szondaz[playerid] = NINCS;
		return true;
	}
	if(!strcmp(params, "Motozás", true) || !strcmp(params, "motozas", true))
	{
		if(Megmotozna[playerid] == -1) return SCM(playerid,COL_LRED,"Senki sem motozna meg!");
		OnePlayAnim(Megmotozna[playerid],"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
		OnePlayAnim(Megmotozna[playerid],"SPRAYCAN","spraycan_full",4.0,0,0,0,0,0);
		
		new bool:van;
		SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "=====[ "#COL_MKEK"Az illetõnél lévõ tárgyak"#COL_FEHER" ]=====");
		
		if(PlayerInfo[Megmotozna[playerid]][pMarihuana] || PlayerInfo[Megmotozna[playerid]][pKokain] || PlayerInfo[Megmotozna[playerid]][pHeroin])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Némi drog");
			van = true;
		}
			
		if(PlayerInfo[Megmotozna[playerid]][pMaterial])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Materiál");
			van = true;
		}
			
		if(PlayerInfo[Megmotozna[playerid]][pVas])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Néhány kilogramm vas");
			van = true;
		}
			
		if(PlayerInfo[Megmotozna[playerid]][ptelefonszam])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Mobiltelefon");
			van = true;
		}
			
		if(PlayerInfo[playerid][pBoltCucc][ BL_MP3 ])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "MP3 lejátszó");
			van = true;
		}
			
		if(PlayerInfo[Megmotozna[playerid]][pGPSV])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "GPS lokátor");
			van = true;
		}
			
		if(PlayerInfo[Megmotozna[playerid]][ppenz])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Némi készpénz");
			van = true;
		}

		if(PlayerInfo[Megmotozna[playerid]][pLampa])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Lámpa");
			van = true;
		}

		if(PlayerInfo[Megmotozna[playerid]][pDrogAnyag][0])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Marihuána mag");
			van = true;
		}
		
		if(PlayerInfo[playerid][pBoltCucc][ BL_BONG ])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Bong");
			van = true;
		}
		
		if(PlayerInfo[playerid][pBoltCucc][ BL_PIPA ])
		{
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Pipa");
			van = true;
		}
		
		new i = -1, num = 0, fegyverek[128] = "Fegyver(ek):";
		for(;++i < 13;)
		{
			if(PlayerInfo[playerid][pFegyverek][i] && PlayerInfo[playerid][pToltenyek][i])
			{
				format(fegyverek, sizeof(fegyverek), "%s %s,", fegyverek, aWeaponNames[PlayerInfo[playerid][pFegyverek][i]]);
				num++;
			}
		}
		
		if(num)
		{
			fegyverek[strlen(fegyverek) - 1] = '\0';
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, fegyverek);
			van = true;
		}
		
		if(!van)
			SendClientMessage(Megmotozna[playerid], COLOR_WHITE, "Nincs nála semmi értéktárgy..");

		Cselekves(Megmotozna[playerid], "megmotozott valakit..");
		Megmotozna[Megmotozna[playerid]] = NINCS;
		Megmotozna[playerid] = NINCS;
		return 1;
	}
	if(!strcmp(params, "kézfogás", true) || !strcmp(params, "kezfogas", true))
	{
		if(Kezetfogna[playerid] == -1) return SCM(playerid,COL_LRED,"Senki nem fogna veled kezet!");
		new p = Kezetfogna[playerid];
		if(p == INVALID_PLAYER_ID)
		{
			SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
			return 1;
		}
		if(GetPlayerDistanceFromPlayer(playerid,p) > 1) return SCM(playerid,COL_LRED, "Nincs a közeledben a játékos!");		
		switch(KezetfognaStilus[playerid])
		{
			case 1:
			{
				OnePlayAnim(playerid,"GANGS","hndshkba",4.0,0,0,0,0,0);
				OnePlayAnim(p,"GANGS","hndshkba",4.0,0,0,0,0,0);			
			}
			case 2:
			{
				OnePlayAnim(playerid,"GANGS","hndshkda",4.0,0,0,0,0,0);
				OnePlayAnim(p,"GANGS","hndshkda",4.0,0,0,0,0,0);
			}
			case 3:
			{
				OnePlayAnim(playerid,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);
				OnePlayAnim(p,"GANGS","hndshkfa_swt",4.0,0,0,0,0,0);	
			}
		}
		Cselekves(playerid, "kezetfogott valakivel.", 1);
		Kezetfogna[p] = NINCS;
		Kezetfogna[playerid] = NINCS;
		KezetfognaStilus[p] = NINCS;
		KezetfognaStilus[playerid] = NINCS;
		return 1;
	}
	if(!strcmp(params, "számla", true) || !strcmp(params, "szamla", true))
	{
		if(PlayerInfo[playerid][pBirsag][0] == NINCS || !PlayerInfo[playerid][pBirsag][1] || PlayerInfo[playerid][pBirsag][2] != 1)
				return SCM(playerid, COL_LRED, "Neked még nem nyújtottak át számlát!");
			
		new jatekos = PlayerInfo[playerid][pBirsag][0];
		
		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs a közeledben aki a számlát odaadta!");
		
		if(PlayerInfo[playerid][pBszPenz] < PlayerInfo[playerid][pBirsag][1])
		{
			SCM(playerid, COL_LRED, "Nincs nálad elegendõ készpénz, hogy ezt ki tudd fizetni!");
			SFM(jatekos, COL_LRED, "%s nem rendelkezik elegendõ készpénzzel, hogy ezt ki tudja fizetni!", JatekosNev(playerid, true));
			goto osszeg_nullaz;
		}
		
		PlayerInfo[playerid][pBszPenz] -= PlayerInfo[playerid][pBirsag][1];
		if(PlayerInfo[jatekos][pFrakcio] == FRAKCIO_SZERELO)
		{
			FInfo[ PlayerInfo[jatekos][pFrakcio] ][fPenz] += PlayerInfo[playerid][pBirsag][1];
		}
		else
		{
			PlayerInfo[jatekos][pBszPenz] += PlayerInfo[playerid][pBirsag][1];
		}
		SFM(playerid, COL_VZOLD, "Számla kifizetve! Összeg: "#COL_MKEK"%s"#COL_FEHER"$", FormatNumber(PlayerInfo[playerid][pBirsag][1], 0, ','));
		SFM(jatekos, COL_VZOLD, "%s kifizette a számlát! Összeg: "#COL_MKEK"%s"#COL_FEHER"$ átutalva a számládra.",JatekosNev(playerid, true), FormatNumber(PlayerInfo[playerid][pBirsag][1], 0, ','));
		
		osszeg_nullaz:
		PlayerInfo[playerid][pBirsag][0] = NINCS;
		PlayerInfo[playerid][pBirsag][1] = 0;
		PlayerInfo[playerid][pBirsag][2] = 0;
		return true;
	}
	else if(!strcmp(params, "házasság", true) || !strcmp(params, "hazassag", true))
	{
		if(Hazassag[playerid] == -1) return SCM(playerid,COL_LRED,"Senki nem kérte meg a kezed!");
		new kivel = Hazassag[Hazassag[playerid]];
		if(!IsPlayerConnected(kivel)) return 1;
		if(GetPlayerDistanceFromPlayer(playerid, kivel) > 4)
		{
			return SCM(playerid, COL_LRED, "Nincs a közeledben!!");
		}
		SendFormatMessage(playerid, COLOR_WHITE, "Pap: %s, valóban %s-t akarod férjednek? Örökké szeretned kell, es hûséget kell fogadnod neki!", JatekosNev(playerid), JatekosNev(kivel));
		SendClientMessage(playerid, COLOR_WHITE, "Ha igen, ird be, hogy 'igen', bármi mást írsz be, azzal visszautasítod!");
		Beirhatjahogyigen[playerid]  = 1;
		return true;
	}
	else if(!strcmp(params, "bírság", true) || !strcmp(params, "birsag", true))
	{
		if(PlayerInfo[playerid][pBirsag][0] == NINCS || !PlayerInfo[playerid][pBirsag][1] || PlayerInfo[playerid][pBirsag][2] != 2)
			return SCM(playerid, COL_LRED, "Neked még nem nyújtottak át bírságot!");
		
		new jatekos = PlayerInfo[playerid][pBirsag][0];
		
		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs a közeledben aki a bírságot kiszabta!");
		
		GiveMoney(playerid,-PlayerInfo[playerid][pBirsag][1]);
		FInfo[ PlayerInfo[jatekos][pFrakcio] ][fPenz] += PlayerInfo[playerid][pBirsag][1];
		SFM(playerid, COL_VZOLD, "Bírság kifizetve! Összeg: "#COL_MKEK"%s"#COL_FEHER"$", FormatNumber(PlayerInfo[playerid][pBirsag][1], 0, ','));
		SFM(jatekos, COL_VZOLD, "%s kifizette a helyszíni bírságot! Összeg: "#COL_MKEK"%s"#COL_FEHER"$ átutalva a rendõrségnek.",JatekosNev(playerid, true), FormatNumber(PlayerInfo[playerid][pBirsag][1], 0, ','));
		
		PlayerInfo[playerid][pBirsag][0] = NINCS;
		PlayerInfo[playerid][pBirsag][1] = 0;
	}
	else if(!strcmp(params, "csere", true))
	{
		if(PlayerInfo[playerid][pProcess][0] != PR_CSERE_HAZ && PlayerInfo[playerid][pProcess][0] != PR_CSERE_JARMU)
			return SCM(playerid, COL_LRED, "Még senki se kínált fel cserét a számodra!");
		
		new jatekos = PlayerInfo[playerid][pProcess][1];
		
		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !IsPlayerConnected(jatekos))
			return SCM(playerid, COL_LRED, "A másik fél nincs a közeledben!");
		
		if(PlayerInfo[jatekos][pProcess][0] != PR_CSERE_HAZ && PlayerInfo[jatekos][pProcess][0] != PR_CSERE_JARMU)
			return SCM(playerid, COL_LRED, "Hiba történt! Ez a játékos nem kínált fel számodra cserét!");
		
		if(PlayerInfo[playerid][pBszPenz] < 550)
		{
			SCM(playerid, COL_LRED, "Az átiratás költsége "#COL_MKEK"550"#COL_FEHER"$ neked nincs ennyi a bankszámládon!");
			SFM(jatekos, COL_LRED, "Az átiratás költsége "#COL_MKEK"550"#COL_FEHER"$, %s nem rendelkezik ekkora összeggel!", JatekosNev(playerid, true));
			goto PR_HJ_NULL;
		}
		
		switch(PlayerInfo[playerid][pProcess][0])
		{
			case PR_CSERE_HAZ:
			{
				new i = NINCS;
				for(;++i < MAX_HAZ_JARMU;)
				{
					if(PlayerInfo[playerid][pHazKulcs][i] == PlayerInfo[playerid][pProcess][3])
						PlayerInfo[playerid][pHazKulcs][i] = PlayerInfo[playerid][pProcess][2];
						
					if(PlayerInfo[jatekos][pHazKulcs][i] == PlayerInfo[playerid][pProcess][2])
						PlayerInfo[jatekos][pHazKulcs][i] = PlayerInfo[playerid][pProcess][3];
				}
				
				HazInfo[ PlayerInfo[playerid][pProcess][2] ][hTulajID] = PlayerInfo[playerid][pID];
				HazInfo[ PlayerInfo[playerid][pProcess][3] ][hTulajID] = PlayerInfo[jatekos][pID];
				
				doQuery("UPDATE `"#MYSQL_HAZ_TABLA"` SET TulajID = '%d', tulaj = '%s' WHERE id = '%d'", PlayerInfo[playerid][pID], JatekosNev(playerid, false, true), PlayerInfo[playerid][pProcess][2]);
				doQuery("UPDATE `"#MYSQL_HAZ_TABLA"` SET TulajID = '%d', tulaj = '%s' WHERE id = '%d'", PlayerInfo[jatekos][pID], JatekosNev(jatekos, false, true), PlayerInfo[playerid][pProcess][3]);
				
				Adat_Update( playerid, ADAT_HAZ_EX );
				Adat_Update( playerid, ADAT_HAZ_EX );
				
				SCM(playerid, COL_VZOLD, "Házaitok sikeresen elcseréve! Az átiratás össszege "#COL_MKEK"550"#COL_FEHER"$ levonva a bankszámládról!");
				SCM(jatekos, COL_VZOLD, "Házaitok sikeresen elcserélve!");
			}
			case PR_CSERE_JARMU:
			{
				new i = NINCS;
				for(;++i < MAX_HAZ_JARMU;)
				{
					if(PlayerInfo[playerid][pJarmuKulcs][i] == PlayerInfo[playerid][pProcess][3])
						PlayerInfo[playerid][pJarmuKulcs][i] = PlayerInfo[playerid][pProcess][2];
						
					if(PlayerInfo[jatekos][pJarmuKulcs][i] == PlayerInfo[playerid][pProcess][2])
						PlayerInfo[jatekos][pJarmuKulcs][i] = PlayerInfo[playerid][pProcess][3];
				}
				
				vInfo[ PlayerInfo[playerid][pProcess][2] ][vTulajID] = PlayerInfo[playerid][pID];
				vInfo[ PlayerInfo[playerid][pProcess][3] ][vTulajID] = PlayerInfo[jatekos][pID];
				
				doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET TulajID = '%d', Tulaj = '%s' WHERE ID = '%d'", PlayerInfo[playerid][pID], JatekosNev(playerid, false, true), PlayerInfo[playerid][pProcess][2]);
				doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET TulajID = '%d', Tulaj = '%s' WHERE ID = '%d'", PlayerInfo[jatekos][pID], JatekosNev(jatekos, false, true), PlayerInfo[playerid][pProcess][3]);
				
				Adat_Update( playerid, ADAT_JARMU_EX );
				Adat_Update( playerid, ADAT_JARMU_EX );
				
				SCM(playerid, COL_VZOLD, "Jármûveitek sikeresen elcseréve! Az átiratás össszege "#COL_MKEK"550"#COL_FEHER"$ levonva a bankszámládról!");
				SCM(jatekos, COL_VZOLD, "Jármûveitek sikeresen elcserélve!");
			}
		}
		
		
		PlayerInfo[playerid][pBszPenz] -= 550;
		PlayerInfo[jatekos][pBszPenz] -= 550;
		FInfo[ FRAKCIO_KORMANY ][fPenz] += 1000;
		
		PR_HJ_NULL:
		PlayerInfo[jatekos][pProcess][0] = 0;
		PlayerInfo[playerid][pProcess][0] = 0;
	}
	else if(!strcmp(params, "szerzõdés", true) || !strcmp(params, "szerzodes", true))
	{
		if(PlayerInfo[playerid][pProcess][0] != PR_ELAD_HAZ)
			return SCM(playerid, COL_LRED, "Senki sem kínált fel szmodra adásvételi szerzõdést!");
		
		if(PlayerInfo[playerid][pBszPenz] < PlayerInfo[playerid][pProcess][2])
			return SCM(playerid, COL_LRED, "Nincs elegendõ pénz a bankszámládon, hogy ezt megvehesd!");

		if(!IsPlayerConnected(PlayerInfo[playerid][pProcess][1]) || HazInfo[PlayerInfo[playerid][pProcess][3]][hTulajID] != PlayerInfo[PlayerInfo[playerid][pProcess][1]][pID])
		{
			SCM(playerid, COL_LRED, "Egy hiba történt! A másik fél nincs fent a szerveren!");
			PlayerInfo[playerid][pProcess][0] = 0;
			PlayerInfo[playerid][pProcess][1] = NINCS;
			PlayerInfo[playerid][pProcess][2] = 0;
			return 1;
		}
		
		
		new ki = PlayerInfo[playerid][pProcess][1],mennyit = PlayerInfo[playerid][pProcess][2],melyik = PlayerInfo[playerid][pProcess][3];
		
		PlayerInfo[playerid][pBszPenz] -= mennyit;
		PlayerInfo[ki][pBszPenz] += mennyit;
		HazInfo[melyik][hTulajID] = PlayerInfo[playerid][pID];
		Adat_Update( playerid, ADAT_HAZ );
		SFM(playerid,COL_MKEK,"Megvetted a házat %d $ ért",mennyit);
		SFM(ki,COL_MKEK,"Megvették tõlled a házad %d $ ért",mennyit);
		PlayerInfo[playerid][pProcess][0] = 0;
		PlayerInfo[playerid][pProcess][1] = NINCS;
		PlayerInfo[playerid][pProcess][2] = 0;
	}
	return true;
}

CMD:katonasag(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	//if(IsPlayerInRangeOfPoint(playerid, 25.0, Race[i][rPosx][0],  Race[i][rPosy][0],  Race[i][rPosz][0]);	
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /katonasag [ Engedélyez, Felvesz ]");
	
	if(!strcmp(params, "engedelyez", true) || !strcmp(params, "engedélyez", true))
	{
	    // ez az a parancs, amit krook (Daniel Risk) sosem fog használni
		if(PlayerInfo[playerid][pLeader] == 0)
			return SCM(playerid, COL_LRED, "Csak leader!!");
		
		new dstr[1024], tmp[128], i = NINCS;
		for(;++i < sizeof(Katona_Engedelyek);)
		{
			if(Katona_Engedelyek[i][1][0]) format(tmp, sizeof(tmp), "\n"#COL_VZOLD"%s",Katona_Engedelyek[i][0]);
			else format(tmp, sizeof(tmp), "\n"#COL_PIROS"%s", Katona_Engedelyek[i][0]);
			
			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid, DIALOG_KATONA_ENGEDELY, DIALOG_STYLE_LIST, "Felszerelések", dstr, "Végrehajt", "Mégse");
	}
	else if(!strcmp(params, "felvesz", true))
	{
		new dstr[1024], tmp[128], i = NINCS;
		for(;++i < sizeof(Katona_Engedelyek);)
		{
			if(Katona_Engedelyek[i][1][0]) format(tmp, sizeof(tmp), "\n"#COL_MKEK"%s",Katona_Engedelyek[i][0]);
			else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s", Katona_Engedelyek[i][0]);
			
			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid, DIALOG_KATONA_FELVESZ, DIALOG_STYLE_LIST, "Felszerelések", dstr, "Felvesz", "Mégse");
	}
	return true;
}
CMD:fbi(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1460.7856,-1764.6144,3285.2859))
	{
		if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
		{
			PlayerInfo[playerid][pCP] = CP_GPS;
			SetPlayerCheckpoint(playerid, 1460.7856,-1764.6144,3285.2859, 5.0);
		}
		SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
		return true;
	}
	
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /fbi [ Engedélyez, Felvesz ]");
	
	if(!strcmp(params, "engedelyez", true) || !strcmp(params, "engedélyez", true))
	{
		if(PlayerInfo[playerid][pLeader] == 0)
			return SCM(playerid, COL_LRED, "Csak leader!!");
		
		new dstr[1024], tmp[128], i = NINCS;
		for(;++i < sizeof(FBI_Engedely);)
		{
			if(Katona_Engedelyek[i][1][0]) format(tmp, sizeof(tmp), "\n{ffffff}%s",FBI_Engedely[i][0]);
			else format(tmp, sizeof(tmp), "\n"#COL_PIROS"%s", FBI_Engedely[i][0]);
			
			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid, DIALOG_FBI_ENGEDELY, DIALOG_STYLE_LIST, "Felszerelések", dstr, "Végrehajt", "Mégse");
	}
	else if(!strcmp(params, "felvesz", true))
	{
		new dstr[1024], tmp[128], i = NINCS;
		for(;++i < sizeof(FBI_Engedely);)
		{
			if(FBI_Engedely[i][1][0]) format(tmp, sizeof(tmp), "\n"#COL_MKEK"%s",FBI_Engedely[i][0]);
			else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s", FBI_Engedely[i][0]);
			
			strcat(dstr, tmp, sizeof(dstr));
		}
		ShowPlayerDialog(playerid, DIALOG_FBI_FELVESZ, DIALOG_STYLE_LIST, "Felszerelések", dstr, "Felvesz", "Mégse");
	}
	return true;
}

CMD:pee(playerid, params[])
{
	#pragma unused params
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben nem tudsz üríteni!");
		
	if(PlayerInfo[playerid][pVizelet] < 10.0)
		return SCM(playerid, COL_LRED, "Még nem kell ürítened!");
	
	if((PlayerInfo[playerid][pPisil] = true - PlayerInfo[playerid][pPisil]))
		Szukseglet(playerid, -20.0, -25.0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
		
	//else SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	
	return true;
}

CMD:menu(playerid, params[])
{
	#pragma unused params
	if(KozeliObject( playerid, 2 ) == NINCS)
		return SCM(playerid, COL_LRED, "Nincs a közeledben HotDog stand!");
	
	new dstr[1024], tmp[128], i = NINCS;
	for(;++i < sizeof(Etel_Menu);)
	{
		if(PenzEgyenleg(playerid) >= Etel_Menu[i][1][0]) format(tmp, sizeof(tmp), "\n"#COL_VZOLD"%s\t[ %d$ ]", Etel_Menu[i][0], Etel_Menu[i][1][0]);
		else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s\t[ %d$ ]", Etel_Menu[i][0], Etel_Menu[i][1][0]);
		
		strcat(dstr, tmp, sizeof(dstr));
	}
	ShowPlayerDialog(playerid, DIALOG_HOTDOG_MENU, DIALOG_STYLE_LIST, "Menü", dstr, "Megvesz", "Mégse");
	
	return true;
}

CMD:cuff(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new jatekos = (isnull(params) ? GetClosestPlayer(playerid) : sscanf(params, "u", jatekos));
	if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "A közeledben nincs senki! Lehetõségek: /bilincs [Játékos]");
		
	if(playerid == jatekos)
		return SCM(playerid, COL_LRED, "Magadat nem bilincselheted meg!");
	
	if(!PlayerInfo[jatekos][pBilincselve])
	{
		if(IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COL_LRED, "Jármûben nem bilincselhetsz!");
		if(GetPlayerWeapon(jatekos))
			return SCM(playerid, COL_LRED, "Ha van a kezébe fegyver nem bilincselheted meg!");
		
		SendClientMessage(jatekos, COLOR_LIGHTBLUE, "* Rendõr megbilincselt jó szorosan.");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Megbilincselted a személyt.");
		Cselekves(playerid, "megbilincseli a célszemélyt.", 0);
		GameTextForPlayer(jatekos, "~r~Megbilincseltek", 2500, 3);
		Bilincs(jatekos, 2);
		SetPlayerSpecialAction(jatekos, SPECIAL_ACTION_CUFFED);
		//~ BilincsFel(jatekos);
		
	} else {
	
		SendClientMessage(jatekos, COLOR_LIGHTBLUE, "* Rendõr levette rólad a bilincseket");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Levetted a személy bilincseit");
		GameTextForPlayer(playerid, "~g~Bilincs leveve", 2500, 3);
		Bilincs(jatekos, 0);
	}
	
	return true;
}

CMD:berak(playerid, params[])
{
	new ules, jatekos;
	if(sscanf(params, "ud", jatekos, ules))
		return SCM(playerid, COL_MKEK, "Használat: /berak [Játékos] [Ülés(1-3)]");
		
	if(ules < 1 || ules > 3)
		return SCM(playerid, COL_LRED, "Hibás ülés! 1 - 3 lehet!");
		
	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
	if(jatekos == playerid)
		return SCM(playerid, COL_VZOLD, "Cicaborsó, magadat nem tudod berakni :D");
		
	if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 5)
		return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
		
	if(IsPlayerInAnyVehicle(jatekos))
		return SCM(playerid, COL_LRED, "A játékos jelenleg is jármûben van!");
		
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben ülsz, így nem tudod berakni!");
		
	if(PlayerInfo[playerid][pBilincselve])
		return SCM(playerid, COL_LRED, "Így nem hiszem, hogy sikerülne...");
		
	if(!PlayerInfo[jatekos][pBilincselve])
		return SCM(playerid, COL_LRED, "Nincs megbilincselve vagy leütve, így nem tudod berakni...");
		
	new car = GetClosestVehicle(playerid);
	if(GetDistanceToVehicle(playerid, car) > 5.0)
		return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
	
	if(IsABicikli(vInfo[JarmuID(car, playerid)][vModel]))
		return SCM(playerid, COL_LRED, "Cicaborsó, biciklin mégis, hogy akarsz egyensúlyozni? :D");
		
	ClearAnimations(jatekos);
	if(PlayerInfo[jatekos][pBilincselve])
		TogglePlayerControllable(jatekos, false);
		
	PutPlayerInVehicle(jatekos, car, ules);
	Cselekves(playerid, "berakott valakit a jármûbe");
	SCM(playerid, COL_VZOLD, "Beraktad a jármûbe!");
	return true;
}

CMD:visz(playerid, params[])
{
	new jatekos;
	if(isnull(params))
		jatekos = GetClosestPlayer(playerid);
	else sscanf(params, "u", jatekos);
	
	if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 4) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos)
		return SCM(playerid, COL_LRED, "A közeledben nincs senki!");
		
	if(PlayerInfo[jatekos][pjail] && PlayerInfo[jatekos][pjail] != 1)
		return SCM(playerid, COL_LRED, "Persze... Nem fogod rácson keresztül!");
		
	if(PlayerInfo[jatekos][pBilincselve])
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
			return SCM(playerid, COL_LRED, "Ez a játékos bilincsben van, csak rendõr vagy katona viheti el!");
		
	if(!PlayerInfo[jatekos][pBilincselve])
		return SCM(playerid, COL_LRED, "Ez a játékos nincs megbilincselve!");
		
	if(PlayerInfo[jatekos][pBilincselve])
		TogglePlayerControllable(jatekos, false);
		
	if(PlayerInfo[playerid][pVisz] == NINCS)
	{
		PlayerInfo[playerid][pVisz] = jatekos;
		SCM(playerid, COL_MKEK, "Megfogtad, most már viheted..");
		
	} else {
		
		PlayerInfo[playerid][pVisz] = NINCS;
		SCM(playerid, COL_MKEK, "Elengedted..");
	}
	
	return true;
}

CMD:lecsuk(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Nem vagy rendvédelmi frakció tagja!");
		
	new jatekos = GetClosestPlayer(playerid);
	if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 3) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || Bortonben(jatekos))
		return SCM(playerid, COL_LRED, "A közeledben nincs senki!");
		
	new ido, ok[32];
	if(sscanf(params, "ds[32]", ido, ok))
		return SCM(playerid, COL_MKEK, "Használat: /lecsuk [Idõ(Évben)] [Hivatali ok]");
		
	if(ido < 1 || ido > 25)
		return SCM(playerid, COL_LRED, "Az idõ minimum 1 év és maximum 25 év lehet!");
	
	Cselekves(playerid, "lecsukott valakit", 0);
	GameTextForPlayer(jatekos, "~r~Lecsuktak!", 2500, 3);
	PlayerInfo[playerid][pVisz] = NINCS;
	Bilincs(jatekos, 0);
	PlayerInfo[jatekos][pjail] = 2;
	PlayerInfo[jatekos][pJailIdo] = (ido * 1200);
	BortonInfo(jatekos, JatekosNev(playerid), ok);
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA)
	{
		Borton(jatekos,4);
	}
	else
	{
		Borton(jatekos, 2);
	}
	new felhivas[64];
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSPD){felhivas = "Rendõrségi";}
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_FBI){felhivas = "FBI";}
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_KATONA){felhivas = "Katonaság";}
	SendFormatMessageToAll(COLOR_LIGHTRED, "<< %s felhívás! %s %s letartóztatta %s-t! >>", felhivas, Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), JatekosNev(jatekos, true));
	SendFormatMessage(jatekos, COLOR_LIGHTRED, "%s %s letartóztatott téged! Idõ: %dév | Oka: %s", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), ido, ok);
	
	nformat(str, 128, "<< %s %s letartóztatta %s-t! | Idõ: %dév | Oka: %s >>", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]), JatekosNev(playerid, true), JatekosNev(jatekos, true), ido, ok);
	FrakcioUzenet(COLOR_YELLOW, PlayerInfo[playerid][pFrakcio], str);
	PlayerInfo[jatekos][pRabText] = CreateDynamic3DTextLabel("RAB", -1, 0.0, 0.0, 0.6, 40.0, jatekos, INVALID_VEHICLE_ID, 0);
	return true;
}

CMD:bepakol(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /bepakol [ Vas / Materiál / Heroin / Kokain / Marihuána / Fegyver ]");
		
	new car = GetClosestVehicle(playerid);
	if(GetDistanceToVehicle(playerid, car) > 5.0)
		return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
	
	if(PlayerInfo[playerid][pFoglalt] == true)
	{
		SCM(playerid,COL_LRED,"Várj 1 picit!");
		return 1;
	}
	
	new param[24], db = 0, vid = JarmuID(car, playerid), ok = true, i = NINCS;
	
	for(;++i < sizeof(PakolhatoJarmu);) {
		if(PakolhatoJarmu[i] == vInfo[ vid ][vModel]) {
			ok = false;
			break;
		}
	}

	if(ok)
		return SCM(playerid, COL_LRED, "Ebbe a jármûbe nem pakolhatsz!");
	
	sscanf(params, "s[24]D(0){}", param, db);
	if(db > MAX_ERTEK || db < 0)
		return SCM(playerid, COL_LRED, "Hibás érték!");
	
	if(vInfo[vid][vZarva])
		return SCM(playerid, COL_LRED, "Ez a jármû zárva van! Így nem tudsz belepakolni.");
		
	if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 0)
		return SCM(playerid, COL_LRED, "A jármû csomagtartója zárva van! Így nem tudsz belepakolni.");

/*
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben vagy, így nem tudsz belepakolni!");
*/

	if(!strcmp(param, "fegyver", false))
	{
	    if(PlayerInfo[playerid][pDuty][0] && FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND)
				return SCM(playerid, COL_LRED, "Cicaborsó, nem ezért kapsz fegyvert szolgálatban :D");
		if(!PlayerInfo[playerid][pFegyver])
			return SCM(playerid, COL_LRED, "Nincs a kezedben fegyver!");
			
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol fegyver [Slot(1-5)]");
			
		if(db > 5 || db < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 5!");
		
		PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
		if(vInfo[vid][vFegyver][db - 1] != 0 || vInfo[vid][vTolteny][db - 1] != 0)
			return SCM(playerid, COL_LRED, "Ezen a sloton már van fegyver!");
			
		new wid 	=	GetPlayerWeapon(playerid);
		new ammo	=	GetPlayerAmmo(playerid);
		
		if(!wid || !ammo)
		{
			PlayerInfo[playerid][pFegyverek][ aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ] ] = 0;
			PlayerInfo[playerid][pToltenyek][ aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ] ] = 0;
			PlayerInfo[playerid][pFegyver] = 0;
			ResetPlayerWeapons(playerid);
			SCM(playerid, COL_LRED, "Egy hiba történt!");
			return true;
		}
		
		SFM(playerid, COL_VZOLD, "Bepakoltál egy "#COL_MKEK"%s"#COL_FEHER" típusú fegyvert %d tölténnyel a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", aWeaponNames[wid], ammo, car, vid);
		Cselekves(playerid, "bepakolt egy fegyvert az egyik jármûbe", 1);
		
		vInfo[vid][vFegyver][db - 1] = wid;
		vInfo[vid][vTolteny][db - 1] = ammo;
		vUpdate(vid, vuFegyver);
		
		PlayerInfo[playerid][pFegyverek][ aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ] ] = 0;
		PlayerInfo[playerid][pToltenyek][ aWeaponSlotok[ PlayerInfo[playerid][pFegyver] ] ] = 0;
		PlayerInfo[playerid][pFegyver] = 0;
		ResetPlayerWeapons(playerid);
	}
	else if(!strcmp(param, "vas", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol vas [Mennyit]");
			
		if(PlayerInfo[playerid][pVas] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi vas!");
			
		if((vInfo[vid][vVas] + db) > J_MAX_VAS)
			return SCM(playerid, COL_LRED, "Ennyit nem tudsz bepakolni a jármûbe! Maximum "#J_MAX_VAS"kg lehet!");
		
		PlayerInfo[playerid][pVas] -= db;
		vInfo[vid][vVas] += db;
		vUpdate(vid, vuVas);
		SFM(playerid, COL_VZOLD, "Bepakoltál "#COL_MKEK"%s"#COL_FEHER"kg vasat a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", FormatNumber(db, 0, ','), car, vid);
		Cselekves(playerid, "bepakolt némi vasat az egyik jármûbe", 1);
	}
	else if(!strcmp(param, "material", false) || !strcmp(param, "materiál", false) || !strcmp(param, "mati", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol materiál [Mennyit]");
			
		if(PlayerInfo[playerid][pMaterial] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi materiál!");
			
		if((vInfo[vid][vMaterial] + db) > J_MAX_MATERIAL)
			return SCM(playerid, COL_LRED, "Ennyit nem tudsz bepakolni a jármûbe! Maximum "#J_MAX_MATERIAL"db lehet!");
		
		PlayerInfo[playerid][pMaterial] -= db;
		vInfo[vid][vMaterial] += db;
		vUpdate(vid, vuMaterial);
		SFM(playerid, COL_VZOLD, "Bepakoltál "#COL_MKEK"%s"#COL_FEHER"db materiált a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", FormatNumber(db, 0, ','), car, vid);
		Cselekves(playerid, "bepakolt némi materiált az egyik jármûbe", 1);
	}
	else if(!strcmp(param, "heroin", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol heroin [Mennyit]");
			
		if(PlayerInfo[playerid][pHeroin] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi heroin!");
			
		if((vInfo[vid][vHeroin] + db) > J_MAX_HEROIN)
			return SCM(playerid, COL_LRED, "Ennyit nem tudsz bepakolni a jármûbe! Maximum "#J_MAX_HEROIN"g lehet!");
		
		PlayerInfo[playerid][pHeroin] -= db;
		vInfo[vid][vHeroin] += db;
		vUpdate(vid, vuHeroin);
		SFM(playerid, COL_VZOLD, "Bepakoltál "#COL_MKEK"%s"#COL_FEHER"g heroint a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", FormatNumber(db, 0, ','), car, vid);
		Cselekves(playerid, "bepakolt némi heroint az egyik jármûbe", 1);
	}
	else if(!strcmp(param, "kokain", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol kokain [Mennyit]");
			
		if(PlayerInfo[playerid][pKokain] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi kokain!");
			
		if((vInfo[vid][vKokain] + db) > J_MAX_KOKAIN)
			return SCM(playerid, COL_LRED, "Ennyit nem tudsz bepakolni a jármûbe! Maximum "#J_MAX_KOKAIN"g lehet!");
		
		PlayerInfo[playerid][pKokain] -= db;
		vInfo[vid][vKokain] += db;
		vUpdate(vid, vuKokain);
		SFM(playerid, COL_VZOLD, "Bepakoltál "#COL_MKEK"%s"#COL_FEHER"g kokaint a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", FormatNumber(db, 0, ','), car, vid);
		Cselekves(playerid, "bepakolt némi kokaint az egyik jármûbe", 1);
	}
	else if(!strcmp(param, "marihuána", false) || !strcmp(param, "marihuana", false) || !strcmp(param, "mariska", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /bepakol marihuána [Mennyit]");
			
		if(PlayerInfo[playerid][pMarihuana] < db)
			return SCM(playerid, COL_LRED, "Nincs nálad ennyi marihuána!");
			
		if((vInfo[vid][vMarihuana] + db) > J_MAX_MARIHUANA)
			return SCM(playerid, COL_LRED, "Ennyit nem tudsz bepakolni a jármûbe! Maximum "#J_MAX_MARIHUANA"g lehet!");
		
		PlayerInfo[playerid][pMarihuana] -= db;
		vInfo[vid][vMarihuana] += db;
		vUpdate(vid, vuMarihuana);
		SFM(playerid, COL_VZOLD, "Bepakoltál "#COL_MKEK"%s"#COL_FEHER"g marihuánát a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbe!", FormatNumber(db, 0, ','), car, vid);
		Cselekves(playerid, "bepakolt némi marihuánát az egyik jármûbe", 1);
	}
	return true;
}

CMD:kipakol(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /kipakol [ Vas / Materiál / Heroin / Kokain / Marihuána / Fegyver ]");
	
	new car = GetClosestVehicle(playerid);
	if(GetDistanceToVehicle(playerid, car) > 5.0)
		return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
	
	new param[24], db = 0, vid = JarmuID(car, playerid);
	sscanf(params, "s[24]D(0){}", param, db);
	if(db > MAX_ERTEK || db < 0)
		return SCM(playerid, COL_LRED, "Hibás érték!");
	
	if(vInfo[vid][vZarva])
		return SCM(playerid, COL_LRED, "Ez a jármû zárva van! Így nem tudsz kipakolni semmit se.");
		
	if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 0)
		return SCM(playerid, COL_LRED, "A jármû csomagtartója zárva van! Így nem tudsz kipakolni semmit se.");
		
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben vagy, így nem tudsz kipakolni semmit se!");
	
	if(!strcmp(param, "fegyver", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol fegyver [Slot(1-5)]");
			
		if(db > 5 || db < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 5!");
		
		if(!vInfo[vid][vFegyver][db - 1] || !vInfo[vid][vTolteny][db - 1])
			return SCM(playerid, COL_LRED, "Ezen a sloton nincs fegyver!");
		
		if(PlayerInfo[playerid][pFegyver])
			if(SameWeaponSlot(PlayerInfo[playerid][pFegyverek][aWeaponSlotok[ vInfo[vid][vFegyver][db - 1] ]], vInfo[vid][vFegyver][db - 1]))
				return SCM(playerid, COL_MKEK, "Már van ilyen típusú fegyvered!");
		
		PlayerInfo[playerid][pFegyverMuvelet] = (gettime() + 2);
		ResetPlayerWeapons(playerid);
		GiveWeapon(playerid, vInfo[vid][vFegyver][db - 1], vInfo[vid][vTolteny][db - 1]);
		
		SetPlayerAttachedWeapon(playerid);
		
		SFM(playerid, COL_VZOLD, "Kivéttél egy "#COL_MKEK"%s"#COL_FEHER" típusú fegyvert %d tölténnyel a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", aWeaponNames[ vInfo[vid][vFegyver][db - 1] ], vInfo[vid][vTolteny][db - 1], car, vid);
		Cselekves(playerid, "kivett egy fegyvert az egyik jármûbõl", 1);
		
		vInfo[vid][vFegyver][db - 1] = 0;
		vInfo[vid][vTolteny][db - 1] = 0;
		vUpdate(vid, vuFegyver);
	}
	else if(!strcmp(param, "vas", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol vas [Mennyit]");
			
		if((PlayerInfo[playerid][pVas] + db) > P_MAX_VAS)
			return SCM(playerid, COL_LRED, "Ennyi nem fér el nálad! Maximum "#P_MAX_VAS"kg lehet nálad!");
			
		if(vInfo[vid][vVas] < db)
			return SCM(playerid, COL_LRED, "Nincs ennyi vas a jármûben!");
		
		PlayerInfo[playerid][pVas] += db;
		vInfo[vid][vVas] -= db;
		vUpdate(vid, vuVas);
		SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s"#COL_FEHER"kg vasat a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", FormatNumber(db, 0, ','), car, vid);
		Cselekves(playerid, "kipakolt némi vasat az egyik jármûbõl", 1);
	}
	else if(!strcmp(param, "material", false) || !strcmp(param, "materiál", false) || !strcmp(param, "mati", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol material [Mennyit]");
			
		if((PlayerInfo[playerid][pMaterial] + db) > P_MAX_MATERIAL)
			return SCM(playerid, COL_LRED, "Ennyi nem fér el nálad! Maximum "#P_MAX_MATERIAL"db lehet nálad!");
			
		if(vInfo[vid][vMaterial] < db)
			return SCM(playerid, COL_LRED, "Nincs ennyi materiál a jármûben!");
		
		PlayerInfo[playerid][pMaterial] += db;
		vInfo[vid][vMaterial] -= db;
		vUpdate(vid, vuMaterial);
		SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s"#COL_FEHER"db materiált a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", FormatNumber(db, 0, ','), car, vid);
		Cselekves(playerid, "kipakolt némi materiált az egyik jármûbõl", 1);
	}
	else if(!strcmp(param, "heroin", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol heroin [Mennyit]");
			
		if((PlayerInfo[playerid][pHeroin] + db) > P_MAX_HEROIN)
			return SCM(playerid, COL_LRED, "Ennyi nem fér el nálad! Maximum "#P_MAX_HEROIN"g lehet nálad!");
			
		if(vInfo[vid][vHeroin] < db)
			return SCM(playerid, COL_LRED, "Nincs ennyi heroin a jármûben!");
		
		PlayerInfo[playerid][pHeroin] += db;
		vInfo[vid][vHeroin] -= db;
		vUpdate(vid, vuHeroin);
		SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s"#COL_FEHER"g heroint a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", FormatNumber(db, 0, ','), car, vid);
		Cselekves(playerid, "kipakolt némi heroint az egyik jármûbõl", 1);
	}
	else if(!strcmp(param, "kokain", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol kokain [Mennyit]");
			
		if((PlayerInfo[playerid][pKokain] + db) > P_MAX_KOKAIN)
			return SCM(playerid, COL_LRED, "Ennyi nem fér el nálad! Maximum "#P_MAX_KOKAIN"g lehet nálad!");
			
		if(vInfo[vid][vKokain] < db)
			return SCM(playerid, COL_LRED, "Nincs ennyi heroin a jármûben!");
		
		PlayerInfo[playerid][pKokain] += db;
		vInfo[vid][vKokain] -= db;
		vUpdate(vid, vuKokain);
		SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s"#COL_FEHER"g kokaint a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", FormatNumber(db, 0, ','), car, vid);
		Cselekves(playerid, "kipakolt némi kokaint az egyik jármûbõl", 1);
	}
	else if(!strcmp(param, "marihuána", false) || !strcmp(param, "marihuana", false) || !strcmp(param, "mariska", false))
	{
		if(db < 1)
			return SCM(playerid, COL_MKEK, "Használat: /kipakol marihuana [Mennyit]");
			
		if((PlayerInfo[playerid][pMarihuana] + db) > P_MAX_MARIHUANA)
			return SCM(playerid, COL_LRED, "Ennyi nem fér el nálad! Maximum "#P_MAX_MARIHUANA"g lehet nálad!");
			
		if(vInfo[vid][vMarihuana] < db)
			return SCM(playerid, COL_LRED, "Nincs ennyi marihuána a jármûben!");
		
		PlayerInfo[playerid][pMarihuana] += db;
		vInfo[vid][vMarihuana] -= db;
		vUpdate(vid, vuMarihuana);
		SFM(playerid, COL_VZOLD, "Kivettél "#COL_MKEK"%s"#COL_FEHER"g marihuánát a "#COL_MKEK"%d[%d]"#COL_FEHER" rendszámú jármûbõl!", FormatNumber(db, 0, ','), car, vid);
		Cselekves(playerid, "kipakolt némi marihuánát az egyik jármûbõl", 1);
	}
	return true;
}

CMD:rendszam(playerid, params[])
{
	new car = NINCS;
	car = GetClosestVehicle(playerid);
	
	if(!IsVehicleConnected(car) || car == NINCS || GetDistanceToVehicle(playerid, car) > 5.0)
		return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
	
	new vid = JarmuID(car, playerid);
	if(!vid || !vInfo[vid][vHasznalva])
		return SCM(playerid, COL_LRED, "Egy hiba történt!");

	if(strlen(vInfo[vid][vRendszam]) < 4) SFM(playerid, COL_MKEK, "A "#COL_MKEK"%s"#COL_FEHER" típusú jármû rendszáma: "#COL_MKEK"See-%d[%d]", VehicleNames[vInfo[vid][vModel] - 400], car, vid);
	else SFM(playerid, COL_MKEK, "A "#COL_MKEK"%s"#COL_FEHER" típusú jármû rendszáma: "#COL_MKEK"%s ( %d[%d] )", VehicleNames[vInfo[vid][vModel] - 400], vInfo[vid][vRendszam], car, vid);
	return true;
}

CMD:atnez(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /átnéz [ Jármû / Ház ]");
	
	if(!strcmp(params, "jármû", false) || !strcmp(params, "jarmu", false))
	{
		new car = NINCS;
		car = GetClosestVehicle(playerid);
		
		if(!IsVehicleConnected(car) || car == NINCS || GetDistanceToVehicle(playerid, car) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
		
		new vid = JarmuID(car, playerid);
		if(!vid || !vInfo[vid][vHasznalva])
			return SCM(playerid, COL_LRED, "Egy hiba történt!");
			
		if(vInfo[vid][vZarva])
			return SCM(playerid, COL_LRED, "Ez a jármû zárva van!");
		
		SendFormatMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ LS - %d[%d] Tartalma ]"#COL_FEHER" ===================", car, vid);
		SendFormatMessage(playerid, COLOR_WHITE, "Vas: "#COL_MKEK"%d/%dKg"#COL_FEHER" | Material: "#COL_MKEK"%d/%ddb", vInfo[vid][vVas], J_MAX_VAS, vInfo[vid][vMaterial], J_MAX_MATERIAL);
		SendFormatMessage(playerid, COLOR_WHITE, "Heroin: "#COL_MKEK"%d/%dg"#COL_FEHER" | Kokain: "#COL_MKEK"%d/%dg"#COL_FEHER" | Marihuana: "#COL_MKEK"%d/%dg", vInfo[vid][vHeroin], J_MAX_HEROIN, vInfo[vid][vKokain], J_MAX_KOKAIN, vInfo[vid][vMarihuana], J_MAX_MARIHUANA);
		
		new i = -1, num = 0, fegyverek[128] = "Fegyverek:";
		for(;++i < 5;)
		{
			if(vInfo[vid][vFegyver][i] > 47) { vInfo[vid][vFegyver][i] = 0; vInfo[vid][vTolteny][i] = 0; }
			if((vInfo[vid][vFegyver][i] && !vInfo[vid][vTolteny][i]) || (!vInfo[vid][vFegyver][i] && vInfo[vid][vTolteny][i]))
			{
				vInfo[vid][vFegyver][i] = 0;
				vInfo[vid][vTolteny][i] = 0;
			}
			
			if(vInfo[vid][vFegyver][i] && vInfo[vid][vTolteny][i])
			{
				format(fegyverek, sizeof(fegyverek), "%s [ID:%d]%s(%d),", fegyverek, vInfo[vid][vFegyver][i], aWeaponNames[ vInfo[vid][vFegyver][i] ], vInfo[vid][vTolteny][i]);
				num++;
			}
		}
		if(!num) format(fegyverek, sizeof(fegyverek), "%s Nincs", fegyverek);
		else fegyverek[strlen(fegyverek) - 1] = '\0';
		SendClientMessage(playerid, COLOR_WHITE, fegyverek);
	}
	else if(!strcmp(params, "ház", true) || !strcmp(params, "haz", true))
	{
		/*"Pénz:", FormatNumber(HazInfo[haz][hazSzef][0], 0, '.'), 
		"Kokain:", HazInfo[haz][hazSzef][1], 
		"Heroin:", HazInfo[haz][hazSzef][2], 
		"Marihuana:", HazInfo[haz][hazSzef][3], 
		"Material:", HazInfo[haz][hazSzef][4]);*/
		new id;
		SendFormatMessage(playerid, COLOR_WHITE, "=============== [ "#COL_MKEK"See utca %d"#COL_FEHER" ] ===============", id);
	}
	return true;
}


CMD:csere(playerid, params[])
{
	if(isnull(params))
	{
		sh_help:
		return SCM(playerid, COL_MKEK, "Használat: /csere [ Ház / Jármû ] [Játékos] [ Mit? (ID) ] [ Mire? (ID) ]");
	}

	new jatekos, param[24], mit = NINCS, mire = NINCS;
	sscanf(params, "s[24]uD(-1)D(-1){}", param, jatekos, mit, mire);
	
	if(!strcmp(param, "haz", true) || !strcmp(param, "ház", true))
	{
		if(mit == NINCS && mire == NINCS)
			return SCM(playerid, COL_MKEK, "Használat: /csere Ház [Játékos] [ Házszámod ] [ Játékos házszáma ] | /stats-ban találjátok");
		
		if(playerid == jatekos)
			return SCM(playerid, COL_LRED, "Cicaborsó saját házad ne cseréld már el magaddal! :D");
		
		if(!Belepve(jatekos) || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			
		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
		
		if(mit == NINCS)
			return SCM(playerid, COL_MKEK, "Add meg a cserélendõ házad házszámát! (( /stats-ban látod! ))");
		
		if(mire == NINCS)
			return SCM(playerid, COL_MKEK, "Add meg a másik fél cserélni kívánt házszámát! (( /stats-ban látja a másik fél! ))");
			
		new bool:van[2], i = NINCS;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[playerid][pHazKulcs][i] == mit)
				van[0] = true;
				
			if(PlayerInfo[jatekos][pHazKulcs][i] == mire)
				van[1] = true;
		}
		
		if(!van[0])
			return SCM(playerid, COL_LRED, "Ez a ház nem a tiéd! (( /stats-ban ellenõrízd a házszámot! ))");
			
		if(!van[1])
			return SCM(playerid, COL_LRED, "Ez a ház nem a másik fél tulajdona! (( /stats-ban ellenõrizze a másik fél a házszámot! ))");
		
		SendFormatMessage(playerid, COLOR_ORANGE, "Felajánlottad %s számára, hogy elcseréled a See utca %d házad a See utca %d házára.", JatekosNev(jatekos, true), mit, mire);
		SendFormatMessage(jatekos, COLOR_ORANGE, "%s felajánlotta, hogy elcserélné veled a See utca %d házát a See utca %d házadra.", JatekosNev(jatekos, true), mit, mire);
		SCM(jatekos, COL_MKEK, "Ha elszeretnéd fogadni a cserét kérlek írd be, hogy /elfogad csere, elutasításhoz /elutasít csere");
		
		PlayerInfo[playerid][pProcess][0] = PR_CSERE_HAZ;
		PlayerInfo[jatekos][pProcess][0] = PR_CSERE_HAZ;
		PlayerInfo[jatekos][pProcess][1] = playerid;
		PlayerInfo[jatekos][pProcess][2] = mit;
		PlayerInfo[jatekos][pProcess][3] = mire;
	}
	else if(!strcmp(param, "jarmu", true) || !strcmp(param, "jármû", true))
	{
		if(mit == NINCS && mire == NINCS)
			return SCM(playerid, COL_MKEK, "Használat: /csere Jármû [Játékos] [ Jármûved rendszáma ] [ Játékos jármûvének rendszám ] | /stats-ban találjátok");
		
		if(playerid == jatekos)
			return SCM(playerid, COL_LRED, "Cicaborsó saját jármûved ne cseréld már el magaddal! :D");
		
		if(!Belepve(jatekos) || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			
		if(GetPlayerDistanceFromPlayer(playerid, jatekos) > 4)
			return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
		
		if(mit == NINCS)
			return SCM(playerid, COL_MKEK, "Add meg a cserélendõ jármûved rendszámát! (( /stats-ban látod! ))");
		
		if(mire == NINCS)
			return SCM(playerid, COL_MKEK, "Add meg a másik fél cserélni kívánt jármûvének rendszámát! (( /stats-ban látja a másik fél! ))");
			
		new bool:van[2], i = NINCS;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[playerid][pJarmuKulcs][i] == JarmuID(mit, playerid))
				van[0] = true;
				
			if(PlayerInfo[jatekos][pJarmuKulcs][i] == JarmuID(mire, playerid))
				van[1] = true;
		}
		
		if(!van[0])
			return SCM(playerid, COL_LRED, "Ez a jármû nem a tiéd! (( /stats-ban ellenõrízd a rendszámot! ))");
			
		if(!van[1])
			return SCM(playerid, COL_LRED, "Ez a jármû nem a másik fél tulajdona! (( /stats-ban ellenõrizze a másik fél a rendszámot! ))");
		
		SendFormatMessage(playerid, COLOR_ORANGE, "Felajánlottad %s számára, hogy elcseréled a See-%d[%d] rendszámú jármûved a See-%d[%d] rendszámú jármûvére!", JatekosNev(jatekos, true), mit, JarmuID(mit, playerid), mire, JarmuID(mire, playerid));
		SendFormatMessage(jatekos, COLOR_ORANGE, "%s felajánlotta, hogy elcserélné veled a See-%d[%d] rendszámú jármûvét a See-%d[%d] rendszámú jármûvedre!", JatekosNev(playerid, true), mit, JarmuID(mit, playerid), mire, JarmuID(mire, playerid));
		SCM(jatekos, COL_MKEK, "Ha elszeretnéd fogadni a cserét kérlek írd be, hogy /elfogad csere, elutasításhoz /elutasít csere");
		
		PlayerInfo[playerid][pProcess][0] = PR_CSERE_JARMU;
		PlayerInfo[jatekos][pProcess][0] = PR_CSERE_JARMU;
		PlayerInfo[jatekos][pProcess][1] = playerid;
		PlayerInfo[jatekos][pProcess][2] = JarmuID(mit, playerid);
		PlayerInfo[jatekos][pProcess][3] = JarmuID(mire, playerid);
	} else goto sh_help;
	return true;
}

CMD:v(playerid, params[]) // jármû rendszer kezelés
{
	new param[64], fparam[32];
		
	if(sscanf(params, "s[64]{}", param))
	{
	    SCM(playerid, COL_MKEK, "Használat: /v [ Paraméterek ]");
		if(!Admin(playerid, 2))
		{
			SCM(playerid, COL_MKEK, "[Paraméterek]: Öv, Ablak, Vesz, Elad, Park, Szín, Lámpa, Mh, Cst, Zár, Rádió, Frakció, Neon");
			SCM(playerid, COL_MKEK, "[Paraméterek]: Tuning, Matrica");
		}
		else
		{
		    SCM(playerid, COL_MKEK, "[Paraméterek]: Öv, Ablak, Vesz, Elad, Park, Szín, Lámpa, Mh, Cst, Zár, Rádió, Frakció, Neon, Tuning, Matica");
			SCM(playerid, COL_MKEK, "[Admin]: Admin(1): Info | Admin(2): Park | Admin(3): Zár | Admin(4): (Ale)foglal");
			SCM(playerid, COL_MKEK, "[Admin]: Admin(5): Töröl | FõAdmin: Aelad, Set, Ár, Név, Atuning, AMatrica");
		}
		return true;
	} else {
		if(!strcmp(param, "frakcio", false) || !strcmp(param, "frakció", false) || !strcmp(param, "fk", false) || !strcmp(param, "f", false))
		{
			if(!PlayerInfo[playerid][pFrakcio])
				return SCM(playerid, COL_LRED, "Nem vagy egyik frakció tagja sem!");
				
			if(sscanf(params, "{s[64]}s[32]{}", fparam))
			{
		        SCM(playerid, COL_MKEK, "Használat: /v frakció [ Paraméterek ]");
				SCM(playerid, COL_MKEK, "[Paraméterek]: lista, helyzet | Leader:  rang, vesz");
				return true;
			} else {
				if(!strcmp(fparam, "lista", false))
				{
					SendFormatMessage(playerid, COLOR_SZURKE, "========= [ "#COL_MKEK"%s jármûvei"#COL_SZURKE" ] =========", FInfo[PlayerInfo[playerid][pFrakcio]][fNev]);
					new szamlalo = 0;
					
					foreach(Jarmuvek, id)
					{
						new idx = JarmuID(id, playerid);
						if(vInfo[idx][vHasznalva])
						{
							if((vInfo[idx][vMunka] == PlayerInfo[playerid][pFrakcio]))
							{
								szamlalo++;
								SendFormatMessage(playerid, COLOR_WHITE, "[%d] Típus: %s | Rendszám: %d[%d] | Rang: %s", szamlalo, VehicleNames[GetVehicleModel(vInfo[idx][vID]) - 400], vInfo[idx][vID], idx, ToStr(vInfo[idx][vRang]));
							}
						}
					}
					if(!szamlalo)
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "A frakciódnak még nincs jármûve!");
					//SendClientMessage(playerid, COLOR_SZURKE, "=======================================");
				}
				else if(!strcmp(fparam, "rang", false))
				{
					new rang;
					if(sscanf(params, "{s[64]s[32]}d", rang))
						return SCM(playerid, COL_MKEK, "Használat: /v frakció rang [szám]");
					
					if(rang < 0 || rang > 10)
						return SCM(playerid, COL_LRED, "A rangnak 0 és 8 között kell lennie!");
					
					new car = NINCS;
					car = GetClosestVehicle(playerid);

					if(GetDistanceToVehicle(playerid, car) < 5.0)
					{
						new vehicleidje = JarmuID(car, playerid);
							
                        if(vInfo[vehicleidje][vMunka] != PlayerInfo[playerid][pFrakcio])
						    return SCM(playerid, COL_LRED, "Ez a jármû nem a te frakciódé.");
						    
						if(PlayerInfo[playerid][pLeader] != 1)
						    return SCM(playerid, COL_LRED, "Te nem vagy (Al)Leader!");
						    
						SendFormatMessage(playerid, COLOR_LBLUE, ""#COL_VKEK"%s"#COL_FEHER" típusú jármû rangja átírva! | Régi "#COL_VKEK"%d"#COL_FEHER" | Új: "#COL_VKEK"%d"#COL_FEHER" | JármûID: "#COL_VKEK"%d[%d]", VehicleNames[GetVehicleModel(car) - 400], vInfo[vehicleidje][vRang], rang, car, vehicleidje);
						vInfo[vehicleidje][vRang] = rang;
						vUpdate(vehicleidje, vuRang);
					}
				}
				else if(!strcmp(fparam, "vesz", false))
				{
					if(IsPlayerInAnyVehicle(playerid))
					{
					    if(PlayerInfo[playerid][pLeader] != 1)
						    return SCM(playerid, COL_LRED, "Te nem vagy Leader!");
						    
						new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
						if(vid > 0)
						{
							if(!vInfo[vid][vInsert])
								return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, nem veheted meg!");
							
							if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] >= vInfo[vid][vAr])
							{
								if(vInfo[vid][vMunka] == 0 && vInfo[vid][vTulajID] == NINCS)
								{
									format(uzenet, sizeof(uzenet), "Gratulálunk! Sikeresen megvettél egy %s típusú jármûvet a frakciód számára! Ára: %d $", VehicleNames[GetVehicleModel(vInfo[vid][vID])-400], vInfo[vid][vAr]);
									SendClientMessage(playerid, COLOR_LBLUE, uzenet);
									
									FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] -= vInfo[vid][vAr];
									vInfo[vid][vMunka] = PlayerInfo[playerid][pFrakcio];
									vUpdate(vid, vuMunka);
									
									doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET Munka = '%d' WHERE ID = '%d'", vInfo[vid][vMunka], vid);
									
									Cselekves(playerid, "aláírta az adásvételi szerzõdést", 1);
								} else
									return SCM(playerid, COL_LRED, "Ez a jármû már valaki tulajdona, nem veheted meg!");
							} else
								return SCM(playerid, COL_LRED, "Nincs elegendõ pénz a frakciód széfében, hogy ezt megvehesd!");
						} else
							return SCM(playerid, COL_LRED, "Ezt a jármûvet nem veheted meg!");
					} else
					    return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");
				}
			}
		}
		else if(!strcmp(param, "ablak", true))
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");
			
			new vid = JarmuID( GetPlayerVehicleID(playerid), playerid );
			
			if(!IsAKocsi(vInfo[vid][vModel]))
				return SCM(playerid, COL_LRED, "Autón kívûl nincs biztonsági öv!");
				
			if(vInfo[vid][vAblakLetekerve])
			{
				vInfo[vid][vAblakLetekerve] = false;
				SCM(playerid, COL_VZOLD, "Ablak feltekerve!");
				Cselekves(playerid, "feltekerte az ablakot.", 0);
			} else {
				vInfo[vid][vAblakLetekerve] = true;
				SCM(playerid, COL_VZOLD, "Ablak letekerve!");
				Cselekves(playerid, "letekerte az ablakot.", 0);
			}
			//newvAblak
			return true;
		}
		else if(!strcmp(param, "öv", false) || !strcmp(param, "ov", false))
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");
			
			new vid = JarmuID( GetPlayerVehicleID(playerid), playerid );
			
			if(!IsAKocsi(vInfo[vid][vModel]))
				return SCM(playerid, COL_LRED, "Autón kívûl nincs biztonsági öv!");
			
			if(PlayerInfo[playerid][pOv])
			{
				SCM(playerid, COL_VZOLD, "Öv sikeresen kikapcsolva!");
				Cselekves(playerid, "kikapcsolta a biztonsági övét.", 0);
				PlayerInfo[playerid][pOv] = false;
			} else {
				SCM(playerid, COL_VZOLD, "Öv sikeresen bekapcsolva!");
				Cselekves(playerid, "bekapcsolta a biztonsági övét.", 0);
				PlayerInfo[playerid][pOv] = true;
			}
			return true;
		}
		else if(!strcmp(param, "sisak", false))
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COL_LRED, "Motoron kell ülnöd!");
			
			new vid = JarmuID( GetPlayerVehicleID(playerid), playerid );
			
			if(GetVehicleMType(vInfo[vid][vModel]) != MOTORBIKE)
				return SCM(playerid, COL_LRED, "Csak motoron vehetsz fel sisakot!");
			
			if(PlayerInfo[playerid][pSisak])
			{
				RemovePlayerAttachedObject(playerid, SLOT_SISAK);
				Cselekves(playerid, "levette a bukósisakot");
				PlayerInfo[playerid][pSisak] = false;
				
			} else {
			
				Freeze(playerid, 0);
				LoopingAnim(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
				SetTimerEx("Timer", 5000, false, "dddd", playerid, T_SISAK, NINCS, NINCS);
			}
			return true;
		}
		else if(!strcmp(param, "radio", false) || !strcmp(param, "rádió", false))
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");
			
			if(NincsBenne_Radio( vInfo[ JarmuID( GetPlayerVehicleID(playerid), playerid ) ][vModel] ))
				return SCM(playerid, COL_LRED, "Ebben a jármûben nincs rádió!");
				
			new dstr[1024], tmp[128], i = NINCS;
			format(dstr, sizeof(dstr), #COL_VZOLD"Rádió kikapcsolása");
			for(;++i < sizeof(RadioLista);)
			{
				if(i % 2 == 1) format(tmp, sizeof(tmp), "\n"#COL_MKEK"%s", RadioLista[i][1]);
				else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s", RadioLista[i][1]);
				strcat(dstr, tmp, sizeof(dstr));
			}
			ShowPlayerDialog(playerid, DIALOG_RADIO_JARMU, DIALOG_STYLE_LIST, "Jármû - Rádió lista", dstr, "Hallgat", "Mégse");
		}
		else if(!strcmp(param, "neon", true))
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");
				
			new vid = JarmuID( GetPlayerVehicleID(playerid), playerid);
			
			if(!JarmuKulcs(playerid, vid))
				return SCM(playerid, COL_LRED, "Ehhez a jármûhöz nincs kulcsod!");
				
			if(!vInfo[vid][vNeon][0])
				return SCM(playerid, COL_LRED, "Ebben a jármûben nincs Neon!");
				
			if(!vInfo[vid][vNeon][4])
			{
				SetVehicleNeon(vid, vInfo[vid][vNeon]);
				SCM(playerid, COL_VZOLD, "Neon bekapcsolva!");
				
			} else {
			
				SetVehicleNeon(vid, 0);
				SCM(playerid, COL_VZOLD, "Neon kikapcsolva!");
			}
			
			Streamer_Update(playerid);
		}
		else if(!strcmp(param,"tuning",false))
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
			new vehiclemodel = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(vehiclemodel < 400 || vehiclemodel > 611) return SCM(playerid,COL_LRED, "Ezt a kocsit nem tuningolhatod!");
			if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_SZERELO) return SCM(playerid,COL_LRED,"Csak szerelõ tuningolhatja a kocsidat!");
			if(PlayerInfo[playerid][prang] < 4) return SCM(playerid,COL_LRED,"Minimum 4 es Rang!");
			if(!IsPlayerInRangeOfPoint(playerid,5.0,72.333, -335.683, 1.706))
			{
				SetPlayerCheckpoint(playerid,72.333, -335.683, 1.706,5.0);
				SCM(playerid,COL_LRED,"Itt nem tuningolhatsz! Menj a kijelölt helyre!");
				return 1;
			}
			new tuningstr[3012];
			new component;
			TuningSzamolo[playerid] = 1;
			while(GetVehicleCompatibleUpgrades(vehiclemodel, TuningSzamolo[playerid], component))
			{
				if(TuningSzamolo[playerid] <= MAX_KOMPONENS)
				{
					if(TuningSzamolo[playerid] == 1) format(tuningstr, sizeof(tuningstr), "Tuning Neve: %s | Ára: %d $", GetComponentName(component),(KomponensAra(component))/235);
					else format(tuningstr, sizeof(tuningstr), "%s\nTuning Neve: %s | Ára: %d $", tuningstr, GetComponentName(component),(KomponensAra(component)/235));
					KomponensID[playerid][TuningSzamolo[playerid]-1] = component;
					TuningSzamolo[playerid]++;
				}
				else break;
			}
			new cim[80];
			format(cim,80, ":: Elérhetõ Tuning alkatreszek a jármûhöz {FF6400}(%d)", VehicleNames[vehiclemodel-400]);
			ShowPlayerDialog(playerid, DIALOG_TUNING, DIALOG_STYLE_LIST, cim, tuningstr, "Felszerel", "Mégse");
			return true;
		}
		else if(!strcmp(param,"matrica",false))
		{
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
			new vehiclemodel = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(vehiclemodel < 400 || vehiclemodel > 611) return SCM(playerid,COL_LRED, "Ezt a kocsit nem tuningolhatod!");
			if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_SZERELO) return SCM(playerid,COL_LRED,"Csak szerelõ tuningolhatja a kocsidat!");
			if(PlayerInfo[playerid][pBszPenz] < 30000) return SCM(playerid, COL_LRED, "30.000$ szükséges");
			if(!IsPlayerInRangeOfPoint(playerid,5.0,72.333, -335.683, 1.706))
			{
				SetPlayerCheckpoint(playerid,72.333, -335.683, 1.706,5.0);
				SCM(playerid,COL_LRED,"Itt nem tuningolhatsz! Menj a kijelölt helyre!");
				return 1;
			}
			new hanyas = NINCS;
			sscanf(params,"{s[64]}D(-1)",hanyas);
			if(hanyas == NINCS)
			{
				SCM(playerid,COL_MKEK,"Használat: /v matrica [1-4]");
				return true;
			}
			if(hanyas < 1 || hanyas > 4) return SCM(playerid,COL_LRED,"1-4 között!");
			new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
			if(vInfo[vid][vSzin1] == 0 || vInfo[vid][vSzin2] == 0) return SCM(playerid,COL_LRED,"Nem lehet fekete a jármû fesd át fehérre!!"); 
			hanyas = hanyas-1;
			vInfo[vid][vMatrica] = hanyas;
			PlayerInfo[playerid][pBszPenz] -= 30000;
			ChangeVehiclePaintjob(vInfo[vid][vID],hanyas);
			vUpdate(vid,vuMatrica);
			return true;
		}
		else if(!strcmp(param, "color", false) || !strcmp(param, "szin", false) || !strcmp(param, "szín", false))
		{
			new bool:talalt = false, k = NINCS;
			new Float:FestoPos[][3] = 
			{
				{487.332397, -1741.302734, 11.131089},
				{2066.086425, -1831.412353, 13.546875},
				{1024.939453, -1024.406738, 31.798025},
				{720.166687, -457.286499, 16.032396},
				{-2425.677734, 1022.328552, 50.080821},
				{-1904.543579, 282.904937, 40.743328}
			};
			
			for(;++k < sizeof(FestoPos);)
				if(IsPlayerInRangeOfPoint(playerid, 5.0, PosExt(FestoPos[k])))
					talalt = true;
			
			if(!talalt && !Admin(playerid, FOADMIN_SZINT) && PlayerInfo[playerid][pFrakcio] != FRAKCIO_SZERELO)
				return SCM(playerid, COL_LRED, "Nem vagy Pay 'n' Spray vagy Tuning mûhelyben, vagy szerelõnél!");

			new car = (IsPlayerInAnyVehicle(playerid) ? GetPlayerVehicleID(playerid) : GetClosestVehicle(playerid));
			if(!IsPlayerInAnyVehicle(playerid) && GetDistanceToVehicle(playerid, car) > 5.5)
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			
			new vid = JarmuID(car, playerid), szin1, szin2;
			if(!vid)
				return SCM(playerid, COL_LRED, "Egy hiba történt!");
				
			if((FrakcioJarmu(playerid, vid) && PlayerInfo[playerid][prang] > 8) || vInfo[vid][vTulajID] == PlayerInfo[playerid][pID] || Admin(playerid, FOADMIN_SZINT))
			{
				if(sscanf(params, "{s[64]}dd", szin1, szin2))
					return SCM(playerid, COL_MKEK, "Használat: /v szín [Szín1] [Szín2]");
				if(szin1 < 0 && szin1 > 126)
					return SCM(playerid, COL_LRED, "A szín minimum 0 és max 126 lehet!");
				if(szin2 < 0 && szin2 > 126)
					return SCM(playerid, COL_LRED, "A szín minimum 0 és max 126 lehet!");
					
					
				if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID] || PlayerInfo[playerid][pFrakcio] == FRAKCIO_SZERELO)
				{
					
					if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_SZERELO && IsPlayerInRangeOfPoint(playerid, 20, 1385.696, -1896.973, 13.494))	//Szerelõk is tudnak festeni
					{
						if(PlayerInfo[playerid][pBszPenz] < 255)
							return SCM(playerid, COL_LRED, "A festés költsége 255$! Neked nincs ennyi a bankszámládon!");
							
						PlayerInfo[playerid][pBszPenz] -= 255;
						GameTextForPlayer(playerid, "~w~Festés elkészült!~n~~r~Ára: 255$", 5000, 1);
					}
					else
					{
						if(PlayerInfo[playerid][pBszPenz] < 550)
							return SCM(playerid, COL_LRED, "A festés költsége 550$! Neked nincs ennyi a bankszámládon!");
							
						PlayerInfo[playerid][pBszPenz] -= 550;
						GameTextForPlayer(playerid, "~w~Festés elkészült!~n~~r~Ára: 550$", 5000, 1);
					}
				}
				else if(FrakcioJarmu(playerid, vid))
				{
					if(FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] < 550)
						return SCM(playerid, COL_LRED, "A festés költsége 550$! Nincs ennyi pénz a frakciód széfében!");
						
					FInfo[PlayerInfo[playerid][pFrakcio]][fPenz] -= 550;
					
					nformat(str, 128, "<< %s átfestett egy %s típusú frakciós jármûvet 550$-ért! >>", JatekosNev(playerid, true), VehicleNames[vInfo[vid][vModel] - 400]);
					FrakcioUzenet(COLOR_YELLOW, PlayerInfo[playerid][pFrakcio], str);
					GameTextForPlayer(playerid, "~w~Festés elkészült!~n~~r~Ára: 550$", 5000, 1);
				} else
					GameTextForPlayer(playerid, "~w~Festés elkészült!", 5000, 1);
				
				vInfo[vid][vSzin1] = szin1;
				vInfo[vid][vSzin2] = szin2;
				vUpdate(vid, vuSzin);
				ChangeVehicleColor(car, szin1, szin2);
			}

			return true;
		}
		else if(!strcmp(param, "damage"))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return false;
			
			new closestcar = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, closestcar) < 5.0)
			{
				new vid = JarmuID(closestcar, playerid);
					
				AdminUzenet(COLOR_LIGHTRED, 1, "%s használtá alakított egy %s típusú jármûvet! JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[GetVehicleModel(closestcar) - 400], closestcar, vid, JarmuTulaj(vid));
				SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen használtá tettél egy %s típusú jármûvet! Tulaj: %s", VehicleNames[GetVehicleModel(closestcar) - 400], JarmuTulaj(vid));
				UpdateVehicleDamageStatus(closestcar, 204801046, 67372036, 0, 0);
				vInfo[vid][vPanels] = 204801046;
				vInfo[vid][vDoors] = 67372036;
				SetVehicleHealth(vInfo[vid][vID], (vInfo[vid][vElet] = 500.0));
				
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			return true;
		}
		else if(!strcmp(param, "aelad", false))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
			new closestcar = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, closestcar) < 5.0)
			{
				new vid = JarmuID(closestcar, playerid);
				if(!vInfo[vid][vInsert])
					return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, ezért nem tudod eladni!");
								
				if(!strcmp("Nincs_Tulaj", vInfo[vid][vTulaj]) && vInfo[vid][vMunka] == 0 && vInfo[vid][vTulajID] == NINCS)
					return SCM(playerid, COL_LRED, "Ennek a jármûnek nincs tulaja!");
					
				AdminUzenet(COLOR_LIGHTRED,1, "%s eladott egy %s típusú jármûvet! JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[GetVehicleModel(closestcar) - 400], closestcar, vid, JarmuTulaj(vid));
				SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen eladtál egy "#COL_MKEK"%s"#COL_FEHER" típusú jármûvet! Tulaj: %s", VehicleNames[GetVehicleModel(closestcar) - 400], JarmuTulaj(vid));
				
				format(vInfo[vid][vTulaj], MAX_PLAYER_NAME, "Nincs_Tulaj");
				vInfo[vid][vMunka] = 0;
				vInfo[vid][vTulajID] = NINCS;
				vUpdate(vid, vuTulaj, vuMunka);
				
				doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET Tulaj = 'Nincs_Tulaj', TulajID = '-1', Munka = '0'  WHERE ID = '%d'", vid);
				
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
				
 		}
		else if(!strcmp(param, "atuning", false))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
			new vehiclemodel = GetVehicleModel(GetPlayerVehicleID(playerid));
			if(vehiclemodel < 400 || vehiclemodel > 611) return SCM(playerid,COL_LRED, "Ezt a kocsit nem tuningolhatod!");
			new tuningstr[3012];
			new component;
			TuningSzamolo[playerid] = 1;
			while(GetVehicleCompatibleUpgrades(vehiclemodel, TuningSzamolo[playerid], component))
			{
				if(TuningSzamolo[playerid] <= MAX_KOMPONENS)
				{
					if(TuningSzamolo[playerid] == 1) format(tuningstr, sizeof(tuningstr), "Tuning Neve: %s", GetComponentName(component));
					else format(tuningstr, sizeof(tuningstr), "%s\nTuning Neve: %s", tuningstr, GetComponentName(component));
					KomponensID[playerid][TuningSzamolo[playerid]-1] = component;
					TuningSzamolo[playerid]++;
				}
				else break;
			}
			new cim[80];
			format(cim,80, ":: Elérhetõ Tuning alkatreszek a jármûhöz {FF6400}(%d)", VehicleNames[vehiclemodel-400]);
			ShowPlayerDialog(playerid, DIALOG_TUNING_V2, DIALOG_STYLE_LIST, cim, tuningstr, "Felszerel", "Mégse");
			return true;
 		}
		else if(!strcmp(param, "amatrica",false))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Nem vagy kocsiban!");
			new hanyas = NINCS;
			sscanf(params,"{s[64]}D(-1)",hanyas);
			if(hanyas == NINCS)
			{
				SCM(playerid,COL_MKEK,"Használat: /v amatrica [1-4]");
				return true;
			}
			if(hanyas < 1 || hanyas > 4) return SCM(playerid,COL_LRED,"1-4 között!");
			new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
			hanyas = hanyas-1;
			vInfo[vid][vMatrica] = hanyas;
			ChangeVehiclePaintjob(vInfo[vid][vID],hanyas);
			vUpdate(vid,vuMatrica);
			return true;
		}
		else if(!strcmp(param, "info", false))
		{
			if(!Admin(playerid, 1))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
			new id = NINCS;
			sscanf(params, "{s[64]}D(-1)", id);
			if(id == NINCS)
			{
				SCM(playerid, COL_MKEK, "Használat: /v info [JármûID] | Alap esetben a közeledben lévõt veszi figyelembe");
				id = GetClosestVehicle(playerid);
				if(GetDistanceToVehicle(playerid, id) > 6.0)
					return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			}

			new vid = JarmuID(id, playerid);
			SendFormatMessage(playerid, COLOR_WHITE, "Model: "#COL_MKEK"%s"#COL_FEHER" ("#COL_MKEK"%d"#COL_FEHER") | JármûID: "#COL_MKEK"%d[ SQL: %d ]", VehicleNames[vInfo[vid][vModel] - 400], vInfo[vid][vModel], id, vid);
			SendFormatMessage(playerid, COLOR_WHITE, "Tulaj: "#COL_MKEK"%s"#COL_FEHER" | Ára: "#COL_MKEK"%s$", JarmuTulaj(vid), FormatNumber(vInfo[vid][vAr], 0, ','));
		}
		else if(!strcmp(param, "vesz", false))
		{
			if(!IsPlayerInAnyVehicle(playerid))
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");
				
			new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
			if(vid > 0)
			{
				if(!vInfo[vid][vInsert])
					return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, nem veheted meg!");
					
				if(PenzEgyenleg(playerid) >= vInfo[vid][vAr])
				{
					if(vInfo[vid][vMunka] == 0 && vInfo[vid][vTulajID] == NINCS)
					{
						new db = Adat_Num( playerid, ADAT_JARMU );
						if(!db || ((db + 1) <= MAX_HAZ_JARMU && PlayerInfo[playerid][pPremiumPont] >= PremiumPontKell[ADAT_JARMU - 1][1]))
						{
							if(db != 0)
							{
								if(PlayerInfo[playerid][pMegerosites] != playerid)
								{
									PlayerInfo[playerid][pMegerosites] = playerid;
									SFM(playerid, COL_LRED, "Biztos, hogy %d. jármûre szeretnéd költeni a Prémium Pontod? Ha igen, írd be mégegyszer!", (db + 1));
									return true;
								}
								
								PlayerInfo[playerid][pMegerosites] = NINCS;
								PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_JARMU - 1][1];
								nformat(str, 128, "[Jármû]: %s | %s - %d[%d] | %s$ | Maradék PP: %d", JatekosNev(playerid), VehicleNames[ vInfo[vid][vModel] - 400 ], vInfo[vid][vID], vid, FormatNumber(vInfo[vid][vAr], 0, ','), PlayerInfo[playerid][pPremiumPont]);
								Log(FILE_PREMIUM, str);
							}
							
							SendFormatMessage(playerid, COLOR_WHITE, "Gratulálunk! Sikeresen megvettél egy "#COL_MKEK"%s"#COL_FEHER" típusú jármûvet! Ára: "#COL_MKEK"%s"#COL_FEHER" $", VehicleNames[vInfo[vid][vModel] - 400], FormatNumber(vInfo[vid][vAr], 0, ','));
							GiveMoney(playerid,-vInfo[vid][vAr]);
							
							format(vInfo[vid][vTulaj], MAX_PLAYER_NAME, JatekosNev(playerid));
							vInfo[vid][vTulajID] = PlayerInfo[playerid][pID];
							
							Adat_Update( playerid, ADAT_JARMU );
							
							doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET Tulaj = '%s', TulajID = '%d' WHERE ID = '%d'", JatekosNev(playerid, false, true), PlayerInfo[playerid][pID], vid);
							
							Cselekves(playerid, "aláírta az adásvételi szerzõdést", 1);
						} else
							return SCM(playerid, COL_LRED, "Elérted a maximális megvehetõ jármûvek számát, ha többet szeretnél támogasd a szervert! (UserCP -> Támogatás)");
					} else
						return SCM(playerid, COL_LRED, "Ez a jármû már valaki tulajdona, nem veheted meg!");
				} else
					return SCM(playerid, COL_LRED, "Nincs elég pénzed a jármû megvételéhez!");
			} else
				return SCM(playerid, COL_LRED, "Ezt a jármûvet nem veheted meg!");
			return true;
		}
		else if(!strcmp(param, "elad", false))
		{
			new car = NINCS, jatekosid, kocsiar;
			car = GetClosestVehicle(playerid);

			if(sscanf(params, "{s[64]}ud", jatekosid, kocsiar))
				return SCM(playerid, COL_MKEK, "Használat: /v elad [Játékos] [Összeg]");
			if((jatekosid == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekosid))
				return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			if((jatekosid == playerid))
				return SCM(playerid, COL_LRED, "Nem adhatod el saját magadnak a kocsit!");
			if(kocsiar < 500 || kocsiar > 500000)
				return SendClientMessage(playerid, COLOR_WHITE, "Az árnak "#COL_VKEK"650 "#COL_FEHER"és "#COL_VKEK"500 000 "#COL_FEHER"között kell lennie!");
			
			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
					{
						if(vInfo[vid][vMunka] != 0)
							return SCM(playerid, COL_LRED, "Frakciós jármûvet nem adhatsz el!");
							
						new Float:vevopos[3];
						GetPlayerPos(jatekosid, vevopos[0], vevopos[1], vevopos[2]);
						if(!IsPlayerInRangeOfPoint(playerid, 5.0, vevopos[0], vevopos[1], vevopos[2]))
							return SCM(playerid, COL_LRED, "Ez a játékos nincs a közeledben!");
							
						new msgbox[512];
						vInfo[vid][vAr] = kocsiar;
						PlayerInfo[jatekosid][peladojarmu] = vid;
						PlayerInfo[jatekosid][peladokitol] = playerid;
						format(msgbox, sizeof(msgbox), #COL_CITROM"Jármû adásvételi szerzõdése\n\n"#COL_VKEK"%s "#COL_FEHER"felajánlotta, hogy eladja számodra a "#COL_VKEK"%s "#COL_FEHER"típusú jármûvét\n"#COL_VKEK"%s "#COL_FEHER"$-ért. Ha meg szeretnéd venni, kattints az "#COL_VKEK"ALÁÍR "#COL_FEHER"gombra!\nRendszáma: "#COL_VKEK"%d[%d]", \
						JatekosNev(playerid), VehicleNames[GetVehicleModel(vInfo[vid][vID])-400], FormatNumber(kocsiar, 0, ','), car, vid);
						ShowPlayerDialog(jatekosid, DIALOG_ELADAS, DIALOG_STYLE_MSGBOX, "Adásvételi szerzõdés", msgbox, "Aláír", "Mégse");
						format(uzenet, sizeof(uzenet), "átnyújta az adásvételi szerzõdést %s-nak/nek", JatekosNev(jatekosid));
						Cselekves(playerid, uzenet);
					} else
						return SCM(playerid, COL_LRED, "Ez a jármû már valaki tulajdona, nem veheted meg!");
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
		}
		else if(!strcmp(param, "set", false))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
			new car = NINCS, tipusa;
			car = GetClosestVehicle(playerid);

			if(sscanf(params, "{s[64]}d", tipusa))
				return SCM(playerid, COL_MKEK, "Használat: /v set [Típus (MunkaID | 0 = Eladó | 100 = Bérelhetõ | 101 = Oktatós | 102 = SKV | 103 = Használt)]");

			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!vInfo[vid][vInsert])
						return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, ezért nem konfigurálhatod!");
								
				    if(vInfo[vid][vTulajID] == NINCS)
					{
					    SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen átállítottad egy "#COL_VKEK"%s "#COL_FEHER"típusú jármû munkáját!", VehicleNames[GetVehicleModel(car) - 400]);
					    SendFormatMessage(playerid, COLOR_WHITE, "Régi: "#COL_VKEK"%d "#COL_FEHER"| Új: "#COL_VKEK"%d "#COL_FEHER"| JármûID: "#COL_VKEK"%d[%d]"#COL_FEHER"",  vInfo[vid][vMunka], tipusa, car, vid);
					    if(vInfo[vid][vMunka] == 101)
							DestroyDynamic3DTextLabel(vInfo[vid][vOktato]);
						
						vInfo[vid][vMunka] = tipusa;
						vUpdate(vid, vuMunka);
						
						doQuery("UPDATE `"#MYSQL_JARMU_TABLA"` SET vMunka = '%d' WHERE ID = '%d'", tipusa, vid);
						
						if(tipusa == 101)
							vInfo[vid][vOktato] = CreateDynamic3DTextLabel("Tanuló vezetõ", COLOR_MKEK, vInfo[vid][vPosx], vInfo[vid][vPosy], vInfo[vid][vPosz]+0.75, 20.0, .attachedvehicle = vInfo[vid][vID]);
						if(tipusa == 102 && !SKVkocsi(vid))
						    vInfo[vid][vMunka] = 102;
						if(tipusa == 103)
							vInfo[vid][vMunka] = 103;
							//else vInfo[vid][vMunka] = 0;

					} else
						return SCM(playerid, COL_LRED, "Ez a jármû már valaki tulajdona, nem állíthatod át a típusát!");
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			return true;
		}
		else if(!strcmp(param, "ár", false) || !strcmp(param, "ar", false))
		{
			if(!Admin(playerid, FOADMIN_SZINT))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
			new car = NINCS,tipusa;
			car = GetClosestVehicle(playerid);

			if(sscanf(params, "{s[64]}d", tipusa))
				return SCM(playerid, COL_MKEK, "Használat: /v ár [Érték] | Ezen az áron lehet majd bérelni, megvenni");

			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!vInfo[vid][vInsert])
						return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, ezért nem konfigurálhatod!");
					
				    if(vInfo[vid][vTulajID] == NINCS)
					{
					    SendFormatMessage(playerid, COLOR_WHITE, "Sikeresen átállítottad egy "#COL_VKEK"%s "#COL_FEHER"típusú jármû (bérlési / megvételi) árát!", VehicleNames[GetVehicleModel(car) - 400]);
					    SendFormatMessage(playerid, COLOR_WHITE, "Régi: "#COL_VKEK"%s"#COL_FEHER"$ | Új: "#COL_VKEK"%s"#COL_FEHER"$ | JármûID: "#COL_VKEK"%d[%d]"#COL_FEHER"",  FormatNumber(vInfo[vid][vAr], 0, ','), FormatNumber(tipusa, 0, ','), car, vid);
					    vInfo[vid][vAr] = tipusa;
						vUpdate(vid, vuAr);
						
					} else
						return SCM(playerid, COL_LRED, "Ez a jármû már valaki tulajdona, nem állíthatod át az árát!");
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			return true;
		}
		else if(!strcmp(param, "park", false))
		{
			new car = NINCS;
			car = GetClosestVehicle(playerid);

			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!vInfo[vid][vInsert])
						return SCM(playerid, COL_LRED, "Ez ideiglenes lehívott jármû, ezért nem parkolhatod!");
					
					if(Admin(playerid, 2) || (FrakcioJarmu(playerid, vid) && PlayerInfo[playerid][prang] >= 9) || vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
					{
						if(vInfo[vid][vMunka] > MAX_FRAKCIO && !Admin(playerid, FOADMIN_SZINT))
							return SCM(playerid, COL_LRED, "Ezt a jármûvet csak FõAdmin parkolhatja el!");
							
						new Float:vinfo[5];
						
						GetVehicleHealth(car, vinfo[0]);
						GetVehiclePos(car, vinfo[1], vinfo[2], vinfo[3]);
						GetVehicleZAngle(car, vinfo[4]);
						
						vInfo[vid][vElet] = vinfo[0];
						vInfo[vid][vPosx] = vinfo[1];
						vInfo[vid][vPosy] = vinfo[2];
						vInfo[vid][vPosz] = vinfo[3];
						vInfo[vid][vAngle] = vinfo[4];
						
						vUpdate(vid, vuPos);
						vInfo[vid][vMotorelinditva] = false;
						PlayerInfo[playerid][pmotortinditja] = false;
						
						GetVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
						DestroyVehicle(vInfo[vid][vID]);
						
						JarmuSpawn(vid, vInfo[vid][vModel], vInfo[vid][vPosx], vInfo[vid][vPosy], vInfo[vid][vPosz], vInfo[vid][vAngle], vInfo[vid][vSzin1], vInfo[vid][vSzin2]);
						TuningBetolt(car);
						SetVehicleHealth(vInfo[vid][vID], vinfo[0]);
						UpdateVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);

						
						if(vInfo[vid][vTulajID] != PlayerInfo[playerid][pID] && Admin(playerid, 2))
							SFM(playerid, COL_MKEK, "Sikeresen leparkoltad "#COL_MKEK"%s"#COL_FEHER" jármûvét!", JarmuTulaj(vid));
						else if(vInfo[vid][vTulajID] == PlayerInfo[playerid][pID])
							SCM(playerid, COL_MKEK, "Sikeresen leparkoltad a jármûvet!");
					} else
						return SCM(playerid, COL_LRED, "Ezt a jármûvet nem parkolhatod le!");
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
			return true;
		}
		else if(!strcmp(param, "alefoglal", false) || !strcmp(param, "ale", false))
		{
			if(!Admin(playerid, 4))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
			new car = GetClosestVehicle(playerid);
			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new id = IsSeatTaken(car, 0);
				if(id != playerid && id != NINCS)
					return SCM(playerid, COL_LRED, "A vezetõ ülés foglalt!");
					
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!IsScripter(playerid) || (!IsScripter(playerid) && vInfo[vid][vInsert]))
						AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s lefoglalt egy %s típusú jármûvet! JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[vInfo[vid][vModel] - 400], car, vid, JarmuTulaj(vid));
					
					SCM(playerid, COL_MKEK, "Jármû sikeresen lefoglalva!");
					
					if(id == NINCS)
						PutPlayerInVehicle(playerid, car, 0);
						
					SetJarmu(car, KOCSI_MOTOR, 1);
					vInfo[vid][vMotorelinditva] = true;
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs jármû a közeledben!");
			return true;
		}
		else if(!strcmp(param, "töröl", true) || !strcmp(param, "torol", false))
		{
			if(!Admin(playerid, 5))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
			new car = NINCS;
			car = GetClosestVehicle(playerid);

			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(vid > 0)
				{
					if(!Admin(playerid, FOADMIN_SZINT) && vInfo[vid][vInsert])
						return SCM(playerid, COL_LRED, "Megvehetõ vagy megvett jármûvet nem törölhetsz, csak is lehívottat!");
				
					if(vInfo[vid][vInsert])
						AdminUzenet(COLOR_LIGHTRED,1, "%s törölt egy %s típusú jármûvet! JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[GetVehicleModel(car) - 400], car, vid, JarmuTulaj(vid));
					
					SCM(playerid, COL_MKEK, "Jármû sikeresen törölve!");
					
					JarmuNullazas(vid);
					
					DestroyVehicle(vInfo[vid][vID]);
					Iter_Remove(Jarmuvek, vInfo[vid][vID]);
					
					vInfoID[vInfo[vid][vID]] = 0;
					vInfo[vid][vID] = 0;
					
					if(vInfo[vid][vInsert])
					{
						doQuery("DELETE FROM `"#MYSQL_JARMU_TABLA"` WHERE id = '%d'", vid);
						vInfo[vid][vInsert] = false;
					}
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs jármû a közeledben!");
			return true;
		}
		else if(!strcmp(param, "lámpa", true) || !strcmp(param, "lampa", false))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				if(!GetPlayerVehicleSeat(playerid))
				{
					new jarmu = GetPlayerVehicleID(playerid);
					if(GetJarmu(jarmu, KOCSI_LAMPA) == 1)
					{
						SetJarmu(jarmu, KOCSI_LAMPA, 0);
						Cselekves(playerid, "lekapcsolta a jármû lámpáját", 1);
					}
					else
					{
						SetJarmu(jarmu, KOCSI_LAMPA, 1);
						Cselekves(playerid, "felkapcsolta a jármû lámpáját", 1);
					}
				}
			}
			return true;
		}
		else if(!strcmp(param, "mh", false))
		{
			if(IsPlayerInAnyVehicle(playerid))
			{
				if(!GetPlayerVehicleSeat(playerid))
				{
					new jarmu = GetPlayerVehicleID(playerid);
					if(GetJarmu(jarmu, KOCSI_MOTORHAZTETO) == 1)
					{
						SetJarmu(jarmu, KOCSI_MOTORHAZTETO, 0);
						Cselekves(playerid, "bezárta a motorháztetõt", 1);
					}
					else
					{
						SetJarmu(jarmu, KOCSI_MOTORHAZTETO, 1);
						Cselekves(playerid, "kinyitotta a motorháztetõt", 1);
					}
				}
			}
			return true;
		}
		else if(!strcmp(param, "cst", false))
		{
			new car = NINCS;
			car = GetClosestVehicle(playerid);
			
			new funk[32];
			if(sscanf(params, "{s[64]}s[32]", funk))
			if(isnull(funk))
			{
				SCM(playerid,COL_LRED,"/v cst [Nyit / Zár / Enter / Exit]");
				return 1;
			}
			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				if(egyezik(funk,"Nyit"))
				{
					if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 1) return SCM(playerid,COL_LRED,"Már nyitva van!");
					SetJarmu(car, KOCSI_CSOMAGTARTO, 1);
					Cselekves(playerid, "kinyitotta a jármû csomagtartóját", 1);
					return 1;
				}
				if(egyezik(funk,"Zár"))
				{
					if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 0) return SCM(playerid,COL_LRED,"Már zárva van!");
					SetJarmu(car, KOCSI_CSOMAGTARTO, 0);
					Cselekves(playerid, "becsukta a jármû csomagtartóját", 1);
					return 1;
				}
				if(egyezik(funk,"Enter"))
				{
					if(GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0)
					{
						SCM(playerid,COL_LRED,"Csak 0ás INT es 0ás VW!");
						return 1;
					}

					if( IsABicikli(car) || IsAMotor(car) )
					{
					    SCM(playerid,COL_LRED,"Motorba és biciklibe ne szállj be.");
					    return 1;
					}
					
					if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 1)
					{
						Cselekves(playerid, "bemászott a csomagtartóba");
						Freeze(playerid,5000);
						SetPlayerInterior(playerid,1);
						SetPlayerVirtualWorld(playerid,car);
						SetPlayerPos(playerid,1659.5399,221.7910,-82.2500);
						ApplyAnimation(playerid,"CRACK","crckdeth2",4.1,0,1,1,1,0);
					}
					else
					{
						SCM(playerid,COL_LRED,"A csomagtartó zárva van!");
					}
					return 1;
				}
			}
			if(egyezik(funk,"exit"))
			{
				if(!IsPlayerInRangeOfPoint(playerid,10,1659.5399,221.7910,-82.2500)) return SCM(playerid,COL_LRED,"Nem vagy csomagtartóban!");
				car = GetPlayerVirtualWorld(playerid);

				if(GetJarmu(car, KOCSI_CSOMAGTARTO) == 1)
				{
					new Float:Poz[3];
					GetVehiclePos(car,Poz[0],Poz[1],Poz[2]);
					GetXYBehindVehicle(car,Poz[0],Poz[1],4.0);
					SetPlayerPos(playerid,Poz[0],Poz[1],Poz[2]);
					Cselekves(playerid, "kimászott a csomagtartóból");
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
				}
				else
				{
					SCM(playerid,COL_LRED,"A csomagtartó zárva van!");
				}
				return 1;
			}

			return true;
		}
		else if(!strcmp(param, "zár", true) || !strcmp(param, "zar", false))
		{
			new car = NINCS;
			car = GetClosestVehicle(playerid);
			
			if(GetDistanceToVehicle(playerid, car) < 5.0)
			{
				new vid = JarmuID(car, playerid);
				if(FrakcioJarmu(playerid, vid) || FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_REND || Admin(playerid, 3) || vInfo[vid][vTulajID] == PlayerInfo[playerid][pID] ||
				(PlayerInfo[playerid][pBereltJarmu] != 0 && PlayerInfo[playerid][pBereltJarmu] == vid) ||
				PlayerInfo[playerid][pJarmuKolcson] == vid || (PlayerInfo[playerid][pKereskedo] > 0 && vInfo[vid][vMunka] == 103))
				{
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					
					if(!vInfo[vid][vZarva])
					{
						if(IsABicikli(vInfo[vid][vModel]))
							SetJarmu(car, KOCSI_MOTOR, 0);
							
						AjtoZar(playerid, vid);
					}
					else
						AjtoZar(playerid, vid, true);
						
					vUpdate(vid, vuZarva);
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs jármû a közeledben!");
			return true;
		}
		else if(!strcmp(param, "bérel", false) || !strcmp(param, "berel", false))
		{
			if(!PlayerInfo[playerid][pJarmuben])
				return SCM(playerid, COL_LRED, "Jármûben kell ülnöd ha ki szeretnéd bérelni!");
				
			new id = PlayerInfo[playerid][pJarmuben];
			if(vInfo[id][vMunka] != 100)
				return SCM(playerid, COL_LRED, "Ez a jármû nem bérelhetõ!");
			
			if(!vInfo[id][vBerelt])
			{
				if(PlayerInfo[playerid][ppenz] < vInfo[id][vAr])
					return SFM(playerid, COL_LRED, "Nincs elegendõ készpénzed a jármû kibérléséhez! A bérlés összege "#COL_MKEK"%s"#COL_FEHER"$!", FormatNumber(vInfo[id][vAr], 0, ','));
					
				GiveMoney(playerid,-vInfo[id][vAr]);
				PlayerInfo[playerid][pBereltJarmu] = id;
				vInfo[id][vBerelt] = true;
				
				SFM(playerid, COL_MKEK, "Sikeresen kibéreltél egy "#COL_MKEK"%s"#COL_FEHER" típusú jármûvet "#COL_MKEK"%s"#COL_FEHER"$-ért! Vigyázz rá!", VehicleNames[vInfo[id][vModel] - 400], FormatNumber(vInfo[id][vAr], 0, ','));
				return true;
				
			} else {
				
				if(PlayerInfo[playerid][pBereltJarmu] != id)
					return SCM(playerid, COL_LRED, "Ezt a jármûvet már bérli valaki, válassz másikat!");
					
				if(!IsPlayerInRangeOfPoint(playerid, 20.0, vInfo[id][vPosx], vInfo[id][vPosy], vInfo[id][vPosz]))
				{
					PlayerInfo[playerid][pCP] = CP_GPS;
					SetPlayerCheckpoint(playerid, vInfo[id][vPosx], vInfo[id][vPosy], vInfo[id][vPosz], 5.0);
				
					SCM(playerid, COL_LRED, "Itt nem mondhatod vissza a bérlést. Vidd vissza a telephelyre!");
					return true;
				}
				
				vInfo[ PlayerInfo[playerid][pBereltJarmu] ][vBerelt] = false;
				SetVehicleToRespawn(vInfo[ PlayerInfo[playerid][pBereltJarmu] ][vID]);
				PlayerInfo[playerid][pBereltJarmu] = 0;
				
				SCM(playerid, COL_MKEK, "Jármû bérlés visszamondva!");
			}
			return true;
		}
		else if(!strcmp(param, "nev", false) || !strcmp(param, "név", false))
		{
			if(!IsScripter(playerid))
				return SCM(playerid, COL_LRED, "Csak Scripter nevezheti át a jármûveke!");
				
			new id, nev[32];
			if(sscanf(params, "{s[24]}ds[32]", id, nev))
				return SCM(playerid, COL_MKEK, "Használat: /v név [Jármû Model] [Új név] | Jármû model számban értendõ!");
				
			if(id < 400 || id > 611)
				return SCM(playerid, COL_LRED, "Hibás jármû model! 400 és 611 között kell, hogy legyen!");
			
			id = (id - 400);
			
			new regi[32];
			if(strlen(JarmuAdat[id][jUjNev]) > 2) regi = JarmuAdat[id][jUjNev];
			else regi = JarmuAdat[id][jNev];
			
			SFM(playerid, COL_VZOLD, "Jármû név váltása sikeres! Régi: "#COL_MKEK"%s"#COL_FEHER" => Új: %s", regi, nev);
			
			JarmuAdat[id][jUjNev] = nev;
			doQuery("UPDATE `"#MYSQL_JARMUADAT_TABLA"` SET ujnev = '%s' WHERE id = '%d'", nev, id);
			return true;
		}
	}
	return true;
}
	
CMD:haz(playerid, params[])
{
	new
	    param[64],
	    houseid = KozeliHaz(playerid);
	    
	if(sscanf(params, "s[64]{}", param))
	{
		SCM(playerid, COL_MKEK, "Használat: /ház [ Paraméterek ]");
		if(!Admin(playerid, 3))
			SCM(playerid, COL_MKEK, "[Paraméterek]: Be, Ki, Zár, Vesz, Széf, Pince");
		else
		{
		    SCM(playerid, COL_MKEK, "[Paraméterek]: Be, Ki, Zár, Vesz, Széf, Pince");
			SCM(playerid, COL_MKEK, "[Admin Paraméterek]: FõAdmin(1337): Töröl, Interior, Ár, Típus | Admin(3): Goto, Zár | Admin(6): Bejárat");
		}
		return true;
	}
	
	if(!strcmp(param, "töröl", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		else if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");
		else {
			new i = -1;
			
			for(;++i < MAXBUTORSZAM;)
			{
				if((ButorInfo[i][butorHasznalva] == true) && (ButorInfo[i][butorVW] == houseid))
				{
					ButorInfo[i][butorPosX] = 0.0;
					ButorInfo[i][butorPosY] = 0.0;
					ButorInfo[i][butorPosZ] = 0.0;
					ButorInfo[i][butorPosRX] = 0.0;
					ButorInfo[i][butorPosRY] = 0.0;
					ButorInfo[i][butorPosRZ] = 0.0;
					ButorInfo[i][butorModel] = 0;
					ButorInfo[i][butorVW] = 0;
					ButorInfo[i][butorInterior] = 0;
					ButorInfo[i][butorHasznalva] = false;
					ButorInfo[i][butorMegveve] = false;
					DestroyDynamicObject(ButorInfo[i][butorObject]);
					ButorInfo[i][butorObject] = 0;
					ButorInfo[i][butorTipus] = 0;
					ButorInfo[i][butorListitem] = NINCS;
				}
			}
			
			i = NINCS;
			for(;++i < 50;)
			{
				HazInfo[houseid][hDrogMi][i] = 0;
				HazInfo[houseid][hDrogAllapot][i] = 0;
				HazInfo[houseid][hDrogMennyi][i] = 0;
				
				if(IsValidDynamic3DTextLabel( HazInfo[houseid][hDrogHely][i] ))
					DestroyDynamic3DTextLabel( HazInfo[houseid][hDrogHely][i] );
			}
			
			new querly[128];
			mysql_tquery(sql_ID, (format(querly, 128, "DELETE FROM `"#MYSQL_BUTOR_TABLA"` WHERE butorVW = '%d'", houseid), querly), "", "");
			
			DestroyDynamicPickup(HazInfo[houseid][pickup]);
			HazInfo[houseid][hazar] = 0;
			HazInfo[houseid][hasznalatban] = false;
			TextDrawDestroy(HazInfo[houseid][HazTextDraw]);
			HazInfo[houseid][posx] = 0.0;
			HazInfo[houseid][posy] = 0.0;
			HazInfo[houseid][posz] = 0.0;
			DestroyDynamic3DTextLabel(HazInfo[houseid][belsolabel]);
			DestroyDynamicPickup(HazInfo[houseid][belsopickup]);
			HazInfo[houseid][belsopickup] = -1;
			HazInfo[houseid][tulaj] = EOS;
			HazInfo[houseid][inter] = 0;
			Streamer_Update(playerid);		
			for(new ih = 0; ih <= 14; ih++)
			{
				HazInfo[houseid][hFegyver][ih] = 0;
				HazInfo[houseid][hTolteny][ih] = 0;
			}
			for(new ih2 = 0; ih2 <= 4; ih2++){ HazInfo[houseid][hazSzef][ih2] = 0; }
			mysql_tquery(sql_ID, (format(querly, 128, "DELETE FROM `"#MYSQL_HAZ_TABLA"` WHERE id = '%d'", houseid), querly), "", "");				
			SCM(playerid, COL_MKEK, "Ház sikeresen törölve!");
		}
		return true;
	}
	else if(!strcmp(param, "bejarat", true) || !strcmp(param, "bejárat", true))
	{
		if(!Admin(playerid, FSEGED_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id;
		if(sscanf(params, "{s[64]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /haz bejárat [Házszám] | Bejárat áthelyezése");
			
		if(id > MAX_HOUSE || id < 0 || !HazInfo[id][hasznalatban])
			return SCM(playerid, COL_LRED, "Nincs ilyen ház!");
		
		new Float:pos[3];
		GetPlayerPos(playerid, PosExt(pos));
		
		TextDrawDestroy(HazInfo[id][HazTextDraw]);
		DestroyDynamicPickup(HazInfo[id][pickup]);
		
		HazInfo[id][posx] = pos[0];
		HazInfo[id][posy] = pos[1];
		HazInfo[id][posz] = pos[2];
		
		if(HazInfo[id][hTulajID] == NINCS)
		{
			SFM(playerid, COL_VZOLD, "Ház sikeresen áthelyezve! ID: "#COL_MKEK"%d"#COL_FEHER" | Tulaj: "#COL_MKEK"Nincs"#COL_FEHER" | Ára: "#COL_MKEK"%s$", id, FormatNumber(HazInfo[id][hazar], 0, ','));
			format(uzenet, sizeof(uzenet), "Házszám: ~g~%d.~n~~w~Ár: ~g~%s$.~n~~w~Tulaj: ~g~Senki.", id, FormatNumber(HazInfo[id][hazar], 0, '.'));
		
		} else {
		
			SFM(playerid, COL_VZOLD, "Ház sikeresen áthelyezve! ID: "#COL_MKEK"%d"#COL_FEHER" | Tulaj: "#COL_MKEK"[%d]%s", id, HazInfo[id][hTulajID], HazInfo[id][tulaj]);
			format(uzenet, sizeof(uzenet), "Házszám: ~g~%d.~n~~w~Tulaj: ~g~%s.", id, HazInfo[id][tulaj]);
		}
		
		SpawnHouse(id, uzenet, (HazInfo[id][hTulajID] == NINCS ? HAZ_MEGVEHETO_MODEL : HAZ_MEGVETT_MODEL));
		BelsoPickup(id, HazInfo[id][inter]);
		doQuery("UPDATE `"#MYSQL_HAZ_TABLA"` SET poziciox = '%f', pozicioy = '%f', pozicioz = '%f' WHERE id = '%d'", PosExt(pos), id);
	}
	else if(!strcmp(param, "tipus", true) || !strcmp(param, "típus", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id, tipus;
		if(sscanf(params, "{s[64]}dd", id, tipus))
			return SCM(playerid, COL_MKEK, "Használat: /haz típus [Házszám] [Típus] | 1 = Lakás, 2 = GN, 3 = LS, 4 = Gettó, 5 = Falu");
			
		if(id > MAX_HOUSE || id < 0 || !HazInfo[id][hasznalatban])
			return SCM(playerid, COL_LRED, "Nincs ilyen ház!");
		
		if(tipus > 5 || tipus < 1)
			return SCM(playerid, COL_LRED, "Hibás típus! 1 = Lakás, 2 = GN, 3 = LS, 4 = Gettó, 5 = Falu");
		
		SFM(playerid, COL_VZOLD, "Ház típusa sikeresen frissítve! Régi: %d => Új: %d", HazInfo[id][hTipus], tipus);
		HazInfo[id][hTipus] = tipus;
		doQuery("UPDATE `"#MYSQL_HAZ_TABLA"` SET hTipus = '%d' WHERE id = '%d'", tipus, id);
	}
	else if(!strcmp(param, "elad", true))
	{
		new penz;
		if(sscanf(params, "{s[64]}d", penz))
			return SCM(playerid, COL_MKEK, "Használat: /haz elad [Ára] | Saját ház eladása");
		
		new jatekos = GetClosestPlayer(playerid);
		if(!PlayerToPlayer(playerid,jatekos,5))
		{
			return SCM(playerid,COL_LRED,"Nincs senki a közeledben!");
		}
		
		if(houseid == NINCS && PlayerInfo[playerid][phaz] == NINCS)
			return SCM(playerid, COL_LRED, "Nem vagy sem a házadban sem a bejáratnál!");
			
		if(houseid == NINCS)
			houseid = PlayerInfo[playerid][phaz];
		
		if(penz < 1)
		{
			SCM(playerid,COL_LRED,"Minimum 1$");
			return 1;
		}
		
		
		new i = NINCS, bool:oks;
		for(;++i < MAX_HAZ_JARMU;)
		{
			if(PlayerInfo[playerid][pHazKulcs][i] == houseid)
			{
				oks = true;
				break;
			}
		}
		
		if(!oks)
			return SCM(playerid, COL_LRED, "Cicaborsó, ez nem a te házad. Ne add már el :D");
			
		SFM(playerid, COL_MKEK, "Felajánlottad, hogy eladod a See utca "#COL_MKEK"%d."#COL_FEHER" házad neki: "#COL_MKEK"%s"#COL_FEHER" | Ára: "#COL_MKEK"%sFt", houseid, JatekosNev(jatekos, true), FormatNumber(penz, 0, ','));
		SFM(jatekos, COL_MKEK, ""#COL_MKEK"%s"#COL_FEHER" felajánlotta neked, hogy eladja a See utca "#COL_MKEK"%d."#COL_FEHER" házát. | Ára: "#COL_MKEK"%sFt", JatekosNev(playerid, true), houseid, FormatNumber(penz, 0, ','));
		SCM(jatekos, COL_MKEK, "Ha meg szeretnéd venni írd be, hogy "#COL_MKEK"/elfogad szerzõdés");
		Cselekves(playerid, "átnyújtotta valakinek az adásvételi szerzõdést..");
		
		PlayerInfo[jatekos][pProcess][0] = PR_ELAD_HAZ;
		PlayerInfo[jatekos][pProcess][1] = playerid;
		PlayerInfo[jatekos][pProcess][2] = penz;
		PlayerInfo[jatekos][pProcess][3] = houseid;
		return true;
	}
	else if(!strcmp(param, "goto", true))
	{
		new hazszam;
		if(!Admin(playerid, 3))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		if(sscanf(params, "{s[64]}d", hazszam))
			return SCM(playerid, COL_MKEK, "Használat: /haz goto [Házszám]");
		if(!HazInfo[hazszam][hasznalatban])
			return SCM(playerid, COL_LRED, "Nincs ilyen ház!");
		
		SetPos(playerid, HazInfo[hazszam][posx], HazInfo[hazszam][posy], HazInfo[hazszam][posz]);
		SFM(playerid, COL_VZOLD, "Sikeresen teleportáltál a "#COL_MKEK"%d"#COL_FEHER" házszámhoz! Ház tulaj: "#COL_MKEK"%s", hazszam, HazInfo[hazszam][tulaj]);
		return true;
	}
	else if(!strcmp(param, "be", true))
	{
		if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");
			
		if(PlayerInfo[playerid][phaz] != NINCS)
			return SCM(playerid, COL_LRED, "Jelenleg is házban tartózkodsz!");
			
		if(HazInfo[houseid][hZarva])
			return SCM(playerid, COL_LRED, "Az ajtó zárva van!");
		
		PutPlayerInHouse(playerid, houseid);   
	}
	else if(!strcmp(param, "ki", true))
	{
		new hid = PlayerInfo[playerid][phaz];
		if(hid == NINCS)
			return SCM(playerid, COL_LRED, "Jelenleg nem tartózkodsz egy házban sem, hová szeretnél kimenni?");
		else if(IsPlayerInRangeOfPoint(playerid, 1.0, BelsoInterior[HazInfo[ hid ][inter]][belsox], BelsoInterior[HazInfo[ hid ][inter]][belsoy], BelsoInterior[HazInfo[ hid ][inter]][belsoz]))
		{
			if(HazInfo[hid][hZarva] && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
				return SCM(playerid, COL_LRED, "Az ajtó zárva van!");
				
			RemovePlayerFromHouse(playerid, hid);
		} else return SCM(playerid, COL_LRED, "Nem vagy kijárat közelben!");
	}
	else if(!strcmp(param, "zar", true) || !strcmp(param, "zár", true))
	{
		if(houseid == NINCS)
			houseid = PlayerInfo[playerid][phaz];
	
		if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");
		
		if(HazInfo[houseid][hTulajID] != PlayerInfo[playerid][pID] && !Admin(playerid, 3))
			return SCM(playerid, COL_LRED, "Ehhez a házhoz nincs kulcsod.");
			
		if((HazInfo[houseid][hZarva] = true - HazInfo[houseid][hZarva]))
		{
			GameTextForPlayer(playerid, "~w~Ház ~r~Zárva", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			Cselekves(playerid, "bezárta a háza ajtaját..");
			
		} else {
			
			GameTextForPlayer(playerid, "~w~Ház ~g~Nyitva", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			Cselekves(playerid, "kinyitotta a háza ajtaját..");
		}
	}
	else if(!strcmp(param, "pince", false))
	{
		new melyik = 0;
		if(PlayerInfo[playerid][phaz] == -1)
			return SCM(playerid, COL_LRED, "Jelenleg nem tartózkodsz egy házban sem, hová szeretnél kimenni?");
			
		if(!HazInfo[ PlayerInfo[playerid][phaz] ][hTipus])
			return SCM(playerid, COL_LRED, "Az Adminisztrátorok még nem állították be a házad típusát, használat elõtt kérlek értesítsd õket.");
			
		if(HazInfo[ PlayerInfo[playerid][phaz] ][hTipus] == 1)
			return SCM(playerid, COL_LRED, "Ebben a ház típusban nem használható a pince!");
			
		if(!HazInfo[ PlayerInfo[playerid][phaz] ][hPince] && (PlayerInfo[playerid][pMegerosites] == NINCS || PlayerInfo[playerid][pMegerosites] == playerid))
		{
			if(PlayerInfo[playerid][pMegerosites] == playerid)
			{
				if(PlayerInfo[playerid][pBszPenz] < 22000)
					SCM(playerid, COL_LRED, "Neked nincs $ a bankszámládon, ezért ezt nem tudod kifizetni!");
				else
				{
					SCM(playerid, COL_VZOLD, "22 000$ levonva a bankszámládról! (( Pince használata: /ház pince ))");
					PlayerInfo[playerid][pBszPenz] -= 22000;
					HazInfo[ PlayerInfo[playerid][phaz] ][hPince] = 1;
					doQuery("UPDATE `"#MYSQL_HAZ_TABLA"` SET hPince = '1' WHERE id = '%d'", PlayerInfo[playerid][phaz]);
				}
				
				PlayerInfo[playerid][pMegerosites] = NINCS;
				return true;
			}
			
			SCM(playerid, COL_VZOLD, "Biztos vagy benne, hogy pincét szeretnél építtetni 22 000$-ért?");
			SCM(playerid, COL_VZOLD, "Ha igen, írd be újra a parancsot! (( Az összeg bankszámláról kerül levonásra! ))");
			PlayerInfo[playerid][pMegerosites] = playerid;
			return true;
		}
			
		if(!IsPlayerInRangeOfPoint(playerid, 1.0, 1954.5481, -2362.2747, 17.8566) && !IsPlayerInRangeOfPoint(playerid, 1.0, BelsoInterior[HazInfo[PlayerInfo[playerid][phaz]][inter]][belsox], BelsoInterior[HazInfo[PlayerInfo[playerid][phaz]][inter]][belsoy], BelsoInterior[HazInfo[PlayerInfo[playerid][phaz]][inter]][belsoz]))
			return SCM(playerid, COL_LRED, "Nem vagy kijárat közelben!");
		
		if(IsPlayerInRangeOfPoint(playerid, 1.0, 1954.5481, -2362.2747, 17.8566))
			melyik = 1;
		else
			melyik = 2;
		
		switch(melyik)
		{
			case 1:
				return PutPlayerInHouse(playerid, PlayerInfo[playerid][phaz]);
			case 2:
			{
				SetPlayerPos(playerid, 1954.5481, -2362.2747, 17.8566);
				SetVirtualWorld(playerid, PlayerInfo[playerid][phaz]);
				SetPlayerInterior(playerid, 123);
				
				PlayerInfo[playerid][pobjectbetoltes] = true;
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, "~r~Objectek ~y~betöltése", 3000, 3);
				SetTimerEx("Kifagyaszt", 3000, false, "d", playerid);
	
				Streamer_Update(playerid);
				return true;
			}
		}
		return true;
	}
	else if(!strcmp(param, "interior", true))
	{
		new id, query[128];
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");
		if(sscanf(params, "{s[64]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /haz interior [0-18]");
		if(id < 0 || id > 19)
			return SCM(playerid, COL_MKEK, "Hibás érték! Minimum 0 és maximum 18 lehet!");
		
		mysql_tquery(sql_ID, (format(query, 128, "UPDATE `"#MYSQL_HAZ_TABLA"` SET interior = '%d' WHERE id = '%d'", id, houseid), query), "", "");
		SFM(playerid, COL_VZOLD, "Ház interiorja sikeresen átállítva! Régi: %d -> Új: %d", HazInfo[houseid][inter], id);
		HazInfo[houseid][inter] = id;
		DestroyDynamicPickup(HazInfo[houseid][belsopickup]);
		HazInfo[houseid][belsopickup] = CreateDynamicPickup(1318,23,BelsoInterior[id][belsox],BelsoInterior[id][belsoy],BelsoInterior[id][belsoz],houseid,BelsoInterior[id][interior],-1);
		
		return true;
	}
	else if(!strcmp(param, "ar", true) || !strcmp(param, "ár", true))
	{
		new id, query[128];
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");
		if(sscanf(params, "{s[64]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /haz ár [Érték]");
		if(id < 1 || id > 200000000)
			return SCM(playerid, COL_MKEK, "Hibás érték! Minimum 1 és maximum 200 000 000 lehet!");
		
		SFM(playerid, COL_VZOLD, "Ház ára sikeresen átállítva! Régi: %s$ -> Új: %s$", FormatNumber(HazInfo[houseid][hazar], 0, ','), FormatNumber(id, 0, ','));
		mysql_tquery(sql_ID, (format(query, 128, "UPDATE `"#MYSQL_HAZ_TABLA"` SET ar = '%d' WHERE id = '%d'", id, houseid), query), "", "");
		HazInfo[houseid][hazar] = id;
		
		if(HazInfo[houseid][hTulajID] == NINCS)
		{
			nformat(str, 128, "Házszám: %d.\nÁr: %d.\nTulaj: Senki.", houseid, HazInfo[houseid][hazar]);
			UpdateDynamic3DTextLabelText(HazInfo[houseid][label], 0xFFFFFF, str);
		}
		
		return true;
	}
	else if(!strcmp(param, "vesz", true))
	{
		if(houseid == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");
		if(HazInfo[houseid][hTulajID] != NINCS)
			return SCM(playerid, COL_LRED, "Ez a ház már valaki tulajdona, ezért nem veheted meg!");
		if(PlayerInfo[playerid][pBszPenz] < HazInfo[houseid][hazar])
			return SCM(playerid, COL_LRED, "Nincs elég pénz a bankszámládon, hogy megvehesd!");
		
		new db = Adat_Num( playerid, ADAT_HAZ );
		if(!db || ((db + 1) <= MAX_HAZ_JARMU && PlayerInfo[playerid][pPremiumPont] >= PremiumPontKell[ADAT_HAZ - 1][1]))
		{
			if(db != 0)
			{
				if(PlayerInfo[playerid][pMegerosites] != playerid)
				{
					PlayerInfo[playerid][pMegerosites] = playerid;
					SFM(playerid, COL_LRED, "Biztos, hogy %d. házra szeretnéd költeni a Prémium Pontod? Ha igen, írd be mégegyszer!", (db + 1));
					return true;
				}
				
				PlayerInfo[playerid][pMegerosites] = NINCS;
				PlayerInfo[playerid][pPremiumPont] -= PremiumPontKell[ADAT_HAZ - 1][1];
				nformat(str, 128, "[Ház]: %s | %d | %s$ | Maradék PP: %d", JatekosNev(playerid), houseid, FormatNumber(HazInfo[houseid][hazar], 0, ','), PlayerInfo[playerid][pPremiumPont]);
				Log(FILE_PREMIUM, str);
			}

			new query[256];
			format(query, sizeof(query), "UPDATE `"#MYSQL_HAZ_TABLA"` SET tulaj = '%s', TulajID = '%d' WHERE id = '%d'",JatekosNev(playerid), PlayerInfo[playerid][pID], houseid);
			mysql_tquery(sql_ID, query, "", "");
			
			HazInfo[houseid][hTulajID] = PlayerInfo[playerid][pID];
			PlayerInfo[playerid][pBszPenz] -= HazInfo[houseid][hazar];
			
			SFM(playerid, COL_MKEK, "Sikeresen megvetted a házat "#COL_MKEK"%s"#COL_FEHER"$-ért!", FormatNumber(HazInfo[houseid][hazar], 0, ','));

			format(HazInfo[houseid][tulaj], MAX_PLAYER_NAME, JatekosNev(playerid));
			format(uzenet, sizeof(uzenet), "Házszám: ~g~%d.~n~~w~Tulaj: ~g~%s.", houseid, HazInfo[houseid][tulaj]);
			TextDrawSetString(HazInfo[houseid][HazTextDraw], uzenet);

			DestroyDynamicPickup(HazInfo[houseid][pickup]);
			HazInfo[houseid][pickup] = CreateDynamicPickup(HAZ_MEGVETT_MODEL,23,HazInfo[houseid][posx],HazInfo[houseid][posy],HazInfo[houseid][posz],0,0,-1);
			Streamer_Update(playerid);
			Adat_Update( playerid, ADAT_HAZ );
			
		} else
			return SCM(playerid, COL_LRED, "Elérted a maximális megvehetõ házak számát, ha többet szeretnél támogasd a szervert! (UserCP -> Támogatás)");
		return true;
	}
	else if(!strcmp(param, "széf", true) || !strcmp(param, "szef", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT) && !PlayerInfo[playerid][pAduty] || !IsScripter(playerid))
		{
			new hazszef = HazSzef(playerid);
			
			if(hazszef == -2)
				return SCM(playerid, COL_LRED, "Neked még nincs házad!");
			if(hazszef == NINCS)
				return SCM(playerid, COL_LRED, "Nem vagy a házadban!");
			if(hazszef == -3)
				return SCM(playerid, COL_LRED, "Még nem vettél széfet! (( /bútor ))");
			
		}
		
		if(PlayerInfo[playerid][phaz] == NINCS)
			return SCM(playerid, COL_LRED, "Nem vagy házban!");
		
		ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF, DIALOG_STYLE_LIST, #COL_NARANCS"Széf "#COL_SZURKE"kezelés: "#COL_FEHER"Válassz a listából!", \
		"Pénz\nKokain\nHeroin\nMarihuana\nMaterial\nFegyver széf\nStatisztika", "Mehet", "Mégse");
		//ShowPlayerDialog(playerid, DIALOG_HAZ_SZEF, DIALOG_STYLE_LIST, #COL_NARANCS"Széf "#COL_SZURKE"kezelés", "Lerak\nTörlés\nÁthelyezés", "Mehet", "Mégse");
		return true;
	}
	return true;
}

CMD:szef(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	new i = -1, num = 0, form[32], frakciok[512];
	
	for(;++i < MAX_FRAKCIO;)
	{
		if(FInfo[i][fVan])
		{
			format(form, sizeof(form), "%s\n", FInfo[i][fNev]);
			strins(frakciok, form, strlen(frakciok));
			num++;
		}
	}
	
	if(!num)
		return SCM(playerid, COL_MKEK, "Nincs frakció létrehozva!");
	
	ShowPlayerDialog(playerid, DIALOG_FRAKCIO_VALASZTAS, DIALOG_STYLE_LIST, #COL_NARANCS"Frakció "#COL_SZURKE"kezelés", frakciok, "Mehet", "Mégse");
	
	/*else if(Admin(playerid, FOADMIN_SZINT))
		ShowPlayerDialog(playerid, DIALOG_FRAKCIO_SZEF, DIALOG_STYLE_LIST, #COL_FEHER"Válassz a listából!", \
		"Pénz\nKokain\nHeroin\nMarihuana\nMaterial\nStatisztika\nMinimum rang\nFrakció Kezelés", "Mehet", "Mégse");*/
		
	return true;
}

CMD:hitman(playerid, params[])
{
	/*if(playerid != NINCS)
		return false;*/
	
	if(isnull(params))
	{
		SCM(playerid, COL_MKEK, "Használat: /hitman [ Felvesz / Kirúg / Lista ]");
		return true;
	}
	
	//str = UnixToTime( PlayerInfo[player][pAS] );
	
	new param[24];
	sscanf(params, "s[24]{}", param);
	
	if(!strcmp(param, "felvesz", true) || !strcmp(param, "kirug", true) || !strcmp(param, "kirúg", true))
	{
		if(PlayerInfo[playerid][pHitman] != -2 && !IsScripter(playerid))
			return SCM(playerid, COL_MKEK, "Te nem vagy Hitman Director, így nem vehesz fel senkit se!");
	
		new jatekos, eparam[24];
		if(sscanf(params, "{s[24]}us[24]", jatekos, eparam))
			return SFM(playerid, COL_MKEK, "Használat: /hitman %s [Játékos] [Napok száma / Tag / Director]",param);
			
		if(jatekos == INVALID_PLAYER_ID || !Belepve(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(!strcmp(eparam, "director", true) && IsScripter(playerid))
		{
			//if(!Admin(playerid, TULAJ_SZINT))
				//return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
			if(PlayerInfo[jatekos][pHitman] != -2)
			{
				PlayerInfo[jatekos][pHitman] = -2;
				SFM(playerid, COL_VZOLD, "Sikeresen kinevezted õt: "#COL_MKEK"[%d]%s"#COL_FEHER" Hitman Directornak!", jatekos, JatekosNev(jatekos));
				SCM(jatekos, COL_VZOLD, "Mátol Hitman Director vagy. Csak diszkréten, parancsok a /help-ben.");
				
			} else {
			
				PlayerInfo[jatekos][pHitman] = 0;
				SFM(playerid, COL_VZOLD, "Elvetted "#COL_MKEK"[%d]%s"#COL_FEHER" Hitman Directorát!", jatekos, JatekosNev(jatekos));
				SCM(jatekos, COL_VZOLD, "A mai naptól nem vagy Hitman Director! A vezetõség aktiválta a beépített önmegsemmisítõdet..");
				Felrobbant( jatekos );
			}
		}
		if(!strcmp(eparam, "tag", true))
		{
			if(PlayerInfo[jatekos][pHitman] != NINCS)
			{
				PlayerInfo[jatekos][pHitman] = NINCS;
				SFM(playerid, COL_VZOLD, "Sikeresen felvetted õt: "#COL_MKEK"[%d]%s"#COL_FEHER" Hitmannek!", jatekos, JatekosNev(jatekos));
				SCM(jatekos, COL_VZOLD, "Mátol Hitman vagy. Csak diszkréten, parancsok a /help-ben.");
				
			} else {
			
				PlayerInfo[jatekos][pHitman] = 0;
				SFM(playerid, COL_VZOLD, "Kirúgtad "#COL_MKEK"[%d]%s"#COL_FEHER" a Hitman tagságból!", jatekos, JatekosNev(jatekos));
				SCM(jatekos, COL_VZOLD, "A mai naptól nem vagy Hitman! A vezetõség aktiválta a beépített önmegsemmisítõdet..");
				Felrobbant( jatekos );
			}
		}
		else if(IsNumeric(eparam))
		{
			new ido = strval(eparam);
			if(ido > 30 || ido < 0)
				return SCM(playerid, COL_LRED, "Hibás intervallum! Minimum 1 és maximum 30 nap lehet! 0 = Kirúgás");
			
			if(PlayerInfo[jatekos][pHitman] == -1)
				return SCM(playerid, COL_LRED, "Ez a játékos jelenleg Hitman! Ha ki akarod rúgni /hitman tag");
			
			if(PlayerInfo[jatekos][pHitman] == -2)
				return SCM(playerid, COL_LRED, "Ez a játékos jelenleg Hitman Director! Ha ki akarod rúgni /hitman director");
			
			if(PlayerInfo[jatekos][pHitman] < gettime() && ido < 1)
				return SCM(playerid, COL_LRED, "Ez a játékos jelenleg nem Hitman! Így nem tudod kirúgni.");
			
			if(ido < 1)
			{
				SFM(playerid, COL_VZOLD, "Kirúgtad "#COL_MKEK"[%d]%s"#COL_FEHER" a Hitman tagságból!", jatekos, JatekosNev(jatekos));
				SCM(jatekos, COL_VZOLD, "A mai naptól nem vagy Hitman! A vezetõség aktiválta a beépített önmegsemmisítõdet..");
				PlayerInfo[jatekos][pHitman] = 0;
				Felrobbant( jatekos );
				
			} else {
			
				SFM(playerid, COL_VZOLD, "Felvetted "#COL_MKEK"[%d]%s"#COL_FEHER" Hitmannel %d napra!", jatekos, JatekosNev(jatekos), ido);
				SCM(jatekos, COL_MKEK, "Mátol Hitman vagy. Csak diszkréten, parancsok a /help-ben.");
				PlayerInfo[jatekos][pHitman] = ((3600 * 24) * ido);
			}
		}
	}
	else if(!strcmp(param, "lista", true))
	{
		if(PlayerInfo[playerid][pHitman] != -2)
			return SCM(playerid, COL_MKEK, "Te nem vagy Hitman Director, így nem vehesz fel senkit se!");
		
		new db;
		foreach(Player, id)
		{
			if(!Belepve(id)) continue;
			if(PlayerInfo[id][pHitman] == NINCS || PlayerInfo[id][pHitman] == -2 || PlayerInfo[id][pHitman] > gettime())
			{
				SendFormatMessage(playerid, COLOR_MKEK, "[%d]%s - %s - %s", id, JatekosNev(id, false, true), PlayerInfo[id][pHitmanNev], HitmanRang( id ));
				db++;
			}
		}
		
		if(!db)
			SCM(playerid, COL_LRED, "Jelenleg nincs online Hitman.");
	
	}
	return true;
}



CMD:frakcio(playerid, params[])///fr fegyver
{
	if(!Admin(playerid, 1) && !PlayerInfo[playerid][pFrakcio])
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(isnull(params))
	{
	    SCM(playerid, COL_MKEK, "Használat: /(f)ra(k)ció [ Paraméterek ]");
	    if(IsScripter(playerid)) {
		    SCM(playerid, COL_MKEK, "[Paraméterek]: Tagok, Széf, Fegyver, Lista, Nevek | Leader: Rang, Felvesz, Kirúg, RangNév, Fizetés, MaxRang, SMS");
			SCM(playerid, COL_MKEK, "[Admin Paraméterek]: FrakcióNév, Új, Töröl, Tipus, Limit");
		} else
		    SCM(playerid, COL_MKEK, "[Paraméterek]: Tagok, Széf, Fegyver, Lista, Nevek | Leader: Rang, Felvesz, Kirúg, RangNév, Fizetés, MaxRang, SMS");
		
		return true;
	}
	
	new param[24];
	sscanf(params, "s[24]{}", param);
	
	if(!strcmp(param, "új", true) || !strcmp(param, "uj", true))
	{
		if(!IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Csak Scripter hozhat létre új frakciót!");
		
		new nev[20], tipus;
		if(sscanf(params, "{s[24]}ds[20]", tipus, nev))
			return SCM(playerid, COL_MKEK, "Használat: /(f)ra(k)ció [Tipus(1 = Legális | 2 = Maffia | 3 = Banda | 4 = Rendvédelem)] [FrakcióNév]");
		
		if(tipus != 1 && tipus != 2 && tipus != 3 && tipus != 4)
			return SCM(playerid, COL_LRED, "Hibás típus! 1 = Legális | 2 = Maffia | 3 = Banda | 4 = Rendvédelem");
		
		new k = 0, u = -1;
		for(;++k < MAX_FRAKCIO;)
		{
			if(!FInfo[k][fVan])
			{
				u = k;
				break;
			}
		}
		
		if(u == -1)
			return SCM(playerid, COL_LRED, "Nem tudsz több frakciót létrehozni!");
		
		new f = 0, num = 1, rangok[20];

		for(;++f < 11;)
		{
			format(rangok, 20, "Rang%d", num);
			format(FInfo[u][fkInfo:f], 20, rangok);
			num++;
		}
		
		if(Karakter_Ellenorzes(nev))
			return SCM(playerid, COL_LRED, "Helytelen karakterek a szövegben! ( /,|,*,', stb)");
		
		format(FInfo[u][fNev], 20, nev);
		FInfo[u][fLegalis] = tipus;
		FInfo[u][fVan] = true;
		
		nformat(fquery, 256, "INSERT INTO `"#MYSQL_FRAKCIO_TABLA"` (ID, FNev, Legalis) VALUES ('%d', '%s', '%d')", u, nev, FInfo[u][fLegalis]);
		mysql_tquery(sql_ID, fquery, "", "");
		
		SendFormatMessage(playerid, COLOR_MKEK, "Sikeresen létrehoztad a(z) %s nevû frakciót! [SQLID: %d | Típus: %s]", nev, u, FrakcioTipus( FInfo[u][fLegalis] ) );
		return true;
	}
	else if(!strcmp(param, "töröl", true) || !strcmp(param, "torol", true))
	{
		if(!IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Csak Scripter törölhet frakciót!");
		
		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /(f)ra(k)ció töröl [Frakció ID]");
		
		if(!FInfo[id][fVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen frakció létrehozva!");
			
		if(PlayerInfo[playerid][pMegerosites] == NINCS)
		{
			SCM(playerid, COL_LRED, "Biztos, hogy törölni szeretnéd a frakciót? Ha igen, írd be újra!");
			PlayerInfo[playerid][pMegerosites] = playerid;
			return true;
		}
		
		PlayerInfo[playerid][pMegerosites] = NINCS;
		
		doQuery("DELETE FROM `"#MYSQL_FRAKCIO_TABLA"` WHERE ID = '%d'", id);
		doQuery("UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pfrakcio = '0', prang = '0' WHERE pfrakcio = '%d'", id);
		
		foreach(Player, i)
		{
			if(!Belepve(i)) continue;
			if(PlayerInfo[i][pFrakcio] == id)
			{
				SFM(i, COL_LRED, "%s %s törölte a frakciódat ezért a rendszer automatikusan kirúgott!", AdminRang(playerid), JatekosNev(playerid));
				PlayerInfo[i][pFrakcio] = 0;
				PlayerInfo[i][prang] = 0;
			}
		}
		
		SendFormatMessage(playerid, COLOR_MKEK, "Frakció sikeresen törölve! Név: %s | Adatbázis ID: %d", FInfo[id][fNev], id);
		FInfo[id][fVan] = false;
		return true;
	}
	else if(!strcmp(param, "nevek", true)) return cmd_nevek(playerid, "");
	else if(!strcmp(param, "fegyver", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 10.0, PosExt(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefPos])))
			return SCM(playerid, COL_MKEK, "Nem vagy széf közelben!");
		
		new fegyv[1024], form[64], i = -1; //Név [lõszer]
		
		PlayerInfo[playerid][pSzefFegyver] = 0;
		
		for(;++i < 10;)
		{
			if(FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][i])
				format(form, 64, #COL_VZOLD"[%d] %s [%d]\n", i, aWeaponNames[FInfo[PlayerInfo[playerid][pFrakcio]][fFegyverek][i]], FInfo[PlayerInfo[playerid][pFrakcio]][fToltenyek][i]);
			else
				format(form, 64, #COL_VKEK"[%d] Üres\n", i);
				
			strins(fegyv, form, strlen(fegyv));
		}
		strins(fegyv, "Tovább", strlen(fegyv));
		
		new cim[64];
		format(cim, 64, #COL_NARANCS"Válassz "#COL_SZURKE"fegyvert! "#COL_FEHER"(%d/5)", (PlayerInfo[playerid][pSzefFegyver] + 1));
		
		ShowPlayerDialog(playerid, DIALOG_FRAKCIO_FEGYVEREK, DIALOG_STYLE_LIST, cim, fegyv, "Mehet", "Mégse");
		return true;
	}
	else if(!strcmp(param, "széf", true) || !strcmp(param, "szef", true))
	{
		if(!PlayerInfo[playerid][pFrakcio])
			return SCM(playerid, COL_LRED, "Nem vagy frakcióban!");
		
		if((!IsPlayerInRangeOfPoint(playerid, 2.0, PosExt(FInfo[PlayerInfo[playerid][pFrakcio]][fSzefPos])) && FInfo[PlayerInfo[playerid][pFrakcio]][fSzefObject]) || !FInfo[PlayerInfo[playerid][pFrakcio]][fSzefObject])
			return SCM(playerid, COL_MKEK, "Nem vagy széf közelben!");
	
		ShowPlayerDialog(playerid, DIALOG_FRAKCIO_SZEF, DIALOG_STYLE_LIST, #COL_FEHER"Válassz a listából!", \
		"Pénz\nKokain\nHeroin\nMarihuana\nMaterial\nStatisztika\nMinimum rang", "Mehet", "Mégse");
		
		return true;
	}
	else if(!strcmp(param, "fizetesek", true) || !strcmp(param, "fizetések", true))
	{
		if(!PlayerInfo[playerid][pFrakcio])
			return SCM(playerid, COL_LRED, "Nem vagy egyik szervezet tagja sem!");
			
		new i = NINCS;
		for(;++i < 16;)
			SendFormatMessage(playerid, COLOR_WHITE, "[%d]%s - "#COL_MKEK"%s"#COL_FEHER"$", (i + 1), Rangok((i + 1), PlayerInfo[playerid][pFrakcio]), FormatNumber(FInfo[ PlayerInfo[playerid][pFrakcio] ][fFizetes][i], 0, ','));
	}
	else if(!strcmp(param, "maxrang", true))
	{
		if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");
		new mennyi;
		if(sscanf(params,"{s[24]}d",mennyi)) return SCM(playerid,COL_LRED,"Használat: /frakcio maxrang [ összeg ]");
		if(mennyi > 16 || mennyi < 0) return SCM(playerid,COL_LRED,"0-16 között!");
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fMaxRang] = mennyi;
		FkUpdate(PlayerInfo[playerid][pFrakcio],fmaxrang);
		SFM(playerid,COL_MKEK,"Átállítottad a frakciód max rangját %d -re",mennyi);
		return true;
	}
	else if(!strcmp(param, "fizetés", true) || !strcmp(param, "fizetes", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");

		new rang, ertek;
		if(sscanf(params, "{s[24]}dd", rang, ertek))
			return SCM(playerid, COL_MKEK, "Használat: /frakcio Fizetés [Rang(1-16)] [Összeg]");
		if(rang < 1 || rang > 16)
			return SCM(playerid, COL_LRED, "A rang minimum 1 és maximum 16 lehet!");
	    if(ertek < 0 || ertek > 2200)
			return SCM(playerid, COL_LRED, "A fizetés összege minimum 0 és maximum 2 200$ lehet!");
			
		rang -= 1;
		
		SFM(playerid, COL_MKEK, "Átállítottad a(z) [%d]%s rang fizetését! Régi: %s$ | Új: %s$", (rang + 1), Rangok((rang + 1), PlayerInfo[playerid][pFrakcio]), FormatNumber(FInfo[ PlayerInfo[playerid][pFrakcio] ][fFizetes][rang], 0, ','), FormatNumber(ertek, 0, ','));
		nformat(str, 256, "<< "#COL_MKEK"%s"#COL_FEHER" átállította a(z) %s rang fizetését! Régi: %s$ | Új: %s$ >>", JatekosNev(playerid, true), Rangok((rang + 1), PlayerInfo[playerid][pFrakcio]), FormatNumber(FInfo[PlayerInfo[playerid][pFrakcio]][fFizetes][rang], 0, ','), FormatNumber(ertek, 0, ','));
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fFizetes][rang] = ertek;
		FkUpdate(PlayerInfo[playerid][pFrakcio], fuFizetes);
		FrakcioUzenet(COLOR_WHITE, PlayerInfo[playerid][pFrakcio], str);
	}
	else if(!strcmp(param, "típus", true) || !strcmp(param, "tipus", true))
	{
	    if(!IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Csak Scripter állíthatja át a frakció típusát!");

		new fk, ertek;
		if(sscanf(params, "{s[24]}dd", fk, ertek))
			return SCM(playerid, COL_MKEK, "Használat: /frakcio típus [FrakcióID] [Típus(1 = Legális | 2 = Maffia | 3 = Banda | 4 = Rendvédelem)]");
		if(ertek != 1 && ertek != 2 && ertek != 3 && ertek != 4)
			return SCM(playerid, COL_LRED, "Hibás típus! 1 = Legális | 2 = Maffia | 3 = Banda | 4 = Rendvédelem");
	    if(fk < 1 || fk > MAX_FRAKCIO || !FInfo[fk][fVan])
			return SCM(playerid, COL_LRED, "Hibás frakció!");
			
		//(ertek == 1 ? ("Legális") : (ertek == 2 ? ("Maffia") : ("Banda")))
		SFM(playerid, COL_MKEK, "%s frakció típusa átváltva erre: "#COL_MKEK"%s", FInfo[fk][fNev], FrakcioTipus( ertek ));
		FInfo[fk][fLegalis] = ertek;
		FkUpdate(fk, fuLegalis);
	}
	else if(!strcmp(param, "limit", true))
	{
	    if(!IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Csak Scripter állíthatja át a frakció limitet!");

		new fk, ertek;
		if(sscanf(params, "{s[24]}dd", fk, ertek))
			return SCM(playerid, COL_MKEK, "Használat: /frakcio limit [FrakcióID] [Limit (10 - 50)]");
		if(ertek > 50 || ertek < 10)
			return SCM(playerid, COL_LRED, "Hibás limit! Minimum 10 és maximum 50 lehet!");
	    if(fk < 1 || fk > MAX_FRAKCIO || !FInfo[fk][fVan])
			return SCM(playerid, COL_LRED, "Hibás frakció!");
			
		SFM(playerid, COL_MKEK, "%s frakció limit frissítve! Régi: "#COL_MKEK"%d"#COL_FEHER" | Új: "#COL_MKEK"%s", FInfo[fk][fNev], FInfo[fk][fLimit], ertek);
		FInfo[fk][fLimit] = ertek;
		FkUpdate(fk, fuLimit);
	}
    else if(!strcmp(param, "rang", true) || !strcmp(param, "giverank", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");

		new rang, jatekos, oka[64];
		if(sscanf(params, "{s[24]}uds[64]", jatekos, rang, oka))
			return SCM(playerid, COL_MKEK, "Használat: /frakcio rang [Játékos] [Rang (1-10)] [Oka]");
		if(!OOC_Ellenorzes(playerid, "/frakció rang", oka))
			return true;
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		if(rang < 1 || rang > 16)
			return SCM(playerid, COL_LRED, "A rang minimum 1 és maximum 16 lehet!");
	    if(strlen(oka) > 64)
			return SCM(playerid, COL_LRED, "Az ok maximum 64 karakter lehet!");
		if(PlayerInfo[jatekos][pFrakcio] != PlayerInfo[playerid][pFrakcio])
		    return SCM(playerid, COL_LRED, "Ez a játékos nem tagja a frakciódnak!");

		PlayerInfo[jatekos][prang] = rang;
		SFM(jatekos, COL_VZOLD, "Új rangot kaptál tõle: %s | Rang: [%d]%s | Oka: %s", JatekosNev(playerid), rang, Rangok(rang, PlayerInfo[jatekos][pFrakcio]), oka);
		SFM(playerid, COL_VZOLD, "Új rangot adnál neki: %s | Rang: [%d]%s | Oka: %s", JatekosNev(jatekos), rang, Rangok(rang, PlayerInfo[jatekos][pFrakcio]), oka);
	}
	else if(!strcmp(param, "kirúg", true) || !strcmp(param, "kirug", true) || !strcmp(param, "uninvite", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");

		new jatekos;
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /frakció Kirúg [Játékos]");
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][pFrakcio] != PlayerInfo[playerid][pFrakcio])
		    return SCM(playerid, COL_LRED, "Ez a játékos nem a frakciód tagja!");
		    
        if(PlayerInfo[jatekos][prang] == 10 && !Admin(playerid, FOADMIN_SZINT))
		    return SCM(playerid, COL_LRED, "Frakció leadert nem rúghatsz ki!");

		PlayerInfo[jatekos][prang] = 0;
		PlayerInfo[jatekos][pFrakcio] = 0;
		PlayerInfo[jatekos][pDutySkin] = 0;
		SFM(jatekos, COL_VZOLD, "%s kirúgott téged a frakcióbol!", JatekosNev(playerid));
		SFM(playerid, COL_VZOLD, "Kirúgtad õt: %s a frakcióbol!", JatekosNev(jatekos));

	}
	else if(!strcmp(param, "felvesz", true) || !strcmp(param, "invite", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");

		new jatekos;
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /frakció Felvesz [Játékos]");
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		    
		if(PlayerInfo[jatekos][pFrakcio] == PlayerInfo[playerid][pFrakcio])
		    return SCM(playerid, COL_LRED, "Ez a játékos jelenleg is a frakciód tagja!");
		    
        if(PlayerInfo[jatekos][pFrakcio] != 0)
		    return SCM(playerid, COL_LRED, "Ez a játékos már tagja egy szervezetnek!");
			
		if(PlayerInfo[jatekos][pFrakcioTiltas] > 0)
		{
			return SFM(playerid,COL_LRED,"Ezt a játékost nem veheted fel mivel még %d percig Frakció csatlakozási tiltása van!",PlayerInfo[jatekos][pFrakcioTiltas]/60);
		}

		PlayerInfo[jatekos][prang] = 1;
		PlayerInfo[jatekos][pFrakcio] = PlayerInfo[playerid][pFrakcio];
		
		SFM(jatekos, COL_VZOLD, "%s felvett téged a(z) %s frakcióba!", JatekosNev(playerid), FInfo[ PlayerInfo[playerid][pFrakcio] ]);
		SFM(playerid, COL_VZOLD, "Felvetted õt: %s a frakcióba!", JatekosNev(jatekos));
	}
	else if(!strcmp(param, "rangnév", true) || !strcmp(param, "rangnev", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");
	    	
	    new rang, rangnev[20];
	    if(sscanf(params, "{s[24]}ds[20]", rang, rangnev))
			return SCM(playerid, COL_MKEK, "Használat: /frakció RangNév [Rang] [Neve]");	
		if(strlen(rangnev) > 18)
		    return SCM(playerid, COL_LRED, "A rang neve maximum 18 karakter lehet!");
		if(!OOC_Ellenorzes(playerid, "/frakció rangnév", rangnev))
			return true;
			
		if(Karakter_Ellenorzes(rangnev))
			return SCM(playerid, COL_LRED, "Helytelen karakterek a szövegben! ( /,|,*,', stb)");
		
		new frakcio = PlayerInfo[playerid][pFrakcio];
		switch( rang )
		{
			case 1: { FInfo[frakcio][fRang1] = rangnev; FkUpdate(frakcio, fuRang1); }
			case 2: { FInfo[frakcio][fRang2] = rangnev; FkUpdate(frakcio, fuRang2); }
			case 3: { FInfo[frakcio][fRang3] = rangnev; FkUpdate(frakcio, fuRang3); }
			case 4: { FInfo[frakcio][fRang4] = rangnev; FkUpdate(frakcio, fuRang4); }
			case 5: { FInfo[frakcio][fRang5] = rangnev; FkUpdate(frakcio, fuRang5); }
			case 6: { FInfo[frakcio][fRang6] = rangnev; FkUpdate(frakcio, fuRang6); }
			case 7: { FInfo[frakcio][fRang7] = rangnev; FkUpdate(frakcio, fuRang7); }
			case 8: { FInfo[frakcio][fRang8] = rangnev; FkUpdate(frakcio, fuRang8); }
			case 9: { FInfo[frakcio][fRang9] = rangnev; FkUpdate(frakcio, fuRang9); }
			case 10: { FInfo[frakcio][fRang10] = rangnev; FkUpdate(frakcio, fuRang10); }
			case 11: { FInfo[frakcio][fRang11] = rangnev; FkUpdate(frakcio, fuRang11); }
			case 12: { FInfo[frakcio][fRang12] = rangnev; FkUpdate(frakcio, fuRang12); }
			case 13: { FInfo[frakcio][fRang13] = rangnev; FkUpdate(frakcio, fuRang13); }
			case 14: { FInfo[frakcio][fRang14] = rangnev; FkUpdate(frakcio, fuRang14); }
			case 15: { FInfo[frakcio][fRang15] = rangnev; FkUpdate(frakcio, fuRang15); }
			case 16: { FInfo[frakcio][fRang16] = rangnev; FkUpdate(frakcio, fuRang16); }
			default: return SCM(playerid, COL_LRED, "Helytelen rang, minimum 1 és maximum 16 lehet!");
		}
		
		SFM(playerid, COL_MKEK, "Rangnév váltás sikeres! Rang: "#COL_MKEK"%d"#COL_FEHER" | Neve: "#COL_MKEK"%s", rang, rangnev);
	}
	else if(!strcmp(param, "frakciónév", true) || !strcmp(param, "frakcionev", true))
	{
	    if(!IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Csak Scripter nevezhet át frakciót!");

	    new frakcio, fneve[32];
	    if(sscanf(params, "{s[24]}ds[32]", frakcio, fneve))
			return SCM(playerid, COL_MKEK, "Használat: /frakció FrakcióNév [FrakcióID] [Neve]");

		if(strlen(fneve) > 20)
		    return SCM(playerid, COL_LRED, "A rang neve maximum 20 karakter lehet!");
		    
        if(!FInfo[frakcio][fVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen frakció betöltve!");
		
		if(Karakter_Ellenorzes(fneve))
			return SCM(playerid, COL_LRED, "Helytelen karakterek a szövegben! ( /,|,*,', stb)");
		
        FInfo[frakcio][fNev] = fneve;
		FkUpdate(frakcio, fuNev);
		SFM(playerid, COL_MKEK, "Frakciónév váltás sikeres! Frakció: "#COL_MKEK"%d"#COL_FEHER" | Neve: "#COL_MKEK"%s", frakcio, fneve);
	}
	else if(!strcmp(param, "lista", true))
	{
	    //if(!Admin(playerid, 1))
	    	//return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	    	
	    new ls = 0;
	    SendClientMessage(playerid, COLOR_WHITE, "========== [ "#COL_MKEK"Frakciók"#COL_FEHER" ] ==========");
	    for(;++ls < MAX_FRAKCIO;)
	    {
	        if(FInfo[ls][fVan])
	        {
	        	SendFormatMessage(playerid, COLOR_WHITE, "ID: "#COL_MKEK"%d"#COL_FEHER" | Név: "#COL_MKEK"%s"#COL_FEHER" | Típus: "#COL_MKEK"%s"#COL_FEHER" | Limit: "#COL_MKEK"%d", ls, FInfo[ls][fNev], FrakcioTipus( FInfo[ls][fLegalis] ), FInfo[ls][fLimit]);
			}
	    }
	}
	else if(!strcmp(param, "tagok", true))
	{
	    new frakcio = NINCS;
	    if(Admin(playerid, 1))
		{
	        SCM(playerid, COL_MKEK, "Használat: /frakció Tagok [FrakcióID] (Admin funkció)");
			sscanf(params, "{s[24]}D(-1)", frakcio);
		}
	    if(frakcio == NINCS) frakcio = PlayerInfo[playerid][pFrakcio];
	    if(!FInfo[frakcio][fVan])
			return SCM(playerid, COL_LRED, "Hibás frakció!");
	    
	    SendFormatMessage(playerid, COLOR_WHITE, "========== [ "#COL_MKEK"%s tagok"#COL_FEHER" ] ==========", FInfo[frakcio][fNev]);
	    foreach(Player, p)
	    {
	        if(Belepve(p) && PlayerInfo[p][pFrakcio] == frakcio)
	        {
	        	SendFormatMessage(playerid, COLOR_WHITE, "Név: "#COL_MKEK"%s"#COL_FEHER" | Rang: [%d]"#COL_MKEK"%s"#COL_FEHER"%s | Telefonszám: %d", JatekosNev(p), PlayerInfo[p][prang], Rangok(PlayerInfo[p][prang], PlayerInfo[p][pFrakcio]), (PlayerInfo[p][pSzunetel] ? (" | AFK") : ("")),PlayerInfo[p][ptelefonszam]);
			}
	    }

	}
	else if(!strcmp(param, "SMS", true))
	{
	    if(PlayerInfo[playerid][pLeader] == 0 && !Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, "Te nem vagy (Al)Leader");

	    new text[256];
	    if(sscanf(params, "{s[24]}s[20]", text))
			return SCM(playerid, COL_MKEK, "Használat: /frakció SMS [SMS szövege]");

	    new frakcio = NINCS;
	    if(frakcio == NINCS) frakcio = PlayerInfo[playerid][pFrakcio];
	    if(!FInfo[frakcio][fVan])
			return SCM(playerid, COL_LRED, "Hibás frakció!");

        if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] < 40)
            return SCM( playerid, COL_LRED, "Nincs elég pénz a frakciód széfjében (min. $40.)");

	    foreach(Player, p)
	    {
	        if(Belepve(p) && PlayerInfo[p][pFrakcio] == frakcio && PlayerInfo[p][ptelefonszam] != 0 && p != playerid && !PlayerInfo[playerid][pTog][5])
	        {
	        	SendFormatMessage(p, COLOR_YELLOW, "FSMS: %s", text);
	        }
		}
		SendFormatMessage(playerid, COLOR_YELLOW, "KörSMS elküldve: %s", text);
		FInfo[ PlayerInfo[playerid][pFrakcio] ][fPenz] -= 40;
	}
	return true;
}

CMD:war(playerid, params[])
{

	if(!PlayerInfo[playerid][pFrakcio] || FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_LEGAL)
		return SCM(playerid, COL_LRED, "Nem vagy egyik banda tagja sem!");

	if(PlayerInfo[playerid][pLeader] == 0)
		return SCM(playerid, COL_LRED, "Csak Leader vagy AlLeader indíthatja el!");

	new teruletek = FrakcioTeruletek( PlayerInfo[playerid][pFrakcio] );
	if(teruletek >= MAX_FRAKCIO_TERULET)
		return SFM(playerid, COL_MKEK, "Jelenleg "#COL_MKEK"%d"#COL_FEHER"db területetek van! Maximum "#COL_MKEK"%d"#COL_FEHER"db területet birtokolhattok!", teruletek, MAX_FRAKCIO_TERULET);

	new terulet = TeruletArenaID(playerid);
	if(terulet == NINCS)
		return SCM(playerid, COL_MKEK, "Nem vagy egyik területen se, így nem indíthatod el a harcot!");

	if(tInfo[terulet][tHarcFolyik])
		return SCM(playerid, COL_MKEK, "Ezen a területen jelenleg harcolnak, így nem indíthatod el a harcot!");

	if(tInfo[terulet][tFrakcio] == PlayerInfo[playerid][pFrakcio])
		return SCM(playerid, COL_MKEK, "Saját területeden nem indíthatsz wart!");
		
	if(FInfo[ tInfo[terulet][tFrakcio] ][fLegalis] != FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis])
		return SCM(playerid, COL_MKEK, "Ezt a területet nem támadhatjátok be! Banda csak bandával, Maffia csak maffiával harcolhat!");

	if(ServerInfo[0][sHarcVan] != NINCS)
		return SCM(playerid, COL_MKEK, "Amíg egy területen harc folyik, nem indíthatot el!");

	new kulonbseg = (gettime() - FInfo[ PlayerInfo[playerid][pFrakcio] ][fUtolsoTamadas]);
	if(kulonbseg < TERULET_VARAKOZAS_FRAKCIO)
		return SFM(playerid, COL_MKEK, "Nem rég harcoltatok! A következõ támadás "#COL_MKEK"%d"#COL_FEHER"perc múlva indítható!",(TERULET_VARAKOZAS_FRAKCIO - kulonbseg) / 60);

	new barat, ellenseg;
	foreach(Player, p)
	{
		if(!Belepve(p))
			continue;
		
		if(PlayerInfo[p][pFrakcio] == PlayerInfo[playerid][pFrakcio])
			barat++;
		else if(PlayerInfo[p][pFrakcio] == tInfo[terulet][tFrakcio])
			ellenseg++;
	}

    if(barat < MIN_WAR_EMBER)
		return SFM(playerid, COL_MKEK, "A harc indításához legalább "#COL_MKEK"%d"#COL_FEHER" ember szükséges, jelenleg "#COL_MKEK"%d"#COL_FEHER"fõ van.", MIN_WAR_EMBER, barat);
		
	if(ellenseg < MIN_WAR_EMBER)
		return SFM(playerid, COL_MKEK, "A harc indításához legalább "#COL_MKEK"%d"#COL_FEHER" ember szükséges az ellenféltõl is!", MIN_WAR_EMBER);

	new mikor = (gettime() - tInfo[terulet][tFoglalasIdo]);
	new mennyi = TERULET_VARAKOZAS - mikor;

	if(mikor < TERULET_VARAKOZAS)
		return SFM(playerid, COL_MKEK, "A területet nem régiben (%d perce) foglalták el! Legközelebb "#COL_MKEK"%d"#COL_FEHER" perc múlva lesz lehetséges a foglalás.", (mikor / 60), (mennyi / 60));

	//if(!strval(params) || (strval(params) != 0 && strval(params) != 1))
		//return SendClientMessage(playerid, COLOR_WHITE, "Használat: /war [Típus (0 = Ököl) / (1 = Fegyver)]");

	tInfo[terulet][tVarakozasIdo] = 900;//900 - 15p
	tInfo[terulet][tHarcolok][VEDOK] = tInfo[terulet][tFrakcio]; // Védõk
	tInfo[terulet][tHarcolok][TAMADOK] = PlayerInfo[playerid][pFrakcio]; // Támadók
	//tInfo[terulet][tTipus] = strval(params);
	tInfo[terulet][tTipus] = 1;//fegyveres harc

	foreach(Player, play)
	{
	    if(!Belepve(play)) continue;
		if(PlayerInfo[play][pFrakcio] == tInfo[terulet][tFrakcio])
		{
			SendClientMessage(play, COLOR_WHITE, "==========[ "#COL_MKEK"MEGTÁMADTAK!"#COL_FEHER" ]==========");
			SendFormatMessage(play, COLOR_LIGHTRED, "%s megtámadta a(z) %s területeteket!", FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev], tInfo[terulet][tNev]);
			SendFormatMessage(play, COLOR_LIGHTRED, "Ha nem megy oda legalább egy tagotok akkor %s megszerzi a területet!", FInfo[ tInfo[terulet][tHarcolok][TAMADOK] ][fNev]);
			//SendClientMessage(play, COLOR_LIGHTRED, (tInfo[terulet][tTipus] ? ("Fegyveres háború lesz!") : ("Fegyvernélküli háború lesz!")));
		}
		else if(PlayerInfo[play][pFrakcio] == tInfo[terulet][tHarcolok][TAMADOK])
		{
			SendClientMessage(play, COLOR_WHITE, "==========[ "#COL_MKEK"FIGYELEM!"#COL_FEHER" ]==========");
			SendFormatMessage(play, COLOR_LIGHTRED, "Megtámadtátok a(z) %s területet - A területet jelenleg a(z) %s birtokolja!", tInfo[terulet][tNev], FInfo[ tInfo[terulet][tHarcolok][VEDOK] ][fNev]);
			SendFormatMessage(play, COLOR_LIGHTRED, "Ha nem mentek harcolni a(z) %s terület %s birtokában marad!", tInfo[terulet][tNev], FInfo[ tInfo[terulet][tHarcolok][VEDOK] ][fNev]);
			//SendClientMessage(play, COLOR_LIGHTRED, (tInfo[terulet][tTipus] ? ("Fegyveres háború lesz!") : ("Fegyvernélküli háború lesz!")));
		}
	}

	ServerInfo[0][sHarcVan] = terulet;
	FInfo[ PlayerInfo[playerid][pFrakcio] ][fUtolsoTamadas] = gettime();

	return true;

}

CMD:gps(playerid, params[])
{
	if(!PlayerInfo[playerid][pGPSV])
		return SCM(playerid, COL_LRED, "Még nem vettél GPS-t!");
	
	if(isnull(params))
	{
		SCM(playerid, COL_MKEK, "Használat: /gps [ Lista / Kocsim / Verseny / Töröl ]");
		return true;
	}
	GPSFloodolas[playerid]++;
	if(GPSFloodolas[playerid] > 7)
	{	    
		ServerBan(playerid,0,"[AC] Bugkihasználás", NINCS, true, true, true);
	}
	if(!strcmp(params, "töröl") || !strcmp(params, "torol"))
	{
		RemovePlayerMapIcon(playerid, CP_GPS);
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		PlayerInfo[playerid][pCP] = 0;
		return true;
	}
	else if(!strcmp(params, "kocsim", true, 6))
	{
		if(!Adat_Num( playerid, ADAT_JARMU ))
			return SCM(playerid, COL_LRED, "Neked nincs jármûved!");
		
		new db = 1;
		sscanf(params, "{s[6]}D(1)", db);
		if(db > 3 || db < 1)
			return SCM(playerid, COL_LRED, "Hibás érték! (1/2/3) (( /gps kocsim [Száma] ))");
		
		if(PlayerInfo[playerid][pJarmuKulcs][db - 1] == NINCS || !vInfo[ PlayerInfo[playerid][pJarmuKulcs][db - 1] ][vHasznalva])
			return SFM(playerid, COL_LRED, "Neked nincs "#COL_MKEK"%d."#COL_FEHER" számú jármûved!", db);
		
		new Float:pos[3];
		GetVehiclePos(vInfo[ PlayerInfo[playerid][pJarmuKulcs][db - 1] ][vID], PosExt(pos));
		
		PlayerInfo[playerid][pCP] = CP_GPS;
		SetPlayerCheckpoint(playerid, PosExt(pos), 3);
		SCM(playerid, COL_VZOLD, "Jármûved koordinátái megjelölve a GPS-en!");
		return true;
	}	
	else if(!strcmp(params, "verseny", true, 7))
	{
		new id;
		if(sscanf(params, "{s[7]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /gps verseny [Slot] | Lista: /verseny lista");
		
		if(id > MAX_RACE || id < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 4!");
			
		if(!Race[id][rVan] || Race[id][rStatusz] != RACE_INDUL)
			return SCM(playerid, COL_LRED, "Nincs ilyen induló verseny!");
			
		PlayerInfo[playerid][pCP] = CP_GPS;
		SetPlayerCheckpoint(playerid, Race[id][rPosx][0], Race[id][rPosy][0], Race[id][rPosz][0], 10);
		return 1;
	}
	else if(!strcmp(params, "ház", true, 3) || !strcmp(params, "haz", true, 3))
	{
		new hazszam;
		if(sscanf(params, "{s[3]}d", hazszam))
			return SCM(playerid, COL_MKEK, "Használat: /gps ház [házszám]");

		if(hazszam < 0 || hazszam >= sizeof(HazInfo))
			return SCM(playerid, COL_LRED, "Nincs ilyen ház!");

		if(!HazInfo[hazszam][hasznalatban])
			return SCM(playerid, COL_LRED, "Nincs ilyen ház!");

		PlayerInfo[playerid][pCP] = CP_GPS;
		SetPlayerCheckpoint(playerid, HazInfo[hazszam][posx], HazInfo[hazszam][posy], HazInfo[hazszam][posz], 3);
		return true;
	}
	else if(!strcmp(params,"lista",true,3))
	{
		new
			i = -1,
			listitemid = 0,
			gps[128],
			gpsek[2048];

		for(;++i < MAXGPS;)
		{
			if(GPSInfo[i][gHasznalva])
			{
				GPSInfo[i][listid] = listitemid;
				if(PlayerInfo[playerid][padmin] >= FOADMIN_SZINT)
					format(gps, sizeof(gps), "[%d] %s\n",i, GPSInfo[i][gnev]);
				else
					format(gps, sizeof(gps), "%s\n", GPSInfo[i][gnev]);
					
				strins(gpsek, gps, strlen(gpsek));
				listitemid++;
			}
		}
		ShowPlayerDialog(playerid, DIALOG_GPSEK, DIALOG_STYLE_LIST, "GPS System", gpsek, "Tervezés", "Mégse");
		return true;
	}
	/*------------------------- Munkák vége ----------------------------*/
	return true;
}

CMD:tog(playerid, params[])
{
	if(isnull(params))
	{
		if(Admin(playerid, 1)) //Ha admin
  		{
            if(!IsScripter(playerid) && PlayerInfo[playerid][padmin] == 4) //Ha 4-es admin
		    {
				SCM(playerid, COL_MKEK, "Használat: /tog [ Rádió / Válaszok / OOC / Admin / Beszédanim / Report / Telefon / Riporter / B(folyamatos OOC) ]");
				SCM(playerid, COL_MKEK, "Használat: /tog [ Hírdetés / Ajtó]");
			}
		    if(Admin(playerid, 5) && !IsScripter(playerid)) //Ha nagyobb, vagy 5-ös admin
		    {
				SCM(playerid, COL_MKEK, "Használat: /tog [ Rádió / Válaszok / OOC / Admin / Beszédanim / Report / Telefon / Riporter / B(folyamatos OOC) ]");
				SCM(playerid, COL_MKEK, "Használat: /tog [ Hírdetés / Ajtó]");
			}
			if(Admin(playerid,FOADMIN_SZINT) && !IsScripter(playerid))
			{
			    SCM(playerid, COL_MKEK, "Használat: /tog [ Rádió / Válaszok / OOC / Admin / Beszédanim / Report / Telefon / PM / Riporter / B(folyamatos OOC) ]");
				SCM(playerid, COL_MKEK, "Használat: /tog [ Hírdetés / Ajtó]");
			}
			else if(IsScripter(playerid)) //Ha IsScripter
			{
				SCM(playerid, COL_MKEK, "Használat: /tog [ Rádió / Válaszok / OOC / Admin / Beszédanim / Report / Telefon / PM / Riporter / B(folyamatos OOC) ]");
				SCM(playerid, COL_MKEK, "Használat: /tog [ Hírdetés / Törés / Ajtó]");
			}
		}
		else if(IsAS(playerid)) //Ha adminsegéd
			SCM(playerid, COL_MKEK, "Használat: /tog [ Rádió / Válaszok / OOC / Beszédanim / Telefon / Riporter / B(folyamatos OOC) / Hírdetés / Ajtó]");
			else //Ha játékos
			SCM(playerid, COL_MKEK, "Használat: /tog [ Rádió / OOC / Beszédanim / Telefon / Riporter / B(folyamatos OOC) / Hírdetés / Ajtó]");
		return true;
	}
	
	if(!strcmp(params, "rádió", true) || !strcmp(params, "radio", true))
	{
		if(!PlayerInfo[playerid][pFrakcio])
			return SCM(playerid, COL_LRED, "Te nem vagy frakcióban, így nem tudod kikapcsolni a rádiódat!");
			
		if((PlayerInfo[playerid][pTog][0] = true - PlayerInfo[playerid][pTog][0]))
			SCM(playerid, COL_MKEK, "Mostantól nem látod a frakciós IC és OOC rádiókat!");
		else
			SCM(playerid, COL_MKEK, "Ismét látod a frakciós IC és OOC rádiókat!");
	}
	else if(!strcmp(params, "telefon", true) || !strcmp(params, "phone", true))
	{
		if(PlayerInfo[playerid][ptelefonszam] < 1)
			return SCM(playerid, COL_LRED, "Neked még nincs telefonod!");
			
		if((PlayerInfo[playerid][pTog][5] = true - PlayerInfo[playerid][pTog][5]))
			SCM(playerid, COL_MKEK, "Mostantól nem tudnak hívni amíg be nem kapcsolod a telefonod!");
		else
			SCM(playerid, COL_MKEK, "Ismét tudnak hívni!");
	}
	else if(!strcmp(params, "riporter", true))
	{
		if((PlayerInfo[playerid][pTog][8] = true - PlayerInfo[playerid][pTog][8]))
		{
			if(!PlayerInfo[playerid][pMP3_Megy] && !PlayerInfo[playerid][pJarmuZene])
				StopAudioStreamForPlayer(playerid);
			
			SCM(playerid, COL_MKEK, "Mostantól nem látod és hallod a riportokat!");
			
		} else {
		
			if(!PlayerInfo[playerid][pMP3_Megy] && !PlayerInfo[playerid][pJarmuZene] && strlen(ServerInfo[0][sZene]) > 10)
			{
				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, ServerInfo[0][sZene]);
			}
				
			SCM(playerid, COL_MKEK, "Ismét látod és hallod a riportokat!");
		}
	}
	else if(!strcmp(params, "b", true))
	{
		if((PlayerInfo[playerid][pTog][9] = true - PlayerInfo[playerid][pTog][9]))
			SCM(playerid, COL_MKEK, "Átváltottál folyamatos OOC beszédre!");
		else
			SCM(playerid, COL_MKEK, "Átváltottál folyamatos IC beszédre!");
	}
	else if(!strcmp(params, "válaszok", true) || !strcmp(params, "valaszok", true))
	{
		if(!Admin(playerid, 1) && !IsAS(playerid))
			return SCM(playerid, COL_LRED, "Te nem vagy Admin / Adminsegéd, így nem tudod kikapcsolni mások válaszait!");
			
		if((PlayerInfo[playerid][pTog][1] = true - PlayerInfo[playerid][pTog][1]))
			SCM(playerid, COL_MKEK, "Mostantól nem látod mások válaszait a reporton!");
		else
			SCM(playerid, COL_MKEK, "Ismét látod mások válaszait a reporton!");
	}
	else if(!strcmp(params, "report", true))
	{
		if(!Admin(playerid, 1))
			return SCM(playerid, COL_LRED, "Te nem vagy Admin!");
			
		if((PlayerInfo[playerid][pTog][6] = true - PlayerInfo[playerid][pTog][6]))
			SCM(playerid, COL_MKEK, "Mostantól nem látod mit írnak a report channelre!");
		else
			SCM(playerid, COL_MKEK, "Ismét látod mit írnak a report channelre!");
	}
	else if(!strcmp(params, "pm", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SCM(playerid, COL_LRED, "Neked ezt nem!");
			
		if((PlayerInfo[playerid][pTog][7] = true - PlayerInfo[playerid][pTog][7]))
			SCM(playerid, COL_MKEK, "Mostantól a játékosok nem tudnak neked privát üzenetet küldeni.");
		else
			SCM(playerid, COL_MKEK, "A játékosok ismét tudnak neked üzenetet küldeni.");
	}
	else if(!strcmp(params, "ooc", true))
	{		
		if((PlayerInfo[playerid][pTog][2] = true - PlayerInfo[playerid][pTog][2]))
			SCM(playerid, COL_MKEK, "Mostantól nem látod a OOC Chatet!");
		else
			SCM(playerid, COL_MKEK, "Ismét látod a OOC Chatet!");
	}
	else if(!strcmp(params, "admin", true) || !strcmp(params, "as", true))
	{
		if(!Admin(playerid, 1) && !IsAS(playerid))
			return SCM(playerid, COL_LRED, "Te nem vagy Admin / Adminsegéd, így nem tudod kikapcsolni az Admin infókat!");
			
		if((PlayerInfo[playerid][pTog][3] = true - PlayerInfo[playerid][pTog][3]))
			SCM(playerid, COL_MKEK, "Mostantól nem látod az Admin / AS figyelmeztetéseket!");
		else
			SCM(playerid, COL_MKEK, "Ismét látod az Admin / AS figyelmeztetéseket!");
	}
	else if(!strcmp(params, "beszédanim", true) || !strcmp(params, "beszedanim", true))
	{		
		if((PlayerInfo[playerid][pTog][4] = true - PlayerInfo[playerid][pTog][4]))
			SCM(playerid, COL_MKEK, "Beszéd animálás bekapcsolva!");
		else
			SCM(playerid, COL_MKEK, "Beszéd animálás kikapcsolva!");
	}
	
	else if(!strcmp(params, "hirdetés", true) || !strcmp(params, "hirdetes",true) || !strcmp(params, "hírdetés", true))
	{
		if((PlayerInfo[playerid][pTog][11] = true - PlayerInfo[playerid][pTog][11]))
			SCM(playerid, COL_MKEK, "Hírdetések(/ad) kikapcsolva!");
		else
			SCM(playerid, COL_MKEK, "Hírdetések(/ad) bekapcsolva!");
	}
	else if(!strcmp(params, "tores", true) || !strcmp(params, "törés", true))
	{
		if(!Admin(playerid, SZUPER_SZINT))
			return SCM(playerid, COL_LRED, "Te nem vagy SzuperAdmin!");
			
		if((PlayerInfo[playerid][pTog][12] = true - PlayerInfo[playerid][pTog][12]))
			SCM(playerid, COL_MKEK, "Törés kikapcsolva, a jármû már nem sebzõdik!");
		else
			SCM(playerid, COL_MKEK, "Törés bekapcsolva, a jármû ismét sebzõdik!");
	}
	else if(!strcmp(params, "alefoglal", true) || !strcmp(params, "ale", true))
	{
		if((PlayerInfo[playerid][pTog][13] = true - PlayerInfo[playerid][pTog][13]))
			SCM(playerid, COL_MKEK, "Alefoglal gyorsgomb kikapcsolva.");
		else
			SCM(playerid, COL_MKEK, "Alefoglal gyorsgomb bekapcsolva. | Gyorsgomb: H betû");
	}
	if(!strcmp(params, "ajtó", true) || !strcmp(params, "ajto", true))
	{	
		if((PlayerInfo[playerid][pTog][14] = true - PlayerInfo[playerid][pTog][14]))
			SCM(playerid, COL_MKEK, "Mostantól nem nem mész be autómatikusan az ajtókon! ((F Gombal tudsz be / ki menni))");
		else
			SCM(playerid, COL_MKEK, "Mostantól ismét autómatikusan mész be az ajtókon!");
	}
	
	return true;
}

CMD:id(playerid, params[])
{
	new id;
	if(sscanf(params, "u", id))
		return SCM(playerid, COL_MKEK, "Használat: /id [Játékos neve vagy ID-je]");
		
	if(id == INVALID_PLAYER_ID || !IsPlayerConnected(id) || IsPlayerNPC(id))
		return SCM(playerid, COL_LRED, "Nincs találat!");
		
	SFM(playerid, COL_MKEK, "Játékos: [%d]%s | Szint: %d", id, JatekosNev(id), PlayerInfo[id][pjatekosszint]);
	return true;
}

/*
enum erace
{
	rStatusz,
	rNevezes,
	Float:rSzorzo,
	rIdo,
	rNyeremeny,
	rBentvan,
	rIdoHatra
};
*/

CMD:verseny(playerid, params[])
{
	new param[24];
	if(sscanf(params, "s[24]{}", param))
	{
		go_help:
		SCM(playerid, COL_MKEK, "Használat: /verseny [ Nevez / Felad / Lista ]");
		if(Admin(playerid, FOADMIN_SZINT))
			SCM(playerid, COL_MKEK, "Egyéb: /verseny [ Új / CP / Ment / Betölt / Stop / Start / Ürít ]");
		return true;
	}
	
	if(!strcmp(param, "új", true) || !strcmp(param, "uj", true))
	{
		if(!Admin(playerid, AC_SZINT))
			return SendClientMessage(playerid, COLOR_LIGHTRED, NEM_HASZNALHATO);
			
		new indito[32], nev[32];
		if(sscanf(params, "{s[24]}s[32]s[32]", indito, nev))
			return SCM(playerid, COL_MKEK, "Használat: /verseny új [Indítókód] [Pálya neve] | Speciális karaktereket mellõzd!");
			
		if(strlen(nev) < 4 || strlen(nev) > 32)
			return SCM(playerid, COL_LRED, "A pálya neve legalább 4 és maximum 32 karakter lehet!");
			
		if(strlen(indito) < 4 || strlen(indito) > 32)
			return SCM(playerid, COL_LRED, "A pálya neve legalább 4 és maximum 32 karakter lehet!");
			
		if(Karakter_Ellenorzes(indito))
			return SCM(playerid, COL_LRED, "Az indítókód nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");
			
		if(Karakter_Ellenorzes(nev))
			return SCM(playerid, COL_LRED, "A név nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");
			
		new i, id;
		for(;++i < MAX_RACE;)
		{
			if(!Race[i][rVan] && Race[i][rPosx] == 0.0)
			{
				id = i;
				break;
			}
		}
		
		if(!id)
			return SCM(playerid, COL_LRED, "Nem készíthetsz több pályát mert az összes slot foglalt!");
		
		nformat(sql, 128, "SELECT * FROM `"#MYSQL_RACE_TABLA"` WHERE Indito = '%s'", indito);
		mysql_tquery(sql_ID, sql, "preProcessing", "iiiss", playerid, 2, id, nev, indito);
		return true;
	}
	else if(!strcmp(param, "nevez", true))
	{
//		if(GetPlayerVehicleSeat(playerid) != 0)
//			return SCM(playerid, COL_LRED, "Csak sofõrként tudsz benevezni!");
			
		if(PlayerRace[playerid][rVersenyen])
			return SCM(playerid, COL_LRED, "Már neveztél egy versenyre, ha fel akarod adni, írd be: /verseny felad");
			
		new i, id;
		for(;++i < MAX_RACE;)
		{
			if(!Race[i][rVan] || Race[i][rStatusz] != RACE_INDUL) continue;
			if(IsPlayerInRangeOfPoint(playerid, 25.0, Race[i][rPosx][0],  Race[i][rPosy][0],  Race[i][rPosz][0]))
			{
				id = i;
				break;
			}
		}
		
		if(!id)
			return SCM(playerid, COL_LRED, "Nem vagy egy verseny kezdõpontjánál se!");
			
		if(Race[id][rIdo] > 300)
			return SCM(playerid, COL_LRED, "A verseny indulását megelõzõ 3 percben csatlakozhatsz csak!");
			
		if(PlayerInfo[playerid][pBszPenz] < Race[id][rNevezes])
			return SFM(playerid, COL_LRED, "A nevezés díja "#COL_MKEK"%s"#COL_FEHER"$, neked nincs ennyi a bankszámládon!", FormatNumber(Race[id][rNevezes], 0, ','));
			
		PlayerRace[playerid][rVersenyen] = id;
		PlayerRace[playerid][rVersenyCP] = RACE_START_CP;
		PlayerInfo[playerid][pBszPenz] -= Race[id][rNevezes];
		Race[id][rNyeremeny] += floatround(float(Race[id][rNevezes]) * Race[id][rSzorzo]);
		
		SetRaceCP(playerid);
		SFM(playerid, COL_VZOLD, "Sikeresen beneveztél a versenyre! A nevezés díja "#COL_MKEK"%s"#COL_FEHER"$ levonva a bankszámládról!", FormatNumber(Race[id][rNevezes], 0, ','));
		Cselekves(playerid, "benevezett egy versenyre");
		return true;
	}
	else if(!strcmp(param, "felad", true))
	{
		if(!PlayerRace[playerid][rVersenyen])
			return SCM(playerid, COL_LRED, "Jelenleg nem vagy versenyen!");
			
		PlayerRace[playerid][rVersenyen] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		SCM(playerid, COL_VZOLD, "Feladtad a versenyt!");
		return true;
	}
	else if(!strcmp(param, "start", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_LIGHTRED, NEM_HASZNALHATO);
	
		new slot, dij, perc, Float:szor;
		if(sscanf(params, "{s[24]}dddf", slot, perc, dij, szor))
			return SCM(playerid, COL_MKEK, "Használat: /verseny start [Slot] [Idõ(Percben)] [Nevezési díj] [Szorzó]");
			
		if(slot > MAX_RACE || slot < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 4!");
			
		if(Race[slot][rStatusz] == RACE_EPIT)
			return SCM(playerid, COL_LRED, "Ez a pálya jelenleg építés alatt áll! Ürítsd a slotot vagy várd meg míg befejezi az építõ.");
			
		if(Race[slot][rStatusz] == RACE_MEGY)
			return SCM(playerid, COL_LRED, "Ez a verseny jelenleg aktív, épp verseny folyik rajta.");
			
		if(Race[slot][rStatusz] == RACE_INDUL)
			return SCM(playerid, COL_LRED, "Ez a verseny jelenelg indítás alatt van, újra indításhoz elõször állítsd le a folyamatot.");
			
		if(!Race[slot][rVan])
			return SCM(playerid, COL_LRED, "Ezen a sloton nincs betöltött verseny!");
			
		if(dij < 25 || dij > 500)
			return SCM(playerid, COL_LRED, "A nevezési díj minimum 25$ és maximum 500$ lehet!");
			
		if(perc < 2 || perc > 60)
			return SCM(playerid, COL_LRED, "Az idõ minimum 2 perc és maximum 60 perc lehet!");
			
		if(szor < 1.0 || szor > 5.0)
			return SCM(playerid, COL_LRED, "A szorzó minimum 1.0 és maximum 5.0 lehet!");
			
		foreach(Player, p)
		{
			if(!Belepve(p)) continue;
			SendClientMessage(p, COLOR_WHITE, "============= [ "#COL_VZOLD"Racing Team"#COL_FEHER" ] =============");
			SendFormatMessage(p, COLOR_WHITE, "Verseny: "#COL_MKEK"%s"#COL_FEHER" | Ellenörzõ pontok száma: "#COL_MKEK"%d"#COL_FEHER"db", Race[slot][rNev], Race[slot][rCPdb]);
			SendFormatMessage(p, COLOR_WHITE, "Nevezési díj: "#COL_MKEK"%s"#COL_FEHER"$ | Szorzó: "#COL_MKEK"%.1f", FormatNumber(dij, 0, ','), szor);
			
			if(Race[slot][rCPdb] > 0)
				SetPlayerRaceCheckpoint(p, 0, Race[slot][rPosx][0], Race[slot][rPosy][0], Race[slot][rPosz][0], Race[slot][rPosx][1], Race[slot][rPosy][1], Race[slot][rPosz][1], 20.0);
			else
				SetPlayerRaceCheckpoint(p, 0, Race[slot][rPosx][0], Race[slot][rPosy][0], Race[slot][rPosz][0], PosExt(Race[slot][rCelPos]), 20.0);
		}
		
		Race[slot][rStatusz] = RACE_INDUL;
		Race[slot][rSzorzo] = szor;
		Race[slot][rNevezes] = dij;
		Race[slot][rIdo] = (perc * 60);
		Race[slot][rNyeremeny] = 0;
		Race[slot][rBentvan] = 0;
		Race[slot][rIdoHatra] = 0;
		return true;
	}
	else if(!strcmp(param, "stop", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_LIGHTRED, NEM_HASZNALHATO);
		
		new slot;
		if(sscanf(params, "{s[24]}d", slot))
			return SCM(playerid, COL_MKEK, "Használat: /verseny stop [Slot]");
		
		if(slot > MAX_RACE || slot < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 4!");
	
		if(Race[slot][rStatusz] != RACE_MEGY && Race[slot][rStatusz] != RACE_INDUL)
			return SCM(playerid, COL_LRED, "Ezen a sloton nincs elindítva verseny!");

		Race[slot][rStatusz] = 0;
		foreach(Player, x)
		{
			if(PlayerRace[x][rVersenyen] == slot)
			{
				PlayerRace[x][rVersenyen] = 0;
				DisablePlayerRaceCheckpoint(x);
			}
		}
		
		SCM(playerid, COL_VZOLD, "Verseny leállítva!");
	}
	else if(!strcmp(param, "ürít", true) || !strcmp(param, "urit", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_LIGHTRED, NEM_HASZNALHATO);
			
		new slot;
		if(sscanf(params, "{s[24]}d", slot))
			return SCM(playerid, COL_MKEK, "Használat: /verseny ürít [Slot] | Slot felszabadítása");
			
		if(slot > MAX_RACE || slot < 1)
			return SCM(playerid, COL_LRED, "Hibás slot! Minimum 1 és maximum 4!");
			
		if(Race[slot][rStatusz] == RACE_MEGY || Race[slot][rStatusz] == RACE_INDUL)
			return SCM(playerid, COL_LRED, "Ezen a sloton verseny folyik, elõször állítsd le!");
		
		new i = NINCS;
		for(;++i < MAX_RACE_CP;)
		{
			Race[slot][rPosx][i] = 0.0;
			Race[slot][rPosy][i] = 0.0;
			Race[slot][rPosz][i] = 0.0;
		}

		Race[slot][rCelPos] = Float:{0.0, 0.0, 0.0};
		Race[slot][rVan] = false;
		Race[slot][rNev][0] = EOS;
		Race[slot][rIndito][0] = EOS;
		Race[slot][rCPdb] = 0;
		Race[slot][rSzorzo] = 0;
		Race[slot][rNyeremeny] = 0;
		Race[slot][rBentvan] = 0;
		Race[slot][rIdoHatra] = 0;
		
		SCM(playerid, COL_VZOLD, "Slot sikeresen ürítve!");
		return true;
	}
	else if(!strcmp(param, "betölt", true) || !strcmp(param, "betolt", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_LIGHTRED, NEM_HASZNALHATO);
	
		new nev[32];
		if(sscanf(params, "{s[24]}s[32]", nev))
			return SCM(playerid, COL_MKEK, "Használat: /verseny betölt [Pálya indítókódja]");
			
		if(strlen(nev) < 4 || strlen(nev) > 32)
			return SCM(playerid, COL_LRED, "A pálya indítókódja legalább 4 és maximum 32 karakter lehet!");
		
		if(Karakter_Ellenorzes(nev))
			return SCM(playerid, COL_LRED, "Az indítókód nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");
			
		new i, id;
		for(;++i < MAX_RACE;)
		{
			if(!Race[i][rVan] && Race[i][rPosx][0] == 0.0)
			{
				id = i;
				break;
			}
		}
		
		if(!id)
			return SCM(playerid, COL_LRED, "Jelenleg nincs szabad slot amire betölthetnéd a pályát!");
		
		Race[id][rStatusz] = 0;
		nformat(sql, 128, "SELECT * FROM `"#MYSQL_RACE_TABLA"` WHERE Indito = '%s'", nev);
		mysql_tquery(sql_ID, sql, "preProcessing", "iiiss", playerid, 1, id, "", "");
		return true;
	}
	else if(!strcmp(param, "cp", true))
	{
		if(!PlayerRace[playerid][rEpites][0])
			return SCM(playerid, COL_LRED, "Jelenleg nem vagy építés módban!");
			
		if(PlayerRace[playerid][rEpites][1] >= MAX_RACE_CP)
			return SCM(playerid, COL_LRED, "Elérted a maximálisan létrehozható CP-k számát! Mentéshez írd be: /verseny ment");
			
		new Float:pos[3];
		GetPlayerPos(playerid, PosExt(pos));
		SetPlayerRaceCheckpoint(playerid, 2, PosExt(pos), 0.0, 0.0, 0.0, 20.0);

		new
			id = PlayerRace[playerid][rEpites][0],//id
			cp = PlayerRace[playerid][rEpites][1];//cp
			
		Race[id][rPosx][cp] = pos[0];
		Race[id][rPosy][cp] = pos[1];
		Race[id][rPosz][cp] = pos[2];
		
		if((PlayerRace[playerid][rEpites][1] + 1) < MAX_RACE_CP)
		{
			PlayerRace[playerid][rEpites][1]++;//kövi cp
			SFM(playerid, COL_VZOLD, "Ellenörzõ pont mentve! Jöhet a következõ - %d/%d | Mentés: /verseny ment", PlayerRace[playerid][rEpites][1], MAX_RACE_CP);
		} else
			SCM(playerid, COL_VZOLD, "Ellenörzõ pont mentve! Mivel elérted a maximális CP számot így mentened kell! /verseny ment");
			
		return true;
	}
	else if(!strcmp(param, "ment", true))
	{
		if(!PlayerRace[playerid][rEpites][0])
			return SCM(playerid, COL_LRED, "Jelenleg nem vagy építés módban, így nincs mit elmenteni!");
			
		new i = NINCS, cp, sql[128], id = PlayerRace[playerid][rEpites][0];
		format(sql, sizeof(sql), "INSERT INTO `"#MYSQL_RACE_TABLA"` (Nev, Indito, Keszito) VALUES ('%s', '%s', '%s')", Race[id][rNev], Race[id][rIndito], JatekosNev(playerid));
		mysql_tquery(sql_ID, sql, "", "");
		sql[0] = EOS;
		
		for(;++i < MAX_RACE_CP;)//0-49
		{
			if(Race[id][rPosx][i] == 0.0) continue;
			format(sql, sizeof(sql), "UPDATE `"#MYSQL_RACE_TABLA"` SET CP%d = '%f,%f,%f' WHERE Indito = '%s'", (i + 1), Race[id][rPosx][i], Race[id][rPosy][i], Race[id][rPosz][i], Race[id][rIndito]);
			mysql_tquery(sql_ID, sql, "", "");
			cp++;
		}
		
		Race[id][rCelPos][0] = Race[id][rPosx][cp - 1];
		Race[id][rCelPos][1] = Race[id][rPosy][cp - 1];
		Race[id][rCelPos][2] = Race[id][rPosz][cp - 1];
		
		Race[id][rCPdb] = cp;
		Race[id][rStatusz] = 0;
		AdminUzenet(COLOR_LIGHTRED, 1, "%s létrehozott egy %s nevû pályát %d ellenörzõponttal! | Indítókód: %s", JatekosNev(playerid), Race[id][rNev], cp, Race[id][rIndito]);
		SFM(playerid, COL_VZOLD, "Sikeresen elmentetted a(z) "#COL_MKEK"%s"#COL_FEHER" nevû pályát! CP: %d/%d | Indítókód: "#COL_MKEK"%s", Race[id][rNev], cp, MAX_RACE_CP, Race[id][rIndito]);
		
		PlayerRace[playerid][rEpites][0] = 0;
		PlayerRace[playerid][rEpites][1] = 0;
		return true;
	}
	else if(!strcmp(param, "lista", true))
	{
		SendClientMessage(playerid, COLOR_WHITE, "========== [ "#COL_MKEK"Betöltött versenyek"#COL_FEHER" ] ==========");
		new i, db;
		for(;++i < MAX_RACE;)
		{
			if(Race[i][rPosx][0] == 0.0) continue;
			SendFormatMessage(playerid, COLOR_WHITE, "Slot: %d | Név: "#COL_MKEK"%s"#COL_FEHER" | CP szám: "#COL_MKEK"%d"#COL_FEHER" | Státusz: "#COL_MKEK"%s ", i, Race[i][rNev], Race[i][rCPdb], VersenyStatusz(i));
			db++;
		}
		
		if(!db)
			return SCM(playerid, COL_LRED, "Nincs betöltve egy pálya sem!");
			
		SCM(playerid, COL_MKEK, "Ha megszeretnél keresni egy versenyt használd a /gps verseny parancsot!");
	}
	else
		goto go_help;
	
	return true;
}

CMD:vizsga(playerid, params[])
{
	#pragma unused params
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2334.5764, -1991.8934, 13.5435))//oktató hq
	{
		if(!PlayerInfo[playerid][pvirtualworld] && !PlayerInfo[playerid][pinterior])
		{
			PlayerInfo[playerid][pCP] = CP_GPS;
			SetPlayerCheckpoint(playerid, 2334.5764, -1991.8934, 13.5435, 5.0);
		}
		SCM(playerid, COL_LRED, "Nem vagy a Los Santos Autósiskola irodájában!");
		return true;
	}
	
	new dstr[1024], tmp[128], i = NINCS;
	for(;++i < sizeof(VizsgaLista)-1;)
	{
		if(i % 2 == 1) format(tmp, sizeof(tmp), "\n"#COL_MKEK"%s - %s$", VizsgaLista[i][0], FormatNumber(VizsgaLista[i][1][0], 0, ','));
		else format(tmp, sizeof(tmp), "\n"#COL_FEHER"%s - %s$", VizsgaLista[i][0], FormatNumber(VizsgaLista[i][1][0], 0, ','));
		strcat(dstr, tmp, sizeof(dstr));
	}
	
	ShowPlayerDialog(playerid, DIALOG_VIZSGA_LISTA, DIALOG_STYLE_LIST, "Los Santos - Autósiskola", dstr, "Mehet", "Mégse");
	return true;
}

CMD:leaderek(playerid, params[])
{
	#pragma unused params
	new str[32], db;
	SendClientMessage(playerid, COLOR_WHITE, "============= "#COL_MKEK"[ Frakcióvezetõk ]"#COL_FEHER" =============");
	foreach(Player, i)
	{
		if(!Belepve(i) || !PlayerInfo[i][pFrakcio]) continue;
		//[Típus(1 = Legális | 2 = Maffia | 3 = Banda)
		if((FInfo[PlayerInfo[i][pFrakcio]][fLegalis] == FK_LEGAL || FInfo[PlayerInfo[i][pFrakcio]][fLegalis] == FK_REND) && PlayerInfo[i][pLeader] == 1)
		{
			format(str, sizeof(str), "%s", (PlayerInfo[i][ptelefonszam] ? ToStr(PlayerInfo[i][ptelefonszam], true, '-') : ("Nincs")));
			SendFormatMessage(playerid, COLOR_WHITE, ""#COL_VZOLD"%s"#COL_FEHER" - Név: "#COL_MKEK"%s"#COL_FEHER" - Telefonszám: "#COL_MKEK"%s", FInfo[PlayerInfo[i][pFrakcio]][fNev], JatekosNev(i), str);
			db++;
		}
	}
	
	if(!db)
		return SCM(playerid, COL_LRED, "Jelenleg nincs egy elérhetõ frakció vezetõ se!");
	
	return true;
}

CMD:enter(playerid, params[])
{
	#pragma unused params
	
	new i = NINCS, id = NINCS;
	for(;++i < MAX_CEG;)
	{
		if(CegInfo[i][cVan])
		{
			if(CegInfo[i][cPosBe][0] == 0.0 || !IsPlayerInRangeOfPoint(playerid, 5, PosExt( CegInfo[i][cPosBe] )))
				continue;
				
			if(CegInfo[i][cVw][0] != GetPlayerVirtualWorld(playerid) || CegInfo[i][cInt][0] != GetPlayerInterior(playerid))
				continue;
			
			id = i;
			break;
		}
	}
	
	if(id != NINCS)
	{
		switch( id )
		{
			case BIZ_PB:
			{
				if(PlayerInfo[playerid][ppenz] < CegInfo[id][cBelepo])
					return SFM(playerid, COL_MKEK, "Egy PaintBall játék ára "#COL_MKEK"%s"#COL_FEHER"$! Nálad nincs ennyi.", FormatNumber(CegInfo[id][cBelepo], 0, ','));
			
				new db;
				foreach(Player, p)
				{
					if(!Belepve(p) || PlayerInfo[p][pPaintBall][0] != 1)
						continue;
						
					db++;
				}
				
				if(!db)
				{
					ServerInfo[0][sPaintBall][0] = 0;
					ServerInfo[0][sPaintBall][2] = 30;//ha nem lesz jelentkezõ kidobja
					ServerInfo[0][sPaintBall][4] = 900;//meddig tart egy adott meccs
					
					SCM(playerid, COL_VZOLD, "A pályán jelenleg nincs egy játékos se!");
					SCM(playerid, COL_VZOLD, "Ha 30 másodpercen belül nem lesz még egy játékos, a rendszer automatikusa kirak.");
					Freeze(playerid, 0);
				}
				else if((db + 1) == 2)
				{
					ServerInfo[0][sPaintBall][2] = 0;
					ServerInfo[0][sPaintBall][3] = 20;//mikor indul a meccs
					Freeze(playerid, 0);
					
				} else {
					
					if(PlayerInfo[playerid][pMegerosites] != playerid)
					{
						SFM(playerid, COL_MKEK, "A pályán jelenleg "#COL_MKEK"%d"#COL_FEHER" játékos van, és a meccs még "#COL_MKEK"%d"#COL_FEHER" másodpercig tart.", db, ServerInfo[0][sPaintBall][4]);
						SCM(playerid, COL_LRED, "Biztos, hogy be akarsz nevezni? Ha igen, írd be újra a parancsot!");
						PlayerInfo[playerid][pMegerosites] = playerid;
						return true;
					}
					
					Freeze(playerid, 2000);
				}
				
				PaintBallMuvelet(playerid, 3);
				PlayerInfo[playerid][pPaintBall][0] = 1;
				PlayerInfo[playerid][pMegerosites] = NINCS;
				GiveMoney(playerid,-CegInfo[id][cBelepo]);
				CegPenz(id, CegInfo[id][cBelepo]);
			}
			default:
			{
				if(CegInfo[id][cPosKi][0] == 0.0)
					return SCM(playerid, COL_LRED, "Ennek a cégnek még nincs lehelyezett kijárata!");
					
				if(PlayerInfo[playerid][ppenz] < CegInfo[id][cBelepo])
					return SFM(playerid, COL_MKEK, "A belépõ ára "#COL_MKEK"%s"#COL_FEHER"$! Nálad nincs ennyi.", FormatNumber(CegInfo[id][cBelepo], 0, ','));
				
				if(CegInfo[id][cBelepo] > 0) CegPenz(id, CegInfo[id][cBelepo]);
				SetPos(playerid, PosExt(CegInfo[id][cPosKi]), CegInfo[id][cPosKi][3]);
				
				SetVirtualWorld(playerid, CegInfo[id][cVw][1]);
				SetInterior(playerid, CegInfo[id][cInt][1]);
				
				Freeze(playerid, 2500);
			}
			
		}
		
		return true;
	}
	
	cmd_haz(playerid, "be");
	return true;
}
	
CMD:exit(playerid, params[])
{
	#pragma unused params
	
	new i = NINCS, id = NINCS;
	for(;++i < MAX_CEG;)
	{
		if(CegInfo[i][cVan])
		{
			if(CegInfo[i][cPosKi][0] == 0.0 || !IsPlayerInRangeOfPoint(playerid, (i == BIZ_PB ? 100.0 : 3.0), PosExt( CegInfo[i][cPosKi] )))
				continue;
			
			if(CegInfo[i][cVw][1] != GetPlayerVirtualWorld(playerid) || CegInfo[i][cInt][1] != GetPlayerInterior(playerid))
				continue;
			
			id = i;
			break;
		}
	}
	
	if(id != NINCS)
	{
		switch( id )
		{
			case BIZ_PB:
			{
				Freeze(playerid, 2000);
				PaintBallMuvelet(playerid, 2);
				SetPos(playerid, PosExt(CegInfo[id][cPosBe]), CegInfo[id][cPosBe][3]);
				SetVirtualWorld(playerid, CegInfo[id][cVw][0]);
				SetInterior(playerid, CegInfo[id][cInt][0]);
				SCM(playerid, COL_MKEK, "Befejezted a meccset! További szép napot!");
			}
			default:
			{
				if(CegInfo[id][cPosKi][0] == 0.0)
					return SCM(playerid, COL_LRED, "Ennek a cégnek még nincs lehelyezett kijárata!");
				
				//SetPos(playerid, PosExt(CegInfo[id][cPosKi]), CegInfo[id][cPosKi][3]);
				
				SetPlayerPos(playerid, CegInfo[id][cPosBe][0], CegInfo[id][cPosBe][1], CegInfo[id][cPosBe][2]);
				SetPlayerFacingAngle(playerid,CegInfo[id][cPosBe][3]);
				//SetVirtualWorld(playerid, CegInfo[id][cVw][1]);
				//SetInterior(playerid, CegInfo[id][cInt][1]);
				SetPlayerInterior(playerid,0);
				SetPlayerVirtualWorld(playerid,0);
				Freeze(playerid, 2500);
			}
		}
		
		return true;
	}
	
	cmd_haz(playerid, "ki");
	return true;
}
	
CMD:oldcar(playerid, params[])
{
	new jatekos, id;
	if(Admin(playerid, 1))
	{
		if(isnull(params))
		{
			SCM(playerid, COL_MKEK, "Használat: /oldcar [Játékos] | Admin funkció");
			jatekos = playerid;
			
		} else {
		
			sscanf(params, "u", jatekos);
			if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos))
				return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
				
			id = PlayerInfo[jatekos][pJarmubenUlt];
			if(!id) return SCM(playerid, COL_LRED, "Még nem ült jármûben!");
			SFM(playerid, COL_MKEK, "Utoljára egy "#COL_MKEK"%s"#COL_FEHER" típusú jármûben ült melynek rendszáma: "#COL_MKEK"%d[%d]", VehicleNames[vInfo[id][vModel] - 400], vInfo[id][vID], id);
		}
	} else
		jatekos = playerid;
	
	id = PlayerInfo[jatekos][pJarmubenUlt];
	if(!id) return SCM(playerid, COL_LRED, "Még nem ültél jármûben a csatlakozásod óta!");
	SFM(playerid, COL_MKEK, "Utoljára egy "#COL_MKEK"%s"#COL_FEHER" típusú jármûben ültél melynek rendszáma: ""%d[%d]", VehicleNames[vInfo[id][vModel] - 400], vInfo[id][vID], id);
	return true;
}

CMD:zuhanok(playerid, params[])
{
	#pragma unused params
	
	if(PlayerInfo[playerid][pFigyelmeztetes] > 1)
		return SCM(playerid, COL_LRED, "Már értesítetted az Adminokat kétszer, nem kell floodolni! Használd a /report-ot!");
	
	PlayerInfo[playerid][pFigyelmeztetes]++;
	AdminUzenet(COLOR_ROZSA, 1, "[%d]%s zuhanást jelentett ezért a rendszer fagyasztotta! Kérlek foglalkozzatok vele!", playerid, JatekosNev(playerid));
	SCM(playerid, COL_LRED, "Fagyasztva! Várj, amíg egy Admin segít! Ha kihasználtad a parancsot, banolva leszel!");
	Freeze(playerid, 0);
	
	return true;
}

CMD:aide(playerid, params[])
{
	#pragma unused params
	
	if(PlayerInfo[playerid][pFigyelmeztetes] > 1)
		return SCM(playerid, COL_LRED, "Már értesítetted az Adminokat kétszer, nem kell floodolni! Használd a /report-ot!");
	/*
	if(Iter_Count(Adminok) > 0)
	{*/
	PlayerInfo[playerid][pFigyelmeztetes]++;
	AdminUzenet(COLOR_ROZSA, 1, "[%d]%s azonnali segítséget kért, egy Admin foglalkozzon vele!", playerid, JatekosNev(playerid));
	SCM(playerid, COL_LRED, "Online Adminok értesítve!");
	/*} else
		SCM(playerid, COL_LRED, "Jelenleg nincs Online Admin!");
	*/
	return true;
}
/*
CMD:skvkocsi(playerid,params[])
{

	return 1;
}
*/

CMD:lsttagok(playerid,params[])
{
    SendClientMessage(playerid,0xff1e00AA,"========== [ Los Santos Taxi ] ==========");
    foreach(Player,p)
    {
        if(Belepve(p) && PlayerInfo[p][pSKV] == 1)
        {
            SendFormatMessage(playerid,0xd99b0bAA,"Név: "#COL_MKEK"%s{ffea00} | Rang: %s",JatekosNev(p),SKVrangok(PlayerInfo[p][pSKVrang]));
        }
    }
	return 1;
}

CMD:lstr(playerid,params[])
{
	if(isnull(params)) return SCM(playerid,COL_LRED,"Használat: /skvr [IC Üzenet]");
    else if(PlayerInfo[playerid][pSKV] == 0) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else {
	    new str[256];
	    format(str,256,"** LST %s %s: %s **",SKVrangok(PlayerInfo[playerid][pSKVrang]),JatekosNev(playerid),params);
		foreach(Player,p)
		{
		    if(PlayerInfo[p][pSKV] == 1/* && playerid != p*/)
		    {
		        SendClientMessage(p,0xffc400AA,str);
		    }
		}
	}
	return 1;
}
CMD:lstrb(playerid,params[])
{
	if(isnull(params)) return SCM(playerid,COL_LRED,"Használat: /skvrb [IC Üzenet]");
	else if(PlayerInfo[playerid][pSKV] == 0) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else {
	    new str[256];
	    format(str,256,"**(( LST %s %s OOC: %s ))**",SKVrangok(PlayerInfo[playerid][pSKVrang]),JatekosNev(playerid),params);
		foreach(Player,p)
		{
		    if(PlayerInfo[p][pSKV] == 1/* && playerid != p*/)
		    {
		        SendClientMessage(p,0xffc400AA,str);
		    }
		}
	}
	return 1;
}
CMD:taxiora(playerid,params[])
{
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /taxióra [Játékos/ID]");
	else if(PlayerInfo[playerid][pSKV] != 1) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	else {
	    new vehidt = GetPlayerVehicleID(playerid);
	    new vehidh = GetPlayerVehicleID(id);
		if(vehidt != vehidh) return SCM(playerid,COL_LRED,"Õ nincs veled egy kocsiban.");
		else if(PlayerInfo[id][pTaxithivott] == 0) return SCM(playerid,COL_LRED,"Õ nem hívott taxit!");
		else {
			PlayerInfo[id][pTaxiban] = 1;
			PlayerInfo[id][pTaxisid] = playerid;
			TaxiOraIndit(playerid,id);
		}
	}
	return 1;
}
CMD:lstgov(playerid,params[])
{
	if(PlayerInfo[playerid][pSKVrang] < 5) return SCM(playerid,COL_LRED,"Csak LST leader!");
	new str[144];
   	format(str, sizeof(str), "================== [ "#COL_VKEK"Los Santos Taxi"#COL_FEHER" ] ==================");
	SendClientMessageToAll(COLOR_YELLOW2, str);
	format(str, sizeof(str), "%s %s: %s", SKVrangok(PlayerInfo[playerid][pSKVrang]), JatekosNev(playerid, true), params);
	SendClientMessageToAll(COLOR_YELLOW2, str);
	return 1;
}

CMD:lstrang(playerid,params[])
{
	if(PlayerInfo[playerid][pSKVrang] >= 5)
	{
	    new id;
		new rang;
	    if(sscanf(params,"ud",id,rang)) return SCM(playerid,COL_MKEK,"Használat: /skvrang [Játékos] [Rang]");
	    else if(PlayerInfo[playerid][pSKVrang] < 5) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	    else if(rang > 6) return SCM(playerid,COL_LRED,"Max. 6!");
	    else {
			PlayerInfo[id][pSKVrang] = rang;
			SFM(id,COL_MKEK,"LST: %s új rangot adott: %d",JatekosNev(playerid),rang);
			SFM(playerid,COL_MKEK,"LST: Új rangot adtál neki: %s [%d]",JatekosNev(id),rang);
		}
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}

CMD:lst(playerid,params[])
{
	if(PlayerInfo[playerid][pSKV] == 1)
	{
        new param[32];
	    new id;
	//	new str[256];
	    if(sscanf(params,"s[32]u",param,id)) return SCM(playerid,COL_MKEK,"Használat: /lst [Felvesz/Kirúg/Elfogad] [Játékos/ID]");
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	    else if(!strcmp(param,"felvesz",true))
	    {
	        if(PlayerInfo[playerid][pSKVrang] < 5) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	        PlayerInfo[id][pSKV] = 1;
	        PlayerInfo[id][pSKVrang] = 1;
	        SFM(id,COL_MKEK,"%s felvett téged az LST-ba!",JatekosNev(playerid));
	       // SCM(id,COL_MKEK,str);
	        SFM(playerid,COL_MKEK,"Felvetted %s-t az LST-ba.",JatekosNev(id));
	        //SCM(playerid,COL_MKEK,str);
	    }
        else if(!strcmp(param,"kirúg",true))
	    {
	        if(PlayerInfo[playerid][pSKVrang] < 5) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	        PlayerInfo[id][pSKV] = 0;
	        PlayerInfo[id][pSKVrang] = 0;
	        SFM(id,COL_MKEK,"%s kirúgott az LST-ból!",JatekosNev(playerid));
	       // SCM(id,COL_MKEK,str);
	        SFM(playerid,COL_MKEK,"Kirúgtad %s-t az LST-ból.",JatekosNev(id));
	     //   SCM(playerid,COL_MKEK,str);
	    }
	    else if(!strcmp(param,"elfogad",true))
	    {
	        if(PlayerInfo[id][pTaxithivott] == 0) return SCM(playerid,COL_MKEK,"Nem hívott taxit.");
	        else TaxiHivasFogad(playerid,id);
	    }
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}

//############################################## Játékos Parancsok vége! #############################################
//############################################## Admin & Játékos helpek! #############################################
/*
CMD:harcsa(playerid, params[])
{
	#pragma unused params
	//if(AntiFlood(playerid))
		//return SCM(playerid, COL_MKEK, "Ne siess öcsi!!");
		
	SCM(playerid, COL_MKEK, "Senor Harcsa no, nem lenni.. itt nem lenni...");

	return true;
}
*/

CMD:engedely(playerid, params[])
{
	new jatekos;
	if(isnull(params))
	{
		go_help:
		return SCM(playerid, COL_MKEK, "Használat: /engedély [ Felmutat / Megnéz / Kiad ]");
	}

	new param[24];
	sscanf(params, "s[24]{}", param);
	
	if(!strcmp(param, "kiad", true))
	{
		if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA )
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
		if(PlayerInfo[playerid][pLeader] == 0)
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		new eparam[24];
		if(sscanf(params, "{s[24]}us[24]", jatekos, eparam))
			return SCM(playerid, COL_MKEK, "Használat: /engedély kiad [Játékos] [ Engedély(Fegyver) ]");
			
		if(jatekos == INVALID_PLAYER_ID || !Belepve(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			
		if(!strcmp(eparam, "fegyver", true))
		{
			if(PlayerInfo[playerid][pMegerosites] != playerid)
			{
				PlayerInfo[playerid][pMegerosites] = playerid;
				SFM(playerid, COL_MKEK, "Biztos, hogy fegyverengedélyt szeretnél kiállítani %s számára? Ha igen, írd be újra!", JatekosNev(playerid, true));
				return true;
			}
			
			PlayerInfo[playerid][pMegerosites] = NINCS;
			if(PlayerInfo[jatekos][ppenz] < VizsgaLista[4][1][0])
				return SFM(playerid, COL_LRED, "A játékosnak nincs "#COL_MKEK"%s"#COL_FEHER"$ készpénze, hogy ezt kifizesse!", FormatNumber(VizsgaLista[4][1][0], 0, ','));
				
			PlayerInfo[jatekos][ppenz] -= VizsgaLista[4][1][0];
			new penz = floatround(VizsgaLista[4][1][0] / 2);
			SFM(playerid, COL_VZOLD, "Sikeresen kiállítottál egy fegyverengedélyt %s számára! A rendõrség ebbõl %s$ juttatást kapott!", JatekosNev(jatekos, true), FormatNumber(penz, 0, ','));
			SFM(jatekos, COL_VZOLD, "Rendõr %s fegyverengedélyt állított ki számodra! Érvényes: %d napig ((óráig)) | Ára: %s$", JatekosNev(playerid, true), VizsgaLista[4][4][0], FormatNumber(VizsgaLista[4][1][0], 0, ','));
			FInfo[FRAKCIO_LSPD][fPenz] += penz;
			PlayerInfo[jatekos][pEngedely][4] = VizsgaLista[4][4][0];
			
		} else
			SCM(playerid, COL_LRED, "Nincs ilyen engedély! Lehetõségek: Fegyver");
			
		return true;
	}
	else if(!strcmp(param, "felmutat", true))
	{
		jatekos = GetClosestPlayer(playerid);
		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 3) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || Bortonben(jatekos))
			return SCM(playerid, COL_LRED, "A közeledben nincs senki!");
			
		Cselekves(playerid, "felmutatta az engedélyeit valakinek");
	}
	else if(!strcmp(param, "megnéz", true) || !strcmp(param, "megnéz", true))
	{
		jatekos = playerid;
		Cselekves(playerid, "megnézte az engedélyeit");
		
	} else
		goto go_help;
	
	SendFormatMessage(jatekos, COLOR_WHITE, "============ [ "#COL_MKEK"%s engedélyei"#COL_FEHER" ] ============", JatekosNev(playerid, true));
	
	new i = NINCS;
	for(;++i < sizeof(VizsgaLista);)
	{
		if(PlayerInfo[playerid][pEngedely][i])
			SendFormatMessage(jatekos, COLOR_WHITE, ""#COL_MKEK"%s"#COL_FEHER" - még "#COL_MKEK"%d"#COL_FEHER" napig((óráig)) érvényes", VizsgaLista[i][0], PlayerInfo[playerid][pEngedely][i]);
		else
			SendFormatMessage(jatekos, COLOR_WHITE, ""#COL_MKEK"%s"#COL_FEHER" - "#COL_PIROS"Lejárt", VizsgaLista[i][0]);
	}
	
	return true;
}

CMD:m(playerid, params[])
{
	if(ServerInfo[0][sCsend] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Most nem beszélhetsz!");
	
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSFD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Te nem vagy se a rendõrség se a tûzoltóság tagja!");
		
	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Csak Rendõrségi és Tûzoltósági jármûben használhatod!");
	
	new munka = vInfo[ JarmuID( GetPlayerVehicleID(playerid), playerid ) ][vMunka];
	if(munka != FRAKCIO_LSPD && munka != FRAKCIO_LSFD && munka != FRAKCIO_KATONA && munka != FRAKCIO_FBI)
		return SCM(playerid, COL_LRED, "Csak Rendõrségi, Tûzoltósági, Katona és ATF jármûben használhatod!");
		
	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "Használat: /m [Megaphone]");
	
	if(!OOC_Ellenorzes(playerid, "/m", params))
		return true;

	nformat(str, 128, "[ %s o< %s ]", JatekosNev(playerid, true), params);
	ProxDetector(70.0, playerid, str, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW, COLOR_YELLOW);
	//SetPlayerChatBubble(playerid, str, COLOR_YELLOW, 30.0, 5000);
	return true;
}

CMD:jelveny(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA && PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	new jatekos;
	if(isnull(params))
	{
		go_help:
		return SCM(playerid, COL_MKEK, "Használat: /jelvény [ Felmutat / Megnéz ]");
	}

	if(!strcmp(params, "felmutat", false))
	{
		jatekos = GetClosestPlayer(playerid);
		if((GetPlayerDistanceFromPlayer(playerid, jatekos) > 3) || jatekos == NINCS || jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || Bortonben(jatekos))
			return SCM(playerid, COL_LRED, "A közeledben nincs senki!");
			
		Cselekves(playerid, "felmutatta a jelvényét valakinek");
	}
	else if(!strcmp(params, "megnéz", false) || !strcmp(params, "megnéz", false))
	{
		jatekos = playerid;
		Cselekves(playerid, "megnézte a jelvényét");
		
	} else
		goto go_help;
	
	SendClientMessage(jatekos, COLOR_WHITE, "========= [ "#COL_MKEK"Jelvény"#COL_FEHER" ] =========");
	SendFormatMessage(jatekos, COLOR_WHITE, "* Név: "#COL_MKEK"%s", JatekosNev(playerid, true));
	SendFormatMessage(jatekos, COLOR_WHITE, "* Szervezet: "#COL_MKEK"%s", FInfo[PlayerInfo[playerid][pFrakcio]][fNev]);
	SendFormatMessage(jatekos, COLOR_WHITE, "* Beosztás: "#COL_MKEK"%s", Rangok(PlayerInfo[playerid][prang], PlayerInfo[playerid][pFrakcio]));
	
	return true;
}

CMD:help(playerid, params[])
{
	#pragma unused params
	#define PRA(%1,%2,%3) SendClientMessage(%1, COLOR_WHITE, #%2"Általános:"#COL_FEHER" "#%3)
	#define MK(%1,%2,%3) SendClientMessage(%1, COLOR_WHITE, #%2"**Munka -"#COL_FEHER" "#%3)
	//,ruha(tesztfázis),telefon hulla 
	PRA(playerid, COL_MKEK, "/b /s /o /me /do /va /l /stats /eldob /felvesz /szamla /poz /engedély");
	PRA(playerid, COL_MKEK, "/ház /butor /v /motor /tankol /nyit /zár /call /(p)ickup /(h)angup /number");
	PRA(playerid, COL_MKEK, "/nevek /segít /átad /animok /tog /mp3 /vontat /kiszed /személyi /hirdet");
	PRA(playerid, COL_MKEK, "/zsebem /id /berak /visz /motoz /(s)ebesség(k)orlát /bepakol /kipakol");
	PRA(playerid, COL_MKEK, "/togphone /eject /megpróbál /walk /eladóházak /átnéz /elvesz /elfogad");
	PRA(playerid, COL_MKEK, "/elutasít /kulcs /skill /csere /drog /joint /kokain /heroin /keres /cég /zsák");
	PRA(playerid, COL_MKEK, "/sms /oldcar /kezetfog "#COL_MKEK"Segítségkérés:"#COL_FEHER" /zuhanok /aide /report /jelent /érme");
	PRA(playerid, COL_MKEK, "/érme /dobókocka /garázs /streaminfo");
	
	if(IsJob(playerid, MUNKA_KUKA))
		MK(playerid, COL_MKEK, "Kukás: /munka kezd");
		
	if(IsJob(playerid, MUNKA_FAVAGO))
		MK(playerid, COL_MKEK, "Favágó: /munka kezd");
		
	if(IsJob(playerid, MUNKA_KAMION))
		MK(playerid, COL_MKEK, "Kamion: /munka kezd /kr");
	
	if(IsJob(playerid, MUNKA_UTTISZTITO))
		MK(playerid, COL_MKEK, "Úttisztító: /munka kezd");
		
	if(IsJob(playerid, MUNKA_FEGYVER))
		MK(playerid, COL_MKEK, "Fegyvermester: /vas /vasazas /készít");
	
	if(IsJob(playerid, MUNKA_FARMER))
		MK(playerid, COL_MKEK, "Farmer: /munka kezd");
	
	if(IsJob(playerid, MUNKA_DROG))
		MK(playerid, COL_MKEK, "Drog díler: /készít /drog");
		
	if(IsJob(playerid, MUNKA_HACK))
		MK(playerid, COL_MKEK, "Hacker: /hack");
	
	new fk = PlayerInfo[playerid][pFrakcio];
	switch( fk )
	{
		case FRAKCIO_LSPD: //1
		{
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /lista /duty /útzár /bója /sokk /körözés /bilincs /lecsuk /gov /d /r /rb /frakció /berak /visz", FInfo[fk][fNev]);
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /lenyomoz /ticket /jelvény /m /engedély /uzemmod", FInfo[fk][fNev]);
		}
		case FRAKCIO_LSFD: //2
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /lista /duty /bója /gov /d /r /rb /frakció /m", FInfo[fk][fNev]);
		case FRAKCIO_LSMD: //3
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /gyógyszer /segit /duty /lista /gov /d /r /rb /frakció", FInfo[fk][fNev]);
		case FRAKCIO_GSF: //4
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_KORMANY: //5
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /gov /d /r /rb /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_KATONA: //6
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /nevek /frakció /special /duty /uzemmod", FInfo[fk][fNev]);
		case FRAKCIO_BALLAS: //8
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_BRATVA: //9
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_SZERELO: //10
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /szerel [ jármû | számla ] /v tuning)", FInfo[fk][fNev]);
		case FRAKCIO_IMPERIAL: //11
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_RIPORTER: //12
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /hír", FInfo[fk][fNev]);
		case FRAKCIO_LCN: //13
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_YAKUZA: //14
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_FBI: //15
		{
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /lista /duty /útzár /bója /sokk /körözés /bilincs /lecsuk /gov /d /r /rb /frakció /berak /visz", FInfo[fk][fNev]);
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /lenyomoz /ticket /jelvény /m /uzemmod", FInfo[fk][fNev]);
		}
		case FRAKCIO_DUBLIN: //16
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_CRIMINALS: //17
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_IRA: //18
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_STOCKWELL: //19
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
		case FRAKCIO_IMPERIALG: //20
			SendFormatMessage(playerid, COLOR_WHITE, #COL_MKEK"%s:"#COL_FEHER" /r /rb /war /nevek /frakció", FInfo[fk][fNev]);
	}
	
	if(PlayerInfo[playerid][pHitman] > 0)
		PRA(playerid, COL_MKEK, "Hitman: /portable /pda /méreg /hr /bomba");
	
	return true;
}

CMD:animok(p, params[])
{
	#pragma unused params
	SendClientMessage(p, COLOR_WHITE, "========================== [ "COL_MKEK"Anim lista"#COL_FEHER" ] ==========================");
	SendClientMessage(p, COLOR_WHITE, "Animok: /carjacked /handsup /wank /cellin /cellout /drunk /fekvés /guggol");
	SendClientMessage(p, COLOR_WHITE, "Animok: /ideges /tánc /laza /gyász /sír /kiss /gurul /mivan /jöhettek /állj /falhoz");
	SendClientMessage(p, COLOR_WHITE, "Animok: /sleep /ground /getup /holding /gyere /kézenállás /calltaxi /bomb /getarrested");
	SendClientMessage(p, COLOR_WHITE, "Animok: /laugh /lookout /robman /crossarms /lay /hide /vomit /eszik /wave /slapass /deal");
	SendClientMessage(p, COLOR_WHITE, "Animok: /crack /smoke /gro /chat /fucku /taichi /chairsit /fall /fallback /injured /sup");
	SendClientMessage(p, COLOR_WHITE, "Animok: /rap /push /akick /lowbodypush /spray /headbutt /medic /koface /kostomach /lifejump");
	SendClientMessage(p, COLOR_WHITE, "Animok: /leftslap /rollfall /carlock /carjack /hoodfrisked /lightcig /tapcig /bat /chant");
	SendClientMessage(p, COLOR_WHITE, "Animok: /finger /shouting /cop /elbow /kneekick /fstance /gpunch /airkick /gkick");
	SendClientMessage(p, COLOR_WHITE, "Animok: /lowthrow /highthrow /dealstance /knife /basket /aim /lean /strip /dance /dj");
	return true;
}

CMD:ah(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1) && !IsAS(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	#define ASH(%1,%2,%3) SendClientMessage(%1, COLOR_WHITE, #%2"Adminsegéd:"#COL_FEHER" "#%3)
	#define AH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"Admin("#%3"):"#COL_FEHER" "#%4)
	#define FSAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"FõAdminSegéd("#%3"):"#COL_FEHER" "#%4)	
	#define FAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"FõAdmin("#%3"):"#COL_FEHER" "#%4)
	#define SAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"SuperAdmin("#%3"):"#COL_FEHER" "#%4)
	#define CAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"AdminController("#%3"):"#COL_FEHER" "#%4)
//	#define FEAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"Fejlesztõ("#%3"):"#COL_FEHER" "#%4)
	#define FEAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"Fejlesztõ("#%3"):"#COL_FEHER" "#%4)
	#define TAH(%1,%2,%3,%4) SendClientMessage(%1, COLOR_WHITE, #%2"Tulajdonos("#%3"):"#COL_FEHER" "#%4)
	
	if(IsAS(playerid)) {
		ASH(playerid, COL_NARANCS, "/as /warn /set /(u)n(f)reeze /respawn /vhspawn /asayn /vá /tv /tog /asduty");
		SCM(playerid, COL_VZOLD, "Köszönd meg az adminsegéd jogodat, és végezd szakszerûen a munkádat!");
	}
    if(Admin(playerid, 1)) {
		AH(playerid, COL_MKEK, 1, "/a /asay(n) /kick /warn /respawn /tele /crs /admins /set /aka /asegit /tv");
		AH(playerid, COL_MKEK, 1, "/(un)freeze /jail /aduty /check /bal /jobb /fel /le /vá /(f)ra(k)ció");
		AH(playerid, COL_MKEK, 1, "/nevek /ahegy /apw /vhspawn /pacsi /tog /goto /enged /gethp /get /bid /cc");
		AH(playerid, COL_MKEK, 1, "/w(ay)p(oint) /mark /gotomark /setint /setvw /cuccreset /maszkid /flymode");
	}
   	if(Admin(playerid, 2)) {
		AH(playerid, COL_MKEK, 2, "/v /ipban /ban /flip /getip");
	}
    if(Admin(playerid, 3)) {
		AH(playerid, COL_MKEK, 3, "/gotocar /getcar /ház /dmoff /auncuff /lenyomoz");
	}
	if(Admin(playerid, 4)) {
		AH(playerid, COL_MKEK, 4, "/gotopos /mindenthall /statisztika /set /x /y /z");
	}
	if(Admin(playerid, 5)) {
		AH(playerid, COL_MKEK, 5, "/helper /unban /v töröl /veh /atankol /destroycars /cég /kocsiba /vr /sban");
	}
	if(Admin(playerid, FSEGED_SZINT)) {
		FSAH(playerid, COL_GREEN, FSEGED_SZINT, "/ház bejárat, /napszak, /idojaras, /névváltás, /zene, /tilt");
	}
	if(Admin(playerid, FOADMIN_SZINT)) {
		FAH(playerid, COL_GREEN, FOADMIN_SZINT, "/makeadmin, /eladókocsik, /makeleader, /ajtó, /megtankol, /desync");
		FAH(playerid, COL_GREEN, FOADMIN_SZINT, "/object, /telecsin, /teletorol, /pozmentes, /tûz, /oocki, /cég");
		FAH(playerid, COL_GREEN, FOADMIN_SZINT, "/ujház, /terület, /fa, /széf, /inaktiv, /areport");
		FAH(playerid, COL_GREEN, FOADMIN_SZINT, "/robbant, /agl, /zeró, /fuelcars, /noname, /gpscsin, /gpstorol");
		FAH(playerid, COL_GREEN, FOADMIN_SZINT, "/újgarázs, /nullaz");
	}
	if(Admin(playerid, SZUPER_SZINT)) {
		SAH(playerid, COL_NARANCS, SZUPER_SZINT, "/benzinkút, /gmx, /kapu, /ujmodel, /tog törés, /jetpack, /fenykard");
	}
	if(Admin(playerid, AC_SZINT)) {
		CAH(playerid, COL_ROZSA, AC_SZINT, "/debugcrs, /vr all, /verseny, /fonduty, /smindenthall, /drink lerak");
	}
	if(Admin(playerid, FEJLESZTO_SZINT)) {
	    FEAH(playerid,COL_SZURKE, FEJLESZTO_SZINT, "/cmd /text /crash /godmode /objectresi");
	}
	if(Admin(playerid, TULAJ_SZINT)) {
		TAH(playerid, COL_SZURKE, TULAJ_SZINT, "/debug, /adatmentes, /cég, /tog, /speedboost");
	}
	if(IsScripter(playerid)) {
		SendClientMessage(playerid, COLOR_YELLOW, "Scripter: /faset /debug, /damaged, /damage, /pedanim, /sound, /ho");
		SendClientMessage(playerid, COLOR_YELLOW, "Scripter: /kleader /graffiti /cctv, /smleader, /lstleader, /sinv");
		SendClientMessage(playerid, COLOR_YELLOW, "Scripter: /3dtext");
	}
	
	return true;
}

CMD:stats(playerid, params[])
{
	new bool:dbg;
	if(!strcmp(params, "debug")) { dbg = true; }
	SendClientMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ Személyes Adataid ]"#COL_FEHER" ===================");
	ShowStats(playerid, playerid, dbg);
	return true;
}

CMD:skill(playerid, params[])
{
	SendClientMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ Tapasztalat pontjaid ]"#COL_FEHER" ===================");
	ShowSkill(playerid, playerid);
	return true;
}

CMD:szemelyi(playerid, params[])
{
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /személyi [ Megnéz / Felmutat / Vesz ]");

	if(!strcmp(params, "megnéz", true) || !strcmp(params, "megnez", true))
	{
		Cselekves(playerid, "megnézte a személyiét");
		SendClientMessage(playerid, COLOR_WHITE, "============= [ "#COL_MKEK"Személyi igazolvány"#COL_FEHER" ] =============");
		if(!PlayerInfo[playerid][pSzemelyi]) return SCM(playerid, COL_LRED, "A személyi igazolványod érvénytelen, kérlek igényelj újat! (( /személyi vesz ))");
		SendFormatMessage(playerid, COLOR_YELLOW2, "Név: %s | Életkor: %d | Származás: %s", JatekosNev(playerid, true), PlayerInfo[playerid][peletkor], Szarmazas(PlayerInfo[playerid][pszarmazas]));
	}
	else if(!strcmp(params, "felmutat", true) || !strcmp(params, "mutat", true))
	{
		if(!PlayerInfo[playerid][pSzemelyi])
			return SCM(playerid, COL_LRED, "A személyi igazolványod érvénytelen, kérlek igényelj újat! (( /személyi vesz ))");
		
		new jatekos = KozelbenValaki(playerid, 4.0);
		if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || playerid == jatekos || jatekos == NINCS)
			return SCM(playerid, COL_LRED, "A közeledben nincs senki!");
			
		Cselekves(playerid, "felmutatta a személyiét valakinek");
		SendClientMessage(jatekos, COLOR_WHITE, "============= [ "#COL_MKEK"Személyi igazolvány"#COL_FEHER" ] =============");
		SendFormatMessage(jatekos, COLOR_YELLOW2, "Név: %s | Életkor: %d | Származás: %s", JatekosNev(playerid, true), PlayerInfo[playerid][peletkor], Szarmazas(PlayerInfo[playerid][pszarmazas]));
	}
	else if(!strcmp(params, "vesz", true))
	{
		if(!IsPlayerInRangeOfPoint(playerid, 5.0, 889.750, -0.752, 988.210))
			return SCM(playerid, COL_LRED, "Nem vagy a városházán!");
			
		if(PlayerInfo[playerid][pSzemelyi])
			return SCM(playerid, COL_LRED, "Neked már van Személyi igazolványod!");
			
		if(PlayerInfo[playerid][pBszPenz] < 250)
			return SCM(playerid, COL_LRED, "A szeméyi igazolvány ára 250$. Neked nincs ennyi a bankszámládon!");
			
		PlayerInfo[playerid][pBszPenz] -= 250;
		PlayerInfo[playerid][pSzemelyi] = 50;
	}
	return true;
}

CMD:zsebem(playerid, params[])
{
	SendClientMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ Zsebed tartalma ]"#COL_FEHER" ===================");
	ShowZseb(playerid, playerid);
	return true;
}

//############################################## Admin & Játékos helpek vége! #############################################
//############################################## Admin Parancsok! ####################################################

new AJelszavak[14][2] =
{
	{1, 1111},
	{2, 1121},
	{3, 1131},
	{4, 1141},
	{5, 1151},
	{FSEGED_SZINT, 1161},
	{FOADMIN_SZINT, 1171},
	{SZUPER_SZINT, 1181},
	{AC_SZINT, 1191},
	{FEJLESZTO_SZINT, 11101},
	{SCRIPTER_SZINT, 11111},
	{FOSCRIPTER_SZINT, 11121},
	{TULAJ_SZINT, 11131},
	{RENDSZG_SZINT, 11141}
};
stock adminJelszo(alvl)
{
	new jelszo = NINCS;
	for(new i = 0; i < sizeof(AJelszavak); i++)
	{
	    if(AJelszavak[i][0] != alvl) continue;
	    
	    jelszo = AJelszavak[i][1];
	    break;
	}
	return jelszo;
}
CMD:alogin(playerid, params[])
{
	//if(!Admin(playerid, 1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	if(ALogIn[playerid][1] != 0) return SCM(playerid,COL_VZOLD,"Már beléptél");
	new ajelszo;
	if(sscanf(params,"d",ajelszo)) return SCM(playerid,COL_VZOLD,"Használat: /alogin [ Jelszó ]");
	new helyesjelszo = adminJelszo(ALogIn[playerid][0]);
	if(ajelszo == -1 || helyesjelszo != ajelszo) return SCM(playerid,COL_VZOLD,"Rossz jelszó!");
	
    PlayerInfo[playerid][padmin] = ALogIn[playerid][0];
    ALogIn[playerid][1] = 1;
    SCM(playerid,COL_VZOLD,"Beléptél");
    return 1;
}
CMD:3dtext(playerid,params[])
{
	if(!IsScripter(playerid)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	new param[32];
	if(sscanf(params,"s[32]{}",param)) return SCM(playerid,COL_VZOLD,"Használat: /3DText [ Új / Közeli / Töröl ]");
	else if(!strcmp(param,"új",true))
	{
	    new text[128], color, Float:x, Float:y, Float:z;
	    if(sscanf(params,"{s[32]}ds[128]",color,text)) return SCM(playerid,COL_VZOLD,"Használat: /3dtext új [Szín(0/1/2)] [Szöveg(Max.128 karakter)]");
	    else if(color < 0 || color > 2) return SCM(playerid,COL_LRED,"Színek: 0: Zöld | 1: Sárga | 2: Piros");
	    else if(strlen(text) > 128) return SCM(playerid,COL_LRED,"Max. 128 karakter!");
	    else
	    {
	        new ccolor;
	        new lid = UjLabelID();
	        GetPlayerPos(playerid,x,y,z);
	        LabelInfo[lid][lVan] = 1;
	        LabelInfo[lid][lx] = x;
	        LabelInfo[lid][ly] = y;
	        LabelInfo[lid][lz] = z;
			LabelInfo[lid][lText] = text;
			LabelInfo[lid][lszin] = color;
			new querycske[2048];
        	/*format(querycske, sizeof(querycske), "INSERT INTO `"#MYSQL_LABEL_TABLA"` (ID, X, Y, Z, Text, szin)");
			format(querycske, sizeof(querycske), "%s VALUES('%d',", querycske, lid);
			format(querycske, sizeof(querycske), "%s'%f','%f',", querycske, LabelInfo[lid][lx], LabelInfo[lid][ly]);
			format(querycske, sizeof(querycske), "%s'%f','%s',", querycske, LabelInfo[lid][lz], LabelInfo[lid][lText]);
			format(querycske, sizeof(querycske), "%s'%d')",querycske, LabelInfo[lid][lszin]);*/
			format(querycske,sizeof querycske, "INSERT INTO `"#MYSQL_3DTEXT_TABLA"` (ID, X, Y, Z, Text, szin) VALUES('%d','%f','%f','%f','%s','%d')",lid,LabelInfo[lid][lx], LabelInfo[lid][ly], LabelInfo[lid][lz], LabelInfo[lid][lText], LabelInfo[lid][lszin]);
			mysql_tquery(sql_ID, querycske, "", "");
			switch(LabelInfo[lid][lszin])
			{
			    case 0: ccolor = COLOR_GREEN;
			    case 1: ccolor = COLOR_YELLOW;
				case 2: ccolor = COLOR_RED;
			}
			dynlabels[lid] = CreateDynamic3DTextLabel(LabelInfo[lid][lText],ccolor,LabelInfo[lid][lx],LabelInfo[lid][ly],LabelInfo[lid][lz],DEFAULT_LABEL_DISTANCE);
	    }
	}
	else if(!strcmp(param,"közeli",true))
	{
	    new id = LegkozelebbiLabel(playerid);
		SFM(playerid,COL_VZOLD,"A hozzád legközelebb eso 3DText ID-je: %d. (Felirat: %s)",id,LabelInfo[id][lText]);
	}
	else if(!strcmp(param,"töröl",true))
	{
		new id;
		if(sscanf(params,"{s[32]}d",id)) return SCM(playerid,COL_VZOLD,"Használat: /3dtext töröl [ID]");
		else if(LabelInfo[id][lVan] == 0) return SCM(playerid,COL_LRED,"Nincs ilyen 3DTextLabel.");
		else {
		    SFM(playerid,COL_MKEK,"3DTextLabel törölve. (%d)",id);
		    nformat(rquery,256,"DELETE FROM `"#MYSQL_3DTEXT_TABLA"` WHERE ID = '%d'",id);
            mysql_tquery(sql_ID, rquery, "", "");
            LabelInfo[id][lVan] = 0;
			DestroyDynamic3DTextLabel(dynlabels[id]);
		}
	}
	return 1;
}
CMD:vdebug(playerid,params[])
{
	new vid = GetPlayerVehicleID(playerid);
	if(vid == INVALID_VEHICLE_ID) return SCM(playerid,COL_MKEK,"Nincs ilyen kocsi.");
	new veh = JarmuID(vid,playerid);
	SFM(playerid,COL_MKEK,"Debug infó: %s[%d] SQL: %d",VehicleNames[vInfo[veh][vModel] -400],vid,veh);
	return 1;
}
CMD:ap(playerid,params[])
{
	if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	new eparam[32];
	if(sscanf(params,"s[32]{}",eparam)) return SCM(playerid,COL_MKEK,"Használat: /a(dmin)p(arkoló) [ Berak / Kiszed / Lista]");
	else if(!strcmp(eparam,"berak",true))
	{
		new vid;
		if(sscanf(params,"{s[32]}d",vid)) return SCM(playerid, COL_MKEK, "Használat: /ap berak [JármûID]");
		else if(vid == INVALID_VEHICLE_ID) return SCM(playerid,COL_LRED,"Nincs ilyen jármû!");
		new veh;
		veh = JarmuID(vid,playerid);
		if(vInfo[veh][vApben] == 1) return SCM(playerid,COL_LRED,"Ez a jármû már APben van.");
		else {
			vInfo[veh][vApben] = 1;
			vUpdate(veh, vuApben);
			AdminUzenet(COLOR_LIGHTRED,1,"%s AdminParkolóba rakott egy %s tipusú jármûvet. ID: %d",JatekosNev(playerid),VehicleNames[vInfo[veh][vModel] -400],vid);
			SetVehicleToRespawn(vid);
			SetVehicleVirtualWorld(vid,AP_VW);
		}
	}	
	else if(!strcmp(eparam,"kiszed",true))
	{
		new vid;
		if(sscanf(params,"{s[32]}d",vid)) return SCM(playerid, COL_MKEK, "Használat: /ap kiszed [JármûID]");
		else if(vid == INVALID_VEHICLE_ID) return SCM(playerid,COL_LRED,"Nincs ilyen jármû!");
		new veh = JarmuID(vid,playerid);
		if(vInfo[veh][vApben] == 0) return SCM(playerid,COL_LRED,"Ez a jármû nincs AP-ben.");
		else {
			vInfo[veh][vApben] = 0;
			vUpdate(veh, vuApben);
			AdminUzenet(COLOR_LIGHTRED,1,"%s kivett az AdminParkolóból egy %s tipusú jármûvet. ID: %d",JatekosNev(playerid),VehicleNames[vInfo[veh][vModel] -400],vid);
			SetVehicleToRespawn(vid);
			SetVehicleVirtualWorld(vid,0);
		}
	}
	return 1;
}
CMD:ujgarazs(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	new haz;
	if(sscanf(params,"d",haz)) return SCM(playerid,COL_MKEK,"Használat: /újgarázs [Házszám]");
	else if(!HazInfo[haz][hasznalatban]) return SCM(playerid, COL_LRED, "Nincs ilyen ház!");
	else if(HazInfo[haz][hGarazs] == 1) return SCM(playerid,COL_LRED,"Ez a ház már rendelkezik garázzsal!");
	else {
			HazInfo[haz][hGarazs] = 1;
			SCM(playerid,COL_MKEK,"Garázs letéve.");
	}
	return 1;
}

CMD:objectresi(playerid,params[])
{
	if(!Admin(playerid,FEJLESZTO_SZINT)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else {
	    SendClientMessageToAll(0xff0000AA,"=================");
	    SendClientMessageToAll(0xff0000AA,"Object restart!");
	    SendClientMessageToAll(0xff0000AA,"=================");
	    SendRconCommand("reloadfs objectek");
	    SendRconCommand("reloadfs objectek_frakcio");
	    Parancs_Alias();
	}
	return 1;
}
CMD:kleader(playerid,params[])
{
	if(IsScripter(playerid))
	{
	    new id;
	    if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /kleader [Játékos]");
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	    else {
			PlayerInfo[id][pKereskedo] = 3;
			SFM(playerid,COL_MKEK,"Kinevezted %s-t kereskedõ leaderré.",JatekosNev(id));
			SFM(id,COL_MKEK,"%s kinevezett kereskedõ leaderré.",JatekosNev(playerid));
	    }
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}
CMD:godmode(playerid,params[])
{
	if(Admin(playerid,FEJLESZTO_SZINT))
	{
		switch(PlayerInfo[playerid][pGodmode])
		{
		    case 0: {
		        PlayerInfo[playerid][pGodmode] = 1;
		        SCM(playerid,COL_MKEK,"Godmode bekapcsolva.");
		        SetPlayerHealth(playerid,150);
	    		SetPlayerArmour(playerid,150);
		    }
		    case 1: {
		        PlayerInfo[playerid][pGodmode] = 0;
		        SCM(playerid,COL_MKEK,"Godmode kikapcsolva.");
		    }
		}
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}
CMD:cmd(playerid,params[])
{
	if(Admin(playerid,FEJLESZTO_SZINT))
	{
	    new id;
	    new cmdt[144];
	    if(sscanf(params,"us[144]",id,cmdt)) return SCM(playerid,COL_MKEK,"Használat:{FFFFFF} /cmd [Játékos] [Parancs] || A parancsot a játékos küldi el, mintha õ írta volna.");
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs {FFFFFF}ilyen játékos.");
	    //else if(IsScripter(id)) return SCM(playerid,COL_LR
	    else {
	        CallRemoteFunction("OnPlayerCommandText","is",id,cmdt);
	        SCM(playerid,COL_VZOLD,"Elküldve ;)");
		}
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}

CMD:fonduty(playerid,params[])
{
	if(Admin(playerid,AC_SZINT))
	{
	    new id;
	    new cmdt[144]="/aduty";
	    if(sscanf(params,"us[144]",id)) return SCM(playerid,COL_MKEK,"Használat:{FFFFFF} /fonduty [AdminNév] || A parancs ondutyba állítja az adott admint!");
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs {FFFFFF}ilyen játékos.");
	    else if(!Admin(id,1)) return SCM(playerid,COL_LRED,"Õ nem adminisztrátor.");
	    //else if(IsScripter(id)) return SCM(playerid,COL_LR
	    else {
	        CallRemoteFunction("OnPlayerCommandText","is",id,cmdt);
	        SCM(playerid,COL_VZOLD,"Ondutyba állítva!");
		}
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}

CMD:text(playerid,params[])
{
	if(Admin(playerid,FEJLESZTO_SZINT))
	{
	    new id;
	    new cmdt[144];
	    if(sscanf(params,"us[144]",id,cmdt)) return SCM(playerid,COL_MKEK,"Használat:{FFFFFF} /text [Játékos] [Szöveg] || A szöveget a játékos küldi el, mintha õ írta volna.");
	    else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs {FFFFFF}ilyen játékos.");
	    //else if(IsScripter(id)) return SCM(playerid,COL_LR
	    else {
	        CallRemoteFunction("OnPlayerText","is",id,cmdt);
	        SCM(playerid,COL_VZOLD,"Elküldve ;)");
		}
	}
	else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}

CMD:crash(playerid,params[])
{
	new id;
	if(!Admin(playerid,FEJLESZTO_SZINT)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /crash [Játékos/ID]");
	else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	else {
	    new Float:x;
		new Float:y;
		new Float:z;
	//	new obj;
		GetPlayerPos(playerid,x,y,z);
		PlayerInfo[id][pCrashobj] = CreatePlayerObject(id,385,x,y,z,0,0,0);
		SCM(playerid,COL_MKEK,"Crasheltetve!");
	}
	return 1;
}
CMD:setint(playerid,params[])
{
	new szam;
    if(sscanf(params,"d",szam)) return SCM(playerid,COL_MKEK,"Használat: /setint [Érték]");
	else if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else {
		SetPlayerInterior(playerid,szam);
		SFM(playerid,COL_MKEK,"Új interiorod: %d", szam);
	}
	return 1;
}
CMD:setvw(playerid,params[])
{
	new szam;
    if(sscanf(params,"d",szam)) return SCM(playerid,COL_MKEK,"Használat: /setvw [Érték]");
	else if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else {
		SetPlayerVirtualWorld(playerid,szam);
		SFM(playerid,COL_MKEK,"Új VW-d: %d", szam);
	}
	return 1;
}
CMD:lstleader(playerid,params[])
{
    new id;
	if(!IsScripter(playerid)) return SCM(playerid,COL_LRED,"Csak Scripter rakhat be SKV leadert.");
	else if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /lstleader [Játékos/ID]");
	else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_MKEK,"Nincs ilyen játékos.");
	else {
//	    new str[144];
		PlayerInfo[id][pSKV] = 1;
		PlayerInfo[id][pSKVrang] = 6;
		SFM(playerid,COL_MKEK,"Kinevezted %s-t LST leaderré.",JatekosNev(id));
		SFM(id,COL_MKEK,"%s kinevezett LST leadernek.",JatekosNev(playerid));
	}
	return 1;
}
CMD:smleader(playerid,params[])
{
	new id;
	if(!IsScripter(playerid)) return SCM(playerid,COL_LRED,"Csak Scripter rakhat be S&M leadert.");
	else if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /smleader [Játékos/ID]");
	else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_MKEK,"Nincs ilyen játékos.");
	else {
//	    new str[144];
		PlayerInfo[id][pSM] = 1;
		PlayerInfo[id][pSMrang] = 3;
		SFM(playerid,COL_MKEK,"Kinevezted %s-t S&M Vezetõvé.",JatekosNev(id));
		SFM(id,COL_MKEK,"%s kinevezett S&M vezetõnek.",JatekosNev(playerid));
	}
	return 1;
}
CMD:mark(playerid,params[])
{
	if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else {
	    new Float:x, Float:y, Float:z;
	    GetPlayerPos(playerid,x,y,z);
	    PlayerInfo[playerid][pMarkx] = x;
	    PlayerInfo[playerid][pMarky] = y;
	    PlayerInfo[playerid][pMarkz] = z;
	    PlayerInfo[playerid][pMarkjelolve] = 1;
	    SCM(playerid,COL_MKEK,"Leraktad. A teleportáláshoz használd a /gotomark-ot.");
	}
	return 1;
}

CMD:gotomark(playerid,params[])
{
    if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else if(PlayerInfo[playerid][pMarkjelolve] == 0) return SCM(playerid,COL_LRED,"Nem tettél le magadnak /mark-ot.");
	else if(IsPlayerInAnyVehicle(playerid))
	{
	    new veh = GetPlayerVehicleID(playerid);
	    SetVehiclePos(veh,PlayerInfo[playerid][pMarkx],PlayerInfo[playerid][pMarky],PlayerInfo[playerid][pMarkz]);
	    SCM(playerid,COL_MKEK,"Teleportálva.");
	}
	else {
		SetPlayerPos(playerid,PlayerInfo[playerid][pMarkx],PlayerInfo[playerid][pMarky],PlayerInfo[playerid][pMarkz]);
		SCM(playerid,COL_MKEK,"Teleportálva.");
	}
	return 1;
}

CMD:wp(playerid,params[])
{
	if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	else if(PlayerInfo[playerid][pWPjelolve] == 0) return SCM(playerid,COL_LRED,"Nem jelöltél ki WayPointot a térképen.");
	else if(IsPlayerInAnyVehicle(playerid))
	{
	    new veh = GetPlayerVehicleID(playerid);
	    SetVehiclePos(veh,PlayerInfo[playerid][pWPX],PlayerInfo[playerid][pWPY],PlayerInfo[playerid][pWPZ]+5.00);
	    SCM(playerid,COL_MKEK,"Teleportálva.");
	}
	else {
		SetPlayerPos(playerid,PlayerInfo[playerid][pWPX],PlayerInfo[playerid][pWPY],PlayerInfo[playerid][pWPZ]+5.00);
		SCM(playerid,COL_MKEK,"Teleportálva.");
	}
	return 1;
}

CMD:enged(playerid, params[])
{
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /enged [ Goto ]");
		
	if(!strcmp(params, "goto", false))
	{
		if((PlayerInfo[playerid][pAEnged][0] = true - PlayerInfo[playerid][pAEnged][0]))
			SCM(playerid, COL_VZOLD, "Engedélyezted, hogy kisebb Admin is teleportálhasson hozzád!");
		else
			SCM(playerid, COL_MKEK, "Tiltottad, hogy kisebb Admin is teleportálhasson hozzád!");
	}
	return true;
}

//Tûz rendszer by Martin
CMD:tuz(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT) && PlayerInfo[playerid][pLeader] != FRAKCIO_LSFD)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(isnull(params))
	{
		//if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSFD && !Admin(playerid, SZUPER_SZINT))
			//SCM(playerid, COL_MKEK, "Használat: /tûz [ Indít ]");
		//if(Admin(playerid, SZUPER_SZINT))
		SCM(playerid, COL_MKEK, "Használat: /tûz [ Új / Töröl / Mutat / Go / Indít / Stop / Info ]");
		return true;
	}
	
	new bool:jog = true;
	//if(Admin(playerid, SZUPER_SZINT)) jog = true;
	
	new param[24], extra = NINCS;
	sscanf(params, "s[24]D(-1){}", param, extra);
	if(!strcmp(param, "indít", false) || !strcmp(param, "indit", false))
	{
		/*if((PlayerInfo[playerid][pLeader] == 0 && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSFD) && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Csak Leader és AlLeader indíthat akciót!");*/
	
		if(ServerInfo[0][sTuzIdo][2] > gettime() && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Kevesebb mint 10 perce volt tûz, nem kell ilyen sûrûn gyakorolni...");
	
		if(OnlineTagok(FRAKCIO_LSFD, true) < TUZ_MINTAG)
			return SCM(playerid, COL_LRED, "Nincs elegendõ szolgálatban lévõ tûzoltó az akció indításához!");
			
		if(ServerInfo[0][sTuzVan])
		{
			SCM(playerid, COL_LRED, "Jelenleg van valahol tûz, így nem indíthatsz akciót!");
			return true;
		}
		
		ServerInfo[0][sTuzIdo][2] = (gettime() + (10 * 60));
		SCM(playerid, COL_VZOLD, "Tûz akció indítása - Generálás");
		TuzGeneral( true );
		return true;
	}
	else if((!strcmp(param, "info", false) || !strcmp(param, "infó", false)) && jog)
		return SendFormatMessage(playerid, COLOR_WHITE, "Jelenleg %s"#COL_FEHER" tûz | Tûz idõ: "#COL_MKEK"%d"#COL_FEHER"mp | Következõ tûz várhatóan: "#COL_MKEK"%d"#COL_FEHER"mp", (ServerInfo[0][sTuzVan] ? (""#COL_VZOLD"van") : (""#COL_PIROS"nincs")), ServerInfo[0][sTuzIdo][0], ServerInfo[0][sTuzIdo][1]);
	else if(!strcmp(param, "stop", false) && jog)
	{
		if(!ServerInfo[0][sTuzVan])
			return SCM(playerid, COL_LRED, "Jelenleg nincs tûz akció elindítva!");
			
		TuzMuvelet( 4, playerid );
	}
	else if(!strcmp(param, "go", false) && jog)
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		if(extra == NINCS)
			return SCM(playerid, COL_MKEK, "Használat: /tûz go [TûzID]");
		if(extra < 0 || extra >= TUZ_MAX_POZ || TuzPoz[extra][tPoz][0] == 0.0)
			return SCM(playerid, COL_LRED, "Ez a Tûz ID nem létezik!");
			
		SetPos(playerid, PosExt(TuzPoz[extra][tPoz]));
		SCM(playerid, COL_MKEK, "Sikeresen teleportáltál a tûz pozíciójára! /tûz mutat");
	}
    else if((!strcmp(param, "uj", false) || !strcmp(param, "új", false)) && jog)
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		new id = NINCS, van = NINCS, k = 0;
		for(;++k < TUZ_MAX_POZ;)
		{
			if(GetDistanceToPointEx(playerid, PosExt( TuzPoz[k][tPoz] )) < 10) {
				van = k;
				break;
			}
			if(TuzPoz[k][tPoz][0] == 0.0) {
				id = k;
				break;
			}
		}

		if(van != NINCS)
			return SFM(playerid, COL_LRED, "A környéken már van lementve tûz pozíció! (ID: %d)", van);
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs több szabad tûz slot! Törölj néhányat mielõtt létrehoznál!");

		new Float:pos[3];
		GetPlayerPos(playerid, PosExt(pos));

		TuzPoz[id][tPoz][0] = pos[0];
		TuzPoz[id][tPoz][1] = pos[1];
		TuzPoz[id][tPoz][2] = pos[2];
		TuzMuvelet(2, id);//mentés

		SFM(playerid, COL_VZOLD, "Tûz pozíció létrehozva! ID: "#COL_MKEK"%d", id);

		TuzPoz[id][tMapID] = CreateDynamicMapIcon(PosExt(TuzPoz[id][tPoz]), 36, 0, NINCS, NINCS, NINCS, TUZ_MUTAT_TAV);
		Streamer_SetIntData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_STYLE, 3);//ez globál
		if(Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS))
			Streamer_RemoveArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, NINCS);

		if(PlayerInfo[playerid][pTuzMutat] && !Streamer_IsInArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, playerid) )
		{
			Streamer_AppendArrayData( STREAMER_TYPE_MAP_ICON, TuzPoz[id][tMapID], E_STREAMER_PLAYER_ID, playerid);
			Streamer_Update( playerid );
		}
		return true;
	}
	else if((!strcmp(param, "torol", false) || !strcmp(param, "töröl", false)) && jog)
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		new van = NINCS, k = 0;
		for(;++k < TUZ_MAX_POZ;) {
			if(TuzPoz[k][tPoz][0] != 0.0 && (GetDistanceToPointEx(playerid, PosExt( TuzPoz[k][tPoz] )) < 10)) {
				van = k;
				break;
			}
		}

		if(van == NINCS)
			return SCM(playerid, COL_LRED, "Ezen a helyen nincs lementett tûz pozíció!");

		TuzPoz[van][tPoz] = Float:{ 0.0, 0.0, 0.0 };

		DestroyDynamicMapIcon( TuzPoz[van][tMapID] );
		TuzPoz[van][tMapID] = 0;
		TuzMuvelet(3, van);
		SCM(playerid, COL_LRED, "Közeledben lévû tûz sikeresen törölve az adatbázisból!");

		if(PlayerInfo[playerid][pTuzMutat])
			Streamer_Update(playerid);
		return true;
	}
	else if(!strcmp(param, "mutat", false) && jog)
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		if(PlayerInfo[playerid][pTuzMutat]) {
		
			PlayerInfo[playerid][pTuzMutat] = false;
			
			new k = 0;
			for(;++k < TUZ_MAX_POZ;)
			{
				if(TuzPoz[k][tPoz][0] != 0.0 && TuzPoz[k][tMapID] && Streamer_IsInArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[k][tMapID], E_STREAMER_PLAYER_ID, playerid) )
					Streamer_RemoveArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[k][tMapID], E_STREAMER_PLAYER_ID, playerid);
			}

			Streamer_Update(playerid);
			SCM(playerid, COL_MKEK, "Tûz pozíciók elrejtve!");
			
		} else {
		
			PlayerInfo[playerid][pTuzMutat] = true;

			new k = 0;
			for(;++k < TUZ_MAX_POZ;)
			{
				if(TuzPoz[k][tPoz][0] != 0.0 && !Streamer_IsInArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[k][tMapID], E_STREAMER_PLAYER_ID, playerid) )
					Streamer_AppendArrayData(STREAMER_TYPE_MAP_ICON, TuzPoz[k][tMapID], E_STREAMER_PLAYER_ID, playerid);
			}

			Streamer_Update(playerid);
			SCM(playerid, COL_MKEK, "Tûz pozíciók megjelölve a radaron!");
		}
	}
	return true;
}

CMD:check(playerid, params[])
{
	new jatekos, param[24];
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "us[24]", jatekos, param))
		return SCM(playerid, COL_MKEK, "Használat: /check [Játékos] [ Zseb / Stats ] | Játékos adatainak megtekintése");
		
	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
	if(!strcmp(param, "stats", false))
	{
		SendFormatMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ %s adatai ]"#COL_FEHER" ===================", JatekosNev(jatekos, true));
		ShowStats(playerid, jatekos);
	}
	else if(!strcmp(param, "zseb", false))
	{
		SendFormatMessage(playerid, COLOR_WHITE, "================ "#COL_MKEK"[ %s zsebe ]"#COL_FEHER" ================", JatekosNev(jatekos, true));
		ShowZseb(playerid, jatekos);
	}
	return true;
}

CMD:damage(playerid, params[])
{
	if(!IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Hiba: Nem vagy jármûben!");
	
	new param[64];
	if(sscanf(params, "s[64]{}", param))
		return SendClientMessage(playerid, COLOR_WHITE, "Használat: /damage [panels / doors / lights / tires]");

	if(!strcmp(param, "panels"))
	{
		new FrontLeft, FrontRight, RearLeft, RearRight, WindShield, FrontBumper, RearBumper;
		if(sscanf(params, "{s[64]}ddddddd", FrontLeft, FrontRight, RearLeft, RearRight, WindShield, FrontBumper, RearBumper))
			return SendClientMessage(playerid, COLOR_WHITE, "Használat: /damage panels [FL / FR /RL / RR / WS / FR / RB]");
	
		UpdateVehiclePanelsDamageStatus(GetPlayerVehicleID(playerid), FrontLeft, FrontRight, RearLeft, RearRight, WindShield, FrontBumper, RearBumper);
		return true;
	}
	else if(!strcmp(param, "doors"))
	{
		new Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight;
		if(sscanf(params, "{s[64]}dddddd", Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight))
			return SendClientMessage(playerid, COLOR_WHITE, "Használat: /damage doors [Bonnet / Boot /FL / FR / RL / RR]");
			
		UpdateVehicleDoorsDamageStatus(GetPlayerVehicleID(playerid), Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight);
		return true;
	}
	else if(!strcmp(param, "lights"))
	{
		new First, Second, Third, Fourth;
		if(sscanf(params, "{s[64]}dddd", First, Second, Third, Fourth))
			return SendClientMessage(playerid, COLOR_WHITE, "Használat: /damage lights [First / Second / Third / Fourth]");
			
		UpdateVehicleLightsDamageStatus(GetPlayerVehicleID(playerid), First, Second, Third, Fourth);
		return true;
	}
	else if(!strcmp(param, "tires"))
	{
		new FrontLeft, FrontRight, RearLeft, RearRight;
		if(sscanf(params, "{s[64]}dddd", FrontLeft, FrontRight, RearLeft, RearRight))
			return SendClientMessage(playerid, COLOR_WHITE, "Használat: /damage tires [FL / FR / RL / RR]");
			
		UpdateVehicleTiresDamageStatus(GetPlayerVehicleID(playerid), FrontLeft, FrontRight, RearLeft, RearRight);
		return true;
	}
	return true;
}

CMD:damaged(playerid, params[])
{
	if(!IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, -1, "Nem vagy jármûben!");
	
	new panel, door, light, tire;
	
	/*new panels = encode_panels(3, 3, 3, 3, 3, 3, 3); // fix all panels //fell off - (3, 3, 3, 3, 3, 3, 3)
    new doors = encode_doors(4, 4, 4, 4, 0, 0); // fix all doors //fell off - (4, 4, 4, 4, 0, 0)
	
	UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, 0, 0);*/
	GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panel, door, light, tire);
	SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
	SendFormatMessage(playerid, -1, "Panel: %d| Ajtó: %d| Világítás: %d| Gumi: %d", panel, door, light, tire);
	return true;
}

CMD:asegit(playerid, params[])
{
	new jatekos;
	
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /asegit [Játékos]");
		
	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(!PlayerInfo[jatekos][pMeghalt])
		return SCM(playerid, COL_LRED, "Ez a játékos nincs a halálán!");
	
	PlayerInfo[jatekos][pMeghalt] = 0;
	SetPlayerDrunkLevel(jatekos, 0);
	
	GameTextForPlayer(jatekos, "~w~~n~~n~~n~~n~~n~~n~~n~~n~~n~Az Admin felsegitett!", 3000, 3);
	SFM(playerid, COL_MKEK, "Felsegitetted %s-t!", JatekosNev(jatekos));
	
	if(!IsPlayerInAnyVehicle(jatekos))
		ClearAnimations(jatekos);
	KillTimer(Korhazbakerules(jatekos));
	KillTimer(Hasznalhatja(jatekos));
	SetHealth(jatekos, MAX_HP);
	PlayerInfo[jatekos][pMeghalt] = 0;
	SetPlayerWeather(jatekos,0);
	UnFreeze(jatekos);
	DestroyDynamic3DTextLabel(PlayerInfo[jatekos][pHalalText]);
	PlayerInfo[jatekos][pHalalText] = INVALID_3D_TEXT_ID;
	PlayerInfo[jatekos][pNewSpawn] = true;
	SpawnPlayer(jatekos);
	if(/*IsScripter(playerid) && (playerid != jatekos) || */!IsScripter(playerid))
		AdminUzenet(COLOR_LIGHTRED, 1, "%s felsegítette %s-t!", JatekosNev(playerid), JatekosNev(jatekos));
	
	return true;
}
	
CMD:statisztika(playerid, params[])
{
	if(!Admin(playerid, 4))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /(stat)isztika [ Szerver / Streamer / MySQL ]");
		
	if(!strcmp(params, "szerver") || !strcmp(params, "server"))
	{
		new i = -1, hdb, kdb, tdb, adb, fdb, tzdb, dropdb, hulladb;
		for(;++i < MAX_HOUSE;)
		{
			if(HazInfo[i][hasznalatban])
				hdb++;
		}
		
		i = -1;
		for(;++i < MAX_KAPU;)
		{
			if(Kapu[i][kVan])
				kdb++;
		}
		
		i = -1;
		for(;++i < MAX_TERULET;)
		{
			if(tInfo[i][tVan])
				tdb++;
		}
		
		i = 0;
		for(;++i < MAX_AJTO;)
		{
			if(AjtoInfo[i][ahasznalva])
				adb++;
		}
		
		i = -1;
		for(;++i < MAX_FRAKCIO;)
		{
			if(FInfo[i][fVan])
				fdb++;
		}
		i = 0;
		for(;++i < TUZ_MAX_POZ;)
		{
			if(TuzPoz[i][tPoz][0] != 0.0)
				tzdb++;
		}
		
		i = NINCS;
		for(;++i < MAX_DROP;)
		{
			if(dInfo[i][dHasznalva])
				dropdb++;
		}
		
		i = NINCS;
		for(;++i < MAX_HULLA;)
		{
			if(HullaInfo[i][Hvan])
				hulladb++;
		}
		
		SendClientMessage(playerid, COLOR_WHITE, "================= [ "#COL_MKEK"Szerver statisztika"#COL_FEHER" ] =================");
		SendClientMessage(playerid, COLOR_YELLOW,"Betöltött objektum szám / definiált limit");
		SendFormatMessage(playerid, COLOR_WHITE, "Házak: %d/%d | Jármûvek: %d/%d | Kapuk: %d/%d", hdb, MAX_HOUSE, Iter_Count(Jarmuvek), MAX_VEHICLES, kdb, MAX_KAPU);
		SendFormatMessage(playerid, COLOR_WHITE, "Teruletek: %d/%d | Ajtók: %d/%d | Frakciók: %d/%d", tdb, MAX_TERULET, adb, MAX_AJTO, fdb, MAX_FRAKCIO);
		SendFormatMessage(playerid, COLOR_WHITE, "Tûz pozíciók: %d/%d | LiteSQL adatbázis: %s", tzdb, TUZ_MAX_POZ, (fexist(LSQL_ADATBAZIS) ? (""#COL_VZOLD"csatlakoztatva") : (""#COL_PIROS"lecsatolva")));
		SendFormatMessage(playerid, COLOR_WHITE, "Eldobott tárgyak: %d/%d | Hullák: %d/%d | NPC: %d/%d", dropdb, MAX_DROP, hulladb, MAX_HULLA, Iter_Count(Bot), MAX_PLAYERS);
	}
	else if(!strcmp(params, "streamer"))
	{
		SendClientMessage(playerid, COLOR_WHITE, "================= [ "#COL_MKEK"Streamer statisztika"#COL_FEHER" ] =================");
		SendClientMessage(playerid, COLOR_MKEK, "Felsõ korlát / Létrehozott / Számodra látható");
		SendFormatMessage(playerid, COLOR_YELLOW, "[Object] %d | %d | %d", 	Streamer_GetUpperBound(STREAMER_TYPE_OBJECT), 		 CountDynamicObjects(), 	Streamer_CountVisibleItems(playerid, STREAMER_TYPE_OBJECT));
		SendFormatMessage(playerid, COLOR_YELLOW, "[Pickup] %d | %d | %d", 	Streamer_GetUpperBound(STREAMER_TYPE_PICKUP), 		 CountDynamicPickups(), 	Streamer_CountVisibleItems(playerid, STREAMER_TYPE_PICKUP));
		SendFormatMessage(playerid, COLOR_YELLOW, "[CP] %d | %d | %d", 		Streamer_GetUpperBound(STREAMER_TYPE_CP), 			 CountDynamicCPs(), 		Streamer_CountVisibleItems(playerid, STREAMER_TYPE_CP));
		SendFormatMessage(playerid, COLOR_YELLOW, "[RaceCP] %d | %d | %d", 	Streamer_GetUpperBound(STREAMER_TYPE_RACE_CP), 		 CountDynamicRaceCPs(), 	Streamer_CountVisibleItems(playerid, STREAMER_TYPE_RACE_CP));
		SendFormatMessage(playerid, COLOR_YELLOW, "[MapIcon] %d | %d | %d", Streamer_GetUpperBound(STREAMER_TYPE_MAP_ICON), 	 CountDynamicMapIcons(), 	Streamer_CountVisibleItems(playerid, STREAMER_TYPE_MAP_ICON));
		SendFormatMessage(playerid, COLOR_YELLOW, "[3DText] %d | %d | %d", 	Streamer_GetUpperBound(STREAMER_TYPE_3D_TEXT_LABEL), CountDynamic3DTextLabels(),Streamer_CountVisibleItems(playerid, STREAMER_TYPE_3D_TEXT_LABEL));
		SendFormatMessage(playerid, COLOR_YELLOW, "[Area] %d | %d | %d", 	Streamer_GetUpperBound(STREAMER_TYPE_AREA), 		 CountDynamicAreas(), 		Streamer_CountVisibleItems(playerid, STREAMER_TYPE_AREA));
	}
	else if(!strcmp(params, "mysql"))
	{
		new str[256];
		mysql_stat(str);
		SendClientMessage(playerid, COLOR_WHITE, "================= [ "#COL_MKEK"MySQL statisztika"#COL_FEHER" ] =================");
		SendClientMessage(playerid, COLOR_WHITE, str);
	}
	return true;
}

CMD:freeze(playerid, params[])
{
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /freeze [Játékos]");
	if(!IsPlayerConnected(jatekos))
		return SCM(playerid, COL_MKEK, "Nincs ilyen játékos!");
	
	TogglePlayerControllable(jatekos, false);
	SendClientMessage(playerid, COLOR_MKEK, "Játékos sikeresen freezelve!");
	AdminUzenet(COLOR_LIGHTRED,1, "%s lefagyasztotta %s-t!", JatekosNev(playerid), JatekosNev(jatekos));
	
	return true;
}

CMD:ajailosok(playerid, params[])
{
	#pragma unused params
	
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	SendClientMessage(playerid, COLOR_WHITE, "============= [ "#COL_MKEK"AdminJail"#COL_FEHER" ] =============");
	SendClientMessage(playerid, COLOR_MKEK, "Név / Bezárta / Idõ / Oka");
	
	foreach(Player, i)
	{
		if(!Belepve(i) || Bortonben(i) != 3) continue;
		SendFormatMessage(playerid, COLOR_YELLOW2, "[%d]%s - %s - %dmp - %s", i, JatekosNev(i), PlayerInfo[i][pJailAdta], PlayerInfo[i][pJailIdo], PlayerInfo[i][pJailOk]);
	}
	return true;
}

CMD:korhazban(playerid, params[])
{
	#pragma unused params
	
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	SendClientMessage(playerid, COLOR_WHITE, "============= [ "#COL_MKEK"Kórházban"#COL_FEHER" ] =============");
	SendClientMessage(playerid, COLOR_MKEK, "Név / Bezárta / Idõ / Oka");
	
	foreach(Player, i)
	{
		if(!Belepve(i) || Bortonben(i) != 1) continue;
		SendFormatMessage(playerid, COLOR_YELLOW2, "[%d]%s - %s - %dmp - %s", i, JatekosNev(i), PlayerInfo[i][pJailAdta], PlayerInfo[i][pJailIdo], PlayerInfo[i][pJailOk]);
	}
	return true;
}

CMD:bid(playerid, params[])
{
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /bid [Azonosító] | 4 jegyû random azonosító");
		
	new jatekos = NINCS;
	foreach(Player, i)
	{
		if(!Belepve(i)) continue;
		if(PlayerInfo[i][pBID] == strval(params))
		{
			jatekos = i;
			break;
		}
	}
	
	if(jatekos == NINCS)
		return SCM(playerid, COL_LRED, "Nincs ilyen azonosítójú játékos!");
		
	SFM(playerid, COL_VZOLD, "Játékos: [%d]%s - uID: %d", PlayerInfo[jatekos][pBID], JatekosNev(jatekos, false, true), PlayerInfo[jatekos][pID]);
	return true;
}

CMD:cc(playerid, params[])
{
	#pragma unused params
	
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(PlayerInfo[playerid][pMegerosites] != playerid)
	{
		SCM(playerid, COL_MKEK, "Biztos, hogy meg akarod tisztítani a ChatBox-ot? Ha igen, írd be újra!");
		PlayerInfo[playerid][pMegerosites] = playerid;
		return true;
	}
	
	PlayerInfo[playerid][pMegerosites] = NINCS;
	
	new i = NINCS;
	for(;++i < 100;)
		SendClientMessageToAll(COLOR_WHITE, "");
	
	AdminUzenet(COLOR_LIGHTRED, 1, "%s megtisztította a ChatBox-ot!", JatekosNev(playerid));
	return true;
}

CMD:jail(playerid, params[])
{
	new jatekos, mennyi, hova[32], indok[48];
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(sscanf(params, "us[32]ds[48]", jatekos, hova, mennyi, indok))
		return SCM(playerid, COL_MKEK, "Használat: /jail [Játékos] [ Admin / Kórház / PD / Null(Kivétel) / Katonasag / FBI] [Idõ (Perc)] [Oka]");
	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(mennyi < 0 || mennyi > 300)
		return SCM(playerid, COL_LRED, "Az idõ minimum 1 és maximum 300 perc lehet! | 0 = kivétel");
	
	mennyi = (mennyi * 60);
	new borton = BortonID(hova);
	if(borton == NINCS)
		return SCM(playerid, COL_LRED, "Nincs ilyen börtön! Lehetõségek: Admin / Kórház / PD / Null(Kivétel) / Katonasag / FBI");
		
	if(Karakter_Ellenorzes(indok))
		return SCM(playerid, COL_LRED, "Az indok nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");
	
	if(borton == 3)
	{
		if(mennyi < 900)
		{
			return SCM(playerid,COL_LRED,"Admin Jail kiosztás esetén minimum idõ 15 perc!");
		}
	}
	
	if((PlayerInfo[jatekos][pjail] != 0) && (PlayerInfo[jatekos][pJailIdo] > 0))
	{
		if((PlayerInfo[playerid][pMegerosites] == NINCS) || (PlayerInfo[playerid][pMegerosites] != jatekos))
		{
			new ido = PlayerInfo[jatekos][pJailIdo];
			ido = floatround(ido / 60);
			SendFormatMessage(playerid, COLOR_GREEN, "[Hiba]: Ez a játékos jelenleg %s van még %d percig, biztos, hogy végrehajtod?", BortonNev(Bortonben(jatekos), true), ido);
			SendClientMessage(playerid, COLOR_WHITE, "[Info]: Ha igen, írd be mégegyszer a parancsot.");
			PlayerInfo[playerid][pMegerosites] = jatekos;
			return true;
		}
		
		PlayerInfo[playerid][pMegerosites] = NINCS;
	}
	
	if(borton == 0)
	{
	    if(!egyezik(JatekosNev(playerid),PlayerInfo[jatekos][pJailAdta]) && !Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Nem te raktad be az illetõt ezért nem tudod kivenni!");
			return true;
		}
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s nullázta %s büntetését! | Oka: %s", JatekosNev(playerid), JatekosNev(jatekos), indok);
		SFM(jatekos, COL_MKEK, "Admin %s nullázta a büntetésed | Oka: %s", JatekosNev(playerid), indok);
		Borton(jatekos, 0);
		return true;
	}
	
	BortonInfo(jatekos, JatekosNev(playerid), indok);
	
	PlayerInfo[jatekos][pjail] = borton;
	PlayerInfo[jatekos][pJailIdo] = mennyi;
	PlayerInfo[jatekos][phaz] = -1;
	mennyi = (mennyi / 60);
	
	if(borton == 3)
	{
		nformat(str, 128, ""#PREFIX": Admin %s AdminJailt adott neki: %s | Oka: %s", JatekosNev(playerid), JatekosNev(jatekos), indok);
		SendClientMessageToAll(COLOR_LIGHTRED, str);
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s %d perc AdminJailt adott neki: %s! | Oka: %s", JatekosNev(playerid), mennyi, JatekosNev(jatekos), indok);
	
	} else {
		
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s %d percre bezárta ide: %s õt: %s-t | Oka: %s", JatekosNev(playerid), mennyi, BortonNev(borton), JatekosNev(jatekos), indok);
		SFM(jatekos, COL_MKEK, "Admin %s bezárt téged ide: %s | %d percre", JatekosNev(playerid), BortonNev(borton), mennyi);
	}
	new date[3],time[3];
	getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'AJail')", JatekosNev(playerid), PosExt(date), time[0], time[1]);
	
	Borton(jatekos, borton);
	return true;
}

CMD:unfreeze(playerid, params[])
{
	if(!Admin(playerid, 1) && !IsAS(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /(u)n(f)reeze [Játékos] | Játékos kiolvasztása");
	if(!IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	
	TogglePlayerControllable(jatekos, true);
	SCM(playerid, COL_MKEK, "Játékos kiolvasztva!");
	
	AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s kiolvasztotta %s-t!", JatekosNev(playerid), JatekosNev(jatekos));
	return true;
}



CMD:allonduty(playerid,params[])
{
	if(!IsScripter(playerid))
		return SCM(playerid, COL_LRED, "Csak tulaj!");
	
	foreach(Player, i)
	{
		if(PlayerInfo[i][pAduty] == false && Admin(playerid, 1))
		{
			nformat(form, 128, "(( Adminszolgálat ))", playerid);
			PlayerInfo[i][pDutyText] = CreateDynamic3DTextLabel(form, COLOR_RED, 0.0, 0.0, 0.0, 40.0, playerid, INVALID_VEHICLE_ID, 0);
			PlayerInfo[i][pAduty] = true;
			SetPlayerColor(i, 0xffaa00AA);
			SendFormatMessageToAll(0x09ff00AA, "<< {ffea00}%s %s adminszolgálatba lépett, így felkeresheted õt (/pm %d) {09ff00}>>", AdminRang(i), JatekosNev(i, true), i);
		}
	}
	return true;
}
CMD:aduty(playerid, params[])
{
	#pragma unused params
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	//new str[32];
	
	/*SendClientMessageToAll(COLOR_WHITE, "======================= [ "#COL_VZOLD"Admin szolgálat"#COL_FEHER" ] ========================");*/
	if((PlayerInfo[playerid][pAduty] = true - PlayerInfo[playerid][pAduty]))
	{
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Adutybe')", JatekosNev(playerid), PosExt(date), time[0], time[1]);
		SendFormatMessageToAll(0x09ff00AA, "<< {ffea00}%s %s adminszolgálatba lépett, így felkeresheted õt (/pm %d) {09ff00}>>", AdminRang(playerid), JatekosNev(playerid, true), playerid);
		
		/*if(PlayerInfo[playerid][padmin] < FOADMIN_SZINT)
			format(str, sizeof(str), "ADMINSZOLGÁLAT");
		else
			format(str, sizeof(str), "FÕADMINSZOLGÁLAT");*/
		
		nformat(form, 128, "(( Adminszolgálat ))", playerid);
		PlayerInfo[playerid][pDutyText] = CreateDynamic3DTextLabel(form, COLOR_RED, 0.0, 0.0, 0.0, 40.0, playerid, INVALID_VEHICLE_ID, 0);
		//CreateDynamic3DTextLabel(const text[], color, Float:x, Float:y, Float:z, Float:drawdistance, attachedplayer = INVALID_PLAYER_ID, attachedvehicle = INVALID_VEHICLE_ID, testlos = 0, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 100.0);
		//AttachDynamic3DTextLabelToPlayer(playerid,PlayerInfo[playerid][pDutyText],0.0,0.0,0.5);
		SetPlayerColor(playerid, 0xffaa00AA);
		NevMutatas(playerid, false);
		PlayerInfo[playerid][pAduty] = true;
		
	} else {
	
		SendFormatMessageToAll(0x09ff00AA, "<< {ffea00}%s %s kilépett a szolgálatból. | Ha kérdésed van /report {09ff00}>>", AdminRang(playerid), JatekosNev(playerid, true));
		SetPlayerColor(playerid, COLOR_INVISIBLE);
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pDutyText]);
		PlayerInfo[playerid][pDutyText] = INVALID_3D_TEXT_ID;
		NevMutatas(playerid, true);//nevek miatt
		PlayerInfo[playerid][pAduty] = false;
		PlayerInfo[playerid][pAdminAlnevbe] = false;
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Adutyki')", JatekosNev(playerid), PosExt(date), time[0], time[1]);
	}
	
	/*if(Admin(playerid, FOADMIN_SZINT))
		SendClientMessageToAll(COLOR_WHITE, "================================================================");
	else
		SendClientMessageToAll(COLOR_WHITE, "===========================================================");*/
	
	return true;
}

CMD:asduty(playerid, params[])
{
	#pragma unused params
	if(!IsAS(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	//new str[32];
	
	/*SendClientMessageToAll(COLOR_WHITE, "======================= [ "#COL_VZOLD"Admin szolgálat"#COL_FEHER" ] ========================");*/
	if((PlayerInfo[playerid][pASduty] = true - PlayerInfo[playerid][pASduty]))
	{
		
		SendFormatMessageToAll(COLOR_YELLOW, "<< %s Adminsegéd szolgálatba lépett, így írhatsz neki /report join 0 I Tilos megölni! >>",JatekosNev(playerid, true), playerid);
		
		
		
		nformat(form, 128, "(( AdminSegéd szolgálat ))", playerid);
		PlayerInfo[playerid][pASDutyText] = CreateDynamic3DTextLabel(form, COLOR_YELLOW, 0.0, 0.0, 0.0, 40.0, playerid, INVALID_VEHICLE_ID, 0);
        SetPlayerColor(playerid, COLOR_YELLOW);
		NevMutatas(playerid, false);
		PlayerInfo[playerid][pASduty] = true;
		
	} else {
	
		SendFormatMessageToAll(COLOR_YELLOW, "<<%s kilépett az Adminsegéd szolgálatból!>>", AdminRang(playerid), JatekosNev(playerid, true));
		SetPlayerColor(playerid, COLOR_INVISIBLE);
		DestroyDynamic3DTextLabel(PlayerInfo[playerid][pASDutyText]);
		PlayerInfo[playerid][pASDutyText] = INVALID_3D_TEXT_ID;
		NevMutatas(playerid, true);//nevek miatt
		PlayerInfo[playerid][pASduty] = false;
	
		
	}
	
	return true;
}

CMD:nevvaltas(playerid, params[])
{
	if(!Admin(playerid, FSEGED_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new nev[MAX_PLAYER_NAME], jatekos, form[128];
	if(sscanf(params, "us[24]", jatekos, nev))
		return SCM(playerid, COL_MKEK, "Használat: /nevvaltas [Játékos] [JátékosNév]");
	if(!HelyesNevString(nev))
		return SCM(playerid, COL_LRED, "Helytelen név! Pl: Nagy_Bela");
	if((strlen(nev) > 24) || (strlen(nev) < 6)) {
		SCM(playerid, COL_LRED, "Helytelen név! Minimum 6 és maximum 24 karakter lehet!");
		return true;
	}
	
	IllegalCharacter(nev);
	format(form, sizeof(form), "SELECT nev FROM `"#MYSQL_JATEKOS_TABLA"` WHERE nev='%s'", nev);
	mysql_tquery(sql_ID, form, "GlobalNevValtas", "sdd", nev, jatekos, playerid);
	return true;
}

CMD:unban(playerid, params[])
{
	if(!Admin(playerid, 5))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	new cim[24];
	if(sscanf(params, "s[24]", cim))
		return SCM(playerid, COL_MKEK, "Használat: /unban [ Játékos név / IP cím ]");
	
	if((strlen(cim) > 24) || (strlen(cim) < 6))
		return SCM(playerid, COL_LRED, "Helytelen hossz! Minimum 6 és maximum 24 karakter lehet!");
	
	IllegalCharacter(cim);
	nformat(form, 128, "SELECT Cim, Banolta, Oka FROM `"#MYSQL_BAN_TABLA"` WHERE Cim='%s'", cim);
	mysql_tquery(sql_ID, form, "BanTorles", "d", playerid);
	return true;
}

CMD:debug(playerid, params[])
{
	if(!IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(isnull(params))
	{
		SCM(playerid, COL_MKEK, "Használat: /debug [update / whitelist / jarmû / aka / pb / pbspawn / arg / adatupdate / maxv / neon / sscanf / thaszon / UCP_Check]");
		SCM(playerid, COL_MKEK, "Használat: /debug [StatMentes]");
		return true;
	}

	new param[24], jatekos, extra;
	sscanf(params, "s[24]{}", param);
	
	if(!strcmp(param, "StatMentes"))
	{
		StatMentes(playerid);
		SCM(playerid,COL_LRED,"Kész!");
		return 1;
	}
	if(!strcmp(param, "UCP_Check"))
	{
		UCP_Check(1);
		SCM(playerid,COL_MKEK,"Lefuttatva!");
		return 1;
	}
	if(!strcmp(param, "Time"))
	{
		SendFormatMessage(playerid, COLOR_WHITE, "UnixTime = %d", UnixTime);
		return 1;
	}

	if(!strcmp(param, "whitelist"))
	{
		if(ServerInfo[0][sWhiteList])
		{
			ServerInfo[0][sWhiteList] = false;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: WhiteList kikapcsolva!");
		} else {
			ServerInfo[0][sWhiteList] = true;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: WhiteList bekapcsolva!");
		}
	}
	else if(!strcmp(param, "thaszon"))
	{
		TeruletHaszon( true );
		SCM(playerid, COL_VZOLD, "Mûvelet futtatva!");
	}
/*	else if(!strcmp(param, "hirdetes"))
	{
		RandomHirdetes();
		SCM(playerid, COL_VZOLD, "Hirdetes futtatva!");
	}*/
	else if(!strcmp(param, "maxv"))
	{
		foreach(Jarmuvek, db)
			SFM(playerid, COL_MKEK, "ID: %d", db);
	}
	else if(!strcmp(param, "bankrob"))
	{
		BankBotok[bankAnim] = false;
		SCM(playerid, COL_MKEK, "Bankrob adatai nullázva!");
	}
	else if(!strcmp(param, "pbspawn"))
	{
		if(ServerInfo[0][sKellPB])
		{
			ServerInfo[0][sKellPB] = false;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: PB-Spawn kikapcsolva!");
		} else {
			ServerInfo[0][sKellPB] = true;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: PB-Spawn bekapcsolva!");
		}
	}
	else if(!strcmp(param, "neon"))
	{
		new orok;
		if(sscanf(params, "{s[24]}dd", extra, orok))
			return SCM(playerid, COL_MKEK, "Használat: /debug neon [0 = kikapcsol | 1 - 6] [Örök? (Igen = 1 / Nem = 0)]");
			
		if(extra > 6 || extra < 0)
			return SCM(playerid, COL_LRED, "0 = kikapcsol | 1 - 6 neon");
			
		if(orok != 0 && extra != 1)
			return SCM(playerid, COL_LRED, "Örök neon? 1 = igen | 0 = nem");
		
		if(!IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COL_LRED, "Nem ülsz kocsiban!");
		
		new vid = JarmuID(GetPlayerVehicleID(playerid), playerid);
		switch(vInfo[vid][vModel])
		{
			case 445,602,429,496,504,401,518,402,541,527,415,542,589,507,562,585,419,526,466,492,474,494,502,503,411,546,559,551,516,467,603,426,436,547,405,580,560,550,506,549,451,558,540,491,477,529:
				SetVehicleNeon(vid, extra);
			
			default:
				return SCM(playerid, COL_LRED, "Erre a jármû nem rakhatsz Neont!");
		}
		
		if(orok)
		{
			vInfo[ vid ][vNeon][0] = extra;
			vUpdate(vid, vuNeon);
		}
		
		SCM(playerid, COL_VZOLD, "Neon mûvelet futtatva!");
		Streamer_Update(playerid);
	}
	else if(!strcmp(param, "sscanf"))
	{
		new str[64];
		if(sscanf(params, "{s[24]}uu", extra, str))
			return SCM(playerid, COL_MKEK, "Használat: /debug sscanf [játékos] [játékos]");
			
		SFM(playerid, COL_VZOLD, "%d | %s", extra, str);
	}
	else if(!strcmp(param, "pb"))
	{
		//new melyik, mennyi;
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /debug pb [Játékos] | Mérkõzés indítása");
		
		if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][pPaintBall][0] == 0)
		{
			SCM(playerid, COL_VZOLD, "[DEBUG]: Mûvelet végrehajtva - PaintBall start");
			PaintBallMuvelet(jatekos, 1);
			SpawnPlayer(jatekos);
			
		} else {
		
			SCM(playerid, COL_VZOLD, "[DEBUG]: Mûvelet végrehajtva - PaintBall stop");
			PlayerInfo[jatekos][pPaintBall][0] = 0;
			SpawnPlayer(jatekos);
		}
		
		return true;
	}
	else if(!strcmp(param, "aka"))
	{
		if(ServerInfo[0][sAka])
		{
			ServerInfo[0][sAka] = false;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: Aka System kikapcsolva!");
		} else {
			ServerInfo[0][sAka] = true;
			SendClientMessage(playerid, COLOR_MKEK, "[Szerver]: Aka System bekapcsolva!");
		}
	}
	else if(!strcmp(param, "szintlepes"))
	{
		new melyik, mennyi;
		if(sscanf(params, "{s[24]}dd", melyik, mennyi))
			return SCM(playerid, COL_MKEK, "Használat: /debug szintlepes [1 - szintlepesperc, 2 - szintlepesora, 3 - szintlepeshez] [0-60]");
		
		if(mennyi > 60 || mennyi < 0)
			return SCM(playerid, COL_LRED, "Hiba: A mennyiségnek 0 és 60 között kell lennie!");
		
		switch(melyik)
		{
			case 1: PlayerInfo[playerid][pszintlepesperc] = mennyi;
			case 2: PlayerInfo[playerid][pszintlepesora] = mennyi;
			case 3: PlayerInfo[playerid][pszintlepeskell] = mennyi;
		}
		SCM(playerid, COL_MKEK, "Szintlépés futtatva!");
		return true;
	}
	else if(!strcmp(param, "update"))
	{
		if(sscanf(params, "{s[24]}ud", jatekos, extra))
			return SCM(playerid, COL_MKEK, "Használat: /debug update [Játékos] [Mit(0/1/2)] | 0 = Minden, 1 = Ház, 2 = Jármû");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "[Info]: Nincs ilyen játékos!");
		
		if(extra != 0 && extra != 1 && extra != 2)
			return SCM(playerid, COL_MKEK, "0 = Minden, 1 = Ház, 2 = Jármû");
			
		Adat_Update( jatekos, extra );
		SCM(playerid, COL_MKEK, "Update futtatva!");
	}
	else if(!strcmp(param, "jarmu") || !strcmp(param, "jármû"))
	{
		if(sscanf(params, "{s[24]}d", extra))
			return SCM(playerid, COL_MKEK, "Használat: /debug jarmû [JármûID] | Jármû használati idejének nullázása");
			
		vInfo[ JarmuID(extra, playerid) ][vLastActive] = 0;
		SFM(playerid, COL_MKEK, "JármûID: %d használati ideje nullázva!", extra);
	}
	else if(!strcmp(param, "arg"))
	{
		if(sscanf(params, "{s[24]}d", extra))
			return SCM(playerid, COL_MKEK, "Használat: /debug arg [JármûID(SQL)] | Jármû update argumentum teszt");
			
		vUpdate(extra, vuTulaj, vuHiba);
		SCM(playerid, COL_MKEK, "Funkció futtatva!");
	}
	//vUpdate(id, ...)
	else if(!strcmp(param, "prémium") || !strcmp(param, "premium"))
	{
		if(sscanf(params, "{s[24]}ud", jatekos, extra))
			return SCM(playerid, COL_MKEK, "Használat: /debug prémium [Játékos] [Csomag (400 / 800 / 1600 / 4000 / 0 = Nulláz)] | Beállítja, nem hozzáadja!");
		
		switch(extra)
		{
			case 0:
			{
				PlayerInfo[jatekos][pPremiumPont] = 0;
				PlayerInfo[jatekos][pPremiumIdo] = 0;
			}
			case 400:
			{
				PlayerInfo[jatekos][pPremiumPont] = 400;
				PlayerInfo[jatekos][pPremiumIdo] = (gettime() + ((7 * 24) * 3600));//napok * órák * 1h másodpercben
			}
			case 800:
			{
				PlayerInfo[jatekos][pPremiumPont] = 1000;
				PlayerInfo[jatekos][pPremiumIdo] = (gettime() + ((14 * 24) * 3600));//napok * órák * 1h másodpercben
			}
			case 1600:
			{
				PlayerInfo[jatekos][pPremiumPont] = 2000;
				PlayerInfo[jatekos][pPremiumIdo] = (gettime() + ((28 * 24) * 3600));//napok * órák * 1h másodpercben
			}
			case 4000:
			{
				PlayerInfo[jatekos][pPremiumPont] = 6000;
				PlayerInfo[jatekos][pPremiumIdo] = (gettime() + ((42 * 24) * 3600));//napok * órák * 1h másodpercben
			}
			default: return SCM(playerid, COL_LRED, "Hibás csomag! 400 / 800 / 1600 / 4000 lehet! 0 = Nullázás");
		}
		
		new query[128];
		mysql_tquery(sql_ID, (format(query, 128, "UPDATE `"#MYSQL_JATEKOS_TABLA"` SET pPremiumIdo = '%d', pPremiumCsomag = '%d' WHERE id = '%d'", PlayerInfo[jatekos][pPremiumIdo], PlayerInfo[jatekos][pPremiumCsomag], PlayerInfo[jatekos][pID]), query), "", "");
		PlayerInfo[jatekos][pPremiumCsomag] = extra;
		SFM(playerid, COL_VZOLD, "Csomag: "#COL_MKEK"%d"#COL_FEHER" beállítva neki: "#COL_MKEK"%s", extra, JatekosNev(jatekos));
	}
	
	return true;
}

CMD:atankol(playerid, params[])
{
	if(!Admin(playerid, 5))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new liter, id = NINCS, sid;
	if(sscanf(params, "dD(-1)", liter, id))
		return SCM(playerid, COL_MKEK, "Használat: /atankol [Liter] [JármûID]");
	
	
	if(id != NINCS) sid = JarmuID( id, playerid );
	else sid = JarmuID(GetPlayerVehicleID(playerid), playerid);
	
	if(!sid)
		return SCM(playerid, COL_LRED, "Nincs ilyen jármû!");
	
	if(liter > MAX_Benzin[ vInfo[ sid ][vModel] - 400 ] || liter < 0)
		return SCM(playerid, COL_LRED, "Ebbe a jármûbe nem fér ennyi üzemanyag!");
	
	AdminUzenet(COLOR_LIGHTRED, 1, "%s átállította egy %s típusú jármû üzemanyag szintjét! Régi: %.1f Új: %.1f | JármûID: %d[%d]", JatekosNev(playerid), VehicleNames[ vInfo[ sid ][vModel] - 400 ], vInfo[ sid ][vUzemanyag], float(liter), vInfo[ sid ][vID], sid);
	vInfo[ sid ][vUzemanyag] = float(liter);
	return true;
}

CMD:speedboost(pid, params[])
{
	if(!IsScripter(pid) && !Admin(pid, TULAJ_SZINT))
		return false;
		
	new id;
	if(sscanf(params, "u", id))
		return SCM(pid, COL_MKEK, "Használat: /speedboost [Játékos] | Okosan!");
	
	if(id == INVALID_PLAYER_ID || IsPlayerNPC(id) || !IsPlayerConnected(id))
		return SCM(pid, COL_MKEK, "Nincs ilyen játékos!");
		
	if(PlayerInfo[id][pSpeedBoots])
	{
		SFM(pid, COL_MKEK, "Speedboost kikapcsolva rajta: "#COL_MKEK"%s", JatekosNev(id));
		PlayerInfo[id][pSpeedBoots] = false;
		
	} else {
	
		SFM(pid, COL_MKEK, "Speedboost bekapcsolva rajta: "#COL_MKEK"%s", JatekosNev(id));
		PlayerInfo[id][pSpeedBoots] = true;
	}
	return true;
}
CMD:aka(pid, params[])
{
	if(!Admin(pid, 1))
		return SendClientMessage(pid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new id;
	if(sscanf(params, "u", id))
		return SCM(pid, COL_MKEK, "Használat: /aka [Játékos] | Játékos csatlakozásainak lekérdezése.");
	
	if(id == INVALID_PLAYER_ID)
		return SCM(pid, COL_MKEK, "Nincs ilyen játékos!");
	
	nformat(sql, 128, "SELECT Nev FROM `"#MYSQL_AKA_SYSTEM"` WHERE IP='%s'", JatekosIP(id));
	//mysql_function_query(sql_ID, sql, true, "AkaMuvelet", "ddd", id, pid ,2);
	mysql_tquery(sql_ID, sql, "AkaMuvelet", "ddd", id, pid, 2);
	return true;
}

/*CMD:dmoff(playerid, params[])
{
	#pragma unused params
	
	if(!Admin(playerid, 3))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if((ServerInfo[0][sDMOff] = true - ServerInfo[0][sDMOff]))
	{
		AdminUzenet(COLOR_LIGHTRED, 1, "%s bekapcsolta a DM védelmet! Ha a játékos Adminszolgálatost üt, kirúgja a szerver", JatekosNev(playerid));
		SCM(playerid, COL_VZOLD, "DM Védelem bekapcsolva!");
		
	} else {
		
		AdminUzenet(COLOR_LIGHTRED, 1, "%s kikapcsolta a DM védelmet!", JatekosNev(playerid));
		SCM(playerid, COL_MKEK, "DM Védelem kikapcsolva!");
	}
	return true;
}*/

CMD:dmoff(playerid,params[])
{
	if(!Admin(playerid,3)) return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(dmoff == 1)
	{
	    AdminUzenet(COLOR_LIGHTRED, 1, "%s kikapcsolta a DM védelmet!", JatekosNev(playerid));
	    dmoff = 0;
	}
	else {
	    AdminUzenet(COLOR_LIGHTRED, 1, "%s bekapcsolta a DM védelmet! Ha a játékos Adminszolgálatost sebez, kirúgja a rendszer", JatekosNev(playerid));
	    dmoff = 1;
	}
	return 1;
}

CMD:jetpack(playerid, params[])
{
	#pragma unused params

	if(!Admin(playerid, SZUPER_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(PlayerInfo[playerid][pjetpack] == false)
	{
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USEJETPACK);
		SCM(playerid, COL_VZOLD, "Dobtam egy Jetpack-et!");
		PlayerInfo[playerid][pjetpack] = true;

	} else {
        SetPlayerSpecialAction(playerid,0);
		SCM(playerid, COL_MKEK, "Oké-oké, már nincs Jetpack-ed!");
		PlayerInfo[playerid][pjetpack] = false;
	}
	return true;
}

CMD:gethp(playerid, params[])
{
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /gethp [Játékos]");
	
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	
	new Float:hp, Float:am;
	GetPlayerHealth(jatekos, hp);
	GetPlayerArmour(jatekos, am);
	
	SendFormatMessage(playerid, COLOR_WHITE, "================ "#COL_MKEK"[%d]%s"#COL_FEHER" ================", jatekos, JatekosNev(jatekos));
	SendFormatMessage(playerid, COLOR_WHITE, "Health - Kliens oldalon: "#COL_MKEK"%.1f"#COL_FEHER" | Szerver oldalon: "#COL_MKEK"%.1f"#COL_FEHER" | Differencia: "#COL_MKEK"%.1f", hp, PlayerInfo[jatekos][pElet], (hp - PlayerInfo[jatekos][pElet]));
	SendFormatMessage(playerid, COLOR_WHITE, "Armour - Kliens oldalon: "#COL_NARANCS"%.1f"#COL_FEHER" | Szerver oldalon: "#COL_NARANCS"%.1f"#COL_FEHER" | Differencia: "#COL_NARANCS"%.1f", am, PlayerInfo[jatekos][pPancel], (am - PlayerInfo[jatekos][pPancel]));
	return true;
}


CMD:set(playerid, params[])
{
	if(!Admin(playerid, 1) && !IsAS(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
	{
		go_shelp:
	    SCM(playerid, COL_MKEK, "Használata: /set [Paraméter] [Játékos] [Érték] [Extra]");
	    SCM(playerid, COL_MKEK, "[Paraméterek]: VW, Int,");
	  	if(PlayerInfo[playerid][padmin] >= 4) {
			SCM(playerid, COL_MKEK, "Admin(4): HP, Páncél, Skin, Nem");
		}
		if(PlayerInfo[playerid][padmin] >= FOADMIN_SZINT) {
			SFM(playerid, COL_MKEK, "FõAdmin(%d): Szint, Bankpénz, KP, Munka", FOADMIN_SZINT);
			SFM(playerid, COL_MKEK, "FõAdmin(%d): Material, Heroin, Kokain, Marihuana, HeroinMag, KokainMag, MarihuánaMag, Házasság", FOADMIN_SZINT);
		}
		if(PlayerInfo[playerid][padmin] >= FOADMIN_SZINT)
			SCM(playerid, COL_MKEK, "FõAdmin: Prémium, TelefonSzam, BankSzámla");
		if(PlayerInfo[playerid][padmin] >= TULAJ_SZINT)
			SCM(playerid, COL_MKEK, "Tulajdonos: Fegyverskill , Fizetés");
		
		return true;
	}
	new param[24], jatekos, ertek = NINCS, extra[16];
	sscanf(params, "s[24]uD(-1)s[16]", param, jatekos, ertek, extra);
	
	if(!strcmp(param, "munka", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
		if(ertek < 0 || !strlen(extra))
		{
			SCM(playerid, COL_MKEK, "Használat: /set munka [Játékos] [MunkaID] [Munka(1/2)]");
			
			new i = NINCS, idx, str[128];
			for(;++i < sizeof(Munkak);)
			{
				idx++;
				format(str, sizeof(str), "%s%s - %d, ", str, Munkak[i][1], Munkak[i][0][0]);
				if(idx == 4)
				{
					str[strlen(str) - 2] = EOS;
					SendFormatMessage(playerid, COLOR_MKEK, "Munkák:"#COL_FEHER" %s", str);
					
					str[0] = EOS;
					idx = 0;
				}
			}
			
			return true;
		}
		
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
		
		if(ertek < 20 || ertek > Munkak[ MAX_MUNKA - 1 ][0][0])
			return SFM(playerid, COL_MKEK, "A munkaidõnek minimum 20 és max %d között kell lennie!", Munkak[ MAX_MUNKA - 1 ][0][0]);
		
		new id;
		if(!strcmp(extra, "1", false))
		{
			id = PlayerInfo[jatekos][pMunka1];
			PlayerInfo[jatekos][pMunka1] = ertek;
		}
		else if(!strcmp(extra, "2", false))
		{
			id = PlayerInfo[jatekos][pMunka2];
			PlayerInfo[jatekos][pMunka2] = ertek;
		} else
			return SCM(playerid, COL_LRED, "Hibás slot! Melyik munkáját akarod átírni? 1/2");
		
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s munkáját! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), id, ertek);
		return true;
	}
    else if(!strcmp(param, "vw", true) || !strcmp(param, "virtualworld", true))
	{
		if(!Admin(playerid, 1) && PlayerInfo[playerid][pTV][0] == NINCS)
			return SCM(playerid, COL_LRED, "Csak megfigyelés közben állíthatsz Virtual World-öt!");
	
        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set VirtualWorld [Játékos] [Érték]");
			
		if(ertek == WAR_VW && !Admin(playerid, TULAJ_SZINT))
			return SCM(playerid, COL_MKEK, "Lófaszt! War VirtualWorld-be nem rakod át magad!");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
			
        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s VirtualWorldjét! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), GetPlayerVirtualWorld(jatekos), ertek);
        SetVirtualWorld(jatekos, ertek);
        PlayerInfo[jatekos][pvirtualworld] = ertek;
		return true;
	}
	else if(!strcmp(param, "int", true) || !strcmp(param, "interior", true))
 	{
		if(!Admin(playerid, 1) && PlayerInfo[playerid][pTV][0] == NINCS)
			return SCM(playerid, COL_LRED, "Csak megfigyelés közben állíthatsz Virtual World-öt!");
			
        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set Interior [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s Interiorját! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), GetPlayerInterior(jatekos), ertek);
        SetPlayerInterior(jatekos, ertek);
        PlayerInfo[jatekos][pinterior] = ertek;
		return true;
	}
	else if(!strcmp(param, "TelefonSzam", true) || !strcmp(param, "TelefonSzám", true))
	{
		if(!Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
			return true;
		}
        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set TelefonSzám [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
			
        if(ertek < 0)
			return SCM(playerid, COL_LRED, "[Hiba]: Az érték minimum 0 kell, hogy legyen!");
		
        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s TelefonSzámát! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][ptelefonszam], ertek);
		PlayerInfo[jatekos][ptelefonszam] = ertek;
		return true;
	}
	else if(!strcmp(param, "Fizetés", true) || !strcmp(param, "Fizetes", true))
	{
		if(!Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
			return true;
		}
        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set Fizetés [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
			
        if(ertek < 0)
			return SCM(playerid, COL_LRED, "[Hiba]: Az érték minimum 0 kell, hogy legyen!");
		
        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s Következõ Fizetési Összegét! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pFizetes], ertek);
		PlayerInfo[jatekos][pFizetes] = ertek;
		return true;
	}
	else if(!strcmp(param, "Házasság", true) || !strcmp(param, "Hazassag", true))
	{
		if(!Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
			return true;
		}
		if(jatekos == -1)
		{
			SCM(playerid,COL_LRED,"ID?");
			return 1;
		}
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			
        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s törölte %s -(nak/nek) a házasságát", JatekosNev(playerid), JatekosNev(jatekos));
		strmid(PlayerInfo[jatekos][pHazasodvaVele],"Senki",0,strlen("Senki"),MAX_PLAYER_NAME);
		return true;
	}
	else if(!strcmp(param, "Bankszámla", true) || !strcmp(param, "Bankszamla", true))
	{
		if(!Admin(playerid,FOADMIN_SZINT))
		{
			SCM(playerid,COL_LRED,"Nem használhatod ezt a parancsot!");
			return true;
		}
        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set Bankszámla [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
			
        if(ertek < 0)
			return SCM(playerid, COL_LRED, "[Hiba]: Az érték minimum 0 kell, hogy legyen!");

        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s BankSzámla Számát! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pBsz], ertek);
		PlayerInfo[jatekos][pBsz] = ertek;

		return true;
	}
	else if(!strcmp(param, "hp", true) || !strcmp(param, "health", true) || !strcmp(param, "élet", true) || !strcmp(param, "elet", true))
	{
	    if(!Admin(playerid, 4))
	    	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	    
        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set Health [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
			
        if(ertek > MAX_HP || ertek < 0)
			return SCM(playerid, COL_LRED, "[Hiba]: Az érték minimum 0 és maximum 150 között kell, hogy legyen!");

		new Float:hpja = PlayerInfo[jatekos][pElet];
        SetHealth(jatekos, float(ertek));
		
		if(ertek > 100)
		{
			PlayerInfo[jatekos][pEhseg] = 0.0;
			PlayerInfo[jatekos][pVizelet] = 0.0;
			
			//Progressbar-ok beállítása
			if(EhsegBar[jatekos] != INVALID_PLAYER_BAR_ID)
			{
				SetPlayerProgressBarValue(jatekos, EhsegBar[jatekos], 0.0);
				UpdatePlayerProgressBar(jatekos, EhsegBar[jatekos]);
			}
			if(VizeletBar[jatekos] != INVALID_PLAYER_BAR_ID)
			{
				SetPlayerProgressBarValue(jatekos, VizeletBar[jatekos], 0.0);
				UpdatePlayerProgressBar(jatekos, VizeletBar[jatekos]);
			}
		}
		
        AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s életét! Régi: %.1f | Új: %.1f", JatekosNev(playerid), JatekosNev(jatekos), hpja, float(ertek));
		return true;
	}
	else if(!strcmp(param, "armour", true) || !strcmp(param, "armor", true) || !strcmp(param, "páncél", true) || !strcmp(param, "pancel", true))
	{
	    if(!Admin(playerid, 4))
	    	return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

        if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set Armour [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

        if(ertek > MAX_ARMOUR || ertek < 0)
			return SCM(playerid, COL_LRED, "[Hiba]: Az érték minimum 0 és maximum 150 között kell, hogy legyen!");

		new Float:armor;
		GetPlayerArmour(playerid, armor);
        SetArmour(jatekos, float(ertek));
		nformat(log, 128, "%s átállította %s páncélját! Régi: %.1f | Új: %.1f", JatekosNev(playerid), JatekosNev(jatekos), armor, float(ertek));
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		return true;
	}
	else if(!strcmp(param, "skin", true) || !strcmp(param, "ruha", true))
	{
	    if(!Admin(playerid, 4))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
		if(ertek < 1)
			return SCM(playerid, COL_MKEK, "Használat: /set Skin [Játékos] [SkinID] [Frakciós (Ha igen írj 1-et]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
			
		if((ertek > 299 || ertek < 1) || ertek == 74)
		    return SCM(playerid, COL_LRED, "Érvénytelen SkinID! 1 és 299 között kell, hogy legyen!");
			
		new bool:az;
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s skinjét! Régi: %d | Új: %d %s", JatekosNev(playerid), JatekosNev(jatekos), GetPlayerSkin(jatekos), ertek, (az ? ("| Szolgálati") : ("")));
		if(strlen(extra) == 1 && strval(extra) == 1)
		{
			if(PlayerInfo[jatekos][pFrakcio] != 0)
			{
				az = true;
				PlayerInfo[jatekos][pDutySkin] = ertek;
				SetPlayerSkin(jatekos, ertek);
				
			} else
				return SCM(playerid, COL_LRED, "Ez a játékos nincs frakcióban, így nem állíthatsz be neki Duty skint!");
		} else
			SetSkin(jatekos, ertek);
		return true;
	}
	else if(!strcmp(param, "szint", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		if(ertek < 0 || ertek > 40)
			return SCM(playerid, COL_MKEK, "Használat: /set szint [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
		
		nformat(log, 128, "%s átállította %s szintjét! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pjatekosszint], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		
		PlayerInfo[jatekos][pjatekosszint] = ertek;
		SetPlayerScore(jatekos, ertek);
		return true;
	}
	else if(!strcmp(param, "fegyverskill", true))
	{
		if(!Admin(playerid, TULAJ_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		if(ertek < 0 || ertek > 500)
			return SCM(playerid, COL_MKEK, "Használat: /set fegyverskill [Játékos] [Érték] | Max 500 lehet");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
		
		nformat(log, 128, "%s átállította %s fegyver tapasztalatát! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pFegyverSkill], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pFegyverSkill] = ertek;
		return true;
	}
	else if(!strcmp(param, "material", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set meterial [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
		
		nformat(log, 128, "%s átállította %s értékeit! Érték: Material | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pMaterial], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pMaterial] = ertek;
		return true;
	}
	else if(!strcmp(param, "heroin", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set heroin [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
		
		nformat(log, 128, "%s átállította %s értékeit! Érték: Heroin | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pHeroin], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pHeroin] = ertek;
		return true;
	}
	else if(!strcmp(param, "kokain", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set kokain [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
		
		nformat(log, 128, "%s átállította %s értékeit! Érték: Kokain | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pKokain], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pKokain] = ertek;
		return true;
	}
	else if(!strcmp(param, "marihuana", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set marihuana [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
		
		nformat(log, 128, "%s átállította %s értékeit! Érték: Marihuana | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pMarihuana], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pMarihuana] = ertek;
		return true;
	}
	else if(!strcmp(param, "marihuanamag", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set marihuanamag [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		nformat(log, 128, "%s átállította %s értékeit! Érték: MarihuanaMag | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pDrogAnyag][0], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pDrogAnyag][0] = ertek;
		return true;
	}
	else if(!strcmp(param, "kokainmag", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set kokainmag [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

		nformat(log, 128, "%s átállította %s értékeit! Érték: KokainMag | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pDrogAnyag][1], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pDrogAnyag][1] = ertek;
		return true;
	}
	else if(!strcmp(param, "heroinmag", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

		if(ertek < 0 || ertek > 1000000)
			return SCM(playerid, COL_MKEK, "Használat: /set marihuana [Játékos] [Érték]");

		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");

 		nformat(log, 128, "%s átállította %s értékeit! Érték: HeroinMag | Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pDrogAnyag][2], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pDrogAnyag][2] = ertek;
		return true;
	}
	else if(!strcmp(param, "nem", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		if(ertek < 1 || ertek > 2)
			return SCM(playerid, COL_MKEK, "Használat: /set nem [Játékos] [1 = Férfi / 2 = Nõ]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
		
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította %s nemét! Régi: %s -> Új: %s", JatekosNev(playerid), JatekosNev(jatekos), NemVizsgalat(PlayerInfo[jatekos][pnem]), NemVizsgalat(ertek));
		PlayerInfo[jatekos][pnem] = ertek;
		return true;
	}
	else if(!strcmp(param, "kp", true) || !strcmp(param, "keszpenz", true) || !strcmp(param, "készpénz", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		if(ertek < 0 || !strlen(extra))
		{
			SCM(playerid, COL_MKEK, "Használat: /set készpénz [Játékos] [Érték] [Operátor(+/-/b)]");
			SCM(playerid, COL_MKEK, "Operátorok: +/h = Érték hozzáadása | -/l = Érték levonása | =/b = Érték beállítása");
			return true;
		}
		
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
		
		new kp = PlayerInfo[jatekos][ppenz];
		if(!strcmp(extra, "+", false) || !strcmp(extra, "h", false))
		{
			new uj = PlayerInfo[jatekos][ppenz];
			GiveMoney(jatekos,ertek);
			kp = PlayerInfo[jatekos][ppenz];
			nformat(log, 128, "%s hozzáadott %s készpénzéhez! Régi: %s$ Új: %s$ Érték: +%s$", JatekosNev(playerid) ,JatekosNev(jatekos), FormatNumber(uj, 0, ','), FormatNumber(kp, 0, ','), FormatNumber(ertek, 0, ','));
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}
		if(!strcmp(extra, "-", false) || !strcmp(extra, "l", false))
		{
			new uj = PlayerInfo[jatekos][ppenz];
			GiveMoney(jatekos,-ertek);
			kp = PlayerInfo[jatekos][ppenz];
			nformat(log, 128, "%s elvett %s készpénzébõl! Régi: %s$ Új: %s$ Érték: -%s$", JatekosNev(playerid) ,JatekosNev(jatekos),FormatNumber(uj, 0, ','),FormatNumber(kp, 0, ','), FormatNumber(ertek, 0, ','));
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}
		if(!strcmp(extra, "=", false) || !strcmp(extra, "b", false))
		{
			new uj = ertek;
			nformat(log, 128, "%s beállította %s készpénzét! Régi: %s$ Új: %s$", JatekosNev(playerid) ,JatekosNev(jatekos), FormatNumber(kp, 0, ','), FormatNumber(uj, 0, ','));
			SetMoney(jatekos,ertek);
			kp = PlayerInfo[jatekos][ppenz];
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}
		
		SCM(playerid, COL_LRED, "Adj meg egy operátort! ( +(h)ozzáad / -(l)evon / =(b)eállít )");
		return true;
	}
	else if(!strcmp(param, "bankpenz", true) || !strcmp(param, "bankpénz", true) || !strcmp(param, "bszp", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
			
		if(ertek == NINCS || !strlen(extra))
		{
			SCM(playerid, COL_MKEK, "Használat: /set bankpénz [Játékos] [Érték] [Operátor(+/-/b)]");
			SCM(playerid, COL_MKEK, "Operátorok: +/h = Érték hozzáadása | -/l = Érték levonása | =/b = Érték beállítása");
			return true;
		}
		
		new bsz = PlayerInfo[jatekos][pBszPenz];
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
		
		if(!strcmp(extra, "+", false) || !strcmp(extra, "h", false))
		{
			new uj = (PlayerInfo[jatekos][pBszPenz] += ertek);
			nformat(log, 128, "%s hozzáadott %s banki pénzéhez! Régi: %s$ Új: %s$ Érték: +%s$", JatekosNev(playerid) ,JatekosNev(jatekos), FormatNumber(bsz, 0, ','), FormatNumber(uj, 0, ','), FormatNumber(ertek, 0, ','));
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}
		if(!strcmp(extra, "-", false) || !strcmp(extra, "l", false))
		{
			new uj = (PlayerInfo[jatekos][pBszPenz] -= ertek);
			nformat(log, 128, "%s elvett %s banki pénzébõl! Régi: %s$ Új: %s$ Érték: -%s$", JatekosNev(playerid) ,JatekosNev(jatekos), FormatNumber(bsz, 0, ','), FormatNumber(uj, 0, ','), FormatNumber(ertek, 0, ','));
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}
		if(!strcmp(extra, "=", false) || !strcmp(extra, "b", false))
		{
			new uj = (PlayerInfo[jatekos][pBszPenz] = ertek);
			nformat(log, 128, "%s beállította %s banki pénzét! Régi: %s$ Új: %s$", JatekosNev(playerid) ,JatekosNev(jatekos), FormatNumber(bsz, 0, ','), FormatNumber(uj, 0, ','));
			AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
			AdminLogEx(log);
			return true;
		}
		
		SCM(playerid, COL_LRED, "Adj meg egy operátort! ( +(h)ozzáad / -(l)evon / =(b)eállít )");
		return true;
	}
	else if(!strcmp(param, "prémium", true) || !strcmp(param, "premium", true) || !strcmp(param, "pp", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		if(ertek < 0)
			return SCM(playerid, COL_MKEK, "Használat: /set prémium [Játékos] [Érték]");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Nagyobb Admin értékeit nem állíthatod át!");
		
		nformat(log, 128, "%s átállította %s prémium pontjait! Régi: %d | Új: %d", JatekosNev(playerid), JatekosNev(jatekos), PlayerInfo[jatekos][pPremiumPont], ertek);
		AdminUzenetEx(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], log);
		AdminLogEx(log);
		PlayerInfo[jatekos][pPremiumPont] = ertek;
		return true;
	}
	else goto go_shelp;
	return true;
}

CMD:report(playerid, params[])
{
	if((gettime() - PlayerInfo[playerid][pReport][0]) < 5)
		return SCM(playerid, COL_LRED, "Kérlek várj egy kicsit, kevesebb mint 5 másodperc telt el az elõzõ report óta!");
	if(PlayerInfo[playerid][pReportTiltas] > 0)
	{
		return SFM(playerid,COL_LRED,"Még %d percig nem írhatsz üzenetet!",PlayerInfo[playerid][pReportTiltas]/60);
	}
	new str[128], rstr[128], num = 0, id;
	if(sscanf(params, "ds[128]", id, str))
	{
		SendClientMessage(playerid, COLOR_YELLOW, "0 = Adminsegédek | 1 = Adminok | 2 = FõAdminok | 3 = Tulajok / Scripterek");
		SCM(playerid, COL_MKEK, "Használat: /report [Channel (0/1/2/3)] [Üzeneted]");
		return true;
	}
	
	if(id < 0 || id > 3)
		return SCM(playerid, COL_LRED, "Nincs ilyen report szoba! Használat: /report [Channel (0/1/2/3)] [Üzeneted]");
	
	format(rstr, sizeof(rstr), "[Channel %d]: [%d]%s - %s", id, playerid, JatekosNev(playerid), str);
	foreach(Player, i)
	{
		//if((PlayerInfo[i][pReport][1] && Admin(i, 1)) || (PlayerInfo[i][pReport][1] && IsAS(i)))
		//if(PlayerInfo[i][pSzunetel]) continue;
		if((PlayerInfo[i][pReport][1] == id || PlayerInfo[i][pallreport]==true) && !PlayerInfo[i][pTog][6] && (Admin(i, 1) || IsAS(i)))
		{
			SendClientMessage(i, COLOR_LIGHTGREEN, rstr);
			num++;
		}
	}
	
	if(!num)
	{
		SCM(playerid, COL_LRED, "Sajnáljuk, de jelenleg nincs senki a reporton.");
		SCM(playerid, COL_MKEK, "Kérlek várj türelmesen, vagy keress fel egy Admint /pm-be!");
		
	} else {
		
		PlayerInfo[playerid][pReport][0] = gettime();
		SendFormatMessage(playerid, COLOR_YELLOW, "Üzeneted elküldve: %s", str);
	}
	return true;
}

CMD:pm(playerid, params[])
{
	new jatekos, pmsz[128];
	if(sscanf(params, "us[128]", jatekos, pmsz))
		return SCM(playerid, COL_MKEK, "Használat: /pm [Adminisztrátor] [Üzenet]");
	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen Játékos!");
	if(jatekos == playerid)
		return SCM(playerid, COL_LRED, "Skizofrén vagy? :D Magaddal ne beszélgess...");
	if(!Admin(jatekos, 1) && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Ez a játékos nem Admin!");
	if(!PlayerInfo[jatekos][pAduty] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Ez az Adminisztrátor nincs szolgálatban!");
	if(PlayerInfo[jatekos][pTog][7] && !Admin(playerid, 1))
		return SCM(playerid, COL_LRED, "Ez az Adminisztrátor jelenleg elfoglalt, kérlek várj egy kicsit.");
	if(PlayerInfo[jatekos][pSzunetel])
		SCM(playerid, COL_MKEK, "Az Adminisztrátor épp szünetelteti a játékot ezért lehetséges, hogy nem fog egybõl válaszolni.");
	
	SendFormatMessage(jatekos, COLOR_PMKEK, "[%d]%s üzeni: %s", playerid, JatekosNev(playerid), pmsz);
	SendFormatMessage(playerid, COLOR_YELLOW2, "Üzeneted neki: %s - %s", JatekosNev(jatekos), pmsz);
	StatInfo[playerid][pPM]++;
	foreach(Player, id)
	{
		if(PlayerInfo[id][psmindenthall]==true)
		{
			SendFormatMessage(id, COLOR_YELLOW2, "[SMH] %s-->%s - %s", JatekosNev(playerid), JatekosNev(jatekos), pmsz);
		}
	}
	
	if(Admin(playerid,1))
	{
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'PM')", JatekosNev(playerid), PosExt(date), time[0], time[1]);
	}
	
	return true;
}

CMD:valasz(playerid, params[])
{
	new jatekos, pmsz[128], str[128];
	if(!Admin(playerid, 1) && !IsAS(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(sscanf(params, "us[128]", jatekos, pmsz))
		return SCM(playerid, COL_MKEK, "Használat: /vá(lasz) [Játékos] [Üzenet]");
	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(jatekos == playerid)
		return SCM(playerid, COL_LRED, "Cicaborsó, magadnak nem fogsz válaszolni! :D");
	if(!OOC_Ellenorzes(playerid, "/vá", pmsz) && !Admin(playerid, 1))
		return true;
	if((strlen(pmsz) > 10) && !Admin(jatekos, 1) && !IsAS(jatekos)/* && sInfo[playerid][pIrte][jatekos] && ((GetTickCount() - sInfo[playerid][pValaszIdo][jatekos]) >= 15000)*/)
	{
		StatInfo[playerid][pVA]++;
		PlayerInfo[playerid][pValaszok]++;
	}	
	

	
	format(str, sizeof(str), "%s %s válaszolt neki: %s - %s", (Admin(playerid, 1) ? ("Admin") : ("AS")), JatekosNev(playerid), JatekosNev(jatekos), pmsz);
	foreach(Player, p)
	{
		if(p == playerid || PlayerInfo[p][pTog][1]) continue;
		if((PlayerInfo[playerid][padmin] != 0 && (PlayerInfo[p][padmin] >= PlayerInfo[playerid][padmin])) || (PlayerInfo[p][padmin] && IsAS(playerid)) || (IsAS(p) && IsAS(playerid)))
			SendClientMessage(p, COLOR_YELLOW, str);
	}
	
	if(Admin(playerid,1) || IsAS(playerid))
	{
		new date[3],time[3];
		getdate(date[0], date[1], date[2]);
		gettime(time[0], time[1], time[2]);
		doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Valasz')", JatekosNev(playerid), PosExt(date), time[0], time[1]);	
	}
	
	SendFormatMessage(playerid, COLOR_YELLOW2, "Válaszod neki: [%d]%s - %s", jatekos, JatekosNev(jatekos), pmsz);
	SendFormatMessage(jatekos, COLOR_MKEK, "%s [%d]%s üzeni: %s", (Admin(playerid, 1) ? ("Admin") : ("Adminsegéd")), playerid, JatekosNev(playerid), pmsz);
	
	//sInfo[playerid][pIrte][jatekos] = false;
	return true;
}

CMD:desync(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new jatekos;
	if(sscanf(params, "u", jatekos))
	    return SCM(playerid, COL_MKEK, "Használat: /desync [Jatekos]");

    if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(!PlayerInfo[jatekos][pDesync])
	{
	    PlayerInfo[jatekos][pDesync] = true;
	    SFM(playerid, COL_MKEK, "Szinkronizálás (OnPlayerUpdate) kikapcsolva rajta: "#COL_MKEK"%s", JatekosNev(jatekos));
	} else if(PlayerInfo[jatekos][pDesync])
	{
	    PlayerInfo[jatekos][pDesync] = false;
	    SFM(playerid, COL_MKEK, "Szinkronizálás (OnPlayerUpdate) bekapcsolva rajta: "#COL_MKEK"%s", JatekosNev(jatekos));
	}

	return true;
}

CMD:srcon(playerid, params[])
{
	if(!IsScripter(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new sron[128];
    if(sscanf(params, "s[128]", sron))
        return SCM(playerid, COL_MKEK, "Használata: /srcon [Paraméterek]");
        
	AdminUzenet(COLOR_LIGHTRED, FOADMIN_SZINT, "!!! ADMIN: %s SRCON PARANCSOT AKART HASZNÁLNI !!! (%s)", JatekosNev(playerid), sron);
    return true;
}

CMD:gun(playerid, params[])
{
    if(!Admin(playerid, SZUPER_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /gun [Játékos] [Fegyver] [Lõszer] | /gun töröl");
	
	new param[16], uid;
	sscanf(params, "s[24]{}", param);
	if(egyezik(param, "töröl") || egyezik(param, "torol"))
	{
	    if(sscanf(params, "{s[24]}u", uid))
			return SCM(playerid, COL_MKEK, "Használat: /gun töröl [Játékos] | Játékos fegyvereinek törlése");
			
        if((uid == INVALID_PLAYER_ID) || !IsPlayerConnected(uid) || IsPlayerNPC(uid))
		    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			
		PlayerInfo[uid][pFegyver] = 0;
		ResetPlayerWeapons(uid);
		new fegyver = -1;
		for(;++fegyver < 13;)
		{
			PlayerInfo[uid][pFegyverek][fegyver] = 0;
			PlayerInfo[uid][pToltenyek][fegyver] = 0;
		}
		
		SetPlayerAttachedWeapon(uid, true);
		
		if(/*IsScripter(playerid) && (playerid != uid) || */!IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT)
			AdminUzenet(COLOR_LIGHTRED,1, "%s törölte %s zsebében lévõ fegyvereket!", JatekosNev(playerid), JatekosNev(uid));
		
		SFM(playerid, COL_MKEK, "Törölted "#COL_MKEK"%s"#COL_FEHER" zsebében lévõ fegyvereket!", JatekosNev(uid));
		
	} else {
	
		new fid[16], ammo, id;
		if(sscanf(params, "us[16]d", uid, fid, ammo))
			return SCM(playerid, COL_MKEK, "Használat: /gun [Játékos] [Fegyver] [Lõszer]");
			
        if((uid == INVALID_PLAYER_ID) || !IsPlayerConnected(uid) || IsPlayerNPC(uid))
		    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
		if(IsNumeric(fid))
		{
			id = strval(fid);
			
			if(id < 1 || id >= sizeof(aWeaponNames))
				return SCM(playerid, COL_LRED, "Nincs ilyen fegyver!");
		} else {
			id = GetGunID(fid);
			
			if(id == 0)
				return SCM(playerid, COL_LRED, "Nincs ilyen fegyver!");
		}
		
		PlayerInfo[uid][pFegyverMuvelet] = (gettime() + 2);
		if(SameWeaponSlot(PlayerInfo[uid][pFegyverek][aWeaponSlotok[id]], id))
			return SCM(playerid, COL_LRED, "A játékosnak ezen a sloton már van fegyvere!");
		
		if(PlayerInfo[uid][pFegyver] == id)
			ResetPlayerWeapons(uid);
		
		//Beállítja a lõszert, nem hozzádja!
		GiveWeapon(uid, id, ammo, false, true);
		SetPlayerAttachedWeapon(uid);
		
		if(/*IsScripter(playerid) && (playerid != uid) || */!IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT)
			AdminUzenet(COLOR_LIGHTRED,1, "%s fegyvert adott neki: %s | Fegyver: [%d]%s | Töltény: %d", JatekosNev(playerid), JatekosNev(uid), id, aWeaponNames[id], ammo);

		SFM(playerid, COL_MKEK, "Fegyver adtál neki: %s | Fegyver: [%d]%s | Töltény: %d", JatekosNev(uid), id, aWeaponNames[id], ammo);
	}
	return true;
}

CMD:kapu(playerid, params[])
{
	if(!Admin(playerid, SZUPER_SZINT) && !PlayerInfo[playerid][pKapuKezeles])
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(isnull(params))
	{
		if(IsScripter(playerid)) SCM(playerid, COL_MKEK, "Használat: /kapu [ Kezelés / Go ] | Ha nem adsz meg paramétert, alapértelmezett a dialog!");
		else SCM(playerid, COL_MKEK, "Használat: /kapu [ Go ] | Ha nem adsz meg paramétert alapértelmezett a dialog!");
		ShowPlayerDialog(playerid, DIALOG_KAPU_STATISZTIKA, DIALOG_STYLE_LIST, #COL_FEHER"Kapu "#COL_VKEK"statisztika", "Új kapu létrehozása\nKözeli kapu szerkesztése\nKözeli kapu információi", "Mehet!", "Mégse!");
		return true;
	}
		
	new param[24];
	sscanf(params, "s[24]{}", param);
	if(!strcmp(param, "go", false))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /kapu go [Kapu SQLID]");
			
		if(id > MAX_KAPU || !id || !Kapu[id][kVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen kapu az adatbázisban!");
			
		SetPos(playerid, Kapu[id][kPos], (Kapu[id][kPos] + 2), Kapu[id][kPos]);
		SFM(playerid, COL_VZOLD, "Sikeresen teleportáltál a "#COL_MKEK"%s"#COL_FEHER" nevû kapuhoz!", Kapu[id][kNev]);
		return true;
	}
	else if(!strcmp(param, "kezelés", false) || !strcmp(param, "kezeles", false))
	{
		new jatekos;
		if(sscanf(params, "{s[24]}u", jatekos))
			return SCM(playerid, COL_MKEK, "Használat: /kapu kezelés [Játékos] | Kezelési engedély adása");
	
		if(!IsScripter(playerid))
			return SCM(playerid, COL_LRED, "Lófaszt.. Te nem fogod osztogatni -.-");
			
		if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

		if((PlayerInfo[jatekos][pKapuKezeles] = true - PlayerInfo[jatekos][pKapuKezeles]))
		{
			SFM(playerid, COL_MKEK, "Engedélyezted "#COL_MKEK"%s"#COL_FEHER" számára a kapukezelést!", JatekosNev(jatekos));
			SFM(jatekos, COL_MKEK, "Admin "#COL_MKEK"%s"#COL_FEHER" engedélyezte számodra a kapukezelést! Használata: /kapu", JatekosNev(playerid));
		} else
			SFM(playerid, COL_MKEK, "Tiltottad "#COL_MKEK"%s"#COL_FEHER" számára a kapukezelést!", JatekosNev(jatekos));
	}
	return true;
}

CMD:terulet(playerid, params[])
{
	if(isnull(params) && IsScripter(playerid))
		return SCM(playerid, COL_MKEK, "(Scripter)Használata: /terület [ Új / Töröl / Lista / Tulaj / Haszon / Kezelés ]");
	
	new param[24];
	sscanf(params, "s[24]{}", param);
	
	if(!strcmp(param, "tulaj", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT) && !PlayerInfo[playerid][pTeruletKezeles])
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new fid, tid;
		
		if(sscanf(params, "{s[24]}dd", tid, fid))
			return SCM(playerid, COL_MKEK, "Használat: /terulet tulaj [TerületID] [FrakcióID]");
		
		if((fid > MAX_FRAKCIO || fid < 1 ) || !FInfo[fid][fVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen frakció!");
		
		/*if(FInfo[fid][fLegalis] == FK_LEGAL)
			return SCM(playerid, COL_LRED, "Csak illegális frakciónak lehet hozzáadni!");*/
		
		if((tid > MAX_TERULET || tid < 0 ) || !tInfo[tid][tVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen terület!");
		
		tInfo[tid][tFrakcio] = fid;
		TeruletFrissites();
		
		if(PlayerInfo[playerid][padmin])
			AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s átállította a(z) %s nevû terület tulaját erre: [%d]%s", JatekosNev(playerid), tInfo[tid][tNev], fid, FInfo[fid][fNev]);
			
		SFM(playerid, COL_VZOLD, "%s nevû terület tulaja átállítva erre: [%d]%s", tInfo[tid][tNev], fid, FInfo[fid][fNev]);
		return true;
	}
	else if(!strcmp(param, "kezelés", true) || !strcmp(param, "kezeles", true))
	{
		if(!IsScripter(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id;
		if(sscanf(params, "{s[24]}u", id))
			return SCM(playerid, COL_MKEK, "Használat: /terület kezelés [Játékos]");
			
		if(id == INVALID_PLAYER_ID || !Belepve(id))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			
		if(PlayerInfo[id][pTeruletKezeles])
		{
			SFM(playerid, COL_VZOLD, "Terület kezelési engedély visszavonva tõle: "#COL_MKEK"[%d]%s", id, JatekosNev(id));
			PlayerInfo[id][pTeruletKezeles] = false;
			
		} else {
			
			SFM(playerid, COL_VZOLD, "Terület kezelési engedély "#COL_MKEK"[%d]%s"#COL_FEHER" számára!", id, JatekosNev(id));
			SFM(id, COL_VZOLD, "Admin "#COL_MKEK"%s"#COL_FEHER" engedélyezte számodra a terület kezelést! Használata: "#COL_MKEK"/terület", JatekosNev(playerid));
			PlayerInfo[id][pTeruletKezeles] = true;
		}
		
		return true;
	}
	else if(!strcmp(param, "töröl", true) || !strcmp(param, "torol", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT) && !PlayerInfo[playerid][pTeruletKezeles])
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /terület töröl [TerületID]");
		
		/*new k = -1, u = -1;
		
		for(;++k < MAX_TERULET;)
		{
			if(tInfo[k][tVan])
			{
				if(!strcmp(tInfo[k][tNev], nev))
				{
					u = k;
					break;
				}
			}
		}
		
		if(u == -1)
			return SFM(playerid, COL_LRED, "Nincs ilyen területnév! (%s)", nev);
		
		if((id > MAX_TERULET || id < 0 ) || !tInfo[id][tVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen terület!");
		
		if(PlayerInfo[playerid][padmin])
			AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s törölte a(z) %s nevû területet!", JatekosNev(playerid), tInfo[id][tNev]);
			
		SFM(playerid, COL_VZOLD, "%s nevû terület sikeresen törölve!", tInfo[id][tNev]);
		
		tInfo[id][tVan] = false;
		tInfo[id][tNev][0] = EOS;
		GangZoneDestroy(tInfo[id][tZone]);
		DestroyDynamicArea(tInfo[id][tArea]);
		tInfo[id][tMinPos][0] = 0.0;
		tInfo[id][tMinPos][1] = 0.0;
		tInfo[id][tMaxPos][0] = 0.0;
		tInfo[id][tMaxPos][1] = 0.0;
		tInfo[id][tFrakcio] = 0;
		tInfo[id][tHaszon][0] = 0;
		tInfo[id][tHaszon][1] = 0;
		tInfo[id][tHaszon][2] = 0;
		tInfo[id][tHaszon][3] = 0;
		tInfo[id][tHaszon][4] = 0;
		tInfo[id][tHaszonIdo] = 0;
		tInfo[id][tHarcFolyik] = false;
		tInfo[id][tTipus] = 0;
		tInfo[id][tHarcolok][VEDOK] = 0;
		tInfo[id][tHarcolok][TAMADOK] = 0;
		tInfo[id][tVarakozasIdo] = 0;
		
		doQuery("DELETE FROM `"#MYSQL_TERULET_TABLA"` WHERE ID = '%d'", id);
		return true;*/
	}
	else if(!strcmp(param, "lista", true))
	{
		SendClientMessage(playerid, COLOR_WHITE, "========== [ "#COL_MKEK"Területek"#COL_FEHER" ] ==========");
		new u = -1, str[256], db, fks[32];
		
		SendClientMessage(playerid, COLOR_YELLOW2, "ID - Frakció | Pénz / Kokain / Heroin / Marihuana / Material");
		for(;++u < MAX_TERULET;)
		{
			if(tInfo[u][tVan])
			{
				if(FInfo[ tInfo[u][tFrakcio] ][fVan]) format(fks, sizeof(fks), "%s", FInfo[ tInfo[u][tFrakcio] ][fNev]);
				else format(fks, sizeof(fks), "Nincs");
				format(str, sizeof(str), "[%d]%s - %s | %s$, %dg, %dg, %dg, %ddb", u, tInfo[u][tNev], fks, FormatNumber(tInfo[u][tHaszon][0], 0, ','), tInfo[u][tHaszon][1], tInfo[u][tHaszon][2], tInfo[u][tHaszon][3], tInfo[u][tHaszon][4]);
				SendClientMessage(playerid, COLOR_MKEK, str);
				db++;
			}
		}

		if(!db)
			SCM(playerid, COL_LRED, "Jelenleg nincs létrehozva terület!");
		return true;
	}
	else if(!strcmp(param, "új", true) || !strcmp(param, "uj", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT) && !PlayerInfo[playerid][pTeruletKezeles])
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new nev[40];
		if(sscanf(params, "{s[24]}s[40]", nev))
			return SCM(playerid, COL_MKEK, "Használat: /terület új [Terület Név]");
		
		if(strlen(nev) < 5 || strlen(nev) > 40)
			return SCM(playerid, COL_LRED, "A teürlet név 5 és 40 karakter között lehet!");
		
		new k = -1, u = -1;
		for(;++k < MAX_TERULET;)
		{
			if(!tInfo[k][tVan])
			{
				u = k;
				break;
			}
		}
		
		format(tInfo[u][tNev], 40, nev);
		tInfo[u][tVan] = true;
		doQuery("INSERT INTO `"#MYSQL_TERULET_TABLA"` (ID, Nev) VALUES ('%d', '%s')", u, nev);
		
		PlayerInfo[playerid][pTeruletSzerkeszt] = true;
		PlayerInfo[playerid][pTerulet] = u;
		
		new Float:pZ;
		
		GetPlayerPos(playerid, tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1], pZ);
		GetPlayerPos(playerid, tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1], pZ);
		
		tInfo[PlayerInfo[playerid][pTerulet]][tZone] = GangZoneCreate(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1]);
		tInfo[PlayerInfo[playerid][pTerulet]][tArea] = CreateDynamicRectangle(tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMinPos][1], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][0], tInfo[PlayerInfo[playerid][pTerulet]][tMaxPos][1]);
		
		if(PlayerInfo[playerid][padmin])
			AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s létrehozott egy %s nevû területet!", JatekosNev(playerid), nev);
		
		SendClientMessage(playerid, COLOR_GREEN, "Terület létrehozásához használd a W-A-S-D gombokat! Mentéshez nyomd meg az ENTER gombot.");
		return true;
	}
	else if(!strcmp(param, "haszon", true))
	{
		if(!Admin(playerid, FOADMIN_SZINT) && !PlayerInfo[playerid][pTeruletKezeles])
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new hparam[24], val, id;
		if(sscanf(params, "{s[24]}s[24]dd", hparam, id, val))
			return SCM(playerid, COL_MKEK, "Használat: /terület haszon [ Pénz / Kokain / Heroin / Marihuana / Material ] [TerületID] [Érték]");
		
		if((id > MAX_TERULET || id < 0 ) || !tInfo[id][tVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen terület!");
		
		if(val < 0 || val > 600000)
			return SCM(playerid, COL_MKEK, "Hibás érték! Minimum 0 és maximum 600,000 lehet!");
		
		if(!strcmp(hparam, "penz", true) || !strcmp(hparam, "pénz", true))
			tInfo[ id ][tHaszon][0] = val;
		else if(!strcmp(hparam, "kokain", true))
			tInfo[ id ][tHaszon][1] = val;
		else if(!strcmp(hparam, "heroin", true))
			tInfo[ id ][tHaszon][2] = val;
		else if(!strcmp(hparam, "marihuana", true))
			tInfo[ id ][tHaszon][3] = val;
		else if(!strcmp(hparam, "material", true))
			tInfo[ id ][tHaszon][4] = val;
		else
			return SCM(playerid, COL_LRED, "Hibás paraméter! Lehetõségek: Pénz / Kokain / Heroin / Marihuana / Material");
		
		nformat(str, 128, "Terület: [%d]%s => Pénz: %s$ | Kokain: %sg | Heroin: %sg | Marihuana: %sg | Material: %sdb", id, tInfo[id][tNev], FormatNumber(tInfo[ id ][tHaszon][0], 0, ','), FormatNumber(tInfo[ id ][tHaszon][1], 0, ','), FormatNumber(tInfo[ id ][tHaszon][2], 0, ','), FormatNumber(tInfo[ id ][tHaszon][3], 0, ','), FormatNumber(tInfo[ id ][tHaszon][4], 0, ','));
		SendClientMessage(playerid, COLOR_MKEK, str);
	}
	return true;
}

CMD:faset(playerid, params[])
{
	if(!IsScripter(playerid))
		return false;
	
	new Float:frot[3], Float:speed, fid;
	if(sscanf(params, "df(0.09f(0.0)f(0.0)", fid, speed, PosExt(frot)))
		return SendClientMessage(playerid, COLOR_WHITE, "Használata: /faset [faid] [speed] [rotx] [roty] [rotz]");
	
	if(fid >= sizeof(FaHelyek))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Túl nagy!");
	
	if(fid < 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Túl kicsi!");
	
	new Float:opos[3];
	GetDynamicObjectPos(FaObjectek[fid], PosExt(opos));
	
	MoveDynamicObject(FaObjectek[fid], PosExt(opos) + 0.0001, speed, PosExt(frot));
	
	SendClientMessage(playerid, COLOR_MKEK, "Sikeresen elmozgatva!");
	
	return true;
}

CMD:ceg(playerid, params[])
{
	if(isnull(params))
	{
		SCM(playerid, COL_MKEK, "Használat: /cég [ Lista / Név / Vesz / Belépõ / Széf ]");
		if(Admin(playerid, 5))
			SCM(playerid, COL_MKEK, "Admin 5: Go, Info | Scripter: Ár, Aelad, Új, Töröl, Bejárat, Kijárat, Típus");
		return true;
	}
	
	new param[24];
	sscanf(params, "s[24]{}", param);
	
	if(!strcmp(param, "új", true) || !strcmp(param, "uj", true))
	{
		if(!IsScripter(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new aanev[20], nev[32], ar;
		if(sscanf(params, "{s[24]}s[20]s[32]d", aanev, nev, ar))
			return SCM(playerid, COL_MKEK, "Használat: /cég [Alap név] [Név] [Ára]");
		
		new c = NINCS, u = -1;
		for(;++c < MAX_CEG;)
		{
			if(!CegInfo[c][cVan])
			{
				u = c;
				break;
			}
		}
		
		if(u == NINCS)
			return SCM(playerid, COL_LRED, "Nem tudsz több céget létrehozni!");
			
		if(ar < 43000)
			return SCM(playerid, COL_LRED, "Az ár nem lehet kisebb mint 43 000$!");
			
		if(Karakter_Ellenorzes(aanev) || Karakter_Ellenorzes(nev))
			return SCM(playerid, COL_LRED, "Az név nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");
			
		CegInfo[u][cVan] = true;
		CegInfo[u][cTulajID] = NINCS;
		format(CegInfo[u][cNev], 32, "%s", nev);
		format(CegInfo[u][cANev], 20, "%s", aanev);
		CegInfo[u][cAr] = ar;
		
		GetPlayerPos(playerid, PosExt(CegInfo[ u ][cPosBe]));
		GetPlayerFacingAngle(playerid, CegInfo[ u ][cPosBe][3]);
		
		CegInfo[u][cVw][0] = GetPlayerVirtualWorld(playerid);
		CegInfo[u][cInt][0] = GetPlayerInterior(playerid);
		
		if(IsValidDynamicPickup( CegInfo[u][cPickup] )) DestroyDynamicPickup( CegInfo[u][cPickup] );
		CegInfo[u][cPickup] = CreateDynamicPickup(1239, 23, PosExt(CegInfo[u][cPosBe]), CegInfo[u][cVw][0], CegInfo[u][cInt][0], NINCS);
		
		doQuery("INSERT INTO `"#MYSQL_CEGEK_TABLA"` (Id, Anev, Nev, Ar, PosBe, Vw, Inte) VALUES ('%d', '%s', '%s', '%d', '%f,%f,%f,%f', '%d,%d', '%d,%d')", u, aanev, nev, ar, PosExt(CegInfo[ u ][cPosBe]), CegInfo[ u ][cPosBe][3], CegInfo[u][cVw][0], CegInfo[u][cVw][1], CegInfo[u][cInt][0], CegInfo[u][cInt][1]);
		SendFormatMessage(playerid, COLOR_MKEK, "Sikeresen létrehoztad a(z) %s nevû céget! [SQLID: %d | Ára: %s$]", nev, u, FormatNumber(ar, 0, ','));
		return true;
	}
	else if(!strcmp(param, "bejárat", true) || !strcmp(param, "bejarat", true))
	{
		if(!IsScripter(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /cég bejárat [CégID] | Bejárat áthelyezése");
		
		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");
		
		GetPlayerPos(playerid, PosExt(CegInfo[ id ][cPosBe]));
		GetPlayerFacingAngle(playerid, CegInfo[ id ][cPosBe][3]);
		
		CegInfo[id][cVw][0] = GetPlayerVirtualWorld(playerid);
		CegInfo[id][cInt][0] = GetPlayerInterior(playerid);
		
		if(IsValidDynamicPickup( CegInfo[id][cPickup] )) DestroyDynamicPickup( CegInfo[id][cPickup] );
		CegInfo[id][cPickup] = CreateDynamicPickup(1239, 23, PosExt(CegInfo[id][cPosBe]), CegInfo[id][cVw][0], CegInfo[id][cInt][0], NINCS);
		
		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET PosBe = '%f,%f,%f,%f', Vw = '%d,%d', Inte = '%d,%d' WHERE Id = '%d'", PosExt(CegInfo[ id ][cPosBe]), CegInfo[ id ][cPosBe][3], CegInfo[id][cVw][0], CegInfo[id][cVw][1], CegInfo[id][cInt][0], CegInfo[id][cInt][1], id);
		SendFormatMessage(playerid, COLOR_MKEK, "Cég bejárata sikeresen áthelyezve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s", id, CegInfo[id][cNev], CegTulaj(id));
		return true;
	}
	else if(!strcmp(param, "kijárat", true) || !strcmp(param, "kijarat", true))
	{
		if(!IsScripter(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /cég kijárat [CégID] | Kijárat áthelyezése");
		
		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");
		
		GetPlayerPos(playerid, PosExt(CegInfo[ id ][cPosKi]));
		GetPlayerFacingAngle(playerid, CegInfo[ id ][cPosKi][3]);
		
		CegInfo[id][cVw][1] = GetPlayerVirtualWorld(playerid);
		CegInfo[id][cInt][1] = GetPlayerInterior(playerid);
		
		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET PosKi = '%f,%f,%f,%f', Vw = '%d,%d', Inte = '%d,%d' WHERE Id = '%d'", PosExt(CegInfo[ id ][cPosKi]), CegInfo[ id ][cPosKi][3], CegInfo[id][cVw][0], CegInfo[id][cVw][1], CegInfo[id][cInt][0], CegInfo[id][cInt][1], id);
		SendFormatMessage(playerid, COLOR_MKEK, "Cég kijárata sikeresen áthelyezve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s", id, CegInfo[id][cNev], CegTulaj(id));
		return true;
	}
	else if(!strcmp(param, "ár", true) || !strcmp(param, "ar", true))
	{
		if(!IsScripter(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id, ar;
		if(sscanf(params, "{s[24]}dd", id, ar))
			return SCM(playerid, COL_MKEK, "Használat: /cég ár [CégID] [Ár]");
		
		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");
			
		if(ar < 1 || ar > 3000000)
			return SCM(playerid, COL_LRED, "A cég ára minimum 1 és maximum 2 000 000$ lehet!");
			
		CegInfo[ id ][cAr] = ar;
		
		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET Ar = '%d' WHERE Id = '%d'", ar, id);
		SendFormatMessage(playerid, COLOR_MKEK, "Cég sikeresen szerkesztve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s"#COL_FEHER" - Ár: %s$", id, CegInfo[id][cNev], CegTulaj(id), FormatNumber(ar, 0, ','));
		return true;
	}
	else if(!strcmp(param, "név", true) || !strcmp(param, "nev", true))
	{
		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");
			
		if(CegInfo[ id ][cTulajID] != PlayerInfo[playerid][pID] && !Admin(playerid, FOADMIN_SZINT))
			return SCM(playerid, COL_LRED, "Csak a saját céged nevezheted át!");
		
		new nev[32];
		if(sscanf(params, "{s[24]}s[32]", nev))
			return SCM(playerid, COL_MKEK, "Használat: /cég név [Név]");
			
		if(Karakter_Ellenorzes(nev))
			return SCM(playerid, COL_LRED, "Az név nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");
			
		format(CegInfo[ id ][cNev], 32, "%s", nev);
		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET Nev = '%s' WHERE Id = '%d'", nev, id);
		SendFormatMessage(playerid, COLOR_MKEK, "Cég sikeresen szerkesztve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s", id, CegInfo[id][cNev], CegTulaj(id));
		return true;
	}
	else if(!strcmp(param, "aelad", true))
	{
		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");
			
		if(!IsScripter(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		SendFormatMessage(playerid, COLOR_MKEK, "Cég sikeresen eladva! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s", id, CegInfo[id][cNev], CegTulaj(id));
		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET TulajID = '-1', Tulaj = 'Nincs_Tulaj' WHERE Id = '%d'", id);
		CegInfo[ id ][cTulajID] = NINCS;
		CegInfo[ id ][cTulaj][0] = EOS;
		CegInfo[ id ][cFTulaj] = 0;
		return true;
	}
	else if(!strcmp(param, "széf", true) || !strcmp(param, "szef", true))
	{
		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");
			
		if(CegInfo[ id ][cTulajID] != PlayerInfo[playerid][pID] && !Admin(playerid, FOADMIN_SZINT))
			return SCM(playerid, COL_LRED, "Csak a saját céged nevezheted át!");
		
		new eparam[16];
		if(sscanf(params, "{s[24]}s[16]{}", eparam))
			return SCM(playerid, COL_MKEK, "Használat: /cég széf [ Megnéz / Utal / Betesz ]");
		
		if(!strcmp(eparam, "set", true))
		{
			if(!IsScripter(playerid))
				return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
				
			new penz;
			if(sscanf(params, "{s[24]}{s[16]}d", penz))
				return SCM(playerid, COL_MKEK, "Használat: /cég széf set [Összeg]");
				
			SFM(playerid, COL_VZOLD, "Cég: "#COL_MKEK"%s"#COL_FEHER" sikeresen szerkesztve! Régi egyenleg: "#COL_MKEK"%s"#COL_FEHER"$ | Új egyenleg: "#COL_MKEK"%s"#COL_FEHER"$", CegInfo[id][cANev], FormatNumber(CegInfo[id][cKassza], 0, ','), FormatNumber(penz, 0, ','));
			CegInfo[id][cKassza] = penz;
			return true;
		}
		else if(!strcmp(eparam, "betesz", true))
		{
		    new osszeg;
		    if(sscanf(params, "{s[24]}{s[16]}d",osszeg))
		        return SCM(playerid,COL_MKEK,"Használat: /cég széf betesz [Összeg]");
			else if(osszeg > 25000)
			    return SCM(playerid,COL_LRED,"Max. 25000$!");
			else if(PlayerInfo[playerid][ppenz] < osszeg)
			    return SCM(playerid,COL_LRED,"Nincs ennyi pénz nálad!");
			else {
				CegInfo[id][cKassza] += osszeg;
				GiveMoney(playerid,-osszeg);
				SFM(playerid,COL_MKEK,"Beraktál %d$-t a cég széfjébe.",osszeg);
			}
		}
		else if(!strcmp(eparam, "megnéz", true) || !strcmp(eparam, "megnez", true))
		{
			SendClientMessage(playerid, COLOR_WHITE, "============== [ "#COL_MKEK"Széf"#COL_FEHER" ] ==============");
			SendFormatMessage(playerid, COLOR_WHITE, "Széf tartalma: "#COL_MKEK"%s"#COL_FEHER"$", FormatNumber(CegInfo[id][cKassza], 0, ','));
			return true;
		}
		else if(!strcmp(eparam, "utal", true))
		{
			new bsz, penz;
			if(sscanf(params, "{s[24]}{s[16]}dd", bsz, penz))
				return SCM(playerid, COL_MKEK, "Használat: /cég széf utal [Bankszámlaszám] [Összeg]");
				
			if(penz < 3 || penz > 450000)
				return SCM(playerid, COL_LRED, "Hibás összeg! Az összeg minimum 3$ és maximum 45 000$ lehet!");
				
			if((CegInfo[id][cKassza] - 215) < penz)
				return SCM(playerid, COL_LRED, "Nincs ennyi pénz a kasszában! Minimum 215$-nak maradni kell a széfben!");
			
			new player = NINCS;
			foreach(Player, pid)
			{
				if(!Belepve(pid))
					continue;
					
				if(PlayerInfo[pid][pBsz] == bsz)
				{
					player = pid;
					break;
				}
			}
			
			if(player == NINCS)
				return SCM(playerid, COL_LRED, "Ez a bankszámlaszám nem található a rendszerben!");
			
			SendFormatMessage(playerid, COLOR_WHITE, "Összeg kiutalva a "#COL_MKEK"%s"#COL_FEHER" bankszámlaszámra! Összeg: "#COL_MKEK"%s"#COL_FEHER"$", FormatNumber(bsz, 0, '-'), FormatNumber(CegInfo[id][cKassza], 0, ','));
			SendFormatMessage(player, COLOR_WHITE, "Utalás történt a bankszámládra! Feladó: "#COL_MKEK"%s"#COL_FEHER" | Összeg: "#COL_MKEK"%s"#COL_FEHER"$", CegInfo[id][cANev], FormatNumber(CegInfo[id][cKassza], 0, ','));
			
			PlayerInfo[player][pBszPenz] += penz;
			CegInfo[id][cKassza] -= penz;
		}
		return true;
	}
	else if(!strcmp(param, "belépõ", true) || !strcmp(param, "belepo", true))
	{
		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");
			
		if(CegInfo[ id ][cTulajID] != PlayerInfo[playerid][pID] && !Admin(playerid, FOADMIN_SZINT))
			return SCM(playerid, COL_LRED, "Csak a saját céged belépõjét állíthatod át!");
		
		new ar;
		if(sscanf(params, "{s[24]}d", ar))
			return SCM(playerid, COL_MKEK, "Használat: /cég belépõ [Összeg]");
		
		if(id == BIZ_HIR && (ar < 1 || ar > 120))
			return SCM(playerid, COL_LRED, "Egy hírdetés ára maximum 120$ lehet!");
		else if(ar < 1 || ar > 1000)
			return SCM(playerid, COL_LRED, "A cég belépõje minimum 1 és maximum 1000$ lehet!");
			
		CegInfo[ id ][cBelepo] = ar;
		SendFormatMessage(playerid, COLOR_MKEK, "Cég sikeresen szerkesztve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s"#COL_FEHER" Belépõ: "#COL_MKEK"%s$", id, CegInfo[id][cNev], CegTulaj(id), FormatNumber(ar, 0, ','));
		return true;
	}
	else if(!strcmp(param, "vesz", true))
	{
		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");
			
		if(CegInfo[ id ][cTulajID] != NINCS)
			return SCM(playerid, COL_LRED, "Ennek a cégnek már van tulaja!");
			
		if(CegInfo[id][cAr] > PlayerInfo[playerid][pBszPenz])
			return SFM(playerid, COL_LRED, "A cég ára "#COL_MKEK"%s"#COL_FEHER"$, neked nincs ennyi a bankszámládon!", FormatNumber(CegInfo[id][cAr], 0, ','));
		
		PlayerInfo[playerid][pBszPenz] -= CegInfo[id][cAr];
		CegInfo[ id ][cTulajID] = PlayerInfo[playerid][pID];
		Adat_Update( playerid, ADAT_CEG );
		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET Tulaj = '%s', TulajID = '%d' WHERE Id = '%d'", PlayerInfo[playerid][pNev], PlayerInfo[playerid][pID], id);
		SendFormatMessage(playerid, COLOR_MKEK, "Sikeresen megvetted a(z) "#COL_MKEK"%s"#COL_FEHER" nevû céget! Ára: "#COL_MKEK"%s"#COL_FEHER"$", id, CegInfo[id][cNev], FormatNumber(CegInfo[id][cAr], 0, ','));
		return true;
	}
	else if(!strcmp(param, "töröl", true) || !strcmp(param, "torol", true))
	{
		if(!IsScripter(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id = KozeliCeg( playerid );
		if(id == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egyik cég bejárata se!");
			
		if(CegInfo[ id ][cTulajID] != NINCS && PlayerInfo[playerid][pMegerosites] != playerid)
		{
			PlayerInfo[playerid][pMegerosites] = playerid;
			SCM(playerid, COL_LRED, "Ennek a cégnek már van tulaja! Biztos, hogy törölni szeretnéd? Ha igen írd be újra!");
			return true;
		}
		
		PlayerInfo[playerid][pMegerosites] = NINCS;
		doQuery("DELETE FROM `"#MYSQL_CEGEK_TABLA"` WHERE Id = '%d'", id);
		
		SendFormatMessage(playerid, COLOR_MKEK, "Sikeresen törölted a(z) "#COL_MKEK"%s"#COL_FEHER" nevû céget!", id, CegInfo[id][cNev]);
		if(IsValidDynamicPickup( CegInfo[id][cPickup] )) DestroyDynamicPickup( CegInfo[id][cPickup] );
		for(new i = NINCS; ++i != sizeof(CegInfo[]);) CegInfo[id][ceginfo:i] = EOS;
		CegInfo[id][cVan] = false;
		return true;
	}
	else if(!strcmp(param, "típus", true) || !strcmp(param, "tipus", true))
	{
		if(!IsScripter(playerid))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id, tipus;
		if(sscanf(params, "{s[24]}dd", id, tipus))
			return SCM(playerid, COL_MKEK, "Használat: /cég típus [CégID] [Típus]");
		
		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");
			
		if(tipus < 1 || tipus > 100)
			return SCM(playerid, COL_LRED, "A cég típusa minimum 1 és maximum 100 lehet!");
			
		CegInfo[ id ][cTipus] = tipus;
		
		doQuery("UPDATE `"#MYSQL_CEGEK_TABLA"` SET Tipus = '%d' WHERE Id = '%d'", tipus, id);
		SendFormatMessage(playerid, COLOR_MKEK, "Cég sikeresen szerkesztve! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s"#COL_FEHER" - Típus: %s", id, CegInfo[id][cNev], CegTulaj(id), CegTipus(tipus));
		return true;
	}
	else if(!strcmp(param, "infó", true) || !strcmp(param, "info", true))
	{
		if(!Admin(playerid, 5))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /cég info [CégID] | Információk lekérése");
		
		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");
		
		SendClientMessage(playerid, COLOR_WHITE, "=================== ["#COL_MKEK" Céginformáció "#COL_FEHER"] ===================");
		SendFormatMessage(playerid, COLOR_WHITE, "Cég: "#COL_MKEK"%s"#COL_FEHER" | Rövid név: "#COL_MKEK"%s", CegInfo[id][cNev], CegInfo[id][cANev]);
		SendFormatMessage(playerid, COLOR_WHITE, "Tulaj: "#COL_MKEK"%s"#COL_FEHER" | Kassza tartalma: "#COL_MKEK"%s$", CegTulaj(id, true), FormatNumber(CegInfo[id][cKassza], 0, ','));
		SendFormatMessage(playerid, COLOR_WHITE, "Ára: "#COL_MKEK"%s$", FormatNumber(CegInfo[id][cAr], 0, ','));
		return true;
	}
	else if(!strcmp(param, "go", true) || !strcmp(param, "goto", true))
	{
		if(!Admin(playerid, 5))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		new id, mi[4];
		if(sscanf(params, "{s[24]}s[4]d", mi, id))
			return SCM(playerid, COL_MKEK, "Használat: /cég go [ Ki / Be ] [CégID]");
		
		if(id > MAX_CEG || id < 0 || !CegInfo[ id ][cVan])
			return SCM(playerid, COL_LRED, "Nincs ilyen cég létrehozva!");
			
		if(!strcmp(mi, "ki", true))
		{
			if(CegInfo[ id ][cPosKi][0] == 0.0)
				return SCM(playerid, COL_LRED, "Ennek a cégnek nincs lehelyezett kijárata!");
		
			SetPos(playerid, PosExt(CegInfo[ id ][cPosKi]));
			SetPlayerFacingAngle(playerid, CegInfo[ id ][cPosKi][3]);
		}
		else if(!strcmp(mi, "be", true))
		{
			if(CegInfo[ id ][cPosBe][0] == 0.0)
				return SCM(playerid, COL_LRED, "Ennek a cégnek nincs lehelyezett bejárata!");
			
			SetPos(playerid, PosExt(CegInfo[ id ][cPosBe]));
			SetPlayerFacingAngle(playerid, CegInfo[ id ][cPosBe][3]);
			
		} else
			return SCM(playerid, COL_LRED, "Hibás paraméter! Ki vagy bejárat?");
			
		SFM(playerid, COL_VZOLD, "Sikeresen teleportálva! Cég: "#COL_MKEK"[%d]%s"#COL_FEHER" - Tulaj: "#COL_MKEK"%s", id, CegInfo[id][cNev], CegTulaj(id));
		return true;
	}
	else if(!strcmp(param, "lista", true))
	{
		new c = NINCS;
		for(;++c < MAX_CEG;)
		{
			if(!CegInfo[c][cVan]) continue;
			SendFormatMessage(playerid, COLOR_WHITE, "Id: "#COL_MKEK"%d"#COL_FEHER" | Cég: "#COL_MKEK"%s"#COL_FEHER" | Tulaj: "#COL_MKEK"%s", c, CegInfo[c][cNev], CegTulaj( c ), FormatNumber(CegInfo[c][cKassza], 0, ','));
		}
		
		return true;
	}
	
	return true;
}

CMD:megtankol(playerid, params[])
{
	#pragma unused params
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new vid;
	foreach(Jarmuvek, id)
	{
		vid = JarmuID(id, playerid);
		if(vInfo[vid][vHasznalva])
		{
			vInfo[vid][vUzemanyag] = MAX_Benzin[vInfo[vid][vModel] - 400];
		}
	}
	
	AdminUzenet(COLOR_LIGHTRED, 1, "%s megtankolta az összes jármûvet!", JatekosNev(playerid));
	SendClientMessage(playerid, COLOR_WHITE, "Minden jármû sikeresen megtankolva!");
	return true;
}

CMD:le(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1))
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPos(playerid, slx, sly, slz-2);
	} else {
		new Float:slx, Float:sly, Float:slz;
		GetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz);
		SetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz-2);
	}
	return true;
}

CMD:fel(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1))
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPos(playerid, slx, sly, slz+2);
	} else {
		new Float:slx, Float:sly, Float:slz;
		GetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz);
		SetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz+2);
	}
	return true;
}

CMD:bal(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1))
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPos(playerid, slx-2, sly, slz);
	} else {
		new Float:slx, Float:sly, Float:slz;
		GetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz);
		SetVehiclePos(GetPlayerVehicleID(playerid), slx-2, sly, slz);
	}
	return true;
}

CMD:jobb(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1))
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(!IsPlayerInAnyVehicle(playerid))
	{
		new Float:slx, Float:sly, Float:slz;
		GetPlayerPos(playerid, slx, sly, slz);
		SetPlayerPos(playerid, slx, sly+2, slz);
	} else {
		new Float:slx, Float:sly, Float:slz;
		GetVehiclePos(GetPlayerVehicleID(playerid), slx, sly, slz);
		SetVehiclePos(GetPlayerVehicleID(playerid), slx, sly+2, slz);
	}
	return true;
}

CMD:crs(playerid, params[])
{
    if(!Admin(playerid, 1))
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new car = NINCS;
	if(isnull(params))
	{
		if(!IsPlayerInAnyVehicle(playerid))
			car = GetClosestVehicle(playerid);
		else
			car = GetPlayerVehicleID(playerid);
		
		if(GetDistanceToVehicle(playerid, car) > 5.0)
			return SCM(playerid, COL_MKEK, "Nincs a közeledben jármû! Lehetõségek: /crs [ JármûID / All ]");
	} else {
	
		new param[24], extra = NINCS;
		sscanf(params, "s[24]D(-1)", param, extra);
		
		if(Admin(playerid, FOADMIN_SZINT))
		{
			if(!strcmp(param, "all"))
			{
				//if(Admin(playerid, FOADMIN_SZINT))
				//{
				if(extra == NINCS)// extra = 0;
					return SCM(playerid, COL_MKEK, "Használat: /crs all [0/1] | 0 = Javítás nélkül, 1 = Javítás");
				
				if(extra != 0 && extra != 1)
					return SCM(playerid, COL_LRED, "Hibás érték! 0 = Jármûvek nem javulnak meg, 1 = Jármûvek megjavulnak");
				//} else
					//extra = 0;
					
				ServerInfo[0][sCarResi][0] = 30;// másodperc múlva jármû respawn
				ServerInfo[0][sCarResi][1] = extra;// jármûvek javuljanak-e vagy sem
				AdminUzenet(COLOR_LIGHTRED, 1, "%s elindította a jármû respawnt! Hátralévõ idõ: %dmp (Jármûvek %s)",JatekosNev(playerid), ServerInfo[0][sCarResi][0], (extra ? ("javulnak") : ("nem javulnak")));
				return true;
			}
		}
		car = strval(param);
		if(car < 1 || car > MAX_VEHICLES || !IsVehicleConnected(car))
			return SCM(playerid, COL_LRED, "Ez a Jármû ID nincs spawnolva!");
	}
	
	new vid = JarmuID(car, playerid ), Float:HP;
	GetVehicleHealth(car, HP);
	if(HP < 350) HP = 350.0;
	
	if(vInfo[vid][vMunka] < 20)
		GetVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
	
	SetVehicleToRespawn(vInfo[vid][vID]);
	
	if(vInfo[vid][vMunka] < 20)
	{
		SetVehicleHealth(vInfo[vid][vID], HP);
		vInfo[vid][vElet] = HP;
		vehicleh[vInfo[vid][vID]] = HP;
		UpdateVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
	} else {
		vInfo[vid][vElet] = 1000.0;
		vehicleh[vInfo[vid][vID]] = 1000.0;
	}
	SendFormatMessage(playerid, COLOR_GREEN, "Respawnoltál egy %s típusú jármûvet! Tulaj: %s | JármûID: %d[%d]", VehicleNames[GetVehicleModel(car) - 400], JarmuTulaj(vid), car, vid);
	
	return true;
}

CMD:flymode(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1))
        return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben nem használhatod!");
	if(PlayerInfo[playerid][pTV][0] != NINCS)
		return SCM(playerid, COL_LRED, "Megfigyelés közben nem használhatod!");
	if(Bortonben(playerid))
		return SCM(playerid, COL_LRED, "Börtönben nem használhatod!");

    if(GetPVarType(playerid, "FlyMode"))
    {
		GetPlayerPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz]);
		PlayerInfo[playerid][pinterior] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pvirtualworld] = GetPlayerVirtualWorld(playerid);
		GetPlayerFacingAngle(playerid, PlayerInfo[playerid][pangle]);
		
        CancelFlyMode(playerid);
		if(!Admin(playerid, FOADMIN_SZINT))
			AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s kilépett a FlyMode-ból!", JatekosNev(playerid));
			
        SCM(playerid, COL_MKEK, "Teleportálva FlyMode-ból!");
		
	} else {
	
		if(!Admin(playerid, FOADMIN_SZINT))
			AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s FlyMode-ba lépett!", JatekosNev(playerid));
			
        SCM(playerid, COL_MKEK, "Flymode-ba léptél! Ahol kilépsz belõle oda fogsz teleportálni.");
		GetPlayerPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz]);
	    FlyMode(playerid);
	}
	return true;
}

CMD:tele(playerid, params[])
{
	#pragma unused params
    if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new
	    i = -1,
		listitemid = 0,
		teleport[128],
		teleportok[2048];

	for(;++i < MAX_TELEPORT;)
	{
	    if(TPInfo[i][tphasznalva])
	    {
	        TPInfo[i][listid] = listitemid;
	        if(PlayerInfo[playerid][padmin] >= FOADMIN_SZINT)
	        	format(teleport, sizeof(teleport), "[%d] %s\n",i, TPInfo[i][tpnev]);
			else
			    format(teleport, sizeof(teleport), "%s\n", TPInfo[i][tpnev]);
			    
	        strins(teleportok, teleport, strlen(teleportok));
	        listitemid++;
	    }
	}
	ShowPlayerDialog(playerid, DIALOG_TELEPORTOK, DIALOG_STYLE_LIST, "Teleportok", teleportok, "Tele", "Mégse");
	return true;
}

CMD:telecsin(playerid, params[])
{
    if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new teleportnev[32];
	if(sscanf(params, "s[32]", teleportnev))
		return SCM(playerid, COL_MKEK, "Használat: /telecsin [Teleport neve]");
	
	new
	    t = -1,
	    teleportid = UjTeleportID();

	for(;++t < MAX_TELEPORT;)
    {
        if(TPInfo[t][tphasznalva])
        {
            if(!strcmp(teleportnev, TPInfo[t][tpnev], true))
            {
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Már van ilyen név!");
            }
        }
    }

	if(teleportid > 0)
	{
		new Float:tppos[4], pint = GetPlayerInterior(playerid), pvw = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, tppos[0], tppos[1], tppos[2]);
		GetPlayerFacingAngle(playerid, tppos[3]);
		
		TPInfo[teleportid][tposx] = tppos[0];
		TPInfo[teleportid][tposy] = tppos[1];
		TPInfo[teleportid][tposz] = tppos[2];
		TPInfo[teleportid][tangle] = tppos[3];
		TPInfo[teleportid][tinterior] = pint;
		TPInfo[teleportid][tvw] = pvw;
		TPInfo[teleportid][tphasznalva] = true;
		format(TPInfo[teleportid][tpnev], 32, teleportnev);
		
		doQuery("INSERT INTO `"#MYSQL_TELEPORT_TABLA"` (id, tposx, tposy, tposz, tangle, tpnev, tinterior, tvw) VALUES ('%d', '%f', '%f', '%f', '%f', '%s', '%d', '%d')", teleportid, tppos[0], tppos[1], tppos[2], tppos[3], teleportnev, pint, pvw);
		
		AdminUzenet(COLOR_LIGHTRED,PlayerInfo[playerid][padmin], "%s hozzáadott egy új teleportot a listához, Neve: %s", JatekosNev(playerid), TPInfo[teleportid][tpnev]);
		SendFormatMessage(playerid, COLOR_GREEN, "Teleport sikeresen létrehozva! Interior: %d | VirtualWorld: %d", pint, pvw);
		return true;
	} else
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Elértük a teleport limitet!");
}

CMD:teletorol(playerid, params[])
{
    if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	    
 	new t = NINCS;
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /teletorol [Teleport neve vagy ID-je]");

	if(IsNumeric(params)) t = strval(params);
	else t = TeleNameToID(params);
	
	if(t == NINCS || !TPInfo[t][tphasznalva])
    	return SendClientMessage(playerid,COLOR_LIGHTRED,"Hiba történt! Nincs ilyen teleport létrehozva!");

    TPInfo[t][tposx] = 0.0;
	TPInfo[t][tposy] = 0.0;
	TPInfo[t][tposz] = 0.0;
	TPInfo[t][tangle] = 0.0;
	TPInfo[t][listid] = 0;
	TPInfo[t][tinterior] = 0;
	TPInfo[t][tvw] = 0;

	doQuery("DELETE FROM `"#MYSQL_TELEPORT_TABLA"` WHERE tpnev = '%s'", TPInfo[t][tpnev]);
	
	AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s törölt egy teleportot a listából! Neve: %s", JatekosNev(playerid), TPInfo[t][tpnev]);
	SendClientMessage(playerid,COLOR_GREEN,"Teleport sikeresen törölve!");
	TPInfo[t][tpnev] = EOS;
	TPInfo[t][tphasznalva] = false;
	return true;
}

CMD:flip(playerid, params[])//ah-ban
{
	#pragma unused params
    if(!Admin(playerid, 2))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
 	if(!IsPlayerInAnyVehicle(playerid))
	    return SCM(playerid, COL_LRED, "Jármûben kell ülnöd!");
		
	new currentveh;
	new Float:angle;
	currentveh = GetPlayerVehicleID(playerid);
	GetVehicleZAngle(currentveh, angle);
	SetVehicleZAngle(currentveh, angle);
	SCM(playerid, COL_VZOLD, "Jármûved felállítva!");
	return true;
}

CMD:vr(playerid, params[])//ah-ban
{
	#pragma unused params
	if(!Admin(playerid, 5))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(Admin(playerid, AC_SZINT)) SCM(playerid, COL_MKEK, "Összes jármû javításához használat: /vr all");
	if(!isnull(params) && !strcmp(params, "all", true))
	{
		if(!Admin(playerid, AC_SZINT))
			return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
		foreach(Jarmuvek, id)
		{
			new vid = JarmuID(id, playerid);
			vehicleh[ id ] = 1000.0;
			RepairVehicle( id );
			
			vInfo[vid][vElet] = 1000.0;
			vUpdate(vid, vuElet);
		}
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s megjavította az összes jármûvet!", JatekosNev(playerid));
	} 
	else
	{
		new car = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, car) > 5.0 && !IsPlayerInAnyVehicle(playerid))
			return SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");

		SCM(playerid, COL_VZOLD, "Sikeresen megjavítottad a jármûvet!");
		
		new
			v_id = 0,
			vid = JarmuID(v_id, playerid);
		
		if(IsPlayerInAnyVehicle(playerid))
			v_id = GetPlayerVehicleID(playerid);
		else
			v_id = car;
		
		vInfo[vid][vElet] = 1000.0;
		vehicleh[ v_id ] = 1000.0;
		RepairVehicle( v_id );
		vUpdate(vid, vuElet);
	}
	return true;
}
	
CMD:ujhaz(playerid, params[])
{
    new price, belso, tipus;
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(sscanf(params, "ddd", belso, price, tipus))
		return SCM(playerid, COL_MKEK, "Használat: /ujhaz [Interior(0-18)] [Ár] [Típus] | 1 = Lakás, 2 = GN, 3 = LS, 4 = Gettó, 5 = Falu");
	
	if(tipus > 5 || tipus < 1)
			return SCM(playerid, COL_LRED, "Hibás típus! 1 = Lakás, 2 = GN, 3 = LS, 4 = Gettó, 5 = Falu");
	
	if(belso > 18 || belso < 0)
		return SCM(playerid, COL_LRED, "Hibás interior! 0 és 18 között lehet!");
		
	if(price < 1 || price > MAX_ERTEK)
		return SFM(playerid, COL_LRED, "Helytelen érték! Az ára minimum 1 és maximum %s dollár lehet!", FormatNumber(MAX_ERTEK, 0, ','));
	
	new houseid = GetNewHouseID();
	if(houseid == NINCS)
		return SCM(playerid, COL_LRED, "Nem lehetett létrehozni több házat, mert a házak száma elérte a limitet! ("#MAX_HOUSE" db)");
	
	new Float:pos[3];
	GetPlayerPos(playerid, PosExt(pos));
	format(uzenet, sizeof(uzenet), "Házszám: ~g~%d.~n~~w~Ár: ~g~%d.~n~~w~Tulaj: ~g~Senki.", houseid, price);
	
	HazInfo[houseid][hasznalatban] = true;
	HazInfo[houseid][butorsz] = 25;
	HazInfo[houseid][hazar] = price;
	HazInfo[houseid][hTulajID] = NINCS;
	HazInfo[houseid][posx] = pos[0];
	HazInfo[houseid][posy] = pos[1];
	HazInfo[houseid][posz] = pos[2];
	HazInfo[houseid][hTipus] = tipus;
	
	SpawnHouse(houseid, uzenet, HAZ_MEGVEHETO_MODEL);
	BelsoPickup(houseid, belso);
	UjUltetveny( houseid );
	
	nformat(querycs, 1024, "INSERT INTO `"#MYSQL_HAZ_TABLA"` (id, tulaj, TulajID, poziciox, pozicioy, pozicioz, interior, ar, hTipus) VALUES ('%d', 'Nincs_Tulaj', '-1', '%f', '%f', '%f', '%d', '%d', '%d')", houseid, HazInfo[houseid][posx], HazInfo[houseid][posy], HazInfo[houseid][posz], belso, price, tipus);
	mysql_tquery(sql_ID, querycs, "", "");
	
	SFM(playerid, COL_VZOLD, "Ház létrehozva! ID: %d. Ár: %s$ Interior: %d.", houseid, FormatNumber(price, 0, ','), belso);
	Streamer_Update(playerid);
	return true;
}

CMD:ban(playerid, params[])//ah-ban
{
    new player, ido, oka[32];
	if(!Admin(playerid, 2))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(sscanf(params, "uds[32]", player, ido, oka))
	    return SCM(playerid, COL_MKEK, "Használat: /ban [Játékos] [Idõ(óra) | 0 = örök] [Oka]");
		
	if(player == INVALID_PLAYER_ID|| !IsPlayerConnected(player))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
	if(IsPlayerNPC(player))
	    return SCM(playerid, COL_LRED, "NPC-t ne banold!");
		
    if((player == playerid) && !IsScripter(playerid))
	    return SCM(playerid, COL_LRED, "Cicaborsó magadat nem fogod banolni!");
		
	if(strlen(oka) > 50 || strlen(oka) < 3)
	    return SCM(playerid, COL_LRED, "Minimum 3 és maximum 51 karakter lehet!");
		
 	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin])
    {
    	SendClientMessage(playerid, COLOR_WHITE, "Nagyobb Admint nem banolhatsz! Mégis mit képzelsz?");
    	SendFormatMessage(player, COLOR_WHITE, "%s banolni akart téged!", JatekosNev(playerid));
    	AdminUzenet(COLOR_LIGHTRED, 1001, "[Admin]!! [%s]%s bannolni akarta [%s]%s-t! !!", playerid, JatekosNev(playerid), player, JatekosNev(player));
    	return true;

	}
	
	#if ACCOUNT_KEZELES == 1
	if(!Belepve(player))
		return SCM(playerid, COL_LRED, "Ez a játékos nincs belépve ezért csak IP-re tudod tiltani! /ipban");
	#endif
	
	//new uIdo = 0;
	//if(ido) uIdo = (gettime() + (60 * 60 * ido));
	new date[3],time[3];
	getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Ban')", JatekosNev(playerid), PosExt(date), time[0], time[1]);

    ServerBan(player, ido, oka, playerid, false, true, true);
 	return true;
}

CMD:ipban(playerid, params[])//ah-ban
{
    new player, ido, oka[32];
	if(!Admin(playerid, 2))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(sscanf(params, "uds[32]", player, ido, oka))
	    return SCM(playerid, COL_MKEK, "Használat: /ipban [Játékos] [Idõ(óra) | 0 = örök] [Oka]");
		
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || IsPlayerNPC(player))
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "Nincs ilyen játékos!");
		
    if((player == playerid) && !IsScripter(playerid))
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "Cicaborsó magadat nem fogod banolni!");
		
	if(strlen(oka) > 50 || strlen(oka) < 3)
	    return SendClientMessage(playerid, COLOR_DARKORANGE, "Minimum 3 és maximum 51 karakter lehet!");
		
 	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
    {
    	SendClientMessage(playerid, COLOR_WHITE, "Nagyobb Admint nem banolhatsz! Mégis mit képzelsz?");
    	SendFormatMessage(player, COLOR_WHITE, "%s banolni akart téged!", JatekosNev(playerid));
    	return true;

	}
	
	new uIdo = 0;
	if(ido) uIdo = gettime() + (60*60*ido);
	
	AdminUzenet(COLOR_LIGHTRED, 1, "%s IP-re tiltotta %s-t %s Oka: %s", JatekosNev(playerid), JatekosNev(player), BanIdo(ido, true), oka);
	//ServerBan(kit, ido = 0, oka[], tilto = NINCS, bool:ipban = false, bool:kick = true, bool:szoveg = false)
    ServerBan(player, uIdo, oka, playerid, true, true, false);
 	return true;
}

CMD:object(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	new param[24];
	if(sscanf(params, "s[24]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /object [ Lerak / Szerkeszt / Töröl / Közel / Go ]");
		
	if(!strcmp(param, "lerak"))
	{
		new parame[24];
		if(sscanf(params, "{s[24]}s[10]", parame))
			return SCM(playerid, COL_MKEK, "Használat: /object lerak [ ATM / HotDog / Kuka ]");
			
		new aid = UjAutomataID(), oid, tipus;
		if(!aid)
			return SCM(playerid, COL_LRED, "Nem tudsz több autómatát lerakni!");
		
		//Hotdog: 1340, | Italautomata: 1775 | Csokiautomata: 1776 | Szerencsegép: 2754 | Telefon: 1216
		if(!strcmp(parame, "atm", true))
		{
			tipus = 1;
			oid = 2942;//atm object
			AutomataInfo[aid][autipus] = 1;
		}
		else if(!strcmp(parame, "hotdog", true))
		{
			tipus = 2;
			oid = 1340;//hotdog object
			AutomataInfo[aid][autipus] = 2;
		}
		else if(!strcmp(parame, "kuka", true))
		{
			tipus = 3;
			oid = 1227;//zöld kuka object
			AutomataInfo[aid][autipus] = 3;
		}
		else if(!oid) return true;
		
		new Float:pos[3], vw = GetPlayerVirtualWorld(playerid), int = GetPlayerInterior(playerid);
		GetPlayerPos(playerid, PosExt(pos));
		
		AutomataInfo[aid][aupos][0] = pos[0];
		AutomataInfo[aid][aupos][1] = pos[1];
		AutomataInfo[aid][aupos][2] = pos[2];
		AutomataInfo[aid][auVW] = vw;
		AutomataInfo[aid][auInt] = int;
		AutomataInfo[aid][aupenz] = (tipus == 1 ? 5000000 : 0);
		AutomataInfo[aid][auhasznalva] = true;
		
		if(!fexist(LSQL_ADATBAZIS))
		{
			print("Szerver: Kritikus hiba történt a cmd_object funkcióban! Oka: Hiányzó adatbázis!");
			SCM(playerid, COL_LRED, "Kritikus adatbázis hiba történt!");
			return true;
		}
		
		nformat(qry, 1024, "INSERT INTO `"#LSQL_AUTOMATA_TABLA"` (id, autipus, aupenz, auposx, auposy, auposz, aurotx, auroty, aurotz, vw, int) VALUES ('%d', '%d', '%d', '%f', '%f', '%f', '0.0', '0.0', '0.0', '%d', '%d')", aid, tipus, (tipus == 1 ? 5000000 : 0), PosExt(pos), vw, int);
		
		new DB:db = db_open(LSQL_ADATBAZIS);
		db_free_result(db_query(db, qry));
		db_close(db);
		
		AutomataID[playerid] = aid;
		//CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 200.0);
		AutomataInfo[aid][auobject] = CreateDynamicObject(oid, pos[0], pos[1] + 1.0, pos[2] - 0.4, 0.0, 0.0, 0.0, vw, int);
		Streamer_Update(playerid);
		EditDynamicObject(playerid, AutomataInfo[aid][auobject]);
		
		SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
		SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");
		
		return true;
	}
	else if(!strcmp(param, "szerkeszt", true))
	{
		new parame[32];
		
		if(sscanf(params, "{s[24]}s[10]", parame))
		{
			SCM(playerid, COL_MKEK, "Használat: /object szerkeszt [paraméterek]");
			SCM(playerid, COL_MKEK, "Paraméterek: pozicio, tipus");
			return true;
		}
		
		new automata = KozeliObject( playerid );
		if(automata == NINCS)
			return SCM(playerid, COL_LRED, "Nincs a közeledben egy automata se!");
		
		if(!strcmp(parame, "pozicio") || !strcmp(parame, "pozíció"))
		{
			SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
			SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");
		
			EditDynamicObject(playerid, AutomataInfo[automata][auobject]);
			AutomataInfo[automata][auszerkeszti] = true;
			AutomataID[playerid] = automata;
			return true;
		}
		else if(!strcmp(parame, "tipus") || !strcmp(parame, "típus"))
		{
			new tipusid;
				
			if(sscanf(params, "{s[24]s[10]}d", tipusid))
				return SendClientMessage(playerid, COLOR_WHITE, "Használat: /object szerkeszt tipus [1-4]");
			if(tipusid < 1 || tipusid > 4)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "A típusnak 1 és 4 között kell lennie!");
			AutomataInfo[automata][autipus] = tipusid;
			SendFormatMessage(playerid, COLOR_WHITE, "Automata típusa sikeresen beállítva %d-ra/re!", tipusid);
			DestroyDynamicObject(AutomataInfo[automata][auobject]);
			AutomataInfo[automata][auobject] = CreateDynamicObject(AutomataModel(tipusid), AutomataInfo[automata][aupos][0], AutomataInfo[automata][aupos][1], AutomataInfo[automata][aupos][2] - 0.4, AutomataInfo[automata][aupos][3], AutomataInfo[automata][aupos][4], AutomataInfo[automata][aupos][5]);
			
			//SendClientMessage(playerid, COLOR_WHITE, "Lehetõséged adódik, hogy változtass az automata pozícióján! Amennyiben tökéletesnek találod, csak kattints a Mentés (Floppy) gombra!");
			//EditDynamicObject(playerid, AutomataInfo[automata][auobject]);
			return true;
		}
		return true;
	}
	else if(!strcmp(param, "töröl", true) || !strcmp(param, "torol", true))
	{
		new id = KozeliObject( playerid );
		if(id == NINCS || GetDistanceToAutomata(playerid, id) > 5.0)
			return SCM(playerid, COL_LRED, "Nincs a közeledben szerkeszthetõ automata!");
			
		if(!fexist(LSQL_ADATBAZIS))
		{
			print("Szerver: Kritikus hiba történt a cmd_object funkcióban! Oka: Hiányzó adatbázis!");
			SCM(playerid, COL_LRED, "Kritikus adatbázis hiba történt!");
			return true;
		}
		
		if(AutomataInfo[id][autipus] == 2 && IsValidDynamic3DTextLabel(AutomataInfo[id][autext]))
			DestroyDynamic3DTextLabel(AutomataInfo[id][autext]);
		
		DestroyDynamicObject(AutomataInfo[id][auobject]);
		AutomataInfo[id][auszerkeszti] = false;
		AutomataInfo[id][aupenz] = 0;
		AutomataInfo[id][aupos] = Float:{0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
		
		nformat(query, 256, "DELETE FROM `"#LSQL_AUTOMATA_TABLA"` WHERE id = '%d'", id);
		new DB:oDB = db_open(LSQL_ADATBAZIS);
		db_free_result(db_query(oDB, query));
		db_close(oDB);
		
		SFM(playerid, COL_VZOLD, "Sikeresen töröltél egy automatát! Id: %d", id);
		return true;
	}
	if(!strcmp(param, "go"))
	{
		new id;
		if(sscanf(params, "{s[24]}d", id))
			return SCM(playerid, COL_MKEK, "Használat: /object go [AutomataID]");
			
		if(id < 0 || id > MAX_AUTOMATA || !AutomataInfo[id][auhasznalva])
			return SCM(playerid, COL_LRED, "Nincs ilyen automata létrehozva!");
		
		SetPos(playerid, AutomataInfo[id][aupos][0], (AutomataInfo[id][aupos][0] + 2), AutomataInfo[id][aupos][0]);
		SetVirtualWorld(playerid, AutomataInfo[id][auVW]);
		SetInterior(playerid, AutomataInfo[id][auInt]);
		SFM(playerid, COL_VZOLD, "Sikeresen elteleportálál az Automatára! ID: %d", id);
	}
	return true;
}
/*
CMD:ujatm(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	new Float:pos[3], vw = GetPlayerVirtualWorld(playerid), int = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, PosExt(pos));
	new tipus = 1;
	new	oid = 2942;//atm object
	AutomataInfo[aid][aupos][0] = pos[0];
	AutomataInfo[aid][aupos][1] = pos[1];
	AutomataInfo[aid][aupos][2] = pos[2];
	AutomataInfo[aid][auVW] = vw;
	AutomataInfo[aid][auInt] = int;
	AutomataInfo[aid][aupenz] = (tipus == 1 ? 5000000 : 0);
	AutomataInfo[aid][auhasznalva] = true;

	if(!fexist(LSQL_ADATBAZIS))
	{
		print("Szerver: Kritikus hiba történt a cmd_object funkcióban! Oka: Hiányzó adatbázis!");
		SCM(playerid, COL_LRED, "Kritikus adatbázis hiba történt!");
		return true;
	}

	nformat(qry, 1024, "INSERT INTO `"#LSQL_AUTOMATA_TABLA"` (id, autipus, aupenz, auposx, auposy, auposz, aurotx, auroty, aurotz, vw, int) VALUES ('%d', '%d', '%d', '%f', '%f', '%f', '0.0', '0.0', '0.0', '%d', '%d')", aid, tipus, (tipus == 1 ? 5000000 : 0), PosExt(pos), vw, int);

	new DB:db = db_open(LSQL_ADATBAZIS);
	db_free_result(db_query(db, qry));
	db_close(db);

	AutomataID[playerid] = aid;
	//CreateDynamicObject(modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, worldid = -1, interiorid = -1, playerid = -1, Float:streamdistance = 200.0);
	AutomataInfo[aid][auobject] = CreateDynamicObject(oid, pos[0], pos[1] + 1.0, pos[2] - 0.4, 0.0, 0.0, 0.0, vw, int);
	Streamer_Update(playerid);
	EditDynamicObject(playerid, AutomataInfo[aid][auobject]);

	SendClientMessage(playerid, COLOR_ORANGE, "Nézetváltáshoz használd az egeret ~k~~PED_SPRINT~ gomb lenyomása mellett. Tárgy");
	SendClientMessage(playerid, COLOR_ORANGE, "mentéséhez a Floppy ikont, a szerkesztésbõl való kilépéshez pedig az ESC gombot.");
	return 1;
}
*/
CMD:ajto(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new
	    parameterek[64],
		formazas[54 + 1];

	if(sscanf(params, "s[64]{}", parameterek))
	{
	    SCM(playerid, COL_MKEK, "Használat: /ajtó [paraméterek]");
		SCM(playerid, COL_MKEK, "[Paraméterek]: új, töröl, goto, info, zár");
		return true;
	} else {
		if(!strcmp(parameterek, "új", true) || !strcmp(parameterek, "uj", true))
		{
		    new bevagyki[4], ajnev[32], freeze, jarmu;
		    if(sscanf(params, "{s[64]}s[4]{}", bevagyki))
		        return SCM(playerid, COL_MKEK, "Használat: /ajtó új [be/ki] [név]");
			
			new Float:jpos[4];
			GetPlayerPos(playerid, jpos[0], jpos[1], jpos[2]);
			GetPlayerFacingAngle(playerid, jpos[3]);
			
		    if(!strcmp(bevagyki, "be", true))
		    {
				if(sscanf(params, "{s[64]s[4]}s[32]dd", ajnev, freeze, jarmu))
					return SCM(playerid, COL_MKEK, "Használat: /ajtó új be [Név vagy ID] [Freeze idõ (ms)] [jármû(0/1)]");
				
				if((strlen(ajnev) > 12) || (strlen(ajnev) < 1))
					return SCM(playerid, COL_LRED, "Az ajtónak 1 és 12 karakter között kell lennie!");
				
				
				new bool:van, ajtoid = AjtoKereses(ajnev);
				if(ajtoid != NINCS) van = true;
				else
				{
					if(!IsNumeric(ajnev))
						ajtoid = UjAjtoID();
					else
					{
						ajtoid = strval(ajnev);
						if(ajtoid != NINCS && ajtoid < MAX_AJTO && AjtoInfo[ajtoid][ahasznalva])
							van = true;
					}
				}
					
				if(ajtoid < 0 || ajtoid >= MAX_AJTO)
					return SCM(playerid, COL_LRED, "Nem lehetett lerakni az ajtót, mert a maximális ("#MAX_AJTO") limitet elérte vagy hibás ID-t adtál meg!");
					
				if(PlayerInfo[playerid][pMegerosites] != playerid && van) {
				
					PlayerInfo[playerid][pMegerosites] = playerid;
					SCM(playerid, COL_LRED, "Ez az ajtónév már létezik. Biztos, hogy át szeretnéd helyezni? Ha igen írd be megint!");
					return true;
					
				} else {
					
					PlayerInfo[playerid][pMegerosites] = NINCS;
					
					if(!van)
						format(AjtoInfo[ajtoid][anev], 32, "%s", ajnev);
					
					AjtoInfo[ajtoid][abepos][0] = jpos[0];
					AjtoInfo[ajtoid][abepos][1] = jpos[1];
					AjtoInfo[ajtoid][abepos][2] = jpos[2];
					AjtoInfo[ajtoid][abepos][3] = jpos[3];
					
					AjtoInfo[ajtoid][afreeze] = freeze;
					AjtoInfo[ajtoid][anyitva] = true;
					AjtoInfo[ajtoid][ajarmu] = jarmu ? true : false;
					AjtoInfo[ajtoid][abeinterior] = GetPlayerInterior(playerid);
					AjtoInfo[ajtoid][abevw] = GetPlayerVirtualWorld(playerid);
					AjtoInfo[ajtoid][ahasznalva] = true;
					
					format(formazas, sizeof(formazas), #COL_NARANCS"[Bejárat]\n"#COL_SKEK"%s", AjtoInfo[ajtoid][anev]);
					if(!van) {
						
						AjtoInfo[ajtoid][abelabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, jpos[0], jpos[1], jpos[2]+0.75,20, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
						AjtoInfo[ajtoid][abepickup] = CreateDynamicPickup(1318, 23, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						if(AjtoInfo[ajtoid][ajarmu])
							AjtoInfo[ajtoid][abepickupk] = CreateDynamicPickup(1007, 14, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						
					} else {
						
						DestroyDynamic3DTextLabel(AjtoInfo[ajtoid][abelabel]);
						AjtoInfo[ajtoid][abelabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, jpos[0], jpos[1], jpos[2]+0.75,20, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
						
						DestroyDynamicPickup(AjtoInfo[ajtoid][abepickup]);
						AjtoInfo[ajtoid][abepickup] = CreateDynamicPickup(1318, 23, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						
						if(AjtoInfo[ajtoid][ajarmu]) {
							DestroyDynamicPickup(AjtoInfo[ajtoid][abepickupk]);
							AjtoInfo[ajtoid][abepickupk] = CreateDynamicPickup(1007, 14, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						}
					}
					
					if(!fexist(LSQL_ADATBAZIS))
					{
						print("Szerver: Kritikus hiba történt a cmd_ajto funkcióban! Oka: Hiányzó adatbázis!");
						SCM(playerid, COL_LRED, "Kritikus adatbázis hiba történt!");
						return true;
					}
					
					new query[1024];
					if(!van)
					{
						format(query, sizeof(query), "INSERT INTO `"#LSQL_AJTO_TABLA"` (id, anev, abeposx, abeposy, abeposz, abeangle, afreeze, ajarmu, abeinterior, abevw) VALUES ('%d', '%s', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '%d')", ajtoid, AjtoInfo[ajtoid][anev], jpos[0], jpos[1], jpos[2], jpos[3], freeze, jarmu, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
						AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s hozzáadott egy új bejáratot a listához, Neve: %s", JatekosNev(playerid), AjtoInfo[ajtoid][anev]);
					} else {
						format(query, sizeof(query), "UPDATE `"#LSQL_AJTO_TABLA"` SET");
						format(query, sizeof(query), "%s abeposx = '%f',", query, jpos[0]);
						format(query, sizeof(query), "%s abeposy = '%f',", query, jpos[1]);
						format(query, sizeof(query), "%s abeposz = '%f',", query, jpos[2]);
						format(query, sizeof(query), "%s abeangle = '%f',", query, jpos[3]);
						format(query, sizeof(query), "%s afreeze = '%d',", query, freeze);
						format(query, sizeof(query), "%s ajarmu = '%d',", query, jarmu);
						format(query, sizeof(query), "%s abeinterior = '%d',", query, GetPlayerInterior(playerid));
						format(query, sizeof(query), "%s abevw = '%d'", query, GetPlayerVirtualWorld(playerid));
						format(query, sizeof(query), "%s WHERE id = '%d'", query, ajtoid);
						
						AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s áthelyezett egy bejáratot! Neve: %s", JatekosNev(playerid), AjtoInfo[ajtoid][anev]);
					}
					
					new DB:AjtoDB = db_open(LSQL_ADATBAZIS);
					db_free_result(db_query(AjtoDB, query));
					db_close(AjtoDB);
					SendFormatMessage(playerid, COLOR_GREEN, "Ajtó sikeresen létrehozva! Int: %d | VW: %d | Freeze: %d | Jármû: %d | [%d]%s", GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), freeze, jarmu, ajtoid, AjtoInfo[ajtoid][anev]);
					
					return true;
				}
		    } 
			else if(!strcmp(bevagyki, "ki", true))
		    {
				if(sscanf(params, "{s[64]s[4]}s[32]", ajnev))
					return SCM(playerid, COL_MKEK, "Használat: /ajtó új ki [Név vagy ID]");
				
				if(!IsNumeric(ajnev) && (strlen(ajnev) > 12) || (strlen(ajnev) < 1))
					return SCM(playerid, COL_LRED, "Az ajtónak 1 és 12 karakter között kell lennie!");
				
				new ajtoid2, bool:van;
				if(!IsNumeric(ajnev)) ajtoid2 = AjtoKereses(ajnev);
				else ajtoid2 = strval(ajnev);
				
				if(ajtoid2 < 0 || ajtoid2 >= MAX_AJTO || !AjtoInfo[ajtoid2][ahasznalva])
					return SCM(playerid, COL_LRED, "Elõször rakj le egy bejáratot!");
				
				if(AjtoInfo[ajtoid2][akipos][0] != 0.0)
					van = true;
				
				if(PlayerInfo[playerid][pMegerosites] != playerid && van)
				{
					PlayerInfo[playerid][pMegerosites] = playerid;
					SCM(playerid, COL_LRED, "Ez az ajtónév már létezik. Biztos, hogy át szeretnéd helyezni? Ha igen írd be megint!");
					return true;
				
				} else {
				
					PlayerInfo[playerid][pMegerosites] = NINCS;
					format(AjtoInfo[ajtoid2][anev], 32, ajnev);
					
					AjtoInfo[ajtoid2][akipos][0] = jpos[0];
					AjtoInfo[ajtoid2][akipos][1] = jpos[1];
					AjtoInfo[ajtoid2][akipos][2] = jpos[2];
					AjtoInfo[ajtoid2][akipos][3] = jpos[3];
					
					AjtoInfo[ajtoid2][akiinterior] = GetPlayerInterior(playerid);
					AjtoInfo[ajtoid2][akivw] = GetPlayerVirtualWorld(playerid);
					AjtoInfo[ajtoid2][anyitva] = true;
					
					format(formazas, sizeof(formazas), #COL_NARANCS"[Kijárat]\n"#COL_SKEK"%s", AjtoInfo[ajtoid2][anev]);
					
					if(!van) {
					
						AjtoInfo[ajtoid2][akilabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, jpos[0], jpos[1], jpos[2]+0.75,20, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
						AjtoInfo[ajtoid2][akipickup] = CreateDynamicPickup(1318, 23, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						if(AjtoInfo[ajtoid2][ajarmu])
							AjtoInfo[ajtoid2][akipickupk] = CreateDynamicPickup(1007, 14, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
					
					} else {
						
						DestroyDynamic3DTextLabel(AjtoInfo[ajtoid2][akilabel]);
						AjtoInfo[ajtoid2][akilabel] = CreateDynamic3DTextLabel(formazas, 0xFFFFFF, jpos[0], jpos[1], jpos[2]+0.75,20, .worldid = GetPlayerVirtualWorld(playerid), .interiorid = GetPlayerInterior(playerid));
						
						DestroyDynamicPickup(AjtoInfo[ajtoid2][akipickup]);
						AjtoInfo[ajtoid2][akipickup] = CreateDynamicPickup(1318, 23, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						
						if(AjtoInfo[ajtoid2][ajarmu])
						{
							DestroyDynamicPickup(AjtoInfo[ajtoid2][akipickupk]);
							AjtoInfo[ajtoid2][akipickupk] = CreateDynamicPickup(1007, 14, jpos[0], jpos[1], jpos[2], GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
						}
					}
					
					if(!fexist(LSQL_ADATBAZIS))
					{
						print("Szerver: Kritikus hiba történt a cmd_ajto funkcióban! Oka: Hiányzó adatbázis!");
						SCM(playerid, COL_LRED, "Kritikus adatbázis hiba történt!");
						return true;
					}
					
					new query[512];
					format(query, sizeof(query), "UPDATE `"#LSQL_AJTO_TABLA"` SET");
					format(query, sizeof(query), "%s akiposx = '%f',", query, jpos[0]);
					format(query, sizeof(query), "%s akiposy = '%f',", query, jpos[1]);
					format(query, sizeof(query), "%s akiposz = '%f',", query, jpos[2]);
					format(query, sizeof(query), "%s akiangle = '%f',", query, jpos[3]);
					format(query, sizeof(query), "%s akiinterior = '%d',", query, GetPlayerInterior(playerid));
					format(query, sizeof(query), "%s akivw = '%d'", query, GetPlayerVirtualWorld(playerid));
					format(query, sizeof(query), "%s WHERE id = '%d'", query, ajtoid2);
					new DB:AjtoDB = db_open(LSQL_ADATBAZIS);
					db_free_result(db_query(AjtoDB, query));
					db_close(AjtoDB);
				
					if(!van) AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s hozzáadott egy új kijáratot a listához, Neve: %s", JatekosNev(playerid), AjtoInfo[ajtoid2][anev]);
					else AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s áthelyezett egy kijáratot! Neve: %s", JatekosNev(playerid), AjtoInfo[ajtoid2][anev]);
					
					SendFormatMessage(playerid, COLOR_GREEN, "Ajtó sikeresen létrehozva! Int: %d | VW: %d | [%d]%s", GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), ajtoid2, AjtoInfo[ajtoid2][anev]);
				}
				
				return true;
		    }
			return true;
		} else if(!strcmp(parameterek, "töröl", true))
		{
			new ajtonev[32], ajtoidje;
			
			if(sscanf(params, "{s[64]}s[32]", ajtonev))
				return SCM(playerid, COL_MKEK, "Használat: /ajtó töröl [Név vagy ID]");
				
			if(!IsNumeric(ajtonev)) ajtoidje = AjtoKereses(ajtonev);
			else ajtoidje = strval(ajtonev);
			
			if(ajtoidje < MAX_AJTO && ajtoidje > NINCS)
			{
				AjtoInfo[ajtoidje][anev] = EOS;
				AjtoInfo[ajtoidje][abepos][0] = 0.0;
				AjtoInfo[ajtoidje][abepos][1] = 0.0;
				AjtoInfo[ajtoidje][abepos][2] = 0.0;
				AjtoInfo[ajtoidje][abepos][3] = 0.0;
				AjtoInfo[ajtoidje][akipos][0] = 0.0;
				AjtoInfo[ajtoidje][akipos][1] = 0.0;
				AjtoInfo[ajtoidje][akipos][2] = 0.0;
				AjtoInfo[ajtoidje][akipos][3] = 0.0;
				AjtoInfo[ajtoidje][afreeze] = 0;
				AjtoInfo[ajtoidje][anyitva] = false;
				AjtoInfo[ajtoidje][ajarmu] = false;
				AjtoInfo[ajtoidje][abeinterior] = 0;
				AjtoInfo[ajtoidje][akiinterior] = 0;
				AjtoInfo[ajtoidje][abevw] = 0;
				AjtoInfo[ajtoidje][akivw] = 0;
				AjtoInfo[ajtoidje][ahasznalva] = false;
				DestroyDynamic3DTextLabel(AjtoInfo[ajtoidje][abelabel]);
				DestroyDynamic3DTextLabel(AjtoInfo[ajtoidje][akilabel]);
				DestroyDynamicPickup(AjtoInfo[ajtoidje][abepickup]);
				DestroyDynamicPickup(AjtoInfo[ajtoidje][akipickup]);
				
				if(!fexist(LSQL_ADATBAZIS))
				{
					print("Szerver: Kritikus hiba történt a cmd_ajto funkcióban! Oka: Hiányzó adatbázis!");
					SCM(playerid, COL_LRED, "Kritikus adatbázis hiba történt!");
					return true;
				}
				
				nformat(queryn, 128, "DELETE FROM `"#LSQL_AJTO_TABLA"` WHERE anev = '%s'", ajtonev);
				new DB:AjtoDB = db_open(LSQL_ADATBAZIS);
				db_free_result(db_query(AjtoDB, queryn));
				db_close(AjtoDB);
				
				AdminUzenet(COLOR_LIGHTRED,1, "%s törölt egy ajtót a listából! Neve: %s", JatekosNev(playerid), ajtonev);
				SCM(playerid, COL_MKEK, "Ajtó sikeresen törölve!");
				return true;
			}
			SCM(playerid, COL_LRED, "Nincs ilyen ajtó létrehozva!");
		} else if(!strcmp(parameterek, "zár", true))
		{
			new kozeliajto = KozeliAjto(playerid), qajuery[128];
			if(kozeliajto > 0)
			{
				if(AjtoInfo[kozeliajto][anyitva])
				{
					format(qajuery, sizeof(qajuery), "UPDATE `"#LSQL_AJTO_TABLA"` SET anyitva = '0' WHERE id = '%d'", kozeliajto);
					AjtoInfo[kozeliajto][anyitva] = false;
					SFM(playerid, COL_MKEK, "Ajtó bezárva! Név: %s", AjtoInfo[kozeliajto][anev]);
				} else {
					format(qajuery, sizeof(qajuery), "UPDATE `"#LSQL_AJTO_TABLA"` SET anyitva = '1' WHERE id = '%d'", kozeliajto);
					AjtoInfo[kozeliajto][anyitva] = true;
					SFM(playerid, COL_MKEK, "Ajtó kinyitva! Név: %s", AjtoInfo[kozeliajto][anev]);
				}
				
				if(!fexist(LSQL_ADATBAZIS))
				{
					print("Szerver: Kritikus hiba történt a cmd_ajto funkcióban! Oka: Hiányzó adatbázis!");
					SCM(playerid, COL_LRED, "Kritikus adatbázis hiba történt!");
					return true;
				}
				
				new DB:AjtoDB = db_open(LSQL_ADATBAZIS);
				db_free_result(db_query(AjtoDB, qajuery));
				db_close(AjtoDB);
				
				return true;
			}
		} else if(!strcmp(parameterek, "goto", true))
		{
			new bevagyki[4 + 1], ajnev[32 + 1];
			if(sscanf(params, "{s[64]}s[4]s[32]", bevagyki, ajnev))
				return SCM(playerid, COL_MKEK, "Használat: /ajtó goto [be/ki] [név]");
			
			new ajto;
			if(!IsNumeric(ajnev)) ajto = AjtoKereses(ajnev);
			else ajto = strval(ajnev);
			
			if(ajto > NINCS && ajto < MAX_AJTO)
			{
				if(!strcmp(bevagyki, "be", true))
				{
					AjtoTeleport(playerid, 1, ajto, true);
				} else if(!strcmp(bevagyki, "ki", true))
				{
					AjtoTeleport(playerid, 0, ajto, true);
				}
			} else
				return SCM(playerid, COL_LRED, "Nincs ilyen ajtó!");
			return true;
		} else if(!strcmp(parameterek, "info", true))
		{
			new
				Float:jpos[3],
				kozeliajto = KozeliAjto(playerid),
				Float:tav;
			
			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
			if(kozeliajto > 0)
			{
				GetPlayerPos(playerid, jpos[0], jpos[1], jpos[2]);
				tav = GetDistance(jpos[0], jpos[1], jpos[2], AjtoInfo[kozeliajto][abepos][0], AjtoInfo[kozeliajto][abepos][1], AjtoInfo[kozeliajto][abepos][2]);
				
				SendClientMessage(playerid, COLOR_WHITE, "Legközelebbi bejárat adatai");
				format(uzenet, sizeof(uzenet), "Ajtó neve: %s | ID: %d | Távolság: %2.f", AjtoInfo[kozeliajto][anev], kozeliajto, tav);
				SendClientMessage(playerid, COLOR_WHITE, uzenet);
				format(uzenet, sizeof(uzenet), "Jármûvet teleportál: %d | Freeze: %d | Int: %d | VW: %d", AjtoInfo[kozeliajto][ajarmu], AjtoInfo[kozeliajto][afreeze], AjtoInfo[kozeliajto][abeinterior], AjtoInfo[kozeliajto][abevw]);
				SendClientMessage(playerid, COLOR_WHITE, uzenet);
			} else
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nincs a közelben ajtó!");
			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
		    return true;
		} else {
			SCM(playerid, COL_MKEK, "Használat: /ajtó [paraméterek]");
			SCM(playerid, COL_MKEK, "[Paraméterek]: új, töröl, goto, info, zár");
			return true;
		}
	}
	return true;
}

/*
CMD:makeleader(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT) && !IsScripter(playerid))
		return true;

	new tipus, jatekosid;
	if(sscanf(params, "ud", jatekosid, tipus))
		return SCM(playerid, COL_MKEK, "Használat: /setleader [Játékos] [FrakcióID] | /(f)ra(k)cio lista");
	if((jatekosid == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekosid))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(tipus < 0 || tipus > 20)
		return SCM(playerid, COL_LRED, "Hibás Frakció ID! Minimum 1, maximum 20, 0 = Leader elvétel!");
	if(!FInfo[tipus][fVan] && tipus != 0)
	    return SCM(playerid, COL_LRED, "Nincs ilyen frakció betöltve!");
	
	if(tipus != 0)
	{
		if((IsScripter(playerid) && playerid != jatekosid) || !IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED,1, "%s kinevezte õt: %s a(z) [%d] %s frakció leaderévé!", JatekosNev(playerid), JatekosNev(jatekosid), tipus, FInfo[tipus][fNev]);
		
		if(playerid != jatekosid) SendFormatMessage(jatekosid, COLOR_MKEK, "%s kinevezett téged a %s frakció leaderévé!", JatekosNev(playerid), FInfo[tipus][fNev]);
		SendFormatMessage(playerid, COLOR_MKEK, "Kinevezted õt: %s a(z) %s frakció leaderévé!", JatekosNev(jatekosid), FInfo[tipus][fNev]);
		PlayerInfo[jatekosid][pFrakcio] = tipus;
		PlayerInfo[jatekosid][prang] = 1;
		PlayerInfo[jatekosid]
		
	} else {
	
		if((IsScripter(playerid) && playerid != jatekosid) || !IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED,1, "%s elvette %s leader jogát!", JatekosNev(playerid), JatekosNev(jatekosid));
		
		if(playerid != jatekosid) SendFormatMessage(jatekosid, COLOR_MKEK, "Admin %s elvette a leader jogod!", JatekosNev(playerid));
		SendFormatMessage(playerid, COLOR_MKEK, "Elvetted %s leader jogát!", JatekosNev(jatekosid));
	    PlayerInfo[jatekosid][pFrakcio] = 0;
		PlayerInfo[jatekosid][prang] = 0;
	}
	return true;
}*/

CMD:makeleader(playerid,params[])
{
	if(!Admin(playerid,FOADMIN_SZINT)) return true;
	new fkid, jatekos;
	if(sscanf(params,"ud",jatekos,fkid)) return SCM(playerid,COL_MKEK,"Használat: /makeleader [Játékos] [FrakcióID] | /fk lista");
	else if(jatekos == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos!");
	else if(fkid < 0 || fkid > MAX_FRAKCIO) return SCM(playerid,COL_LRED,"Hibás frakció.");
	else if(!FInfo[fkid][fVan] && fkid != 0) return SCM(playerid, COL_LRED, "Nincs ilyen frakció betöltve!");
	else if(fkid != 0)
	{
	    if((IsScripter(playerid) && playerid != jatekos) || !IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED,1, "%s kinevezte õt: %s a(z) [%d] %s frakció leaderévé!", JatekosNev(playerid), JatekosNev(jatekos), fkid, FInfo[fkid][fNev]);
        SendFormatMessage(jatekos, COLOR_MKEK, "%s kinevezett téged a %s frakció leaderévé!", JatekosNev(playerid), FInfo[fkid][fNev]);
        PlayerInfo[jatekos][pFrakcio] = fkid;
		PlayerInfo[jatekos][prang] = 1;
		PlayerInfo[jatekos][pLeader] = 1;
	} else {
	    if((IsScripter(playerid) && playerid != jatekos) || !IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED,1, "%s elvette %s leader jogát!", JatekosNev(playerid), JatekosNev(jatekos));
        SendFormatMessage(jatekos, COLOR_MKEK, "%s elvette a leader jogod!", JatekosNev(playerid));
        PlayerInfo[jatekos][pFrakcio] = 0;
		PlayerInfo[jatekos][prang] = 0;
		PlayerInfo[jatekos][pLeader] = 0;
	}
	return 1;
}

CMD:benzinkut(playerid, params[])
{
	new parameterek[24];
	
	if(!Admin(playerid, SZUPER_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(sscanf(params, "s[24]{}", parameterek))
	{
		hiba:
		SCM(playerid, COL_MKEK, "Használat: /benzinkut [paraméterek]");
		SCM(playerid, COL_MKEK, "Paraméterek: új, töröl, szerkeszt, goto, info");
		return true;
	}
	if(!strcmp(parameterek, "új", false) || !strcmp(parameterek, "uj", false))
	{
		new
			benzinkutid = UjBenzinkutID(),
			benzinkutnev[32],
			Float:radius;
		
		if(sscanf(params, "{s[24]}s[32]f", benzinkutnev, radius))
			return SCM(playerid, COL_MKEK, "Használat: /benzinkut [név] [rádiusz(kör)]");
		if(radius > 40 || radius < 5)
			return SCM(playerid, COL_LRED, "A rádiusznak "#COL_VKEK"5 "#COL_FEHER"és "#COL_VKEK"40 "#COL_FEHER"kell lennie!");
		
		if(benzinkutid > 0)
		{
			if(BenzinkutLetezik(benzinkutnev) > 0)
				return SCM(playerid, COL_LRED, "Már van ilyen nevû benzinkút!");
				
			new Float:playerposok[3];
			GetPlayerPos(playerid, playerposok[0], playerposok[1], playerposok[2]);
			
			format(BenzinkutInfo[benzinkutid][bnev], 32 + 1, benzinkutnev);
			BenzinkutInfo[benzinkutid][bposx] = playerposok[0];
			BenzinkutInfo[benzinkutid][bposy] = playerposok[1];
			BenzinkutInfo[benzinkutid][bposz] = playerposok[2];
			BenzinkutInfo[benzinkutid][bbenzinar] = 2;
			BenzinkutInfo[benzinkutid][bdieselar] = 2;
			BenzinkutInfo[benzinkutid][bbenzinmennyiseg] = 50000.0;
			BenzinkutInfo[benzinkutid][bdieselmennyiseg] = 50000.0;
			BenzinkutInfo[benzinkutid][bhasznalva] = true;
			BenzinkutInfo[benzinkutid][bradius] = radius;
			BenzinkutInfo[benzinkutid][blistitem] = -1;
			
			if(!fexist(LSQL_ADATBAZIS))
			{
				print("Szerver: Kritikus hiba történt a cmd_benzinkut funkcióban! Oka: Hiányzó adatbázis!");
				SCM(playerid, COL_LRED, "Kritikus adatbázis hiba történt!");
				return true;
			}
			
			doQuery("INSERT INTO `"#MYSQL_BENZINKUTAK_TABLA"` (id, bnev, bposx, bposy, bposz, bradius) VALUES ('%d', '%s', '%f', '%f', '%f', '%f')", benzinkutid, benzinkutnev, playerposok[0], playerposok[1], playerposok[2], radius);
			SendFormatMessage(playerid, COLOR_WHITE, "Benzinkút sikeresen létrehozva! Név: %s", benzinkutnev);
			return true;
		} else
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Elértük a maximális ("#MAX_BENZINKUT") limitet!");
	}
	else if(!strcmp(parameterek, "töröl", false) || !strcmp(parameterek, "torol", false))
	{
		new benzinkutnev[32];
		
		if(sscanf(params, "{s[24]}s[32]", benzinkutnev))
			return SCM(playerid, COL_MKEK, "Használat: /benzinkut töröl [név]");
		
		new benzinkutid = BenzinkutLetezik(benzinkutnev);
		if(!benzinkutid)
			return SendFormatMessage(playerid, COLOR_LIGHTRED, "'%s' nevû benzinkút nem létezik!", benzinkutnev);
		
		doQuery("DELETE FROM `"#MYSQL_BENZINKUTAK_TABLA"` WHERE id = '%d'", benzinkutid);
		
		BenzinkutInfo[benzinkutid][bnev][0] = EOS;
		BenzinkutInfo[benzinkutid][bposx] = 0.0;
		BenzinkutInfo[benzinkutid][bposy] = 0.0;
		BenzinkutInfo[benzinkutid][bposz] = 0.0;
		BenzinkutInfo[benzinkutid][bbenzinar] = 0;
		BenzinkutInfo[benzinkutid][bdieselar] = 0;
		BenzinkutInfo[benzinkutid][bbenzinmennyiseg] = 0.0;
		BenzinkutInfo[benzinkutid][bdieselmennyiseg] = 0.0;
		BenzinkutInfo[benzinkutid][bhasznalva] = false;
		BenzinkutInfo[benzinkutid][bradius] = 0.0;
		BenzinkutInfo[benzinkutid][blistitem] = -1;
		SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút sikeresen törölve!", benzinkutnev);
		return true;
	}
	else if(!strcmp(parameterek, "goto"))
	{
		new
			i = 0,
			listitemid = 0,
			benzinkut[128],
			benzinkutak[2048];

		for(;++i < MAX_BENZINKUT;)
		{
			if(BenzinkutInfo[i][bhasznalva])
			{
				BenzinkutInfo[i][blistitem] = listitemid;
				format(benzinkut, sizeof(benzinkut), "%s\n", BenzinkutInfo[i][bnev]);
				strins(benzinkutak, benzinkut, strlen(benzinkutak));
				listitemid++;
			}
		}
		
		ShowPlayerDialog(playerid, DIALOG_BENZINKUTAK, DIALOG_STYLE_LIST, "Benzinkutak", benzinkutak, "Mehet", "Mégse");
		return true;
	}
	else if(!strcmp(parameterek, "szerkeszt"))
	{
		new parameterek2[32];
		
		if(sscanf(params, "{s[24]}s[32]{}", parameterek2))
		{
			SendClientMessage(playerid, COLOR_WHITE, "Használat: /benzinkut szerkeszt [paraméterek]");
			SendClientMessage(playerid, COLOR_WHITE, "Paraméterek: dieselár, bensinár, dieselmennyiség, benzinmennyiség");
			return true;
		}
		new benzinkut = GetClosestBenzinkut(playerid);

		if(GetDistanceToBenzinkut(playerid, benzinkut) < 5.0)
		{
			if(!strcmp(parameterek2, "dieselár") || !strcmp(parameterek2, "dieselar"))
			{
				new dieselar;
				
				if(sscanf(params, "{s[24]s[32]}d", dieselar))
					return SendClientMessage(playerid, COLOR_WHITE, "Kivéve");
				BenzinkutInfo[benzinkut][bdieselar] = 2;
				SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút diesel ára sikeresen beállítva "#COL_VKEK"%d"#COL_FEHER"-ra/-re!", BenzinkutInfo[benzinkut][bnev], dieselar);
				return true;
			}
			else if(!strcmp(parameterek2, "benzinár") || !strcmp(parameterek2, "benzinar"))
			{
				new benzinar;
				
				if(sscanf(params, "{s[24]s[32]}d", benzinar))
					return SendClientMessage(playerid, COLOR_WHITE, "Kivéve");
				BenzinkutInfo[benzinkut][bbenzinar] = 2;
				SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút benzin ára sikeresen beállítva "#COL_VKEK"%d"#COL_FEHER"-ra/-re!", BenzinkutInfo[benzinkut][bnev], benzinar);
				return true;
			}
			else if(!strcmp(parameterek2, "benzinmennyiség") || !strcmp(parameterek2, "benzinmennyiseg"))
			{
				new Float:mennyiseg;
				
				if(sscanf(params, "{s[24]s[32]}f", mennyiseg))
					return SendClientMessage(playerid, COLOR_WHITE, "Használat: /benzinkut szerkeszt benzinmennyiség [mennyiség]");
				BenzinkutInfo[benzinkut][bbenzinmennyiseg] = mennyiseg;
				SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút benzin tartálya sikeresen beállítva "#COL_VKEK"%.1f"#COL_FEHER"-ra/-re!", BenzinkutInfo[benzinkut][bnev], mennyiseg);
				return true;
			}
			else if(!strcmp(parameterek2, "dieselmennyiség") || !strcmp(parameterek2, "dieselmennyiseg"))
			{
				new Float:mennyiseg;
				
				if(sscanf(params, "{s[24]s[32]}f", mennyiseg))
					return SendClientMessage(playerid, COLOR_WHITE, "Használat: /benzinkut szerkeszt dieselmennyiség [mennyiség]");
					
				BenzinkutInfo[benzinkut][bdieselmennyiseg] = mennyiseg;
				SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút diesel tartálya sikeresen beállítva "#COL_VKEK"%.1f"#COL_FEHER"-ra/-re!", BenzinkutInfo[benzinkut][bnev], mennyiseg);
				return true;
			}
			else if(!strcmp(parameterek2, "radius"))
			{
				new Float:radius;
				
				if(sscanf(params, "{s[24]s[32]}f", radius))
					return SendClientMessage(playerid, COLOR_WHITE, "Használat: /benzinkut szerkeszt benzinmennyiség [mennyiség]");
				BenzinkutInfo[benzinkut][bradius] = radius;
				SendFormatMessage(playerid, COLOR_WHITE, "'"#COL_VKEK"%s"#COL_FEHER"' nevû benzinkút rádiusza sikeresen beállítva "#COL_VKEK"%f"#COL_FEHER"-ra/-re!", BenzinkutInfo[benzinkut][bnev], radius);
				return true;
			} 
		} else
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs a közeledben benzinkút!");
		return true;
	}
	else if(!strcmp(parameterek, "info"))
	{
		new benzinkut = GetClosestBenzinkut(playerid);

		if(GetDistanceToBenzinkut(playerid, benzinkut) < 5.0)
		{
			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
			SendFormatMessage(playerid, COLOR_WHITE, "Név: %s", BenzinkutInfo[benzinkut][bnev]);
			SendFormatMessage(playerid, COLOR_WHITE, "Diesel ár: 2$", BenzinkutInfo[benzinkut][bdieselar]);
			SendFormatMessage(playerid, COLOR_WHITE, "Benzin ár: 2$", BenzinkutInfo[benzinkut][bbenzinar]);
			SendFormatMessage(playerid, COLOR_WHITE, "Diesel mennyiség: %.1f", BenzinkutInfo[benzinkut][bdieselmennyiseg]);
			SendFormatMessage(playerid, COLOR_WHITE, "Benzin mennyiség: %.1f", BenzinkutInfo[benzinkut][bbenzinmennyiseg]);
			SendClientMessage(playerid, COLOR_GREEN, "=======================================");
		} else
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Nincs a közeledben benzinkút!");
		return true;
	}
	else
		goto hiba;
	return true;
}

CMD:vhspawn(playerid, params[])//ah-ban
{
    new jatekos;
	if(!Admin(playerid, 1) && !IsAS(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /vhspawn [Játékos] | Játékos Városházára respawnolása");
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(!Admin(playerid, 1) && jatekos == playerid)
		return SCM(playerid, COL_LRED, "Magadat nem respawnolhatod!");
	if( PlayerInfo[jatekos][pJailIdo] > 0 )
		return SendClientMessage(playerid, COLOR_WHITE, "Ezt a játékost nem vhspawnolhatod, mivel börtönben van.");

	AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s városházára respawnolta %s-t", JatekosNev(playerid), JatekosNev(jatekos));
	//SpawnPlayer(jatekos);
	SetPos(jatekos, 1473.779, -1723.145, 13.546, 0.236, true);
	SetVirtualWorld(jatekos, 0);
	SetInterior(jatekos, 0);
	PlayerInfo[jatekos][phaz] = NINCS;
 	return true;
}

CMD:respawn(playerid, params[])//ah-ban
{
    new jatekos;
	if(!Admin(playerid, 1) && !IsAS(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(!Admin(playerid, 1) && PlayerInfo[playerid][pTV][0] == NINCS)
		return SCM(playerid, COL_LRED, "Csak megfigyelés közben respawnolhatsz!");
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /respawn [Játékos]");
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(!Admin(playerid, 1) && jatekos == playerid)
		return SCM(playerid, COL_LRED, "Magadat nem respawnolhatod!");
		
	AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s respawnolta %s-t", JatekosNev(playerid), JatekosNev(jatekos));
	PlayerInfo[jatekos][pNewSpawn] = true;
	SpawnPlayer(jatekos);
 	return true;
}

CMD:warn(playerid, params[])//ah-ban
{
    new player, oka[32];
	if(!Admin(playerid, 1) && !IsAS(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(sscanf(params, "us[32]", player, oka))
	    return SCM(playerid, COL_MKEK, "Használat: /warn [Játékos] [Oka]");
	
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || IsPlayerNPC(player))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	
	if(!Belepve(player))
		return SCM(playerid, COL_LRED, "Ez a játékos még nem lépett be!");
	
    if((player == playerid))
	    return SCM(playerid, COL_LRED, "Cicaborsó magadat nem fogod figyelmeztetni!");
	
	if(!OOC_Ellenorzes(playerid, "/warn", oka))
		return true;
	
 	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid))
    {
    	SCM(playerid, COL_LRED, "Nagyobb Admint nem figyelmeztethetsz! Mégis mit képzelsz?");
    	//SendFormatMessage(player, COLOR_WHITE, "%s warnolni akart téged!", JatekosNev(playerid));
    	return true;
	}
	
	if(PlayerInfo[player][pwarnok] <= 2)
	{
		format(uzenet, sizeof(uzenet), "[%d/3] %s figyelheztetett téged! Oka: %s",PlayerInfo[player][pwarnok], JatekosNev(playerid), oka);
		SendClientMessage(player, COLOR_LIGHTRED, uzenet);
		AdminUzenet(COLOR_LIGHTRED, 0, "[%d/3] %s figyelmezette %s-t | Oka: %s",PlayerInfo[player][pwarnok], JatekosNev(playerid), JatekosNev(player), oka);
		AdminUzenet(COLOR_LIGHTRED, 1, "[%d/3] %s figyelmezette %s-t | Oka: %s",PlayerInfo[player][pwarnok], JatekosNev(playerid), JatekosNev(player), oka);
		PlayerInfo[player][pwarnok] ++;
		return true;
	}
	if(PlayerInfo[player][pwarnok] == 3)
	{
	    format(uzenet, sizeof(uzenet), "%s (warn 3x)",oka);
		SeeKick(player,uzenet,playerid);
	}
 	return true;
}

CMD:kick(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new player, oka[32];
	if(sscanf(params, "us[32]", player, oka))
	    return SCM(playerid, COL_MKEK, "Használat: /kick [Játékos] [Oka]");
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || IsPlayerNPC(player))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
    if(player == playerid)
	    return SCM(playerid, COL_LRED, "Cicaborsó magadat nem fogod kickelni!");
 	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid) || (IsScripter(player) && !IsScripter(playerid)))
    {
    	SCM(playerid, COL_LRED, "Nagyobb Admint nem kickelhetsz! Mégis mit képzelsz?");
    	//SendFormatMessage(player, COLOR_WHITE, "%s kickelni akart téged!", JatekosNev(playerid));
    	return true;
	}
	
    format(uzenet, sizeof(uzenet), ""#PREFIX": %s ki lett rúgva a szerverrõl %s által | Oka: %s", JatekosNev(player), JatekosNev(playerid), oka);
	if(Belepve(player)) 
	{
		SeeKick(player,oka,playerid);
	}
	else AdminUzenetEx(COLOR_LIGHTRED, 1, uzenet);

	new date[3],time[3];
	getdate(date[0], date[1], date[2]);
	gettime(time[0], time[1], time[2]);
	doQuery("INSERT INTO `"#MYSQL_LOG_TABLA"`(nev, datum, tipus) VALUES('%s', '%d-%02d-%02d %02d:%02d', 'Kick')", JatekosNev(playerid), PosExt(date), time[0], time[1]);


	Kick(player);
 	return true;
}

	
CMD:eladokocsik(playerid, params[])// ah-ban
{
	#pragma unused params
    new ketto = 0,osszeselado = 0;
    if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	uzenet[0] = EOS;
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "================ Eladó jármûvek ================");
	foreach(Jarmuvek, h)
	{
		if(vInfo[h][vHasznalva] && !strcmp(vInfo[h][vTulaj], "Nincs_Tulaj") && vInfo[h][vMunka] == 0)
		{
      		osszeselado++;
      		ketto++; //Id formátum SQLID[JármûID]
      		format(uzenet, sizeof(uzenet), "%s %d[%d] %s Ár: %d |", uzenet, vInfo[h][vID], h, VehicleNames[GetVehicleModel(vInfo[h][vID])-400], vInfo[h][vAr]);
		}
		if(ketto == MAX_PRINT)
		{
		    SendClientMessage(playerid, COLOR_WHITE, uzenet);
		    format(uzenet, sizeof(uzenet), "");
		    ketto = 0;
		}
		if((h+1) == MAX_VEHICLES)
			if(ketto > 0)
				SendClientMessage(playerid, COLOR_WHITE, uzenet);
	}
	if(!osszeselado)
		SendClientMessage(playerid, COLOR_WHITE, "Nincs eladó kocsi!");
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "=============================================");
	return true;
}

CMD:inaktiv(playerid, params[])// ah-ban
{
    new ketto, osszeselado, str[128];
    if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(playerid != NINCS)
		SendClientMessage(playerid, COLOR_LIGHTRED, "UserCP => Inaktív értékek <= itt keress inaktív értékeket!");

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /inaktiv [ Jármû ]");
	
	if(!strcmp(params, "jármû", true) || !strcmp(params, "jarmu", true))
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "================ Inaktív jármûvek (30nap) ================");
		foreach(Jarmuvek, h)
		{
			if(!vInfo[h][vHasznalva] || vInfo[h][vMunka] != 0) continue;
			if(vInfo[h][vTulajID] != NINCS && (vInfo[h][vTLastActive] <= (gettime() - (30 * (60 * 60 * 24)))) )
			{
				osszeselado++;
				ketto++;
				
				format(str, sizeof(str), "%s %d[%d]%s - [%d]%s |", str, vInfo[h][vID], h, VehicleNames[vInfo[h][vModel] - 400], vInfo[h][vTulajID], vInfo[h][vTulaj]);
			}
			if(ketto == MAX_PRINT)
			{
				SendClientMessage(playerid, COLOR_WHITE, str);
				str[0] = EOS;
				ketto = 0;
			}
			if((h+1) == MAX_VEHICLES && ketto > 0)
				SendClientMessage(playerid, COLOR_WHITE, str);
		}
		if(!osszeselado)
			SendClientMessage(playerid, COLOR_WHITE, "Jelenleg nincs 30 napnál inaktívabb jármû!");
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "================ Inaktív jármûvek (30nap) ================");
	}
	return true;
}

CMD:eladohazak(playerid, params[])// ah-ban
{
	#pragma unused params
    new ketto = 0, osszeselado = 0;
	
	uzenet[0] = EOS;
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "================ Eladó házak ================");
	
	new h = -1;
	for(;++h < MAX_HOUSE;)
	{
		if(HazInfo[h][hasznalatban])
		{
			if(HazInfo[h][hTulajID] == -1)
			{
				osszeselado++;
				ketto++; //Id formátum SQLID[JármûID]
				format(uzenet, sizeof(uzenet), "%s Házszám: %d | Ára: %s | Belsõ: %d ||| ", uzenet, h, FormatNumber( HazInfo[h][hazar], 0, ',' ), HazInfo[h][inter]);
			}
			if(ketto == MAX_PRINT)
			{
				SendClientMessage(playerid, COLOR_WHITE, uzenet);
				format(uzenet, sizeof(uzenet), "");
				ketto = 0;
			}
			if((h+1) == MAX_HOUSE)
				if(ketto > 0)
					SendClientMessage(playerid, COLOR_WHITE, uzenet);
		}
	}
	if(!osszeselado)
		SendClientMessage(playerid, COLOR_WHITE, "Nincs eladó házak!");
    SendClientMessage(playerid, COLOR_LIGHTBLUE, "=============================================");
	return true;
}

CMD:asay(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /asay [Üzenet] | Admin bejelentés név nélkül");
	if(!OOC_Ellenorzes(playerid, "/asay", params) && !Admin(playerid, 2))
		return true;
		
	new uzenete[128];
	foreach(Player, i)
	{
		if(IsPlayerConnected(i))
		{
			if(Admin(i, FOADMIN_SZINT))
				format(uzenete, sizeof(uzenete), "* Admin (%s): %s", JatekosNev(playerid), params);
			else
				format(uzenete, sizeof(uzenete), "* Admin: %s", params);

			SendClientMessage(i, COLOR_RED, uzenete);
		}
	}
	format(uzenete, sizeof(uzenete), "* Admin (%s): %s", JatekosNev(playerid), params);
	print((format(uzenete, sizeof(uzenete), "* Admin (%s): %s", JatekosNev(playerid), params), uzenete));
	return true;
}

CMD:asayn(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1) & !IsAS(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /asayn [Üzenet] | Az egész szerver látja");
	if(!OOC_Ellenorzes(playerid, "/asayn", params) && !Admin(playerid, 2))
		return true;

	new uzenete[128];
	format(uzenete, sizeof(uzenete), "* %s %s: %s", AdminRang(playerid), JatekosNev(playerid), params);
	SendClientMessageToAll(COLOR_RED, uzenete);
	print(uzenete);
	return true;
}

CMD:felhivas(playerid, params[])//ah-ban
{
	if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /felhivas [Üzenet]");
	//if(!OOC_Ellenorzes(playerid, "/felhivas", params) && !Admin(playerid, 2))
		//return true;

	SendClientMessageToAll(COLOR_WHITE, "============================================");
	SendFormatMessageToAll(COLOR_RED, "Felhívás: %s %s - %s", AdminRang(playerid), JatekosNev(playerid), params);
	SendClientMessageToAll(COLOR_WHITE, "============================================");
	return true;
}

CMD:a(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /a [AdminChat]");
	
	new uzenete[128];
	format(uzenete, sizeof(uzenete), "* %s %s: %s", AdminRang(playerid), JatekosNev(playerid), params);
	foreach(Player, id)
	{
		if(Belepve(id) && Admin(id, 1))
			SendClientMessage(id, COLOR_GREEN, uzenete);
	}
	return true;
}

CMD:fa(playerid, params[])//ah-ban
{
	if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /fa [FõAdmin Chat]");
	
	new uzenete[128];
	format(uzenete, sizeof(uzenete), "* %s %s: %s", AdminRang(playerid), JatekosNev(playerid), params);
	foreach(Player, id)
	{
		if(Belepve(id) && Admin(id, FOADMIN_SZINT))
			SendClientMessage(id, TEAM_ORANGE_COLOR, uzenete);
	}
	return true;
}

CMD:sa(playerid, params[])//ah-ban
{
	if(!IsScripter(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /sa [Scripter Chat]");
	
	new uzenete[128];
	format(uzenete, sizeof(uzenete), "* %s %s: %s", AdminRang(playerid), JatekosNev(playerid), params);
	foreach(Player, id)
	{
		if(Belepve(id) && IsScripter(id))
		SendClientMessage(id,  0x43d2e8AA, uzenete);
	}
	return true;
}

CMD:as(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1) && !IsAS(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /as [Adminsegéd Chat]");
	if(!OOC_Ellenorzes(playerid, "/as", params))
		return true;
	
	new uzenete[128];
	format(uzenete, sizeof(uzenete), "* %s %s: %s", AdminRang(playerid), JatekosNev(playerid), params);
	foreach(Player, id)
	{
		if(Belepve(id) && (Admin(id, 1) || IsAS(id)))
			SendClientMessage(id, 0xebc052AA, uzenete);
	}
	return true;
}

CMD:gmx(playerid, params[])
{
	if(!Admin(playerid, SZUPER_SZINT) && !IsScripter(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "Használat: /gmx [Idõ (Másodpercben megadva)] | Szerver újraindítás");
	
	if(PlayerInfo[playerid][pMegerosites] != playerid)
	{
		SCM(playerid, COL_LRED, "Biztos, hogy újra szeretnéd indítani a szervert? Ha igen, írd be mégegyszer!");
		PlayerInfo[playerid][pMegerosites] = playerid;
		return true;
	}
	
	PlayerInfo[playerid][pMegerosites] = NINCS;
	new ido = strval(params);
    if(ido < 10 || ido > 120)
		return SCM(playerid, COL_LRED, "Minimum 10 másodperc, és maximum 2 perc lehet.");

    AdminUzenet(COLOR_LIGHTRED, 1, "%s aktiválta az újraindítást! | Hátralévõ idõ: %d mp", JatekosNev(playerid), ido);
    
	foreach(Player, i)
	{
		GameTextForPlayer(i, "~g~~h~================~n~Újraindítás!~n~~g~~h~================", 4000, 5);
		SendClientMessage(i, COLOR_GREEN, "=======================================");
		SendFormatMessage(i, COLOR_WHITE, "A szerver "#COL_MKEK"%d"#COL_FEHER" másodperc múlva újraindul!", ido);
		SendClientMessage(i, COLOR_WHITE, "Ez a ti érdeketeket szolgálja, legyetek türelemmel.");
		SendClientMessage(i, COLOR_GREEN, "=======================================");
	}
	AdatMentesSzerver( true );
		
    ServerInfo[0][sRestart] = true;
    SetTimerEx("Restart", ((ido * 1000) + 1000), false, "i", playerid);
	return true;
}

CMD:adatmentes(playerid, params[])//ah-ban
{
	#pragma unused params
	if(!IsScripter(playerid) && !Admin(playerid, TULAJ_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
    AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s elindította a manuális adatmentést.", JatekosNev(playerid));
    AdatMentesSzerver( true );
	return true;
}

CMD:mindenthall(playerid, params[])//ah-ban
{
	#pragma unused params
	if(!Admin(playerid, 4))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	    
    if(IsPlayerConnected(playerid))
    {
		if(!PlayerInfo[playerid][pmindenthall])
		{
			PlayerInfo[playerid][pmindenthall] = true;
			SCM(playerid, COL_MKEK, "Most már látod, hogy ki és mit ír!");
		}
		else if(PlayerInfo[playerid][pmindenthall])
		{
			PlayerInfo[playerid][pmindenthall] = false;
			SCM(playerid, COL_MKEK, "Most már csak a lokális beszédet látod!");
		}
	}
	return true;
}

CMD:smindenthall(playerid, params[])//ah-ban
{
	#pragma unused params
	if(!Admin(playerid,AC_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

    if(IsPlayerConnected(playerid))
    {
		if(!PlayerInfo[playerid][psmindenthall])
		{
			PlayerInfo[playerid][psmindenthall] = true;
			SCM(playerid, COL_MKEK, "Most már látod, más adminok PM-eit!");
		}
		else if(PlayerInfo[playerid][psmindenthall])
		{
			PlayerInfo[playerid][psmindenthall] = false;
			SCM(playerid, COL_MKEK, "Most már csak a saját dolgaid látod!");
		}
	}
	return true;
}

CMD:ujkocsi(playerid, params[])//ah-ban
{
	new Float:X, Float:Y, Float:Z, Float:Angle, modelid[16], ara, color1, color2;
	if(!Admin(playerid, FOADMIN_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "s[16]d", modelid, ara))
	    return SCM(playerid, COL_MKEK, "Használat: /ujkocsi [Model név vagy ID] [Ára]");

    new idx = JarmuToID(modelid);
	if(idx == -1)
	{
		idx = strval(modelid);
		if( idx < 400 || idx > 611 )
			return SCM(playerid, COL_LRED, "Nincs ilyen Model vagy ID. 400-611 vagy pontos nevet adj meg!");
	}
	
	if(GetVehicleMType(idx) == RC || GetVehicleMType(idx) == TRAIN /*!TiltottJarmu(idx)*/ && !IsScripter(playerid))
		return SCM(playerid, COL_LRED, "Ez a jármû tiltott!");
		
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	if(!JarmuSzinezes(idx)) color1 = -1, color2 = -1;
	else color1 = random(128), color2 = random(128);
	
	UjJarmu(idx, 0, ara, X, Y+2, Z, Angle, color1, color2, true);
	
    AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s lehívott egy %s tipusú eladó jármûvet | Ára: %s$", JatekosNev(playerid), VehicleNames[idx-400], FormatNumber(ara, 0, ','));
	return true;
}

CMD:veh(playerid, params[])//ah-ban
{
	new Float:X, Float:Y, Float:Z, Float:Angle, modelid[16], color1, color2;
	if(!Admin(playerid, 5))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "s[16]", modelid))
	    return SCM(playerid, COL_MKEK, "Használat: /veh [Model név vagy ID]");

    new idx = JarmuToID(modelid);
	if(idx == -1)
	{
		idx = strval(modelid);
		if( idx < 400 || idx > 611 )
			return SCM(playerid, COL_LRED, "Nincs ilyen Model vagy ID. 400-611 vagy pontos nevet adj meg!");
	}
	
	new tipus = GetVehicleMType(idx);
	if((tipus != CAR && tipus != BIKE && tipus != BOAT /*&& tipus != PLANE*/ && tipus != HELICOPTER/*!TiltottJarmu(idx)*/ && !IsScripter(playerid)) || tipus == RC)
		return SCM(playerid, COL_LRED, "Ez a jármû tiltott!");
		
	GetPlayerPos(playerid, X, Y, Z);
	GetPlayerFacingAngle(playerid, Angle);
	if(!JarmuSzinezes(idx)) color1 = -1, color2 = -1;
	else color1 = random(128), color2 = random(128);
	
	UjJarmu(idx, 0, 0, X, Y+2, Z, Angle, color1, color2, false);
	
	if(!Admin(playerid, FOADMIN_SZINT))
		AdminUzenet(COLOR_LIGHTRED, 1, "%s lehívott egy %s tipusú ideiglenes jármûvet!", JatekosNev(playerid), VehicleNames[idx-400]);
		
	SFM(playerid, COL_VZOLD, "Sikeresen lehívtál egy "#COL_MKEK"%s"#COL_FEHER" típusú ideiglenes jármûvet! Törléshez írd be: "#COL_MKEK"/v töröl", VehicleNames[idx-400]);
	return true;
}

CMD:destroycars(playerid, params[])
{
	if(!Admin(playerid, 5))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	new db, vdb;
	for(;++vdb < MAX_VEHICLES;)
	{
		new vid = JarmuID(vdb, INVALID_PLAYER_ID);
		if(!vid) continue;
		if(vInfo[vid][vHasznalva] && !vInfo[vid][vInsert])
		{
			JarmuNullazas(vid);
			DestroyVehicle(vInfo[vid][vID]);
			Iter_Remove(Jarmuvek, vdb);
			
			vInfo[vid][vHasznalva] = false;
			vInfoID[vInfo[vid][vID]] = 0;
			vInfo[vid][vID] = 0;
			db++;
		}
	}
	
	if(db)
	{
		if(!IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED, 1, "%s törölte az összes ideiglenesen lehívott jármûvet! Összesen: %ddb", JatekosNev(playerid), db);
	} else
		SCM(playerid, COL_LRED, "Jelenleg nincs ideiglenesen lehívott jármû!");	
	return true;
}

CMD:ujmodel(playerid, params[])//ah-ban
{
	if(!Admin(playerid, SZUPER_SZINT))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
	    return SCM(playerid, COL_MKEK, "Használat: /ujmodel [Model név vagy ID]");

    new idx = JarmuToID(params);
	if(idx == -1)
	{
		idx = strval(params);
		if ( idx < 400 || idx > 611 )
			return SCM(playerid, COL_LRED, "Nincs ilyen Model vagy ID. 400-611 vagy pontos nevet adj meg!");
	}
	
	if(GetVehicleMType(idx) == RC || GetVehicleMType(idx) == TRAIN /*!TiltottJarmu(idx)*/ && !IsScripter(playerid))
		return SCM(playerid, COL_LRED, "Ez a jármû tiltott!");
		
	if(IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Jármûben nem használhatod!");
		
	new car = NINCS;
	car = GetClosestVehicle(playerid);

	if(GetDistanceToVehicle(playerid, car) < 5.0)
	{
		new vid = JarmuID(car, playerid), Float:vinfo[5];
		
		GetVehicleHealth(car, vinfo[0]);
		GetVehiclePos(car, vinfo[1], vinfo[2], vinfo[3]);
		GetVehicleZAngle(car, vinfo[4]);
		
		if(!IsScripter(playerid) && vInfo[vid][vInsert])
			AdminUzenet(COLOR_LIGHTRED,1, "%s átalakított egy %s típusú jármûvet erre: %s | JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[vInfo[vid][vModel]-400], VehicleNames[idx-400], vInfo[vid][vID], vid, JarmuTulaj(vid));
		
		AdminLog("Alakít: %s | %s -> %s | JármûID: %d[%d] | Tulaj: %s", JatekosNev(playerid), VehicleNames[vInfo[vid][vModel]-400], VehicleNames[idx-400], vInfo[vid][vID], vid, JarmuTulaj(vid));
		SFM(playerid, COL_MKEK, "Jármû alakítás: %s -> %s | JámrûID: %d[%d] | Tulaj: %s", VehicleNames[vInfo[vid][vModel]-400], VehicleNames[idx-400], vInfo[vid][vID], vid, JarmuTulaj(vid));
		vInfo[vid][vModel] = idx;
		vInfo[vid][vElet] = vinfo[0];
		vInfo[vid][vPosx] = vinfo[1];
		vInfo[vid][vPosy] = vinfo[2];
		vInfo[vid][vPosz] = vinfo[3];
		vInfo[vid][vAngle] = vinfo[4];
		vInfo[vid][vHidraulika] = 0;
		vInfo[vid][vMatrica] = 0;
		for(new i=0;i<14;i++)
		{
			vInfo[vid][vMod][i] = 0;
		}
		
		if(vInfo[vid][vUzemanyag] > MAX_Benzin[idx - 400])
			vInfo[vid][vUzemanyag] = MAX_Benzin[idx - 400];
		
		vInfo[vid][vMotorelinditva] = false;
		PlayerInfo[playerid][pmotortinditja] = false;
		vUpdate(vid, vuModel);
		vUpdate(vid, vuMod);
		
		GetVehicleDamageStatus(vInfo[vid][vID], vInfo[vid][vPanels], vInfo[vid][vDoors], vInfo[vid][vLights], vInfo[vid][vTires]);
		DestroyVehicle(vInfo[vid][vID]);
		JarmuSpawn(vid, vInfo[vid][vModel], vInfo[vid][vPosx], vInfo[vid][vPosy], vInfo[vid][vPosz], vInfo[vid][vAngle], vInfo[vid][vSzin1], vInfo[vid][vSzin2]);
		
	} else
		SCM(playerid, COL_LRED, "Nincs a közeledben jármû!");
	return true;
}

CMD:asek(playerid, params[])
{
	#pragma unused params
	new onlineas;
	//AS Listázás
	SendClientMessage(playerid, COLOR_WHITE, "======== "#COL_MKEK"Adminsegédek "#COL_FEHER"========");
	foreach(Player, i)
		{
		    if(IsPlayerConnected(i) && Belepve(i) && IsAS(i))
			{
				onlineas++;
				if(Admin(playerid, 1) || (IsAS(playerid) && i == playerid))
					SendFormatMessage(playerid,COLOR_WHITE, ""#COL_MKEK"Adminsegéd"#COL_FEHER" %s ("#COL_MKEK"%s"#COL_FEHER") | Válaszok: "#COL_MKEK"%d", JatekosNev(i, true), UnixToTime( PlayerInfo[i][pAS] ), PlayerInfo[i][pValaszok]);
				else
					SendFormatMessage(playerid,COLOR_WHITE, ""#COL_MKEK"Adminsegéd"#COL_FEHER" %s", JatekosNev(i, true));
			}
		}
	if(!onlineas) SCM(playerid, COL_LRED, "Jelenleg nincs online Adminsegéd.");
	return true;
}
CMD:admins(playerid, params[])
{
	#pragma unused params
	SendClientMessage(playerid, COLOR_WHITE, "======== "#COL_MKEK"Adminisztrátorok "#COL_FEHER"========");
	new online = 0;
	
	new rejtettadminok[3] =
	{
	    2,
	    3,
	    295,
	};
	foreach(Player, i)
	{
		if(!Belepve(i)) continue;
		if(PlayerInfo[i][padmin] < 1) continue;
		if(PlayerInfo[i][alnevbe]) continue;
		
		new r = -1, bool:rejtett = false;
		for(; ++r < sizeof(rejtettadminok);)
		{
		    if(rejtettadminok[r] != SQLID(i)) continue;
		    rejtett = true;
		    break;
		}
		if(rejtett && (PlayerInfo[playerid][padmin] < PlayerInfo[i][padmin])) continue;
		
		online++;
		if(PlayerInfo[i][pAduty])
		{
			if((PlayerInfo[playerid][padmin] > PlayerInfo[i][padmin]) || IsScripter(playerid))
				SendFormatMessage(playerid,COLOR_WHITE,""#COL_MKEK"%s"#COL_FEHER" %s ("#COL_MKEK"%d"#COL_FEHER") "#COL_GREEN" (onDuty) "#COL_FEHER" | Válaszok: "#COL_MKEK"%d", AdminRang(i), JatekosNev(i, true), PlayerInfo[i][padmin], PlayerInfo[i][pValaszok]);
			else
				SendFormatMessage(playerid,COLOR_WHITE, ""#COL_MKEK"%s"#COL_FEHER" %s"#COL_GREEN" (onDuty)", AdminRang(i), JatekosNev(i, true));
		}
		else
		{
			if((PlayerInfo[playerid][padmin] > PlayerInfo[i][padmin]) || IsScripter(playerid))
				SendFormatMessage(playerid,COLOR_WHITE,""#COL_MKEK"%s"#COL_FEHER" %s ("#COL_MKEK"%d"#COL_LRED") "#COL_GREEN" (offDuty) "#COL_FEHER" | Válaszok: "#COL_MKEK"%d", AdminRang(i), JatekosNev(i, true), PlayerInfo[i][padmin], PlayerInfo[i][pValaszok]);
			else
				SendFormatMessage(playerid,COLOR_WHITE, ""#COL_MKEK"%s"#COL_FEHER" %s"#COL_LRED" (offDuty)", AdminRang(i), JatekosNev(i, true));
		}
 	}
	if(!online) SCM(playerid, COL_LRED, "Jelenleg nincs online Admin, de SeeRPG szeme mindent lát.");
	return true;
}

/*CMD:tilt(playerid, params[]) //befejezni
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new param[24];
	if(sscanf(params, "s[24]{}", param))
		return SCM(playerid, COL_MKEK, "Használat: /tilt [ AS ]");
		
	if(!strcmp(param, "as", true))
	{
		new jatekos, oka[32];
		if(sscanf(params, "{s[24]}us[32]", jatekos, oka))
			return SCM(playerid, COL_MKEK, "Használat: /tilt as [Játékos] [Oka]");
			
		if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos) || !Belepve(jatekos))
			return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
			
		if(PlayerInfo[jatekos][pAS_tOk])
	}
	
	return true;
}*/

CMD:helper(playerid, params[])
{
	new player, sido[8], ido, str[32];
	if(!Admin(playerid, 5) && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(sscanf(params, "us[8]", player, sido))
	    return SCM(playerid, COL_MKEK, "Használat: /helper [Játékos] [Idõ(IRL óra) / Örök]");
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || !Belepve(player))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if((PlayerInfo[player][padmin]) && !IsScripter(playerid))
	    return SCM(playerid, COL_LRED, "Adminnak ne adj! :D");
	
	if(!strcmp(sido, "örök") || !strcmp(sido, "orok"))
	{
		if(!Admin(playerid, FOADMIN_SZINT))
			return SCM(playerid, COL_LRED, "Örök Adminseged csak FõAdmin rakhat be!");
			
		if(PlayerInfo[player][pAS] != NINCS)
		{
			PlayerInfo[player][pAS] = NINCS;
			SetReport(playerid);
			SendFormatMessage(player, COLOR_MKEK, "%s %s kinevezett téged Örök Adminsegédnek!", AdminRang(playerid), JatekosNev(playerid));
			if(!IsScripter(playerid))
				AdminUzenet(COLOR_LIGHTRED, 1, "%s kinevezte %s-t Örök Adminsegédnek!", JatekosNev(playerid), JatekosNev(player));
				
			SendFormatMessage(playerid, COLOR_MKEK, "Kinevezted %s-t Örök Adminsegédnek!", JatekosNev(player));
			
		} else {
		
			PlayerInfo[player][pAS] = 0;
			SetReport(playerid);
			SendFormatMessage(player, COLOR_MKEK, "%s %s elvette az Örök Adminsegéded", AdminRang(playerid), JatekosNev(playerid));
			if(!IsScripter(playerid))
				AdminUzenet(COLOR_LIGHTRED, 1, "%s elvette %s Örök Adminsegédjét!", JatekosNev(playerid), JatekosNev(player));
				
			SendFormatMessage(playerid, COLOR_MKEK, "Elvetted %s Örök Adminsegédjét!", JatekosNev(player));
		}
		return true;
	}
	
	ido = strval(sido);
	if(ido < 0 || ido > 48)
	    return SCM(playerid, COL_LRED, "Minimum 1 és maximum 48 óra lehet! | 0 = AS jog elvétele");
	
	if(ido > 0)
	{
		if(PlayerInfo[player][pAS] == NINCS)
			return SCM(playerid, COL_LRED, "Örök Adminsegédnek nem adhatsz idõszakod jogot!");
			
		SendFormatMessage(player, COLOR_MKEK, "%s %s kinevezett téged %d órára Adminsegédnek!", AdminRang(playerid), JatekosNev(playerid), ido);
		if(!IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED, 1, "%s kinevezte %s-t %d órára Adminsegédnek!", JatekosNev(playerid), JatekosNev(player), ido);
		
		SendFormatMessage(playerid, COLOR_MKEK, "Kinevezted %s-t %d órára Adminsegédnek!", JatekosNev(player), ido);
		
		ido = (ido * 3600);
		PlayerInfo[player][pAS] = (ido + gettime());
		SetReport(playerid);
	}
	
	if(ido == 0)
	{
		if(PlayerInfo[player][pAS] == NINCS)
			return SCM(playerid, COL_LRED, "Örök Adminsegéd jogát így nem veheted el! Használd így: /helper örök");
		if(PlayerInfo[player][pAS] < gettime())
			return SCM(playerid, COL_LRED, "Neki nincs, vagy már lejárt az Adminsegéd joga!");
		
		str = UnixToTime( PlayerInfo[player][pAS] );	
		PlayerInfo[player][pAS] = 0;
		SetReport(playerid);
		
		SendFormatMessage(player, COLOR_MKEK, "%s %s elvette az Adminsegéd jogodat!", AdminRang(playerid), JatekosNev(playerid));
		if(!IsScripter(playerid))
			AdminUzenet(COLOR_LIGHTRED, 1, "%s elvette %s Adminsegéd jogát! (%s)", JatekosNev(playerid), JatekosNev(player), str);
		
		SendFormatMessage(playerid, COLOR_MKEK, "Elvetted %s Adminsegéd jogát! (%s)", JatekosNev(player), str);
	}
	return true;
}

CMD:makeadmin(playerid, params[])//ah-ban
{
    new player, level;
	if(!Admin(playerid, FOADMIN_SZINT) && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(sscanf(params, "ud", player, level))
	    return SCM(playerid, COL_MKEK, "Használat: /makeadmin [Játékos] [Szint(1 - 6 | 1337 - 1340 | 5555 | 6666 | 8888 | 9999)]");
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || !Belepve(player))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if((level > PlayerInfo[playerid][padmin]) && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT)
	    return SCM(playerid, COL_LRED, "Saját szintednél nem tudsz nagyobbat adni!");
	if((PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin]) && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT)
	    return SCM(playerid, COL_LRED, "Nagyobb Admin szintjét nem állíthatod!");
	if(level == FOADMIN_SZINT && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < AC_SZINT)
	    return SCM(playerid, COL_LRED, "FõAdmint nem rakhatsz be!");
	if(level >= SZUPER_SZINT && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT)
	    return SCM(playerid, COL_LRED, "Szuper Admint nem rakhatsz be!");
	
	new bool:ok;
	switch( level )
	{
		case 0 .. 5:
			ok = true;
		case FSEGED_SZINT:
			ok = true;
		case FOADMIN_SZINT:
			ok = true;
		case SZUPER_SZINT:
			ok = true;
		case AC_SZINT:
			ok = true;
 		case FEJLESZTO_SZINT:
			ok = true;
		case TULAJ_SZINT:
			ok = true;
		case RENDSZG_SZINT:
			ok = true;
		case SCRIPTER_SZINT:
			ok = true;
		case FOSCRIPTER_SZINT:
			ok = true;
	}
	
	if(!ok)
		return SCM(playerid, COL_LRED, "Hibás Adminszint! Lehetõségek: 1 - 6 | 1337 - 1340 | 5555 | 6666 | 8888 | 9999");
	
	PlayerInfo[player][pAS] = 0;
	PlayerInfo[player][padmin] = level;
	SendFormatMessage(player, COLOR_MKEK, "%s %s kinevezett téged %d szintû Adminná!", AdminRang(playerid), JatekosNev(playerid), level);
	if((IsScripter(playerid) && (playerid != player || !IsScripter(player))) || !IsScripter(playerid))
		AdminUzenet(COLOR_LIGHTRED, 1, "%s kinevezte %s-t %d szintû adminná!", JatekosNev(playerid), JatekosNev(player), level);
	
	SendFormatMessage(playerid, COLOR_MKEK, "Kinevezted %s-t %d szintû adminná!", JatekosNev(player), level);
	SetReport(player);
	
	return true;
}

CMD:tv(playerid, params[])
{
	if(!Admin(playerid, 1) && !IsAS(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new jatekos, jog;
	if(IsAS(playerid)) jog = 0;
	else if(Admin(playerid, 1)) jog = 1;
	
	if(isnull(params))
	{
		if(PlayerInfo[playerid][pTV][0] != NINCS)
		{
			if(!IsScripter(playerid) && PlayerInfo[PlayerInfo[playerid][pTV][0]][padmin] > PlayerInfo[playerid][padmin])
			{
				AdminUzenet(COLOR_LIGHTRED, jog, "%s befejezte %s megfigyelését!", JatekosNev(playerid), JatekosNev(PlayerInfo[playerid][pTV][0]));
			}
			TogglePlayerSpectating(playerid, 0);
			PlayerInfo[ PlayerInfo[playerid][pTV][0] ][pTV][2] = NINCS;
			PlayerInfo[playerid][pTV][0] = NINCS;
			
			if(PlayerInfo[playerid][pinterior] != 0 || PlayerInfo[playerid][pvirtualworld] != 0)
				Freeze(playerid, 3000);
			else
				Freeze(playerid, 1000);
			
			SetPlayerPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz]);
			SetPlayerInterior(playerid, PlayerInfo[playerid][pinterior]);
			SetPlayerVirtualWorld(playerid, PlayerInfo[playerid][pvirtualworld]);
			ShowInfoTextDraw(playerid);
			
		} else
			SCM(playerid, COL_MKEK, "Használat: /tv [ Játékos / Enged ] | Játékos megfigyelése, befejezéshez írd be: /tv");
			
		return true;
	}
	
	if(!strcmp(params, "enged") || !strcmp(params, "tilt"))
	{
		if(!Admin(playerid, 1))
			return SCM(playerid, COL_LRED, "Neked nincs rá szükséged.");
			
		if(PlayerInfo[playerid][pTV][1])
		{
			PlayerInfo[playerid][pTV][1] = false;
			SCM(playerid, COL_MKEK, "Megfigyelési engedély visszavonva, most már a kisebb Adminok nem tudnak megfigyelni!");
			
		} else {
		
			PlayerInfo[playerid][pTV][1] = true;
			SCM(playerid, COL_MKEK, "Megfigyelés engedélyezve, most már a kisebb Adminok is megfigyelhetnek téged!");
		}
		return true;
	}
	
	sscanf(params, "u", jatekos);
	if(jatekos == INVALID_PLAYER_ID || !IsPlayerConnected(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(jatekos == playerid)
		return SCM(playerid, COL_LRED, "Cicaborsó, ne magadat figyeld, hanem a játékosokat! :D");
	if(!Belepve(jatekos))
		return SCM(playerid, COL_LRED, "Ez a játékos még nem lépett be!");
	if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid) && !PlayerInfo[jatekos][pTV][1])
		return SCM(playerid, COL_LRED, "Nagyobb Admint nem figyelhetsz meg!");
	
	if(PlayerInfo[playerid][pTV][0] == NINCS)
	{
		GetPlayerPos(playerid, PlayerInfo[playerid][posx], PlayerInfo[playerid][posy], PlayerInfo[playerid][posz]);
		PlayerInfo[playerid][pinterior] = GetPlayerInterior(playerid);
		PlayerInfo[playerid][pvirtualworld] = GetPlayerVirtualWorld(playerid);
	}
	
	SetPlayerInterior(playerid, GetPlayerInterior(jatekos));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(jatekos));
	
	HideInfoTextDraw(playerid);
	PlayerInfo[jatekos][pFigyelmeztetes] = 0;
	
	if((PlayerInfo[playerid][pTV][0] != jatekos) && !IsScripter(playerid) && PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin])
		AdminUzenet(COLOR_LIGHTRED, jog, "%s megfigyeli %s-t!", JatekosNev(playerid), JatekosNev(jatekos));
	if(PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid) && PlayerInfo[jatekos][pTV][1])
		SFM(jatekos, COL_LRED, "[TV]: %s megfigyel téged!", JatekosNev(playerid));
	
	PlayerInfo[playerid][pTV][0] = jatekos;
	PlayerInfo[jatekos][pTV][2] = playerid;
	TogglePlayerSpectating(playerid, true);
	
	if(!IsPlayerInAnyVehicle(jatekos)) PlayerSpectatePlayer(playerid, jatekos);
	else PlayerSpectateVehicle(playerid, GetPlayerVehicleID(jatekos));
	
	return true;
}
CMD:z(playerid,params[])
{
	if(!Admin(playerid,4)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/z [+ Magasság]");
		return 1;
	}
	new magassag;
	sscanf(params,"d",magassag);
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	SetPlayerPos(playerid,X,Y,Z+magassag);
	return true;
}
CMD:x(playerid,params[])
{
	if(!Admin(playerid,4)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/x [+ X Pozíció]");
		return 1;
	}
	new xpozicio;
	sscanf(params,"d",xpozicio);
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	SetPlayerPos(playerid,X,Y,Z+xpozicio);
	return true;
}
CMD:y(playerid,params[])
{
	if(!Admin(playerid,4)) return 1;
	if(isnull(params))
	{
		SCM(playerid,COL_LRED,"/y [+ Y Pozíció]");
		return 1;
	}
	new ypozicio;
	sscanf(params,"d",ypozicio);
	new Float:X,Float:Y,Float:Z;
	GetPlayerPos(playerid,X,Y,Z);
	SetPlayerPos(playerid,X,Y+ypozicio,Z);
	return true;
}
CMD:idojaras(playerid, params[])
{
	if(!Admin(playerid, FSEGED_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /idojaras [ WeatherID(2-20) / random ]");
		
	if(!strcmp(params, "random"))
	{
		new idx = ServerInfo[0][sIdojaras];
		Idojaras();
		AdminUzenet(COLOR_LIGHTRED, 1, "%s idõjárást váltott! Régi: %d | Új: %d (random)", JatekosNev(playerid), idx, ServerInfo[0][sIdojaras]);
		return true;
	}
	
	new Idojarasok[16] = {2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,20};
	new bool:ok = false, id = strval(params);
	
	for(new i = NINCS; ++i < sizeof(Idojarasok);)
		if(Idojarasok[i] == id) ok = true;
	
	if(!ok && !IsScripter(playerid))
		return SCM(playerid, COL_LRED, "Ez az idõjárás nem definiált, kérlek válassz a következõk közül: 2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,20");
	
	AdminUzenet(COLOR_LIGHTRED, 1, "%s idõjárást váltott! Régi: %d | Új: %d", JatekosNev(playerid), ServerInfo[0][sIdojaras], id);
	Idojaras(NINCS, id);
	return true;
}

CMD:napszak(playerid, params[])
{
	if(!Admin(playerid, FSEGED_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /napszak [Óra (1 - 23)]");
		
	new ora = strval(params);
	if(ora < 0 || ora > 23) 
		return SCM(playerid, COL_LRED, "Érvénytelen érték! Minimum 1 és maximum 23 lehet!");
		
	SetWorldTime(ora);
	AdminUzenet(COLOR_LIGHTRED, 1, "%s átállította a napszakot %d órára!", JatekosNev(playerid), ora);
	return true;
}

CMD:kocsiba(playerid, params[])
{
	if(!Admin(playerid, 5))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /kocsiba [ JármûID ] | A szabad ülésbe ültet bele");
		
	new id = strval(params), slot;
	
	if(!id || id > MAX_VEHICLES || !IsVehicleConnected(id))
		return SCM(playerid, COL_LRED, "Nincs ilyen jármû!");
	
	if(IsSeatTaken(id, slot) != NINCS)
	{
		slot = 1;
		if(IsSeatTaken(id, slot) != NINCS)
			return SCM(playerid, COL_LRED, "Ebben a jármûben mint két ülés foglalt! Így nem szállhatsz bele!");
	}

	PutPlayerInVehicle(playerid, id, slot);
	SFM(playerid, COL_VZOLD, "Sikeresen beleteleportáltál a %d rendszámú jármûbe!", id);
	return true;
}

CMD:goto(playerid, params[])//ah-ban
{
    new player, Float: fPos[3];
	if(!Admin(playerid, 1) && !IsScripter(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(sscanf(params, "u", player))
	    return SCM(playerid, COL_MKEK, "Használat: /goto [Játékos]");
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
    if(player == playerid)
	    return SCM(playerid, COL_LRED, "Gratulálok! Ön sikeresen megtalálta önmagát!");
	if(!Belepve(player) && !IsScripter(playerid))
		return SCM(playerid, COL_LRED, "Ez a játékos nincs belépve!");
	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin] && !PlayerInfo[player][pAEnged][0] && PlayerInfo[playerid][padmin] < FOADMIN_SZINT)
		return SCM(playerid, COL_LRED, "Nagyobb Adminhoz csak akkor teleportálhatsz ha azt engedélyezi!");
	    
    GetPlayerPos(player, fPos[0], fPos[1], fPos[2]);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
 	{
		SetVehiclePos(GetPlayerVehicleID(playerid), fPos[0], fPos[1]+2, fPos[2]);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(player));
		SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), GetPlayerVirtualWorld(player));
	} else {
		SetPlayerPos(playerid, fPos[0], fPos[1]+2, fPos[2]);
	}
	
	PlayerInfo[player][pFigyelmeztetes] = 0;
	SetInterior(playerid, GetPlayerInterior(player));
	SetVirtualWorld(playerid, GetPlayerVirtualWorld(player));
	PlayerInfo[playerid][phaz] = PlayerInfo[player][phaz];
	
	SFM(playerid, COL_MKEK, "Sikeresen teleportáltál hozzá: "#COL_MKEK"%s", JatekosNev(player));
	return true;
}

CMD:get(playerid, params[])//ah-ban
{
	if(!Admin(playerid, 1) && !IsScripter(playerid))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new player, Float: fPos[3];
	if(sscanf(params, "u", player))
	    return SCM(playerid, COL_MKEK, "Használat: /get [Játékos]");
	if((player == INVALID_PLAYER_ID) || !IsPlayerConnected(player) || IsPlayerNPC(player))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
    if(player == playerid)
	    return SCM(playerid, COL_LRED, "Gratulálok! Ön sikeresen megtalálta önmagát!");
    //if((PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid)) || (IsScripter(player) && !IsScripter(playerid)))
	if(PlayerInfo[player][padmin] > PlayerInfo[playerid][padmin])
    {
    	SCM(playerid, COL_LRED, "Nagyobb admint nem teleportálhatsz magadhoz!");
    	//SendFormatMessage(player, COLOR_WHITE, "%s magához akart teleportálni!", JatekosNev(playerid));
    	return true;
	}
	
    GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
	if(GetPlayerState(player) == PLAYER_STATE_DRIVER)
 	{
		SetVehiclePos(GetPlayerVehicleID(player), fPos[0], fPos[1]+2, fPos[2]);
		LinkVehicleToInterior(GetPlayerVehicleID(player), GetPlayerInterior(playerid));
		SetVehicleVirtualWorld(GetPlayerVehicleID(player), GetPlayerVirtualWorld(playerid));
	} else {
		SetPlayerPos(player, fPos[0], fPos[1]+2, fPos[2]);
	}
	
	PlayerInfo[player][phaz] = PlayerInfo[playerid][phaz];
	PlayerInfo[player][pFigyelmeztetes] = 0;
	SetInterior(player, GetPlayerInterior(playerid));
	SetVirtualWorld(player, GetPlayerVirtualWorld(playerid));

	SFM(playerid, COL_MKEK, "Sikeresen magadhoz teleportáltad "#COL_MKEK"%s"#COL_FEHER"-t", JatekosNev(player));
	SFM(player, COL_MKEK, "%s sikeresen magához teleportált!", JatekosNev(playerid));
	return true;
}

CMD:auncuff(playerid, params[])
{
	if(!Admin(playerid, 3))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	new jatekos;
	if(sscanf(params, "u", jatekos))
	    return SCM(playerid, COL_MKEK, "Használat: /auncuff [Játékos]");
	
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	
	if(!PlayerInfo[jatekos][pBilincselve])
		return SCM(playerid, COL_LRED, "Ez a játékos nincs megbilincselve!");
	
	GameTextForPlayer(jatekos, "~g~Admin levette rólad a bilincset!", 2500, 3);
	
	foreach(Player, p)
	{
		if(!Belepve(p)) continue;
		if(PlayerInfo[p][pVisz] == jatekos)
		{
			PlayerInfo[p][pVisz] = NINCS;
			break;
		}
	}
	
	Bilincs(jatekos, 0);
	AdminUzenet(COLOR_LIGHTRED, 1, "%s levette róla: %s a bilincset!", JatekosNev(playerid), JatekosNev(jatekos));
	
	return true;
}

CMD:pacsi(playerid, params[])
{
	if(!Admin(playerid, 1))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /pacsi [Játékos]");
		
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
	if((PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT))
		jatekos = playerid;
	
	new Float:pos[3];
	GetPlayerPos(jatekos, PosExt(pos));
	SetPlayerPos(jatekos, PosExt(pos) + 5);
	PlayerPlaySound(jatekos, 1130, PosExt(pos) + 5);
	
	AdminUzenet(COLOR_LIGHTRED, 1, "%s felpacsizta %s-t", JatekosNev(playerid), JatekosNev(jatekos));
	return true;
}

CMD:robbant(playerid, params[])
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /robbant [Játékos]");
		
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
	    return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
	if((PlayerInfo[jatekos][padmin] > PlayerInfo[playerid][padmin] && !IsScripter(playerid) && PlayerInfo[playerid][padmin] < TULAJ_SZINT))
		jatekos = playerid;
	
	Felrobbant( jatekos );
	
	if(!IsScripter(playerid))
		AdminUzenet(COLOR_LIGHTRED, PlayerInfo[playerid][padmin], "%s felrobbantotta %s-t", JatekosNev(playerid), JatekosNev(jatekos));
		
	SFM(playerid, COL_VZOLD, "Felrobbantottad õt: "#COL_MKEK"%s", JatekosNev(jatekos));
	return true;
}

CMD:apw(playerid, params[])
{
	#pragma unused params
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	PlayerInfo[playerid][pDefensed][1] = 3;
	ShowPlayerDialog(playerid, DIALOG_ADMIN, DIALOG_STYLE_INPUT, "Admin azonosítás", ""#COL_FEHER"\nAdd meg jelenlegi jelszavad\naz Adminjelszó váltásához!", "Rendben", "Mégse");
	return true;
}

CMD:ahegy(playerid, params[])
{
	if(!Admin(playerid, 1))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new az = 1;
	if(!isnull(params)) {
		az = strval(params);
		if(az < 1 || az > 6)
			az = 1;
	}

	switch(az)
	{
		case 1: SetPos(playerid, -372.81, 2128.20, 133.18, .update = true);
		case 2: SetPos(playerid, -340.553, 1985.268, 131.489, .update = true);
		case 3: SetPos(playerid, -319.854, 1945.073, 132.412, .update = true);
		case 4: SetPos(playerid, -483.645, 2114.076, 133.547, .update = true);
		case 5: SetPos(playerid, -427.619, 2503.875, 124.304, .update = true);
		case 6: SetPos(playerid, -459.990, 2371.782, 117.802, .update = true);
	}

	SFM(playerid, COL_VZOLD, "Sikeresen teleportáltál a %d számú Admin hegyre! Itt OOC is beszélhetsz.", az);
	SetInterior(playerid,0);
	SetVirtualWorld(playerid, 0);
	return true;
}

CMD:getcar(playerid, params[])//ah-ban
{
    new jarmuid = NINCS, Float: fPos[3], sql = 0;
	if(!Admin(playerid, 3))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(sscanf(params, "dD(0)", jarmuid, sql))
	    return SCM(playerid, COL_MKEK, "Használat: /getcar [JármûID] [SQL ID alapján? (Ha igen írj 1-et)]");
		
	if(sql == 1) jarmuid = vInfo[jarmuid][vID];
		
    if(!IsVehicleConnected(jarmuid))
	    return SCM(playerid, COL_LRED, "Ez a Jármû ID nincs spawnolva!");
	new sid = JarmuID(jarmuid,playerid);
	if(vInfo[sid][vGarazsban] == 1)
		return SCM(playerid,COL_LRED, "Ez a jármû garázsban van!");
	if(vInfo[sid][vApben] == 1)
		return SCM(playerid,COL_LRED,"Ez a jármû AdminParkolóban van.");

	GetPlayerPos(playerid, fPos[0], fPos[1], fPos[2]);
 	SetVehiclePos(jarmuid, fPos[0], fPos[1]+3, fPos[2]);
 	LinkVehicleToInterior(jarmuid, GetPlayerInterior(playerid));
 	SetVehicleVirtualWorld(jarmuid, GetPlayerVirtualWorld(playerid));
	new mo = GetVehicleModel(jarmuid);
	
	TuningBetolt(jarmuid);
	
 	//AdminUzenet(COLOR_LIGHTRED, 1, "%s magához teleportált egy %s típusú jármûvet | JármûID: %d[%d]", JatekosNev(playerid), VehicleNames[GetVehicleModel(jarmuid)-400], jarmuid, vInfoID[jarmuid]);
	SFM(playerid, COL_MKEK, "Teleportálva: "#COL_MKEK"%s"#COL_FEHER"(%d) | JármûID: %d[%d] | Tulaj: "#COL_MKEK"%s", VehicleNames[mo - 400], mo, jarmuid, vInfoID[jarmuid], JarmuTulaj(vInfoID[jarmuid]));
	return true;
}

CMD:gotocar(playerid, params[])//ah-ban
{
    new jarmuid, Float: fPos[3], sql = 0;
	if(!Admin(playerid, 3))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(sscanf(params, "dD(0)", jarmuid, sql))
	    return SCM(playerid, COL_MKEK, "Használat: /gotocar [JármûID] [SQL ID alapján? (Ha igen írj 1-et)]");
		
	if(sql == 1) jarmuid = vInfo[jarmuid][vID];
		
    if(!IsVehicleConnected(jarmuid))
	    return SCM(playerid, COL_LRED, "Ez a Jármû ID nincs spawnolva!");
		
	new sid = JarmuID(jarmuid,playerid);
	if(vInfo[sid][vGarazsban] == 1)
		return SCM(playerid,COL_LRED, "Ez a jármû garázsban van!");
	if(vInfo[sid][vApben] == 1)
		return SCM(playerid,COL_LRED,"Ez a jármû AdminParkolóban van.");

    SetVirtualWorld(playerid, GetVehicleVirtualWorld(jarmuid));
	GetVehiclePos(jarmuid, fPos[0], fPos[1], fPos[2]);
 	SetPos(playerid, fPos[0], fPos[1]+3, fPos[2]);
 	new mo = GetVehicleModel(jarmuid);
	
	//AdminUzenet(COLOR_LIGHTRED, 1, "%s oda teleportált egy %s típusú jármûhöz | JármûID: %d[%d]", JatekosNev(playerid), VehicleNames[GetVehicleModel(jarmuid)-400], jarmuid, vInfoID[jarmuid]);
	SFM(playerid, COL_MKEK, "Teleportálva: "#COL_MKEK"%s"#COL_FEHER"(%d) | JármûID: %d[%d] | Tulaj: "#COL_MKEK"%s", VehicleNames[mo - 400], mo, jarmuid, vInfoID[jarmuid], JarmuTulaj(vInfoID[jarmuid]));
	return true;
}

CMD:gotopos(playerid, params[])//ah-ban
{
    if(!Admin(playerid, 4))
	    return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	new Float:pos[3];
	if(sscanf(params, "fff", PosExt(pos)))
	    return SCM(playerid, COL_MKEK, "Használat: /gotopos [X] [Y] [Z]");
		
	SetPos(playerid, PosExt(pos));
	SFM(playerid, COL_MKEK, "Teleportálva ide: %.3f %.3f %.3f", pos[0], pos[1], pos[2]);
	return true;
}

CMD:poz(playerid, params[])//ah-ban
{
	#pragma unused params
	new Float:pos[3], Float:angle2;
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	GetPlayerFacingAngle(playerid, angle2);
	format(uzenet, sizeof(uzenet), "Poziciód: (X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Interior: %d | VirtualWorld: %d)", pos[0], pos[1], pos[2], angle2, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
	SendClientMessage(playerid, COLOR_WHITE, uzenet);
	return true;
}

CMD:pozmentes(playerid, params[])//ah-ban
{
	if(!Admin(playerid, FOADMIN_SZINT))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /pozmentes [Információ] | scriptfiles/pozmentes.txt");

	new Float:pos[4], int, vw, str[256];
	
	GetPlayerPos(playerid, PosExt(pos));
	GetPlayerFacingAngle(playerid, pos[3]);
	int = GetPlayerInterior(playerid);
	vw = GetPlayerVirtualWorld(playerid);
	
	format(str, sizeof(str), "Poziciód: (X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Int:%d | VW:%d) - mentve", PosExt(pos), pos[3], int, vw);
	SendClientMessage(playerid, COLOR_WHITE, str);
	
	format(str, sizeof(str), "Poziciód: (X:%.3f | Y:%.3f | Z:%.3f | Angle: %.3f | Int:%d | VW:%d) - (%.3f, %.3f, %.3f, %.3f) - %s \r\n", PosExt(pos), pos[3], int, vw, PosExt(pos), pos[3], params);
	FajlIras("pozmentes.txt", str);
	return true;
}

CMD:sound(playerid, params[])
{
	if(!IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new soundid;
	if(sscanf(params, "d", soundid))
		return SCM(playerid, COL_MKEK, "Használat: /sound [soundid]");
	PlayerPlaySound(playerid, soundid, 0.0, 0.0, 0.0);
	return true;
}

CMD:ho(playerid, params[])
{
	if(!IsScripter(playerid))
		return true;
	
	new Float:radius, Float:magassag;
	new Float:hopos[4];
	
	if(sscanf(params, "ff", radius, magassag)) //sscanf(params, "f", szog))
		return SCM(playerid, COL_MKEK, "Használat: /ho [rádiusz] [magasság]");
	
	GetPlayerPos(playerid, PosExt(hopos));
	GetPlayerFacingAngle(playerid, hopos[3]);
	
	GetXYInFrontOfPoint(hopos[0], hopos[1], hopos[3], radius);
	
	if(PlayerInfo[playerid][pHatizsakO])
		SetDynamicObjectPos(PlayerInfo[playerid][pHatizsakO], PosExt(hopos) + magassag), SetDynamicObjectRot(PlayerInfo[playerid][pHatizsakO], 0.0, 0.0, hopos[3]);
	else
		PlayerInfo[playerid][pHatizsakO] = CreateDynamicObject(371, PosExt(hopos) + magassag, 0.0, 0.0, hopos[3]);
	
	Streamer_Update(playerid);
	
	SFM(playerid, COL_MKEK, "Rádiusz: %f", radius);
	return true;
}

CMD:pedanim(playerid, params[])
{
	if(!IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new pedlibrary[32], pedanims[32], Float:fdelta, loop, lockx, locky, freeze, time, forcesync;
	if(sscanf(params, "s[32]s[32]fdddddd", pedlibrary, pedanims, fdelta, loop, lockx, locky, freeze, time, forcesync))
		return SCM(playerid, COL_MKEK, "Használat: /pedanim [pedlibrar] [pedanim] [fdelta] [loop] [lockx] [locky] [freeze] [time] [forcesync]");
		
	LoopingAnim(playerid, pedlibrary, pedanims, fdelta, loop, lockx, locky, freeze, time, forcesync);
	///pedanim GETUP_FRONT 4 0 0 0 0 1000 1
	return true;
}

CMD:td(playerid, params[])
{
	ShowPlayerDialog(playerid, DIALOG_SHOWTEXTDRAW, DIALOG_STYLE_LIST, "Textdraw kezelés:", "Bekapcsolás\nKikapcsolás", "Mehet", "Mégse");
	return true;
}

/*CMD:showtd(playerid,params[])
{
	return cmd_td(playerid,params);
}*/



CMD:adminalnev(playerid,params[])
{
	if(!Admin(playerid, 1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	new nev[24];
	if(sscanf(params,"s[24]",nev)) return SCM(playerid,COL_MKEK,"Használat: /adminálnév [Álnév]");
	if(Karakter_Ellenorzes(params)) return SCM(playerid, COL_LRED, "A név nem tartalmazhat speciális karaktereket! ( /,|,*,', stb)");
	new astr[256];
	format(astr,256,"%s megváltoztatta adminálnevét erre: %s",JatekosNev(playerid),nev);
	AdminUzenetEx(COLOR_LIGHTRED,1,astr);
	format(PlayerInfo[playerid][pAdminAlnev],MAX_PLAYER_NAME,"%s",nev);
	return 1;
}

CMD:adminalnevbe(playerid,params[])
{
	if(!Admin(playerid,1)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	if(!IsScripter(playerid))
	{
		if(!PlayerInfo[playerid][pAduty]) return SCM(playerid,COL_LRED,"Csak adminszolgálatban!");
	}
	if(PlayerInfo[playerid][pAdminAlnevbe] == false)
	{
		PlayerInfo[playerid][pAdminAlnevbe] = true;
		SCM(playerid,COL_MKEK,"Adminálnév bekapcsolva!");
		return true;
	}
	else 
	{
		PlayerInfo[playerid][pAdminAlnevbe] = false;
		SCM(playerid,COL_MKEK,"Adminálnév kikapcsolva!");
	}
	return 1;
}
/*
CMD:adminalnevbe(playerid,params[])
{
    if(!Admin(playerid, FOADMIN_SZINT)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	return 1;
}
*/
CMD:bk(playerid, params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");
	
	foreach(Player, p)
    {
        if( FInfo[ PlayerInfo[p][pFrakcio] ][fLegalis] == FK_REND || PlayerInfo[p][pFrakcio] == 1 || PlayerInfo[p][pFrakcio] == 15 || PlayerInfo[p][pFrakcio] == 6)
        {
			SFM(p, COL_MKEK, "%s erõsítést kért! Információ: %s", JatekosNev(playerid, true), params);
			SetPlayerMarkerForPlayer(p, playerid, 0x00ff66AA);
		}
    }
	SCM(playerid, COL_VZOLD, "Erõsítést hívtál!");
	return true;
}

CMD:cbk(playerid, params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");
		
	foreach(Player, p)
    {
        if(PlayerInfo[p][pDuty][1] && FInfo[ PlayerInfo[p][pFrakcio] ][fLegalis] == FK_REND || PlayerInfo[p][pFrakcio] == 1 || PlayerInfo[p][pFrakcio] == 15 || PlayerInfo[p][pFrakcio] == 6)
        {
			SFM(p, COL_MKEK, "%s lemondta az erõsítést!", JatekosNev(playerid, true));
			SetPlayerMarkerForPlayer(p, playerid, COLOR_INVISIBLE);
			SetPlayerColor(playerid, 0x8d8dffAA & 0xFFFFFF00);//listában normálisan látható
		}
    }
	
	return true;
}

CMD:adatnezes(playerid, params[])
{
	new jatekos;
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /adatnezes [Játékos IDje]");
		
	if(jatekos == INVALID_PLAYER_ID || IsPlayerNPC(jatekos) || !Belepve(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
		
	SendFormatMessage(playerid, COLOR_WHITE, "=================== "#COL_MKEK"[ %s adatai ]"#COL_FEHER" ===================", JatekosNev(jatekos, true));
	ShowPDAStats(playerid, jatekos);
	
	return true;
}

CMD:radomany(playerid, params[])
{
	new adomany;
	if(sscanf(params, "d", adomany))
		return SCM(playerid, COL_MKEK, "Használat: /r(iporter)adomany [összeg]");
	
	if(adomany < 50) return SCM(playerid, COL_MKEK, "Minimum 50 Dollár!");
	if(PlayerInfo[playerid][pBszPenz] < adomany) return SCM(playerid, COL_MKEK, "Nincs ennyi pénz a bankszámládon!");
	PlayerInfo[playerid][pBszPenz] -= adomany;
	FInfo[ FRAKCIO_RIPORTER ][fPenz] += adomany;
	nformat(str, 128, "%s támogatta a riportereket %d $-al",JatekosNev(playerid, true), adomany);
	FrakcioUzenet(COLOR_WHITE, FRAKCIO_RIPORTER, str);
	return true;
}

CMD:ram(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_FBI && PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD && PlayerInfo[playerid][pFrakcio] != FRAKCIO_KATONA)
		return SCM(playerid, COL_LRED, "Ezt a parancsot nem használhatod!");
		
	new houseid = KozeliHaz(playerid);
	
	if(houseid == NINCS)
		return SCM(playerid, COL_LRED, "Nincs a közeledben ház!");
			
	if(PlayerInfo[playerid][phaz] != NINCS)
		return SCM(playerid, COL_LRED, "Jelenleg is házban tartózkodsz!");
		
	Cselekves(playerid, "behatolt a házba.", 1);
	
	HazInfo[houseid][hZarva] = false;

	PutPlayerInHouse(playerid, houseid);  
	return true;
}

CMD:porolto(playerid, params[])
{
	if(PlayerInfo[playerid][pFrakcio] == FRAKCIO_LSFD)
	{
		new car = NINCS;
		car = GetClosestVehicle(playerid);
		if(GetDistanceToVehicle(playerid, car) < 5.0)
		{
			if(GetVehicleModel(car) == 407)
			{
				GiveWeapon(playerid, 42, 10000, false, true);//porral oltó
				SCM(playerid, COL_LRED, "Kivettél egy poroltót a jármubol!");
			}
		} else
			return SCM(playerid, COL_LRED, "Nincs megfelelo jármu a közeledben!");
	}
	return 1;
}

CMD:portable(playerid, params[])
{
	if(PlayerInfo[playerid][pHitman] > 0)
		return true;
	new param[16];
	
	if(sscanf(params, "s", param))
		return SCM(playerid, COL_MKEK, "Használat: /portable [ Munka / Álnév / Tagok / Rendelés / Célpontok ]");

	if(!strcmp(param, "munka", true))
	{
		PlayerInfo[playerid][pHitmanDuty] = 1;
		
		foreach(Player, x)
		{
			if(PlayerInfo[x][pHitman] < 0)
			{
				nformat(string, 128, "%s munkába állt..", JatekosNev(playerid, true));
				SendClientMessage(x, COLOR_YELLOW, string);
			}
		}
	}
	if(!strcmp(param, "álnév", true) || !strcmp(param, "alnev", true))
	{
		new alnev[24];
		if(sscanf(params, "s", alnev))
			return SCM(playerid, COL_MKEK, "Használat: /portable álnév [név]");
			
		format(PlayerInfo[playerid][pAlnev], MAX_PLAYER_NAME, alnev);
		
		SFM(playerid, COL_MKEK, "Az álneved mostantól: %s", alnev);
	}
	if(!strcmp(param, "tagok", true))
	{
		new db;
		foreach(Player, id)
		{
			if(!Belepve(id)) continue;
			if(PlayerInfo[id][pHitman] == NINCS || PlayerInfo[id][pHitman] == -2 || PlayerInfo[id][pHitman] > gettime())
			{
				SendFormatMessage(playerid, COLOR_MKEK, "[%d]%s - %s - %s", id, JatekosNev(id, false, true), PlayerInfo[id][pHitmanNev], HitmanRang( id ));
				db++;
			}
		}
		
		if(!db)
			SCM(playerid, COL_LRED, "Jelenleg nincs online Hitman.");
	}
	if(!strcmp(param, "rendelés", true) || !strcmp(param, "rendeles", true))
	{
		//ShowPlayerDialog(playerid, DIALOG_HRENDELES, 
	}
	return true;
}

stock IsVehicleOccupied(vehicleid) // Returns 1 if there is anyone in the vehicle
{
    foreach(Player,i)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i)==vehicleid)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
    }
	return false;
}

CMD:getip(playerid,params[])
{
	if(!Admin(playerid,2) || !IsScripter(playerid)) return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
	new id;
	if(sscanf(params,"u",id)) return SCM(playerid,COL_MKEK,"Használat: /getip [Játékos]");
	else if(id == INVALID_PLAYER_ID) return SCM(playerid,COL_LRED,"Nincs ilyen játékos.");
	else if(Admin(id,1) && !Admin(playerid,FOADMIN_SZINT) && !IsScripter(playerid)) return SCM(playerid,COL_LRED,"Admin IP-jét nem kérheted le.");
	else {
	    new ip[144];
	    GetPlayerIp(id,ip,sizeof ip);
		SFM(playerid,COL_MKEK,"%s IP-je: %s",JatekosNev(id),ip);
	}
	return 1;
}

/*CMD:getgpci(playerid, params[])
{
	if(Admin(playerid,FOADMIN_SZINT))
	{
	    new jatekos;
		if(sscanf(params,"u",jatekos)) return SendClientMessage(playerid,0xFFFFFF,"Használat: /getgpci [Játékos/ID]");
	    else if(jatekos == INVALID_PLAYER_ID) return SendClientMessage(playerid,0xFFFFFF,"Nincs ilyen játékos.");
	    new str[200];
	    new str2[200];
	    new ggpci[200];
	    GetPlayerVersion(jatekos,str2,sizeof(str2));
	    gpci(jatekos,ggpci,sizeof(ggpci));
	    format(str2, sizeof(str2), "A Játékos verziója: %s",str2);
	    format(str, sizeof(str), "A játékos GPCI száma: %s",ggpci);
	    SendClientMessage(playerid, 0xFFFFFF, str);
	    SendClientMessage(playerid, 0xFFFFFF, str2);
    }
    else return SendClientMessage(playerid,COLOR_WHITE,NEM_HASZNALHATO);
    return 1;
}*/

/*
CMD:crsmost(playerid,params[])
{
	if(!Admin(playerid,AC_SZINT)) return SCM(playerid,COL_MKEK,"Nem használhatod ezt a parancsot.");
	new ido = gettime();
	for(new i; i<MAX_VEHICLES; i++)
	{
	    if(!IsVehicleOccupied(i))
	    {
			if(KocsiUtolsoHasznalat[i] < (ido-300))
			{
				if(vInfo[i][vMunka] == 0)
				{
					SetVehicleToRespawn(i);
				}
				else
				{
					SetVehicleHealth(i,1000);
					RepairVehicle(i);
					SetVehicleToRespawn(i);
				}
				TuningBetolt(i);
			}
		}
	}
	new astr[144];
	format(astr,144,"%s csinált egy hirtelen jármû respawnt.",JatekosNev(playerid));
	AdminUzenetEx(COLOR_LIGHTRED,1,astr);
	SendClientMessageToAll(COLOR_WHITE, ""#COL_MKEK"Felhívás:"#COL_FEHER" Elhagyott és használaton kívüli jármûvek elvontatva!");
	return 1;
}*/
//Matteo boost
CMD:ms(playerid, params[])
{
	if(!Admin(playerid,FOADMIN_SZINT)) return SCM(playerid,COL_MKEK,"Nem használhatod ezt a parancsot.");
	new ertek;
	if(sscanf(params,"u",ertek)) return SendClientMessage(playerid,0xFFFFFF,"Használat: /maxspeed [érték]");
	MaxSpeed = strval(params[0]);
	SCM(playerid, COL_VZOLD, "Rendõrkocsik sebbesége állítiva");
	return true;
}

CMD:debugcrs(playerid,params[])
{
	if(!Admin(playerid,AC_SZINT)) return SCM(playerid,COL_MKEK,"Nem használhatod ezt a parancsot.");
	for(new asd; asd < MAX_VEHICLES; asd++)
	{
		SetVehicleToRespawn(asd);
	}
	new astr[144];
	format(astr,144,"%s debuggolja a jármûveket.",JatekosNev(playerid));
	AdminUzenetEx(COLOR_LIGHTRED,1,astr);
	SendClientMessageToAll(COLOR_WHITE, ""#COL_MKEK"Felhívás:"#COL_FEHER" Debugból az összes jármû respawnolva!");
	return 1;
}
CMD:villogo(playerid,params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND || PlayerInfo[playerid][pFrakcio] !=FRAKCIO_KORMANY)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");
	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Kocsiban kell ülnöd!");
	ShowPlayerDialog(playerid, DIALOG_VILLOGO1, DIALOG_STYLE_LIST, "Válassz az alábbiak közül", DIALOG1_MSG, "Felrak", "Mégse" );
	return true;
}
CMD:felszereles(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 1276.2474,-32.5700,1492.9459) && !IsPlayerInRangeOfPoint(playerid, 5.0, 267.768, 118.279, 1004.617))//LSPD bázis duty hely
	{
		SCM(playerid, COL_LRED, "Nem vagy az öltözõszekrényeknél!");
		return true;
	}
	ShowPlayerDialog(playerid, DIALOG_FELSZERELES, 2, "Felszerelések", "Cadet felszerelés\nOfficer felszerelés\nDetective felszerelés\nLSPD Emergency felszerelés\nSzolgálat leadása", "Felvesz", "Mégse");
	return true;
}
CMD:trafipax(playerid,params[])
{
	if(FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] != FK_REND)
		return SCM(playerid, COL_LRED, "Te nem vagy a rendvédelem tagja!");
	if(!IsPlayerInAnyVehicle(playerid))
		return SCM(playerid, COL_LRED, "Kocsiban kell ülnöd!");
	if(PlayerInfo[playerid][pTrafipax] == false)
	{
		PlayerInfo[playerid][pTrafipax] = true;
		Cselekves(playerid, "elõvette a trafipaxot.");
		SCM(playerid, COL_MKEK, "Elõvettél egy trafipaxot!");
	}
	else
	{
		PlayerInfo[playerid][pTrafipax] = false;
		Cselekves(playerid, "elrakta a trafipaxot.");
		SCM(playerid, COL_MKEK, "Elarktad a trafipaxot!");
	}
	return true;
}
CMD:swat(playerid,params[])
{
	if(PlayerInfo[playerid][pSWAT] != 1 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new car = NINCS;
	car = GetClosestVehicle(playerid);

	if(GetDistanceToVehicle(playerid, car) < 5.0)
	{
		if(GetVehicleModel(car) == 427 || GetVehicleModel(car) == 482)
		{
			ShowPlayerDialog(playerid, DIALOG_SWAT, 2, "SWAT", "Alap felszerelés\nKözepes felszerelés\nNehéz felszerelés\nLead", "Felvesz", "Mégse");
		}
	} else
		return SCM(playerid, COL_LRED, "Nincs Enforcer/Burrito a közeledben!");
	return true;
}
CMD:sr(playerid,params[])
{
	if(PlayerInfo[playerid][pSWAT] != 1 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(PlayerInfo[playerid][pMeghalt])
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");
	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /sr [IC Rádió]");
	if(!OOC_Ellenorzes(playerid, "/sr", params))
		return true;
	format(prox, sizeof(prox),"** %s %s: %s vége ", SWATRangok(PlayerInfo[playerid][pSWATRang]), JatekosNev(playerid, true), params);
    
	foreach(Player, p)
    {
        if(Belepve(p) && PlayerInfo[p][pSWAT] == 1)
        {
			SendClientMessage(p, 0xffc400AA, prox);
		}
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}
CMD:srb(playerid,params[])
{
	if(PlayerInfo[playerid][pSWAT] != 1 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(PlayerInfo[playerid][pMeghalt])
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");
	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /srb [OOC Rádió]");
	if(!OOC_Ellenorzes(playerid, "/srb", params))
		return true;
	format(prox, sizeof(prox),"(( ** %s %s: %s ))", SWATRangok(PlayerInfo[playerid][pSWATRang]), JatekosNev(playerid, true), params);
    
	foreach(Player, p)
    {
        if(Belepve(p) && PlayerInfo[p][pSWAT] == 1)
        {
			SendClientMessage(p, 0xffc400AA, prox);
		}
    }
    format(prox, sizeof(prox), "(( [Rádió]%s mondja: %s ))", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}
CMD:sd(playerid, params[])
{
	if(PlayerInfo[playerid][pMeghalt])
		return SCM(playerid, COL_LRED, "A sokk hatására nem tudod kezelni a rádiód!");
	
	if(PlayerInfo[playerid][pSWAT] != 1 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);

	new prox[128];
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /sd [Sürgõsségi rádió] | Csak akkor használd ha tényleg szükség van rá!");
	if(!OOC_Ellenorzes(playerid, "/sd", params))
		return true;
		
	format(prox, sizeof(prox),"** SWAT %s %s: %s vége ", SWATRangok(PlayerInfo[playerid][pSWATRang]), JatekosNev(playerid, true), params);
		
    foreach(Player, p)
    {
		new fk = PlayerInfo[p][pFrakcio];
        if(Belepve(p) && !PlayerInfo[p][pTog][0] && (fk == FRAKCIO_LSMD || fk == FRAKCIO_LSPD || fk == FRAKCIO_FBI || fk == FRAKCIO_KORMANY || fk == FRAKCIO_LSFD || fk == FRAKCIO_KATONA))
			SendClientMessage(p, COLOR_ALLDEPT, prox);
    }
    format(prox, sizeof(prox), "[Rádió]%s mondja: %s", JatekosNev(playerid, true), params);
    ProxDetector(15.0, playerid, prox,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5, true);
	return true;
}
CMD:sinv(playerid,params[])
{
	if(PlayerInfo[playerid][pSWATRang] != 12 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new jatekos;
	if(sscanf(params, "u", jatekos))
		return SCM(playerid, COL_MKEK, "Használat: /sinv [Játékos]");
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");

	if(PlayerInfo[jatekos][pSWAT] == 1)
	{
		PlayerInfo[jatekos][pSWAT] = 0;
		PlayerInfo[jatekos][pSWATRang] = 0;
		SFM(jatekos, COL_VZOLD, "%s kirúgott téged a %s SWAT-ból!", JatekosNev(playerid));
		SFM(playerid, COL_VZOLD, "Kirúgtad õt: %s a SWAT-ból!", JatekosNev(jatekos));
	}
	else
	{
		PlayerInfo[jatekos][pSWAT] = 1;
		PlayerInfo[jatekos][pSWATRang] = 1;
		SFM(jatekos, COL_VZOLD, "%s felvett téged a %s SWAT-ba!", JatekosNev(playerid));
		SFM(playerid, COL_VZOLD, "Felvetted õt: %s a SWAT-ba!", JatekosNev(jatekos));
	}
	return true;
}
CMD:uzemmod(playerid,params[])
{
	if(PlayerInfo[playerid][pFrakcio] != FRAKCIO_LSPD &&!IsScripter(playerid) && PlayerInfo[playerid][pFrakcio] != 6 && PlayerInfo[playerid][pFrakcio] != 15)
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	if(PlayerInfo[playerid][pUzemmod] == 0)
	{
		PlayerInfo[playerid][pUzemmod] = 1;
		//Cselekves(playerid, "bekapcsolta a sokkoló üzemmódot a fegyverén", 1);
		SCM(playerid, COL_VZOLD, "Bekapcsoltad a sokkoló üzemmódot");
	}
	else
	{
		PlayerInfo[playerid][pUzemmod] = 0;
		//Cselekves(playerid, "kikapcsolta a sokkoló üzemmódot a fegyverén", 1);
		SCM(playerid, COL_VZOLD, "Kikapcsoltad a sokkoló üzemmódot");
	}
	return true;
}
CMD:srang(playerid,params[])
{
	if(PlayerInfo[playerid][pSWATRang] != 12 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
	new rang, jatekos, oka[64];
	if(sscanf(params, "uds[64]", jatekos, rang, oka))
			return SCM(playerid, COL_MKEK, "Használat: /srang [Játékos] [Rang (1-12)] [Oka]");
	if((jatekos == INVALID_PLAYER_ID) || !IsPlayerConnected(jatekos) || IsPlayerNPC(jatekos))
		return SCM(playerid, COL_LRED, "Nincs ilyen játékos!");
	if(rang < 1 || rang > 12)
			return SCM(playerid, COL_LRED, "A rang minimum 1 és maximum 12 lehet!");
	if(strlen(oka) > 64)
		return SCM(playerid, COL_LRED, "Az ok maximum 64 karakter lehet!");
	if(PlayerInfo[jatekos][pSWAT] != 1)
		return SCM(playerid, COL_LRED, "Ez a játékos nem tagja a SWAT-nak!");
	PlayerInfo[jatekos][pSWATRang] = rang;
	SFM(jatekos, COL_VZOLD, "Új rangot kaptál tõle a SWAT-nál: %s | Rang: [%d]%s | Oka: %s", JatekosNev(playerid), rang, SWATRangok(rang), oka);
	SFM(playerid, COL_VZOLD, "Új rangot adnál neki a SWAT-nál: %s | Rang: [%d]%s | Oka: %s", JatekosNev(jatekos), rang, SWATRangok(rang), oka);
	return true;
}

CMD:sgov(playerid,params[])
{
	if(PlayerInfo[playerid][pSWAT] != 1 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	if(isnull(params))
		return SCM(playerid, COL_MKEK, "Használat: /sgov [Bejelentés szövege] | Nem hírdetésre van");
		
	if(strlen(params) < 20)
		return SCM(playerid, COL_LRED, "A bejelentés szövegének legalább 20 karakter hosszúnak kell lennie!");
		
	if(!OOC_Ellenorzes(playerid, "/sgov", params))
		return true;
		
	new str[128];
	SendClientMessageToAll(0xffc400AA, "================== [ SWAT felhívás ] ==================");
	format(str, sizeof(str), "%s %s: %s", SWATRangok(PlayerInfo[playerid][pSWATRang]), JatekosNev(playerid, true), params);
	SendClientMessageToAll(0xffc400AA, str);
	return true;
}

CMD:smtagok(playerid,params[])
{
    SendClientMessage(playerid,0xd99b0bAA,"========== [ S&M TAGOK ] ==========");
    foreach(Player,p)
    {
        if(Belepve(p) && PlayerInfo[p][pSM] == 1)
        {
            switch(PlayerInfo[p][pSMrang])
            {
                case 1: SendFormatMessage(playerid,0xd99b0bAA,"Név: "#COL_MKEK"%s{ffea00} | Rang: S&M Tag",JatekosNev(p));
                case 2: SendFormatMessage(playerid,0xd99b0bAA,"Név: "#COL_MKEK"%s{ffea00} | Rang: S&M Elit",JatekosNev(p));
                case 3: SendFormatMessage(playerid,0xd99b0bAA,"Név: "#COL_MKEK"%s{ffea00} | Rang: S&M Vezetõ",JatekosNev(p));
                case 4: SendFormatMessage(playerid,0xd99b0bAA,"Név: "#COL_MKEK"%s{ffea00} | Rang: S&M Alapító",JatekosNev(p));
            }
        }
    }
	return 1;
}

CMD:smkocsi(playerid,params[])
{
	if(PlayerInfo[playerid][pSM] == 1 || IsAS(playerid) || Admin(playerid,1 || IsScripter(playerid)))
	{
	    if(IsPlayerInAnyVehicle(playerid)) return SCM(playerid,COL_LRED,"Jármûben nem hívhatsz le!");
	    else {
			PlayerInfo[playerid][pSMkocsi] = 1;
			new Float:pos[4];
			GetPlayerPos(playerid,pos[0],pos[1],pos[2]);
			GetPlayerFacingAngle(playerid,pos[3]);
			new veh = CreateVehicle(550,pos[0],pos[1],pos[2],pos[3],126,126,-1);
			PutPlayerInVehicle(playerid,veh,0);
			SetJarmu(veh,KOCSI_MOTOR,1);
			SetJarmu(veh,KOCSI_LAMPA,1);
			SetJarmu(veh,KOCSI_OBJECTIVE,1);
			SCM(playerid,COL_MKEK,"Sikeresen lehívtad a jármûvet! Ha kiszállsz a kocsiból, törlõdik.");
            AdminUzenet(COLOR_LIGHTRED,1,"%s lehívott egy körbevezetõ kocsit",JatekosNev(playerid));
	    }
	}
	else return SCM(playerid,COL_MKEK,"Csak S&M Tagoknak!");
	return 1;
}

CMD:stagok(playerid,params[])
{
	if(PlayerInfo[playerid][pSWAT] != 1 && !IsScripter(playerid))
		return SendClientMessage(playerid, COLOR_WHITE, NEM_HASZNALHATO);
		
	SendClientMessage(playerid, 0xffc400AA, "========== [ SWAT TAGOK ] ==========");
	foreach(Player, p)
	{
		if(Belepve(p) && PlayerInfo[p][pSWAT] == 1)
		{
			SendFormatMessage(playerid, 0xffc400AA, "Név: "#COL_MKEK"%s{ffea00} | Rang: [%d]"#COL_MKEK"%s{ffea00}%s", JatekosNev(p), PlayerInfo[p][pSWATRang], SWATRangok(PlayerInfo[p][pSWATRang]), (PlayerInfo[p][pSzunetel] ? (" | AFK") : ("")));
		}
	}
	return true;
}
CMD:elfogadck(playerid,params[])
{
	new ok[64];
	format(ok, sizeof(ok), "CK (%s)", JatekosNev(playerid));
	if(PlayerInfo[playerid][pMeghalt] != 1) return SCM(playerid, COL_VZOLD, "Ennyire megakarsz halni ?");
	PlayerInfo[playerid][pMeghalt] = 0;
	DeleteWeapon(playerid);
	Borton(playerid, 3);
	DestroyDynamic3DTextLabel(PlayerInfo[playerid][pHalalText]);
	PlayerInfo[playerid][pHalalText] = INVALID_3D_TEXT_ID;
	PlayerInfo[playerid][pJailIdo] = 99999999999;
	PlayerInfo[playerid][pjail] = 3;
	SCM(playerid, COL_VZOLD, "Elfogadta a karakter halált! Örök adminjailt kaptál");
	SCM(playerid, COL_VZOLD, "Keress fel egy fõadmint és õ segíteni fog neked!");
	BortonInfo(playerid, "Rendszer", ok);
	SetCameraBehindPlayer(playerid);
	KillTimer(Korhazbakerules(playerid));
	KillTimer(Hasznalhatja(playerid));
	return true;
}
CMD:elfogadhalal(playerid,params[])
{
	if(PlayerInfo[playerid][pMeghalt] != 1) return SCM(playerid, COL_VZOLD, "Ennyire megakarsz halni ?");
	if(PlayerInfo[playerid][pHalalfogadas] != 1) return SCM(playerid, COL_VZOLD, "Még nem..");
	PlayerInfo[playerid][pMeghalt] = 0;
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid);
	DestroyDynamic3DTextLabel(PlayerInfo[playerid][pHalalText]);
	PlayerInfo[playerid][pHalalText] = INVALID_3D_TEXT_ID;
	SCM(playerid, COL_VZOLD, "Kórházba kerültél!");
	SCM(playerid, COL_VZOLD, "A kórházi költség 600 $ volt!");
	GiveMoney(playerid,-600);
	PlayerInfo[playerid][pJailIdo] = 900;
	PlayerInfo[playerid][pjail] = 1;
	Borton(playerid, 1);
	BortonInfo(playerid, "Rendszer", "Halál");
	PlayerInfo[playerid][pFegyver] = 0;
	DeleteWeapon(playerid);
	SetCameraBehindPlayer(playerid);
	KillTimer(Korhazbakerules(playerid));
	KillTimer(Hasznalhatja(playerid));
	if(PlayerInfo[playerid][ppenz]>0)
	{
		SetMoney(playerid,0);
	}
	if(Korozes[playerid][krSzint])
	{
		new penz = (Korozes[playerid][krSzint] * 100);
		PlayerInfo[playerid][pBszPenz] -= penz;
		FInfo[ FRAKCIO_LSPD ][fPenz] += penz;
		Korozes[playerid][krSzint] = 0;
		SFM(playerid, COL_LRED, "Mivel kórházba kerülésed elõtt körözés volt rajtad, azért %s$ levonásra került a bankszámládról!", FormatNumber(penz, 0, ','));
	}
	return true;
}

stock GenerateRandomNumber(string[], const length = 8)
{
    for(new i; i < length; ++i)
    {
        string[i] = random(10) + '0';
    }
    return string;
}

stock UjGPSID()
{
	new i = 0, tid = 0;
	    
	for(;++i < MAXGPS;)
	{
	    if(!GPSInfo[i][gHasznalva])
	    {
	        tid = i;
	        break;
	    }
	}
	return tid;
}
stock GPSNameToID(const neve[])
{
    new vissza = NINCS, t = NINCS;
    for(;++t < MAXGPS;)
    {
        if(GPSInfo[t][gHasznalva])
        {
			if(!strcmp(neve, GPSInfo[t][gnev], true))
			{
				vissza = t;
				break;
			}
        }
    }
    return vissza;
}
funkcio TuningFelrak(playerid, kocsi, komponens)
{
	if(komponens >= 1008 && komponens <= 1010 && IsInvalidNosVehicle(kocsi) || !IsVehicleUpgradeCompatible(GetVehicleModel(kocsi), komponens))
	{
		if(Belepve(playerid) && playerid != NINCS)
			SCM(playerid,COL_LRED,"Ez az alkatresz nem kompatibilis ezen jármû típussal!");
		return 1;
	}
	AddVehicleComponent(kocsi, komponens);
	new tipus = GetVehicleComponentType(komponens);
	new vid = JarmuID(kocsi, INVALID_PLAYER_ID);
	if(komponens != 1087)
	{
		vInfo[vid][vMod][tipus] = komponens;
	}	
	else
	{
		vInfo[vid][vHidraulika] = 1;
	}
	vUpdate(vid,vuMod);
	return 1;
}
funkcio TuningBetolt(kocsi)
{
	new vid = JarmuID(kocsi,INVALID_PLAYER_ID);
	ChangeVehiclePaintjob(kocsi,vInfo[vid][vMatrica]);
	if(vInfo[vid][vHidraulika] != 0)
	{
		AddVehicleComponent(kocsi, 1087);
	}
	for(new i=0; i < 14; i++)
	{	
		if(vInfo[vid][vMod][i] == 0) continue;
		AddVehicleComponent(kocsi, vInfo[vid][vMod][i]);
	}
	return true;
}
stock RemoveVehicleComponents(kocsi)
{
	new componentid;
	new vid = JarmuID(kocsi, INVALID_PLAYER_ID);
	for (new i; i < 14; i++)
	{
	    componentid = GetVehicleComponentInSlot(kocsi, i);
	    if (componentid != 0)
		{
	        RemoveVehicleComponent(kocsi, componentid);
			vInfo[vid][vMod][i] = 0;
		}
	}
	vUpdate(vid, vuMod);
}
stock IsVehicleUpgradeCompatible(model,componentid) // by AirKite
{
	switch(model)
	{
		case 400:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 401:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
			}
		}
		case 404:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 405:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1001: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 410:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 415:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 418:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 420:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 421:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 422:
		{
			switch(componentid)
			{
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 426:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1019: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 436:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 439:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 477:
		{
			switch(componentid)
			{
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 478:
		{
			switch(componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1012: { return 1; }
				case 1013: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1022: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 489:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 491:
		{
			switch(componentid)
			{
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 492:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 496:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1017: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 500:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 516:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1015: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 517:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 518:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 527:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 529:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 534:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1100: { return 1; }
				case 1101: { return 1; }
				case 1106: { return 1; }
				case 1122: { return 1; }
				case 1123: { return 1; }
				case 1124: { return 1; }
				case 1125: { return 1; }
				case 1126: { return 1; }
				case 1127: { return 1; }
				case 1178: { return 1; }
				case 1179: { return 1; }
				case 1180: { return 1; }
				case 1185: { return 1; }
			}
		}
		case 535:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1109: { return 1; }
				case 1110: { return 1; }
				case 1113: { return 1; }
				case 1114: { return 1; }
				case 1115: { return 1; }
				case 1116: { return 1; }
				case 1117: { return 1; }
				case 1118: { return 1; }
				case 1119: { return 1; }
				case 1120: { return 1; }
				case 1121: { return 1; }
			}
		}
		case 536:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1103: { return 1; }
				case 1104: { return 1; }
				case 1105: { return 1; }
				case 1107: { return 1; }
				case 1108: { return 1; }
				case 1128: { return 1; }
				case 1181: { return 1; }
				case 1182: { return 1; }
				case 1183: { return 1; }
				case 1184: { return 1; }
			}
		}
		case 540:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 542:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1014: { return 1; }
				case 1015: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 546:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1002: { return 1; }
				case 1004: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 547:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1003: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
			}
		}
		case 549:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1011: { return 1; }
				case 1012: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 550:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 551:
		{
			switch(componentid)
			{
				case 1002: { return 1; }
				case 1003: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1016: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1021: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 558:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1088: { return 1; }
				case 1089: { return 1; }
				case 1090: { return 1; }
				case 1091: { return 1; }
				case 1092: { return 1; }
				case 1093: { return 1; }
				case 1094: { return 1; }
				case 1095: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1163: { return 1; }
				case 1164: { return 1; }
				case 1165: { return 1; }
				case 1166: { return 1; }
				case 1167: { return 1; }
				case 1168: { return 1; }
			}
		}
		case 559:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1065: { return 1; }
				case 1066: { return 1; }
				case 1067: { return 1; }
				case 1068: { return 1; }
				case 1069: { return 1; }
				case 1070: { return 1; }
				case 1071: { return 1; }
				case 1072: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1158: { return 1; }
				case 1159: { return 1; }
				case 1160: { return 1; }
				case 1161: { return 1; }
				case 1162: { return 1; }
				case 1173: { return 1; }
			}
		}
		case 560:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1026: { return 1; }
				case 1027: { return 1; }
				case 1028: { return 1; }
				case 1029: { return 1; }
				case 1030: { return 1; }
				case 1031: { return 1; }
				case 1032: { return 1; }
				case 1033: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1138: { return 1; }
				case 1139: { return 1; }
				case 1140: { return 1; }
				case 1141: { return 1; }
				case 1169: { return 1; }
				case 1170: { return 1; }
			}
		}
		case 561:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1055: { return 1; }
				case 1056: { return 1; }
				case 1057: { return 1; }
				case 1058: { return 1; }
				case 1059: { return 1; }
				case 1060: { return 1; }
				case 1061: { return 1; }
				case 1062: { return 1; }
				case 1063: { return 1; }
				case 1064: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1154: { return 1; }
				case 1155: { return 1; }
				case 1156: { return 1; }
				case 1157: { return 1; }
			}
		}
		case 562:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1034: { return 1; }
				case 1035: { return 1; }
				case 1036: { return 1; }
				case 1037: { return 1; }
				case 1038: { return 1; }
				case 1039: { return 1; }
				case 1040: { return 1; }
				case 1041: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1146: { return 1; }
				case 1147: { return 1; }
				case 1148: { return 1; }
				case 1149: { return 1; }
				case 1171: { return 1; }
				case 1172: { return 1; }
			}
		}
		case 565:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1045: { return 1; }
				case 1046: { return 1; }
				case 1047: { return 1; }
				case 1048: { return 1; }
				case 1049: { return 1; }
				case 1050: { return 1; }
				case 1051: { return 1; }
				case 1052: { return 1; }
				case 1053: { return 1; }
				case 1054: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1150: { return 1; }
				case 1151: { return 1; }
				case 1152: { return 1; }
				case 1153: { return 1; }
			}
		}
		case 567:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1102: { return 1; }
				case 1129: { return 1; }
				case 1130: { return 1; }
				case 1131: { return 1; }
				case 1132: { return 1; }
				case 1133: { return 1; }
				case 1186: { return 1; }
				case 1187: { return 1; }
				case 1188: { return 1; }
				case 1189: { return 1; }
			}
		}
		case 575:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1042: { return 1; }
				case 1043: { return 1; }
				case 1044: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1099: { return 1; }
				case 1174: { return 1; }
				case 1175: { return 1; }
				case 1176: { return 1; }
				case 1177: { return 1; }
			}
		}
		case 576:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1134: { return 1; }
				case 1135: { return 1; }
				case 1136: { return 1; }
				case 1137: { return 1; }
				case 1190: { return 1; }
				case 1191: { return 1; }
				case 1192: { return 1; }
				case 1193: { return 1; }
			}
		}
		case 580:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 585:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1003: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 589:
		{
			switch(componentid)
			{
				case 1000: { return 1; }
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1016: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 600:
		{
			switch(componentid)
			{
				case 1004: { return 1; }
				case 1005: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1013: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1020: { return 1; }
				case 1022: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
		case 603:
		{
			switch(componentid)
			{
				case 1001: { return 1; }
				case 1006: { return 1; }
				case 1007: { return 1; }
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1017: { return 1; }
				case 1018: { return 1; }
				case 1019: { return 1; }
				case 1020: { return 1; }
				case 1023: { return 1; }
				case 1024: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
				case 1142: { return 1; }
				case 1143: { return 1; }
				case 1144: { return 1; }
				case 1145: { return 1; }
			}
		}
		case 402,403,406..409,411..414,416,419,423,424,427..429,431..435,437,438,440..445,448,450,451,455..459,461..463,466..468,470,471,474,475,479..486,490,494,495,498,499,502..510,514,515,521..526,528,530..533,541,552,543..545,554..557,566,568,578,571..574,579,581..584,586..588,591,594,596..599,601,602,604..611:
		{
			switch(componentid)
			{
				case 1008: { return 1; }
				case 1009: { return 1; }
				case 1010: { return 1; }
				case 1025: { return 1; }
				case 1073: { return 1; }
				case 1074: { return 1; }
				case 1075: { return 1; }
				case 1076: { return 1; }
				case 1077: { return 1; }
				case 1078: { return 1; }
				case 1079: { return 1; }
				case 1080: { return 1; }
				case 1081: { return 1; }
				case 1082: { return 1; }
				case 1083: { return 1; }
				case 1084: { return 1; }
				case 1085: { return 1; }
				case 1087: { return 1; }
				case 1096: { return 1; }
				case 1097: { return 1; }
				case 1098: { return 1; }
			}
		}
	}
	return 0;
}

stock GetVehicleCompatibleUpgrades(model, count, &componentid = 0) // by AirKite
{
	componentid = 0;
	switch(model)
	{
		case 400:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1013; }
				case 5: { componentid = 1018; }
				case 6: { componentid = 1019; }
				case 7: { componentid = 1020; }
				case 8: { componentid = 1021; }
				case 9: { componentid = 1024; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 401:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1007; }
				case 7: { componentid = 1008; }
				case 8: { componentid = 1009; }
				case 9: { componentid = 1010; }
				case 10: { componentid = 1013; }
				case 11: { componentid = 1017; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
			}
		}
		case 404:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
			}
		}
		case 405:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1001; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 410:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 415:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1023; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 418:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1020; }
				case 8: { componentid = 1021; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 420:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 421:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1008; }
				case 3: { componentid = 1009; }
				case 4: { componentid = 1010; }
				case 5: { componentid = 1014; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 422:
		{
			switch(count)
			{
				case 1: { componentid = 1007; }
				case 2: { componentid = 1008; }
				case 3: { componentid = 1009; }
				case 4: { componentid = 1010; }
				case 5: { componentid = 1013; }
				case 6: { componentid = 1017; }
				case 7: { componentid = 1019; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
			}
		}
		case 426:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 436:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1022; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 439:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1023; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
				case 28: { componentid = 1142; }
				case 29: { componentid = 1143; }
				case 30: { componentid = 1144; }
				case 31: { componentid = 1145; }
			}
		}
		case 477:
		{
			switch(count)
			{
				case 1: { componentid = 1006; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1017; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 478:
		{
			switch(count)
			{
				case 1: { componentid = 1004; }
				case 2: { componentid = 1005; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1012; }
				case 7: { componentid = 1013; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1022; }
				case 11: { componentid = 1024; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 489:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1016; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1024; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 491:
		{
			switch(count)
			{
				case 1: { componentid = 1003; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 492:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 496:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1003; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1011; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
			}
		}
		case 500:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1013; }
				case 5: { componentid = 1019; }
				case 6: { componentid = 1020; }
				case 7: { componentid = 1021; }
				case 8: { componentid = 1024; }
				case 9: { componentid = 1025; }
				case 10: { componentid = 1073; }
				case 11: { componentid = 1074; }
				case 12: { componentid = 1075; }
				case 13: { componentid = 1076; }
				case 14: { componentid = 1077; }
				case 15: { componentid = 1078; }
				case 16: { componentid = 1079; }
				case 17: { componentid = 1080; }
				case 18: { componentid = 1081; }
				case 19: { componentid = 1082; }
				case 20: { componentid = 1083; }
				case 21: { componentid = 1084; }
				case 22: { componentid = 1085; }
				case 23: { componentid = 1087; }
				case 24: { componentid = 1096; }
				case 25: { componentid = 1097; }
				case 26: { componentid = 1098; }
			}
		}
		case 516:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1015; }
				case 9: { componentid = 1016; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1021; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 517:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1016; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 518:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 527:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1007; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1014; }
				case 7: { componentid = 1015; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1021; }
				case 12: { componentid = 1025; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
			}
		}
		case 529:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1011; }
				case 9: { componentid = 1012; }
				case 10: { componentid = 1017; }
				case 11: { componentid = 1018; }
				case 12: { componentid = 1019; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1023; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
			}
		}
		case 534:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1100; }
				case 23: { componentid = 1101; }
				case 24: { componentid = 1106; }
				case 25: { componentid = 1122; }
				case 26: { componentid = 1123; }
				case 27: { componentid = 1124; }
				case 28: { componentid = 1125; }
				case 29: { componentid = 1126; }
				case 30: { componentid = 1127; }
				case 31: { componentid = 1178; }
				case 32: { componentid = 1179; }
				case 33: { componentid = 1180; }
				case 34: { componentid = 1185; }
			}
		}
		case 535:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1109; }
				case 23: { componentid = 1110; }
				case 24: { componentid = 1113; }
				case 25: { componentid = 1114; }
				case 26: { componentid = 1115; }
				case 27: { componentid = 1116; }
				case 28: { componentid = 1117; }
				case 29: { componentid = 1118; }
				case 30: { componentid = 1119; }
				case 31: { componentid = 1120; }
				case 32: { componentid = 1121; }
			}
		}
		case 536:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1103; }
				case 23: { componentid = 1104; }
				case 24: { componentid = 1105; }
				case 25: { componentid = 1107; }
				case 26: { componentid = 1108; }
				case 27: { componentid = 1128; }
				case 28: { componentid = 1181; }
				case 29: { componentid = 1182; }
				case 30: { componentid = 1183; }
				case 31: { componentid = 1184; }
			}
		}
		case 540:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1017; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 542:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1014; }
				case 5: { componentid = 1015; }
				case 6: { componentid = 1018; }
				case 7: { componentid = 1019; }
				case 8: { componentid = 1020; }
				case 9: { componentid = 1021; }
				case 10: { componentid = 1025; }
				case 11: { componentid = 1073; }
				case 12: { componentid = 1074; }
				case 13: { componentid = 1075; }
				case 14: { componentid = 1076; }
				case 15: { componentid = 1077; }
				case 16: { componentid = 1078; }
				case 17: { componentid = 1079; }
				case 18: { componentid = 1080; }
				case 19: { componentid = 1081; }
				case 20: { componentid = 1082; }
				case 21: { componentid = 1083; }
				case 22: { componentid = 1084; }
				case 23: { componentid = 1085; }
				case 24: { componentid = 1087; }
				case 25: { componentid = 1096; }
				case 26: { componentid = 1097; }
				case 27: { componentid = 1098; }
				case 28: { componentid = 1144; }
				case 29: { componentid = 1145; }
			}
		}
		case 546:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1002; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1024; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 547:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1008; }
				case 4: { componentid = 1009; }
				case 5: { componentid = 1010; }
				case 6: { componentid = 1016; }
				case 7: { componentid = 1018; }
				case 8: { componentid = 1019; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1021; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
				case 29: { componentid = 1142; }
				case 30: { componentid = 1143; }
			}
		}
		case 549:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1011; }
				case 8: { componentid = 1012; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 550:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1004; }
				case 4: { componentid = 1005; }
				case 5: { componentid = 1006; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1023; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 551:
		{
			switch(count)
			{
				case 1: { componentid = 1002; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1016; }
				case 9: { componentid = 1018; }
				case 10: { componentid = 1019; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1021; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
			}
		}
		case 558:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1088; }
				case 20: { componentid = 1089; }
				case 21: { componentid = 1090; }
				case 22: { componentid = 1091; }
				case 23: { componentid = 1092; }
				case 24: { componentid = 1093; }
				case 25: { componentid = 1094; }
				case 26: { componentid = 1095; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1163; }
				case 31: { componentid = 1164; }
				case 32: { componentid = 1165; }
				case 33: { componentid = 1166; }
				case 34: { componentid = 1167; }
				case 35: { componentid = 1168; }
			}
		}
		case 559:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1065; }
				case 6: { componentid = 1066; }
				case 7: { componentid = 1067; }
				case 8: { componentid = 1068; }
				case 9: { componentid = 1069; }
				case 10: { componentid = 1070; }
				case 11: { componentid = 1071; }
				case 12: { componentid = 1072; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1158; }
				case 31: { componentid = 1159; }
				case 32: { componentid = 1160; }
				case 33: { componentid = 1161; }
				case 34: { componentid = 1162; }
				case 35: { componentid = 1173; }
			}
		}
		case 560:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1026; }
				case 6: { componentid = 1027; }
				case 7: { componentid = 1028; }
				case 8: { componentid = 1029; }
				case 9: { componentid = 1030; }
				case 10: { componentid = 1031; }
				case 11: { componentid = 1032; }
				case 12: { componentid = 1033; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1138; }
				case 31: { componentid = 1139; }
				case 32: { componentid = 1140; }
				case 33: { componentid = 1141; }
				case 34: { componentid = 1169; }
				case 35: { componentid = 1170; }
			}
		}
		case 561:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1055; }
				case 6: { componentid = 1056; }
				case 7: { componentid = 1057; }
				case 8: { componentid = 1058; }
				case 9: { componentid = 1059; }
				case 10: { componentid = 1060; }
				case 11: { componentid = 1061; }
				case 12: { componentid = 1062; }
				case 13: { componentid = 1063; }
				case 14: { componentid = 1064; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1154; }
				case 33: { componentid = 1155; }
				case 34: { componentid = 1156; }
				case 35: { componentid = 1157; }
			}
		}
		case 562:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1034; }
				case 6: { componentid = 1035; }
				case 7: { componentid = 1036; }
				case 8: { componentid = 1037; }
				case 9: { componentid = 1038; }
				case 10: { componentid = 1039; }
				case 11: { componentid = 1040; }
				case 12: { componentid = 1041; }
				case 13: { componentid = 1073; }
				case 14: { componentid = 1074; }
				case 15: { componentid = 1075; }
				case 16: { componentid = 1076; }
				case 17: { componentid = 1077; }
				case 18: { componentid = 1078; }
				case 19: { componentid = 1079; }
				case 20: { componentid = 1080; }
				case 21: { componentid = 1081; }
				case 22: { componentid = 1082; }
				case 23: { componentid = 1083; }
				case 24: { componentid = 1084; }
				case 25: { componentid = 1085; }
				case 26: { componentid = 1087; }
				case 27: { componentid = 1096; }
				case 28: { componentid = 1097; }
				case 29: { componentid = 1098; }
				case 30: { componentid = 1146; }
				case 31: { componentid = 1147; }
				case 32: { componentid = 1148; }
				case 33: { componentid = 1149; }
				case 34: { componentid = 1171; }
				case 35: { componentid = 1172; }
			}
		}
		case 565:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1045; }
				case 6: { componentid = 1046; }
				case 7: { componentid = 1047; }
				case 8: { componentid = 1048; }
				case 9: { componentid = 1049; }
				case 10: { componentid = 1050; }
				case 11: { componentid = 1051; }
				case 12: { componentid = 1052; }
				case 13: { componentid = 1053; }
				case 14: { componentid = 1054; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1150; }
				case 33: { componentid = 1151; }
				case 34: { componentid = 1152; }
				case 35: { componentid = 1153; }
			}
		}
		case 567:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1102; }
				case 23: { componentid = 1129; }
				case 24: { componentid = 1130; }
				case 25: { componentid = 1131; }
				case 26: { componentid = 1132; }
				case 27: { componentid = 1133; }
				case 28: { componentid = 1186; }
				case 29: { componentid = 1187; }
				case 30: { componentid = 1188; }
				case 31: { componentid = 1189; }
			}
		}
		case 575:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1042; }
				case 6: { componentid = 1043; }
				case 7: { componentid = 1044; }
				case 8: { componentid = 1073; }
				case 9: { componentid = 1074; }
				case 10: { componentid = 1075; }
				case 11: { componentid = 1076; }
				case 12: { componentid = 1077; }
				case 13: { componentid = 1078; }
				case 14: { componentid = 1079; }
				case 15: { componentid = 1080; }
				case 16: { componentid = 1081; }
				case 17: { componentid = 1082; }
				case 18: { componentid = 1083; }
				case 19: { componentid = 1084; }
				case 20: { componentid = 1085; }
				case 21: { componentid = 1087; }
				case 22: { componentid = 1096; }
				case 23: { componentid = 1097; }
				case 24: { componentid = 1098; }
				case 25: { componentid = 1099; }
				case 26: { componentid = 1174; }
				case 27: { componentid = 1175; }
				case 28: { componentid = 1176; }
				case 29: { componentid = 1177; }
			}
		}
		case 576:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
				case 22: { componentid = 1134; }
				case 23: { componentid = 1135; }
				case 24: { componentid = 1136; }
				case 25: { componentid = 1137; }
				case 26: { componentid = 1190; }
				case 27: { componentid = 1191; }
				case 28: { componentid = 1192; }
				case 29: { componentid = 1193; }
			}
		}
		case 580:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1020; }
				case 10: { componentid = 1023; }
				case 11: { componentid = 1025; }
				case 12: { componentid = 1073; }
				case 13: { componentid = 1074; }
				case 14: { componentid = 1075; }
				case 15: { componentid = 1076; }
				case 16: { componentid = 1077; }
				case 17: { componentid = 1078; }
				case 18: { componentid = 1079; }
				case 19: { componentid = 1080; }
				case 20: { componentid = 1081; }
				case 21: { componentid = 1082; }
				case 22: { componentid = 1083; }
				case 23: { componentid = 1084; }
				case 24: { componentid = 1085; }
				case 25: { componentid = 1087; }
				case 26: { componentid = 1096; }
				case 27: { componentid = 1097; }
				case 28: { componentid = 1098; }
			}
		}
		case 585:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1003; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1019; }
				case 12: { componentid = 1020; }
				case 13: { componentid = 1023; }
				case 14: { componentid = 1025; }
				case 15: { componentid = 1073; }
				case 16: { componentid = 1074; }
				case 17: { componentid = 1075; }
				case 18: { componentid = 1076; }
				case 19: { componentid = 1077; }
				case 20: { componentid = 1078; }
				case 21: { componentid = 1079; }
				case 22: { componentid = 1080; }
				case 23: { componentid = 1081; }
				case 24: { componentid = 1082; }
				case 25: { componentid = 1083; }
				case 26: { componentid = 1084; }
				case 27: { componentid = 1085; }
				case 28: { componentid = 1087; }
				case 29: { componentid = 1096; }
				case 30: { componentid = 1097; }
				case 31: { componentid = 1098; }
				case 32: { componentid = 1142; }
				case 33: { componentid = 1143; }
				case 34: { componentid = 1144; }
				case 35: { componentid = 1145; }
			}
		}
		case 589:
		{
			switch(count)
			{
				case 1: { componentid = 1000; }
				case 2: { componentid = 1004; }
				case 3: { componentid = 1005; }
				case 4: { componentid = 1006; }
				case 5: { componentid = 1007; }
				case 6: { componentid = 1008; }
				case 7: { componentid = 1009; }
				case 8: { componentid = 1010; }
				case 9: { componentid = 1013; }
				case 10: { componentid = 1016; }
				case 11: { componentid = 1017; }
				case 12: { componentid = 1018; }
				case 13: { componentid = 1020; }
				case 14: { componentid = 1024; }
				case 15: { componentid = 1025; }
				case 16: { componentid = 1073; }
				case 17: { componentid = 1074; }
				case 18: { componentid = 1075; }
				case 19: { componentid = 1076; }
				case 20: { componentid = 1077; }
				case 21: { componentid = 1078; }
				case 22: { componentid = 1079; }
				case 23: { componentid = 1080; }
				case 24: { componentid = 1081; }
				case 25: { componentid = 1082; }
				case 26: { componentid = 1083; }
				case 27: { componentid = 1084; }
				case 28: { componentid = 1085; }
				case 29: { componentid = 1087; }
				case 30: { componentid = 1096; }
				case 31: { componentid = 1097; }
				case 32: { componentid = 1098; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 600:
		{
			switch(count)
			{
				case 1: { componentid = 1004; }
				case 2: { componentid = 1005; }
				case 3: { componentid = 1006; }
				case 4: { componentid = 1007; }
				case 5: { componentid = 1008; }
				case 6: { componentid = 1009; }
				case 7: { componentid = 1010; }
				case 8: { componentid = 1013; }
				case 9: { componentid = 1017; }
				case 10: { componentid = 1018; }
				case 11: { componentid = 1020; }
				case 12: { componentid = 1022; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
			}
		}
		case 603:
		{
			switch(count)
			{
				case 1: { componentid = 1001; }
				case 2: { componentid = 1006; }
				case 3: { componentid = 1007; }
				case 4: { componentid = 1008; }
				case 5: { componentid = 1009; }
				case 6: { componentid = 1010; }
				case 7: { componentid = 1017; }
				case 8: { componentid = 1018; }
				case 9: { componentid = 1019; }
				case 10: { componentid = 1020; }
				case 11: { componentid = 1023; }
				case 12: { componentid = 1024; }
				case 13: { componentid = 1025; }
				case 14: { componentid = 1073; }
				case 15: { componentid = 1074; }
				case 16: { componentid = 1075; }
				case 17: { componentid = 1076; }
				case 18: { componentid = 1077; }
				case 19: { componentid = 1078; }
				case 20: { componentid = 1079; }
				case 21: { componentid = 1080; }
				case 22: { componentid = 1081; }
				case 23: { componentid = 1082; }
				case 24: { componentid = 1083; }
				case 25: { componentid = 1084; }
				case 26: { componentid = 1085; }
				case 27: { componentid = 1087; }
				case 28: { componentid = 1096; }
				case 29: { componentid = 1097; }
				case 30: { componentid = 1098; }
				case 31: { componentid = 1142; }
				case 32: { componentid = 1143; }
				case 33: { componentid = 1144; }
				case 34: { componentid = 1145; }
			}
		}
		case 402,403,406..409,411..414,416,419,423,424,427..429,431..435,437,438,440..445,448,450,451,455..459,461..463,466..468,470,471,474,475,479..486,490,494,495,498,499,502..510,514,515,521..526,528,530..533,541,552,543..545,554..557,566,568,578,571..574,579,581..584,586..588,591,594,596..599,601,602,604..611:
		{
			switch(count)
			{
				case 1: { componentid = 1008; }
				case 2: { componentid = 1009; }
				case 3: { componentid = 1010; }
				case 4: { componentid = 1025; }
				case 5: { componentid = 1073; }
				case 6: { componentid = 1074; }
				case 7: { componentid = 1075; }
				case 8: { componentid = 1076; }
				case 9: { componentid = 1077; }
				case 10: { componentid = 1078; }
				case 11: { componentid = 1079; }
				case 12: { componentid = 1080; }
				case 13: { componentid = 1081; }
				case 14: { componentid = 1082; }
				case 15: { componentid = 1083; }
				case 16: { componentid = 1084; }
				case 17: { componentid = 1085; }
				case 18: { componentid = 1087; }
				case 19: { componentid = 1096; }
				case 20: { componentid = 1097; }
				case 21: { componentid = 1098; }
			}
		}
	}
	return componentid;
}
stock IsInvalidNosVehicle(vehicleid)
{
	#define MAX_INVALID_NOS_VEHICLES 52
 	new InvalidNosVehicles[MAX_INVALID_NOS_VEHICLES] =
	{
		581,523,462,521,463,522,461,448,468,586,417,425,469,487,512,520,563,593,
		509,481,510,472,473,493,520,595,484,430,453,432,476,497,513,533,577,
		452,446,447,454,590,569,537,538,570,449,519,460,488,511,519,548,592
	};
	for(new i = 0; i < MAX_INVALID_NOS_VEHICLES; i++)
	{
		if(GetVehicleModel(vehicleid) == InvalidNosVehicles[i]) return true;
	}
	return false;
}
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
		DivatInfo[index][playerid][dVan] = 1;
		DivatInfo[index][playerid][dPosX] = fOffsetX;
		DivatInfo[index][playerid][dPosY] = fOffsetY;
		DivatInfo[index][playerid][dPosZ] = fOffsetZ;
		DivatInfo[index][playerid][dRotX] = fRotX;
		DivatInfo[index][playerid][dRotY] = fRotY;
		DivatInfo[index][playerid][dRotZ] = fRotZ;
		DivatInfo[index][playerid][dScaleX] = fScaleX;
		DivatInfo[index][playerid][dScaleY] = fScaleY;
		DivatInfo[index][playerid][dScaleZ] = fScaleZ;
		DivatInfo[index][playerid][dmodelid] = modelid;
		SetPlayerAttachedObject(playerid, index, modelid, boneid, fOffsetX, fOffsetY, fOffsetZ, fRotX, fRotY, fRotZ, fScaleX, fScaleY, fScaleZ);
		if(index == SLOT_MASZK)
		{
			PlayerInfo[playerid][pMaszkVisel] = true;
			PlayerInfo[playerid][pMaszk] = modelid;
		}
	}
    else
    {
       if(DivatInfo[index][playerid][dVan] == 1)
	   {
			SetPlayerAttachedObject(playerid, index, DivatInfo[index][playerid][dmodelid], boneid, DivatInfo[index][playerid][dPosX], DivatInfo[index][playerid][dPosY], DivatInfo[index][playerid][dPosZ], DivatInfo[index][playerid][dRotX], DivatInfo[index][playerid][dRotY], DivatInfo[index][playerid][dRotZ], DivatInfo[index][playerid][dScaleX], DivatInfo[index][playerid][dScaleY], DivatInfo[index][playerid][dScaleZ]);
	   }
	   else
	   {
			RemovePlayerAttachedObject(playerid,index);
			DivatInfo[index][playerid][dPosX] = 0;
			DivatInfo[index][playerid][dPosY] = 0;
			DivatInfo[index][playerid][dPosZ] = 0;
			DivatInfo[index][playerid][dRotX] = 0;
			DivatInfo[index][playerid][dRotY] = 0;
			DivatInfo[index][playerid][dRotZ] = 0;
			DivatInfo[index][playerid][dScaleX] = 0;
			DivatInfo[index][playerid][dScaleY] = 0;
			DivatInfo[index][playerid][dScaleZ] = 0;
			DivatInfo[index][playerid][dmodelid] = 0;
	   }
    }
    return 1;
}
funkcio AdoResz(ki)
{
	//Null
	new mennyitkellfizetnie = 0;
	
	//Kocsi Rendszer Adózása!
	for(new idx=0;idx<MAX_HAZ_JARMU;idx++)
	{
		new id = PlayerInfo[ki][pJarmuKulcs][idx];
		if(id != NINCS && vInfo[id][vHasznalva])
		{
			switch(vInfo[id][vModel])
			{
				case 411:{mennyitkellfizetnie += 1000;}
				case 451:{mennyitkellfizetnie += 950;}
				case 541:{mennyitkellfizetnie += 950;}
				case 415:{mennyitkellfizetnie += 900;}
				case 522:{mennyitkellfizetnie += 500;}
				case 470:{mennyitkellfizetnie += 2000;}
				case 560:{mennyitkellfizetnie += 300;}
				case 481:{mennyitkellfizetnie += 0;}
				case 509:{mennyitkellfizetnie += 0;}
				case 510:{mennyitkellfizetnie += 0;}
				default: { mennyitkellfizetnie += 100;}
			}
		}
	}
	//Végeredménye!
	return mennyitkellfizetnie;
}

funkcio HazAdoResz(ki)
{
    //Null
    new hazado = 0;
    
    new id = PlayerInfo[ki][pHazKulcs][0];
    if(id != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 250;} // Lakás
            case 2:{hazado += 300;} // GN
            case 3:{hazado += 250;} // LS
            case 4:{hazado += 180;} // Gettó
            case 5:{hazado += 200;} // Falu
        }
    }
	new id2 = PlayerInfo[ki][pHazKulcs][1];
    if(id2 != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 250;} // Lakás
            case 2:{hazado += 300;} // GN
            case 3:{hazado += 250;} // LS
            case 4:{hazado += 180;} // Gettó
            case 5:{hazado += 200;} // Falu
        }
    }
	new id3 = PlayerInfo[ki][pHazKulcs][2];
    if(id3 != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 250;} // Lakás
            case 2:{hazado += 300;} // GN
            case 3:{hazado += 250;} // LS
            case 4:{hazado += 180;} // Gettó
            case 5:{hazado += 200;} // Falu
        }
    }
    //Végeredménye!
    return hazado;
}

funkcio Villanysz(ki)
{
    //Null
    new hazado = 0;
    
    new id = PlayerInfo[ki][pHazKulcs][0];
    if(id != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 80;} // Lakás
            case 2:{hazado += 100;} // GN
            case 3:{hazado += 80;} // LS
            case 4:{hazado += 40;} // Gettó
            case 5:{hazado += 50;} // Falu
        }
    }
	new id2 = PlayerInfo[ki][pHazKulcs][1];
    if(id2 != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 80;} // Lakás
            case 2:{hazado += 100;} // GN
            case 3:{hazado += 80;} // LS
            case 4:{hazado += 40;} // Gettó
            case 5:{hazado += 50;} // Falu
        }
    }
	new id3 = PlayerInfo[ki][pHazKulcs][2];
    if(id3 != NINCS)
    {
        switch(HazInfo[id][hTipus])
        {
			case 1:{hazado += 80;} // Lakás
            case 2:{hazado += 100;} // GN
            case 3:{hazado += 80;} // LS
            case 4:{hazado += 40;} // Gettó
            case 5:{hazado += 50;} // Falu
        }
    }
    //Végeredménye!
    return hazado;
}

funkcio SerialBanCheck(ki,playerid)
{
	new gpcid[200];
	gpci(ki,gpcid,sizeof(gpcid));
	new nums, fields;
	cache_get_data(nums, fields);
	
	if(nums)
	{
		SCM(ki,COL_LRED,"Te Kivagy Tiltva a Szerverrõl!");
		AdminUzenet(COLOR_LIGHTRED,1,"[AC]:%s megpróbált feljönni pedig kibasztam, Jim!",JatekosNev(playerid));
        Kick(ki);
	}
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(hittype == BULLET_HIT_TYPE_PLAYER && ((fX > 1.0 || fX < -1.0) || (fY > 1.0 || fY < -1.0) || (fZ > 1.0 || fZ < -1.0)))
	{
		AdminUzenet(COLOR_LIGHTRED,1,"[AC]: %s Crasheltetni akarta a szervert de kickeltem.",JatekosNev(playerid));
		Kick(playerid);
	}
	if( hittype == BULLET_HIT_TYPE_VEHICLE )
    {
        new model = GetVehicleModel(hitid);
        if( model == 427 || model == 428 || model == 528 ) return 0; // Ne engedjük a lövést securicarra, enforcerre, fbi truckra
        
        if( model > 595 && model < 600 )
        {
            if( weaponid < 24 ) return 0;
        }
	}
	if(hittype == BULLET_HIT_TYPE_PLAYER)
	{
		if(PlayerInfo[playerid][pUzemmod] == 1)
		{
			if(GetPlayerWeapon(playerid) == 24)
			{
				if( !PlayerToPlayer( hitid, playerid, 10.0 ) ) //csak adott körzetben menjen
					return false;
					
				TogglePlayerControllable(hitid, false);
				SetTimerEx("Sokk", 20000, 0, "d", hitid);
				LoopingAnim(hitid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
				SCM(hitid, COL_LRED, "Egy rendõr lesokkolt!");
				SCM(playerid, COL_LRED, "Lesokkoltad!");
				return false;
			}
		}
	}
	if(hittype == BULLET_HIT_TYPE_PLAYER && ((fX == 0.0 || fY == 0.0 || fZ == 0.0)))
	{
	AdminUzenet(COLOR_LIGHTRED,1,"[AC]Ez a balfasz %s bulletfloodolni akart de kirúgtam",JatekosNev(playerid));
	Kick(playerid);
	}
    return 1;
}
funkcio CCTVKeyTimer(playerid)
{
    new keys, updown, leftright;
    GetPlayerKeys(playerid, keys, updown, leftright);
	if(CurrentCCTV[playerid] > -1)
	{
	    if(leftright == KEY_RIGHT)
	  	{
	  	    if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] - 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] - 0.5);
			}
	  	    if(CCTVDegree[playerid] < 0)
	  	    {
	  	        CCTVDegree[playerid] = 359;
			}
	  	    MovePlayerCCTV(playerid);

		}
	    if(leftright == KEY_LEFT)
	    {
	        if(keys == KEY_SPRINT)
			{
	 	    	CCTVDegree[playerid] = (CCTVDegree[playerid] + 2.0);
			}
			else
			{
			    CCTVDegree[playerid] = (CCTVDegree[playerid] + 0.5);
			}
			if(CCTVDegree[playerid] >= 360)
	  	    {
	  	        CCTVDegree[playerid] = 0;
			}
	        MovePlayerCCTV(playerid);

	    }
	    if(updown == KEY_UP)
	    {
	        if(CCTVRadius[playerid] < 25)
	        {
		        if(keys == KEY_SPRINT)
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.5);
		        	MovePlayerCCTV(playerid);
				}
				else
				{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] + 0.1);
		        	MovePlayerCCTV(playerid);
				}
			}
		}
		if(updown == KEY_DOWN)
	    {
			if(keys == KEY_SPRINT)
			{
			    if(CCTVRadius[playerid] >= 0.6)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.5);
			       	MovePlayerCCTV(playerid);
				}
			}
			else
			{
			    if(CCTVRadius[playerid] >= 0.2)
	        	{
				    CCTVRadius[playerid] =  (CCTVRadius[playerid] - 0.1);
			       	MovePlayerCCTV(playerid);
				}
			}
		}
		if(keys == KEY_CROUCH)
		{
		    cmd_cctv(playerid,"ki");
		}
	}
	MovePlayerCCTV(playerid);
}

funkcio MovePlayerCCTV(playerid)
{
	CCTVLA[playerid][0] = CCTVLAO[CurrentCCTV[playerid]][0] + (floatmul(CCTVRadius[playerid], floatsin(-CCTVDegree[playerid], degrees)));
	CCTVLA[playerid][1] = CCTVLAO[CurrentCCTV[playerid]][1] + (floatmul(CCTVRadius[playerid], floatcos(-CCTVDegree[playerid], degrees)));
	SetPlayerCameraLookAt(playerid, CCTVLA[playerid][0], CCTVLA[playerid][1], CCTVLA[playerid][2]);
}

funkcio KameranalVan(playerid)
{
	new kamera = NINCS;
	for(new cctv=0; cctv < MAX_CCTVS; cctv++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 70,CCTVCP[cctv][0],CCTVCP[cctv][1],CCTVCP[cctv][2]))
		{
			kamera = cctv;
			break;
		}
	}
	return kamera;
}
stock AddCCTV(name[], Float:X, Float:Y, Float:Z, Float:Angle, int=0, vw=0)
{
	if(TotalCCTVS >= MAX_CCTVS) return 0;
	format(CameraName[TotalCCTVS], 32, "%s", name);
	CCTVCP[TotalCCTVS][0] = X;
	CCTVCP[TotalCCTVS][1] = Y;
	CCTVCP[TotalCCTVS][2] = Z;
	CCTVCP[TotalCCTVS][3] = Angle;
	CCTVLAO[TotalCCTVS][0] = X;
	CCTVLAO[TotalCCTVS][1] = Y;
	CCTVLAO[TotalCCTVS][2] = Z-10;
	CCTVEgyeb[TotalCCTVS][0] = int;
	CCTVEgyeb[TotalCCTVS][1] =  vw;
	TotalCCTVS++;
	return TotalCCTVS-1;
}

stock SetPlayerToCCTVCamera(playerid, CCTV)
{
	if(CCTV >= TotalCCTVS)
	{
	    SCM(playerid, COL_LRED,"Kamera Hiba!");
	    return 1;
	}
	if(CurrentCCTV[playerid] == -1)
    {
	    GetPlayerPos(playerid, LastPos[playerid][LX], LastPos[playerid][LY], LastPos[playerid][LZ]);
		GetPlayerFacingAngle(playerid, LastPos[playerid][LA]);
        LastPos[playerid][LInterior] = GetPlayerInterior(playerid);
	}
	else
	{
		KillTimer(KeyTimer[playerid]);
	}
	CurrentCCTV[playerid] = CCTV;
    TogglePlayerControllable(playerid, 0);
	//SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], (CCTVCP[CCTV][2]-50));
	SetPlayerPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], -40.0);
	SetPlayerCameraPos(playerid, CCTVCP[CCTV][0], CCTVCP[CCTV][1], CCTVCP[CCTV][2]);
	SetPlayerCameraLookAt(playerid, CCTVLAO[CCTV][0], (CCTVLAO[CCTV][1]+0.2), CCTVLAO[CCTV][2]);
	SetPlayerInterior(playerid,CCTVEgyeb[TotalCCTVS][0]);
	SetPlayerVirtualWorld(playerid,CCTVEgyeb[TotalCCTVS][1]);
	CCTVLA[playerid][0] = CCTVLAO[CCTV][0];
	CCTVLA[playerid][1] = CCTVLAO[CCTV][1]+0.2;
	CCTVLA[playerid][2] = CCTVLAO[CCTV][2];
	CCTVRadius[playerid] = 12.5;
	CCTVDegree[playerid] = CCTVCP[CCTV][3];
	MovePlayerCCTV(playerid);
    KeyTimer[playerid] = SetTimerEx("CCTVKeyTimer", 75, 1, "i", playerid);
	return 1;
}
public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}
funkcio HifiLoad()
{
	print("Szerver: Hifik betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i= -1,h;
		for(;++i < nums;)
	    {
			mysql_get_int(i, "ID", h);
			HifiInfo[h][hID] = h;
			HifiInfo[h][hVan] = 1;
			mysql_get_float(i, "X", HifiInfo[h][hX]);
			mysql_get_float(i, "Y", HifiInfo[h][hY]);
			mysql_get_float(i, "Z", HifiInfo[h][hZ]);
			mysql_get_float(i, "RX", HifiInfo[h][hRx]);
			mysql_get_float(i, "RY", HifiInfo[h][hRy]);
			mysql_get_float(i, "RZ", HifiInfo[h][hRz]);
			mysql_get_string(i, "Lerako", HifiInfo[h][hLerako]);
			HifiInfo[h][hObject] = CreateDynamicObject(2226,HifiInfo[h][hX],HifiInfo[h][hY],HifiInfo[h][hZ],HifiInfo[h][hRx],HifiInfo[h][hRy],HifiInfo[h][hRz]);
		}
	}
	printf("Szerver: %d Hifi betöltve!", nums);
	return true;	
}
//Trafipax public
forward LoadCam(cameraid,name[],value[]);
public LoadCam(cameraid,name[],value[])
{
	INI_Int("_id",SpeedCameras[cameraid][_id]);
	INI_Float("_x",SpeedCameras[cameraid][_x]);
	INI_Float("_y",SpeedCameras[cameraid][_y]);
	INI_Float("_z",SpeedCameras[cameraid][_z]);
	INI_Float("_rot",SpeedCameras[cameraid][_rot]);
	INI_Int("_range",SpeedCameras[cameraid][_range]);
	INI_Int("_limit",SpeedCameras[cameraid][_limit]);
	INI_Int("_fine",SpeedCameras[cameraid][_fine]);
	INI_Int("_usemph",SpeedCameras[cameraid][_usemph]);
	INI_Bool("_activelabel",SpeedCameras[cameraid][_activelabel]);
	INI_String("_labeltxt",SpeedCameras[cameraid][_labeltxt],128);
	INI_Int("_eddiggyujtott",SpeedCameras[cameraid][_eddiggyujtott]);
	INI_Int("_hovamenjen",SpeedCameras[cameraid][_hovamenjen]);
	return 1;
}
//Trafipax public vége

funkcio KameraLoad()
{
	print("Szerver: CCTV Kamerák betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1;
		new Nev[32],Float:X,Float:Y,Float:Z,Float:Angle,Interior,VW;
	    for(;++i < nums;)
	    {
			mysql_get_string(i, "Nev", Nev);
			mysql_get_float(i, "X", X);
			mysql_get_float(i, "Y", Y);
			mysql_get_float(i, "Z", Z);
			mysql_get_float(i, "A", Angle);
			mysql_get_int(i, "Interior", Interior);
			mysql_get_int(i, "VW", VW);
			AddCCTV(Nev, X, Y, Z, Angle, Interior, VW);
		}
	}
	printf("Szerver: %d CCTV Kamera Sikeresen betöltve!", nums);
	return true;	
}

funkcio DrinkLoad()
{
	print("Szerver: Drink pontok betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1,c;
	    for(;++i < nums;)
	    {
			mysql_get_int(i,"ID",c);
			DrinkInfo[c][dVan] = 1;
			DrinkInfo[c][dID] = c;
			mysql_get_float(i, "X", DrinkInfo[c][dX]);
			mysql_get_float(i, "Y", DrinkInfo[c][dY]);
			mysql_get_float(i, "Z", DrinkInfo[c][dZ]);
			DrinkInfo[c][dText] = CreateDynamic3DTextLabel("(( /drink ))", COLOR_MKEK, DrinkInfo[c][dX], DrinkInfo[c][dY], DrinkInfo[c][dZ], 20.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 0);
		}
	}
	printf("Szerver: %d Drink pontok betöltve!", nums);
	return true;	
}
funkcio GraffitiLoad()
{
	print("Szerver: Grafitik betöltése!");

	new nums, fields;
	cache_get_data(nums, fields);

	if(nums)
	{
	    new i = -1,idx = 0;
	    for(;++i < nums;)
	    {
	        mysql_get_int(i, "ID", idx);
	        TagInfo[idx][tID] = idx;
			mysql_get_float(i, "X", TagInfo[idx][tPoz][0]);
			mysql_get_float(i, "Y", TagInfo[idx][tPoz][1]);
			mysql_get_float(i, "Z", TagInfo[idx][tPoz][2]);
			mysql_get_float(i, "Rx", TagInfo[idx][tRot][0]);
			mysql_get_float(i, "Ry", TagInfo[idx][tRot][1]);
			mysql_get_float(i, "Rz", TagInfo[idx][tRot][2]);
			mysql_get_int(i, "Festve", TagInfo[idx][tFestveVan]);
			TagInfo[idx][tKesz] = TAG_FELFESTESIDO;
			mysql_get_int(i, "GraffitiObject", TagInfo[idx][tGraffitiObject]);
			mysql_get_int(i, "Tulaj", TagInfo[idx][tTulaj]);
			TagInfo[idx][tVan] = 1;
			TagInfo[idx][tText] = CreateDynamic3DTextLabel("- Graffiti hely -", 0xff0000AA, TagInfo[idx][tPoz][0], TagInfo[idx][tPoz][1], TagInfo[idx][tPoz][2], 20.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 0);
			if(TagInfo[idx][tGraffitiObject] != 0)
			{
				TagInfo[idx][tObject] = CreateDynamicObject(TagInfo[idx][tGraffitiObject],TagInfo[idx][tPoz][0],TagInfo[idx][tPoz][1],TagInfo[idx][tPoz][2],TagInfo[idx][tRot][0],TagInfo[idx][tRot][1],TagInfo[idx][tRot][2]);
			}
		}
	}
	printf("Szerver: %d Grafiti Sikeresen betöltve!", nums);
	return true;	
}
funkcio TorlesPlayerObject(playerid)
{
	SCM(playerid,COL_MKEK, "Felraktad a Kocsira");
	VasNala[playerid] = 0;
	VasPlayerID[playerid] = 0;
	TorlesPlayerObject2(playerid);
	return 1;
}
funkcio TorlesPlayerObject2(playerid)
{
	RemovePlayerAttachedObject(playerid, SLOT_SISAK);
	return 1;
}
funkcio LerakVas(playerid)
{
    if(VasNala[playerid] == 0) return 1;
   	new o = 0;
	for(new i = 0; i < MAX_VAS; i++)
	{
		if(Vas[i][vasVan] == 0)
		{
			o = i;
			break;
		}
	}
	Vas[o][vasVan] = 1;
	new Float:k[4];
	GetPlayerPos(playerid, k[0], k[1], k[2]);
	GetPlayerFacingAngle(playerid, k[3]);
	Vas[o][Vasx] = k[0];
	Vas[o][Vasy] = k[1];
	Vas[o][Vasz] = k[2];
	Vas[o][vasrz] = k[3];
	Vas[o][vasVasID] = o;
	new id = o;
	if(VasPlayerID[playerid] == 1791)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-1.0, 0.0, 0.0, k[3]);
	else if(VasPlayerID[playerid] == 1208)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-1.0, 0.0, 0.0, k[3]);
    else if(VasPlayerID[playerid] == 1738)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-0.85, 90.0, 0.0, k[3]);
    else if(VasPlayerID[playerid] == 2371)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-1.0, 0.0, 0.0, k[3]);
    else if(VasPlayerID[playerid] == 1790)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-0.95, 0.0, 0.0, k[3]);
    else if(VasPlayerID[playerid] == 2597)
		Vas[id][vasObject] = CreateDynamicObject(VasPlayerID[playerid], k[0], k[1], k[2]-0.15, 0.0, 0.0, k[3]);
	Vas[id][vasModelID] = VasPlayerID[playerid];
	VasPlayerID[playerid] = 0;
	VasNala[playerid] = 0;
	RemovePlayerAttachedObject(playerid, SLOT_SISAK);
	ClearAnimations(playerid, 1);
	SetPlayerPos(playerid, k[0], k[1]+0.5, k[2]);
	ClearAnimations(playerid, 1);
	ClearAnimations(playerid, 1);
	ClearAnimations(playerid, 1);
	return 1;
}
funkcio VasTorol(id)
{
	DestroyDynamicObject(Vas[id][vasObject]);
	Vas[id][vasVan] = 0;
	Vas[id][Vasx] = 0.0;
	Vas[id][Vasy] = 0.0;
	Vas[id][Vasz] = 0.0;
	Vas[id][vasrz] = 0.0;
	return 1;
}
funkcio UjVasObject(id, Float:vx, Float:vy, Float:vz, Float:vrz)
{
	switch(random(6))
	{
		case 0:
		{
			Vas[id][vasObject] = CreateDynamicObject(1791, vx, vy, vz-1.0, 0.0, 0.0, vrz);
			Vas[id][vasModelID] = 1791;
		}
		case 1:
		{
			Vas[id][vasObject] = CreateDynamicObject(1208, vx, vy, vz-1.0, 0.0, 0.0, vrz);//Mosógép
			Vas[id][vasModelID] = 1208;
		}
		case 2:
		{
			Vas[id][vasObject] = CreateDynamicObject(1738, vx, vy, vz-0.85, 90.0, 0.0, vrz);
			Vas[id][vasModelID] = 1738;
		}
		case 3:
		{
			Vas[id][vasObject] = CreateDynamicObject(1790, vx, vy, vz-0.95, 0.0, 0.0, vrz);
			Vas[id][vasModelID] = 1790;
		}
		case 4:
		{
			Vas[id][vasObject] = CreateDynamicObject(2597, vx, vy, vz-0.15, 0.0, 0.0, vrz);
			Vas[id][vasModelID] = 2597;
		}
		case 5:
		{
			Vas[id][vasObject] = CreateDynamicObject(2597, vx, vy, vz-0.15, 0.0, 0.0, vrz);
			Vas[id][vasModelID] = 2597;
		}
		default:
		{
			Vas[id][vasObject] = CreateDynamicObject(1790, vx, vy, vz-0.95, 0.0, 0.0, vrz);
			Vas[id][vasModelID] = 1790;
		}
	}
	return 1;
}
funkcio AlapVas()
{
	for(new a=0;a<MAX_VAS;a++)
	{
		Vas[a][Vasx] = 0.0;
		Vas[a][Vasy] = 0.0;
		Vas[a][Vasz] = 0.0;
		DestroyDynamicObject(Vas[a][vasObject]);
	}
	for(new i = 0;i < MAX_VAS; i++)
	{
		Vas[i][vasVan] = 1;
		Vas[i][Vasx] = vasak[i][xx];
		Vas[i][Vasy] = vasak[i][yy];
		Vas[i][Vasz] = vasak[i][zz];
		Vas[i][vasrz] = vasak[i][rzz];
		Vas[i][vasVasID] = i;
		UjVasObject(i, Vas[i][Vasx], Vas[i][Vasy], Vas[i][Vasz], Vas[i][vasrz]);
	}
}
funkcio LomisTorol(kocsid)
{
	for(new i=0;i<14;i++)
	{
		DestroyDynamicObject(KoicsraObject[i][kocsid]);
	}
	KocsinObject[kocsid] = 0;
	KocsinObject1[kocsid] = 0;
	KocsinObject2[kocsid] = 0;
	KocsinObject3[kocsid] = 0;
	KocsinObject4[kocsid] = 0;
	KocsinDarab[kocsid] = 0;
	Alvany[kocsid] = 0;
	Mosogep[kocsid] = 0;
	Tv[kocsid] = 0;
	Radiator[kocsid] = 0;
	Video[kocsid] = 0;
	return 1;
}
funkcio Firkalemos(playerid,firka)
{
	ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
	Tag_Lathato(firka,false);
	TagInfo[firka][tFestveVan] = 0;
	TagInfo[firka][tKesz] = TAG_FELFESTESIDO;
	TagInfo[firka][tTulaj] = 0;
	TagInfo[firka][tGraffitiObject] = 0;
	SCM(playerid,COL_LRED,"Lemostad a firkát!");
	Cselekves(playerid,"lemosta a falról a firkát",0);
	TagUpdateAll(firka);
	return 1;
}

funkcio KovetkezoTAGSlot()
{
	new tag = NINCS;
	for(new i=0; i < MAX_TAG; i++)
	{
	    if(TagInfo[i][tVan] == 0)
	    {
	        tag = i;
	        break;
	    }
	}
	return tag;
}
funkcio AddTag(Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ)
{
	new slot = KovetkezoTAGSlot();
	TagInfo[slot][tVan] = 1;
	TagInfo[slot][tFestveVan] = 0;

	TagInfo[slot][tPoz][0] = X;
	TagInfo[slot][tPoz][1] = Y;
	TagInfo[slot][tPoz][2] = Z;
	TagInfo[slot][tRot][0] = rX;
	TagInfo[slot][tRot][1] = rY;
	TagInfo[slot][tRot][2] = rZ;
	TagInfo[slot][tGraffitiObject] = 0;
	TagInfo[slot][tTulaj] = 0;
	TagInfo[slot][tID] = slot;
	TagInfo[slot][tKesz] = TAG_FELFESTESIDO;
	TagInfo[slot][tText] = CreateDynamic3DTextLabel("- Graffiti hely -", 0xff0000AA, X, Y, Z, 20.0, INVALID_VEHICLE_ID, INVALID_VEHICLE_ID, 0);
	
	doQuery("INSERT INTO `"#MYSQL_SPRAY_TABLA"`(ID,X, Y, Z, Rx, Ry, Rz, Festve, Tulaj) VALUES('%d','%f', '%f', '%f', '%f', '%f', '%f', '%d','%d')",slot,X,Y,Z,rX,rY,rZ,	TagInfo[slot][tFestveVan],	TagInfo[slot][tTulaj]);
	return 1;
}
stock Tag_Lathato(tagid,bool:lathato,banda=0)
{
	banda = TagInfo[tagid][tGraffitiObject];

	if(lathato && !IsValidDynamicObject(TagInfo[tagid][tObject]))
	{
		TagInfo[tagid][tObject] = CreateDynamicObject(banda,TagInfo[tagid][tPoz][0],TagInfo[tagid][tPoz][1],TagInfo[tagid][tPoz][2],TagInfo[tagid][tRot][0],TagInfo[tagid][tRot][1],TagInfo[tagid][tRot][2]);
	}
	else if(!lathato && IsValidDynamicObject(TagInfo[tagid][tObject]))
	    DestroyDynamicObject(TagInfo[tagid][tObject]);

	foreach(Player,i)
	{
		if(GetDistanceToTAG(i,tagid) < 30)
		{
			Streamer_UpdateEx(i,TagInfo[tagid][tPoz][0],TagInfo[tagid][tPoz][1],TagInfo[tagid][tPoz][2]);
		}
	}
    return 1;
}
funkcio Float:GetDistanceToTAG(playerid,tag)
{
	if (IsPlayerConnected(playerid) && TagInfo[tag][tVan] == 1)
	{
		return GetDistanceToPointEx(playerid,TagInfo[tag][tPoz][0],TagInfo[tag][tPoz][1],TagInfo[tag][tPoz][2]);
	}
	return INF_FLOAT;
}

stock GetFrakcioByTag(tag)
{
	#define GSF 0
	#define BALLAS 1
	#define VAGOS 2
	#define AZTEC 3
	#define NEGYEDIK 4
	if(tag == GSF) return 4;
	else if(tag == BALLAS) return 7;
	else if(tag == VAGOS) return 8;
	else if(tag == AZTEC) return 11;
	else if(tag == NEGYEDIK) return 19;

	return NINCS;
}
stock LegtobbTag(mikell)
{
	#define GSF 0
	#define BALLAS 1
	#define VAGOS 2
	#define AZTEC 3
	#define negyedik 4

	new Frakcio[5], Hely[2];
	for(new i = 0; i < 5; i++)
		Frakcio[i] = 0;

	for(new i = 0; i < MAX_TAG; i++)
	{
		if(TagInfo[i][tTulaj] == 4)
			Frakcio[GSF] ++;
		else if(TagInfo[i][tTulaj] == 7)
			Frakcio[BALLAS] ++;
		else if(TagInfo[i][tTulaj] == 8)
			Frakcio[VAGOS] ++;
		else if(TagInfo[i][tTulaj] == 11)
			Frakcio[AZTEC] ++;
		else if(TagInfo[i][tTulaj] == 19)
			Frakcio[negyedik] ++;
	}
	if(Frakcio[GSF] == 0 && Frakcio[BALLAS] == 0 && Frakcio[VAGOS] == 0 && Frakcio[AZTEC] == 0 && Frakcio[negyedik] == 0)
		return NINCS;

	Hely[0] = Legnagyobb2(Frakcio);
	Hely[1] = Legnagyobb(Frakcio[0],Frakcio[1],Frakcio[2],Frakcio[3]);
	if(mikell == 0)
	{
		return Hely[0];
	}
	else if(mikell == 1)
		return Hely[1];

	return NINCS;
}
stock Legnagyobb(...)
{
    new
        i = numargs(),
        //h,
        s = cellmin;
    while (i--)
    {
        if (getarg(i) > s)
        {
            //h = i;
            s = getarg(i);
        }
    }
	return s;
	//return h;
}

stock Legnagyobb2(arr[], size = sizeof (arr))
{
	new
        h,
        s = cellmin;

    while (size--)
    {
        if (arr[size] > s)
        {
            h = size;
            s = arr[size];
        }
    }
//  return s;
	return h;
}
funkcio Firka_OnPlayerUpdate(playerid)
{
	#define HOLDING(%0) ((newkeys & (%0)) == (%0))
	new newkeys,l,u;
	GetPlayerKeys(playerid, newkeys, l, u);
	if(HOLDING(KEY_FIRE))
	{
		new tag, Float:tavolsag;
		tag = GetClosestTAG(playerid);
		if(tag != -1)
		{
			tavolsag = GetDistanceToTAG(playerid,tag);
			new ellenseg;
			foreach(Player, x)
			{
				if(PlayerInfo[x][pFrakcio] == TagInfo[tag][tTulaj])
					ellenseg++;
			}
			new fk = PlayerInfo[playerid][pFrakcio];
			if(fk == 0 && TagInfo[tag][tTulaj] == 0)
			{
			    fk = 4;
			}
			if(GetPlayerWeapon(playerid) == 41 && tavolsag < 5.0 && TagInfo[tag][tKesz] > 0 && (FInfo[ PlayerInfo[playerid][pFrakcio] ][fLegalis] == FK_BANDA || PlayerInfo[playerid][pFrakcio] == 0) && TagInfo[tag][tTulaj] != fk)
			{
				TagInfo[tag][tKesz] --;
				if(TagInfo[tag][tKesz] == 1)
				{
					TagInfo[tag][tKesz] = 0;
					if(TagInfo[tag][tTulaj] != 0 && ellenseg >= 2)
					{
						Cselekves(playerid,"átcrossolt egy falfirkát",1);
						SCM(playerid,COL_LRED,"Átcrossoltál egy firkát");
					}
					else if(TagInfo[tag][tTulaj] == 0)
					{
						Cselekves(playerid,"felfestett a falra egy falfirkát",1);
						SCM(playerid,COL_LRED,"Felfestettél egy firkát");
					}
					if(PlayerInfo[playerid][pFrakcio] == 0)
					{
						new object = Rand(1,9);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18659;TagInfo[tag][tTulaj] = 4;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18660;TagInfo[tag][tTulaj] = 4;}
							case 3: {TagInfo[tag][tGraffitiObject] = 18661;TagInfo[tag][tTulaj] = 11;}
							case 4:
							{
								TagInfo[tag][tGraffitiObject] = 18662;
								new lehetseges = Rand(1,3);
								switch(lehetseges)
								{
									case 1:
									{
										TagInfo[tag][tTulaj] = 7;
									}
									case 2:
									{
										TagInfo[tag][tTulaj] = 8;
									}
									case 3:
									{
										TagInfo[tag][tTulaj] = 19;
									}
								}
							}
							case 5: {TagInfo[tag][tGraffitiObject] = 18663;TagInfo[tag][tTulaj] = 11;}
							case 6:
							{
								TagInfo[tag][tGraffitiObject] = 18664;
								new lehetseges = Rand(1,3);
								switch(lehetseges)
								{
									case 1:
									{
										TagInfo[tag][tTulaj] = 7;
									}
									case 2:
									{
										TagInfo[tag][tTulaj] = 8;
									}
									case 3:
									{
										TagInfo[tag][tTulaj] = 19;
									}
								}
							}
							case 7: {TagInfo[tag][tGraffitiObject] = 18665;TagInfo[tag][tTulaj] = 11;}
							case 8: 
							{
								TagInfo[tag][tGraffitiObject] = 18666;
								new lehetseges = Rand(1,3);
								switch(lehetseges)
								{
									case 1:
									{
										TagInfo[tag][tTulaj] = 7;
									}
									case 2:
									{
										TagInfo[tag][tTulaj] = 8;
									}
									case 3:
									{
										TagInfo[tag][tTulaj] = 19;
									}
								}
							}
							case 9: 
							{
								TagInfo[tag][tGraffitiObject] = 18667;
								new lehetseges = Rand(1,3);
								switch(lehetseges)
								{
									case 1:
									{
										TagInfo[tag][tTulaj] = 7;
									}
									case 2:
									{
										TagInfo[tag][tTulaj] = 8;
									}
									case 3:
									{
										TagInfo[tag][tTulaj] = 19;
									}
								}
							}
						}
					}
					if(PlayerInfo[playerid][pFrakcio] == 4)
					{
						new object = Rand(1,2);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18659;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18660;}
						}
						TagInfo[tag][tTulaj] = PlayerInfo[playerid][pFrakcio];
					}
					if(PlayerInfo[playerid][pFrakcio] == 7)
					{
						new object = Rand(1,4);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18660;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18664;}
							case 3: {TagInfo[tag][tGraffitiObject] = 18666;}
							case 4: {TagInfo[tag][tGraffitiObject] = 18667;}
						}
						TagInfo[tag][tTulaj] = PlayerInfo[playerid][pFrakcio];
					}
					if(PlayerInfo[playerid][pFrakcio] == 8)
					{
						new object = Rand(1,5);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18660;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18664;}
							case 3: {TagInfo[tag][tGraffitiObject] = 18666;}
							case 4: {TagInfo[tag][tGraffitiObject] = 18667;}
							case 5: {TagInfo[tag][tGraffitiObject] = 18662;}
						}
						TagInfo[tag][tTulaj] = PlayerInfo[playerid][pFrakcio];
					}
					if(PlayerInfo[playerid][pFrakcio] == 19)
					{
						new object = Rand(1,5);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18660;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18664;}
							case 3: {TagInfo[tag][tGraffitiObject] = 18666;}
							case 4: {TagInfo[tag][tGraffitiObject] = 18667;}
							case 5: {TagInfo[tag][tGraffitiObject] = 18662;}
						}
						TagInfo[tag][tTulaj] = PlayerInfo[playerid][pFrakcio];
					}
					if(PlayerInfo[playerid][pFrakcio] == 11)
					{
						new object = Rand(1,3);
						switch(object)
						{
							case 1: {TagInfo[tag][tGraffitiObject] = 18661;}
							case 2: {TagInfo[tag][tGraffitiObject] = 18663;}
							case 3: {TagInfo[tag][tGraffitiObject] = 18665;}
						}
						TagInfo[tag][tTulaj] = PlayerInfo[playerid][pFrakcio];
					}
					Tag_Lathato(tag,false);
					Tag_Lathato(tag,true,PlayerInfo[playerid][pFrakcio]);
					TagInfo[tag][tFestveVan] = 1;
					TagInfo[tag][tKesz] = TAG_FELFESTESIDO;

					TagUpdateAll(tag);
				}
			}
		}
	}
}
funkcio TagUpdateAll(tagid)
{
	new tquery[1024];
	format(tquery, sizeof(tquery), "UPDATE `"#MYSQL_SPRAY_TABLA"` SET ");
	MySQLUpdateFLOAT(tquery, "X", TagInfo[tagid][tPoz][0]);
	MySQLUpdateFLOAT(tquery, "Y", TagInfo[tagid][tPoz][1]);
	MySQLUpdateFLOAT(tquery, "Z", TagInfo[tagid][tPoz][2]);
	MySQLUpdateFLOAT(tquery, "Rx", TagInfo[tagid][tRot][2]);
	MySQLUpdateFLOAT(tquery, "Ry", TagInfo[tagid][tRot][2]);
	MySQLUpdateFLOAT(tquery, "Rz", TagInfo[tagid][tRot][2]);
	MySQLUpdateINT(tquery, "Festve", TagInfo[tagid][tFestveVan]);
	MySQLUpdateINT(tquery, "Kesz", TagInfo[tagid][tKesz]);
	MySQLUpdateINT(tquery, "Tulaj", TagInfo[tagid][tTulaj]);
	MySQLUpdateINT(tquery, "GraffitiObject", TagInfo[tagid][tGraffitiObject]);
	MySQLFinalUpdate(tquery, "ID", tagid);
	return 1;
}
funkcio Check(playerid)
{
	if(LeCheckolva[playerid] == 1) return 1;
	LeCheckolva[playerid] = 1;
	Warning[playerid] = 0;
	Lefagyasztva[playerid] = 0;
	AlapVWje[playerid] = 0;
	SetCameraBehindPlayer(playerid);
	Lefagyasztva[playerid] = 1;
	AlapVWje[playerid] = GetPlayerVirtualWorld(playerid);
	SetPlayerVirtualWorld(playerid,AlapVWje[playerid]+1);
	TogglePlayerControllable(playerid, false);
	SetTimerEx("Vege",4000,false,"d",playerid);
	return 1;
}
funkcio Vege(playerid)
{
	SetPlayerVirtualWorld(playerid,AlapVWje[playerid]);
	Warning[playerid] = 0;
	AlapVWje[playerid] = 0;
	Lefagyasztva[playerid] = 0;
	TogglePlayerControllable(playerid, true);
	return 1;
}
funkcio HifiLerak(playerid,Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz)
{
	new h = -1;
	for(new i=1;i<MAXHIFI;i++)
	{
		if(HifiInfo[i][hVan] == 0)
		{
			h = i;
			break;
		}
	}
	if(h == -1)
	{
		SCM(playerid,COL_LRED,"Hiba kód: 0001");
		return 1;
	}
	HifiInfo[h][hID] = h;
	HifiInfo[h][hVan] = 1;
	HifiInfo[h][hX] = x;
	HifiInfo[h][hY] = y;
	HifiInfo[h][hZ] = z;
	HifiInfo[h][hRx] = rx;
	HifiInfo[h][hRy] = ry;
	HifiInfo[h][hRz] = rz;
	HifiInfo[h][hLerako] = JatekosNev(playerid);
	HifiInfo[h][hObject] = CreateDynamicObject(2226,x,y,z,rx,ry,rz);
	strmid(HifiInfo[h][hURL],"-",0,strlen("-"),32);
	doQuery("INSERT INTO `"#MYSQL_HIFI_TABLE"`(ID, X, Y, Z, Rx, Ry, Rz, Lerako) VALUES('%d', '%f','%f','%f','%f','%f','%f','%s')", h,x,y,z,rx,ry,rz,JatekosNev(playerid));
	SCM(playerid,COL_LRED,"Leraktad a Hifit!");
	return 1;
}

stock StatMentes(playerid, elso = 0, bool: preQuery = true, fazis = 0 )
{
	if(!Belepve(playerid) || SQLID(playerid) == NINCS || !strlen(JelenlegiDatum)) return 1;
	
	if(elso)
	{
		strmid(StatInfo[playerid][pDatum], JelenlegiDatum, 0, strlen(JelenlegiDatum));
		
		if( preQuery )
		{
			nformat(query, 128, "SELECT ID FROM %s WHERE Datum='%s' AND UID='%d' AND IDJE='%s%d%d'", MYSQL_ACTIVITY_TABLE, JelenlegiDatum, SQLID(playerid),JelenlegiDatum,SQLID(playerid),Hatarozas[playerid]);
			mysql_tquery(sql_ID, query, "", "");
			StatMentes(playerid,elso,false,0);
			return 1;
		}
		
		if( !fazis )
		{
			if(!mysql_num_rows())
			{
				if(Insertalta[playerid] == 0)
				{
					nformat( query, 128, "INSERT INTO %s(UID, Datum,IDJE) VALUES('%d', '%s','%s%d%d')", MYSQL_ACTIVITY_TABLE, SQLID(playerid), JelenlegiDatum,JelenlegiDatum,SQLID(playerid),Hatarozas[playerid]);
					mysql_tquery(sql_ID, query, "", "");
					StatMentes(playerid,elso,false,1);
					Insertalta[playerid] = 1;
				}
			}
			else
			{
				new teszt[64];
				format(teszt,64,"%s%d%d",JelenlegiDatum,SQLID(playerid),Hatarozas[playerid]);
//				StatInfo[playerid][pID] = teszt;
				strmid(StatInfo[playerid][pID],teszt,0,strlen(teszt),64);
			}
		}
		else if( fazis == 1 )
		{
			nformat(query, 128, "SELECT ID FROM %s WHERE Datum='%s' AND UID='%d' AND IDJE='%s%d%d'", MYSQL_ACTIVITY_TABLE, JelenlegiDatum, SQLID(playerid),JelenlegiDatum,SQLID(playerid),Hatarozas[playerid]);
			mysql_tquery(sql_ID, query, "", "");
			StatMentes(playerid,elso,false,2);

		}
		else if( fazis == 2 )
		{
			new teszt[64];
			format(teszt,64,"%s%d%d",JelenlegiDatum,SQLID(playerid),Hatarozas[playerid]);
		//	StatInfo[playerid][pID] = teszt;
		   	strmid(StatInfo[playerid][pID],teszt,0,strlen(teszt),64);
			StatMentes( playerid, 0 );
		}
	}
	else
	{
		if(!egyezik(JelenlegiDatum, StatInfo[playerid][pDatum]))
			return StatMentes(playerid, true);
			
		new query[256];
		format(query, 256, "UPDATE %s SET Ido=Ido+%d", MYSQL_ACTIVITY_TABLE, StatInfo[playerid][pIdo]), StatInfo[playerid][pIdo] = 0;
		
		if(StatInfo[playerid][pOnduty])
			format(query, 256, "%s, Onduty=Onduty+%d", query, StatInfo[playerid][pOnduty]), StatInfo[playerid][pOnduty] = 0;
		
		if(StatInfo[playerid][pVA])
			format(query, 256, "%s, VA=VA+%d", query, StatInfo[playerid][pVA]), StatInfo[playerid][pVA] = 0;
			
		if(StatInfo[playerid][pPM])
			format(query, 256, "%s, PM=PM+%d", query, StatInfo[playerid][pPM]), StatInfo[playerid][pPM] = 0;
		
		format(query, 256, "%s WHERE IDJE='%s'", query, StatInfo[playerid][pID]);
		mysql_tquery(sql_ID, query, "", "");

	}
	return 1;
}
funkcio MOST(playerid)
{
	HuzzadVaze[playerid] = 1;
	new ido  = Rand(5000,7000);
	SetTimerEx("MOSTVege",ido,0,"d",playerid);
	GameTextForPlayer(playerid,"~g~KAPAS VAN!!~n~~r~MOST, HUZD!!!!~n~n~SPACE",ido,5);
	return 1;
}
funkcio MOSTVege(playerid)
{
	if(HuzzadVaze[playerid] != 0 && Fishing[playerid] != 0)
	{
	    Vegec(playerid);
	    SendClientMessage(playerid,COLOR_LIGHTRED,"Ezt lekested, sajnos! A hal elúszott");
	    Fishing[playerid] = 0;
    	HuzzadVaze[playerid] = 0;
	}
	else
	{
	    Vegec(playerid);
	    HuzzadVaze[playerid] = 0;
	}
    return 1;
}
funkcio HorgaszasAnim(playerid)
{
	if(Fishing[playerid] == 1)
	{
		SetCameraBehindPlayer(playerid);
		ApplyAnimation(playerid,"SWORD","sword_block",50.0,0,1,0,1,1);
	}
}
funkcio Vegec(playerid)
{
	if(Fishing[playerid] == 1)
	{
		TogglePlayerControllable(playerid,1);
		Fishing[playerid] = 0;
		SetCameraBehindPlayer(playerid);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	}
	return 1;
}
funkcio Huzza(playerid)
{
	if(Fishing[playerid] == 1)
	{
		new hal = Rand(0,10);
		new kg = Rand(5,50);
		switch(hal)
		{
			case 0:
			{
				SCM(playerid,COL_LRED,"A damil elszakadt!");
				Cselekves(playerid,"beszakította a damilt",0);
			}
			case 1,3:
			{
				SFM(playerid,COL_LRED,"Fogtál egy %d KG-os Csukát!",kg);
				PlayerInfo[playerid][pHal] += kg;
				Cselekves(playerid,"fogott egy halat",0);
			}
			case 2:
			{
				SFM(playerid,COL_LRED,"Fogtál egy %d KG-os Keszeget!",kg);
				PlayerInfo[playerid][pHal] += kg;
				Cselekves(playerid,"fogott egy halat",0);
			}
			case 4,9:
			{
				SCM(playerid,COL_LRED,"A hal elúszott...");
			}
			case 5:
			{
				SFM(playerid,COL_LRED,"Fogtál egy %d KG-os Pontyot!",kg);
				PlayerInfo[playerid][pHal] += kg;
				Cselekves(playerid,"fogott egy halat",0);
			}
			case 6:
			{
				SFM(playerid,COL_LRED,"Fogtál egy %d KG-os Kardhalat!",kg);
				PlayerInfo[playerid][pHal] += kg;
				Cselekves(playerid,"fogott egy halat",0);
			}
			case 7:
			{
				SCM(playerid,COL_LRED,"A damil elszakadt!");
				Cselekves(playerid,"beszakította a damilt",0);
			}
			case 8:
			{
				//:3
				new esely = Rand(1,50);
				switch(esely)
				{
					case 1 .. 49:
					{
						SCM(playerid,COL_LRED,"A damil elszakadt ez valami nagy hal lehetett!");
						Cselekves(playerid,"beszakította a damilt");
					}
					case 50 .. 100:
					{
						kg = kg+10;
						SFM(playerid,COL_LRED,"Fogtál egy %d kg os Harcsát!",kg);
						PlayerInfo[playerid][pHal] += kg;
						Cselekves(playerid,"fogott egy halat",0);
					}
				}
			}
			case 10:
			{
				SCM(playerid,COL_LRED,"Majdnem kifogtad, de visszaesett a vízbe!");
				Cselekves(playerid,"visszaejtette a halat",0);
			}
		}
		Fishing[playerid] = 0;
		TogglePlayerControllable(playerid, 1);
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0);
	}
}
funkcio GetXYBehindVehicle(jarmu,&Float:x,&Float:y,Float:dis)
{
	new Float:a, Float:z;
	GetVehiclePos(jarmu, x, y, z);
	GetVehicleZAngle(jarmu, a);
	GetXYBehindPoint(x, y, a,dis);
}

funkcio GetXYBehindPoint(&Float:x, &Float:y, Float:angle, Float:distance) {
	x -= (distance * floatsin(-angle, degrees));
	y -= (distance * floatcos(-angle, degrees));
}
funkcio AFKKick(playerid)
{
	HideDialog(playerid);
	SeeKick(playerid, "AFK");
	return 1;
}
stock SeeKick(playerid, miert[], kivolt = NINCS)
{
	if(IsPlayerNPC(playerid) || IsScripter(playerid)) return 1;
	new ki[MAX_PLAYER_NAME];

	if(kivolt == NINCS || !IsPlayerConnected(kivolt) || IsPlayerNPC(kivolt))
	{
		strmid(ki,"Rendszer",0,strlen("Rendszer"),32);
	}
	else
	{
		strmid(ki,JatekosNev(kivolt),0,strlen(JatekosNev(kivolt)),32);
	}
	if(egyezik(miert,"AFK"))
	{
		SendFormatMessageToAll(COLOR_LIGHTRED, ""#PREFIX": %s ki lett rúgva a szerverrõl a Rendszer által | Oka: %s",JatekosNev(playerid),miert);
	}
	else
	{
		SendFormatMessageToAll(COLOR_LIGHTRED, ""#PREFIX": %s ki lett rúgva a szerverrõl %s által | Oka: %s",JatekosNev(playerid),ki,miert);
	}
	Kick(playerid);
	return 1;
}
funkcio GetClosestTAG(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new kozelitag=NINCS;
		new Float:closestdist = 9999.0, Float:dist;
		for(new tag=0; tag<sizeof(TagInfo); tag++)
		{
			dist = GetDistanceToTAG(playerid,tag);
			if(dist < closestdist)
			{
				closestdist = dist;
				kozelitag = tag;
			}
		}
		return kozelitag;
	}
	return NINCS;
}
stock GiveMoney(k,mennyit)
{
	PlayerInfo[k][ppenz] += mennyit;
	PenzFrissites(k);
	return 1;
}
stock SetMoney(k,mennyit)
{
	PlayerInfo[k][ppenz] = mennyit;
	PenzFrissites(k);
	return 1;
}
stock PenzFrissites(playerid)
{
/*	new TD_tmp[1024+1];
	format(TD_tmp, sizeof(TD_tmp), "%08d_$", PenzEgyenleg(playerid));
	PlayerTextDrawSetString(playerid, Penz[playerid], TD_tmp);*/
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, PlayerInfo[playerid][ppenz]);
	return 1;
}
stock AddSPU(spuid, Float:x, Float:y, Float:z, Float:rotation, color1, color2, lightonoroff)
{
	if(lightonoroff == 1)
	{
		for(new i=0; i<sizeof(Offsets); i++)
 	    {
			if(Offsets[i][SPU] == spuid)
			{
                new vehicleid = CreateVehicle(Offsets[i][VehicleID], x, y, z, rotation, color1, color2, -1);
                Lamp[vehicleid] = 1;
                IsSpu[vehicleid] = spuid;
		    	Villog[vehicleid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
		    	AttachObjectToVehicle(Villog[vehicleid], vehicleid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
		    	printf("AddSPU(%d), succesfully created.", spuid);
		    	return 1;
			}
		}
	}
	if(lightonoroff == 0)
	{
	    for(new i=0; i<sizeof(Offsets); i++)
 	    {
			if(Offsets[i][SPU] == spuid)
			{
                new vehicleid = CreateVehicle(Offsets[i][VehicleID], x, y, z, rotation, color1, color2, -1);
                Lamp[vehicleid] = 0;
                IsSpu[vehicleid] = spuid;
                printf("AddSPU(%d), succesfully created.", spuid);
                return 1;
			}
		}
	}
	return 1;
}

stock VehicleLightSwitch(playerid)
{
		new vid = GetPlayerVehicleID(playerid);
		if(vid == INVALID_VEHICLE_ID) return 1;
		if(IsSpu[vid] != 0)
		{
 			if(Lamp[vid] == 1)
 			{
				 DestroyObject(villog[vid]);
				 Lamp[vid] = 0;
				 return 1;
			}
			if(Lamp[vid] == 0)
 			{
 				 for(new i=0; i<sizeof(Offsets); i++)
               	 {
					 if(Offsets[i][SPU] == IsSpu[vid])
					 {
						 villog[vid] = CreateObject(18646,Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 96.0);
						 AttachObjectToVehicle(villog[vid], vid, Offsets[i][villogoX], Offsets[i][villogoY], Offsets[i][villogoZ], 0.0, 0.0, 0.0);
						 Lamp[vid] = 1;
					 }
				 }
				 return 1;
			}
	    }
	    return 1;
}
stock CreateRoadblock(Object,Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
	{
		if(Roadblocks[i][sCreated] == 0)
		{
			Roadblocks[i][sCreated] = 1;
			Roadblocks[i][sX] = x;
			Roadblocks[i][sY] = y;
			Roadblocks[i][sZ] = z-0.7;
			Roadblocks[i][sObject] = CreateDynamicObject(Object, x, y, z-0.9, 0, 0, Angle);
			return 1;
		}
	}
	return 0;
}
 
stock DeleteAllRoadblocks(playerid)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 100, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
			{
				if(Roadblocks[i][sCreated] == 1)
				{
					Roadblocks[i][sCreated] = 0;
                    Roadblocks[i][sX] = 0.0;
                    Roadblocks[i][sY] = 0.0;
                    Roadblocks[i][sZ] = 0.0;
                    DestroyDynamicObject(Roadblocks[i][sObject]);
				}
            }
        }
    return 0;
}
 
stock DeleteClosestRoadblock(playerid)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 5.0, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
			{
                if(Roadblocks[i][sCreated] == 1)
				{
					Roadblocks[i][sCreated] = 0;
					Roadblocks[i][sX] = 0.0;
					Roadblocks[i][sY] = 0.0;
					Roadblocks[i][sZ] = 0.0;
					DestroyDynamicObject(Roadblocks[i][sObject]);
					return 1;
                }
            }
        }
    return 0;
}
stock UjLabelID()
{
	new ret = -1;
	for(new i = 0; i < MAX_LABEL; i++)
	{
	    if(LabelInfo[i][lVan] == 0)
	    {
			ret = i;
			break;
	    }
	}
	return ret;
}
stock LegkozelebbiLabel(playerid)
{
	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid,x,y,z);
	//new labell = -1;
	new ret = -1;
	for(new labell = 0; labell < MAX_LABEL; labell++)
	{
	    /*
		new Float:tavint = GetDistanceBetweenPoints(x,y,z,LabelInfo[labell][lx],LabelInfo[labell][ly],LabelInfo[labell][lz]);
		if(tavint < 5.0) return labell;
		*/
		if(IsPlayerInRangeOfPoint(playerid,5.00,LabelInfo[labell][lx],LabelInfo[labell][ly],LabelInfo[labell][lz]) && LabelInfo[labell][lVan] == 1)
		{
		    ret = labell;
		  //  SFM(playerid,COL_MKEK,"Label: %d",labell);
		    break;
		}
	}
	return ret;
}
funkcio LabelBetoltes()
{
	print("Szerver: 3DTextLabelek betöltése!");

	new nums, fields, id = 0;
	cache_get_data(nums,fields);

	if(nums)
	{
	    new color;
	    new i = -1;
	    for(;++i < nums;)
	    {
			mysql_get_int(i, "ID", id);
			mysql_get_string(i, "Text", LabelInfo[id][lText]);
			mysql_get_float(i, "X", LabelInfo[id][lx]);
			mysql_get_float(i, "Y", LabelInfo[id][ly]);
			mysql_get_float(i, "Z", LabelInfo[id][lz]);
			mysql_get_int(i, "szin", LabelInfo[id][lszin]);
			switch(LabelInfo[id][lszin])
			{
			    case 0: color = COLOR_GREEN;
			    case 1: color = COLOR_YELLOW;
				case 2: color = COLOR_RED;
			}
			dynlabels[id] = CreateDynamic3DTextLabel(LabelInfo[id][lText],color,LabelInfo[id][lx],LabelInfo[id][ly],LabelInfo[id][lz],DEFAULT_LABEL_DISTANCE);
			LabelInfo[id][lVan] = 1;
			id++;
	    }
	}
	if(id) printf("Szerver: %d 3DTextLabel betöltve!",id);
	else printf("Szerver: Nem lett betöltve 3DTextLabel!");
	return 1;
}

funkcio RemoveFlash(playerid)
{
	TextDrawHideForPlayer(playerid,flash);
	SetPVarInt(playerid,"PlayerHasBeenFlashed",2);
}

funkcio UpdateCameras()
{
	for(new a = 0;a<MAX_PLAYERS;a++)
	{
		if(!IsPlayerConnected(a)) continue;
		if(!IsPlayerInAnyVehicle(a)) continue;
		if(PlayerInfo[a][pAduty]) continue;
		if(PlayerInfo[a][pDuty][0]) continue;
		if(PlayerInfo[a][pBszPenz] < -1000000) continue;
		if(PlayerInfo[a][ppenz] < -1000000) continue;
/*		new kocsi = GetPlayerVehicleID(a);
  		new sajat = IsAVsKocsi(kocsi);
		if(CarInfo[sajat][cEMP] == 1)
		{
			continue;
		}		*/				
		if(GetPVarInt(a,"PlayerHasBeenFlashed") == 1)
		{
			continue;
		}
		else if (GetPVarInt(a,"PlayerHasBeenFlashed") == 2)
		{
			DeletePVar(a,"PlayerHasBeenFlashed");
			continue;
		}
		for(new b = 0;b<loaded_cameras +1;b++)
		{
			if(GetPlayerState(a) == PLAYER_STATE_DRIVER)
			{
				if(SpeedCameras[b][_active] == false) continue;
				if(IsPlayerInRangeOfPoint(a,SpeedCameras[b][_range],SpeedCameras[b][_x],SpeedCameras[b][_y],SpeedCameras[b][_z]))
				{
					new speed = GetVehicleSpeed(GetPlayerVehicleID(a));
					new limit = SpeedCameras[b][_limit];
					if(speed > limit)
					{
						TextDrawShowForPlayer(a,flash);
						SetPVarInt(a,"PlayerHasBeenFlashed",1);
						SetTimerEx("RemoveFlash",CAMERA_BEVILLANAS,false,"i",a);
						PlayerPlaySound(a, 1132, 0.0, 0.0, 0.0);
						new Buntica;
						new bszamolas  = speed - limit;

						if(bszamolas < 20)
						{
							SCM(a,COL_MKEK,"=====[ TRAFIPAX ]=====");
							SCM(a,COL_MKEK,"Figyelmeztetes, a megengedett sebesség fölött haladtál!");
							SendFormatMessage(a, COLOR_LIGHTRED, "Sebességed: %d km/h", speed);
							SendFormatMessage(a, COLOR_LIGHTRED, "Sebességkorlát: %d km/h", limit);
							SCM(a,COL_MKEK,"Tájékoztatási határ, büntetes nincs! Legközelebb tartsa be a sebességkorlátozást!");
							SendClientMessage(a, COLOR_WHITE, " ");
							break;
						}
						else
							Buntica = ((speed/limit - 1) * 5) * SpeedCameras[b][_fine];

						if(SpeedCameras[b][_hovamenjen] == 0)
						{
							FInfo[ FRAKCIO_LSPD ][fPenz] += SpeedCameras[b][_fine] + Buntica;
						}
						SpeedCameras[b][_eddiggyujtott] += SpeedCameras[b][_fine] + Buntica;
						SaveCamera(b);
						if(PlayerInfo[a][pBsz] == 0)
						{
							new string[256];
							new vid = JarmuID(GetPlayerVehicleID(a), a);
							GiveMoney(a, -(SpeedCameras[b][_fine]+Buntica));
							new TrafipaxID = SpeedCameras[b][_id];
							format(string, sizeof(string), "**=[TRAFI]=**: A %d számú álló trafi bemérte %s %s típusú gépjármûvét: (%d km/h)-val",TrafipaxID, VehicleNames[vInfo[vid][vModel] - 400],speed);
							format(string, sizeof(string), "**=[TRAFI]=**: Rendszám: %d | Sebességtúllépés: %d km/h | Sebességkorlát: %d km/h | Büntetés: $%d", GetPlayerVehicleID(a),bszamolas,limit,SpeedCameras[b][_fine]);
							FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, string);
							SCM(a,COL_MKEK, "=====[ TRAFIPAX ]=====");
							SCM(a,COL_MKEK, "Figyelmeztetes, a megengedett sebesség fölött haladtál!");
							SendFormatMessage(a, COLOR_LIGHTRED, "Sebességed: %d km/h", speed);
							SendFormatMessage(a, COLOR_LIGHTRED, "Sebességkorlát: %d km/h", limit);
							SendFormatMessage(a, COLOR_LIGHTRED, "Büntetésed: $%d", SpeedCameras[b][_fine] + Buntica);
						}
						if(PlayerInfo[a][pBszPenz] != 0)
						{
							new string[256];
							new vid = JarmuID(GetPlayerVehicleID(a), a);
							PlayerInfo[a][pBszPenz] -= SpeedCameras[b][_fine] + Buntica;
							new TrafipaxID = SpeedCameras[b][_id];
							format(string, sizeof(string), "**=[TRAFI]=**: A %d számú álló trafi bemérte %s %s típusú gépjármûvét: (%d km/h)-val",TrafipaxID, VehicleNames[vInfo[vid][vModel] - 400],speed);
							format(string, sizeof(string), "**=[TRAFI]=**: Rendszám: %d | Sebességtúllépés: %d km/h | Sebességkorlát: %d km/h | Büntetés: $%d", GetPlayerVehicleID(a),bszamolas,limit,SpeedCameras[b][_fine]);
							FrakcioUzenet(COLOR_WHITE, FRAKCIO_LSPD, string);
							SCM(a,COL_MKEK, "=====[ TRAFIPAX ]=====");
							SCM(a,COL_MKEK, "Figyelmeztetes, a megengedett sebesség fölött haladtál!");
							SendFormatMessage(a, COLOR_LIGHTRED, "Sebességed: %d km/h", speed);
							SendFormatMessage(a, COLOR_LIGHTRED, "Sebességkorlát: %d km/h", limit);
							SendFormatMessage(a, COLOR_LIGHTRED, "Büntetésed: $%d", SpeedCameras[b][_fine] + Buntica);
						}
					}
				}
			}
		}
	}
}

funkcio SpeedHack()
{
	foreach(Player, x)
	{	
		if(IsPlayerInAnyVehicle(x) && GetPlayerState(x) == PLAYER_STATE_DRIVER)
		{
			new sebesseg = GetVehicleSpeed(GetPlayerVehicleID(x));
			new stringMSG[64] = "<< FIGYELEM! Egy játékos átlépte a hangsebességet >>";
			if(sebesseg > CHEATER_MAX_SPEED && !IsARepulo(GetPlayerVehicleID(x)))
			{
				AdminUzenet(COLOR_LIGHTRED,1,"%s", stringMSG);
				AdminUzenet(COLOR_LIGHTRED,1,"<<Játékos: [%d]%s. Sebessége: %d>>", x,  JatekosNev(x), sebesseg);
			}
		}
	}
	return 1;
}
